
FreeRTOSDemoProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08007330  08007330  00008330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077f4  080077f4  00009038  2**0
                  CONTENTS
  4 .ARM          00000008  080077f4  080077f4  000087f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077fc  080077fc  00009038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077fc  080077fc  000087fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007800  08007800  00008800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  08007804  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009038  2**0
                  CONTENTS
 10 .bss          00019288  20000038  20000038  00009038  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200192c0  200192c0  00009038  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009038  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013d4f  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000320e  00000000  00000000  0001cdb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011f8  00000000  00000000  0001ffc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfc  00000000  00000000  000211c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023072  00000000  00000000  00021fbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000153af  00000000  00000000  0004502e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d46a4  00000000  00000000  0005a3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ea81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c18  00000000  00000000  0012eac4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  001336dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000038 	.word	0x20000038
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007318 	.word	0x08007318

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000003c 	.word	0x2000003c
 80001cc:	08007318 	.word	0x08007318

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_drsub>:
 80001f4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f8:	e002      	b.n	8000200 <__adddf3>
 80001fa:	bf00      	nop

080001fc <__aeabi_dsub>:
 80001fc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000200 <__adddf3>:
 8000200:	b530      	push	{r4, r5, lr}
 8000202:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000206:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800020a:	ea94 0f05 	teq	r4, r5
 800020e:	bf08      	it	eq
 8000210:	ea90 0f02 	teqeq	r0, r2
 8000214:	bf1f      	itttt	ne
 8000216:	ea54 0c00 	orrsne.w	ip, r4, r0
 800021a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000222:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000226:	f000 80e2 	beq.w	80003ee <__adddf3+0x1ee>
 800022a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000232:	bfb8      	it	lt
 8000234:	426d      	neglt	r5, r5
 8000236:	dd0c      	ble.n	8000252 <__adddf3+0x52>
 8000238:	442c      	add	r4, r5
 800023a:	ea80 0202 	eor.w	r2, r0, r2
 800023e:	ea81 0303 	eor.w	r3, r1, r3
 8000242:	ea82 0000 	eor.w	r0, r2, r0
 8000246:	ea83 0101 	eor.w	r1, r3, r1
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	2d36      	cmp	r5, #54	@ 0x36
 8000254:	bf88      	it	hi
 8000256:	bd30      	pophi	{r4, r5, pc}
 8000258:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800025c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000260:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000264:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x70>
 800026a:	4240      	negs	r0, r0
 800026c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000270:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000274:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000278:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x84>
 800027e:	4252      	negs	r2, r2
 8000280:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000284:	ea94 0f05 	teq	r4, r5
 8000288:	f000 80a7 	beq.w	80003da <__adddf3+0x1da>
 800028c:	f1a4 0401 	sub.w	r4, r4, #1
 8000290:	f1d5 0e20 	rsbs	lr, r5, #32
 8000294:	db0d      	blt.n	80002b2 <__adddf3+0xb2>
 8000296:	fa02 fc0e 	lsl.w	ip, r2, lr
 800029a:	fa22 f205 	lsr.w	r2, r2, r5
 800029e:	1880      	adds	r0, r0, r2
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a8:	1880      	adds	r0, r0, r2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	4159      	adcs	r1, r3
 80002b0:	e00e      	b.n	80002d0 <__adddf3+0xd0>
 80002b2:	f1a5 0520 	sub.w	r5, r5, #32
 80002b6:	f10e 0e20 	add.w	lr, lr, #32
 80002ba:	2a01      	cmp	r2, #1
 80002bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c0:	bf28      	it	cs
 80002c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c6:	fa43 f305 	asr.w	r3, r3, r5
 80002ca:	18c0      	adds	r0, r0, r3
 80002cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002d4:	d507      	bpl.n	80002e6 <__adddf3+0xe6>
 80002d6:	f04f 0e00 	mov.w	lr, #0
 80002da:	f1dc 0c00 	rsbs	ip, ip, #0
 80002de:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002e2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ea:	d31b      	bcc.n	8000324 <__adddf3+0x124>
 80002ec:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002f0:	d30c      	bcc.n	800030c <__adddf3+0x10c>
 80002f2:	0849      	lsrs	r1, r1, #1
 80002f4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002fc:	f104 0401 	add.w	r4, r4, #1
 8000300:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000304:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000308:	f080 809a 	bcs.w	8000440 <__adddf3+0x240>
 800030c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000310:	bf08      	it	eq
 8000312:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000316:	f150 0000 	adcs.w	r0, r0, #0
 800031a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031e:	ea41 0105 	orr.w	r1, r1, r5
 8000322:	bd30      	pop	{r4, r5, pc}
 8000324:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000328:	4140      	adcs	r0, r0
 800032a:	eb41 0101 	adc.w	r1, r1, r1
 800032e:	3c01      	subs	r4, #1
 8000330:	bf28      	it	cs
 8000332:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000336:	d2e9      	bcs.n	800030c <__adddf3+0x10c>
 8000338:	f091 0f00 	teq	r1, #0
 800033c:	bf04      	itt	eq
 800033e:	4601      	moveq	r1, r0
 8000340:	2000      	moveq	r0, #0
 8000342:	fab1 f381 	clz	r3, r1
 8000346:	bf08      	it	eq
 8000348:	3320      	addeq	r3, #32
 800034a:	f1a3 030b 	sub.w	r3, r3, #11
 800034e:	f1b3 0220 	subs.w	r2, r3, #32
 8000352:	da0c      	bge.n	800036e <__adddf3+0x16e>
 8000354:	320c      	adds	r2, #12
 8000356:	dd08      	ble.n	800036a <__adddf3+0x16a>
 8000358:	f102 0c14 	add.w	ip, r2, #20
 800035c:	f1c2 020c 	rsb	r2, r2, #12
 8000360:	fa01 f00c 	lsl.w	r0, r1, ip
 8000364:	fa21 f102 	lsr.w	r1, r1, r2
 8000368:	e00c      	b.n	8000384 <__adddf3+0x184>
 800036a:	f102 0214 	add.w	r2, r2, #20
 800036e:	bfd8      	it	le
 8000370:	f1c2 0c20 	rsble	ip, r2, #32
 8000374:	fa01 f102 	lsl.w	r1, r1, r2
 8000378:	fa20 fc0c 	lsr.w	ip, r0, ip
 800037c:	bfdc      	itt	le
 800037e:	ea41 010c 	orrle.w	r1, r1, ip
 8000382:	4090      	lslle	r0, r2
 8000384:	1ae4      	subs	r4, r4, r3
 8000386:	bfa2      	ittt	ge
 8000388:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800038c:	4329      	orrge	r1, r5
 800038e:	bd30      	popge	{r4, r5, pc}
 8000390:	ea6f 0404 	mvn.w	r4, r4
 8000394:	3c1f      	subs	r4, #31
 8000396:	da1c      	bge.n	80003d2 <__adddf3+0x1d2>
 8000398:	340c      	adds	r4, #12
 800039a:	dc0e      	bgt.n	80003ba <__adddf3+0x1ba>
 800039c:	f104 0414 	add.w	r4, r4, #20
 80003a0:	f1c4 0220 	rsb	r2, r4, #32
 80003a4:	fa20 f004 	lsr.w	r0, r0, r4
 80003a8:	fa01 f302 	lsl.w	r3, r1, r2
 80003ac:	ea40 0003 	orr.w	r0, r0, r3
 80003b0:	fa21 f304 	lsr.w	r3, r1, r4
 80003b4:	ea45 0103 	orr.w	r1, r5, r3
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f1c4 040c 	rsb	r4, r4, #12
 80003be:	f1c4 0220 	rsb	r2, r4, #32
 80003c2:	fa20 f002 	lsr.w	r0, r0, r2
 80003c6:	fa01 f304 	lsl.w	r3, r1, r4
 80003ca:	ea40 0003 	orr.w	r0, r0, r3
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	fa21 f004 	lsr.w	r0, r1, r4
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	f094 0f00 	teq	r4, #0
 80003de:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003e2:	bf06      	itte	eq
 80003e4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e8:	3401      	addeq	r4, #1
 80003ea:	3d01      	subne	r5, #1
 80003ec:	e74e      	b.n	800028c <__adddf3+0x8c>
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf18      	it	ne
 80003f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f8:	d029      	beq.n	800044e <__adddf3+0x24e>
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	d005      	beq.n	8000412 <__adddf3+0x212>
 8000406:	ea54 0c00 	orrs.w	ip, r4, r0
 800040a:	bf04      	itt	eq
 800040c:	4619      	moveq	r1, r3
 800040e:	4610      	moveq	r0, r2
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	ea91 0f03 	teq	r1, r3
 8000416:	bf1e      	ittt	ne
 8000418:	2100      	movne	r1, #0
 800041a:	2000      	movne	r0, #0
 800041c:	bd30      	popne	{r4, r5, pc}
 800041e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000422:	d105      	bne.n	8000430 <__adddf3+0x230>
 8000424:	0040      	lsls	r0, r0, #1
 8000426:	4149      	adcs	r1, r1
 8000428:	bf28      	it	cs
 800042a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000434:	bf3c      	itt	cc
 8000436:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800043a:	bd30      	popcc	{r4, r5, pc}
 800043c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000440:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000444:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000448:	f04f 0000 	mov.w	r0, #0
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000452:	bf1a      	itte	ne
 8000454:	4619      	movne	r1, r3
 8000456:	4610      	movne	r0, r2
 8000458:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800045c:	bf1c      	itt	ne
 800045e:	460b      	movne	r3, r1
 8000460:	4602      	movne	r2, r0
 8000462:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000466:	bf06      	itte	eq
 8000468:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800046c:	ea91 0f03 	teqeq	r1, r3
 8000470:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	bf00      	nop

08000478 <__aeabi_ui2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048c:	f04f 0500 	mov.w	r5, #0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e750      	b.n	8000338 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_i2d>:
 8000498:	f090 0f00 	teq	r0, #0
 800049c:	bf04      	itt	eq
 800049e:	2100      	moveq	r1, #0
 80004a0:	4770      	bxeq	lr
 80004a2:	b530      	push	{r4, r5, lr}
 80004a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ac:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004b0:	bf48      	it	mi
 80004b2:	4240      	negmi	r0, r0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e73e      	b.n	8000338 <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_f2d>:
 80004bc:	0042      	lsls	r2, r0, #1
 80004be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004c2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ca:	bf1f      	itttt	ne
 80004cc:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004d0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004d4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d8:	4770      	bxne	lr
 80004da:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004de:	bf08      	it	eq
 80004e0:	4770      	bxeq	lr
 80004e2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004e6:	bf04      	itt	eq
 80004e8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	e71c      	b.n	8000338 <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_ul2d>:
 8000500:	ea50 0201 	orrs.w	r2, r0, r1
 8000504:	bf08      	it	eq
 8000506:	4770      	bxeq	lr
 8000508:	b530      	push	{r4, r5, lr}
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	e00a      	b.n	8000526 <__aeabi_l2d+0x16>

08000510 <__aeabi_l2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800051e:	d502      	bpl.n	8000526 <__aeabi_l2d+0x16>
 8000520:	4240      	negs	r0, r0
 8000522:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000526:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800052a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800052e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000532:	f43f aed8 	beq.w	80002e6 <__adddf3+0xe6>
 8000536:	f04f 0203 	mov.w	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054e:	f1c2 0320 	rsb	r3, r2, #32
 8000552:	fa00 fc03 	lsl.w	ip, r0, r3
 8000556:	fa20 f002 	lsr.w	r0, r0, r2
 800055a:	fa01 fe03 	lsl.w	lr, r1, r3
 800055e:	ea40 000e 	orr.w	r0, r0, lr
 8000562:	fa21 f102 	lsr.w	r1, r1, r2
 8000566:	4414      	add	r4, r2
 8000568:	e6bd      	b.n	80002e6 <__adddf3+0xe6>
 800056a:	bf00      	nop

0800056c <__aeabi_dmul>:
 800056c:	b570      	push	{r4, r5, r6, lr}
 800056e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000572:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000576:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800057a:	bf1d      	ittte	ne
 800057c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000580:	ea94 0f0c 	teqne	r4, ip
 8000584:	ea95 0f0c 	teqne	r5, ip
 8000588:	f000 f8de 	bleq	8000748 <__aeabi_dmul+0x1dc>
 800058c:	442c      	add	r4, r5
 800058e:	ea81 0603 	eor.w	r6, r1, r3
 8000592:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000596:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800059a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059e:	bf18      	it	ne
 80005a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005ac:	d038      	beq.n	8000620 <__aeabi_dmul+0xb4>
 80005ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80005b2:	f04f 0500 	mov.w	r5, #0
 80005b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ba:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005c2:	f04f 0600 	mov.w	r6, #0
 80005c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ca:	f09c 0f00 	teq	ip, #0
 80005ce:	bf18      	it	ne
 80005d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005d8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005dc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005e0:	d204      	bcs.n	80005ec <__aeabi_dmul+0x80>
 80005e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e6:	416d      	adcs	r5, r5
 80005e8:	eb46 0606 	adc.w	r6, r6, r6
 80005ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000600:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000604:	bf88      	it	hi
 8000606:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800060a:	d81e      	bhi.n	800064a <__aeabi_dmul+0xde>
 800060c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000610:	bf08      	it	eq
 8000612:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000616:	f150 0000 	adcs.w	r0, r0, #0
 800061a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000624:	ea46 0101 	orr.w	r1, r6, r1
 8000628:	ea40 0002 	orr.w	r0, r0, r2
 800062c:	ea81 0103 	eor.w	r1, r1, r3
 8000630:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000634:	bfc2      	ittt	gt
 8000636:	ebd4 050c 	rsbsgt	r5, r4, ip
 800063a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063e:	bd70      	popgt	{r4, r5, r6, pc}
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f04f 0e00 	mov.w	lr, #0
 8000648:	3c01      	subs	r4, #1
 800064a:	f300 80ab 	bgt.w	80007a4 <__aeabi_dmul+0x238>
 800064e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000652:	bfde      	ittt	le
 8000654:	2000      	movle	r0, #0
 8000656:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800065a:	bd70      	pople	{r4, r5, r6, pc}
 800065c:	f1c4 0400 	rsb	r4, r4, #0
 8000660:	3c20      	subs	r4, #32
 8000662:	da35      	bge.n	80006d0 <__aeabi_dmul+0x164>
 8000664:	340c      	adds	r4, #12
 8000666:	dc1b      	bgt.n	80006a0 <__aeabi_dmul+0x134>
 8000668:	f104 0414 	add.w	r4, r4, #20
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f305 	lsl.w	r3, r0, r5
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f205 	lsl.w	r2, r1, r5
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	fa21 f604 	lsr.w	r6, r1, r4
 8000690:	eb42 0106 	adc.w	r1, r2, r6
 8000694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000698:	bf08      	it	eq
 800069a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f1c4 040c 	rsb	r4, r4, #12
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f304 	lsl.w	r3, r0, r4
 80006ac:	fa20 f005 	lsr.w	r0, r0, r5
 80006b0:	fa01 f204 	lsl.w	r2, r1, r4
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	f141 0100 	adc.w	r1, r1, #0
 80006c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c8:	bf08      	it	eq
 80006ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ce:	bd70      	pop	{r4, r5, r6, pc}
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f205 	lsl.w	r2, r0, r5
 80006d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006dc:	fa20 f304 	lsr.w	r3, r0, r4
 80006e0:	fa01 f205 	lsl.w	r2, r1, r5
 80006e4:	ea43 0302 	orr.w	r3, r3, r2
 80006e8:	fa21 f004 	lsr.w	r0, r1, r4
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006f0:	fa21 f204 	lsr.w	r2, r1, r4
 80006f4:	ea20 0002 	bic.w	r0, r0, r2
 80006f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000700:	bf08      	it	eq
 8000702:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000706:	bd70      	pop	{r4, r5, r6, pc}
 8000708:	f094 0f00 	teq	r4, #0
 800070c:	d10f      	bne.n	800072e <__aeabi_dmul+0x1c2>
 800070e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000712:	0040      	lsls	r0, r0, #1
 8000714:	eb41 0101 	adc.w	r1, r1, r1
 8000718:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800071c:	bf08      	it	eq
 800071e:	3c01      	subeq	r4, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1a6>
 8000722:	ea41 0106 	orr.w	r1, r1, r6
 8000726:	f095 0f00 	teq	r5, #0
 800072a:	bf18      	it	ne
 800072c:	4770      	bxne	lr
 800072e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000732:	0052      	lsls	r2, r2, #1
 8000734:	eb43 0303 	adc.w	r3, r3, r3
 8000738:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800073c:	bf08      	it	eq
 800073e:	3d01      	subeq	r5, #1
 8000740:	d0f7      	beq.n	8000732 <__aeabi_dmul+0x1c6>
 8000742:	ea43 0306 	orr.w	r3, r3, r6
 8000746:	4770      	bx	lr
 8000748:	ea94 0f0c 	teq	r4, ip
 800074c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000750:	bf18      	it	ne
 8000752:	ea95 0f0c 	teqne	r5, ip
 8000756:	d00c      	beq.n	8000772 <__aeabi_dmul+0x206>
 8000758:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075c:	bf18      	it	ne
 800075e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000762:	d1d1      	bne.n	8000708 <__aeabi_dmul+0x19c>
 8000764:	ea81 0103 	eor.w	r1, r1, r3
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	f04f 0000 	mov.w	r0, #0
 8000770:	bd70      	pop	{r4, r5, r6, pc}
 8000772:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000776:	bf06      	itte	eq
 8000778:	4610      	moveq	r0, r2
 800077a:	4619      	moveq	r1, r3
 800077c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000780:	d019      	beq.n	80007b6 <__aeabi_dmul+0x24a>
 8000782:	ea94 0f0c 	teq	r4, ip
 8000786:	d102      	bne.n	800078e <__aeabi_dmul+0x222>
 8000788:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800078c:	d113      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 800078e:	ea95 0f0c 	teq	r5, ip
 8000792:	d105      	bne.n	80007a0 <__aeabi_dmul+0x234>
 8000794:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000798:	bf1c      	itt	ne
 800079a:	4610      	movne	r0, r2
 800079c:	4619      	movne	r1, r3
 800079e:	d10a      	bne.n	80007b6 <__aeabi_dmul+0x24a>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ac:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ba:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007be:	bd70      	pop	{r4, r5, r6, pc}

080007c0 <__aeabi_ddiv>:
 80007c0:	b570      	push	{r4, r5, r6, lr}
 80007c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ce:	bf1d      	ittte	ne
 80007d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d4:	ea94 0f0c 	teqne	r4, ip
 80007d8:	ea95 0f0c 	teqne	r5, ip
 80007dc:	f000 f8a7 	bleq	800092e <__aeabi_ddiv+0x16e>
 80007e0:	eba4 0405 	sub.w	r4, r4, r5
 80007e4:	ea81 0e03 	eor.w	lr, r1, r3
 80007e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007f0:	f000 8088 	beq.w	8000904 <__aeabi_ddiv+0x144>
 80007f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f8:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000800:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000804:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000808:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800080c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000810:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000814:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000818:	429d      	cmp	r5, r3
 800081a:	bf08      	it	eq
 800081c:	4296      	cmpeq	r6, r2
 800081e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000822:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000826:	d202      	bcs.n	800082e <__aeabi_ddiv+0x6e>
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	1ab6      	subs	r6, r6, r2
 8000830:	eb65 0503 	sbc.w	r5, r5, r3
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800083e:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000842:	ebb6 0e02 	subs.w	lr, r6, r2
 8000846:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084a:	bf22      	ittt	cs
 800084c:	1ab6      	subcs	r6, r6, r2
 800084e:	4675      	movcs	r5, lr
 8000850:	ea40 000c 	orrcs.w	r0, r0, ip
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	ebb6 0e02 	subs.w	lr, r6, r2
 800085e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000862:	bf22      	ittt	cs
 8000864:	1ab6      	subcs	r6, r6, r2
 8000866:	4675      	movcs	r5, lr
 8000868:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	ebb6 0e02 	subs.w	lr, r6, r2
 8000876:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087a:	bf22      	ittt	cs
 800087c:	1ab6      	subcs	r6, r6, r2
 800087e:	4675      	movcs	r5, lr
 8000880:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	ebb6 0e02 	subs.w	lr, r6, r2
 800088e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000892:	bf22      	ittt	cs
 8000894:	1ab6      	subcs	r6, r6, r2
 8000896:	4675      	movcs	r5, lr
 8000898:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800089c:	ea55 0e06 	orrs.w	lr, r5, r6
 80008a0:	d018      	beq.n	80008d4 <__aeabi_ddiv+0x114>
 80008a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008be:	d1c0      	bne.n	8000842 <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	d10b      	bne.n	80008de <__aeabi_ddiv+0x11e>
 80008c6:	ea41 0100 	orr.w	r1, r1, r0
 80008ca:	f04f 0000 	mov.w	r0, #0
 80008ce:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008d2:	e7b6      	b.n	8000842 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	bf04      	itt	eq
 80008da:	4301      	orreq	r1, r0
 80008dc:	2000      	moveq	r0, #0
 80008de:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008e2:	bf88      	it	hi
 80008e4:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008e8:	f63f aeaf 	bhi.w	800064a <__aeabi_dmul+0xde>
 80008ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80008f0:	bf04      	itt	eq
 80008f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008fa:	f150 0000 	adcs.w	r0, r0, #0
 80008fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000908:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800090c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000910:	bfc2      	ittt	gt
 8000912:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000916:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091a:	bd70      	popgt	{r4, r5, r6, pc}
 800091c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000920:	f04f 0e00 	mov.w	lr, #0
 8000924:	3c01      	subs	r4, #1
 8000926:	e690      	b.n	800064a <__aeabi_dmul+0xde>
 8000928:	ea45 0e06 	orr.w	lr, r5, r6
 800092c:	e68d      	b.n	800064a <__aeabi_dmul+0xde>
 800092e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000932:	ea94 0f0c 	teq	r4, ip
 8000936:	bf08      	it	eq
 8000938:	ea95 0f0c 	teqeq	r5, ip
 800093c:	f43f af3b 	beq.w	80007b6 <__aeabi_dmul+0x24a>
 8000940:	ea94 0f0c 	teq	r4, ip
 8000944:	d10a      	bne.n	800095c <__aeabi_ddiv+0x19c>
 8000946:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800094a:	f47f af34 	bne.w	80007b6 <__aeabi_dmul+0x24a>
 800094e:	ea95 0f0c 	teq	r5, ip
 8000952:	f47f af25 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e72c      	b.n	80007b6 <__aeabi_dmul+0x24a>
 800095c:	ea95 0f0c 	teq	r5, ip
 8000960:	d106      	bne.n	8000970 <__aeabi_ddiv+0x1b0>
 8000962:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000966:	f43f aefd 	beq.w	8000764 <__aeabi_dmul+0x1f8>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e722      	b.n	80007b6 <__aeabi_dmul+0x24a>
 8000970:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000974:	bf18      	it	ne
 8000976:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800097a:	f47f aec5 	bne.w	8000708 <__aeabi_dmul+0x19c>
 800097e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000982:	f47f af0d 	bne.w	80007a0 <__aeabi_dmul+0x234>
 8000986:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800098a:	f47f aeeb 	bne.w	8000764 <__aeabi_dmul+0x1f8>
 800098e:	e712      	b.n	80007b6 <__aeabi_dmul+0x24a>

08000990 <__aeabi_d2iz>:
 8000990:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000994:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000998:	d215      	bcs.n	80009c6 <__aeabi_d2iz+0x36>
 800099a:	d511      	bpl.n	80009c0 <__aeabi_d2iz+0x30>
 800099c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a4:	d912      	bls.n	80009cc <__aeabi_d2iz+0x3c>
 80009a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009b2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009b6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ba:	bf18      	it	ne
 80009bc:	4240      	negne	r0, r0
 80009be:	4770      	bx	lr
 80009c0:	f04f 0000 	mov.w	r0, #0
 80009c4:	4770      	bx	lr
 80009c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ca:	d105      	bne.n	80009d8 <__aeabi_d2iz+0x48>
 80009cc:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	bf08      	it	eq
 80009d2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009d6:	4770      	bx	lr
 80009d8:	f04f 0000 	mov.w	r0, #0
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop

080009e0 <__aeabi_uldivmod>:
 80009e0:	b953      	cbnz	r3, 80009f8 <__aeabi_uldivmod+0x18>
 80009e2:	b94a      	cbnz	r2, 80009f8 <__aeabi_uldivmod+0x18>
 80009e4:	2900      	cmp	r1, #0
 80009e6:	bf08      	it	eq
 80009e8:	2800      	cmpeq	r0, #0
 80009ea:	bf1c      	itt	ne
 80009ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009f4:	f000 b96a 	b.w	8000ccc <__aeabi_idiv0>
 80009f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80009fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a00:	f000 f806 	bl	8000a10 <__udivmoddi4>
 8000a04:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a0c:	b004      	add	sp, #16
 8000a0e:	4770      	bx	lr

08000a10 <__udivmoddi4>:
 8000a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a14:	9d08      	ldr	r5, [sp, #32]
 8000a16:	460c      	mov	r4, r1
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d14e      	bne.n	8000aba <__udivmoddi4+0xaa>
 8000a1c:	4694      	mov	ip, r2
 8000a1e:	458c      	cmp	ip, r1
 8000a20:	4686      	mov	lr, r0
 8000a22:	fab2 f282 	clz	r2, r2
 8000a26:	d962      	bls.n	8000aee <__udivmoddi4+0xde>
 8000a28:	b14a      	cbz	r2, 8000a3e <__udivmoddi4+0x2e>
 8000a2a:	f1c2 0320 	rsb	r3, r2, #32
 8000a2e:	4091      	lsls	r1, r2
 8000a30:	fa20 f303 	lsr.w	r3, r0, r3
 8000a34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a38:	4319      	orrs	r1, r3
 8000a3a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f f68c 	uxth.w	r6, ip
 8000a46:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a4a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a4e:	fb07 1114 	mls	r1, r7, r4, r1
 8000a52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a56:	fb04 f106 	mul.w	r1, r4, r6
 8000a5a:	4299      	cmp	r1, r3
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x64>
 8000a5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a62:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a66:	f080 8112 	bcs.w	8000c8e <__udivmoddi4+0x27e>
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	f240 810f 	bls.w	8000c8e <__udivmoddi4+0x27e>
 8000a70:	3c02      	subs	r4, #2
 8000a72:	4463      	add	r3, ip
 8000a74:	1a59      	subs	r1, r3, r1
 8000a76:	fa1f f38e 	uxth.w	r3, lr
 8000a7a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a7e:	fb07 1110 	mls	r1, r7, r0, r1
 8000a82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a86:	fb00 f606 	mul.w	r6, r0, r6
 8000a8a:	429e      	cmp	r6, r3
 8000a8c:	d90a      	bls.n	8000aa4 <__udivmoddi4+0x94>
 8000a8e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a92:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a96:	f080 80fc 	bcs.w	8000c92 <__udivmoddi4+0x282>
 8000a9a:	429e      	cmp	r6, r3
 8000a9c:	f240 80f9 	bls.w	8000c92 <__udivmoddi4+0x282>
 8000aa0:	4463      	add	r3, ip
 8000aa2:	3802      	subs	r0, #2
 8000aa4:	1b9b      	subs	r3, r3, r6
 8000aa6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000aaa:	2100      	movs	r1, #0
 8000aac:	b11d      	cbz	r5, 8000ab6 <__udivmoddi4+0xa6>
 8000aae:	40d3      	lsrs	r3, r2
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	e9c5 3200 	strd	r3, r2, [r5]
 8000ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d905      	bls.n	8000aca <__udivmoddi4+0xba>
 8000abe:	b10d      	cbz	r5, 8000ac4 <__udivmoddi4+0xb4>
 8000ac0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4608      	mov	r0, r1
 8000ac8:	e7f5      	b.n	8000ab6 <__udivmoddi4+0xa6>
 8000aca:	fab3 f183 	clz	r1, r3
 8000ace:	2900      	cmp	r1, #0
 8000ad0:	d146      	bne.n	8000b60 <__udivmoddi4+0x150>
 8000ad2:	42a3      	cmp	r3, r4
 8000ad4:	d302      	bcc.n	8000adc <__udivmoddi4+0xcc>
 8000ad6:	4290      	cmp	r0, r2
 8000ad8:	f0c0 80f0 	bcc.w	8000cbc <__udivmoddi4+0x2ac>
 8000adc:	1a86      	subs	r6, r0, r2
 8000ade:	eb64 0303 	sbc.w	r3, r4, r3
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	2d00      	cmp	r5, #0
 8000ae6:	d0e6      	beq.n	8000ab6 <__udivmoddi4+0xa6>
 8000ae8:	e9c5 6300 	strd	r6, r3, [r5]
 8000aec:	e7e3      	b.n	8000ab6 <__udivmoddi4+0xa6>
 8000aee:	2a00      	cmp	r2, #0
 8000af0:	f040 8090 	bne.w	8000c14 <__udivmoddi4+0x204>
 8000af4:	eba1 040c 	sub.w	r4, r1, ip
 8000af8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000afc:	fa1f f78c 	uxth.w	r7, ip
 8000b00:	2101      	movs	r1, #1
 8000b02:	fbb4 f6f8 	udiv	r6, r4, r8
 8000b06:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b0a:	fb08 4416 	mls	r4, r8, r6, r4
 8000b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b12:	fb07 f006 	mul.w	r0, r7, r6
 8000b16:	4298      	cmp	r0, r3
 8000b18:	d908      	bls.n	8000b2c <__udivmoddi4+0x11c>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000b22:	d202      	bcs.n	8000b2a <__udivmoddi4+0x11a>
 8000b24:	4298      	cmp	r0, r3
 8000b26:	f200 80cd 	bhi.w	8000cc4 <__udivmoddi4+0x2b4>
 8000b2a:	4626      	mov	r6, r4
 8000b2c:	1a1c      	subs	r4, r3, r0
 8000b2e:	fa1f f38e 	uxth.w	r3, lr
 8000b32:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b36:	fb08 4410 	mls	r4, r8, r0, r4
 8000b3a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b3e:	fb00 f707 	mul.w	r7, r0, r7
 8000b42:	429f      	cmp	r7, r3
 8000b44:	d908      	bls.n	8000b58 <__udivmoddi4+0x148>
 8000b46:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b4e:	d202      	bcs.n	8000b56 <__udivmoddi4+0x146>
 8000b50:	429f      	cmp	r7, r3
 8000b52:	f200 80b0 	bhi.w	8000cb6 <__udivmoddi4+0x2a6>
 8000b56:	4620      	mov	r0, r4
 8000b58:	1bdb      	subs	r3, r3, r7
 8000b5a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5e:	e7a5      	b.n	8000aac <__udivmoddi4+0x9c>
 8000b60:	f1c1 0620 	rsb	r6, r1, #32
 8000b64:	408b      	lsls	r3, r1
 8000b66:	fa22 f706 	lsr.w	r7, r2, r6
 8000b6a:	431f      	orrs	r7, r3
 8000b6c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b70:	fa04 f301 	lsl.w	r3, r4, r1
 8000b74:	ea43 030c 	orr.w	r3, r3, ip
 8000b78:	40f4      	lsrs	r4, r6
 8000b7a:	fa00 f801 	lsl.w	r8, r0, r1
 8000b7e:	0c38      	lsrs	r0, r7, #16
 8000b80:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b84:	fbb4 fef0 	udiv	lr, r4, r0
 8000b88:	fa1f fc87 	uxth.w	ip, r7
 8000b8c:	fb00 441e 	mls	r4, r0, lr, r4
 8000b90:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b94:	fb0e f90c 	mul.w	r9, lr, ip
 8000b98:	45a1      	cmp	r9, r4
 8000b9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b9e:	d90a      	bls.n	8000bb6 <__udivmoddi4+0x1a6>
 8000ba0:	193c      	adds	r4, r7, r4
 8000ba2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ba6:	f080 8084 	bcs.w	8000cb2 <__udivmoddi4+0x2a2>
 8000baa:	45a1      	cmp	r9, r4
 8000bac:	f240 8081 	bls.w	8000cb2 <__udivmoddi4+0x2a2>
 8000bb0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000bb4:	443c      	add	r4, r7
 8000bb6:	eba4 0409 	sub.w	r4, r4, r9
 8000bba:	fa1f f983 	uxth.w	r9, r3
 8000bbe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000bc2:	fb00 4413 	mls	r4, r0, r3, r4
 8000bc6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000bca:	fb03 fc0c 	mul.w	ip, r3, ip
 8000bce:	45a4      	cmp	ip, r4
 8000bd0:	d907      	bls.n	8000be2 <__udivmoddi4+0x1d2>
 8000bd2:	193c      	adds	r4, r7, r4
 8000bd4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bd8:	d267      	bcs.n	8000caa <__udivmoddi4+0x29a>
 8000bda:	45a4      	cmp	ip, r4
 8000bdc:	d965      	bls.n	8000caa <__udivmoddi4+0x29a>
 8000bde:	3b02      	subs	r3, #2
 8000be0:	443c      	add	r4, r7
 8000be2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000be6:	fba0 9302 	umull	r9, r3, r0, r2
 8000bea:	eba4 040c 	sub.w	r4, r4, ip
 8000bee:	429c      	cmp	r4, r3
 8000bf0:	46ce      	mov	lr, r9
 8000bf2:	469c      	mov	ip, r3
 8000bf4:	d351      	bcc.n	8000c9a <__udivmoddi4+0x28a>
 8000bf6:	d04e      	beq.n	8000c96 <__udivmoddi4+0x286>
 8000bf8:	b155      	cbz	r5, 8000c10 <__udivmoddi4+0x200>
 8000bfa:	ebb8 030e 	subs.w	r3, r8, lr
 8000bfe:	eb64 040c 	sbc.w	r4, r4, ip
 8000c02:	fa04 f606 	lsl.w	r6, r4, r6
 8000c06:	40cb      	lsrs	r3, r1
 8000c08:	431e      	orrs	r6, r3
 8000c0a:	40cc      	lsrs	r4, r1
 8000c0c:	e9c5 6400 	strd	r6, r4, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	e750      	b.n	8000ab6 <__udivmoddi4+0xa6>
 8000c14:	f1c2 0320 	rsb	r3, r2, #32
 8000c18:	fa20 f103 	lsr.w	r1, r0, r3
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	fa24 f303 	lsr.w	r3, r4, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	430c      	orrs	r4, r1
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c30:	fa1f f78c 	uxth.w	r7, ip
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3110 	mls	r1, r8, r0, r3
 8000c3c:	0c23      	lsrs	r3, r4, #16
 8000c3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c42:	fb00 f107 	mul.w	r1, r0, r7
 8000c46:	4299      	cmp	r1, r3
 8000c48:	d908      	bls.n	8000c5c <__udivmoddi4+0x24c>
 8000c4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c52:	d22c      	bcs.n	8000cae <__udivmoddi4+0x29e>
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d92a      	bls.n	8000cae <__udivmoddi4+0x29e>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c64:	fb08 3311 	mls	r3, r8, r1, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb01 f307 	mul.w	r3, r1, r7
 8000c70:	42a3      	cmp	r3, r4
 8000c72:	d908      	bls.n	8000c86 <__udivmoddi4+0x276>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c7c:	d213      	bcs.n	8000ca6 <__udivmoddi4+0x296>
 8000c7e:	42a3      	cmp	r3, r4
 8000c80:	d911      	bls.n	8000ca6 <__udivmoddi4+0x296>
 8000c82:	3902      	subs	r1, #2
 8000c84:	4464      	add	r4, ip
 8000c86:	1ae4      	subs	r4, r4, r3
 8000c88:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c8c:	e739      	b.n	8000b02 <__udivmoddi4+0xf2>
 8000c8e:	4604      	mov	r4, r0
 8000c90:	e6f0      	b.n	8000a74 <__udivmoddi4+0x64>
 8000c92:	4608      	mov	r0, r1
 8000c94:	e706      	b.n	8000aa4 <__udivmoddi4+0x94>
 8000c96:	45c8      	cmp	r8, r9
 8000c98:	d2ae      	bcs.n	8000bf8 <__udivmoddi4+0x1e8>
 8000c9a:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c9e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ca2:	3801      	subs	r0, #1
 8000ca4:	e7a8      	b.n	8000bf8 <__udivmoddi4+0x1e8>
 8000ca6:	4631      	mov	r1, r6
 8000ca8:	e7ed      	b.n	8000c86 <__udivmoddi4+0x276>
 8000caa:	4603      	mov	r3, r0
 8000cac:	e799      	b.n	8000be2 <__udivmoddi4+0x1d2>
 8000cae:	4630      	mov	r0, r6
 8000cb0:	e7d4      	b.n	8000c5c <__udivmoddi4+0x24c>
 8000cb2:	46d6      	mov	lr, sl
 8000cb4:	e77f      	b.n	8000bb6 <__udivmoddi4+0x1a6>
 8000cb6:	4463      	add	r3, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	e74d      	b.n	8000b58 <__udivmoddi4+0x148>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	4623      	mov	r3, r4
 8000cc0:	4608      	mov	r0, r1
 8000cc2:	e70f      	b.n	8000ae4 <__udivmoddi4+0xd4>
 8000cc4:	3e02      	subs	r6, #2
 8000cc6:	4463      	add	r3, ip
 8000cc8:	e730      	b.n	8000b2c <__udivmoddi4+0x11c>
 8000cca:	bf00      	nop

08000ccc <__aeabi_idiv0>:
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop

08000cd0 <led_task>:
 * @note The task must be notified when a new command is available.									   *
 * @note The function utilizes software timers to control LED effects.								   *
 ******************************************************************************************************/

void led_task(void *param)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af02      	add	r7, sp, #8
 8000cd6:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;
	int freq = 2; // Frequency in Hz
 8000cd8:	2302      	movs	r3, #2
 8000cda:	60bb      	str	r3, [r7, #8]
	int period = 500; // Period in ms
 8000cdc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ce0:	617b      	str	r3, [r7, #20]

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ce6:	9300      	str	r3, [sp, #0]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	2200      	movs	r2, #0
 8000cec:	2100      	movs	r1, #0
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f005 f80a 	bl	8005d08 <xTaskGenericNotifyWait>

		// Display LED menu for the user
		xQueueSend(q_print, &msg_led_menu, portMAX_DELAY);
 8000cf4:	4b75      	ldr	r3, [pc, #468]	@ (8000ecc <led_task+0x1fc>)
 8000cf6:	6818      	ldr	r0, [r3, #0]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cfe:	4974      	ldr	r1, [pc, #464]	@ (8000ed0 <led_task+0x200>)
 8000d00:	f003 fd34 	bl	800476c <xQueueGenericSend>

		// Wait for the user to select their desired LED effect
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8000d04:	f107 030c 	add.w	r3, r7, #12
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d0c:	9200      	str	r2, [sp, #0]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	2000      	movs	r0, #0
 8000d14:	f004 fff8 	bl	8005d08 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	613b      	str	r3, [r7, #16]

		// Process command, adjust LED state, and set software timers accordingly
		if(msg->len <= 4) {
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	f200 80be 	bhi.w	8000ea2 <led_task+0x1d2>
			if(!strcmp((char*)msg->payload, "None"))			// No effect
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	496a      	ldr	r1, [pc, #424]	@ (8000ed4 <led_task+0x204>)
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fa50 	bl	80001d0 <strcmp>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d109      	bne.n	8000d4a <led_task+0x7a>
			{
				set_led_timer(effectNone);
 8000d36:	2004      	movs	r0, #4
 8000d38:	f000 f900 	bl	8000f3c <set_led_timer>
				curr_led_state = sNone;
 8000d3c:	4b66      	ldr	r3, [pc, #408]	@ (8000ed8 <led_task+0x208>)
 8000d3e:	2204      	movs	r2, #4
 8000d40:	701a      	strb	r2, [r3, #0]
				control_all_leds(LED_OFF);
 8000d42:	2000      	movs	r0, #0
 8000d44:	f000 f92c 	bl	8000fa0 <control_all_leds>
 8000d48:	e0b3      	b.n	8000eb2 <led_task+0x1e2>
			}
			else if (!strcmp((char*)msg->payload, "E1")) {		// E1 effect
 8000d4a:	693b      	ldr	r3, [r7, #16]
 8000d4c:	4963      	ldr	r1, [pc, #396]	@ (8000edc <led_task+0x20c>)
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f7ff fa3e 	bl	80001d0 <strcmp>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d106      	bne.n	8000d68 <led_task+0x98>
				curr_led_state = sEffectE1;
 8000d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ed8 <led_task+0x208>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE1);
 8000d60:	2000      	movs	r0, #0
 8000d62:	f000 f8eb 	bl	8000f3c <set_led_timer>
 8000d66:	e0a4      	b.n	8000eb2 <led_task+0x1e2>
			}
			else if (!strcmp((char*)msg->payload, "E2")) {		// E2 effect
 8000d68:	693b      	ldr	r3, [r7, #16]
 8000d6a:	495d      	ldr	r1, [pc, #372]	@ (8000ee0 <led_task+0x210>)
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fa2f 	bl	80001d0 <strcmp>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d106      	bne.n	8000d86 <led_task+0xb6>
				curr_led_state = sEffectE2;
 8000d78:	4b57      	ldr	r3, [pc, #348]	@ (8000ed8 <led_task+0x208>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE2);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f000 f8dc 	bl	8000f3c <set_led_timer>
 8000d84:	e095      	b.n	8000eb2 <led_task+0x1e2>
			}
			else if (!strcmp((char*)msg->payload, "E3")) {		// E3 effect
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	4956      	ldr	r1, [pc, #344]	@ (8000ee4 <led_task+0x214>)
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff fa20 	bl	80001d0 <strcmp>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d106      	bne.n	8000da4 <led_task+0xd4>
				curr_led_state = sEffectE3;
 8000d96:	4b50      	ldr	r3, [pc, #320]	@ (8000ed8 <led_task+0x208>)
 8000d98:	2202      	movs	r2, #2
 8000d9a:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE3);
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f000 f8cd 	bl	8000f3c <set_led_timer>
 8000da2:	e086      	b.n	8000eb2 <led_task+0x1e2>
			}
			else if (!strcmp((char*)msg->payload, "E4")) {		// E4 effect
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	4950      	ldr	r1, [pc, #320]	@ (8000ee8 <led_task+0x218>)
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff fa11 	bl	80001d0 <strcmp>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d106      	bne.n	8000dc2 <led_task+0xf2>
				curr_led_state = sEffectE4;
 8000db4:	4b48      	ldr	r3, [pc, #288]	@ (8000ed8 <led_task+0x208>)
 8000db6:	2203      	movs	r2, #3
 8000db8:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE4);
 8000dba:	2003      	movs	r0, #3
 8000dbc:	f000 f8be 	bl	8000f3c <set_led_timer>
 8000dc0:	e077      	b.n	8000eb2 <led_task+0x1e2>
			}
			else if (parse_freq_string(msg, &freq)) {			// Frequency adjustment
 8000dc2:	f107 0308 	add.w	r3, r7, #8
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	6938      	ldr	r0, [r7, #16]
 8000dca:	f000 f9dd 	bl	8001188 <parse_freq_string>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d055      	beq.n	8000e80 <led_task+0x1b0>
				// Check that there is an active effect
				if(sNone == curr_led_state) {
 8000dd4:	4b40      	ldr	r3, [pc, #256]	@ (8000ed8 <led_task+0x208>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b04      	cmp	r3, #4
 8000dda:	d108      	bne.n	8000dee <led_task+0x11e>
					xQueueSend(q_print, &msg_no_active_effect, portMAX_DELAY);
 8000ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8000ecc <led_task+0x1fc>)
 8000dde:	6818      	ldr	r0, [r3, #0]
 8000de0:	2300      	movs	r3, #0
 8000de2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000de6:	4941      	ldr	r1, [pc, #260]	@ (8000eec <led_task+0x21c>)
 8000de8:	f003 fcc0 	bl	800476c <xQueueGenericSend>
 8000dec:	e061      	b.n	8000eb2 <led_task+0x1e2>
				}
				// Check that frequency is between 1 and 10 Hz
				else if(freq > 10) {
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	2b0a      	cmp	r3, #10
 8000df2:	dd08      	ble.n	8000e06 <led_task+0x136>
					xQueueSend(q_print, &msg_inv_freq, portMAX_DELAY);
 8000df4:	4b35      	ldr	r3, [pc, #212]	@ (8000ecc <led_task+0x1fc>)
 8000df6:	6818      	ldr	r0, [r3, #0]
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dfe:	493c      	ldr	r1, [pc, #240]	@ (8000ef0 <led_task+0x220>)
 8000e00:	f003 fcb4 	bl	800476c <xQueueGenericSend>
 8000e04:	e055      	b.n	8000eb2 <led_task+0x1e2>
				}
				// Change timer frequency
				else {
					period = (1.0 / freq) * 1000;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff fb45 	bl	8000498 <__aeabi_i2d>
 8000e0e:	4602      	mov	r2, r0
 8000e10:	460b      	mov	r3, r1
 8000e12:	f04f 0000 	mov.w	r0, #0
 8000e16:	4937      	ldr	r1, [pc, #220]	@ (8000ef4 <led_task+0x224>)
 8000e18:	f7ff fcd2 	bl	80007c0 <__aeabi_ddiv>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	460b      	mov	r3, r1
 8000e20:	4610      	mov	r0, r2
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 0200 	mov.w	r2, #0
 8000e28:	4b33      	ldr	r3, [pc, #204]	@ (8000ef8 <led_task+0x228>)
 8000e2a:	f7ff fb9f 	bl	800056c <__aeabi_dmul>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	460b      	mov	r3, r1
 8000e32:	4610      	mov	r0, r2
 8000e34:	4619      	mov	r1, r3
 8000e36:	f7ff fdab 	bl	8000990 <__aeabi_d2iz>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	617b      	str	r3, [r7, #20]
					if (xTimerChangePeriod(handle_led_timer[curr_led_state], pdMS_TO_TICKS(period), 0) != pdPASS) {
 8000e3e:	4b26      	ldr	r3, [pc, #152]	@ (8000ed8 <led_task+0x208>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	461a      	mov	r2, r3
 8000e44:	4b2d      	ldr	r3, [pc, #180]	@ (8000efc <led_task+0x22c>)
 8000e46:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	4a2a      	ldr	r2, [pc, #168]	@ (8000f00 <led_task+0x230>)
 8000e56:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5a:	099a      	lsrs	r2, r3, #6
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	2300      	movs	r3, #0
 8000e62:	2104      	movs	r1, #4
 8000e64:	f005 fab2 	bl	80063cc <xTimerGenericCommand>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d021      	beq.n	8000eb2 <led_task+0x1e2>
						// If frequency update was not successful, notify the user
						xQueueSend(q_print, &msg_err_freq, portMAX_DELAY);
 8000e6e:	4b17      	ldr	r3, [pc, #92]	@ (8000ecc <led_task+0x1fc>)
 8000e70:	6818      	ldr	r0, [r3, #0]
 8000e72:	2300      	movs	r3, #0
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e78:	4922      	ldr	r1, [pc, #136]	@ (8000f04 <led_task+0x234>)
 8000e7a:	f003 fc77 	bl	800476c <xQueueGenericSend>
 8000e7e:	e018      	b.n	8000eb2 <led_task+0x1e2>
					}
				}
			}
			else if (!strcmp((char*)msg->payload, "Main"))		// Back to main menu
 8000e80:	693b      	ldr	r3, [r7, #16]
 8000e82:	4921      	ldr	r1, [pc, #132]	@ (8000f08 <led_task+0x238>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f9a3 	bl	80001d0 <strcmp>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d010      	beq.n	8000eb2 <led_task+0x1e2>
				// Do nothing
				;
			else												// Invalid response
				xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 8000e90:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <led_task+0x1fc>)
 8000e92:	6818      	ldr	r0, [r3, #0]
 8000e94:	2300      	movs	r3, #0
 8000e96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e9a:	491c      	ldr	r1, [pc, #112]	@ (8000f0c <led_task+0x23c>)
 8000e9c:	f003 fc66 	bl	800476c <xQueueGenericSend>
 8000ea0:	e007      	b.n	8000eb2 <led_task+0x1e2>
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ecc <led_task+0x1fc>)
 8000ea4:	6818      	ldr	r0, [r3, #0]
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eac:	4917      	ldr	r1, [pc, #92]	@ (8000f0c <led_task+0x23c>)
 8000eae:	f003 fc5d 	bl	800476c <xQueueGenericSend>
		}

		// Update the system state
		curr_sys_state = sMainMenu;
 8000eb2:	4b17      	ldr	r3, [pc, #92]	@ (8000f10 <led_task+0x240>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	701a      	strb	r2, [r3, #0]

		// Notify the main menu task
		xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8000eb8:	4b16      	ldr	r3, [pc, #88]	@ (8000f14 <led_task+0x244>)
 8000eba:	6818      	ldr	r0, [r3, #0]
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	f004 ff9f 	bl	8005e08 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000eca:	e70a      	b.n	8000ce2 <led_task+0x12>
 8000ecc:	200000b0 	.word	0x200000b0
 8000ed0:	20000010 	.word	0x20000010
 8000ed4:	08007578 	.word	0x08007578
 8000ed8:	20000014 	.word	0x20000014
 8000edc:	08007580 	.word	0x08007580
 8000ee0:	08007584 	.word	0x08007584
 8000ee4:	08007588 	.word	0x08007588
 8000ee8:	0800758c 	.word	0x0800758c
 8000eec:	20000004 	.word	0x20000004
 8000ef0:	2000000c 	.word	0x2000000c
 8000ef4:	3ff00000 	.word	0x3ff00000
 8000ef8:	408f4000 	.word	0x408f4000
 8000efc:	200000b8 	.word	0x200000b8
 8000f00:	10624dd3 	.word	0x10624dd3
 8000f04:	20000008 	.word	0x20000008
 8000f08:	08007590 	.word	0x08007590
 8000f0c:	20000000 	.word	0x20000000
 8000f10:	200000c9 	.word	0x200000c9
 8000f14:	200000a0 	.word	0x200000a0

08000f18 <led_callback>:
 * @note The function assumes that the timer IDs correspond directly to the LED effects to be executed *
 *       and relies on proper timer setup and management by the calling code.						   *
 ******************************************************************************************************/

void led_callback(TimerHandle_t xTimer)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
	// Get timer ID
	int id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000f20:	6878      	ldr	r0, [r7, #4]
 8000f22:	f005 fd3d 	bl	80069a0 <pvTimerGetTimerID>
 8000f26:	4603      	mov	r3, r0
 8000f28:	60fb      	str	r3, [r7, #12]

	// LED effects correspond to timer ID's
	int effect = id;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
	execute_led_effect(effect);
 8000f2e:	68b8      	ldr	r0, [r7, #8]
 8000f30:	f000 f8c4 	bl	80010bc <execute_led_effect>
}
 8000f34:	bf00      	nop
 8000f36:	3710      	adds	r7, #16
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <set_led_timer>:
 * @note This function assumes that `handle_led_timer[]` array is properly initialized and contains    *
 *       valid FreeRTOS software timer handles for each LED effect.									   *
 ******************************************************************************************************/

void set_led_timer(led_effect_t effect)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	// Turn off all timers
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	e00e      	b.n	8000f6a <set_led_timer+0x2e>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 8000f4c:	4a13      	ldr	r2, [pc, #76]	@ (8000f9c <set_led_timer+0x60>)
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	2103      	movs	r1, #3
 8000f60:	f005 fa34 	bl	80063cc <xTimerGenericCommand>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3301      	adds	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b03      	cmp	r3, #3
 8000f6e:	dded      	ble.n	8000f4c <set_led_timer+0x10>
	}

	// Start the selected timer
	if(effectNone != effect) {
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b04      	cmp	r3, #4
 8000f74:	d00e      	beq.n	8000f94 <set_led_timer+0x58>
		xTimerStart(handle_led_timer[effect], portMAX_DELAY);
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <set_led_timer+0x60>)
 8000f7a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000f7e:	f004 fb11 	bl	80055a4 <xTaskGetTickCount>
 8000f82:	4602      	mov	r2, r0
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	4620      	mov	r0, r4
 8000f90:	f005 fa1c 	bl	80063cc <xTimerGenericCommand>
	}
}
 8000f94:	bf00      	nop
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	200000b8 	.word	0x200000b8

08000fa0 <control_all_leds>:
 * 																									   *
 * @note This function assumes that the macros for each on-board LED are configured correctly.	       *
 ******************************************************************************************************/

void control_all_leds(int state)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, state);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fb2:	480f      	ldr	r0, [pc, #60]	@ (8000ff0 <control_all_leds+0x50>)
 8000fb4:	f001 fa5a 	bl	800246c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, state);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fc2:	480b      	ldr	r0, [pc, #44]	@ (8000ff0 <control_all_leds+0x50>)
 8000fc4:	f001 fa52 	bl	800246c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, state);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000fd2:	4807      	ldr	r0, [pc, #28]	@ (8000ff0 <control_all_leds+0x50>)
 8000fd4:	f001 fa4a 	bl	800246c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, state);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	461a      	mov	r2, r3
 8000fde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fe2:	4803      	ldr	r0, [pc, #12]	@ (8000ff0 <control_all_leds+0x50>)
 8000fe4:	f001 fa42 	bl	800246c <HAL_GPIO_WritePin>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40020c00 	.word	0x40020c00

08000ff4 <control_led_group>:
 * @note The provided `led_mode` specifies which LED group should be turned on (ex. LED_EVEN). The	   *
 *       other LED group (ex. LED_ODD) will be turned off.											   *
 ******************************************************************************************************/

void control_led_group(int led_mode)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	// Turn on even LEDs
	if(LED_EVEN == led_mode) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d118      	bne.n	8001034 <control_led_group+0x40>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001008:	4818      	ldr	r0, [pc, #96]	@ (800106c <control_led_group+0x78>)
 800100a:	f001 fa2f 	bl	800246c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 800100e:	2201      	movs	r2, #1
 8001010:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001014:	4815      	ldr	r0, [pc, #84]	@ (800106c <control_led_group+0x78>)
 8001016:	f001 fa29 	bl	800246c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 800101a:	2200      	movs	r2, #0
 800101c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001020:	4812      	ldr	r0, [pc, #72]	@ (800106c <control_led_group+0x78>)
 8001022:	f001 fa23 	bl	800246c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8001026:	2201      	movs	r2, #1
 8001028:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800102c:	480f      	ldr	r0, [pc, #60]	@ (800106c <control_led_group+0x78>)
 800102e:	f001 fa1d 	bl	800246c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
	}
}
 8001032:	e017      	b.n	8001064 <control_led_group+0x70>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800103a:	480c      	ldr	r0, [pc, #48]	@ (800106c <control_led_group+0x78>)
 800103c:	f001 fa16 	bl	800246c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001046:	4809      	ldr	r0, [pc, #36]	@ (800106c <control_led_group+0x78>)
 8001048:	f001 fa10 	bl	800246c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
 800104c:	2201      	movs	r2, #1
 800104e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001052:	4806      	ldr	r0, [pc, #24]	@ (800106c <control_led_group+0x78>)
 8001054:	f001 fa0a 	bl	800246c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800105e:	4803      	ldr	r0, [pc, #12]	@ (800106c <control_led_group+0x78>)
 8001060:	f001 fa04 	bl	800246c <HAL_GPIO_WritePin>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	40020c00 	.word	0x40020c00

08001070 <control_single_led>:
 * @note `config` dictates the LED states, ex. 0x05 = 0101 = Green and Red LEDs on, Orange and Blue    *
 *       LEDs off.																					   *
 ******************************************************************************************************/

void control_single_led(int config)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	// Orange		LD3			GPIO_PIN_13		0x2000  //
	// Red			LD5			GPIO_PIN_14		0x4000  //
	// Blue			LD6			GPIO_PIN_15		0x8000  //
	//////////////////////////////////////////////////////

	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	e014      	b.n	80010a8 <control_single_led+0x38>
		HAL_GPIO_WritePin(GREEN_LED_PORT, (GREEN_LED_PIN << i), ((config >> i) & 0x1));
 800107e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	b299      	uxth	r1, r3
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	fa42 f303 	asr.w	r3, r2, r3
 8001092:	b2db      	uxtb	r3, r3
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	b2db      	uxtb	r3, r3
 800109a:	461a      	mov	r2, r3
 800109c:	4806      	ldr	r0, [pc, #24]	@ (80010b8 <control_single_led+0x48>)
 800109e:	f001 f9e5 	bl	800246c <HAL_GPIO_WritePin>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	3301      	adds	r3, #1
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	dde7      	ble.n	800107e <control_single_led+0xe>
	}
}
 80010ae:	bf00      	nop
 80010b0:	bf00      	nop
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40020c00 	.word	0x40020c00

080010bc <execute_led_effect>:
 * @note This function assumes that functions `control_all_leds()`, `control_led_group()`, and 		   *
 *       `control_single_led()` are implemented to control the LEDs accordingly.			 		   *
 ******************************************************************************************************/

void execute_led_effect(int effect)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
	// Flag used for effects E1 and E2
	static int flag = 1;
	// i and used for effects E3 and E4
	static int i = 0;

	switch(effect) {
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d854      	bhi.n	8001174 <execute_led_effect+0xb8>
 80010ca:	a201      	add	r2, pc, #4	@ (adr r2, 80010d0 <execute_led_effect+0x14>)
 80010cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010d0:	080010e1 	.word	0x080010e1
 80010d4:	08001105 	.word	0x08001105
 80010d8:	08001129 	.word	0x08001129
 80010dc:	0800114f 	.word	0x0800114f
		case effectE1:
			// Flash all LEDs in unison
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 80010e0:	4b27      	ldr	r3, [pc, #156]	@ (8001180 <execute_led_effect+0xc4>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f083 0301 	eor.w	r3, r3, #1
 80010e8:	4a25      	ldr	r2, [pc, #148]	@ (8001180 <execute_led_effect+0xc4>)
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <execute_led_effect+0xc4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d003      	beq.n	80010fc <execute_led_effect+0x40>
 80010f4:	2000      	movs	r0, #0
 80010f6:	f7ff ff53 	bl	8000fa0 <control_all_leds>
			break;
 80010fa:	e03c      	b.n	8001176 <execute_led_effect+0xba>
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 80010fc:	2001      	movs	r0, #1
 80010fe:	f7ff ff4f 	bl	8000fa0 <control_all_leds>
			break;
 8001102:	e038      	b.n	8001176 <execute_led_effect+0xba>
		case effectE2:
			// Flash even and odd LEDs back and forth
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <execute_led_effect+0xc4>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f083 0301 	eor.w	r3, r3, #1
 800110c:	4a1c      	ldr	r2, [pc, #112]	@ (8001180 <execute_led_effect+0xc4>)
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <execute_led_effect+0xc4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <execute_led_effect+0x64>
 8001118:	2000      	movs	r0, #0
 800111a:	f7ff ff6b 	bl	8000ff4 <control_led_group>
			break;
 800111e:	e02a      	b.n	8001176 <execute_led_effect+0xba>
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 8001120:	2001      	movs	r0, #1
 8001122:	f7ff ff67 	bl	8000ff4 <control_led_group>
			break;
 8001126:	e026      	b.n	8001176 <execute_led_effect+0xba>
		case effectE3:
			// Move the illuminated LED around the circle of on-board LEDs
			control_single_led(0x1 << (i++ % 4));
 8001128:	4b16      	ldr	r3, [pc, #88]	@ (8001184 <execute_led_effect+0xc8>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1c5a      	adds	r2, r3, #1
 800112e:	4915      	ldr	r1, [pc, #84]	@ (8001184 <execute_led_effect+0xc8>)
 8001130:	600a      	str	r2, [r1, #0]
 8001132:	425a      	negs	r2, r3
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	f002 0203 	and.w	r2, r2, #3
 800113c:	bf58      	it	pl
 800113e:	4253      	negpl	r3, r2
 8001140:	2201      	movs	r2, #1
 8001142:	fa02 f303 	lsl.w	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff92 	bl	8001070 <control_single_led>
			break;
 800114c:	e013      	b.n	8001176 <execute_led_effect+0xba>
		case effectE4:
			// Move the illuminated LED around the circle of on-board LEDs in opposite direction of effect E3
			control_single_led(0x08 >> (i++ % 4));
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <execute_led_effect+0xc8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	490b      	ldr	r1, [pc, #44]	@ (8001184 <execute_led_effect+0xc8>)
 8001156:	600a      	str	r2, [r1, #0]
 8001158:	425a      	negs	r2, r3
 800115a:	f003 0303 	and.w	r3, r3, #3
 800115e:	f002 0203 	and.w	r2, r2, #3
 8001162:	bf58      	it	pl
 8001164:	4253      	negpl	r3, r2
 8001166:	2208      	movs	r2, #8
 8001168:	fa42 f303 	asr.w	r3, r2, r3
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff7f 	bl	8001070 <control_single_led>
			break;
 8001172:	e000      	b.n	8001176 <execute_led_effect+0xba>
		default:
			break;
 8001174:	bf00      	nop
	}
}
 8001176:	bf00      	nop
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000018 	.word	0x20000018
 8001184:	20000054 	.word	0x20000054

08001188 <parse_freq_string>:
 *       validate the value range explicitly. It relies on other components to handle invalid values.  *
 ******************************************************************************************************/


int parse_freq_string(message_t *msg, int *freq_Hz)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
    // Check if the input string is at least 2 characters long (F and one digit)
    int len = strlen((char *)msg->payload);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f825 	bl	80001e4 <strlen>
 800119a:	4603      	mov	r3, r0
 800119c:	60bb      	str	r3, [r7, #8]
    if (len < 2 || len > 4) return 0;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	dd02      	ble.n	80011aa <parse_freq_string+0x22>
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	2b04      	cmp	r3, #4
 80011a8:	dd01      	ble.n	80011ae <parse_freq_string+0x26>
 80011aa:	2300      	movs	r3, #0
 80011ac:	e025      	b.n	80011fa <parse_freq_string+0x72>

    // Check if the first character is 'F'
    if (msg->payload[0] != 'F') return 0;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b46      	cmp	r3, #70	@ 0x46
 80011b4:	d001      	beq.n	80011ba <parse_freq_string+0x32>
 80011b6:	2300      	movs	r3, #0
 80011b8:	e01f      	b.n	80011fa <parse_freq_string+0x72>

    // Check if the remaining characters are digits
    for (int i = 1; i < len; i++)
 80011ba:	2301      	movs	r3, #1
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	e010      	b.n	80011e2 <parse_freq_string+0x5a>
    {
        if (!isdigit(msg->payload[i])) return 0;
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4413      	add	r3, r2
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	3301      	adds	r3, #1
 80011ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <parse_freq_string+0x7c>)
 80011cc:	4413      	add	r3, r2
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f003 0304 	and.w	r3, r3, #4
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <parse_freq_string+0x54>
 80011d8:	2300      	movs	r3, #0
 80011da:	e00e      	b.n	80011fa <parse_freq_string+0x72>
    for (int i = 1; i < len; i++)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3301      	adds	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fa      	ldr	r2, [r7, #12]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	dbea      	blt.n	80011c0 <parse_freq_string+0x38>
    }

    // Convert the numeric part to an integer
    *freq_Hz = freq_str_to_int(msg, len);
 80011ea:	68b9      	ldr	r1, [r7, #8]
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 f80b 	bl	8001208 <freq_str_to_int>
 80011f2:	4602      	mov	r2, r0
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	601a      	str	r2, [r3, #0]
    return 1;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	080076f0 	.word	0x080076f0

08001208 <freq_str_to_int>:
 *       invalid formats or edge cases (e.g., non-numeric characters). It relies on proper validation  *
 *       by the calling function.																	   *
 ******************************************************************************************************/

int freq_str_to_int(message_t *msg, int len)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
	int ret = 0;
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<len; i++) {
 8001216:	2301      	movs	r3, #1
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	e00f      	b.n	800123c <freq_str_to_int+0x34>
		ret = ret * 10 + (msg->payload[i] - '0'); // Convert from ASCII to an integer
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	4613      	mov	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4413      	add	r3, r2
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	4619      	mov	r1, r3
 8001228:	687a      	ldr	r2, [r7, #4]
 800122a:	68bb      	ldr	r3, [r7, #8]
 800122c:	4413      	add	r3, r2
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	3b30      	subs	r3, #48	@ 0x30
 8001232:	440b      	add	r3, r1
 8001234:	60fb      	str	r3, [r7, #12]
	for(int i=1; i<len; i++) {
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	3301      	adds	r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	dbeb      	blt.n	800121c <freq_str_to_int+0x14>
	}

	return ret;
 8001244:	68fb      	ldr	r3, [r7, #12]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3714      	adds	r7, #20
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <main_menu_task>:
 *       command is available.                                                                         *
 * @note The main menu is displayed, and the user input is processed. Invalid inputs are handled and   *
 * an error message is sent to the print queue.                                                        *
 ******************************************************************************************************/
void main_menu_task(void *param)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b088      	sub	sp, #32
 8001258:	af02      	add	r7, sp, #8
 800125a:	6078      	str	r0, [r7, #4]
	int option;

	while(1) {

		// Present the main menu to the user
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 800125c:	4b32      	ldr	r3, [pc, #200]	@ (8001328 <main_menu_task+0xd4>)
 800125e:	6818      	ldr	r0, [r3, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001266:	4931      	ldr	r1, [pc, #196]	@ (800132c <main_menu_task+0xd8>)
 8001268:	f003 fa80 	bl	800476c <xQueueGenericSend>

		// Wait for user to select a menu option
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001274:	9200      	str	r2, [sp, #0]
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2000      	movs	r0, #0
 800127c:	f004 fd44 	bl	8005d08 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	617b      	str	r3, [r7, #20]

		if(msg->len == 1) {
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	2b01      	cmp	r3, #1
 800128a:	d142      	bne.n	8001312 <main_menu_task+0xbe>
			// Get user option, convert from ASCII to number
			option = msg->payload[0] - 48;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	3b30      	subs	r3, #48	@ 0x30
 8001292:	613b      	str	r3, [r7, #16]
			switch(option) {
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d029      	beq.n	80012ee <main_menu_task+0x9a>
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	2b02      	cmp	r3, #2
 800129e:	dc2f      	bgt.n	8001300 <main_menu_task+0xac>
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d003      	beq.n	80012ae <main_menu_task+0x5a>
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d017      	beq.n	80012dc <main_menu_task+0x88>
 80012ac:	e028      	b.n	8001300 <main_menu_task+0xac>
				case 0:
					// User selection: LED menu
					curr_sys_state = sLedMenu;
 80012ae:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <main_menu_task+0xdc>)
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 80012b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001334 <main_menu_task+0xe0>)
 80012b6:	6818      	ldr	r0, [r3, #0]
 80012b8:	2300      	movs	r3, #0
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	2200      	movs	r2, #0
 80012c0:	2100      	movs	r1, #0
 80012c2:	f004 fda1 	bl	8005e08 <xTaskGenericNotify>
					break;
 80012c6:	bf00      	nop
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
			continue;
		}

		// Wait for notification from another task before running again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012cc:	9300      	str	r3, [sp, #0]
 80012ce:	2300      	movs	r3, #0
 80012d0:	2200      	movs	r2, #0
 80012d2:	2100      	movs	r1, #0
 80012d4:	2000      	movs	r0, #0
 80012d6:	f004 fd17 	bl	8005d08 <xTaskGenericNotifyWait>
 80012da:	e7bf      	b.n	800125c <main_menu_task+0x8>
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <main_menu_task+0xd4>)
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	2300      	movs	r3, #0
 80012e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012e6:	4914      	ldr	r1, [pc, #80]	@ (8001338 <main_menu_task+0xe4>)
 80012e8:	f003 fa40 	bl	800476c <xQueueGenericSend>
					continue;
 80012ec:	e01a      	b.n	8001324 <main_menu_task+0xd0>
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <main_menu_task+0xd4>)
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	2300      	movs	r3, #0
 80012f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012f8:	490f      	ldr	r1, [pc, #60]	@ (8001338 <main_menu_task+0xe4>)
 80012fa:	f003 fa37 	bl	800476c <xQueueGenericSend>
					continue;
 80012fe:	e011      	b.n	8001324 <main_menu_task+0xd0>
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8001300:	4b09      	ldr	r3, [pc, #36]	@ (8001328 <main_menu_task+0xd4>)
 8001302:	6818      	ldr	r0, [r3, #0]
 8001304:	2300      	movs	r3, #0
 8001306:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800130a:	490b      	ldr	r1, [pc, #44]	@ (8001338 <main_menu_task+0xe4>)
 800130c:	f003 fa2e 	bl	800476c <xQueueGenericSend>
					continue;
 8001310:	e008      	b.n	8001324 <main_menu_task+0xd0>
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8001312:	4b05      	ldr	r3, [pc, #20]	@ (8001328 <main_menu_task+0xd4>)
 8001314:	6818      	ldr	r0, [r3, #0]
 8001316:	2300      	movs	r3, #0
 8001318:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800131c:	4906      	ldr	r1, [pc, #24]	@ (8001338 <main_menu_task+0xe4>)
 800131e:	f003 fa25 	bl	800476c <xQueueGenericSend>
			continue;
 8001322:	bf00      	nop
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 8001324:	e79a      	b.n	800125c <main_menu_task+0x8>
 8001326:	bf00      	nop
 8001328:	200000b0 	.word	0x200000b0
 800132c:	20000020 	.word	0x20000020
 8001330:	200000c9 	.word	0x200000c9
 8001334:	200000ac 	.word	0x200000ac
 8001338:	2000001c 	.word	0x2000001c

0800133c <message_handler_task>:
 * @note The data queue (`q_data`) and print queue (`q_print`) must be initialized. The task must be   *
 *       notified when a new message is available.                                                     *
 * @note The processed message is sent to the print queue (`q_print`).                                 *
 ******************************************************************************************************/
void message_handler_task(void *param)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b08a      	sub	sp, #40	@ 0x28
 8001340:	af02      	add	r7, sp, #8
 8001342:	6078      	str	r0, [r7, #4]
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2300      	movs	r3, #0
 800134c:	2200      	movs	r2, #0
 800134e:	2100      	movs	r1, #0
 8001350:	2000      	movs	r0, #0
 8001352:	f004 fcd9 	bl	8005d08 <xTaskGenericNotifyWait>
 8001356:	61f8      	str	r0, [r7, #28]

		if(pdTRUE == ret) {
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d1f2      	bne.n	8001344 <message_handler_task+0x8>
			// Process the message stored in the input data queue
			process_message(&msg);
 800135e:	f107 030c 	add.w	r3, r7, #12
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f822 	bl	80013ac <process_message>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001368:	e7ec      	b.n	8001344 <message_handler_task+0x8>
	...

0800136c <print_task>:
 * @note This function is intended to run as a FreeRTOS task.                                          *
 * @note The print queue (`q_print`) must be initialized and contain messages to print.                *
 * @note The received message is transmitted via UART.                                                 *
 ******************************************************************************************************/
void print_task(void *param)
{
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001374:	4b0b      	ldr	r3, [pc, #44]	@ (80013a4 <print_task+0x38>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f107 010c 	add.w	r1, r7, #12
 800137c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001380:	4618      	mov	r0, r3
 8001382:	f003 fba3 	bl	8004acc <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001386:	68fc      	ldr	r4, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	4618      	mov	r0, r3
 800138c:	f7fe ff2a 	bl	80001e4 <strlen>
 8001390:	4603      	mov	r3, r0
 8001392:	b29a      	uxth	r2, r3
 8001394:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001398:	4621      	mov	r1, r4
 800139a:	4803      	ldr	r0, [pc, #12]	@ (80013a8 <print_task+0x3c>)
 800139c:	f002 f83c 	bl	8003418 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80013a0:	bf00      	nop
 80013a2:	e7e7      	b.n	8001374 <print_task+0x8>
 80013a4:	200000b0 	.word	0x200000b0
 80013a8:	20000058 	.word	0x20000058

080013ac <process_message>:
 * @return void                                                                                        *
 *                                                                                                     *
 * @note This function is called by the `message_handler_task` when a notification is received.        *
 * @note The data queue (`q_data`) must be initialized and contain a message to process.               *
 ******************************************************************************************************/
void process_message(message_t *msg) {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af02      	add	r7, sp, #8
 80013b2:	6078      	str	r0, [r7, #4]

	extract_command(msg);
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f000 f825 	bl	8001404 <extract_command>

	switch(curr_sys_state) {
 80013ba:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <process_message+0x4c>)
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d002      	beq.n	80013c8 <process_message+0x1c>
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d00a      	beq.n	80013dc <process_message+0x30>
		case sLedMenu:
			// Notify the led task and pass the message
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
			break;
		default:
			break;
 80013c6:	e013      	b.n	80013f0 <process_message+0x44>
			xTaskNotify(handle_main_menu_task, (uint32_t)msg, eSetValueWithOverwrite);
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <process_message+0x50>)
 80013ca:	6818      	ldr	r0, [r3, #0]
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	2300      	movs	r3, #0
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2303      	movs	r3, #3
 80013d4:	2100      	movs	r1, #0
 80013d6:	f004 fd17 	bl	8005e08 <xTaskGenericNotify>
			break;
 80013da:	e009      	b.n	80013f0 <process_message+0x44>
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <process_message+0x54>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	2300      	movs	r3, #0
 80013e4:	9300      	str	r3, [sp, #0]
 80013e6:	2303      	movs	r3, #3
 80013e8:	2100      	movs	r1, #0
 80013ea:	f004 fd0d 	bl	8005e08 <xTaskGenericNotify>
			break;
 80013ee:	bf00      	nop
	}
}
 80013f0:	bf00      	nop
 80013f2:	3708      	adds	r7, #8
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200000c9 	.word	0x200000c9
 80013fc:	200000a0 	.word	0x200000a0
 8001400:	200000ac 	.word	0x200000ac

08001404 <extract_command>:
 * @note This function is called by `process_message` to parse the incoming command message.           *
 * @note The data queue (`q_data`) must be initialized and contain a message to extract.               *
 * @note The extracted command is stored in the `msg` structure, with its payload and length fields    *
 *       populated.                                                                                    *
 ******************************************************************************************************/
int extract_command(message_t *msg) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	// Check if there is data in the data queue
	status = uxQueueMessagesWaiting(q_data);
 800140c:	4b19      	ldr	r3, [pc, #100]	@ (8001474 <extract_command+0x70>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f003 fccf 	bl	8004db4 <uxQueueMessagesWaiting>
 8001416:	4603      	mov	r3, r0
 8001418:	613b      	str	r3, [r7, #16]
	if(!status) {
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d102      	bne.n	8001426 <extract_command+0x22>
		return -1;
 8001420:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001424:	e022      	b.n	800146c <extract_command+0x68>
	}

	// If data is available in the data queue, load it to the msg payload
	uint8_t i=0;
 8001426:	2300      	movs	r3, #0
 8001428:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 800142a:	4b12      	ldr	r3, [pc, #72]	@ (8001474 <extract_command+0x70>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f107 010f 	add.w	r1, r7, #15
 8001432:	2200      	movs	r2, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f003 fb49 	bl	8004acc <xQueueReceive>
 800143a:	6138      	str	r0, [r7, #16]
		if(pdTRUE == status) {
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d106      	bne.n	8001450 <extract_command+0x4c>
			msg->payload[i++] = item;
 8001442:	7dfb      	ldrb	r3, [r7, #23]
 8001444:	1c5a      	adds	r2, r3, #1
 8001446:	75fa      	strb	r2, [r7, #23]
 8001448:	461a      	mov	r2, r3
 800144a:	7bf9      	ldrb	r1, [r7, #15]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\n');
 8001450:	7bfb      	ldrb	r3, [r7, #15]
 8001452:	2b0a      	cmp	r3, #10
 8001454:	d1e9      	bne.n	800142a <extract_command+0x26>

	// Set final character in message payload to null character
	msg->payload[i-1] = '\0';
 8001456:	7dfb      	ldrb	r3, [r7, #23]
 8001458:	3b01      	subs	r3, #1
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	2100      	movs	r1, #0
 800145e:	54d1      	strb	r1, [r2, r3]
	// Save length of message without null character
	msg->len = i-1;
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	3b01      	subs	r3, #1
 8001464:	461a      	mov	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	60da      	str	r2, [r3, #12]

	return 0;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	200000b4 	.word	0x200000b4

08001478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08a      	sub	sp, #40	@ 0x28
 800147c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800147e:	f000 fca3 	bl	8001dc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001482:	f000 f8e3 	bl	800164c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001486:	f000 f975 	bl	8001774 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800148a:	f000 f949 	bl	8001720 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Create main menu task and check that it was created successfully
  status = xTaskCreate(main_menu_task, "main_menu_task", 250, NULL, 2, &handle_main_menu_task);
 800148e:	4b5c      	ldr	r3, [pc, #368]	@ (8001600 <main+0x188>)
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	2302      	movs	r3, #2
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	2300      	movs	r3, #0
 8001498:	22fa      	movs	r2, #250	@ 0xfa
 800149a:	495a      	ldr	r1, [pc, #360]	@ (8001604 <main+0x18c>)
 800149c:	485a      	ldr	r0, [pc, #360]	@ (8001608 <main+0x190>)
 800149e:	f003 fe3d 	bl	800511c <xTaskCreate>
 80014a2:	61b8      	str	r0, [r7, #24]
  configASSERT(pdPASS == status);
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d00b      	beq.n	80014c2 <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80014aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014ae:	f383 8811 	msr	BASEPRI, r3
 80014b2:	f3bf 8f6f 	isb	sy
 80014b6:	f3bf 8f4f 	dsb	sy
 80014ba:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80014bc:	bf00      	nop
 80014be:	bf00      	nop
 80014c0:	e7fd      	b.n	80014be <main+0x46>

  // Create message handler task and check that it was created successfully
  status = xTaskCreate(message_handler_task, "msg_task", 250, NULL, 2, &handle_message_handler_task);
 80014c2:	4b52      	ldr	r3, [pc, #328]	@ (800160c <main+0x194>)
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	2302      	movs	r3, #2
 80014c8:	9300      	str	r3, [sp, #0]
 80014ca:	2300      	movs	r3, #0
 80014cc:	22fa      	movs	r2, #250	@ 0xfa
 80014ce:	4950      	ldr	r1, [pc, #320]	@ (8001610 <main+0x198>)
 80014d0:	4850      	ldr	r0, [pc, #320]	@ (8001614 <main+0x19c>)
 80014d2:	f003 fe23 	bl	800511c <xTaskCreate>
 80014d6:	61b8      	str	r0, [r7, #24]
  configASSERT(pdPASS == status);
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d00b      	beq.n	80014f6 <main+0x7e>
        __asm volatile
 80014de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014e2:	f383 8811 	msr	BASEPRI, r3
 80014e6:	f3bf 8f6f 	isb	sy
 80014ea:	f3bf 8f4f 	dsb	sy
 80014ee:	613b      	str	r3, [r7, #16]
    }
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	e7fd      	b.n	80014f2 <main+0x7a>

  // Create print task and check that it was created successfully
  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 80014f6:	4b48      	ldr	r3, [pc, #288]	@ (8001618 <main+0x1a0>)
 80014f8:	9301      	str	r3, [sp, #4]
 80014fa:	2302      	movs	r3, #2
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	2300      	movs	r3, #0
 8001500:	22fa      	movs	r2, #250	@ 0xfa
 8001502:	4946      	ldr	r1, [pc, #280]	@ (800161c <main+0x1a4>)
 8001504:	4846      	ldr	r0, [pc, #280]	@ (8001620 <main+0x1a8>)
 8001506:	f003 fe09 	bl	800511c <xTaskCreate>
 800150a:	61b8      	str	r0, [r7, #24]
  configASSERT(pdPASS == status);
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	2b01      	cmp	r3, #1
 8001510:	d00b      	beq.n	800152a <main+0xb2>
        __asm volatile
 8001512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001516:	f383 8811 	msr	BASEPRI, r3
 800151a:	f3bf 8f6f 	isb	sy
 800151e:	f3bf 8f4f 	dsb	sy
 8001522:	60fb      	str	r3, [r7, #12]
    }
 8001524:	bf00      	nop
 8001526:	bf00      	nop
 8001528:	e7fd      	b.n	8001526 <main+0xae>

  // Create LED task and check that it was created successfully
  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 800152a:	4b3e      	ldr	r3, [pc, #248]	@ (8001624 <main+0x1ac>)
 800152c:	9301      	str	r3, [sp, #4]
 800152e:	2302      	movs	r3, #2
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	22fa      	movs	r2, #250	@ 0xfa
 8001536:	493c      	ldr	r1, [pc, #240]	@ (8001628 <main+0x1b0>)
 8001538:	483c      	ldr	r0, [pc, #240]	@ (800162c <main+0x1b4>)
 800153a:	f003 fdef 	bl	800511c <xTaskCreate>
 800153e:	61b8      	str	r0, [r7, #24]
  configASSERT(pdPASS == status);
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d00b      	beq.n	800155e <main+0xe6>
        __asm volatile
 8001546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800154a:	f383 8811 	msr	BASEPRI, r3
 800154e:	f3bf 8f6f 	isb	sy
 8001552:	f3bf 8f4f 	dsb	sy
 8001556:	60bb      	str	r3, [r7, #8]
    }
 8001558:	bf00      	nop
 800155a:	bf00      	nop
 800155c:	e7fd      	b.n	800155a <main+0xe2>

  // Create data queue and check that it was created successfully
  q_data = xQueueCreate(10, sizeof(char));
 800155e:	2200      	movs	r2, #0
 8001560:	2101      	movs	r1, #1
 8001562:	200a      	movs	r0, #10
 8001564:	f003 f87c 	bl	8004660 <xQueueGenericCreate>
 8001568:	4603      	mov	r3, r0
 800156a:	4a31      	ldr	r2, [pc, #196]	@ (8001630 <main+0x1b8>)
 800156c:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_data);
 800156e:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <main+0x1b8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d10b      	bne.n	800158e <main+0x116>
        __asm volatile
 8001576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800157a:	f383 8811 	msr	BASEPRI, r3
 800157e:	f3bf 8f6f 	isb	sy
 8001582:	f3bf 8f4f 	dsb	sy
 8001586:	607b      	str	r3, [r7, #4]
    }
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	e7fd      	b.n	800158a <main+0x112>

  // Create print queue and check that it was created successfully
  q_print = xQueueCreate(10, sizeof(size_t));
 800158e:	2200      	movs	r2, #0
 8001590:	2104      	movs	r1, #4
 8001592:	200a      	movs	r0, #10
 8001594:	f003 f864 	bl	8004660 <xQueueGenericCreate>
 8001598:	4603      	mov	r3, r0
 800159a:	4a26      	ldr	r2, [pc, #152]	@ (8001634 <main+0x1bc>)
 800159c:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_print);
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <main+0x1bc>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d10b      	bne.n	80015be <main+0x146>
        __asm volatile
 80015a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015aa:	f383 8811 	msr	BASEPRI, r3
 80015ae:	f3bf 8f6f 	isb	sy
 80015b2:	f3bf 8f4f 	dsb	sy
 80015b6:	603b      	str	r3, [r7, #0]
    }
 80015b8:	bf00      	nop
 80015ba:	bf00      	nop
 80015bc:	e7fd      	b.n	80015ba <main+0x142>

  // Create software timers for LED effects
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e010      	b.n	80015e6 <main+0x16e>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)i, led_callback);
 80015c4:	69fb      	ldr	r3, [r7, #28]
 80015c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001638 <main+0x1c0>)
 80015c8:	9200      	str	r2, [sp, #0]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80015d0:	481a      	ldr	r0, [pc, #104]	@ (800163c <main+0x1c4>)
 80015d2:	f004 fe9d 	bl	8006310 <xTimerCreate>
 80015d6:	4602      	mov	r2, r0
 80015d8:	4919      	ldr	r1, [pc, #100]	@ (8001640 <main+0x1c8>)
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	3301      	adds	r3, #1
 80015e4:	61fb      	str	r3, [r7, #28]
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	ddeb      	ble.n	80015c4 <main+0x14c>
  }

  // Prepare UART to receive a message
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80015ec:	2201      	movs	r2, #1
 80015ee:	4915      	ldr	r1, [pc, #84]	@ (8001644 <main+0x1cc>)
 80015f0:	4815      	ldr	r0, [pc, #84]	@ (8001648 <main+0x1d0>)
 80015f2:	f001 ff9c 	bl	800352e <HAL_UART_Receive_IT>

  // Start the kernel
  vTaskStartScheduler();
 80015f6:	f003 fed7 	bl	80053a8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80015fa:	bf00      	nop
 80015fc:	e7fd      	b.n	80015fa <main+0x182>
 80015fe:	bf00      	nop
 8001600:	200000a0 	.word	0x200000a0
 8001604:	08007680 	.word	0x08007680
 8001608:	08001255 	.word	0x08001255
 800160c:	200000a4 	.word	0x200000a4
 8001610:	08007690 	.word	0x08007690
 8001614:	0800133d 	.word	0x0800133d
 8001618:	200000a8 	.word	0x200000a8
 800161c:	0800769c 	.word	0x0800769c
 8001620:	0800136d 	.word	0x0800136d
 8001624:	200000ac 	.word	0x200000ac
 8001628:	080076a8 	.word	0x080076a8
 800162c:	08000cd1 	.word	0x08000cd1
 8001630:	200000b4 	.word	0x200000b4
 8001634:	200000b0 	.word	0x200000b0
 8001638:	08000f19 	.word	0x08000f19
 800163c:	080076b4 	.word	0x080076b4
 8001640:	200000b8 	.word	0x200000b8
 8001644:	200000c8 	.word	0x200000c8
 8001648:	20000058 	.word	0x20000058

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b094      	sub	sp, #80	@ 0x50
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	f107 0320 	add.w	r3, r7, #32
 8001656:	2230      	movs	r2, #48	@ 0x30
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f005 fe22 	bl	80072a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001660:	f107 030c 	add.w	r3, r7, #12
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
 8001668:	605a      	str	r2, [r3, #4]
 800166a:	609a      	str	r2, [r3, #8]
 800166c:	60da      	str	r2, [r3, #12]
 800166e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
 8001674:	4b28      	ldr	r3, [pc, #160]	@ (8001718 <SystemClock_Config+0xcc>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001678:	4a27      	ldr	r2, [pc, #156]	@ (8001718 <SystemClock_Config+0xcc>)
 800167a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001680:	4b25      	ldr	r3, [pc, #148]	@ (8001718 <SystemClock_Config+0xcc>)
 8001682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800168c:	2300      	movs	r3, #0
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	4b22      	ldr	r3, [pc, #136]	@ (800171c <SystemClock_Config+0xd0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a21      	ldr	r2, [pc, #132]	@ (800171c <SystemClock_Config+0xd0>)
 8001696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <SystemClock_Config+0xd0>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a4:	607b      	str	r3, [r7, #4]
 80016a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a8:	2302      	movs	r3, #2
 80016aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016ac:	2301      	movs	r3, #1
 80016ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016b0:	2310      	movs	r3, #16
 80016b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b4:	2302      	movs	r3, #2
 80016b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016b8:	2300      	movs	r3, #0
 80016ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016bc:	2308      	movs	r3, #8
 80016be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80016c0:	2332      	movs	r3, #50	@ 0x32
 80016c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80016c4:	2304      	movs	r3, #4
 80016c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80016c8:	2307      	movs	r3, #7
 80016ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016cc:	f107 0320 	add.w	r3, r7, #32
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fee5 	bl	80024a0 <HAL_RCC_OscConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016dc:	f000 fa0e 	bl	8001afc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e0:	230f      	movs	r3, #15
 80016e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e4:	2302      	movs	r3, #2
 80016e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016f0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	2100      	movs	r1, #0
 80016fe:	4618      	mov	r0, r3
 8001700:	f001 f946 	bl	8002990 <HAL_RCC_ClockConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800170a:	f000 f9f7 	bl	8001afc <Error_Handler>
  }
}
 800170e:	bf00      	nop
 8001710:	3750      	adds	r7, #80	@ 0x50
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023800 	.word	0x40023800
 800171c:	40007000 	.word	0x40007000

08001720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001724:	4b11      	ldr	r3, [pc, #68]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001726:	4a12      	ldr	r2, [pc, #72]	@ (8001770 <MX_USART2_UART_Init+0x50>)
 8001728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0c      	ldr	r3, [pc, #48]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_USART2_UART_Init+0x4c>)
 8001758:	f001 fe0e 	bl	8003378 <HAL_UART_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001762:	f000 f9cb 	bl	8001afc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	20000058 	.word	0x20000058
 8001770:	40004400 	.word	0x40004400

08001774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b08c      	sub	sp, #48	@ 0x30
 8001778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]
 8001786:	60da      	str	r2, [r3, #12]
 8001788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	61bb      	str	r3, [r7, #24]
 800178e:	4ba2      	ldr	r3, [pc, #648]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	4aa1      	ldr	r2, [pc, #644]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 8001794:	f043 0310 	orr.w	r3, r3, #16
 8001798:	6313      	str	r3, [r2, #48]	@ 0x30
 800179a:	4b9f      	ldr	r3, [pc, #636]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	f003 0310 	and.w	r3, r3, #16
 80017a2:	61bb      	str	r3, [r7, #24]
 80017a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	4b9b      	ldr	r3, [pc, #620]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a9a      	ldr	r2, [pc, #616]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 80017b0:	f043 0304 	orr.w	r3, r3, #4
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b98      	ldr	r3, [pc, #608]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
 80017c6:	4b94      	ldr	r3, [pc, #592]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	4a93      	ldr	r2, [pc, #588]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 80017cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017d2:	4b91      	ldr	r3, [pc, #580]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017da:	613b      	str	r3, [r7, #16]
 80017dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017de:	2300      	movs	r3, #0
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	4b8d      	ldr	r3, [pc, #564]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	4a8c      	ldr	r2, [pc, #560]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ee:	4b8a      	ldr	r3, [pc, #552]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f2:	f003 0301 	and.w	r3, r3, #1
 80017f6:	60fb      	str	r3, [r7, #12]
 80017f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017fa:	2300      	movs	r3, #0
 80017fc:	60bb      	str	r3, [r7, #8]
 80017fe:	4b86      	ldr	r3, [pc, #536]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	4a85      	ldr	r2, [pc, #532]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	6313      	str	r3, [r2, #48]	@ 0x30
 800180a:	4b83      	ldr	r3, [pc, #524]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	607b      	str	r3, [r7, #4]
 800181a:	4b7f      	ldr	r3, [pc, #508]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	4a7e      	ldr	r2, [pc, #504]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 8001820:	f043 0308 	orr.w	r3, r3, #8
 8001824:	6313      	str	r3, [r2, #48]	@ 0x30
 8001826:	4b7c      	ldr	r3, [pc, #496]	@ (8001a18 <MX_GPIO_Init+0x2a4>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	607b      	str	r3, [r7, #4]
 8001830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001832:	2200      	movs	r2, #0
 8001834:	2108      	movs	r1, #8
 8001836:	4879      	ldr	r0, [pc, #484]	@ (8001a1c <MX_GPIO_Init+0x2a8>)
 8001838:	f000 fe18 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800183c:	2201      	movs	r2, #1
 800183e:	2101      	movs	r1, #1
 8001840:	4877      	ldr	r0, [pc, #476]	@ (8001a20 <MX_GPIO_Init+0x2ac>)
 8001842:	f000 fe13 	bl	800246c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001846:	2200      	movs	r2, #0
 8001848:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800184c:	4875      	ldr	r0, [pc, #468]	@ (8001a24 <MX_GPIO_Init+0x2b0>)
 800184e:	f000 fe0d 	bl	800246c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001852:	2308      	movs	r3, #8
 8001854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001856:	2301      	movs	r3, #1
 8001858:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185a:	2300      	movs	r3, #0
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185e:	2300      	movs	r3, #0
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	486c      	ldr	r0, [pc, #432]	@ (8001a1c <MX_GPIO_Init+0x2a8>)
 800186a:	f000 fc63 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800186e:	2301      	movs	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001872:	2301      	movs	r3, #1
 8001874:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187a:	2300      	movs	r3, #0
 800187c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800187e:	f107 031c 	add.w	r3, r7, #28
 8001882:	4619      	mov	r1, r3
 8001884:	4866      	ldr	r0, [pc, #408]	@ (8001a20 <MX_GPIO_Init+0x2ac>)
 8001886:	f000 fc55 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800188a:	2308      	movs	r3, #8
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001896:	2300      	movs	r3, #0
 8001898:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800189a:	2305      	movs	r3, #5
 800189c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800189e:	f107 031c 	add.w	r3, r7, #28
 80018a2:	4619      	mov	r1, r3
 80018a4:	485e      	ldr	r0, [pc, #376]	@ (8001a20 <MX_GPIO_Init+0x2ac>)
 80018a6:	f000 fc45 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018aa:	2301      	movs	r3, #1
 80018ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4619      	mov	r1, r3
 80018be:	485a      	ldr	r0, [pc, #360]	@ (8001a28 <MX_GPIO_Init+0x2b4>)
 80018c0:	f000 fc38 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80018c4:	2310      	movs	r3, #16
 80018c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c8:	2302      	movs	r3, #2
 80018ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d0:	2300      	movs	r3, #0
 80018d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018d4:	2306      	movs	r3, #6
 80018d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80018d8:	f107 031c 	add.w	r3, r7, #28
 80018dc:	4619      	mov	r1, r3
 80018de:	4852      	ldr	r0, [pc, #328]	@ (8001a28 <MX_GPIO_Init+0x2b4>)
 80018e0:	f000 fc28 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80018e4:	23e0      	movs	r3, #224	@ 0xe0
 80018e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e8:	2302      	movs	r3, #2
 80018ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	2300      	movs	r3, #0
 80018ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018f4:	2305      	movs	r3, #5
 80018f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	484a      	ldr	r0, [pc, #296]	@ (8001a28 <MX_GPIO_Init+0x2b4>)
 8001900:	f000 fc18 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001904:	2304      	movs	r3, #4
 8001906:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001908:	2300      	movs	r3, #0
 800190a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	2300      	movs	r3, #0
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	4619      	mov	r1, r3
 8001916:	4845      	ldr	r0, [pc, #276]	@ (8001a2c <MX_GPIO_Init+0x2b8>)
 8001918:	f000 fc0c 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800191c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192a:	2300      	movs	r3, #0
 800192c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800192e:	2305      	movs	r3, #5
 8001930:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	4619      	mov	r1, r3
 8001938:	483c      	ldr	r0, [pc, #240]	@ (8001a2c <MX_GPIO_Init+0x2b8>)
 800193a:	f000 fbfb 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800193e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001942:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001944:	2301      	movs	r3, #1
 8001946:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194c:	2300      	movs	r3, #0
 800194e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	4619      	mov	r1, r3
 8001956:	4833      	ldr	r0, [pc, #204]	@ (8001a24 <MX_GPIO_Init+0x2b0>)
 8001958:	f000 fbec 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800195c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8001960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800196e:	2306      	movs	r3, #6
 8001970:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	4619      	mov	r1, r3
 8001978:	4829      	ldr	r0, [pc, #164]	@ (8001a20 <MX_GPIO_Init+0x2ac>)
 800197a:	f000 fbdb 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800197e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001984:	2300      	movs	r3, #0
 8001986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800198c:	f107 031c 	add.w	r3, r7, #28
 8001990:	4619      	mov	r1, r3
 8001992:	4825      	ldr	r0, [pc, #148]	@ (8001a28 <MX_GPIO_Init+0x2b4>)
 8001994:	f000 fbce 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001998:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800199c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019aa:	230a      	movs	r3, #10
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ae:	f107 031c 	add.w	r3, r7, #28
 80019b2:	4619      	mov	r1, r3
 80019b4:	481c      	ldr	r0, [pc, #112]	@ (8001a28 <MX_GPIO_Init+0x2b4>)
 80019b6:	f000 fbbd 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80019ba:	2320      	movs	r3, #32
 80019bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	4815      	ldr	r0, [pc, #84]	@ (8001a24 <MX_GPIO_Init+0x2b0>)
 80019ce:	f000 fbb1 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80019d2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80019d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d8:	2312      	movs	r3, #18
 80019da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019e4:	2304      	movs	r3, #4
 80019e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	f107 031c 	add.w	r3, r7, #28
 80019ec:	4619      	mov	r1, r3
 80019ee:	480f      	ldr	r0, [pc, #60]	@ (8001a2c <MX_GPIO_Init+0x2b8>)
 80019f0:	f000 fba0 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80019f4:	2302      	movs	r3, #2
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80019f8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80019fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 031c 	add.w	r3, r7, #28
 8001a06:	4619      	mov	r1, r3
 8001a08:	4804      	ldr	r0, [pc, #16]	@ (8001a1c <MX_GPIO_Init+0x2a8>)
 8001a0a:	f000 fb93 	bl	8002134 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a0e:	bf00      	nop
 8001a10:	3730      	adds	r7, #48	@ 0x30
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	40020000 	.word	0x40020000
 8001a2c:	40020400 	.word	0x40020400

08001a30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler, so it executes in the interrupt context
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	6078      	str	r0, [r7, #4]
	// Dummy variable used to replace final character in data queue
	uint8_t dummy;

	// Add a small delay to allow timing for message transmission
	for(uint32_t i=0; i<4000; i++);
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60fb      	str	r3, [r7, #12]
 8001a3c:	e002      	b.n	8001a44 <HAL_UART_RxCpltCallback+0x14>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	3301      	adds	r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8001a4a:	d3f8      	bcc.n	8001a3e <HAL_UART_RxCpltCallback+0xe>

	// Check if data is available via UART
	if(!xQueueIsQueueFullFromISR(q_data)) {
 8001a4c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x98>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f003 fade 	bl	8005012 <xQueueIsQueueFullFromISR>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d107      	bne.n	8001a6c <HAL_UART_RxCpltCallback+0x3c>
		// Enqueue data byte
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8001a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x98>)
 8001a5e:	6818      	ldr	r0, [r3, #0]
 8001a60:	2300      	movs	r3, #0
 8001a62:	2200      	movs	r2, #0
 8001a64:	4919      	ldr	r1, [pc, #100]	@ (8001acc <HAL_UART_RxCpltCallback+0x9c>)
 8001a66:	f002 ff83 	bl	8004970 <xQueueGenericSendFromISR>
 8001a6a:	e013      	b.n	8001a94 <HAL_UART_RxCpltCallback+0x64>
	}
	// If no data available, check if last entered character is newline character
	else {
		if(user_data == '\n') {
 8001a6c:	4b17      	ldr	r3, [pc, #92]	@ (8001acc <HAL_UART_RxCpltCallback+0x9c>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b0a      	cmp	r3, #10
 8001a74:	d10e      	bne.n	8001a94 <HAL_UART_RxCpltCallback+0x64>
			// Replace last byte of data queue with '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8001a76:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x98>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f107 010b 	add.w	r1, r7, #11
 8001a7e:	2200      	movs	r2, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f003 f905 	bl	8004c90 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8001a86:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_UART_RxCpltCallback+0x98>)
 8001a88:	6818      	ldr	r0, [r3, #0]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	490f      	ldr	r1, [pc, #60]	@ (8001acc <HAL_UART_RxCpltCallback+0x9c>)
 8001a90:	f002 ff6e 	bl	8004970 <xQueueGenericSendFromISR>
		}
	}

	// Send notification to message handler task if user_data == '\n'
	if(user_data == '\n') {
 8001a94:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_UART_RxCpltCallback+0x9c>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b0a      	cmp	r3, #10
 8001a9c:	d10a      	bne.n	8001ab4 <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_message_handler_task, 0, eNoAction, NULL);
 8001a9e:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <HAL_UART_RxCpltCallback+0xa0>)
 8001aa0:	6818      	ldr	r0, [r3, #0]
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	9301      	str	r3, [sp, #4]
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	2200      	movs	r2, #0
 8001aae:	2100      	movs	r1, #0
 8001ab0:	f004 fa8e 	bl	8005fd0 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in interrupt mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	4905      	ldr	r1, [pc, #20]	@ (8001acc <HAL_UART_RxCpltCallback+0x9c>)
 8001ab8:	4806      	ldr	r0, [pc, #24]	@ (8001ad4 <HAL_UART_RxCpltCallback+0xa4>)
 8001aba:	f001 fd38 	bl	800352e <HAL_UART_Receive_IT>

}
 8001abe:	bf00      	nop
 8001ac0:	3710      	adds	r7, #16
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200000b4 	.word	0x200000b4
 8001acc:	200000c8 	.word	0x200000c8
 8001ad0:	200000a4 	.word	0x200000a4
 8001ad4:	20000058 	.word	0x20000058

08001ad8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a04      	ldr	r2, [pc, #16]	@ (8001af8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001aea:	f000 f98f 	bl	8001e0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40001000 	.word	0x40001000

08001afc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b00:	b672      	cpsid	i
}
 8001b02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b04:	bf00      	nop
 8001b06:	e7fd      	b.n	8001b04 <Error_Handler+0x8>

08001b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b16:	4a0f      	ldr	r2, [pc, #60]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	603b      	str	r3, [r7, #0]
 8001b2e:	4b09      	ldr	r3, [pc, #36]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	4a08      	ldr	r2, [pc, #32]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b3a:	4b06      	ldr	r3, [pc, #24]	@ (8001b54 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08a      	sub	sp, #40	@ 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b60:	f107 0314 	add.w	r3, r7, #20
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	605a      	str	r2, [r3, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
 8001b6c:	60da      	str	r2, [r3, #12]
 8001b6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <HAL_UART_MspInit+0x94>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d133      	bne.n	8001be2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	60fb      	str	r3, [r7, #12]
 8001b9a:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	4a14      	ldr	r2, [pc, #80]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ba6:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_UART_MspInit+0x98>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001baa:	f003 0301 	and.w	r3, r3, #1
 8001bae:	60fb      	str	r3, [r7, #12]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001bb2:	230c      	movs	r3, #12
 8001bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb6:	2302      	movs	r3, #2
 8001bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4809      	ldr	r0, [pc, #36]	@ (8001bf4 <HAL_UART_MspInit+0x9c>)
 8001bce:	f000 fab1 	bl	8002134 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2106      	movs	r1, #6
 8001bd6:	2026      	movs	r0, #38	@ 0x26
 8001bd8:	f000 f9f0 	bl	8001fbc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bdc:	2026      	movs	r0, #38	@ 0x26
 8001bde:	f000 fa09 	bl	8001ff4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	@ 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40004400 	.word	0x40004400
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40020000 	.word	0x40020000

08001bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b08e      	sub	sp, #56	@ 0x38
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001c00:	2300      	movs	r3, #0
 8001c02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c08:	2300      	movs	r3, #0
 8001c0a:	60fb      	str	r3, [r7, #12]
 8001c0c:	4b33      	ldr	r3, [pc, #204]	@ (8001cdc <HAL_InitTick+0xe4>)
 8001c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c10:	4a32      	ldr	r2, [pc, #200]	@ (8001cdc <HAL_InitTick+0xe4>)
 8001c12:	f043 0310 	orr.w	r3, r3, #16
 8001c16:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c18:	4b30      	ldr	r3, [pc, #192]	@ (8001cdc <HAL_InitTick+0xe4>)
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1c:	f003 0310 	and.w	r3, r3, #16
 8001c20:	60fb      	str	r3, [r7, #12]
 8001c22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c24:	f107 0210 	add.w	r2, r7, #16
 8001c28:	f107 0314 	add.w	r3, r7, #20
 8001c2c:	4611      	mov	r1, r2
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f001 f8ce 	bl	8002dd0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001c34:	6a3b      	ldr	r3, [r7, #32]
 8001c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001c38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d103      	bne.n	8001c46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001c3e:	f001 f89f 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8001c42:	6378      	str	r0, [r7, #52]	@ 0x34
 8001c44:	e004      	b.n	8001c50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001c46:	f001 f89b 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c52:	4a23      	ldr	r2, [pc, #140]	@ (8001ce0 <HAL_InitTick+0xe8>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	0c9b      	lsrs	r3, r3, #18
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001c5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c60:	4a21      	ldr	r2, [pc, #132]	@ (8001ce8 <HAL_InitTick+0xf0>)
 8001c62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001c64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c70:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001c72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001c84:	4817      	ldr	r0, [pc, #92]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c86:	f001 f8d5 	bl	8002e34 <HAL_TIM_Base_Init>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001c90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d11b      	bne.n	8001cd0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001c98:	4812      	ldr	r0, [pc, #72]	@ (8001ce4 <HAL_InitTick+0xec>)
 8001c9a:	f001 f925 	bl	8002ee8 <HAL_TIM_Base_Start_IT>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d111      	bne.n	8001cd0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001cac:	2036      	movs	r0, #54	@ 0x36
 8001cae:	f000 f9a1 	bl	8001ff4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2b0f      	cmp	r3, #15
 8001cb6:	d808      	bhi.n	8001cca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	2036      	movs	r0, #54	@ 0x36
 8001cbe:	f000 f97d 	bl	8001fbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8001cec <HAL_InitTick+0xf4>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	e002      	b.n	8001cd0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001cd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3738      	adds	r7, #56	@ 0x38
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	431bde83 	.word	0x431bde83
 8001ce4:	200000cc 	.word	0x200000cc
 8001ce8:	40001000 	.word	0x40001000
 8001cec:	20000028 	.word	0x20000028

08001cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cf4:	bf00      	nop
 8001cf6:	e7fd      	b.n	8001cf4 <NMI_Handler+0x4>

08001cf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cfc:	bf00      	nop
 8001cfe:	e7fd      	b.n	8001cfc <HardFault_Handler+0x4>

08001d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d04:	bf00      	nop
 8001d06:	e7fd      	b.n	8001d04 <MemManage_Handler+0x4>

08001d08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d0c:	bf00      	nop
 8001d0e:	e7fd      	b.n	8001d0c <BusFault_Handler+0x4>

08001d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d14:	bf00      	nop
 8001d16:	e7fd      	b.n	8001d14 <UsageFault_Handler+0x4>

08001d18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <USART2_IRQHandler+0x10>)
 8001d2e:	f001 fc23 	bl	8003578 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000058 	.word	0x20000058

08001d3c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001d40:	4802      	ldr	r0, [pc, #8]	@ (8001d4c <TIM6_DAC_IRQHandler+0x10>)
 8001d42:	f001 f941 	bl	8002fc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	200000cc 	.word	0x200000cc

08001d50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d54:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <SystemInit+0x20>)
 8001d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d5a:	4a05      	ldr	r2, [pc, #20]	@ (8001d70 <SystemInit+0x20>)
 8001d5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	e000ed00 	.word	0xe000ed00

08001d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d78:	f7ff ffea 	bl	8001d50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d7c:	480c      	ldr	r0, [pc, #48]	@ (8001db0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d7e:	490d      	ldr	r1, [pc, #52]	@ (8001db4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d80:	4a0d      	ldr	r2, [pc, #52]	@ (8001db8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d84:	e002      	b.n	8001d8c <LoopCopyDataInit>

08001d86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d8a:	3304      	adds	r3, #4

08001d8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d90:	d3f9      	bcc.n	8001d86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d92:	4a0a      	ldr	r2, [pc, #40]	@ (8001dbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d94:	4c0a      	ldr	r4, [pc, #40]	@ (8001dc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d98:	e001      	b.n	8001d9e <LoopFillZerobss>

08001d9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d9c:	3204      	adds	r2, #4

08001d9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001da0:	d3fb      	bcc.n	8001d9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001da2:	f005 fa87 	bl	80072b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001da6:	f7ff fb67 	bl	8001478 <main>
  bx  lr    
 8001daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001db4:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8001db8:	08007804 	.word	0x08007804
  ldr r2, =_sbss
 8001dbc:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8001dc0:	200192c0 	.word	0x200192c0

08001dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001dc4:	e7fe      	b.n	8001dc4 <ADC_IRQHandler>
	...

08001dc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e08 <HAL_Init+0x40>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e08 <HAL_Init+0x40>)
 8001dd2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001dd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e08 <HAL_Init+0x40>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <HAL_Init+0x40>)
 8001dde:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001de2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001de4:	4b08      	ldr	r3, [pc, #32]	@ (8001e08 <HAL_Init+0x40>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a07      	ldr	r2, [pc, #28]	@ (8001e08 <HAL_Init+0x40>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f000 f8d8 	bl	8001fa6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001df6:	200f      	movs	r0, #15
 8001df8:	f7ff fefe 	bl	8001bf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfc:	f7ff fe84 	bl	8001b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	40023c00 	.word	0x40023c00

08001e0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e10:	4b06      	ldr	r3, [pc, #24]	@ (8001e2c <HAL_IncTick+0x20>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_IncTick+0x24>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	4a04      	ldr	r2, [pc, #16]	@ (8001e30 <HAL_IncTick+0x24>)
 8001e1e:	6013      	str	r3, [r2, #0]
}
 8001e20:	bf00      	nop
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	2000002c 	.word	0x2000002c
 8001e30:	20000114 	.word	0x20000114

08001e34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return uwTick;
 8001e38:	4b03      	ldr	r3, [pc, #12]	@ (8001e48 <HAL_GetTick+0x14>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000114 	.word	0x20000114

08001e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f003 0307 	and.w	r3, r3, #7
 8001e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e62:	68ba      	ldr	r2, [r7, #8]
 8001e64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e68:	4013      	ands	r3, r2
 8001e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e7e:	4a04      	ldr	r2, [pc, #16]	@ (8001e90 <__NVIC_SetPriorityGrouping+0x44>)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	60d3      	str	r3, [r2, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e98:	4b04      	ldr	r3, [pc, #16]	@ (8001eac <__NVIC_GetPriorityGrouping+0x18>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	0a1b      	lsrs	r3, r3, #8
 8001e9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	db0b      	blt.n	8001eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ec2:	79fb      	ldrb	r3, [r7, #7]
 8001ec4:	f003 021f 	and.w	r2, r3, #31
 8001ec8:	4907      	ldr	r1, [pc, #28]	@ (8001ee8 <__NVIC_EnableIRQ+0x38>)
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2001      	movs	r0, #1
 8001ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	e000e100 	.word	0xe000e100

08001eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	6039      	str	r1, [r7, #0]
 8001ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	db0a      	blt.n	8001f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	b2da      	uxtb	r2, r3
 8001f04:	490c      	ldr	r1, [pc, #48]	@ (8001f38 <__NVIC_SetPriority+0x4c>)
 8001f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f0a:	0112      	lsls	r2, r2, #4
 8001f0c:	b2d2      	uxtb	r2, r2
 8001f0e:	440b      	add	r3, r1
 8001f10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f14:	e00a      	b.n	8001f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	4908      	ldr	r1, [pc, #32]	@ (8001f3c <__NVIC_SetPriority+0x50>)
 8001f1c:	79fb      	ldrb	r3, [r7, #7]
 8001f1e:	f003 030f 	and.w	r3, r3, #15
 8001f22:	3b04      	subs	r3, #4
 8001f24:	0112      	lsls	r2, r2, #4
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	440b      	add	r3, r1
 8001f2a:	761a      	strb	r2, [r3, #24]
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	e000e100 	.word	0xe000e100
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b089      	sub	sp, #36	@ 0x24
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f003 0307 	and.w	r3, r3, #7
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f1c3 0307 	rsb	r3, r3, #7
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	bf28      	it	cs
 8001f5e:	2304      	movcs	r3, #4
 8001f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	3304      	adds	r3, #4
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d902      	bls.n	8001f70 <NVIC_EncodePriority+0x30>
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	3b03      	subs	r3, #3
 8001f6e:	e000      	b.n	8001f72 <NVIC_EncodePriority+0x32>
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7e:	43da      	mvns	r2, r3
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	401a      	ands	r2, r3
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f92:	43d9      	mvns	r1, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f98:	4313      	orrs	r3, r2
         );
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3724      	adds	r7, #36	@ 0x24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ff4c 	bl	8001e4c <__NVIC_SetPriorityGrouping>
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b086      	sub	sp, #24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
 8001fc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fce:	f7ff ff61 	bl	8001e94 <__NVIC_GetPriorityGrouping>
 8001fd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	68b9      	ldr	r1, [r7, #8]
 8001fd8:	6978      	ldr	r0, [r7, #20]
 8001fda:	f7ff ffb1 	bl	8001f40 <NVIC_EncodePriority>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe4:	4611      	mov	r1, r2
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff80 	bl	8001eec <__NVIC_SetPriority>
}
 8001fec:	bf00      	nop
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff ff54 	bl	8001eb0 <__NVIC_EnableIRQ>
}
 8002008:	bf00      	nop
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800201c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800201e:	f7ff ff09 	bl	8001e34 <HAL_GetTick>
 8002022:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800202a:	b2db      	uxtb	r3, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d008      	beq.n	8002042 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2280      	movs	r2, #128	@ 0x80
 8002034:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e052      	b.n	80020e8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 0216 	bic.w	r2, r2, #22
 8002050:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	695a      	ldr	r2, [r3, #20]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002060:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d103      	bne.n	8002072 <HAL_DMA_Abort+0x62>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800206e:	2b00      	cmp	r3, #0
 8002070:	d007      	beq.n	8002082 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f022 0208 	bic.w	r2, r2, #8
 8002080:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f022 0201 	bic.w	r2, r2, #1
 8002090:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002092:	e013      	b.n	80020bc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002094:	f7ff fece 	bl	8001e34 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b05      	cmp	r3, #5
 80020a0:	d90c      	bls.n	80020bc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2220      	movs	r2, #32
 80020a6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2203      	movs	r2, #3
 80020ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e015      	b.n	80020e8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1e4      	bne.n	8002094 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020ce:	223f      	movs	r2, #63	@ 0x3f
 80020d0:	409a      	lsls	r2, r3
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80020e6:	2300      	movs	r3, #0
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3710      	adds	r7, #16
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d004      	beq.n	800210e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2280      	movs	r2, #128	@ 0x80
 8002108:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e00c      	b.n	8002128 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2205      	movs	r2, #5
 8002112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f022 0201 	bic.w	r2, r2, #1
 8002124:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	@ 0x24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e16b      	b.n	8002428 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002150:	2201      	movs	r2, #1
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	fa02 f303 	lsl.w	r3, r2, r3
 8002158:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	697a      	ldr	r2, [r7, #20]
 8002160:	4013      	ands	r3, r2
 8002162:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	429a      	cmp	r2, r3
 800216a:	f040 815a 	bne.w	8002422 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f003 0303 	and.w	r3, r3, #3
 8002176:	2b01      	cmp	r3, #1
 8002178:	d005      	beq.n	8002186 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002182:	2b02      	cmp	r3, #2
 8002184:	d130      	bne.n	80021e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	2203      	movs	r2, #3
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4313      	orrs	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021bc:	2201      	movs	r2, #1
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	091b      	lsrs	r3, r3, #4
 80021d2:	f003 0201 	and.w	r2, r3, #1
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4313      	orrs	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	2b03      	cmp	r3, #3
 80021f2:	d017      	beq.n	8002224 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	2203      	movs	r2, #3
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d123      	bne.n	8002278 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	08da      	lsrs	r2, r3, #3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	3208      	adds	r2, #8
 8002238:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800223c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	220f      	movs	r2, #15
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	69ba      	ldr	r2, [r7, #24]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	08da      	lsrs	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3208      	adds	r2, #8
 8002272:	69b9      	ldr	r1, [r7, #24]
 8002274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	2203      	movs	r2, #3
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0203 	and.w	r2, r3, #3
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69ba      	ldr	r2, [r7, #24]
 80022aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80b4 	beq.w	8002422 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b60      	ldr	r3, [pc, #384]	@ (8002440 <HAL_GPIO_Init+0x30c>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	4a5f      	ldr	r2, [pc, #380]	@ (8002440 <HAL_GPIO_Init+0x30c>)
 80022c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002440 <HAL_GPIO_Init+0x30c>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002444 <HAL_GPIO_Init+0x310>)
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	f003 0303 	and.w	r3, r3, #3
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	220f      	movs	r2, #15
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a52      	ldr	r2, [pc, #328]	@ (8002448 <HAL_GPIO_Init+0x314>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d02b      	beq.n	800235a <HAL_GPIO_Init+0x226>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a51      	ldr	r2, [pc, #324]	@ (800244c <HAL_GPIO_Init+0x318>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d025      	beq.n	8002356 <HAL_GPIO_Init+0x222>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a50      	ldr	r2, [pc, #320]	@ (8002450 <HAL_GPIO_Init+0x31c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d01f      	beq.n	8002352 <HAL_GPIO_Init+0x21e>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a4f      	ldr	r2, [pc, #316]	@ (8002454 <HAL_GPIO_Init+0x320>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d019      	beq.n	800234e <HAL_GPIO_Init+0x21a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a4e      	ldr	r2, [pc, #312]	@ (8002458 <HAL_GPIO_Init+0x324>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d013      	beq.n	800234a <HAL_GPIO_Init+0x216>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a4d      	ldr	r2, [pc, #308]	@ (800245c <HAL_GPIO_Init+0x328>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00d      	beq.n	8002346 <HAL_GPIO_Init+0x212>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a4c      	ldr	r2, [pc, #304]	@ (8002460 <HAL_GPIO_Init+0x32c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x20e>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a4b      	ldr	r2, [pc, #300]	@ (8002464 <HAL_GPIO_Init+0x330>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d101      	bne.n	800233e <HAL_GPIO_Init+0x20a>
 800233a:	2307      	movs	r3, #7
 800233c:	e00e      	b.n	800235c <HAL_GPIO_Init+0x228>
 800233e:	2308      	movs	r3, #8
 8002340:	e00c      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002342:	2306      	movs	r3, #6
 8002344:	e00a      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002346:	2305      	movs	r3, #5
 8002348:	e008      	b.n	800235c <HAL_GPIO_Init+0x228>
 800234a:	2304      	movs	r3, #4
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x228>
 800234e:	2303      	movs	r3, #3
 8002350:	e004      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002352:	2302      	movs	r3, #2
 8002354:	e002      	b.n	800235c <HAL_GPIO_Init+0x228>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_GPIO_Init+0x228>
 800235a:	2300      	movs	r3, #0
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	f002 0203 	and.w	r2, r2, #3
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	4093      	lsls	r3, r2
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800236c:	4935      	ldr	r1, [pc, #212]	@ (8002444 <HAL_GPIO_Init+0x310>)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800237a:	4b3b      	ldr	r3, [pc, #236]	@ (8002468 <HAL_GPIO_Init+0x334>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800239e:	4a32      	ldr	r2, [pc, #200]	@ (8002468 <HAL_GPIO_Init+0x334>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a4:	4b30      	ldr	r3, [pc, #192]	@ (8002468 <HAL_GPIO_Init+0x334>)
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c8:	4a27      	ldr	r2, [pc, #156]	@ (8002468 <HAL_GPIO_Init+0x334>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ce:	4b26      	ldr	r3, [pc, #152]	@ (8002468 <HAL_GPIO_Init+0x334>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002468 <HAL_GPIO_Init+0x334>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002468 <HAL_GPIO_Init+0x334>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800241c:	4a12      	ldr	r2, [pc, #72]	@ (8002468 <HAL_GPIO_Init+0x334>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3301      	adds	r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b0f      	cmp	r3, #15
 800242c:	f67f ae90 	bls.w	8002150 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3724      	adds	r7, #36	@ 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40013800 	.word	0x40013800
 8002448:	40020000 	.word	0x40020000
 800244c:	40020400 	.word	0x40020400
 8002450:	40020800 	.word	0x40020800
 8002454:	40020c00 	.word	0x40020c00
 8002458:	40021000 	.word	0x40021000
 800245c:	40021400 	.word	0x40021400
 8002460:	40021800 	.word	0x40021800
 8002464:	40021c00 	.word	0x40021c00
 8002468:	40013c00 	.word	0x40013c00

0800246c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	460b      	mov	r3, r1
 8002476:	807b      	strh	r3, [r7, #2]
 8002478:	4613      	mov	r3, r2
 800247a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800247c:	787b      	ldrb	r3, [r7, #1]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d003      	beq.n	800248a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002482:	887a      	ldrh	r2, [r7, #2]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002488:	e003      	b.n	8002492 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800248a:	887b      	ldrh	r3, [r7, #2]
 800248c:	041a      	lsls	r2, r3, #16
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	619a      	str	r2, [r3, #24]
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
	...

080024a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e267      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d075      	beq.n	80025aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024be:	4b88      	ldr	r3, [pc, #544]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	2b04      	cmp	r3, #4
 80024c8:	d00c      	beq.n	80024e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ca:	4b85      	ldr	r3, [pc, #532]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d112      	bne.n	80024fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024d6:	4b82      	ldr	r3, [pc, #520]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80024de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80024e2:	d10b      	bne.n	80024fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024e4:	4b7e      	ldr	r3, [pc, #504]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d05b      	beq.n	80025a8 <HAL_RCC_OscConfig+0x108>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d157      	bne.n	80025a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e242      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002504:	d106      	bne.n	8002514 <HAL_RCC_OscConfig+0x74>
 8002506:	4b76      	ldr	r3, [pc, #472]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a75      	ldr	r2, [pc, #468]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 800250c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002510:	6013      	str	r3, [r2, #0]
 8002512:	e01d      	b.n	8002550 <HAL_RCC_OscConfig+0xb0>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800251c:	d10c      	bne.n	8002538 <HAL_RCC_OscConfig+0x98>
 800251e:	4b70      	ldr	r3, [pc, #448]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6f      	ldr	r2, [pc, #444]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002524:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002528:	6013      	str	r3, [r2, #0]
 800252a:	4b6d      	ldr	r3, [pc, #436]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a6c      	ldr	r2, [pc, #432]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e00b      	b.n	8002550 <HAL_RCC_OscConfig+0xb0>
 8002538:	4b69      	ldr	r3, [pc, #420]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a68      	ldr	r2, [pc, #416]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 800253e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002542:	6013      	str	r3, [r2, #0]
 8002544:	4b66      	ldr	r3, [pc, #408]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a65      	ldr	r2, [pc, #404]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 800254a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800254e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff fc6c 	bl	8001e34 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fc68 	bl	8001e34 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b64      	cmp	r3, #100	@ 0x64
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e207      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002572:	4b5b      	ldr	r3, [pc, #364]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d0f0      	beq.n	8002560 <HAL_RCC_OscConfig+0xc0>
 800257e:	e014      	b.n	80025aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002580:	f7ff fc58 	bl	8001e34 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002588:	f7ff fc54 	bl	8001e34 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b64      	cmp	r3, #100	@ 0x64
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e1f3      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800259a:	4b51      	ldr	r3, [pc, #324]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0xe8>
 80025a6:	e000      	b.n	80025aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d063      	beq.n	800267e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025b6:	4b4a      	ldr	r3, [pc, #296]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00b      	beq.n	80025da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025c2:	4b47      	ldr	r3, [pc, #284]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d11c      	bne.n	8002608 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025ce:	4b44      	ldr	r3, [pc, #272]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d116      	bne.n	8002608 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	4b41      	ldr	r3, [pc, #260]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d005      	beq.n	80025f2 <HAL_RCC_OscConfig+0x152>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d001      	beq.n	80025f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e1c7      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f2:	4b3b      	ldr	r3, [pc, #236]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	691b      	ldr	r3, [r3, #16]
 80025fe:	00db      	lsls	r3, r3, #3
 8002600:	4937      	ldr	r1, [pc, #220]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002602:	4313      	orrs	r3, r2
 8002604:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002606:	e03a      	b.n	800267e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d020      	beq.n	8002652 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002610:	4b34      	ldr	r3, [pc, #208]	@ (80026e4 <HAL_RCC_OscConfig+0x244>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7ff fc0d 	bl	8001e34 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800261e:	f7ff fc09 	bl	8001e34 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e1a8      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002630:	4b2b      	ldr	r3, [pc, #172]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0302 	and.w	r3, r3, #2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263c:	4b28      	ldr	r3, [pc, #160]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	691b      	ldr	r3, [r3, #16]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	4925      	ldr	r1, [pc, #148]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 800264c:	4313      	orrs	r3, r2
 800264e:	600b      	str	r3, [r1, #0]
 8002650:	e015      	b.n	800267e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002652:	4b24      	ldr	r3, [pc, #144]	@ (80026e4 <HAL_RCC_OscConfig+0x244>)
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002658:	f7ff fbec 	bl	8001e34 <HAL_GetTick>
 800265c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800265e:	e008      	b.n	8002672 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002660:	f7ff fbe8 	bl	8001e34 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e187      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002672:	4b1b      	ldr	r3, [pc, #108]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1f0      	bne.n	8002660 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d036      	beq.n	80026f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002692:	4b15      	ldr	r3, [pc, #84]	@ (80026e8 <HAL_RCC_OscConfig+0x248>)
 8002694:	2201      	movs	r2, #1
 8002696:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002698:	f7ff fbcc 	bl	8001e34 <HAL_GetTick>
 800269c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800269e:	e008      	b.n	80026b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a0:	f7ff fbc8 	bl	8001e34 <HAL_GetTick>
 80026a4:	4602      	mov	r2, r0
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	1ad3      	subs	r3, r2, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e167      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026b2:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_RCC_OscConfig+0x240>)
 80026b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026b6:	f003 0302 	and.w	r3, r3, #2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d0f0      	beq.n	80026a0 <HAL_RCC_OscConfig+0x200>
 80026be:	e01b      	b.n	80026f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026c0:	4b09      	ldr	r3, [pc, #36]	@ (80026e8 <HAL_RCC_OscConfig+0x248>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c6:	f7ff fbb5 	bl	8001e34 <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026cc:	e00e      	b.n	80026ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026ce:	f7ff fbb1 	bl	8001e34 <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d907      	bls.n	80026ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e150      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
 80026e0:	40023800 	.word	0x40023800
 80026e4:	42470000 	.word	0x42470000
 80026e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026ec:	4b88      	ldr	r3, [pc, #544]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 80026ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1ea      	bne.n	80026ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8097 	beq.w	8002834 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800270a:	4b81      	ldr	r3, [pc, #516]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002716:	2300      	movs	r3, #0
 8002718:	60bb      	str	r3, [r7, #8]
 800271a:	4b7d      	ldr	r3, [pc, #500]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	4a7c      	ldr	r2, [pc, #496]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 8002720:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002724:	6413      	str	r3, [r2, #64]	@ 0x40
 8002726:	4b7a      	ldr	r3, [pc, #488]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 8002728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800272a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002732:	2301      	movs	r3, #1
 8002734:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002736:	4b77      	ldr	r3, [pc, #476]	@ (8002914 <HAL_RCC_OscConfig+0x474>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800273e:	2b00      	cmp	r3, #0
 8002740:	d118      	bne.n	8002774 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002742:	4b74      	ldr	r3, [pc, #464]	@ (8002914 <HAL_RCC_OscConfig+0x474>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a73      	ldr	r2, [pc, #460]	@ (8002914 <HAL_RCC_OscConfig+0x474>)
 8002748:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800274c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800274e:	f7ff fb71 	bl	8001e34 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002756:	f7ff fb6d 	bl	8001e34 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e10c      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002768:	4b6a      	ldr	r3, [pc, #424]	@ (8002914 <HAL_RCC_OscConfig+0x474>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	2b01      	cmp	r3, #1
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x2ea>
 800277c:	4b64      	ldr	r3, [pc, #400]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 800277e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002780:	4a63      	ldr	r2, [pc, #396]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 8002782:	f043 0301 	orr.w	r3, r3, #1
 8002786:	6713      	str	r3, [r2, #112]	@ 0x70
 8002788:	e01c      	b.n	80027c4 <HAL_RCC_OscConfig+0x324>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b05      	cmp	r3, #5
 8002790:	d10c      	bne.n	80027ac <HAL_RCC_OscConfig+0x30c>
 8002792:	4b5f      	ldr	r3, [pc, #380]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002796:	4a5e      	ldr	r2, [pc, #376]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 8002798:	f043 0304 	orr.w	r3, r3, #4
 800279c:	6713      	str	r3, [r2, #112]	@ 0x70
 800279e:	4b5c      	ldr	r3, [pc, #368]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 80027a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027aa:	e00b      	b.n	80027c4 <HAL_RCC_OscConfig+0x324>
 80027ac:	4b58      	ldr	r3, [pc, #352]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 80027ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027b0:	4a57      	ldr	r2, [pc, #348]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 80027b2:	f023 0301 	bic.w	r3, r3, #1
 80027b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80027b8:	4b55      	ldr	r3, [pc, #340]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027bc:	4a54      	ldr	r2, [pc, #336]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 80027be:	f023 0304 	bic.w	r3, r3, #4
 80027c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d015      	beq.n	80027f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027cc:	f7ff fb32 	bl	8001e34 <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7ff fb2e 	bl	8001e34 <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0cb      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ea:	4b49      	ldr	r3, [pc, #292]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0ee      	beq.n	80027d4 <HAL_RCC_OscConfig+0x334>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7ff fb1c 	bl	8001e34 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002800:	f7ff fb18 	bl	8001e34 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e0b5      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002816:	4b3e      	ldr	r3, [pc, #248]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1ee      	bne.n	8002800 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002822:	7dfb      	ldrb	r3, [r7, #23]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d105      	bne.n	8002834 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002828:	4b39      	ldr	r3, [pc, #228]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	4a38      	ldr	r2, [pc, #224]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 800282e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002832:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80a1 	beq.w	8002980 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800283e:	4b34      	ldr	r3, [pc, #208]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b08      	cmp	r3, #8
 8002848:	d05c      	beq.n	8002904 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2b02      	cmp	r3, #2
 8002850:	d141      	bne.n	80028d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002852:	4b31      	ldr	r3, [pc, #196]	@ (8002918 <HAL_RCC_OscConfig+0x478>)
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7ff faec 	bl	8001e34 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002860:	f7ff fae8 	bl	8001e34 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e087      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002872:	4b27      	ldr	r3, [pc, #156]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1f0      	bne.n	8002860 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69da      	ldr	r2, [r3, #28]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a1b      	ldr	r3, [r3, #32]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800288c:	019b      	lsls	r3, r3, #6
 800288e:	431a      	orrs	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002894:	085b      	lsrs	r3, r3, #1
 8002896:	3b01      	subs	r3, #1
 8002898:	041b      	lsls	r3, r3, #16
 800289a:	431a      	orrs	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	491b      	ldr	r1, [pc, #108]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <HAL_RCC_OscConfig+0x478>)
 80028aa:	2201      	movs	r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ae:	f7ff fac1 	bl	8001e34 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b6:	f7ff fabd 	bl	8001e34 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e05c      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c8:	4b11      	ldr	r3, [pc, #68]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x416>
 80028d4:	e054      	b.n	8002980 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d6:	4b10      	ldr	r3, [pc, #64]	@ (8002918 <HAL_RCC_OscConfig+0x478>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028dc:	f7ff faaa 	bl	8001e34 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e4:	f7ff faa6 	bl	8001e34 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e045      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028f6:	4b06      	ldr	r3, [pc, #24]	@ (8002910 <HAL_RCC_OscConfig+0x470>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1f0      	bne.n	80028e4 <HAL_RCC_OscConfig+0x444>
 8002902:	e03d      	b.n	8002980 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d107      	bne.n	800291c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e038      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
 8002910:	40023800 	.word	0x40023800
 8002914:	40007000 	.word	0x40007000
 8002918:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800291c:	4b1b      	ldr	r3, [pc, #108]	@ (800298c <HAL_RCC_OscConfig+0x4ec>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d028      	beq.n	800297c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002934:	429a      	cmp	r2, r3
 8002936:	d121      	bne.n	800297c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002942:	429a      	cmp	r2, r3
 8002944:	d11a      	bne.n	800297c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800294c:	4013      	ands	r3, r2
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002952:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002954:	4293      	cmp	r3, r2
 8002956:	d111      	bne.n	800297c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002962:	085b      	lsrs	r3, r3, #1
 8002964:	3b01      	subs	r3, #1
 8002966:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002968:	429a      	cmp	r2, r3
 800296a:	d107      	bne.n	800297c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002976:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e000      	b.n	8002982 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3718      	adds	r7, #24
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800

08002990 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d101      	bne.n	80029a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0cc      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029a4:	4b68      	ldr	r3, [pc, #416]	@ (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d90c      	bls.n	80029cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b65      	ldr	r3, [pc, #404]	@ (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	b2d2      	uxtb	r2, r2
 80029b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ba:	4b63      	ldr	r3, [pc, #396]	@ (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	683a      	ldr	r2, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e0b8      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d020      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d005      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029e4:	4b59      	ldr	r3, [pc, #356]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4a58      	ldr	r2, [pc, #352]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80029ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0308 	and.w	r3, r3, #8
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029fc:	4b53      	ldr	r3, [pc, #332]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	4a52      	ldr	r2, [pc, #328]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a08:	4b50      	ldr	r3, [pc, #320]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	494d      	ldr	r1, [pc, #308]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d044      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d107      	bne.n	8002a3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2e:	4b47      	ldr	r3, [pc, #284]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d119      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e07f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d003      	beq.n	8002a4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d109      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e067      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a6e:	4b37      	ldr	r3, [pc, #220]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	f023 0203 	bic.w	r2, r3, #3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	4934      	ldr	r1, [pc, #208]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a80:	f7ff f9d8 	bl	8001e34 <HAL_GetTick>
 8002a84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a86:	e00a      	b.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a88:	f7ff f9d4 	bl	8001e34 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e04f      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 020c 	and.w	r2, r3, #12
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d1eb      	bne.n	8002a88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ab0:	4b25      	ldr	r3, [pc, #148]	@ (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	683a      	ldr	r2, [r7, #0]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d20c      	bcs.n	8002ad8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002abe:	4b22      	ldr	r3, [pc, #136]	@ (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ac6:	4b20      	ldr	r3, [pc, #128]	@ (8002b48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0307 	and.w	r3, r3, #7
 8002ace:	683a      	ldr	r2, [r7, #0]
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d001      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e032      	b.n	8002b3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d008      	beq.n	8002af6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ae4:	4b19      	ldr	r3, [pc, #100]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	4916      	ldr	r1, [pc, #88]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0308 	and.w	r3, r3, #8
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d009      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b02:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	490e      	ldr	r1, [pc, #56]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b16:	f000 f821 	bl	8002b5c <HAL_RCC_GetSysClockFreq>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b4c <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 030f 	and.w	r3, r3, #15
 8002b26:	490a      	ldr	r1, [pc, #40]	@ (8002b50 <HAL_RCC_ClockConfig+0x1c0>)
 8002b28:	5ccb      	ldrb	r3, [r1, r3]
 8002b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2e:	4a09      	ldr	r2, [pc, #36]	@ (8002b54 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b32:	4b09      	ldr	r3, [pc, #36]	@ (8002b58 <HAL_RCC_ClockConfig+0x1c8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f85e 	bl	8001bf8 <HAL_InitTick>

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40023c00 	.word	0x40023c00
 8002b4c:	40023800 	.word	0x40023800
 8002b50:	080076d8 	.word	0x080076d8
 8002b54:	20000024 	.word	0x20000024
 8002b58:	20000028 	.word	0x20000028

08002b5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b60:	b094      	sub	sp, #80	@ 0x50
 8002b62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b64:	2300      	movs	r3, #0
 8002b66:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b68:	2300      	movs	r3, #0
 8002b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b74:	4b79      	ldr	r3, [pc, #484]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 030c 	and.w	r3, r3, #12
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d00d      	beq.n	8002b9c <HAL_RCC_GetSysClockFreq+0x40>
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	f200 80e1 	bhi.w	8002d48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d002      	beq.n	8002b90 <HAL_RCC_GetSysClockFreq+0x34>
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d003      	beq.n	8002b96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b8e:	e0db      	b.n	8002d48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b73      	ldr	r3, [pc, #460]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b92:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002b94:	e0db      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b96:	4b73      	ldr	r3, [pc, #460]	@ (8002d64 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002b9a:	e0d8      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ba4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d063      	beq.n	8002c7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	099b      	lsrs	r3, r3, #6
 8002bb8:	2200      	movs	r2, #0
 8002bba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002bbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bce:	4622      	mov	r2, r4
 8002bd0:	462b      	mov	r3, r5
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	0159      	lsls	r1, r3, #5
 8002bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002be0:	0150      	lsls	r0, r2, #5
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4621      	mov	r1, r4
 8002be8:	1a51      	subs	r1, r2, r1
 8002bea:	6139      	str	r1, [r7, #16]
 8002bec:	4629      	mov	r1, r5
 8002bee:	eb63 0301 	sbc.w	r3, r3, r1
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	f04f 0300 	mov.w	r3, #0
 8002bfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c00:	4659      	mov	r1, fp
 8002c02:	018b      	lsls	r3, r1, #6
 8002c04:	4651      	mov	r1, sl
 8002c06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c0a:	4651      	mov	r1, sl
 8002c0c:	018a      	lsls	r2, r1, #6
 8002c0e:	4651      	mov	r1, sl
 8002c10:	ebb2 0801 	subs.w	r8, r2, r1
 8002c14:	4659      	mov	r1, fp
 8002c16:	eb63 0901 	sbc.w	r9, r3, r1
 8002c1a:	f04f 0200 	mov.w	r2, #0
 8002c1e:	f04f 0300 	mov.w	r3, #0
 8002c22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c2e:	4690      	mov	r8, r2
 8002c30:	4699      	mov	r9, r3
 8002c32:	4623      	mov	r3, r4
 8002c34:	eb18 0303 	adds.w	r3, r8, r3
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	462b      	mov	r3, r5
 8002c3c:	eb49 0303 	adc.w	r3, r9, r3
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c4e:	4629      	mov	r1, r5
 8002c50:	024b      	lsls	r3, r1, #9
 8002c52:	4621      	mov	r1, r4
 8002c54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c58:	4621      	mov	r1, r4
 8002c5a:	024a      	lsls	r2, r1, #9
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c62:	2200      	movs	r2, #0
 8002c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002c66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002c6c:	f7fd feb8 	bl	80009e0 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c78:	e058      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c7a:	4b38      	ldr	r3, [pc, #224]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	099b      	lsrs	r3, r3, #6
 8002c80:	2200      	movs	r2, #0
 8002c82:	4618      	mov	r0, r3
 8002c84:	4611      	mov	r1, r2
 8002c86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c94:	4642      	mov	r2, r8
 8002c96:	464b      	mov	r3, r9
 8002c98:	f04f 0000 	mov.w	r0, #0
 8002c9c:	f04f 0100 	mov.w	r1, #0
 8002ca0:	0159      	lsls	r1, r3, #5
 8002ca2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ca6:	0150      	lsls	r0, r2, #5
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4641      	mov	r1, r8
 8002cae:	ebb2 0a01 	subs.w	sl, r2, r1
 8002cb2:	4649      	mov	r1, r9
 8002cb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002cc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002cc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ccc:	ebb2 040a 	subs.w	r4, r2, sl
 8002cd0:	eb63 050b 	sbc.w	r5, r3, fp
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	00eb      	lsls	r3, r5, #3
 8002cde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ce2:	00e2      	lsls	r2, r4, #3
 8002ce4:	4614      	mov	r4, r2
 8002ce6:	461d      	mov	r5, r3
 8002ce8:	4643      	mov	r3, r8
 8002cea:	18e3      	adds	r3, r4, r3
 8002cec:	603b      	str	r3, [r7, #0]
 8002cee:	464b      	mov	r3, r9
 8002cf0:	eb45 0303 	adc.w	r3, r5, r3
 8002cf4:	607b      	str	r3, [r7, #4]
 8002cf6:	f04f 0200 	mov.w	r2, #0
 8002cfa:	f04f 0300 	mov.w	r3, #0
 8002cfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d02:	4629      	mov	r1, r5
 8002d04:	028b      	lsls	r3, r1, #10
 8002d06:	4621      	mov	r1, r4
 8002d08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	028a      	lsls	r2, r1, #10
 8002d10:	4610      	mov	r0, r2
 8002d12:	4619      	mov	r1, r3
 8002d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002d16:	2200      	movs	r2, #0
 8002d18:	61bb      	str	r3, [r7, #24]
 8002d1a:	61fa      	str	r2, [r7, #28]
 8002d1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d20:	f7fd fe5e 	bl	80009e0 <__aeabi_uldivmod>
 8002d24:	4602      	mov	r2, r0
 8002d26:	460b      	mov	r3, r1
 8002d28:	4613      	mov	r3, r2
 8002d2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d5c <HAL_RCC_GetSysClockFreq+0x200>)
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	0c1b      	lsrs	r3, r3, #16
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	3301      	adds	r3, #1
 8002d38:	005b      	lsls	r3, r3, #1
 8002d3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002d3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d46:	e002      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d48:	4b05      	ldr	r3, [pc, #20]	@ (8002d60 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3750      	adds	r7, #80	@ 0x50
 8002d54:	46bd      	mov	sp, r7
 8002d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40023800 	.word	0x40023800
 8002d60:	00f42400 	.word	0x00f42400
 8002d64:	007a1200 	.word	0x007a1200

08002d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b03      	ldr	r3, [pc, #12]	@ (8002d7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	20000024 	.word	0x20000024

08002d80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d84:	f7ff fff0 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	0a9b      	lsrs	r3, r3, #10
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4903      	ldr	r1, [pc, #12]	@ (8002da4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40023800 	.word	0x40023800
 8002da4:	080076e8 	.word	0x080076e8

08002da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002dac:	f7ff ffdc 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002db0:	4602      	mov	r2, r0
 8002db2:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db4:	689b      	ldr	r3, [r3, #8]
 8002db6:	0b5b      	lsrs	r3, r3, #13
 8002db8:	f003 0307 	and.w	r3, r3, #7
 8002dbc:	4903      	ldr	r1, [pc, #12]	@ (8002dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dbe:	5ccb      	ldrb	r3, [r1, r3]
 8002dc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40023800 	.word	0x40023800
 8002dcc:	080076e8 	.word	0x080076e8

08002dd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	220f      	movs	r2, #15
 8002dde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002de0:	4b12      	ldr	r3, [pc, #72]	@ (8002e2c <HAL_RCC_GetClockConfig+0x5c>)
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 0203 	and.w	r2, r3, #3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002dec:	4b0f      	ldr	r3, [pc, #60]	@ (8002e2c <HAL_RCC_GetClockConfig+0x5c>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002df8:	4b0c      	ldr	r3, [pc, #48]	@ (8002e2c <HAL_RCC_GetClockConfig+0x5c>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e04:	4b09      	ldr	r3, [pc, #36]	@ (8002e2c <HAL_RCC_GetClockConfig+0x5c>)
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	08db      	lsrs	r3, r3, #3
 8002e0a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e12:	4b07      	ldr	r3, [pc, #28]	@ (8002e30 <HAL_RCC_GetClockConfig+0x60>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0207 	and.w	r2, r3, #7
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	601a      	str	r2, [r3, #0]
}
 8002e1e:	bf00      	nop
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	40023c00 	.word	0x40023c00

08002e34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e041      	b.n	8002eca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d106      	bne.n	8002e60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f000 f839 	bl	8002ed2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3304      	adds	r3, #4
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f000 f9c0 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
	...

08002ee8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d001      	beq.n	8002f00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e04e      	b.n	8002f9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0201 	orr.w	r2, r2, #1
 8002f16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a23      	ldr	r2, [pc, #140]	@ (8002fac <HAL_TIM_Base_Start_IT+0xc4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d022      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f2a:	d01d      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d018      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d013      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00e      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a1b      	ldr	r2, [pc, #108]	@ (8002fbc <HAL_TIM_Base_Start_IT+0xd4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a19      	ldr	r2, [pc, #100]	@ (8002fc0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_TIM_Base_Start_IT+0x80>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a18      	ldr	r2, [pc, #96]	@ (8002fc4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d111      	bne.n	8002f8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2b06      	cmp	r3, #6
 8002f78:	d010      	beq.n	8002f9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f042 0201 	orr.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8a:	e007      	b.n	8002f9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3714      	adds	r7, #20
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40010000 	.word	0x40010000
 8002fb0:	40000400 	.word	0x40000400
 8002fb4:	40000800 	.word	0x40000800
 8002fb8:	40000c00 	.word	0x40000c00
 8002fbc:	40010400 	.word	0x40010400
 8002fc0:	40014000 	.word	0x40014000
 8002fc4:	40001800 	.word	0x40001800

08002fc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d020      	beq.n	800302c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d01b      	beq.n	800302c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f06f 0202 	mvn.w	r2, #2
 8002ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b00      	cmp	r3, #0
 8003010:	d003      	beq.n	800301a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f8d2 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8003018:	e005      	b.n	8003026 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f8c4 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 f8d5 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f003 0304 	and.w	r3, r3, #4
 8003032:	2b00      	cmp	r3, #0
 8003034:	d020      	beq.n	8003078 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01b      	beq.n	8003078 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0204 	mvn.w	r2, #4
 8003048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2202      	movs	r2, #2
 800304e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f8ac 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8003064:	e005      	b.n	8003072 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f89e 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 f8af 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d020      	beq.n	80030c4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d01b      	beq.n	80030c4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0208 	mvn.w	r2, #8
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2204      	movs	r2, #4
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f886 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f878 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f889 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	f003 0310 	and.w	r3, r3, #16
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d020      	beq.n	8003110 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d01b      	beq.n	8003110 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0210 	mvn.w	r2, #16
 80030e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2208      	movs	r2, #8
 80030e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 f860 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 80030fc:	e005      	b.n	800310a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f852 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003104:	6878      	ldr	r0, [r7, #4]
 8003106:	f000 f863 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00c      	beq.n	8003134 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 0301 	and.w	r3, r3, #1
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f06f 0201 	mvn.w	r2, #1
 800312c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fe fcd2 	bl	8001ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00c      	beq.n	8003158 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003144:	2b00      	cmp	r3, #0
 8003146:	d007      	beq.n	8003158 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f906 	bl	8003364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00c      	beq.n	800317c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003168:	2b00      	cmp	r3, #0
 800316a:	d007      	beq.n	800317c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f834 	bl	80031e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	f003 0320 	and.w	r3, r3, #32
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d007      	beq.n	80031a0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f06f 0220 	mvn.w	r2, #32
 8003198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f8d8 	bl	8003350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031a0:	bf00      	nop
 80031a2:	3710      	adds	r7, #16
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a46      	ldr	r2, [pc, #280]	@ (8003324 <TIM_Base_SetConfig+0x12c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003216:	d00f      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a43      	ldr	r2, [pc, #268]	@ (8003328 <TIM_Base_SetConfig+0x130>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00b      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a42      	ldr	r2, [pc, #264]	@ (800332c <TIM_Base_SetConfig+0x134>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d007      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a41      	ldr	r2, [pc, #260]	@ (8003330 <TIM_Base_SetConfig+0x138>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d003      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a40      	ldr	r2, [pc, #256]	@ (8003334 <TIM_Base_SetConfig+0x13c>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d108      	bne.n	800324a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800323e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a35      	ldr	r2, [pc, #212]	@ (8003324 <TIM_Base_SetConfig+0x12c>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02b      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003258:	d027      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a32      	ldr	r2, [pc, #200]	@ (8003328 <TIM_Base_SetConfig+0x130>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d023      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a31      	ldr	r2, [pc, #196]	@ (800332c <TIM_Base_SetConfig+0x134>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01f      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a30      	ldr	r2, [pc, #192]	@ (8003330 <TIM_Base_SetConfig+0x138>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d01b      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a2f      	ldr	r2, [pc, #188]	@ (8003334 <TIM_Base_SetConfig+0x13c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d017      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a2e      	ldr	r2, [pc, #184]	@ (8003338 <TIM_Base_SetConfig+0x140>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a2d      	ldr	r2, [pc, #180]	@ (800333c <TIM_Base_SetConfig+0x144>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00f      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a2c      	ldr	r2, [pc, #176]	@ (8003340 <TIM_Base_SetConfig+0x148>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00b      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a2b      	ldr	r2, [pc, #172]	@ (8003344 <TIM_Base_SetConfig+0x14c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2a      	ldr	r2, [pc, #168]	@ (8003348 <TIM_Base_SetConfig+0x150>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a29      	ldr	r2, [pc, #164]	@ (800334c <TIM_Base_SetConfig+0x154>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d108      	bne.n	80032bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a10      	ldr	r2, [pc, #64]	@ (8003324 <TIM_Base_SetConfig+0x12c>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d003      	beq.n	80032f0 <TIM_Base_SetConfig+0xf8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a12      	ldr	r2, [pc, #72]	@ (8003334 <TIM_Base_SetConfig+0x13c>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d103      	bne.n	80032f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b01      	cmp	r3, #1
 8003308:	d105      	bne.n	8003316 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	f023 0201 	bic.w	r2, r3, #1
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	611a      	str	r2, [r3, #16]
  }
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40010400 	.word	0x40010400
 8003338:	40014000 	.word	0x40014000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800
 8003344:	40001800 	.word	0x40001800
 8003348:	40001c00 	.word	0x40001c00
 800334c:	40002000 	.word	0x40002000

08003350 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003358:	bf00      	nop
 800335a:	370c      	adds	r7, #12
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800336c:	bf00      	nop
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d101      	bne.n	800338a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e042      	b.n	8003410 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d106      	bne.n	80033a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7fe fbda 	bl	8001b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2224      	movs	r2, #36	@ 0x24
 80033a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68da      	ldr	r2, [r3, #12]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fdbd 	bl	8003f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691a      	ldr	r2, [r3, #16]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2220      	movs	r2, #32
 80033fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3708      	adds	r7, #8
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b08a      	sub	sp, #40	@ 0x28
 800341c:	af02      	add	r7, sp, #8
 800341e:	60f8      	str	r0, [r7, #12]
 8003420:	60b9      	str	r1, [r7, #8]
 8003422:	603b      	str	r3, [r7, #0]
 8003424:	4613      	mov	r3, r2
 8003426:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b20      	cmp	r3, #32
 8003436:	d175      	bne.n	8003524 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_UART_Transmit+0x2c>
 800343e:	88fb      	ldrh	r3, [r7, #6]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e06e      	b.n	8003526 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2221      	movs	r2, #33	@ 0x21
 8003452:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003456:	f7fe fced 	bl	8001e34 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003470:	d108      	bne.n	8003484 <HAL_UART_Transmit+0x6c>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e003      	b.n	800348c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800348c:	e02e      	b.n	80034ec <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	9300      	str	r3, [sp, #0]
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2200      	movs	r2, #0
 8003496:	2180      	movs	r1, #128	@ 0x80
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fb1f 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d005      	beq.n	80034b0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2220      	movs	r2, #32
 80034a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e03a      	b.n	8003526 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3302      	adds	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	e007      	b.n	80034de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3301      	adds	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1cb      	bne.n	800348e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2140      	movs	r1, #64	@ 0x40
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 faeb 	bl	8003adc <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d005      	beq.n	8003518 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003514:	2303      	movs	r3, #3
 8003516:	e006      	b.n	8003526 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2220      	movs	r2, #32
 800351c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003520:	2300      	movs	r3, #0
 8003522:	e000      	b.n	8003526 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003524:	2302      	movs	r3, #2
  }
}
 8003526:	4618      	mov	r0, r3
 8003528:	3720      	adds	r7, #32
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	4613      	mov	r3, r2
 800353a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003542:	b2db      	uxtb	r3, r3
 8003544:	2b20      	cmp	r3, #32
 8003546:	d112      	bne.n	800356e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d002      	beq.n	8003554 <HAL_UART_Receive_IT+0x26>
 800354e:	88fb      	ldrh	r3, [r7, #6]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e00b      	b.n	8003570 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	461a      	mov	r2, r3
 8003562:	68b9      	ldr	r1, [r7, #8]
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 fb12 	bl	8003b8e <UART_Start_Receive_IT>
 800356a:	4603      	mov	r3, r0
 800356c:	e000      	b.n	8003570 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800356e:	2302      	movs	r3, #2
  }
}
 8003570:	4618      	mov	r0, r3
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b0ba      	sub	sp, #232	@ 0xe8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80035aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035ae:	f003 030f 	and.w	r3, r3, #15
 80035b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80035b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d10f      	bne.n	80035de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80035c2:	f003 0320 	and.w	r3, r3, #32
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_UART_IRQHandler+0x66>
 80035ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f000 fbf2 	bl	8003dc0 <UART_Receive_IT>
      return;
 80035dc:	e25b      	b.n	8003a96 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80035de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 80de 	beq.w	80037a4 <HAL_UART_IRQHandler+0x22c>
 80035e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d106      	bne.n	8003602 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80035f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80035f8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 80d1 	beq.w	80037a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003606:	f003 0301 	and.w	r3, r3, #1
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_UART_IRQHandler+0xae>
 800360e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003616:	2b00      	cmp	r3, #0
 8003618:	d005      	beq.n	8003626 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	f043 0201 	orr.w	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800362a:	f003 0304 	and.w	r3, r3, #4
 800362e:	2b00      	cmp	r3, #0
 8003630:	d00b      	beq.n	800364a <HAL_UART_IRQHandler+0xd2>
 8003632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003642:	f043 0202 	orr.w	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00b      	beq.n	800366e <HAL_UART_IRQHandler+0xf6>
 8003656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003666:	f043 0204 	orr.w	r2, r3, #4
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800366e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003672:	f003 0308 	and.w	r3, r3, #8
 8003676:	2b00      	cmp	r3, #0
 8003678:	d011      	beq.n	800369e <HAL_UART_IRQHandler+0x126>
 800367a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800367e:	f003 0320 	and.w	r3, r3, #32
 8003682:	2b00      	cmp	r3, #0
 8003684:	d105      	bne.n	8003692 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d005      	beq.n	800369e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003696:	f043 0208 	orr.w	r2, r3, #8
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	f000 81f2 	beq.w	8003a8c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ac:	f003 0320 	and.w	r3, r3, #32
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_UART_IRQHandler+0x14e>
 80036b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f000 fb7d 	bl	8003dc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	695b      	ldr	r3, [r3, #20]
 80036cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d0:	2b40      	cmp	r3, #64	@ 0x40
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	f003 0308 	and.w	r3, r3, #8
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d103      	bne.n	80036f2 <HAL_UART_IRQHandler+0x17a>
 80036ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d04f      	beq.n	8003792 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f000 fa85 	bl	8003c02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	695b      	ldr	r3, [r3, #20]
 80036fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003702:	2b40      	cmp	r3, #64	@ 0x40
 8003704:	d141      	bne.n	800378a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	3314      	adds	r3, #20
 800370c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003710:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800371c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003720:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003724:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3314      	adds	r3, #20
 800372e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003732:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003736:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800373e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003742:	e841 2300 	strex	r3, r2, [r1]
 8003746:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800374a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1d9      	bne.n	8003706 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d013      	beq.n	8003782 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800375e:	4a7e      	ldr	r2, [pc, #504]	@ (8003958 <HAL_UART_IRQHandler+0x3e0>)
 8003760:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003766:	4618      	mov	r0, r3
 8003768:	f7fe fcc2 	bl	80020f0 <HAL_DMA_Abort_IT>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d016      	beq.n	80037a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003776:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800377c:	4610      	mov	r0, r2
 800377e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003780:	e00e      	b.n	80037a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f994 	bl	8003ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003788:	e00a      	b.n	80037a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f990 	bl	8003ab0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003790:	e006      	b.n	80037a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 f98c 	bl	8003ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2200      	movs	r2, #0
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800379e:	e175      	b.n	8003a8c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a0:	bf00      	nop
    return;
 80037a2:	e173      	b.n	8003a8c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	f040 814f 	bne.w	8003a4c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80037ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037b2:	f003 0310 	and.w	r3, r3, #16
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	f000 8148 	beq.w	8003a4c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80037bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c0:	f003 0310 	and.w	r3, r3, #16
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 8141 	beq.w	8003a4c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	60bb      	str	r3, [r7, #8]
 80037de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ea:	2b40      	cmp	r3, #64	@ 0x40
 80037ec:	f040 80b6 	bne.w	800395c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8145 	beq.w	8003a90 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800380a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800380e:	429a      	cmp	r2, r3
 8003810:	f080 813e 	bcs.w	8003a90 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800381a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003820:	69db      	ldr	r3, [r3, #28]
 8003822:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003826:	f000 8088 	beq.w	800393a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	330c      	adds	r3, #12
 8003830:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003838:	e853 3f00 	ldrex	r3, [r3]
 800383c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003840:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003844:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003848:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	330c      	adds	r3, #12
 8003852:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003856:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800385a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003862:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003866:	e841 2300 	strex	r3, r2, [r1]
 800386a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800386e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003872:	2b00      	cmp	r3, #0
 8003874:	d1d9      	bne.n	800382a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3314      	adds	r3, #20
 800387c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003886:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	3314      	adds	r3, #20
 8003896:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800389a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800389e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80038a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80038a6:	e841 2300 	strex	r3, r2, [r1]
 80038aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80038ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1e1      	bne.n	8003876 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	3314      	adds	r3, #20
 80038b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80038bc:	e853 3f00 	ldrex	r3, [r3]
 80038c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80038c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80038c4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	3314      	adds	r3, #20
 80038d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80038d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80038d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80038dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038de:	e841 2300 	strex	r3, r2, [r1]
 80038e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80038e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1e3      	bne.n	80038b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2220      	movs	r2, #32
 80038ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800390a:	f023 0310 	bic.w	r3, r3, #16
 800390e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800391c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800391e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003920:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003922:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003924:	e841 2300 	strex	r3, r2, [r1]
 8003928:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800392a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1e3      	bne.n	80038f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fb6b 	bl	8002010 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2202      	movs	r2, #2
 800393e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003948:	b29b      	uxth	r3, r3
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	b29b      	uxth	r3, r3
 800394e:	4619      	mov	r1, r3
 8003950:	6878      	ldr	r0, [r7, #4]
 8003952:	f000 f8b7 	bl	8003ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003956:	e09b      	b.n	8003a90 <HAL_UART_IRQHandler+0x518>
 8003958:	08003cc9 	.word	0x08003cc9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003964:	b29b      	uxth	r3, r3
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 808e 	beq.w	8003a94 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003978:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 8089 	beq.w	8003a94 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003994:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003998:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	330c      	adds	r3, #12
 80039a2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80039a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80039a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80039ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039ae:	e841 2300 	strex	r3, r2, [r1]
 80039b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80039b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d1e3      	bne.n	8003982 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3314      	adds	r3, #20
 80039c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c4:	e853 3f00 	ldrex	r3, [r3]
 80039c8:	623b      	str	r3, [r7, #32]
   return(result);
 80039ca:	6a3b      	ldr	r3, [r7, #32]
 80039cc:	f023 0301 	bic.w	r3, r3, #1
 80039d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	3314      	adds	r3, #20
 80039da:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80039de:	633a      	str	r2, [r7, #48]	@ 0x30
 80039e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80039e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80039ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e3      	bne.n	80039ba <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	330c      	adds	r3, #12
 8003a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0310 	bic.w	r3, r3, #16
 8003a16:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	330c      	adds	r3, #12
 8003a20:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003a24:	61fa      	str	r2, [r7, #28]
 8003a26:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a28:	69b9      	ldr	r1, [r7, #24]
 8003a2a:	69fa      	ldr	r2, [r7, #28]
 8003a2c:	e841 2300 	strex	r3, r2, [r1]
 8003a30:	617b      	str	r3, [r7, #20]
   return(result);
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d1e3      	bne.n	8003a00 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2202      	movs	r2, #2
 8003a3c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a42:	4619      	mov	r1, r3
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 f83d 	bl	8003ac4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a4a:	e023      	b.n	8003a94 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d009      	beq.n	8003a6c <HAL_UART_IRQHandler+0x4f4>
 8003a58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 f943 	bl	8003cf0 <UART_Transmit_IT>
    return;
 8003a6a:	e014      	b.n	8003a96 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00e      	beq.n	8003a96 <HAL_UART_IRQHandler+0x51e>
 8003a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f983 	bl	8003d90 <UART_EndTransmit_IT>
    return;
 8003a8a:	e004      	b.n	8003a96 <HAL_UART_IRQHandler+0x51e>
    return;
 8003a8c:	bf00      	nop
 8003a8e:	e002      	b.n	8003a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a90:	bf00      	nop
 8003a92:	e000      	b.n	8003a96 <HAL_UART_IRQHandler+0x51e>
      return;
 8003a94:	bf00      	nop
  }
}
 8003a96:	37e8      	adds	r7, #232	@ 0xe8
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ab8:	bf00      	nop
 8003aba:	370c      	adds	r7, #12
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b083      	sub	sp, #12
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	460b      	mov	r3, r1
 8003ace:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aec:	e03b      	b.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003af4:	d037      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003af6:	f7fe f99d 	bl	8001e34 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	6a3a      	ldr	r2, [r7, #32]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d302      	bcc.n	8003b0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003b06:	6a3b      	ldr	r3, [r7, #32]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e03a      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d023      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b80      	cmp	r3, #128	@ 0x80
 8003b22:	d020      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	2b40      	cmp	r3, #64	@ 0x40
 8003b28:	d01d      	beq.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 0308 	and.w	r3, r3, #8
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d116      	bne.n	8003b66 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	617b      	str	r3, [r7, #20]
 8003b4c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b4e:	68f8      	ldr	r0, [r7, #12]
 8003b50:	f000 f857 	bl	8003c02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2208      	movs	r2, #8
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e00f      	b.n	8003b86 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4013      	ands	r3, r2
 8003b70:	68ba      	ldr	r2, [r7, #8]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	bf0c      	ite	eq
 8003b76:	2301      	moveq	r3, #1
 8003b78:	2300      	movne	r3, #0
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d0b4      	beq.n	8003aee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	88fa      	ldrh	r2, [r7, #6]
 8003ba6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	88fa      	ldrh	r2, [r7, #6]
 8003bac:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2222      	movs	r2, #34	@ 0x22
 8003bb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d007      	beq.n	8003bd4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68da      	ldr	r2, [r3, #12]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695a      	ldr	r2, [r3, #20]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f042 0201 	orr.w	r2, r2, #1
 8003be2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68da      	ldr	r2, [r3, #12]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f042 0220 	orr.w	r2, r2, #32
 8003bf2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b095      	sub	sp, #84	@ 0x54
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	330c      	adds	r3, #12
 8003c10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	330c      	adds	r3, #12
 8003c28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e5      	bne.n	8003c0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3314      	adds	r3, #20
 8003c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	6a3b      	ldr	r3, [r7, #32]
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3314      	adds	r3, #20
 8003c5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e5      	bne.n	8003c3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d119      	bne.n	8003cae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	330c      	adds	r3, #12
 8003c80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	e853 3f00 	ldrex	r3, [r3]
 8003c88:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f023 0310 	bic.w	r3, r3, #16
 8003c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	330c      	adds	r3, #12
 8003c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c9a:	61ba      	str	r2, [r7, #24]
 8003c9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c9e:	6979      	ldr	r1, [r7, #20]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	e841 2300 	strex	r3, r2, [r1]
 8003ca6:	613b      	str	r3, [r7, #16]
   return(result);
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1e5      	bne.n	8003c7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2220      	movs	r2, #32
 8003cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cbc:	bf00      	nop
 8003cbe:	3754      	adds	r7, #84	@ 0x54
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b084      	sub	sp, #16
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f7ff fee4 	bl	8003ab0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ce8:	bf00      	nop
 8003cea:	3710      	adds	r7, #16
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b21      	cmp	r3, #33	@ 0x21
 8003d02:	d13e      	bne.n	8003d82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d0c:	d114      	bne.n	8003d38 <UART_Transmit_IT+0x48>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d110      	bne.n	8003d38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	881b      	ldrh	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a1b      	ldr	r3, [r3, #32]
 8003d30:	1c9a      	adds	r2, r3, #2
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	621a      	str	r2, [r3, #32]
 8003d36:	e008      	b.n	8003d4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a1b      	ldr	r3, [r3, #32]
 8003d3c:	1c59      	adds	r1, r3, #1
 8003d3e:	687a      	ldr	r2, [r7, #4]
 8003d40:	6211      	str	r1, [r2, #32]
 8003d42:	781a      	ldrb	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4619      	mov	r1, r3
 8003d58:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d10f      	bne.n	8003d7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68da      	ldr	r2, [r3, #12]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e000      	b.n	8003d84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003d82:	2302      	movs	r3, #2
  }
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68da      	ldr	r2, [r3, #12]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003da6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2220      	movs	r2, #32
 8003dac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff fe73 	bl	8003a9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003db6:	2300      	movs	r3, #0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b08c      	sub	sp, #48	@ 0x30
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dce:	b2db      	uxtb	r3, r3
 8003dd0:	2b22      	cmp	r3, #34	@ 0x22
 8003dd2:	f040 80ae 	bne.w	8003f32 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dde:	d117      	bne.n	8003e10 <UART_Receive_IT+0x50>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d113      	bne.n	8003e10 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003df0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	b29b      	uxth	r3, r3
 8003dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dfe:	b29a      	uxth	r2, r3
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e08:	1c9a      	adds	r2, r3, #2
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e0e:	e026      	b.n	8003e5e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e22:	d007      	beq.n	8003e34 <UART_Receive_IT+0x74>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <UART_Receive_IT+0x82>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d106      	bne.n	8003e42 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	e008      	b.n	8003e54 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e4e:	b2da      	uxtb	r2, r3
 8003e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e52:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	3b01      	subs	r3, #1
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d15d      	bne.n	8003f2e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	68da      	ldr	r2, [r3, #12]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f022 0220 	bic.w	r2, r2, #32
 8003e80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68da      	ldr	r2, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003e90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	695a      	ldr	r2, [r3, #20]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f022 0201 	bic.w	r2, r2, #1
 8003ea0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d135      	bne.n	8003f24 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	e853 3f00 	ldrex	r3, [r3]
 8003ecc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f023 0310 	bic.w	r3, r3, #16
 8003ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	330c      	adds	r3, #12
 8003edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ede:	623a      	str	r2, [r7, #32]
 8003ee0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee2:	69f9      	ldr	r1, [r7, #28]
 8003ee4:	6a3a      	ldr	r2, [r7, #32]
 8003ee6:	e841 2300 	strex	r3, r2, [r1]
 8003eea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d1e5      	bne.n	8003ebe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2b10      	cmp	r3, #16
 8003efe:	d10a      	bne.n	8003f16 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f00:	2300      	movs	r3, #0
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	60fb      	str	r3, [r7, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f1a:	4619      	mov	r1, r3
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f7ff fdd1 	bl	8003ac4 <HAL_UARTEx_RxEventCallback>
 8003f22:	e002      	b.n	8003f2a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f7fd fd83 	bl	8001a30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e002      	b.n	8003f34 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e000      	b.n	8003f34 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f32:	2302      	movs	r3, #2
  }
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3730      	adds	r7, #48	@ 0x30
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f40:	b0c0      	sub	sp, #256	@ 0x100
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f58:	68d9      	ldr	r1, [r3, #12]
 8003f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	ea40 0301 	orr.w	r3, r0, r1
 8003f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	431a      	orrs	r2, r3
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f78:	695b      	ldr	r3, [r3, #20]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003f94:	f021 010c 	bic.w	r1, r1, #12
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb6:	6999      	ldr	r1, [r3, #24]
 8003fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	ea40 0301 	orr.w	r3, r0, r1
 8003fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4b8f      	ldr	r3, [pc, #572]	@ (8004208 <UART_SetConfig+0x2cc>)
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d005      	beq.n	8003fdc <UART_SetConfig+0xa0>
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800420c <UART_SetConfig+0x2d0>)
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d104      	bne.n	8003fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003fdc:	f7fe fee4 	bl	8002da8 <HAL_RCC_GetPCLK2Freq>
 8003fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003fe4:	e003      	b.n	8003fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003fe6:	f7fe fecb 	bl	8002d80 <HAL_RCC_GetPCLK1Freq>
 8003fea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff2:	69db      	ldr	r3, [r3, #28]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ff8:	f040 810c 	bne.w	8004214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004000:	2200      	movs	r2, #0
 8004002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004006:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800400a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800400e:	4622      	mov	r2, r4
 8004010:	462b      	mov	r3, r5
 8004012:	1891      	adds	r1, r2, r2
 8004014:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004016:	415b      	adcs	r3, r3
 8004018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800401a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800401e:	4621      	mov	r1, r4
 8004020:	eb12 0801 	adds.w	r8, r2, r1
 8004024:	4629      	mov	r1, r5
 8004026:	eb43 0901 	adc.w	r9, r3, r1
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800403a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800403e:	4690      	mov	r8, r2
 8004040:	4699      	mov	r9, r3
 8004042:	4623      	mov	r3, r4
 8004044:	eb18 0303 	adds.w	r3, r8, r3
 8004048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800404c:	462b      	mov	r3, r5
 800404e:	eb49 0303 	adc.w	r3, r9, r3
 8004052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004062:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800406a:	460b      	mov	r3, r1
 800406c:	18db      	adds	r3, r3, r3
 800406e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004070:	4613      	mov	r3, r2
 8004072:	eb42 0303 	adc.w	r3, r2, r3
 8004076:	657b      	str	r3, [r7, #84]	@ 0x54
 8004078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800407c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004080:	f7fc fcae 	bl	80009e0 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4b61      	ldr	r3, [pc, #388]	@ (8004210 <UART_SetConfig+0x2d4>)
 800408a:	fba3 2302 	umull	r2, r3, r3, r2
 800408e:	095b      	lsrs	r3, r3, #5
 8004090:	011c      	lsls	r4, r3, #4
 8004092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004096:	2200      	movs	r2, #0
 8004098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800409c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040a4:	4642      	mov	r2, r8
 80040a6:	464b      	mov	r3, r9
 80040a8:	1891      	adds	r1, r2, r2
 80040aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040ac:	415b      	adcs	r3, r3
 80040ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040b4:	4641      	mov	r1, r8
 80040b6:	eb12 0a01 	adds.w	sl, r2, r1
 80040ba:	4649      	mov	r1, r9
 80040bc:	eb43 0b01 	adc.w	fp, r3, r1
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d4:	4692      	mov	sl, r2
 80040d6:	469b      	mov	fp, r3
 80040d8:	4643      	mov	r3, r8
 80040da:	eb1a 0303 	adds.w	r3, sl, r3
 80040de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80040e2:	464b      	mov	r3, r9
 80040e4:	eb4b 0303 	adc.w	r3, fp, r3
 80040e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80040ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80040f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80040fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004100:	460b      	mov	r3, r1
 8004102:	18db      	adds	r3, r3, r3
 8004104:	643b      	str	r3, [r7, #64]	@ 0x40
 8004106:	4613      	mov	r3, r2
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	647b      	str	r3, [r7, #68]	@ 0x44
 800410e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004116:	f7fc fc63 	bl	80009e0 <__aeabi_uldivmod>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4611      	mov	r1, r2
 8004120:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <UART_SetConfig+0x2d4>)
 8004122:	fba3 2301 	umull	r2, r3, r3, r1
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	2264      	movs	r2, #100	@ 0x64
 800412a:	fb02 f303 	mul.w	r3, r2, r3
 800412e:	1acb      	subs	r3, r1, r3
 8004130:	00db      	lsls	r3, r3, #3
 8004132:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004136:	4b36      	ldr	r3, [pc, #216]	@ (8004210 <UART_SetConfig+0x2d4>)
 8004138:	fba3 2302 	umull	r2, r3, r3, r2
 800413c:	095b      	lsrs	r3, r3, #5
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004144:	441c      	add	r4, r3
 8004146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800414a:	2200      	movs	r2, #0
 800414c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004150:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004158:	4642      	mov	r2, r8
 800415a:	464b      	mov	r3, r9
 800415c:	1891      	adds	r1, r2, r2
 800415e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004160:	415b      	adcs	r3, r3
 8004162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004168:	4641      	mov	r1, r8
 800416a:	1851      	adds	r1, r2, r1
 800416c:	6339      	str	r1, [r7, #48]	@ 0x30
 800416e:	4649      	mov	r1, r9
 8004170:	414b      	adcs	r3, r1
 8004172:	637b      	str	r3, [r7, #52]	@ 0x34
 8004174:	f04f 0200 	mov.w	r2, #0
 8004178:	f04f 0300 	mov.w	r3, #0
 800417c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004180:	4659      	mov	r1, fp
 8004182:	00cb      	lsls	r3, r1, #3
 8004184:	4651      	mov	r1, sl
 8004186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800418a:	4651      	mov	r1, sl
 800418c:	00ca      	lsls	r2, r1, #3
 800418e:	4610      	mov	r0, r2
 8004190:	4619      	mov	r1, r3
 8004192:	4603      	mov	r3, r0
 8004194:	4642      	mov	r2, r8
 8004196:	189b      	adds	r3, r3, r2
 8004198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800419c:	464b      	mov	r3, r9
 800419e:	460a      	mov	r2, r1
 80041a0:	eb42 0303 	adc.w	r3, r2, r3
 80041a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041bc:	460b      	mov	r3, r1
 80041be:	18db      	adds	r3, r3, r3
 80041c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041c2:	4613      	mov	r3, r2
 80041c4:	eb42 0303 	adc.w	r3, r2, r3
 80041c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80041ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80041d2:	f7fc fc05 	bl	80009e0 <__aeabi_uldivmod>
 80041d6:	4602      	mov	r2, r0
 80041d8:	460b      	mov	r3, r1
 80041da:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <UART_SetConfig+0x2d4>)
 80041dc:	fba3 1302 	umull	r1, r3, r3, r2
 80041e0:	095b      	lsrs	r3, r3, #5
 80041e2:	2164      	movs	r1, #100	@ 0x64
 80041e4:	fb01 f303 	mul.w	r3, r1, r3
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	00db      	lsls	r3, r3, #3
 80041ec:	3332      	adds	r3, #50	@ 0x32
 80041ee:	4a08      	ldr	r2, [pc, #32]	@ (8004210 <UART_SetConfig+0x2d4>)
 80041f0:	fba2 2303 	umull	r2, r3, r2, r3
 80041f4:	095b      	lsrs	r3, r3, #5
 80041f6:	f003 0207 	and.w	r2, r3, #7
 80041fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4422      	add	r2, r4
 8004202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004204:	e106      	b.n	8004414 <UART_SetConfig+0x4d8>
 8004206:	bf00      	nop
 8004208:	40011000 	.word	0x40011000
 800420c:	40011400 	.word	0x40011400
 8004210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004218:	2200      	movs	r2, #0
 800421a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800421e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004226:	4642      	mov	r2, r8
 8004228:	464b      	mov	r3, r9
 800422a:	1891      	adds	r1, r2, r2
 800422c:	6239      	str	r1, [r7, #32]
 800422e:	415b      	adcs	r3, r3
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
 8004232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004236:	4641      	mov	r1, r8
 8004238:	1854      	adds	r4, r2, r1
 800423a:	4649      	mov	r1, r9
 800423c:	eb43 0501 	adc.w	r5, r3, r1
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	00eb      	lsls	r3, r5, #3
 800424a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800424e:	00e2      	lsls	r2, r4, #3
 8004250:	4614      	mov	r4, r2
 8004252:	461d      	mov	r5, r3
 8004254:	4643      	mov	r3, r8
 8004256:	18e3      	adds	r3, r4, r3
 8004258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800425c:	464b      	mov	r3, r9
 800425e:	eb45 0303 	adc.w	r3, r5, r3
 8004262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004282:	4629      	mov	r1, r5
 8004284:	008b      	lsls	r3, r1, #2
 8004286:	4621      	mov	r1, r4
 8004288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800428c:	4621      	mov	r1, r4
 800428e:	008a      	lsls	r2, r1, #2
 8004290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004294:	f7fc fba4 	bl	80009e0 <__aeabi_uldivmod>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4b60      	ldr	r3, [pc, #384]	@ (8004420 <UART_SetConfig+0x4e4>)
 800429e:	fba3 2302 	umull	r2, r3, r3, r2
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	011c      	lsls	r4, r3, #4
 80042a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042aa:	2200      	movs	r2, #0
 80042ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042b8:	4642      	mov	r2, r8
 80042ba:	464b      	mov	r3, r9
 80042bc:	1891      	adds	r1, r2, r2
 80042be:	61b9      	str	r1, [r7, #24]
 80042c0:	415b      	adcs	r3, r3
 80042c2:	61fb      	str	r3, [r7, #28]
 80042c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042c8:	4641      	mov	r1, r8
 80042ca:	1851      	adds	r1, r2, r1
 80042cc:	6139      	str	r1, [r7, #16]
 80042ce:	4649      	mov	r1, r9
 80042d0:	414b      	adcs	r3, r1
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042e0:	4659      	mov	r1, fp
 80042e2:	00cb      	lsls	r3, r1, #3
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ea:	4651      	mov	r1, sl
 80042ec:	00ca      	lsls	r2, r1, #3
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	4603      	mov	r3, r0
 80042f4:	4642      	mov	r2, r8
 80042f6:	189b      	adds	r3, r3, r2
 80042f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80042fc:	464b      	mov	r3, r9
 80042fe:	460a      	mov	r2, r1
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004320:	4649      	mov	r1, r9
 8004322:	008b      	lsls	r3, r1, #2
 8004324:	4641      	mov	r1, r8
 8004326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800432a:	4641      	mov	r1, r8
 800432c:	008a      	lsls	r2, r1, #2
 800432e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004332:	f7fc fb55 	bl	80009e0 <__aeabi_uldivmod>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4611      	mov	r1, r2
 800433c:	4b38      	ldr	r3, [pc, #224]	@ (8004420 <UART_SetConfig+0x4e4>)
 800433e:	fba3 2301 	umull	r2, r3, r3, r1
 8004342:	095b      	lsrs	r3, r3, #5
 8004344:	2264      	movs	r2, #100	@ 0x64
 8004346:	fb02 f303 	mul.w	r3, r2, r3
 800434a:	1acb      	subs	r3, r1, r3
 800434c:	011b      	lsls	r3, r3, #4
 800434e:	3332      	adds	r3, #50	@ 0x32
 8004350:	4a33      	ldr	r2, [pc, #204]	@ (8004420 <UART_SetConfig+0x4e4>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800435c:	441c      	add	r4, r3
 800435e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004362:	2200      	movs	r2, #0
 8004364:	673b      	str	r3, [r7, #112]	@ 0x70
 8004366:	677a      	str	r2, [r7, #116]	@ 0x74
 8004368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800436c:	4642      	mov	r2, r8
 800436e:	464b      	mov	r3, r9
 8004370:	1891      	adds	r1, r2, r2
 8004372:	60b9      	str	r1, [r7, #8]
 8004374:	415b      	adcs	r3, r3
 8004376:	60fb      	str	r3, [r7, #12]
 8004378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800437c:	4641      	mov	r1, r8
 800437e:	1851      	adds	r1, r2, r1
 8004380:	6039      	str	r1, [r7, #0]
 8004382:	4649      	mov	r1, r9
 8004384:	414b      	adcs	r3, r1
 8004386:	607b      	str	r3, [r7, #4]
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004394:	4659      	mov	r1, fp
 8004396:	00cb      	lsls	r3, r1, #3
 8004398:	4651      	mov	r1, sl
 800439a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439e:	4651      	mov	r1, sl
 80043a0:	00ca      	lsls	r2, r1, #3
 80043a2:	4610      	mov	r0, r2
 80043a4:	4619      	mov	r1, r3
 80043a6:	4603      	mov	r3, r0
 80043a8:	4642      	mov	r2, r8
 80043aa:	189b      	adds	r3, r3, r2
 80043ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043ae:	464b      	mov	r3, r9
 80043b0:	460a      	mov	r2, r1
 80043b2:	eb42 0303 	adc.w	r3, r2, r3
 80043b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80043c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80043d0:	4649      	mov	r1, r9
 80043d2:	008b      	lsls	r3, r1, #2
 80043d4:	4641      	mov	r1, r8
 80043d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043da:	4641      	mov	r1, r8
 80043dc:	008a      	lsls	r2, r1, #2
 80043de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80043e2:	f7fc fafd 	bl	80009e0 <__aeabi_uldivmod>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004420 <UART_SetConfig+0x4e4>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	@ 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	011b      	lsls	r3, r3, #4
 80043fc:	3332      	adds	r3, #50	@ 0x32
 80043fe:	4a08      	ldr	r2, [pc, #32]	@ (8004420 <UART_SetConfig+0x4e4>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	f003 020f 	and.w	r2, r3, #15
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4422      	add	r2, r4
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800441a:	46bd      	mov	sp, r7
 800441c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004420:	51eb851f 	.word	0x51eb851f

08004424 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f103 0208 	add.w	r2, r3, #8
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800443c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f103 0208 	add.w	r2, r3, #8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f103 0208 	add.w	r2, r3, #8
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004458:	bf00      	nop
 800445a:	370c      	adds	r7, #12
 800445c:	46bd      	mov	sp, r7
 800445e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004462:	4770      	bx	lr

08004464 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004464:	b480      	push	{r7}
 8004466:	b083      	sub	sp, #12
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004472:	bf00      	nop
 8004474:	370c      	adds	r7, #12
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr

0800447e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800447e:	b480      	push	{r7}
 8004480:	b085      	sub	sp, #20
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689a      	ldr	r2, [r3, #8]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	683a      	ldr	r2, [r7, #0]
 80044a8:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	1c5a      	adds	r2, r3, #1
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	601a      	str	r2, [r3, #0]
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr

080044c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80044c6:	b480      	push	{r7}
 80044c8:	b085      	sub	sp, #20
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	6078      	str	r0, [r7, #4]
 80044ce:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044dc:	d103      	bne.n	80044e6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e00c      	b.n	8004500 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	3308      	adds	r3, #8
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	e002      	b.n	80044f4 <vListInsert+0x2e>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68ba      	ldr	r2, [r7, #8]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d2f6      	bcs.n	80044ee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	683a      	ldr	r2, [r7, #0]
 800450e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	1c5a      	adds	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	601a      	str	r2, [r3, #0]
}
 800452c:	bf00      	nop
 800452e:	3714      	adds	r7, #20
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004538:	b480      	push	{r7}
 800453a:	b085      	sub	sp, #20
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	6892      	ldr	r2, [r2, #8]
 800454e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6852      	ldr	r2, [r2, #4]
 8004558:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	429a      	cmp	r2, r3
 8004562:	d103      	bne.n	800456c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	689a      	ldr	r2, [r3, #8]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	1e5a      	subs	r2, r3, #1
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
}
 8004580:	4618      	mov	r0, r3
 8004582:	3714      	adds	r7, #20
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr

0800458c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10b      	bne.n	80045b8 <xQueueGenericReset+0x2c>
        __asm volatile
 80045a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a4:	f383 8811 	msr	BASEPRI, r3
 80045a8:	f3bf 8f6f 	isb	sy
 80045ac:	f3bf 8f4f 	dsb	sy
 80045b0:	60bb      	str	r3, [r7, #8]
    }
 80045b2:	bf00      	nop
 80045b4:	bf00      	nop
 80045b6:	e7fd      	b.n	80045b4 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80045b8:	f002 fb48 	bl	8006c4c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c4:	68f9      	ldr	r1, [r7, #12]
 80045c6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045c8:	fb01 f303 	mul.w	r3, r1, r3
 80045cc:	441a      	add	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2200      	movs	r2, #0
 80045d6:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045e8:	3b01      	subs	r3, #1
 80045ea:	68f9      	ldr	r1, [r7, #12]
 80045ec:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045ee:	fb01 f303 	mul.w	r3, r1, r3
 80045f2:	441a      	add	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	22ff      	movs	r2, #255	@ 0xff
 80045fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	22ff      	movs	r2, #255	@ 0xff
 8004604:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d114      	bne.n	8004638 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d01a      	beq.n	800464c <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	3310      	adds	r3, #16
 800461a:	4618      	mov	r0, r3
 800461c:	f001 f93a 	bl	8005894 <xTaskRemoveFromEventList>
 8004620:	4603      	mov	r3, r0
 8004622:	2b00      	cmp	r3, #0
 8004624:	d012      	beq.n	800464c <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8004626:	4b0d      	ldr	r3, [pc, #52]	@ (800465c <xQueueGenericReset+0xd0>)
 8004628:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	f3bf 8f6f 	isb	sy
 8004636:	e009      	b.n	800464c <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	3310      	adds	r3, #16
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fef1 	bl	8004424 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	3324      	adds	r3, #36	@ 0x24
 8004646:	4618      	mov	r0, r3
 8004648:	f7ff feec 	bl	8004424 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800464c:	f002 fb30 	bl	8006cb0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004650:	2301      	movs	r3, #1
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	e000ed04 	.word	0xe000ed04

08004660 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004660:	b580      	push	{r7, lr}
 8004662:	b08c      	sub	sp, #48	@ 0x30
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	4613      	mov	r3, r2
 800466c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10b      	bne.n	800468c <xQueueGenericCreate+0x2c>
        __asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	61bb      	str	r3, [r7, #24]
    }
 8004686:	bf00      	nop
 8004688:	bf00      	nop
 800468a:	e7fd      	b.n	8004688 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	fb02 f303 	mul.w	r3, r2, r3
 8004694:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <xQueueGenericCreate+0x4a>
 800469c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a4:	68fa      	ldr	r2, [r7, #12]
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d101      	bne.n	80046ae <xQueueGenericCreate+0x4e>
 80046aa:	2301      	movs	r3, #1
 80046ac:	e000      	b.n	80046b0 <xQueueGenericCreate+0x50>
 80046ae:	2300      	movs	r3, #0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d10b      	bne.n	80046cc <xQueueGenericCreate+0x6c>
        __asm volatile
 80046b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
 80046c4:	617b      	str	r3, [r7, #20]
    }
 80046c6:	bf00      	nop
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80046d2:	d90b      	bls.n	80046ec <xQueueGenericCreate+0x8c>
        __asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	613b      	str	r3, [r7, #16]
    }
 80046e6:	bf00      	nop
 80046e8:	bf00      	nop
 80046ea:	e7fd      	b.n	80046e8 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	3350      	adds	r3, #80	@ 0x50
 80046f0:	4618      	mov	r0, r3
 80046f2:	f002 fbd5 	bl	8006ea0 <pvPortMalloc>
 80046f6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d00d      	beq.n	800471a <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	3350      	adds	r3, #80	@ 0x50
 8004706:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004708:	79fa      	ldrb	r2, [r7, #7]
 800470a:	6a3b      	ldr	r3, [r7, #32]
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	4613      	mov	r3, r2
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	68b9      	ldr	r1, [r7, #8]
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f000 f805 	bl	8004724 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800471a:	6a3b      	ldr	r3, [r7, #32]
    }
 800471c:	4618      	mov	r0, r3
 800471e:	3728      	adds	r7, #40	@ 0x28
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d103      	bne.n	8004740 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	601a      	str	r2, [r3, #0]
 800473e:	e002      	b.n	8004746 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004752:	2101      	movs	r1, #1
 8004754:	69b8      	ldr	r0, [r7, #24]
 8004756:	f7ff ff19 	bl	800458c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	78fa      	ldrb	r2, [r7, #3]
 800475e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08e      	sub	sp, #56	@ 0x38
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800477a:	2300      	movs	r3, #0
 800477c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8004782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10b      	bne.n	80047a0 <xQueueGenericSend+0x34>
        __asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800479a:	bf00      	nop
 800479c:	bf00      	nop
 800479e:	e7fd      	b.n	800479c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d103      	bne.n	80047ae <xQueueGenericSend+0x42>
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <xQueueGenericSend+0x46>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e000      	b.n	80047b4 <xQueueGenericSend+0x48>
 80047b2:	2300      	movs	r3, #0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d10b      	bne.n	80047d0 <xQueueGenericSend+0x64>
        __asm volatile
 80047b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047bc:	f383 8811 	msr	BASEPRI, r3
 80047c0:	f3bf 8f6f 	isb	sy
 80047c4:	f3bf 8f4f 	dsb	sy
 80047c8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
 80047ce:	e7fd      	b.n	80047cc <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d103      	bne.n	80047de <xQueueGenericSend+0x72>
 80047d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d101      	bne.n	80047e2 <xQueueGenericSend+0x76>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <xQueueGenericSend+0x78>
 80047e2:	2300      	movs	r3, #0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10b      	bne.n	8004800 <xQueueGenericSend+0x94>
        __asm volatile
 80047e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	623b      	str	r3, [r7, #32]
    }
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	e7fd      	b.n	80047fc <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004800:	f001 f9e8 	bl	8005bd4 <xTaskGetSchedulerState>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d102      	bne.n	8004810 <xQueueGenericSend+0xa4>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <xQueueGenericSend+0xa8>
 8004810:	2301      	movs	r3, #1
 8004812:	e000      	b.n	8004816 <xQueueGenericSend+0xaa>
 8004814:	2300      	movs	r3, #0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <xQueueGenericSend+0xc6>
        __asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	61fb      	str	r3, [r7, #28]
    }
 800482c:	bf00      	nop
 800482e:	bf00      	nop
 8004830:	e7fd      	b.n	800482e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004832:	f002 fa0b 	bl	8006c4c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483e:	429a      	cmp	r2, r3
 8004840:	d302      	bcc.n	8004848 <xQueueGenericSend+0xdc>
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	2b02      	cmp	r3, #2
 8004846:	d129      	bne.n	800489c <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800484e:	f000 fad0 	bl	8004df2 <prvCopyDataToQueue>
 8004852:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004858:	2b00      	cmp	r3, #0
 800485a:	d010      	beq.n	800487e <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800485c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485e:	3324      	adds	r3, #36	@ 0x24
 8004860:	4618      	mov	r0, r3
 8004862:	f001 f817 	bl	8005894 <xTaskRemoveFromEventList>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d013      	beq.n	8004894 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800486c:	4b3f      	ldr	r3, [pc, #252]	@ (800496c <xQueueGenericSend+0x200>)
 800486e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	e00a      	b.n	8004894 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800487e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004880:	2b00      	cmp	r3, #0
 8004882:	d007      	beq.n	8004894 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004884:	4b39      	ldr	r3, [pc, #228]	@ (800496c <xQueueGenericSend+0x200>)
 8004886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	f3bf 8f4f 	dsb	sy
 8004890:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004894:	f002 fa0c 	bl	8006cb0 <vPortExitCritical>
                return pdPASS;
 8004898:	2301      	movs	r3, #1
 800489a:	e063      	b.n	8004964 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d103      	bne.n	80048aa <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80048a2:	f002 fa05 	bl	8006cb0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	e05c      	b.n	8004964 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 80048aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d106      	bne.n	80048be <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80048b0:	f107 0314 	add.w	r3, r7, #20
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 f851 	bl	800595c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80048ba:	2301      	movs	r3, #1
 80048bc:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80048be:	f002 f9f7 	bl	8006cb0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80048c2:	f000 fdc3 	bl	800544c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80048c6:	f002 f9c1 	bl	8006c4c <vPortEnterCritical>
 80048ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048d0:	b25b      	sxtb	r3, r3
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048d6:	d103      	bne.n	80048e0 <xQueueGenericSend+0x174>
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80048e6:	b25b      	sxtb	r3, r3
 80048e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048ec:	d103      	bne.n	80048f6 <xQueueGenericSend+0x18a>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048f6:	f002 f9db 	bl	8006cb0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048fa:	1d3a      	adds	r2, r7, #4
 80048fc:	f107 0314 	add.w	r3, r7, #20
 8004900:	4611      	mov	r1, r2
 8004902:	4618      	mov	r0, r3
 8004904:	f001 f840 	bl	8005988 <xTaskCheckForTimeOut>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d124      	bne.n	8004958 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800490e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004910:	f000 fb67 	bl	8004fe2 <prvIsQueueFull>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d018      	beq.n	800494c <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800491a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800491c:	3310      	adds	r3, #16
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4611      	mov	r1, r2
 8004922:	4618      	mov	r0, r3
 8004924:	f000 ff64 	bl	80057f0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8004928:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800492a:	f000 faf2 	bl	8004f12 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800492e:	f000 fd9b 	bl	8005468 <xTaskResumeAll>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	f47f af7c 	bne.w	8004832 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800493a:	4b0c      	ldr	r3, [pc, #48]	@ (800496c <xQueueGenericSend+0x200>)
 800493c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	f3bf 8f4f 	dsb	sy
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	e772      	b.n	8004832 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800494c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800494e:	f000 fae0 	bl	8004f12 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004952:	f000 fd89 	bl	8005468 <xTaskResumeAll>
 8004956:	e76c      	b.n	8004832 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8004958:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800495a:	f000 fada 	bl	8004f12 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800495e:	f000 fd83 	bl	8005468 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004962:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004964:	4618      	mov	r0, r3
 8004966:	3738      	adds	r7, #56	@ 0x38
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	e000ed04 	.word	0xe000ed04

08004970 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b090      	sub	sp, #64	@ 0x40
 8004974:	af00      	add	r7, sp, #0
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	607a      	str	r2, [r7, #4]
 800497c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8004982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d103      	bne.n	80049ae <xQueueGenericSendFromISR+0x3e>
 80049a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <xQueueGenericSendFromISR+0x42>
 80049ae:	2301      	movs	r3, #1
 80049b0:	e000      	b.n	80049b4 <xQueueGenericSendFromISR+0x44>
 80049b2:	2300      	movs	r3, #0
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d10b      	bne.n	80049d0 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80049b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049bc:	f383 8811 	msr	BASEPRI, r3
 80049c0:	f3bf 8f6f 	isb	sy
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80049ca:	bf00      	nop
 80049cc:	bf00      	nop
 80049ce:	e7fd      	b.n	80049cc <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d103      	bne.n	80049de <xQueueGenericSendFromISR+0x6e>
 80049d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <xQueueGenericSendFromISR+0x72>
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <xQueueGenericSendFromISR+0x74>
 80049e2:	2300      	movs	r3, #0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	623b      	str	r3, [r7, #32]
    }
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	e7fd      	b.n	80049fc <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a00:	f002 fa0c 	bl	8006e1c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004a04:	f3ef 8211 	mrs	r2, BASEPRI
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	61fa      	str	r2, [r7, #28]
 8004a1a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a1e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d302      	bcc.n	8004a32 <xQueueGenericSendFromISR+0xc2>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d13f      	bne.n	8004ab2 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	68b9      	ldr	r1, [r7, #8]
 8004a46:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004a48:	f000 f9d3 	bl	8004df2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004a4c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a54:	d112      	bne.n	8004a7c <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d026      	beq.n	8004aac <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a60:	3324      	adds	r3, #36	@ 0x24
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 ff16 	bl	8005894 <xTaskRemoveFromEventList>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d01e      	beq.n	8004aac <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01b      	beq.n	8004aac <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	e017      	b.n	8004aac <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004a7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004a80:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a82:	d10b      	bne.n	8004a9c <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8004a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	617b      	str	r3, [r7, #20]
    }
 8004a96:	bf00      	nop
 8004a98:	bf00      	nop
 8004a9a:	e7fd      	b.n	8004a98 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	b25a      	sxtb	r2, r3
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8004aac:	2301      	movs	r3, #1
 8004aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8004ab0:	e001      	b.n	8004ab6 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ab8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004ac0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	3740      	adds	r7, #64	@ 0x40
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b08c      	sub	sp, #48	@ 0x30
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10b      	bne.n	8004afe <xQueueReceive+0x32>
        __asm volatile
 8004ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aea:	f383 8811 	msr	BASEPRI, r3
 8004aee:	f3bf 8f6f 	isb	sy
 8004af2:	f3bf 8f4f 	dsb	sy
 8004af6:	623b      	str	r3, [r7, #32]
    }
 8004af8:	bf00      	nop
 8004afa:	bf00      	nop
 8004afc:	e7fd      	b.n	8004afa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d103      	bne.n	8004b0c <xQueueReceive+0x40>
 8004b04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d101      	bne.n	8004b10 <xQueueReceive+0x44>
 8004b0c:	2301      	movs	r3, #1
 8004b0e:	e000      	b.n	8004b12 <xQueueReceive+0x46>
 8004b10:	2300      	movs	r3, #0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10b      	bne.n	8004b2e <xQueueReceive+0x62>
        __asm volatile
 8004b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	61fb      	str	r3, [r7, #28]
    }
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	e7fd      	b.n	8004b2a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b2e:	f001 f851 	bl	8005bd4 <xTaskGetSchedulerState>
 8004b32:	4603      	mov	r3, r0
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <xQueueReceive+0x72>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <xQueueReceive+0x76>
 8004b3e:	2301      	movs	r3, #1
 8004b40:	e000      	b.n	8004b44 <xQueueReceive+0x78>
 8004b42:	2300      	movs	r3, #0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d10b      	bne.n	8004b60 <xQueueReceive+0x94>
        __asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	61bb      	str	r3, [r7, #24]
    }
 8004b5a:	bf00      	nop
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004b60:	f002 f874 	bl	8006c4c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01f      	beq.n	8004bb0 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b70:	68b9      	ldr	r1, [r7, #8]
 8004b72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b74:	f000 f9a7 	bl	8004ec6 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7a:	1e5a      	subs	r2, r3, #1
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00f      	beq.n	8004ba8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8a:	3310      	adds	r3, #16
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f000 fe81 	bl	8005894 <xTaskRemoveFromEventList>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004b98:	4b3c      	ldr	r3, [pc, #240]	@ (8004c8c <xQueueReceive+0x1c0>)
 8004b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b9e:	601a      	str	r2, [r3, #0]
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004ba8:	f002 f882 	bl	8006cb0 <vPortExitCritical>
                return pdPASS;
 8004bac:	2301      	movs	r3, #1
 8004bae:	e069      	b.n	8004c84 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d103      	bne.n	8004bbe <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004bb6:	f002 f87b 	bl	8006cb0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	e062      	b.n	8004c84 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004bbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d106      	bne.n	8004bd2 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004bc4:	f107 0310 	add.w	r3, r7, #16
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f000 fec7 	bl	800595c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004bd2:	f002 f86d 	bl	8006cb0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004bd6:	f000 fc39 	bl	800544c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004bda:	f002 f837 	bl	8006c4c <vPortEnterCritical>
 8004bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004be4:	b25b      	sxtb	r3, r3
 8004be6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bea:	d103      	bne.n	8004bf4 <xQueueReceive+0x128>
 8004bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bfa:	b25b      	sxtb	r3, r3
 8004bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c00:	d103      	bne.n	8004c0a <xQueueReceive+0x13e>
 8004c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c04:	2200      	movs	r2, #0
 8004c06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c0a:	f002 f851 	bl	8006cb0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c0e:	1d3a      	adds	r2, r7, #4
 8004c10:	f107 0310 	add.w	r3, r7, #16
 8004c14:	4611      	mov	r1, r2
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 feb6 	bl	8005988 <xTaskCheckForTimeOut>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d123      	bne.n	8004c6a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c24:	f000 f9c7 	bl	8004fb6 <prvIsQueueEmpty>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d017      	beq.n	8004c5e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c30:	3324      	adds	r3, #36	@ 0x24
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	4611      	mov	r1, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fdda 	bl	80057f0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004c3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c3e:	f000 f968 	bl	8004f12 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004c42:	f000 fc11 	bl	8005468 <xTaskResumeAll>
 8004c46:	4603      	mov	r3, r0
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d189      	bne.n	8004b60 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8004c8c <xQueueReceive+0x1c0>)
 8004c4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	e780      	b.n	8004b60 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004c5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c60:	f000 f957 	bl	8004f12 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004c64:	f000 fc00 	bl	8005468 <xTaskResumeAll>
 8004c68:	e77a      	b.n	8004b60 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c6c:	f000 f951 	bl	8004f12 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004c70:	f000 fbfa 	bl	8005468 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c76:	f000 f99e 	bl	8004fb6 <prvIsQueueEmpty>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	f43f af6f 	beq.w	8004b60 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004c82:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004c84:	4618      	mov	r0, r3
 8004c86:	3730      	adds	r7, #48	@ 0x30
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}
 8004c8c:	e000ed04 	.word	0xe000ed04

08004c90 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b090      	sub	sp, #64	@ 0x40
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8004ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10b      	bne.n	8004cbe <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8004ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004cb8:	bf00      	nop
 8004cba:	bf00      	nop
 8004cbc:	e7fd      	b.n	8004cba <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <xQueueReceiveFromISR+0x3c>
 8004cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d101      	bne.n	8004cd0 <xQueueReceiveFromISR+0x40>
 8004ccc:	2301      	movs	r3, #1
 8004cce:	e000      	b.n	8004cd2 <xQueueReceiveFromISR+0x42>
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10b      	bne.n	8004cee <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8004cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cda:	f383 8811 	msr	BASEPRI, r3
 8004cde:	f3bf 8f6f 	isb	sy
 8004ce2:	f3bf 8f4f 	dsb	sy
 8004ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	e7fd      	b.n	8004cea <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cee:	f002 f895 	bl	8006e1c <vPortValidateInterruptPriority>
        __asm volatile
 8004cf2:	f3ef 8211 	mrs	r2, BASEPRI
 8004cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	623a      	str	r2, [r7, #32]
 8004d08:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8004d0a:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d0c:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d12:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d03f      	beq.n	8004d9a <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d28:	f000 f8cd 	bl	8004ec6 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d2e:	1e5a      	subs	r2, r3, #1
 8004d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d32:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004d34:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d3c:	d112      	bne.n	8004d64 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d40:	691b      	ldr	r3, [r3, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d026      	beq.n	8004d94 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d48:	3310      	adds	r3, #16
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fda2 	bl	8005894 <xTaskRemoveFromEventList>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d01e      	beq.n	8004d94 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d01b      	beq.n	8004d94 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	e017      	b.n	8004d94 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8004d64:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004d68:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d6a:	d10b      	bne.n	8004d84 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 8004d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	61bb      	str	r3, [r7, #24]
    }
 8004d7e:	bf00      	nop
 8004d80:	bf00      	nop
 8004d82:	e7fd      	b.n	8004d80 <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004d84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004d88:	3301      	adds	r3, #1
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	b25a      	sxtb	r2, r3
 8004d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8004d94:	2301      	movs	r3, #1
 8004d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d98:	e001      	b.n	8004d9e <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004da0:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	f383 8811 	msr	BASEPRI, r3
    }
 8004da8:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004daa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3740      	adds	r7, #64	@ 0x40
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10b      	bne.n	8004dda <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8004dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc6:	f383 8811 	msr	BASEPRI, r3
 8004dca:	f3bf 8f6f 	isb	sy
 8004dce:	f3bf 8f4f 	dsb	sy
 8004dd2:	60bb      	str	r3, [r7, #8]
    }
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	e7fd      	b.n	8004dd6 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004dda:	f001 ff37 	bl	8006c4c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004de2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004de4:	f001 ff64 	bl	8006cb0 <vPortExitCritical>

    return uxReturn;
 8004de8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}

08004df2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004df2:	b580      	push	{r7, lr}
 8004df4:	b086      	sub	sp, #24
 8004df6:	af00      	add	r7, sp, #0
 8004df8:	60f8      	str	r0, [r7, #12]
 8004dfa:	60b9      	str	r1, [r7, #8]
 8004dfc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e06:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d10d      	bne.n	8004e2c <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d14d      	bne.n	8004eb4 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fef7 	bl	8005c10 <xTaskPriorityDisinherit>
 8004e22:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	609a      	str	r2, [r3, #8]
 8004e2a:	e043      	b.n	8004eb4 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d119      	bne.n	8004e66 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6858      	ldr	r0, [r3, #4]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	68b9      	ldr	r1, [r7, #8]
 8004e3e:	f002 fa5d 	bl	80072fc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	685a      	ldr	r2, [r3, #4]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e4a:	441a      	add	r2, r3
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	685a      	ldr	r2, [r3, #4]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d32b      	bcc.n	8004eb4 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681a      	ldr	r2, [r3, #0]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	605a      	str	r2, [r3, #4]
 8004e64:	e026      	b.n	8004eb4 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68d8      	ldr	r0, [r3, #12]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e6e:	461a      	mov	r2, r3
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	f002 fa43 	bl	80072fc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68da      	ldr	r2, [r3, #12]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	425b      	negs	r3, r3
 8004e80:	441a      	add	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d207      	bcs.n	8004ea2 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	689a      	ldr	r2, [r3, #8]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e9a:	425b      	negs	r3, r3
 8004e9c:	441a      	add	r2, r3
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d105      	bne.n	8004eb4 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d002      	beq.n	8004eb4 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1c5a      	adds	r2, r3, #1
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004ebc:	697b      	ldr	r3, [r7, #20]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b082      	sub	sp, #8
 8004eca:	af00      	add	r7, sp, #0
 8004ecc:	6078      	str	r0, [r7, #4]
 8004ece:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d018      	beq.n	8004f0a <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68da      	ldr	r2, [r3, #12]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	68da      	ldr	r2, [r3, #12]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d303      	bcc.n	8004efa <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68d9      	ldr	r1, [r3, #12]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	461a      	mov	r2, r3
 8004f04:	6838      	ldr	r0, [r7, #0]
 8004f06:	f002 f9f9 	bl	80072fc <memcpy>
    }
}
 8004f0a:	bf00      	nop
 8004f0c:	3708      	adds	r7, #8
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b084      	sub	sp, #16
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004f1a:	f001 fe97 	bl	8006c4c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f24:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f26:	e011      	b.n	8004f4c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d012      	beq.n	8004f56 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3324      	adds	r3, #36	@ 0x24
 8004f34:	4618      	mov	r0, r3
 8004f36:	f000 fcad 	bl	8005894 <xTaskRemoveFromEventList>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004f40:	f000 fd8a 	bl	8005a58 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	dce9      	bgt.n	8004f28 <prvUnlockQueue+0x16>
 8004f54:	e000      	b.n	8004f58 <prvUnlockQueue+0x46>
                        break;
 8004f56:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	22ff      	movs	r2, #255	@ 0xff
 8004f5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004f60:	f001 fea6 	bl	8006cb0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004f64:	f001 fe72 	bl	8006c4c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f6e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f70:	e011      	b.n	8004f96 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d012      	beq.n	8004fa0 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	3310      	adds	r3, #16
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fc88 	bl	8005894 <xTaskRemoveFromEventList>
 8004f84:	4603      	mov	r3, r0
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004f8a:	f000 fd65 	bl	8005a58 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004f8e:	7bbb      	ldrb	r3, [r7, #14]
 8004f90:	3b01      	subs	r3, #1
 8004f92:	b2db      	uxtb	r3, r3
 8004f94:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004f96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	dce9      	bgt.n	8004f72 <prvUnlockQueue+0x60>
 8004f9e:	e000      	b.n	8004fa2 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004fa0:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	22ff      	movs	r2, #255	@ 0xff
 8004fa6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8004faa:	f001 fe81 	bl	8006cb0 <vPortExitCritical>
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b084      	sub	sp, #16
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004fbe:	f001 fe45 	bl	8006c4c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	e001      	b.n	8004fd4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004fd4:	f001 fe6c 	bl	8006cb0 <vPortExitCritical>

    return xReturn;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004fea:	f001 fe2f 	bl	8006c4c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d102      	bne.n	8005000 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e001      	b.n	8005004 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005000:	2300      	movs	r3, #0
 8005002:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005004:	f001 fe54 	bl	8006cb0 <vPortExitCritical>

    return xReturn;
 8005008:	68fb      	ldr	r3, [r7, #12]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3710      	adds	r7, #16
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005012:	b480      	push	{r7}
 8005014:	b087      	sub	sp, #28
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10b      	bne.n	800503c <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60fb      	str	r3, [r7, #12]
    }
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	e7fd      	b.n	8005038 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005044:	429a      	cmp	r2, r3
 8005046:	d102      	bne.n	800504e <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8005048:	2301      	movs	r3, #1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e001      	b.n	8005052 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 800504e:	2300      	movs	r3, #0
 8005050:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005052:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005054:	4618      	mov	r0, r3
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800506a:	2300      	movs	r3, #0
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	e014      	b.n	800509a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005070:	4a0f      	ldr	r2, [pc, #60]	@ (80050b0 <vQueueAddToRegistry+0x50>)
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d10b      	bne.n	8005094 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800507c:	490c      	ldr	r1, [pc, #48]	@ (80050b0 <vQueueAddToRegistry+0x50>)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005086:	4a0a      	ldr	r2, [pc, #40]	@ (80050b0 <vQueueAddToRegistry+0x50>)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	00db      	lsls	r3, r3, #3
 800508c:	4413      	add	r3, r2
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005092:	e006      	b.n	80050a2 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b07      	cmp	r3, #7
 800509e:	d9e7      	bls.n	8005070 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80050a0:	bf00      	nop
 80050a2:	bf00      	nop
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	20000118 	.word	0x20000118

080050b4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	60b9      	str	r1, [r7, #8]
 80050be:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80050c4:	f001 fdc2 	bl	8006c4c <vPortEnterCritical>
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050ce:	b25b      	sxtb	r3, r3
 80050d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050d4:	d103      	bne.n	80050de <vQueueWaitForMessageRestricted+0x2a>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050e4:	b25b      	sxtb	r3, r3
 80050e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80050ea:	d103      	bne.n	80050f4 <vQueueWaitForMessageRestricted+0x40>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2200      	movs	r2, #0
 80050f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050f4:	f001 fddc 	bl	8006cb0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	3324      	adds	r3, #36	@ 0x24
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	68b9      	ldr	r1, [r7, #8]
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fb97 	bl	800583c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800510e:	6978      	ldr	r0, [r7, #20]
 8005110:	f7ff feff 	bl	8004f12 <prvUnlockQueue>
    }
 8005114:	bf00      	nop
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800511c:	b580      	push	{r7, lr}
 800511e:	b08c      	sub	sp, #48	@ 0x30
 8005120:	af04      	add	r7, sp, #16
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	603b      	str	r3, [r7, #0]
 8005128:	4613      	mov	r3, r2
 800512a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800512c:	88fb      	ldrh	r3, [r7, #6]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4618      	mov	r0, r3
 8005132:	f001 feb5 	bl	8006ea0 <pvPortMalloc>
 8005136:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00e      	beq.n	800515c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800513e:	2058      	movs	r0, #88	@ 0x58
 8005140:	f001 feae 	bl	8006ea0 <pvPortMalloc>
 8005144:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	631a      	str	r2, [r3, #48]	@ 0x30
 8005152:	e005      	b.n	8005160 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005154:	6978      	ldr	r0, [r7, #20]
 8005156:	f001 ff85 	bl	8007064 <vPortFree>
 800515a:	e001      	b.n	8005160 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d013      	beq.n	800518e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005166:	88fa      	ldrh	r2, [r7, #6]
 8005168:	2300      	movs	r3, #0
 800516a:	9303      	str	r3, [sp, #12]
 800516c:	69fb      	ldr	r3, [r7, #28]
 800516e:	9302      	str	r3, [sp, #8]
 8005170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	68b9      	ldr	r1, [r7, #8]
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 f80e 	bl	800519e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005182:	69f8      	ldr	r0, [r7, #28]
 8005184:	f000 f8a2 	bl	80052cc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005188:	2301      	movs	r3, #1
 800518a:	61bb      	str	r3, [r7, #24]
 800518c:	e002      	b.n	8005194 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800518e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005192:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005194:	69bb      	ldr	r3, [r7, #24]
    }
 8005196:	4618      	mov	r0, r3
 8005198:	3720      	adds	r7, #32
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b088      	sub	sp, #32
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	60f8      	str	r0, [r7, #12]
 80051a6:	60b9      	str	r1, [r7, #8]
 80051a8:	607a      	str	r2, [r7, #4]
 80051aa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80051ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ae:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	461a      	mov	r2, r3
 80051b6:	21a5      	movs	r1, #165	@ 0xa5
 80051b8:	f002 f874 	bl	80072a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051c6:	3b01      	subs	r3, #1
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	4413      	add	r3, r2
 80051cc:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	f023 0307 	bic.w	r3, r3, #7
 80051d4:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	617b      	str	r3, [r7, #20]
    }
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d01f      	beq.n	800523e <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	e012      	b.n	800522a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	7819      	ldrb	r1, [r3, #0]
 800520c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	3334      	adds	r3, #52	@ 0x34
 8005214:	460a      	mov	r2, r1
 8005216:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	4413      	add	r3, r2
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d006      	beq.n	8005232 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005224:	69fb      	ldr	r3, [r7, #28]
 8005226:	3301      	adds	r3, #1
 8005228:	61fb      	str	r3, [r7, #28]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	2b09      	cmp	r3, #9
 800522e:	d9e9      	bls.n	8005204 <prvInitialiseNewTask+0x66>
 8005230:	e000      	b.n	8005234 <prvInitialiseNewTask+0x96>
            {
                break;
 8005232:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800523c:	e003      	b.n	8005246 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800523e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005248:	2b04      	cmp	r3, #4
 800524a:	d901      	bls.n	8005250 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800524c:	2304      	movs	r3, #4
 800524e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005254:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005258:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800525a:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800525c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525e:	2200      	movs	r2, #0
 8005260:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005264:	3304      	adds	r3, #4
 8005266:	4618      	mov	r0, r3
 8005268:	f7ff f8fc 	bl	8004464 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800526c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526e:	3318      	adds	r3, #24
 8005270:	4618      	mov	r0, r3
 8005272:	f7ff f8f7 	bl	8004464 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800527a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800527c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527e:	f1c3 0205 	rsb	r2, r3, #5
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800528a:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800528c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528e:	3350      	adds	r3, #80	@ 0x50
 8005290:	2204      	movs	r2, #4
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f002 f805 	bl	80072a4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800529a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529c:	3354      	adds	r3, #84	@ 0x54
 800529e:	2201      	movs	r2, #1
 80052a0:	2100      	movs	r1, #0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f001 fffe 	bl	80072a4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052a8:	683a      	ldr	r2, [r7, #0]
 80052aa:	68f9      	ldr	r1, [r7, #12]
 80052ac:	69b8      	ldr	r0, [r7, #24]
 80052ae:	f001 fb99 	bl	80069e4 <pxPortInitialiseStack>
 80052b2:	4602      	mov	r2, r0
 80052b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b6:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80052b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d002      	beq.n	80052c4 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052c2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80052c4:	bf00      	nop
 80052c6:	3720      	adds	r7, #32
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80052d4:	f001 fcba 	bl	8006c4c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80052d8:	4b2c      	ldr	r3, [pc, #176]	@ (800538c <prvAddNewTaskToReadyList+0xc0>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	4a2b      	ldr	r2, [pc, #172]	@ (800538c <prvAddNewTaskToReadyList+0xc0>)
 80052e0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80052e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005390 <prvAddNewTaskToReadyList+0xc4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80052ea:	4a29      	ldr	r2, [pc, #164]	@ (8005390 <prvAddNewTaskToReadyList+0xc4>)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052f0:	4b26      	ldr	r3, [pc, #152]	@ (800538c <prvAddNewTaskToReadyList+0xc0>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b01      	cmp	r3, #1
 80052f6:	d110      	bne.n	800531a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80052f8:	f000 fbd2 	bl	8005aa0 <prvInitialiseTaskLists>
 80052fc:	e00d      	b.n	800531a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80052fe:	4b25      	ldr	r3, [pc, #148]	@ (8005394 <prvAddNewTaskToReadyList+0xc8>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005306:	4b22      	ldr	r3, [pc, #136]	@ (8005390 <prvAddNewTaskToReadyList+0xc4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005310:	429a      	cmp	r2, r3
 8005312:	d802      	bhi.n	800531a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005314:	4a1e      	ldr	r2, [pc, #120]	@ (8005390 <prvAddNewTaskToReadyList+0xc4>)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800531a:	4b1f      	ldr	r3, [pc, #124]	@ (8005398 <prvAddNewTaskToReadyList+0xcc>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	3301      	adds	r3, #1
 8005320:	4a1d      	ldr	r2, [pc, #116]	@ (8005398 <prvAddNewTaskToReadyList+0xcc>)
 8005322:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005324:	4b1c      	ldr	r3, [pc, #112]	@ (8005398 <prvAddNewTaskToReadyList+0xcc>)
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005330:	2201      	movs	r2, #1
 8005332:	409a      	lsls	r2, r3
 8005334:	4b19      	ldr	r3, [pc, #100]	@ (800539c <prvAddNewTaskToReadyList+0xd0>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4313      	orrs	r3, r2
 800533a:	4a18      	ldr	r2, [pc, #96]	@ (800539c <prvAddNewTaskToReadyList+0xd0>)
 800533c:	6013      	str	r3, [r2, #0]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005342:	4613      	mov	r3, r2
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	4a15      	ldr	r2, [pc, #84]	@ (80053a0 <prvAddNewTaskToReadyList+0xd4>)
 800534c:	441a      	add	r2, r3
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	3304      	adds	r3, #4
 8005352:	4619      	mov	r1, r3
 8005354:	4610      	mov	r0, r2
 8005356:	f7ff f892 	bl	800447e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800535a:	f001 fca9 	bl	8006cb0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800535e:	4b0d      	ldr	r3, [pc, #52]	@ (8005394 <prvAddNewTaskToReadyList+0xc8>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00e      	beq.n	8005384 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005366:	4b0a      	ldr	r3, [pc, #40]	@ (8005390 <prvAddNewTaskToReadyList+0xc4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	429a      	cmp	r2, r3
 8005372:	d207      	bcs.n	8005384 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8005374:	4b0b      	ldr	r3, [pc, #44]	@ (80053a4 <prvAddNewTaskToReadyList+0xd8>)
 8005376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000230 	.word	0x20000230
 8005390:	20000158 	.word	0x20000158
 8005394:	2000023c 	.word	0x2000023c
 8005398:	2000024c 	.word	0x2000024c
 800539c:	20000238 	.word	0x20000238
 80053a0:	2000015c 	.word	0x2000015c
 80053a4:	e000ed04 	.word	0xe000ed04

080053a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80053ae:	4b20      	ldr	r3, [pc, #128]	@ (8005430 <vTaskStartScheduler+0x88>)
 80053b0:	9301      	str	r3, [sp, #4]
 80053b2:	2300      	movs	r3, #0
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	2300      	movs	r3, #0
 80053b8:	2282      	movs	r2, #130	@ 0x82
 80053ba:	491e      	ldr	r1, [pc, #120]	@ (8005434 <vTaskStartScheduler+0x8c>)
 80053bc:	481e      	ldr	r0, [pc, #120]	@ (8005438 <vTaskStartScheduler+0x90>)
 80053be:	f7ff fead 	bl	800511c <xTaskCreate>
 80053c2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d102      	bne.n	80053d0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80053ca:	f000 ff6d 	bl	80062a8 <xTimerCreateTimerTask>
 80053ce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d116      	bne.n	8005404 <vTaskStartScheduler+0x5c>
        __asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	60bb      	str	r3, [r7, #8]
    }
 80053e8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80053ea:	4b14      	ldr	r3, [pc, #80]	@ (800543c <vTaskStartScheduler+0x94>)
 80053ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80053f2:	4b13      	ldr	r3, [pc, #76]	@ (8005440 <vTaskStartScheduler+0x98>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80053f8:	4b12      	ldr	r3, [pc, #72]	@ (8005444 <vTaskStartScheduler+0x9c>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80053fe:	f001 fb81 	bl	8006b04 <xPortStartScheduler>
 8005402:	e00f      	b.n	8005424 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800540a:	d10b      	bne.n	8005424 <vTaskStartScheduler+0x7c>
        __asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	607b      	str	r3, [r7, #4]
    }
 800541e:	bf00      	nop
 8005420:	bf00      	nop
 8005422:	e7fd      	b.n	8005420 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005424:	4b08      	ldr	r3, [pc, #32]	@ (8005448 <vTaskStartScheduler+0xa0>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	bf00      	nop
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000254 	.word	0x20000254
 8005434:	080076c0 	.word	0x080076c0
 8005438:	08005a71 	.word	0x08005a71
 800543c:	20000250 	.word	0x20000250
 8005440:	2000023c 	.word	0x2000023c
 8005444:	20000234 	.word	0x20000234
 8005448:	20000030 	.word	0x20000030

0800544c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800544c:	b480      	push	{r7}
 800544e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005450:	4b04      	ldr	r3, [pc, #16]	@ (8005464 <vTaskSuspendAll+0x18>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	3301      	adds	r3, #1
 8005456:	4a03      	ldr	r2, [pc, #12]	@ (8005464 <vTaskSuspendAll+0x18>)
 8005458:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800545a:	bf00      	nop
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	20000258 	.word	0x20000258

08005468 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8005476:	4b42      	ldr	r3, [pc, #264]	@ (8005580 <xTaskResumeAll+0x118>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d10b      	bne.n	8005496 <xTaskResumeAll+0x2e>
        __asm volatile
 800547e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	603b      	str	r3, [r7, #0]
    }
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	e7fd      	b.n	8005492 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8005496:	f001 fbd9 	bl	8006c4c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800549a:	4b39      	ldr	r3, [pc, #228]	@ (8005580 <xTaskResumeAll+0x118>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	3b01      	subs	r3, #1
 80054a0:	4a37      	ldr	r2, [pc, #220]	@ (8005580 <xTaskResumeAll+0x118>)
 80054a2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054a4:	4b36      	ldr	r3, [pc, #216]	@ (8005580 <xTaskResumeAll+0x118>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d161      	bne.n	8005570 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054ac:	4b35      	ldr	r3, [pc, #212]	@ (8005584 <xTaskResumeAll+0x11c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d05d      	beq.n	8005570 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054b4:	e02e      	b.n	8005514 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054b6:	4b34      	ldr	r3, [pc, #208]	@ (8005588 <xTaskResumeAll+0x120>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	3318      	adds	r3, #24
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff f838 	bl	8004538 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3304      	adds	r3, #4
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff f833 	bl	8004538 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054d6:	2201      	movs	r2, #1
 80054d8:	409a      	lsls	r2, r3
 80054da:	4b2c      	ldr	r3, [pc, #176]	@ (800558c <xTaskResumeAll+0x124>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4313      	orrs	r3, r2
 80054e0:	4a2a      	ldr	r2, [pc, #168]	@ (800558c <xTaskResumeAll+0x124>)
 80054e2:	6013      	str	r3, [r2, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80054e8:	4613      	mov	r3, r2
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	4413      	add	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4a27      	ldr	r2, [pc, #156]	@ (8005590 <xTaskResumeAll+0x128>)
 80054f2:	441a      	add	r2, r3
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	3304      	adds	r3, #4
 80054f8:	4619      	mov	r1, r3
 80054fa:	4610      	mov	r0, r2
 80054fc:	f7fe ffbf 	bl	800447e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005504:	4b23      	ldr	r3, [pc, #140]	@ (8005594 <xTaskResumeAll+0x12c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800550a:	429a      	cmp	r2, r3
 800550c:	d302      	bcc.n	8005514 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 800550e:	4b22      	ldr	r3, [pc, #136]	@ (8005598 <xTaskResumeAll+0x130>)
 8005510:	2201      	movs	r2, #1
 8005512:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005514:	4b1c      	ldr	r3, [pc, #112]	@ (8005588 <xTaskResumeAll+0x120>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1cc      	bne.n	80054b6 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d001      	beq.n	8005526 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005522:	f000 fb3b 	bl	8005b9c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005526:	4b1d      	ldr	r3, [pc, #116]	@ (800559c <xTaskResumeAll+0x134>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d010      	beq.n	8005554 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005532:	f000 f847 	bl	80055c4 <xTaskIncrementTick>
 8005536:	4603      	mov	r3, r0
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 800553c:	4b16      	ldr	r3, [pc, #88]	@ (8005598 <xTaskResumeAll+0x130>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	3b01      	subs	r3, #1
 8005546:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1f1      	bne.n	8005532 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800554e:	4b13      	ldr	r3, [pc, #76]	@ (800559c <xTaskResumeAll+0x134>)
 8005550:	2200      	movs	r2, #0
 8005552:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8005554:	4b10      	ldr	r3, [pc, #64]	@ (8005598 <xTaskResumeAll+0x130>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d009      	beq.n	8005570 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800555c:	2301      	movs	r3, #1
 800555e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8005560:	4b0f      	ldr	r3, [pc, #60]	@ (80055a0 <xTaskResumeAll+0x138>)
 8005562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005566:	601a      	str	r2, [r3, #0]
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8005570:	f001 fb9e 	bl	8006cb0 <vPortExitCritical>

    return xAlreadyYielded;
 8005574:	68bb      	ldr	r3, [r7, #8]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000258 	.word	0x20000258
 8005584:	20000230 	.word	0x20000230
 8005588:	200001f0 	.word	0x200001f0
 800558c:	20000238 	.word	0x20000238
 8005590:	2000015c 	.word	0x2000015c
 8005594:	20000158 	.word	0x20000158
 8005598:	20000244 	.word	0x20000244
 800559c:	20000240 	.word	0x20000240
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80055aa:	4b05      	ldr	r3, [pc, #20]	@ (80055c0 <xTaskGetTickCount+0x1c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80055b0:	687b      	ldr	r3, [r7, #4]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000234 	.word	0x20000234

080055c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80055ca:	2300      	movs	r3, #0
 80055cc:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ce:	4b4f      	ldr	r3, [pc, #316]	@ (800570c <xTaskIncrementTick+0x148>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f040 808f 	bne.w	80056f6 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80055d8:	4b4d      	ldr	r3, [pc, #308]	@ (8005710 <xTaskIncrementTick+0x14c>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3301      	adds	r3, #1
 80055de:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80055e0:	4a4b      	ldr	r2, [pc, #300]	@ (8005710 <xTaskIncrementTick+0x14c>)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d121      	bne.n	8005630 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80055ec:	4b49      	ldr	r3, [pc, #292]	@ (8005714 <xTaskIncrementTick+0x150>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <xTaskIncrementTick+0x4a>
        __asm volatile
 80055f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fa:	f383 8811 	msr	BASEPRI, r3
 80055fe:	f3bf 8f6f 	isb	sy
 8005602:	f3bf 8f4f 	dsb	sy
 8005606:	603b      	str	r3, [r7, #0]
    }
 8005608:	bf00      	nop
 800560a:	bf00      	nop
 800560c:	e7fd      	b.n	800560a <xTaskIncrementTick+0x46>
 800560e:	4b41      	ldr	r3, [pc, #260]	@ (8005714 <xTaskIncrementTick+0x150>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	4b40      	ldr	r3, [pc, #256]	@ (8005718 <xTaskIncrementTick+0x154>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a3e      	ldr	r2, [pc, #248]	@ (8005714 <xTaskIncrementTick+0x150>)
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	4a3e      	ldr	r2, [pc, #248]	@ (8005718 <xTaskIncrementTick+0x154>)
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6013      	str	r3, [r2, #0]
 8005622:	4b3e      	ldr	r3, [pc, #248]	@ (800571c <xTaskIncrementTick+0x158>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	4a3c      	ldr	r2, [pc, #240]	@ (800571c <xTaskIncrementTick+0x158>)
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	f000 fab6 	bl	8005b9c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005630:	4b3b      	ldr	r3, [pc, #236]	@ (8005720 <xTaskIncrementTick+0x15c>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	429a      	cmp	r2, r3
 8005638:	d348      	bcc.n	80056cc <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800563a:	4b36      	ldr	r3, [pc, #216]	@ (8005714 <xTaskIncrementTick+0x150>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d104      	bne.n	800564e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005644:	4b36      	ldr	r3, [pc, #216]	@ (8005720 <xTaskIncrementTick+0x15c>)
 8005646:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800564a:	601a      	str	r2, [r3, #0]
                    break;
 800564c:	e03e      	b.n	80056cc <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800564e:	4b31      	ldr	r3, [pc, #196]	@ (8005714 <xTaskIncrementTick+0x150>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68db      	ldr	r3, [r3, #12]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800565e:	693a      	ldr	r2, [r7, #16]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	429a      	cmp	r2, r3
 8005664:	d203      	bcs.n	800566e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005666:	4a2e      	ldr	r2, [pc, #184]	@ (8005720 <xTaskIncrementTick+0x15c>)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800566c:	e02e      	b.n	80056cc <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	3304      	adds	r3, #4
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe ff60 	bl	8004538 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	3318      	adds	r3, #24
 8005684:	4618      	mov	r0, r3
 8005686:	f7fe ff57 	bl	8004538 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800568e:	2201      	movs	r2, #1
 8005690:	409a      	lsls	r2, r3
 8005692:	4b24      	ldr	r3, [pc, #144]	@ (8005724 <xTaskIncrementTick+0x160>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4313      	orrs	r3, r2
 8005698:	4a22      	ldr	r2, [pc, #136]	@ (8005724 <xTaskIncrementTick+0x160>)
 800569a:	6013      	str	r3, [r2, #0]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056a0:	4613      	mov	r3, r2
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	4413      	add	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4a1f      	ldr	r2, [pc, #124]	@ (8005728 <xTaskIncrementTick+0x164>)
 80056aa:	441a      	add	r2, r3
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	3304      	adds	r3, #4
 80056b0:	4619      	mov	r1, r3
 80056b2:	4610      	mov	r0, r2
 80056b4:	f7fe fee3 	bl	800447e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056bc:	4b1b      	ldr	r3, [pc, #108]	@ (800572c <xTaskIncrementTick+0x168>)
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d3b9      	bcc.n	800563a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80056c6:	2301      	movs	r3, #1
 80056c8:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ca:	e7b6      	b.n	800563a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80056cc:	4b17      	ldr	r3, [pc, #92]	@ (800572c <xTaskIncrementTick+0x168>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d2:	4915      	ldr	r1, [pc, #84]	@ (8005728 <xTaskIncrementTick+0x164>)
 80056d4:	4613      	mov	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d901      	bls.n	80056e8 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 80056e4:	2301      	movs	r3, #1
 80056e6:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80056e8:	4b11      	ldr	r3, [pc, #68]	@ (8005730 <xTaskIncrementTick+0x16c>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d007      	beq.n	8005700 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 80056f0:	2301      	movs	r3, #1
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	e004      	b.n	8005700 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80056f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005734 <xTaskIncrementTick+0x170>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	4a0d      	ldr	r2, [pc, #52]	@ (8005734 <xTaskIncrementTick+0x170>)
 80056fe:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8005700:	697b      	ldr	r3, [r7, #20]
}
 8005702:	4618      	mov	r0, r3
 8005704:	3718      	adds	r7, #24
 8005706:	46bd      	mov	sp, r7
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000258 	.word	0x20000258
 8005710:	20000234 	.word	0x20000234
 8005714:	200001e8 	.word	0x200001e8
 8005718:	200001ec 	.word	0x200001ec
 800571c:	20000248 	.word	0x20000248
 8005720:	20000250 	.word	0x20000250
 8005724:	20000238 	.word	0x20000238
 8005728:	2000015c 	.word	0x2000015c
 800572c:	20000158 	.word	0x20000158
 8005730:	20000244 	.word	0x20000244
 8005734:	20000240 	.word	0x20000240

08005738 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005738:	b480      	push	{r7}
 800573a:	b087      	sub	sp, #28
 800573c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800573e:	4b27      	ldr	r3, [pc, #156]	@ (80057dc <vTaskSwitchContext+0xa4>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005746:	4b26      	ldr	r3, [pc, #152]	@ (80057e0 <vTaskSwitchContext+0xa8>)
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800574c:	e040      	b.n	80057d0 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800574e:	4b24      	ldr	r3, [pc, #144]	@ (80057e0 <vTaskSwitchContext+0xa8>)
 8005750:	2200      	movs	r2, #0
 8005752:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005754:	4b23      	ldr	r3, [pc, #140]	@ (80057e4 <vTaskSwitchContext+0xac>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	fab3 f383 	clz	r3, r3
 8005760:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8005762:	7afb      	ldrb	r3, [r7, #11]
 8005764:	f1c3 031f 	rsb	r3, r3, #31
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	491f      	ldr	r1, [pc, #124]	@ (80057e8 <vTaskSwitchContext+0xb0>)
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d10b      	bne.n	8005796 <vTaskSwitchContext+0x5e>
        __asm volatile
 800577e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005782:	f383 8811 	msr	BASEPRI, r3
 8005786:	f3bf 8f6f 	isb	sy
 800578a:	f3bf 8f4f 	dsb	sy
 800578e:	607b      	str	r3, [r7, #4]
    }
 8005790:	bf00      	nop
 8005792:	bf00      	nop
 8005794:	e7fd      	b.n	8005792 <vTaskSwitchContext+0x5a>
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4a11      	ldr	r2, [pc, #68]	@ (80057e8 <vTaskSwitchContext+0xb0>)
 80057a2:	4413      	add	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	685a      	ldr	r2, [r3, #4]
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	605a      	str	r2, [r3, #4]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	693b      	ldr	r3, [r7, #16]
 80057b6:	3308      	adds	r3, #8
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d104      	bne.n	80057c6 <vTaskSwitchContext+0x8e>
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	605a      	str	r2, [r3, #4]
 80057c6:	693b      	ldr	r3, [r7, #16]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	4a07      	ldr	r2, [pc, #28]	@ (80057ec <vTaskSwitchContext+0xb4>)
 80057ce:	6013      	str	r3, [r2, #0]
}
 80057d0:	bf00      	nop
 80057d2:	371c      	adds	r7, #28
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	20000258 	.word	0x20000258
 80057e0:	20000244 	.word	0x20000244
 80057e4:	20000238 	.word	0x20000238
 80057e8:	2000015c 	.word	0x2000015c
 80057ec:	20000158 	.word	0x20000158

080057f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10b      	bne.n	8005818 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8005800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005804:	f383 8811 	msr	BASEPRI, r3
 8005808:	f3bf 8f6f 	isb	sy
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	60fb      	str	r3, [r7, #12]
    }
 8005812:	bf00      	nop
 8005814:	bf00      	nop
 8005816:	e7fd      	b.n	8005814 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005818:	4b07      	ldr	r3, [pc, #28]	@ (8005838 <vTaskPlaceOnEventList+0x48>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	3318      	adds	r3, #24
 800581e:	4619      	mov	r1, r3
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7fe fe50 	bl	80044c6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005826:	2101      	movs	r1, #1
 8005828:	6838      	ldr	r0, [r7, #0]
 800582a:	f000 fcd7 	bl	80061dc <prvAddCurrentTaskToDelayedList>
}
 800582e:	bf00      	nop
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop
 8005838:	20000158 	.word	0x20000158

0800583c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800583c:	b580      	push	{r7, lr}
 800583e:	b086      	sub	sp, #24
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10b      	bne.n	8005866 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	617b      	str	r3, [r7, #20]
    }
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	e7fd      	b.n	8005862 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005866:	4b0a      	ldr	r3, [pc, #40]	@ (8005890 <vTaskPlaceOnEventListRestricted+0x54>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3318      	adds	r3, #24
 800586c:	4619      	mov	r1, r3
 800586e:	68f8      	ldr	r0, [r7, #12]
 8005870:	f7fe fe05 	bl	800447e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800587a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800587e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	68b8      	ldr	r0, [r7, #8]
 8005884:	f000 fcaa 	bl	80061dc <prvAddCurrentTaskToDelayedList>
    }
 8005888:	bf00      	nop
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000158 	.word	0x20000158

08005894 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d10b      	bne.n	80058c2 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80058aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ae:	f383 8811 	msr	BASEPRI, r3
 80058b2:	f3bf 8f6f 	isb	sy
 80058b6:	f3bf 8f4f 	dsb	sy
 80058ba:	60fb      	str	r3, [r7, #12]
    }
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	e7fd      	b.n	80058be <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058c2:	693b      	ldr	r3, [r7, #16]
 80058c4:	3318      	adds	r3, #24
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7fe fe36 	bl	8004538 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005944 <xTaskRemoveFromEventList+0xb0>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d11c      	bne.n	800590e <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	3304      	adds	r3, #4
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe fe2d 	bl	8004538 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e2:	2201      	movs	r2, #1
 80058e4:	409a      	lsls	r2, r3
 80058e6:	4b18      	ldr	r3, [pc, #96]	@ (8005948 <xTaskRemoveFromEventList+0xb4>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	4a16      	ldr	r2, [pc, #88]	@ (8005948 <xTaskRemoveFromEventList+0xb4>)
 80058ee:	6013      	str	r3, [r2, #0]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	4a13      	ldr	r2, [pc, #76]	@ (800594c <xTaskRemoveFromEventList+0xb8>)
 80058fe:	441a      	add	r2, r3
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	3304      	adds	r3, #4
 8005904:	4619      	mov	r1, r3
 8005906:	4610      	mov	r0, r2
 8005908:	f7fe fdb9 	bl	800447e <vListInsertEnd>
 800590c:	e005      	b.n	800591a <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	3318      	adds	r3, #24
 8005912:	4619      	mov	r1, r3
 8005914:	480e      	ldr	r0, [pc, #56]	@ (8005950 <xTaskRemoveFromEventList+0xbc>)
 8005916:	f7fe fdb2 	bl	800447e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800591e:	4b0d      	ldr	r3, [pc, #52]	@ (8005954 <xTaskRemoveFromEventList+0xc0>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005924:	429a      	cmp	r2, r3
 8005926:	d905      	bls.n	8005934 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800592c:	4b0a      	ldr	r3, [pc, #40]	@ (8005958 <xTaskRemoveFromEventList+0xc4>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	e001      	b.n	8005938 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8005934:	2300      	movs	r3, #0
 8005936:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005938:	697b      	ldr	r3, [r7, #20]
}
 800593a:	4618      	mov	r0, r3
 800593c:	3718      	adds	r7, #24
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000258 	.word	0x20000258
 8005948:	20000238 	.word	0x20000238
 800594c:	2000015c 	.word	0x2000015c
 8005950:	200001f0 	.word	0x200001f0
 8005954:	20000158 	.word	0x20000158
 8005958:	20000244 	.word	0x20000244

0800595c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005964:	4b06      	ldr	r3, [pc, #24]	@ (8005980 <vTaskInternalSetTimeOutState+0x24>)
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800596c:	4b05      	ldr	r3, [pc, #20]	@ (8005984 <vTaskInternalSetTimeOutState+0x28>)
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	605a      	str	r2, [r3, #4]
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	20000248 	.word	0x20000248
 8005984:	20000234 	.word	0x20000234

08005988 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b088      	sub	sp, #32
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10b      	bne.n	80059b0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	613b      	str	r3, [r7, #16]
    }
 80059aa:	bf00      	nop
 80059ac:	bf00      	nop
 80059ae:	e7fd      	b.n	80059ac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10b      	bne.n	80059ce <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	60fb      	str	r3, [r7, #12]
    }
 80059c8:	bf00      	nop
 80059ca:	bf00      	nop
 80059cc:	e7fd      	b.n	80059ca <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80059ce:	f001 f93d 	bl	8006c4c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80059d2:	4b1f      	ldr	r3, [pc, #124]	@ (8005a50 <xTaskCheckForTimeOut+0xc8>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	69ba      	ldr	r2, [r7, #24]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ea:	d102      	bne.n	80059f2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	e026      	b.n	8005a40 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	4b17      	ldr	r3, [pc, #92]	@ (8005a54 <xTaskCheckForTimeOut+0xcc>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d00a      	beq.n	8005a14 <xTaskCheckForTimeOut+0x8c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	69ba      	ldr	r2, [r7, #24]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d305      	bcc.n	8005a14 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e015      	b.n	8005a40 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d20b      	bcs.n	8005a36 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	1ad2      	subs	r2, r2, r3
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7ff ff96 	bl	800595c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61fb      	str	r3, [r7, #28]
 8005a34:	e004      	b.n	8005a40 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005a40:	f001 f936 	bl	8006cb0 <vPortExitCritical>

    return xReturn;
 8005a44:	69fb      	ldr	r3, [r7, #28]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000234 	.word	0x20000234
 8005a54:	20000248 	.word	0x20000248

08005a58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a58:	b480      	push	{r7}
 8005a5a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005a5c:	4b03      	ldr	r3, [pc, #12]	@ (8005a6c <vTaskMissedYield+0x14>)
 8005a5e:	2201      	movs	r2, #1
 8005a60:	601a      	str	r2, [r3, #0]
}
 8005a62:	bf00      	nop
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	20000244 	.word	0x20000244

08005a70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005a78:	f000 f852 	bl	8005b20 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a7c:	4b06      	ldr	r3, [pc, #24]	@ (8005a98 <prvIdleTask+0x28>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d9f9      	bls.n	8005a78 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005a84:	4b05      	ldr	r3, [pc, #20]	@ (8005a9c <prvIdleTask+0x2c>)
 8005a86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a8a:	601a      	str	r2, [r3, #0]
 8005a8c:	f3bf 8f4f 	dsb	sy
 8005a90:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005a94:	e7f0      	b.n	8005a78 <prvIdleTask+0x8>
 8005a96:	bf00      	nop
 8005a98:	2000015c 	.word	0x2000015c
 8005a9c:	e000ed04 	.word	0xe000ed04

08005aa0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	607b      	str	r3, [r7, #4]
 8005aaa:	e00c      	b.n	8005ac6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4a12      	ldr	r2, [pc, #72]	@ (8005b00 <prvInitialiseTaskLists+0x60>)
 8005ab8:	4413      	add	r3, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fe fcb2 	bl	8004424 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2b04      	cmp	r3, #4
 8005aca:	d9ef      	bls.n	8005aac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005acc:	480d      	ldr	r0, [pc, #52]	@ (8005b04 <prvInitialiseTaskLists+0x64>)
 8005ace:	f7fe fca9 	bl	8004424 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005ad2:	480d      	ldr	r0, [pc, #52]	@ (8005b08 <prvInitialiseTaskLists+0x68>)
 8005ad4:	f7fe fca6 	bl	8004424 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005ad8:	480c      	ldr	r0, [pc, #48]	@ (8005b0c <prvInitialiseTaskLists+0x6c>)
 8005ada:	f7fe fca3 	bl	8004424 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005ade:	480c      	ldr	r0, [pc, #48]	@ (8005b10 <prvInitialiseTaskLists+0x70>)
 8005ae0:	f7fe fca0 	bl	8004424 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005ae4:	480b      	ldr	r0, [pc, #44]	@ (8005b14 <prvInitialiseTaskLists+0x74>)
 8005ae6:	f7fe fc9d 	bl	8004424 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005aea:	4b0b      	ldr	r3, [pc, #44]	@ (8005b18 <prvInitialiseTaskLists+0x78>)
 8005aec:	4a05      	ldr	r2, [pc, #20]	@ (8005b04 <prvInitialiseTaskLists+0x64>)
 8005aee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005af0:	4b0a      	ldr	r3, [pc, #40]	@ (8005b1c <prvInitialiseTaskLists+0x7c>)
 8005af2:	4a05      	ldr	r2, [pc, #20]	@ (8005b08 <prvInitialiseTaskLists+0x68>)
 8005af4:	601a      	str	r2, [r3, #0]
}
 8005af6:	bf00      	nop
 8005af8:	3708      	adds	r7, #8
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	2000015c 	.word	0x2000015c
 8005b04:	200001c0 	.word	0x200001c0
 8005b08:	200001d4 	.word	0x200001d4
 8005b0c:	200001f0 	.word	0x200001f0
 8005b10:	20000204 	.word	0x20000204
 8005b14:	2000021c 	.word	0x2000021c
 8005b18:	200001e8 	.word	0x200001e8
 8005b1c:	200001ec 	.word	0x200001ec

08005b20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b26:	e019      	b.n	8005b5c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005b28:	f001 f890 	bl	8006c4c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b2c:	4b10      	ldr	r3, [pc, #64]	@ (8005b70 <prvCheckTasksWaitingTermination+0x50>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3304      	adds	r3, #4
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7fe fcfd 	bl	8004538 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <prvCheckTasksWaitingTermination+0x54>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	4a0b      	ldr	r2, [pc, #44]	@ (8005b74 <prvCheckTasksWaitingTermination+0x54>)
 8005b46:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005b48:	4b0b      	ldr	r3, [pc, #44]	@ (8005b78 <prvCheckTasksWaitingTermination+0x58>)
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b78 <prvCheckTasksWaitingTermination+0x58>)
 8005b50:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005b52:	f001 f8ad 	bl	8006cb0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f810 	bl	8005b7c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b5c:	4b06      	ldr	r3, [pc, #24]	@ (8005b78 <prvCheckTasksWaitingTermination+0x58>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e1      	bne.n	8005b28 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005b64:	bf00      	nop
 8005b66:	bf00      	nop
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	20000204 	.word	0x20000204
 8005b74:	20000230 	.word	0x20000230
 8005b78:	20000218 	.word	0x20000218

08005b7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 fa6b 	bl	8007064 <vPortFree>
                vPortFree( pxTCB );
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f001 fa68 	bl	8007064 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005b94:	bf00      	nop
 8005b96:	3708      	adds	r7, #8
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}

08005b9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8005bcc <prvResetNextTaskUnblockTime+0x30>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d104      	bne.n	8005bb4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005baa:	4b09      	ldr	r3, [pc, #36]	@ (8005bd0 <prvResetNextTaskUnblockTime+0x34>)
 8005bac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005bb0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005bb2:	e005      	b.n	8005bc0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bb4:	4b05      	ldr	r3, [pc, #20]	@ (8005bcc <prvResetNextTaskUnblockTime+0x30>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a04      	ldr	r2, [pc, #16]	@ (8005bd0 <prvResetNextTaskUnblockTime+0x34>)
 8005bbe:	6013      	str	r3, [r2, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	200001e8 	.word	0x200001e8
 8005bd0:	20000250 	.word	0x20000250

08005bd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005bda:	4b0b      	ldr	r3, [pc, #44]	@ (8005c08 <xTaskGetSchedulerState+0x34>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d102      	bne.n	8005be8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005be2:	2301      	movs	r3, #1
 8005be4:	607b      	str	r3, [r7, #4]
 8005be6:	e008      	b.n	8005bfa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005be8:	4b08      	ldr	r3, [pc, #32]	@ (8005c0c <xTaskGetSchedulerState+0x38>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d102      	bne.n	8005bf6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	607b      	str	r3, [r7, #4]
 8005bf4:	e001      	b.n	8005bfa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005bfa:	687b      	ldr	r3, [r7, #4]
    }
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	2000023c 	.word	0x2000023c
 8005c0c:	20000258 	.word	0x20000258

08005c10 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b086      	sub	sp, #24
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d065      	beq.n	8005cf2 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005c26:	4b35      	ldr	r3, [pc, #212]	@ (8005cfc <xTaskPriorityDisinherit+0xec>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d00b      	beq.n	8005c48 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	60fb      	str	r3, [r7, #12]
    }
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d10b      	bne.n	8005c68 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8005c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c54:	f383 8811 	msr	BASEPRI, r3
 8005c58:	f3bf 8f6f 	isb	sy
 8005c5c:	f3bf 8f4f 	dsb	sy
 8005c60:	60bb      	str	r3, [r7, #8]
    }
 8005c62:	bf00      	nop
 8005c64:	bf00      	nop
 8005c66:	e7fd      	b.n	8005c64 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c6c:	1e5a      	subs	r2, r3, #1
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d039      	beq.n	8005cf2 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d135      	bne.n	8005cf2 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f7fe fc54 	bl	8004538 <uxListRemove>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10a      	bne.n	8005cac <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca0:	43da      	mvns	r2, r3
 8005ca2:	4b17      	ldr	r3, [pc, #92]	@ (8005d00 <xTaskPriorityDisinherit+0xf0>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	4a15      	ldr	r2, [pc, #84]	@ (8005d00 <xTaskPriorityDisinherit+0xf0>)
 8005caa:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	f1c3 0205 	rsb	r2, r3, #5
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	409a      	lsls	r2, r3
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d00 <xTaskPriorityDisinherit+0xf0>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	4a0c      	ldr	r2, [pc, #48]	@ (8005d00 <xTaskPriorityDisinherit+0xf0>)
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4a09      	ldr	r2, [pc, #36]	@ (8005d04 <xTaskPriorityDisinherit+0xf4>)
 8005ce0:	441a      	add	r2, r3
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	4610      	mov	r0, r2
 8005cea:	f7fe fbc8 	bl	800447e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005cf2:	697b      	ldr	r3, [r7, #20]
    }
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3718      	adds	r7, #24
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	20000158 	.word	0x20000158
 8005d00:	20000238 	.word	0x20000238
 8005d04:	2000015c 	.word	0x2000015c

08005d08 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b086      	sub	sp, #24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d00b      	beq.n	8005d34 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	613b      	str	r3, [r7, #16]
    }
 8005d2e:	bf00      	nop
 8005d30:	bf00      	nop
 8005d32:	e7fd      	b.n	8005d30 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8005d34:	f000 ff8a 	bl	8006c4c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005d38:	4b31      	ldr	r3, [pc, #196]	@ (8005e00 <xTaskGenericNotifyWait+0xf8>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4413      	add	r3, r2
 8005d40:	3354      	adds	r3, #84	@ 0x54
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b02      	cmp	r3, #2
 8005d48:	d022      	beq.n	8005d90 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8005e00 <xTaskGenericNotifyWait+0xf8>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68fa      	ldr	r2, [r7, #12]
 8005d50:	3214      	adds	r2, #20
 8005d52:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	43d2      	mvns	r2, r2
 8005d5a:	4011      	ands	r1, r2
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	3214      	adds	r2, #20
 8005d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005d64:	4b26      	ldr	r3, [pc, #152]	@ (8005e00 <xTaskGenericNotifyWait+0xf8>)
 8005d66:	681a      	ldr	r2, [r3, #0]
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	3354      	adds	r3, #84	@ 0x54
 8005d6e:	2201      	movs	r2, #1
 8005d70:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00b      	beq.n	8005d90 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d78:	2101      	movs	r1, #1
 8005d7a:	6a38      	ldr	r0, [r7, #32]
 8005d7c:	f000 fa2e 	bl	80061dc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005d80:	4b20      	ldr	r3, [pc, #128]	@ (8005e04 <xTaskGenericNotifyWait+0xfc>)
 8005d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d86:	601a      	str	r2, [r3, #0]
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005d90:	f000 ff8e 	bl	8006cb0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005d94:	f000 ff5a 	bl	8006c4c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d007      	beq.n	8005dae <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005d9e:	4b18      	ldr	r3, [pc, #96]	@ (8005e00 <xTaskGenericNotifyWait+0xf8>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	3214      	adds	r2, #20
 8005da6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005dae:	4b14      	ldr	r3, [pc, #80]	@ (8005e00 <xTaskGenericNotifyWait+0xf8>)
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	3354      	adds	r3, #84	@ 0x54
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b02      	cmp	r3, #2
 8005dbe:	d002      	beq.n	8005dc6 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	e00e      	b.n	8005de4 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005dc6:	4b0e      	ldr	r3, [pc, #56]	@ (8005e00 <xTaskGenericNotifyWait+0xf8>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	3214      	adds	r2, #20
 8005dce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	43d2      	mvns	r2, r2
 8005dd6:	4011      	ands	r1, r2
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	3214      	adds	r2, #20
 8005ddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005de4:	4b06      	ldr	r3, [pc, #24]	@ (8005e00 <xTaskGenericNotifyWait+0xf8>)
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	3354      	adds	r3, #84	@ 0x54
 8005dee:	2200      	movs	r2, #0
 8005df0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005df2:	f000 ff5d 	bl	8006cb0 <vPortExitCritical>

        return xReturn;
 8005df6:	697b      	ldr	r3, [r7, #20]
    }
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000158 	.word	0x20000158
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08c      	sub	sp, #48	@ 0x30
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005e16:	2301      	movs	r3, #1
 8005e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <xTaskGenericNotify+0x30>
        __asm volatile
 8005e20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e24:	f383 8811 	msr	BASEPRI, r3
 8005e28:	f3bf 8f6f 	isb	sy
 8005e2c:	f3bf 8f4f 	dsb	sy
 8005e30:	623b      	str	r3, [r7, #32]
    }
 8005e32:	bf00      	nop
 8005e34:	bf00      	nop
 8005e36:	e7fd      	b.n	8005e34 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10b      	bne.n	8005e56 <xTaskGenericNotify+0x4e>
        __asm volatile
 8005e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	61fb      	str	r3, [r7, #28]
    }
 8005e50:	bf00      	nop
 8005e52:	bf00      	nop
 8005e54:	e7fd      	b.n	8005e52 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 8005e5a:	f000 fef7 	bl	8006c4c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d006      	beq.n	8005e72 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	3214      	adds	r2, #20
 8005e6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e70:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005e72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4413      	add	r3, r2
 8005e78:	3354      	adds	r3, #84	@ 0x54
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005e80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	4413      	add	r3, r2
 8005e86:	3354      	adds	r3, #84	@ 0x54
 8005e88:	2202      	movs	r2, #2
 8005e8a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005e8c:	78fb      	ldrb	r3, [r7, #3]
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	d83b      	bhi.n	8005f0a <xTaskGenericNotify+0x102>
 8005e92:	a201      	add	r2, pc, #4	@ (adr r2, 8005e98 <xTaskGenericNotify+0x90>)
 8005e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e98:	08005f2b 	.word	0x08005f2b
 8005e9c:	08005ead 	.word	0x08005ead
 8005ea0:	08005ec9 	.word	0x08005ec9
 8005ea4:	08005ee1 	.word	0x08005ee1
 8005ea8:	08005eef 	.word	0x08005eef
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eae:	68ba      	ldr	r2, [r7, #8]
 8005eb0:	3214      	adds	r2, #20
 8005eb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	ea42 0103 	orr.w	r1, r2, r3
 8005ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	3214      	adds	r2, #20
 8005ec2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005ec6:	e033      	b.n	8005f30 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	3214      	adds	r2, #20
 8005ece:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ed2:	1c59      	adds	r1, r3, #1
 8005ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	3214      	adds	r2, #20
 8005eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005ede:	e027      	b.n	8005f30 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	3214      	adds	r2, #20
 8005ee6:	6879      	ldr	r1, [r7, #4]
 8005ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005eec:	e020      	b.n	8005f30 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005eee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d006      	beq.n	8005f04 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	3214      	adds	r2, #20
 8005efc:	6879      	ldr	r1, [r7, #4]
 8005efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005f02:	e015      	b.n	8005f30 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8005f04:	2300      	movs	r3, #0
 8005f06:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8005f08:	e012      	b.n	8005f30 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005f0a:	4b2c      	ldr	r3, [pc, #176]	@ (8005fbc <xTaskGenericNotify+0x1b4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d00d      	beq.n	8005f2e <xTaskGenericNotify+0x126>
        __asm volatile
 8005f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f16:	f383 8811 	msr	BASEPRI, r3
 8005f1a:	f3bf 8f6f 	isb	sy
 8005f1e:	f3bf 8f4f 	dsb	sy
 8005f22:	61bb      	str	r3, [r7, #24]
    }
 8005f24:	bf00      	nop
 8005f26:	bf00      	nop
 8005f28:	e7fd      	b.n	8005f26 <xTaskGenericNotify+0x11e>
                    break;
 8005f2a:	bf00      	nop
 8005f2c:	e000      	b.n	8005f30 <xTaskGenericNotify+0x128>

                    break;
 8005f2e:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005f30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d13a      	bne.n	8005fae <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f3a:	3304      	adds	r3, #4
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7fe fafb 	bl	8004538 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8005f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f46:	2201      	movs	r2, #1
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	4b1d      	ldr	r3, [pc, #116]	@ (8005fc0 <xTaskGenericNotify+0x1b8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	4a1b      	ldr	r2, [pc, #108]	@ (8005fc0 <xTaskGenericNotify+0x1b8>)
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4a18      	ldr	r2, [pc, #96]	@ (8005fc4 <xTaskGenericNotify+0x1bc>)
 8005f62:	441a      	add	r2, r3
 8005f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f7fe fa87 	bl	800447e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00b      	beq.n	8005f90 <xTaskGenericNotify+0x188>
        __asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	617b      	str	r3, [r7, #20]
    }
 8005f8a:	bf00      	nop
 8005f8c:	bf00      	nop
 8005f8e:	e7fd      	b.n	8005f8c <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f94:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc8 <xTaskGenericNotify+0x1c0>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d907      	bls.n	8005fae <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005fcc <xTaskGenericNotify+0x1c4>)
 8005fa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005fae:	f000 fe7f 	bl	8006cb0 <vPortExitCritical>

        return xReturn;
 8005fb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3730      	adds	r7, #48	@ 0x30
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20000234 	.word	0x20000234
 8005fc0:	20000238 	.word	0x20000238
 8005fc4:	2000015c 	.word	0x2000015c
 8005fc8:	20000158 	.word	0x20000158
 8005fcc:	e000ed04 	.word	0xe000ed04

08005fd0 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b090      	sub	sp, #64	@ 0x40
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]
 8005fdc:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d10b      	bne.n	8006000 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8005fe8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fec:	f383 8811 	msr	BASEPRI, r3
 8005ff0:	f3bf 8f6f 	isb	sy
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8005ffa:	bf00      	nop
 8005ffc:	bf00      	nop
 8005ffe:	e7fd      	b.n	8005ffc <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00b      	beq.n	800601e <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8006006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600a:	f383 8811 	msr	BASEPRI, r3
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	f3bf 8f4f 	dsb	sy
 8006016:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006018:	bf00      	nop
 800601a:	bf00      	nop
 800601c:	e7fd      	b.n	800601a <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800601e:	f000 fefd 	bl	8006e1c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8006026:	f3ef 8211 	mrs	r2, BASEPRI
 800602a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
 8006036:	f3bf 8f4f 	dsb	sy
 800603a:	627a      	str	r2, [r7, #36]	@ 0x24
 800603c:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006040:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006042:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006044:	2b00      	cmp	r3, #0
 8006046:	d006      	beq.n	8006056 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604a:	68ba      	ldr	r2, [r7, #8]
 800604c:	3214      	adds	r2, #20
 800604e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006052:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006054:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006056:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	4413      	add	r3, r2
 800605c:	3354      	adds	r3, #84	@ 0x54
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006064:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	4413      	add	r3, r2
 800606a:	3354      	adds	r3, #84	@ 0x54
 800606c:	2202      	movs	r2, #2
 800606e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006070:	78fb      	ldrb	r3, [r7, #3]
 8006072:	2b04      	cmp	r3, #4
 8006074:	d83b      	bhi.n	80060ee <xTaskGenericNotifyFromISR+0x11e>
 8006076:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <xTaskGenericNotifyFromISR+0xac>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	0800610f 	.word	0x0800610f
 8006080:	08006091 	.word	0x08006091
 8006084:	080060ad 	.word	0x080060ad
 8006088:	080060c5 	.word	0x080060c5
 800608c:	080060d3 	.word	0x080060d3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006092:	68ba      	ldr	r2, [r7, #8]
 8006094:	3214      	adds	r2, #20
 8006096:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	ea42 0103 	orr.w	r1, r2, r3
 80060a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	3214      	adds	r2, #20
 80060a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060aa:	e033      	b.n	8006114 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80060ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ae:	68ba      	ldr	r2, [r7, #8]
 80060b0:	3214      	adds	r2, #20
 80060b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b6:	1c59      	adds	r1, r3, #1
 80060b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	3214      	adds	r2, #20
 80060be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060c2:	e027      	b.n	8006114 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80060c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c6:	68ba      	ldr	r2, [r7, #8]
 80060c8:	3214      	adds	r2, #20
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80060d0:	e020      	b.n	8006114 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80060d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d006      	beq.n	80060e8 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80060da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060dc:	68ba      	ldr	r2, [r7, #8]
 80060de:	3214      	adds	r2, #20
 80060e0:	6879      	ldr	r1, [r7, #4]
 80060e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80060e6:	e015      	b.n	8006114 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80060e8:	2300      	movs	r3, #0
 80060ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 80060ec:	e012      	b.n	8006114 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80060ee:	4b34      	ldr	r3, [pc, #208]	@ (80061c0 <xTaskGenericNotifyFromISR+0x1f0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00d      	beq.n	8006112 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	61fb      	str	r3, [r7, #28]
    }
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	e7fd      	b.n	800610a <xTaskGenericNotifyFromISR+0x13a>
                    break;
 800610e:	bf00      	nop
 8006110:	e000      	b.n	8006114 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8006112:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006114:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006118:	2b01      	cmp	r3, #1
 800611a:	d146      	bne.n	80061aa <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800611c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00b      	beq.n	800613c <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	61bb      	str	r3, [r7, #24]
    }
 8006136:	bf00      	nop
 8006138:	bf00      	nop
 800613a:	e7fd      	b.n	8006138 <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800613c:	4b21      	ldr	r3, [pc, #132]	@ (80061c4 <xTaskGenericNotifyFromISR+0x1f4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d11c      	bne.n	800617e <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006146:	3304      	adds	r3, #4
 8006148:	4618      	mov	r0, r3
 800614a:	f7fe f9f5 	bl	8004538 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800614e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006152:	2201      	movs	r2, #1
 8006154:	409a      	lsls	r2, r3
 8006156:	4b1c      	ldr	r3, [pc, #112]	@ (80061c8 <xTaskGenericNotifyFromISR+0x1f8>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4313      	orrs	r3, r2
 800615c:	4a1a      	ldr	r2, [pc, #104]	@ (80061c8 <xTaskGenericNotifyFromISR+0x1f8>)
 800615e:	6013      	str	r3, [r2, #0]
 8006160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006164:	4613      	mov	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	4413      	add	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4a17      	ldr	r2, [pc, #92]	@ (80061cc <xTaskGenericNotifyFromISR+0x1fc>)
 800616e:	441a      	add	r2, r3
 8006170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006172:	3304      	adds	r3, #4
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f7fe f981 	bl	800447e <vListInsertEnd>
 800617c:	e005      	b.n	800618a <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800617e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006180:	3318      	adds	r3, #24
 8006182:	4619      	mov	r1, r3
 8006184:	4812      	ldr	r0, [pc, #72]	@ (80061d0 <xTaskGenericNotifyFromISR+0x200>)
 8006186:	f7fe f97a 	bl	800447e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800618a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800618c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800618e:	4b11      	ldr	r3, [pc, #68]	@ (80061d4 <xTaskGenericNotifyFromISR+0x204>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006194:	429a      	cmp	r2, r3
 8006196:	d908      	bls.n	80061aa <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006198:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800619a:	2b00      	cmp	r3, #0
 800619c:	d002      	beq.n	80061a4 <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800619e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061a0:	2201      	movs	r2, #1
 80061a2:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 80061a4:	4b0c      	ldr	r3, [pc, #48]	@ (80061d8 <xTaskGenericNotifyFromISR+0x208>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
 80061aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ac:	617b      	str	r3, [r7, #20]
        __asm volatile
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f383 8811 	msr	BASEPRI, r3
    }
 80061b4:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80061b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 80061b8:	4618      	mov	r0, r3
 80061ba:	3740      	adds	r7, #64	@ 0x40
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	20000234 	.word	0x20000234
 80061c4:	20000258 	.word	0x20000258
 80061c8:	20000238 	.word	0x20000238
 80061cc:	2000015c 	.word	0x2000015c
 80061d0:	200001f0 	.word	0x200001f0
 80061d4:	20000158 	.word	0x20000158
 80061d8:	20000244 	.word	0x20000244

080061dc <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80061e6:	4b29      	ldr	r3, [pc, #164]	@ (800628c <prvAddCurrentTaskToDelayedList+0xb0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061ec:	4b28      	ldr	r3, [pc, #160]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3304      	adds	r3, #4
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7fe f9a0 	bl	8004538 <uxListRemove>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10b      	bne.n	8006216 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061fe:	4b24      	ldr	r3, [pc, #144]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006204:	2201      	movs	r2, #1
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43da      	mvns	r2, r3
 800620c:	4b21      	ldr	r3, [pc, #132]	@ (8006294 <prvAddCurrentTaskToDelayedList+0xb8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4013      	ands	r3, r2
 8006212:	4a20      	ldr	r2, [pc, #128]	@ (8006294 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006214:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800621c:	d10a      	bne.n	8006234 <prvAddCurrentTaskToDelayedList+0x58>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d007      	beq.n	8006234 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006224:	4b1a      	ldr	r3, [pc, #104]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3304      	adds	r3, #4
 800622a:	4619      	mov	r1, r3
 800622c:	481a      	ldr	r0, [pc, #104]	@ (8006298 <prvAddCurrentTaskToDelayedList+0xbc>)
 800622e:	f7fe f926 	bl	800447e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006232:	e026      	b.n	8006282 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4413      	add	r3, r2
 800623a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800623c:	4b14      	ldr	r3, [pc, #80]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68ba      	ldr	r2, [r7, #8]
 8006242:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006244:	68ba      	ldr	r2, [r7, #8]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	429a      	cmp	r2, r3
 800624a:	d209      	bcs.n	8006260 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800624c:	4b13      	ldr	r3, [pc, #76]	@ (800629c <prvAddCurrentTaskToDelayedList+0xc0>)
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	4b0f      	ldr	r3, [pc, #60]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3304      	adds	r3, #4
 8006256:	4619      	mov	r1, r3
 8006258:	4610      	mov	r0, r2
 800625a:	f7fe f934 	bl	80044c6 <vListInsert>
}
 800625e:	e010      	b.n	8006282 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006260:	4b0f      	ldr	r3, [pc, #60]	@ (80062a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	4b0a      	ldr	r3, [pc, #40]	@ (8006290 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3304      	adds	r3, #4
 800626a:	4619      	mov	r1, r3
 800626c:	4610      	mov	r0, r2
 800626e:	f7fe f92a 	bl	80044c6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006272:	4b0c      	ldr	r3, [pc, #48]	@ (80062a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	429a      	cmp	r2, r3
 800627a:	d202      	bcs.n	8006282 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800627c:	4a09      	ldr	r2, [pc, #36]	@ (80062a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	6013      	str	r3, [r2, #0]
}
 8006282:	bf00      	nop
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000234 	.word	0x20000234
 8006290:	20000158 	.word	0x20000158
 8006294:	20000238 	.word	0x20000238
 8006298:	2000021c 	.word	0x2000021c
 800629c:	200001ec 	.word	0x200001ec
 80062a0:	200001e8 	.word	0x200001e8
 80062a4:	20000250 	.word	0x20000250

080062a8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80062ae:	2300      	movs	r3, #0
 80062b0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80062b2:	f000 fb3f 	bl	8006934 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80062b6:	4b12      	ldr	r3, [pc, #72]	@ (8006300 <xTimerCreateTimerTask+0x58>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00b      	beq.n	80062d6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80062be:	4b11      	ldr	r3, [pc, #68]	@ (8006304 <xTimerCreateTimerTask+0x5c>)
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	2302      	movs	r3, #2
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	2300      	movs	r3, #0
 80062c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80062cc:	490e      	ldr	r1, [pc, #56]	@ (8006308 <xTimerCreateTimerTask+0x60>)
 80062ce:	480f      	ldr	r0, [pc, #60]	@ (800630c <xTimerCreateTimerTask+0x64>)
 80062d0:	f7fe ff24 	bl	800511c <xTaskCreate>
 80062d4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d10b      	bne.n	80062f4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80062dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e0:	f383 8811 	msr	BASEPRI, r3
 80062e4:	f3bf 8f6f 	isb	sy
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	603b      	str	r3, [r7, #0]
    }
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	e7fd      	b.n	80062f0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80062f4:	687b      	ldr	r3, [r7, #4]
    }
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	2000028c 	.word	0x2000028c
 8006304:	20000290 	.word	0x20000290
 8006308:	080076c8 	.word	0x080076c8
 800630c:	08006505 	.word	0x08006505

08006310 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006310:	b580      	push	{r7, lr}
 8006312:	b088      	sub	sp, #32
 8006314:	af02      	add	r7, sp, #8
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
 800631c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800631e:	202c      	movs	r0, #44	@ 0x2c
 8006320:	f000 fdbe 	bl	8006ea0 <pvPortMalloc>
 8006324:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00d      	beq.n	8006348 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	9301      	str	r3, [sp, #4]
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	68b9      	ldr	r1, [r7, #8]
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f000 f805 	bl	8006352 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006348:	697b      	ldr	r3, [r7, #20]
        }
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006352:	b580      	push	{r7, lr}
 8006354:	b086      	sub	sp, #24
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
 800635a:	60b9      	str	r1, [r7, #8]
 800635c:	607a      	str	r2, [r7, #4]
 800635e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d10b      	bne.n	800637e <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8006366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800636a:	f383 8811 	msr	BASEPRI, r3
 800636e:	f3bf 8f6f 	isb	sy
 8006372:	f3bf 8f4f 	dsb	sy
 8006376:	617b      	str	r3, [r7, #20]
    }
 8006378:	bf00      	nop
 800637a:	bf00      	nop
 800637c:	e7fd      	b.n	800637a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800637e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006380:	2b00      	cmp	r3, #0
 8006382:	d01e      	beq.n	80063c2 <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006384:	f000 fad6 	bl	8006934 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800638e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006390:	68ba      	ldr	r2, [r7, #8]
 8006392:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800639a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800639c:	6a3a      	ldr	r2, [r7, #32]
 800639e:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	3304      	adds	r3, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7fe f85d 	bl	8004464 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d008      	beq.n	80063c2 <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80063b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80063b6:	f043 0304 	orr.w	r3, r3, #4
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80063c2:	bf00      	nop
 80063c4:	3718      	adds	r7, #24
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
	...

080063cc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b08a      	sub	sp, #40	@ 0x28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	60f8      	str	r0, [r7, #12]
 80063d4:	60b9      	str	r1, [r7, #8]
 80063d6:	607a      	str	r2, [r7, #4]
 80063d8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80063da:	2300      	movs	r3, #0
 80063dc:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10b      	bne.n	80063fc <xTimerGenericCommand+0x30>
        __asm volatile
 80063e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063e8:	f383 8811 	msr	BASEPRI, r3
 80063ec:	f3bf 8f6f 	isb	sy
 80063f0:	f3bf 8f4f 	dsb	sy
 80063f4:	623b      	str	r3, [r7, #32]
    }
 80063f6:	bf00      	nop
 80063f8:	bf00      	nop
 80063fa:	e7fd      	b.n	80063f8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80063fc:	4b19      	ldr	r3, [pc, #100]	@ (8006464 <xTimerGenericCommand+0x98>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d02a      	beq.n	800645a <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	2b05      	cmp	r3, #5
 8006414:	dc18      	bgt.n	8006448 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006416:	f7ff fbdd 	bl	8005bd4 <xTaskGetSchedulerState>
 800641a:	4603      	mov	r3, r0
 800641c:	2b02      	cmp	r3, #2
 800641e:	d109      	bne.n	8006434 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006420:	4b10      	ldr	r3, [pc, #64]	@ (8006464 <xTimerGenericCommand+0x98>)
 8006422:	6818      	ldr	r0, [r3, #0]
 8006424:	f107 0114 	add.w	r1, r7, #20
 8006428:	2300      	movs	r3, #0
 800642a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642c:	f7fe f99e 	bl	800476c <xQueueGenericSend>
 8006430:	6278      	str	r0, [r7, #36]	@ 0x24
 8006432:	e012      	b.n	800645a <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006434:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <xTimerGenericCommand+0x98>)
 8006436:	6818      	ldr	r0, [r3, #0]
 8006438:	f107 0114 	add.w	r1, r7, #20
 800643c:	2300      	movs	r3, #0
 800643e:	2200      	movs	r2, #0
 8006440:	f7fe f994 	bl	800476c <xQueueGenericSend>
 8006444:	6278      	str	r0, [r7, #36]	@ 0x24
 8006446:	e008      	b.n	800645a <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006448:	4b06      	ldr	r3, [pc, #24]	@ (8006464 <xTimerGenericCommand+0x98>)
 800644a:	6818      	ldr	r0, [r3, #0]
 800644c:	f107 0114 	add.w	r1, r7, #20
 8006450:	2300      	movs	r3, #0
 8006452:	683a      	ldr	r2, [r7, #0]
 8006454:	f7fe fa8c 	bl	8004970 <xQueueGenericSendFromISR>
 8006458:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800645a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800645c:	4618      	mov	r0, r3
 800645e:	3728      	adds	r7, #40	@ 0x28
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}
 8006464:	2000028c 	.word	0x2000028c

08006468 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006468:	b580      	push	{r7, lr}
 800646a:	b088      	sub	sp, #32
 800646c:	af02      	add	r7, sp, #8
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006472:	4b23      	ldr	r3, [pc, #140]	@ (8006500 <prvProcessExpiredTimer+0x98>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	3304      	adds	r3, #4
 8006480:	4618      	mov	r0, r3
 8006482:	f7fe f859 	bl	8004538 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800648c:	f003 0304 	and.w	r3, r3, #4
 8006490:	2b00      	cmp	r3, #0
 8006492:	d023      	beq.n	80064dc <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	699a      	ldr	r2, [r3, #24]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	18d1      	adds	r1, r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	683a      	ldr	r2, [r7, #0]
 80064a0:	6978      	ldr	r0, [r7, #20]
 80064a2:	f000 f8d5 	bl	8006650 <prvInsertTimerInActiveList>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d020      	beq.n	80064ee <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064ac:	2300      	movs	r3, #0
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	2300      	movs	r3, #0
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	2100      	movs	r1, #0
 80064b6:	6978      	ldr	r0, [r7, #20]
 80064b8:	f7ff ff88 	bl	80063cc <xTimerGenericCommand>
 80064bc:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d114      	bne.n	80064ee <prvProcessExpiredTimer+0x86>
        __asm volatile
 80064c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	60fb      	str	r3, [r7, #12]
    }
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	e7fd      	b.n	80064d8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064e2:	f023 0301 	bic.w	r3, r3, #1
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	6978      	ldr	r0, [r7, #20]
 80064f4:	4798      	blx	r3
    }
 80064f6:	bf00      	nop
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20000284 	.word	0x20000284

08006504 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800650c:	f107 0308 	add.w	r3, r7, #8
 8006510:	4618      	mov	r0, r3
 8006512:	f000 f859 	bl	80065c8 <prvGetNextExpireTime>
 8006516:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	4619      	mov	r1, r3
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f805 	bl	800652c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8006522:	f000 f8d7 	bl	80066d4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006526:	bf00      	nop
 8006528:	e7f0      	b.n	800650c <prvTimerTask+0x8>
	...

0800652c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8006536:	f7fe ff89 	bl	800544c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800653a:	f107 0308 	add.w	r3, r7, #8
 800653e:	4618      	mov	r0, r3
 8006540:	f000 f866 	bl	8006610 <prvSampleTimeNow>
 8006544:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d130      	bne.n	80065ae <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <prvProcessTimerOrBlockTask+0x3c>
 8006552:	687a      	ldr	r2, [r7, #4]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	429a      	cmp	r2, r3
 8006558:	d806      	bhi.n	8006568 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800655a:	f7fe ff85 	bl	8005468 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800655e:	68f9      	ldr	r1, [r7, #12]
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f7ff ff81 	bl	8006468 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8006566:	e024      	b.n	80065b2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d008      	beq.n	8006580 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800656e:	4b13      	ldr	r3, [pc, #76]	@ (80065bc <prvProcessTimerOrBlockTask+0x90>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <prvProcessTimerOrBlockTask+0x50>
 8006578:	2301      	movs	r3, #1
 800657a:	e000      	b.n	800657e <prvProcessTimerOrBlockTask+0x52>
 800657c:	2300      	movs	r3, #0
 800657e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006580:	4b0f      	ldr	r3, [pc, #60]	@ (80065c0 <prvProcessTimerOrBlockTask+0x94>)
 8006582:	6818      	ldr	r0, [r3, #0]
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	683a      	ldr	r2, [r7, #0]
 800658c:	4619      	mov	r1, r3
 800658e:	f7fe fd91 	bl	80050b4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006592:	f7fe ff69 	bl	8005468 <xTaskResumeAll>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10a      	bne.n	80065b2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800659c:	4b09      	ldr	r3, [pc, #36]	@ (80065c4 <prvProcessTimerOrBlockTask+0x98>)
 800659e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	f3bf 8f4f 	dsb	sy
 80065a8:	f3bf 8f6f 	isb	sy
    }
 80065ac:	e001      	b.n	80065b2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80065ae:	f7fe ff5b 	bl	8005468 <xTaskResumeAll>
    }
 80065b2:	bf00      	nop
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000288 	.word	0x20000288
 80065c0:	2000028c 	.word	0x2000028c
 80065c4:	e000ed04 	.word	0xe000ed04

080065c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065d0:	4b0e      	ldr	r3, [pc, #56]	@ (800660c <prvGetNextExpireTime+0x44>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <prvGetNextExpireTime+0x16>
 80065da:	2201      	movs	r2, #1
 80065dc:	e000      	b.n	80065e0 <prvGetNextExpireTime+0x18>
 80065de:	2200      	movs	r2, #0
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065ec:	4b07      	ldr	r3, [pc, #28]	@ (800660c <prvGetNextExpireTime+0x44>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60fb      	str	r3, [r7, #12]
 80065f6:	e001      	b.n	80065fc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80065fc:	68fb      	ldr	r3, [r7, #12]
    }
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	20000284 	.word	0x20000284

08006610 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8006618:	f7fe ffc4 	bl	80055a4 <xTaskGetTickCount>
 800661c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800661e:	4b0b      	ldr	r3, [pc, #44]	@ (800664c <prvSampleTimeNow+0x3c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68fa      	ldr	r2, [r7, #12]
 8006624:	429a      	cmp	r2, r3
 8006626:	d205      	bcs.n	8006634 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8006628:	f000 f91e 	bl	8006868 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	601a      	str	r2, [r3, #0]
 8006632:	e002      	b.n	800663a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800663a:	4a04      	ldr	r2, [pc, #16]	@ (800664c <prvSampleTimeNow+0x3c>)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006640:	68fb      	ldr	r3, [r7, #12]
    }
 8006642:	4618      	mov	r0, r3
 8006644:	3710      	adds	r7, #16
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000294 	.word	0x20000294

08006650 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	429a      	cmp	r2, r3
 8006674:	d812      	bhi.n	800669c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	1ad2      	subs	r2, r2, r3
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e01b      	b.n	80066c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800668a:	4b10      	ldr	r3, [pc, #64]	@ (80066cc <prvInsertTimerInActiveList+0x7c>)
 800668c:	681a      	ldr	r2, [r3, #0]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3304      	adds	r3, #4
 8006692:	4619      	mov	r1, r3
 8006694:	4610      	mov	r0, r2
 8006696:	f7fd ff16 	bl	80044c6 <vListInsert>
 800669a:	e012      	b.n	80066c2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d206      	bcs.n	80066b2 <prvInsertTimerInActiveList+0x62>
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d302      	bcc.n	80066b2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80066ac:	2301      	movs	r3, #1
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	e007      	b.n	80066c2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066b2:	4b07      	ldr	r3, [pc, #28]	@ (80066d0 <prvInsertTimerInActiveList+0x80>)
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	3304      	adds	r3, #4
 80066ba:	4619      	mov	r1, r3
 80066bc:	4610      	mov	r0, r2
 80066be:	f7fd ff02 	bl	80044c6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80066c2:	697b      	ldr	r3, [r7, #20]
    }
 80066c4:	4618      	mov	r0, r3
 80066c6:	3718      	adds	r7, #24
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	20000288 	.word	0x20000288
 80066d0:	20000284 	.word	0x20000284

080066d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08c      	sub	sp, #48	@ 0x30
 80066d8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066da:	e0b2      	b.n	8006842 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f2c0 80af 	blt.w	8006842 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d004      	beq.n	80066fa <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f2:	3304      	adds	r3, #4
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fd ff1f 	bl	8004538 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066fa:	1d3b      	adds	r3, r7, #4
 80066fc:	4618      	mov	r0, r3
 80066fe:	f7ff ff87 	bl	8006610 <prvSampleTimeNow>
 8006702:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b09      	cmp	r3, #9
 8006708:	f200 8098 	bhi.w	800683c <prvProcessReceivedCommands+0x168>
 800670c:	a201      	add	r2, pc, #4	@ (adr r2, 8006714 <prvProcessReceivedCommands+0x40>)
 800670e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006712:	bf00      	nop
 8006714:	0800673d 	.word	0x0800673d
 8006718:	0800673d 	.word	0x0800673d
 800671c:	0800673d 	.word	0x0800673d
 8006720:	080067b3 	.word	0x080067b3
 8006724:	080067c7 	.word	0x080067c7
 8006728:	08006813 	.word	0x08006813
 800672c:	0800673d 	.word	0x0800673d
 8006730:	0800673d 	.word	0x0800673d
 8006734:	080067b3 	.word	0x080067b3
 8006738:	080067c7 	.word	0x080067c7
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006742:	f043 0301 	orr.w	r3, r3, #1
 8006746:	b2da      	uxtb	r2, r3
 8006748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800674e:	68fa      	ldr	r2, [r7, #12]
 8006750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	18d1      	adds	r1, r2, r3
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6a3a      	ldr	r2, [r7, #32]
 800675a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800675c:	f7ff ff78 	bl	8006650 <prvInsertTimerInActiveList>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d06c      	beq.n	8006840 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006768:	6a1b      	ldr	r3, [r3, #32]
 800676a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800676c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800676e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006774:	f003 0304 	and.w	r3, r3, #4
 8006778:	2b00      	cmp	r3, #0
 800677a:	d061      	beq.n	8006840 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800677c:	68fa      	ldr	r2, [r7, #12]
 800677e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006780:	699b      	ldr	r3, [r3, #24]
 8006782:	441a      	add	r2, r3
 8006784:	2300      	movs	r3, #0
 8006786:	9300      	str	r3, [sp, #0]
 8006788:	2300      	movs	r3, #0
 800678a:	2100      	movs	r1, #0
 800678c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800678e:	f7ff fe1d 	bl	80063cc <xTimerGenericCommand>
 8006792:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d152      	bne.n	8006840 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	61bb      	str	r3, [r7, #24]
    }
 80067ac:	bf00      	nop
 80067ae:	bf00      	nop
 80067b0:	e7fd      	b.n	80067ae <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067b8:	f023 0301 	bic.w	r3, r3, #1
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80067c4:	e03d      	b.n	8006842 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067cc:	f043 0301 	orr.w	r3, r3, #1
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067dc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e0:	699b      	ldr	r3, [r3, #24]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	617b      	str	r3, [r7, #20]
    }
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006800:	699a      	ldr	r2, [r3, #24]
 8006802:	6a3b      	ldr	r3, [r7, #32]
 8006804:	18d1      	adds	r1, r2, r3
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	6a3a      	ldr	r2, [r7, #32]
 800680a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800680c:	f7ff ff20 	bl	8006650 <prvInsertTimerInActiveList>
                        break;
 8006810:	e017      	b.n	8006842 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d103      	bne.n	8006828 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8006820:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006822:	f000 fc1f 	bl	8007064 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8006826:	e00c      	b.n	8006842 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800682e:	f023 0301 	bic.w	r3, r3, #1
 8006832:	b2da      	uxtb	r2, r3
 8006834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006836:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800683a:	e002      	b.n	8006842 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800683c:	bf00      	nop
 800683e:	e000      	b.n	8006842 <prvProcessReceivedCommands+0x16e>
                        break;
 8006840:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006842:	4b08      	ldr	r3, [pc, #32]	@ (8006864 <prvProcessReceivedCommands+0x190>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f107 0108 	add.w	r1, r7, #8
 800684a:	2200      	movs	r2, #0
 800684c:	4618      	mov	r0, r3
 800684e:	f7fe f93d 	bl	8004acc <xQueueReceive>
 8006852:	4603      	mov	r3, r0
 8006854:	2b00      	cmp	r3, #0
 8006856:	f47f af41 	bne.w	80066dc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	3728      	adds	r7, #40	@ 0x28
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}
 8006864:	2000028c 	.word	0x2000028c

08006868 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800686e:	e049      	b.n	8006904 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006870:	4b2e      	ldr	r3, [pc, #184]	@ (800692c <prvSwitchTimerLists+0xc4>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800687a:	4b2c      	ldr	r3, [pc, #176]	@ (800692c <prvSwitchTimerLists+0xc4>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	3304      	adds	r3, #4
 8006888:	4618      	mov	r0, r3
 800688a:	f7fd fe55 	bl	8004538 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	68f8      	ldr	r0, [r7, #12]
 8006894:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800689c:	f003 0304 	and.w	r3, r3, #4
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d02f      	beq.n	8006904 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	699b      	ldr	r3, [r3, #24]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4413      	add	r3, r2
 80068ac:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80068ae:	68ba      	ldr	r2, [r7, #8]
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d90e      	bls.n	80068d4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80068c2:	4b1a      	ldr	r3, [pc, #104]	@ (800692c <prvSwitchTimerLists+0xc4>)
 80068c4:	681a      	ldr	r2, [r3, #0]
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	4610      	mov	r0, r2
 80068ce:	f7fd fdfa 	bl	80044c6 <vListInsert>
 80068d2:	e017      	b.n	8006904 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80068d4:	2300      	movs	r3, #0
 80068d6:	9300      	str	r3, [sp, #0]
 80068d8:	2300      	movs	r3, #0
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	2100      	movs	r1, #0
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f7ff fd74 	bl	80063cc <xTimerGenericCommand>
 80068e4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10b      	bne.n	8006904 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80068ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068f0:	f383 8811 	msr	BASEPRI, r3
 80068f4:	f3bf 8f6f 	isb	sy
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	603b      	str	r3, [r7, #0]
    }
 80068fe:	bf00      	nop
 8006900:	bf00      	nop
 8006902:	e7fd      	b.n	8006900 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006904:	4b09      	ldr	r3, [pc, #36]	@ (800692c <prvSwitchTimerLists+0xc4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1b0      	bne.n	8006870 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800690e:	4b07      	ldr	r3, [pc, #28]	@ (800692c <prvSwitchTimerLists+0xc4>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8006914:	4b06      	ldr	r3, [pc, #24]	@ (8006930 <prvSwitchTimerLists+0xc8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a04      	ldr	r2, [pc, #16]	@ (800692c <prvSwitchTimerLists+0xc4>)
 800691a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800691c:	4a04      	ldr	r2, [pc, #16]	@ (8006930 <prvSwitchTimerLists+0xc8>)
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	6013      	str	r3, [r2, #0]
    }
 8006922:	bf00      	nop
 8006924:	3718      	adds	r7, #24
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20000284 	.word	0x20000284
 8006930:	20000288 	.word	0x20000288

08006934 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8006934:	b580      	push	{r7, lr}
 8006936:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8006938:	f000 f988 	bl	8006c4c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800693c:	4b12      	ldr	r3, [pc, #72]	@ (8006988 <prvCheckForValidListAndQueue+0x54>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d11d      	bne.n	8006980 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006944:	4811      	ldr	r0, [pc, #68]	@ (800698c <prvCheckForValidListAndQueue+0x58>)
 8006946:	f7fd fd6d 	bl	8004424 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800694a:	4811      	ldr	r0, [pc, #68]	@ (8006990 <prvCheckForValidListAndQueue+0x5c>)
 800694c:	f7fd fd6a 	bl	8004424 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006950:	4b10      	ldr	r3, [pc, #64]	@ (8006994 <prvCheckForValidListAndQueue+0x60>)
 8006952:	4a0e      	ldr	r2, [pc, #56]	@ (800698c <prvCheckForValidListAndQueue+0x58>)
 8006954:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8006956:	4b10      	ldr	r3, [pc, #64]	@ (8006998 <prvCheckForValidListAndQueue+0x64>)
 8006958:	4a0d      	ldr	r2, [pc, #52]	@ (8006990 <prvCheckForValidListAndQueue+0x5c>)
 800695a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800695c:	2200      	movs	r2, #0
 800695e:	210c      	movs	r1, #12
 8006960:	200a      	movs	r0, #10
 8006962:	f7fd fe7d 	bl	8004660 <xQueueGenericCreate>
 8006966:	4603      	mov	r3, r0
 8006968:	4a07      	ldr	r2, [pc, #28]	@ (8006988 <prvCheckForValidListAndQueue+0x54>)
 800696a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800696c:	4b06      	ldr	r3, [pc, #24]	@ (8006988 <prvCheckForValidListAndQueue+0x54>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006974:	4b04      	ldr	r3, [pc, #16]	@ (8006988 <prvCheckForValidListAndQueue+0x54>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4908      	ldr	r1, [pc, #32]	@ (800699c <prvCheckForValidListAndQueue+0x68>)
 800697a:	4618      	mov	r0, r3
 800697c:	f7fe fb70 	bl	8005060 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006980:	f000 f996 	bl	8006cb0 <vPortExitCritical>
    }
 8006984:	bf00      	nop
 8006986:	bd80      	pop	{r7, pc}
 8006988:	2000028c 	.word	0x2000028c
 800698c:	2000025c 	.word	0x2000025c
 8006990:	20000270 	.word	0x20000270
 8006994:	20000284 	.word	0x20000284
 8006998:	20000288 	.word	0x20000288
 800699c:	080076d0 	.word	0x080076d0

080069a0 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10b      	bne.n	80069ca <pvTimerGetTimerID+0x2a>
        __asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	60fb      	str	r3, [r7, #12]
    }
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	e7fd      	b.n	80069c6 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 80069ca:	f000 f93f 	bl	8006c4c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80069d4:	f000 f96c 	bl	8006cb0 <vPortExitCritical>

        return pvReturn;
 80069d8:	693b      	ldr	r3, [r7, #16]
    }
 80069da:	4618      	mov	r0, r3
 80069dc:	3718      	adds	r7, #24
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
	...

080069e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b085      	sub	sp, #20
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	60f8      	str	r0, [r7, #12]
 80069ec:	60b9      	str	r1, [r7, #8]
 80069ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	3b04      	subs	r3, #4
 80069f4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	3b04      	subs	r3, #4
 8006a02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	f023 0201 	bic.w	r2, r3, #1
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	3b04      	subs	r3, #4
 8006a12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8006a14:	4a0c      	ldr	r2, [pc, #48]	@ (8006a48 <pxPortInitialiseStack+0x64>)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	3b14      	subs	r3, #20
 8006a1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3b04      	subs	r3, #4
 8006a2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f06f 0202 	mvn.w	r2, #2
 8006a32:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	3b20      	subs	r3, #32
 8006a38:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	3714      	adds	r7, #20
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	08006a4d 	.word	0x08006a4d

08006a4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b085      	sub	sp, #20
 8006a50:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006a52:	2300      	movs	r3, #0
 8006a54:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006a56:	4b13      	ldr	r3, [pc, #76]	@ (8006aa4 <prvTaskExitError+0x58>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a5e:	d00b      	beq.n	8006a78 <prvTaskExitError+0x2c>
        __asm volatile
 8006a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	60fb      	str	r3, [r7, #12]
    }
 8006a72:	bf00      	nop
 8006a74:	bf00      	nop
 8006a76:	e7fd      	b.n	8006a74 <prvTaskExitError+0x28>
        __asm volatile
 8006a78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a7c:	f383 8811 	msr	BASEPRI, r3
 8006a80:	f3bf 8f6f 	isb	sy
 8006a84:	f3bf 8f4f 	dsb	sy
 8006a88:	60bb      	str	r3, [r7, #8]
    }
 8006a8a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006a8c:	bf00      	nop
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0fc      	beq.n	8006a8e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop
 8006aa4:	20000034 	.word	0x20000034
	...

08006ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006ab0:	4b07      	ldr	r3, [pc, #28]	@ (8006ad0 <pxCurrentTCBConst2>)
 8006ab2:	6819      	ldr	r1, [r3, #0]
 8006ab4:	6808      	ldr	r0, [r1, #0]
 8006ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aba:	f380 8809 	msr	PSP, r0
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f380 8811 	msr	BASEPRI, r0
 8006aca:	4770      	bx	lr
 8006acc:	f3af 8000 	nop.w

08006ad0 <pxCurrentTCBConst2>:
 8006ad0:	20000158 	.word	0x20000158
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006ad4:	bf00      	nop
 8006ad6:	bf00      	nop

08006ad8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006ad8:	4808      	ldr	r0, [pc, #32]	@ (8006afc <prvPortStartFirstTask+0x24>)
 8006ada:	6800      	ldr	r0, [r0, #0]
 8006adc:	6800      	ldr	r0, [r0, #0]
 8006ade:	f380 8808 	msr	MSP, r0
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f380 8814 	msr	CONTROL, r0
 8006aea:	b662      	cpsie	i
 8006aec:	b661      	cpsie	f
 8006aee:	f3bf 8f4f 	dsb	sy
 8006af2:	f3bf 8f6f 	isb	sy
 8006af6:	df00      	svc	0
 8006af8:	bf00      	nop
 8006afa:	0000      	.short	0x0000
 8006afc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006b00:	bf00      	nop
 8006b02:	bf00      	nop

08006b04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b086      	sub	sp, #24
 8006b08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b0a:	4b47      	ldr	r3, [pc, #284]	@ (8006c28 <xPortStartScheduler+0x124>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a47      	ldr	r2, [pc, #284]	@ (8006c2c <xPortStartScheduler+0x128>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d10b      	bne.n	8006b2c <xPortStartScheduler+0x28>
        __asm volatile
 8006b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b18:	f383 8811 	msr	BASEPRI, r3
 8006b1c:	f3bf 8f6f 	isb	sy
 8006b20:	f3bf 8f4f 	dsb	sy
 8006b24:	613b      	str	r3, [r7, #16]
    }
 8006b26:	bf00      	nop
 8006b28:	bf00      	nop
 8006b2a:	e7fd      	b.n	8006b28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b2c:	4b3e      	ldr	r3, [pc, #248]	@ (8006c28 <xPortStartScheduler+0x124>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a3f      	ldr	r2, [pc, #252]	@ (8006c30 <xPortStartScheduler+0x12c>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d10b      	bne.n	8006b4e <xPortStartScheduler+0x4a>
        __asm volatile
 8006b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b3a:	f383 8811 	msr	BASEPRI, r3
 8006b3e:	f3bf 8f6f 	isb	sy
 8006b42:	f3bf 8f4f 	dsb	sy
 8006b46:	60fb      	str	r3, [r7, #12]
    }
 8006b48:	bf00      	nop
 8006b4a:	bf00      	nop
 8006b4c:	e7fd      	b.n	8006b4a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b4e:	4b39      	ldr	r3, [pc, #228]	@ (8006c34 <xPortStartScheduler+0x130>)
 8006b50:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	22ff      	movs	r2, #255	@ 0xff
 8006b5e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	b2db      	uxtb	r3, r3
 8006b66:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b68:	78fb      	ldrb	r3, [r7, #3]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b70:	b2da      	uxtb	r2, r3
 8006b72:	4b31      	ldr	r3, [pc, #196]	@ (8006c38 <xPortStartScheduler+0x134>)
 8006b74:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b76:	4b31      	ldr	r3, [pc, #196]	@ (8006c3c <xPortStartScheduler+0x138>)
 8006b78:	2207      	movs	r2, #7
 8006b7a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b7c:	e009      	b.n	8006b92 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8006b7e:	4b2f      	ldr	r3, [pc, #188]	@ (8006c3c <xPortStartScheduler+0x138>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	4a2d      	ldr	r2, [pc, #180]	@ (8006c3c <xPortStartScheduler+0x138>)
 8006b86:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b88:	78fb      	ldrb	r3, [r7, #3]
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	005b      	lsls	r3, r3, #1
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b92:	78fb      	ldrb	r3, [r7, #3]
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b9a:	2b80      	cmp	r3, #128	@ 0x80
 8006b9c:	d0ef      	beq.n	8006b7e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b9e:	4b27      	ldr	r3, [pc, #156]	@ (8006c3c <xPortStartScheduler+0x138>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f1c3 0307 	rsb	r3, r3, #7
 8006ba6:	2b04      	cmp	r3, #4
 8006ba8:	d00b      	beq.n	8006bc2 <xPortStartScheduler+0xbe>
        __asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	60bb      	str	r3, [r7, #8]
    }
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	e7fd      	b.n	8006bbe <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8006c3c <xPortStartScheduler+0x138>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	021b      	lsls	r3, r3, #8
 8006bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8006c3c <xPortStartScheduler+0x138>)
 8006bca:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8006c3c <xPortStartScheduler+0x138>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006bd4:	4a19      	ldr	r2, [pc, #100]	@ (8006c3c <xPortStartScheduler+0x138>)
 8006bd6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	b2da      	uxtb	r2, r3
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006be0:	4b17      	ldr	r3, [pc, #92]	@ (8006c40 <xPortStartScheduler+0x13c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a16      	ldr	r2, [pc, #88]	@ (8006c40 <xPortStartScheduler+0x13c>)
 8006be6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006bea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006bec:	4b14      	ldr	r3, [pc, #80]	@ (8006c40 <xPortStartScheduler+0x13c>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a13      	ldr	r2, [pc, #76]	@ (8006c40 <xPortStartScheduler+0x13c>)
 8006bf2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006bf6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006bf8:	f000 f8e0 	bl	8006dbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006bfc:	4b11      	ldr	r3, [pc, #68]	@ (8006c44 <xPortStartScheduler+0x140>)
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006c02:	f000 f8ff 	bl	8006e04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c06:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <xPortStartScheduler+0x144>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a0f      	ldr	r2, [pc, #60]	@ (8006c48 <xPortStartScheduler+0x144>)
 8006c0c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006c10:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006c12:	f7ff ff61 	bl	8006ad8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006c16:	f7fe fd8f 	bl	8005738 <vTaskSwitchContext>
    prvTaskExitError();
 8006c1a:	f7ff ff17 	bl	8006a4c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006c1e:	2300      	movs	r3, #0
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3718      	adds	r7, #24
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	e000ed00 	.word	0xe000ed00
 8006c2c:	410fc271 	.word	0x410fc271
 8006c30:	410fc270 	.word	0x410fc270
 8006c34:	e000e400 	.word	0xe000e400
 8006c38:	20000298 	.word	0x20000298
 8006c3c:	2000029c 	.word	0x2000029c
 8006c40:	e000ed20 	.word	0xe000ed20
 8006c44:	20000034 	.word	0x20000034
 8006c48:	e000ef34 	.word	0xe000ef34

08006c4c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
        __asm volatile
 8006c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c56:	f383 8811 	msr	BASEPRI, r3
 8006c5a:	f3bf 8f6f 	isb	sy
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	607b      	str	r3, [r7, #4]
    }
 8006c64:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006c66:	4b10      	ldr	r3, [pc, #64]	@ (8006ca8 <vPortEnterCritical+0x5c>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8006ca8 <vPortEnterCritical+0x5c>)
 8006c6e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006c70:	4b0d      	ldr	r3, [pc, #52]	@ (8006ca8 <vPortEnterCritical+0x5c>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d110      	bne.n	8006c9a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c78:	4b0c      	ldr	r3, [pc, #48]	@ (8006cac <vPortEnterCritical+0x60>)
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	b2db      	uxtb	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00b      	beq.n	8006c9a <vPortEnterCritical+0x4e>
        __asm volatile
 8006c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c86:	f383 8811 	msr	BASEPRI, r3
 8006c8a:	f3bf 8f6f 	isb	sy
 8006c8e:	f3bf 8f4f 	dsb	sy
 8006c92:	603b      	str	r3, [r7, #0]
    }
 8006c94:	bf00      	nop
 8006c96:	bf00      	nop
 8006c98:	e7fd      	b.n	8006c96 <vPortEnterCritical+0x4a>
    }
}
 8006c9a:	bf00      	nop
 8006c9c:	370c      	adds	r7, #12
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
 8006ca6:	bf00      	nop
 8006ca8:	20000034 	.word	0x20000034
 8006cac:	e000ed04 	.word	0xe000ed04

08006cb0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006cb6:	4b12      	ldr	r3, [pc, #72]	@ (8006d00 <vPortExitCritical+0x50>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10b      	bne.n	8006cd6 <vPortExitCritical+0x26>
        __asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	607b      	str	r3, [r7, #4]
    }
 8006cd0:	bf00      	nop
 8006cd2:	bf00      	nop
 8006cd4:	e7fd      	b.n	8006cd2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <vPortExitCritical+0x50>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	4a08      	ldr	r2, [pc, #32]	@ (8006d00 <vPortExitCritical+0x50>)
 8006cde:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006ce0:	4b07      	ldr	r3, [pc, #28]	@ (8006d00 <vPortExitCritical+0x50>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d105      	bne.n	8006cf4 <vPortExitCritical+0x44>
 8006ce8:	2300      	movs	r3, #0
 8006cea:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	f383 8811 	msr	BASEPRI, r3
    }
 8006cf2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr
 8006d00:	20000034 	.word	0x20000034
	...

08006d10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006d10:	f3ef 8009 	mrs	r0, PSP
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	4b15      	ldr	r3, [pc, #84]	@ (8006d70 <pxCurrentTCBConst>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	f01e 0f10 	tst.w	lr, #16
 8006d20:	bf08      	it	eq
 8006d22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d2a:	6010      	str	r0, [r2, #0]
 8006d2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006d34:	f380 8811 	msr	BASEPRI, r0
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	f3bf 8f6f 	isb	sy
 8006d40:	f7fe fcfa 	bl	8005738 <vTaskSwitchContext>
 8006d44:	f04f 0000 	mov.w	r0, #0
 8006d48:	f380 8811 	msr	BASEPRI, r0
 8006d4c:	bc09      	pop	{r0, r3}
 8006d4e:	6819      	ldr	r1, [r3, #0]
 8006d50:	6808      	ldr	r0, [r1, #0]
 8006d52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d56:	f01e 0f10 	tst.w	lr, #16
 8006d5a:	bf08      	it	eq
 8006d5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d60:	f380 8809 	msr	PSP, r0
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	f3af 8000 	nop.w

08006d70 <pxCurrentTCBConst>:
 8006d70:	20000158 	.word	0x20000158
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop

08006d78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
        __asm volatile
 8006d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d82:	f383 8811 	msr	BASEPRI, r3
 8006d86:	f3bf 8f6f 	isb	sy
 8006d8a:	f3bf 8f4f 	dsb	sy
 8006d8e:	607b      	str	r3, [r7, #4]
    }
 8006d90:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006d92:	f7fe fc17 	bl	80055c4 <xTaskIncrementTick>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d003      	beq.n	8006da4 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d9c:	4b06      	ldr	r3, [pc, #24]	@ (8006db8 <SysTick_Handler+0x40>)
 8006d9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	2300      	movs	r3, #0
 8006da6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	f383 8811 	msr	BASEPRI, r3
    }
 8006dae:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	e000ed04 	.word	0xe000ed04

08006dbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006dc0:	4b0b      	ldr	r3, [pc, #44]	@ (8006df0 <vPortSetupTimerInterrupt+0x34>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006df4 <vPortSetupTimerInterrupt+0x38>)
 8006dc8:	2200      	movs	r2, #0
 8006dca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006dcc:	4b0a      	ldr	r3, [pc, #40]	@ (8006df8 <vPortSetupTimerInterrupt+0x3c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8006dfc <vPortSetupTimerInterrupt+0x40>)
 8006dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006dd6:	099b      	lsrs	r3, r3, #6
 8006dd8:	4a09      	ldr	r2, [pc, #36]	@ (8006e00 <vPortSetupTimerInterrupt+0x44>)
 8006dda:	3b01      	subs	r3, #1
 8006ddc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dde:	4b04      	ldr	r3, [pc, #16]	@ (8006df0 <vPortSetupTimerInterrupt+0x34>)
 8006de0:	2207      	movs	r2, #7
 8006de2:	601a      	str	r2, [r3, #0]
}
 8006de4:	bf00      	nop
 8006de6:	46bd      	mov	sp, r7
 8006de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dec:	4770      	bx	lr
 8006dee:	bf00      	nop
 8006df0:	e000e010 	.word	0xe000e010
 8006df4:	e000e018 	.word	0xe000e018
 8006df8:	20000024 	.word	0x20000024
 8006dfc:	10624dd3 	.word	0x10624dd3
 8006e00:	e000e014 	.word	0xe000e014

08006e04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006e04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006e14 <vPortEnableVFP+0x10>
 8006e08:	6801      	ldr	r1, [r0, #0]
 8006e0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006e0e:	6001      	str	r1, [r0, #0]
 8006e10:	4770      	bx	lr
 8006e12:	0000      	.short	0x0000
 8006e14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006e18:	bf00      	nop
 8006e1a:	bf00      	nop

08006e1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006e22:	f3ef 8305 	mrs	r3, IPSR
 8006e26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b0f      	cmp	r3, #15
 8006e2c:	d915      	bls.n	8006e5a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e2e:	4a18      	ldr	r2, [pc, #96]	@ (8006e90 <vPortValidateInterruptPriority+0x74>)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4413      	add	r3, r2
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e38:	4b16      	ldr	r3, [pc, #88]	@ (8006e94 <vPortValidateInterruptPriority+0x78>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	7afa      	ldrb	r2, [r7, #11]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d20b      	bcs.n	8006e5a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8006e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e46:	f383 8811 	msr	BASEPRI, r3
 8006e4a:	f3bf 8f6f 	isb	sy
 8006e4e:	f3bf 8f4f 	dsb	sy
 8006e52:	607b      	str	r3, [r7, #4]
    }
 8006e54:	bf00      	nop
 8006e56:	bf00      	nop
 8006e58:	e7fd      	b.n	8006e56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e5a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e98 <vPortValidateInterruptPriority+0x7c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e62:	4b0e      	ldr	r3, [pc, #56]	@ (8006e9c <vPortValidateInterruptPriority+0x80>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d90b      	bls.n	8006e82 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8006e6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e6e:	f383 8811 	msr	BASEPRI, r3
 8006e72:	f3bf 8f6f 	isb	sy
 8006e76:	f3bf 8f4f 	dsb	sy
 8006e7a:	603b      	str	r3, [r7, #0]
    }
 8006e7c:	bf00      	nop
 8006e7e:	bf00      	nop
 8006e80:	e7fd      	b.n	8006e7e <vPortValidateInterruptPriority+0x62>
    }
 8006e82:	bf00      	nop
 8006e84:	3714      	adds	r7, #20
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr
 8006e8e:	bf00      	nop
 8006e90:	e000e3f0 	.word	0xe000e3f0
 8006e94:	20000298 	.word	0x20000298
 8006e98:	e000ed0c 	.word	0xe000ed0c
 8006e9c:	2000029c 	.word	0x2000029c

08006ea0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08a      	sub	sp, #40	@ 0x28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006eac:	f7fe face 	bl	800544c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006eb0:	4b66      	ldr	r3, [pc, #408]	@ (800704c <pvPortMalloc+0x1ac>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d101      	bne.n	8006ebc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006eb8:	f000 f938 	bl	800712c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ebc:	4b64      	ldr	r3, [pc, #400]	@ (8007050 <pvPortMalloc+0x1b0>)
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4013      	ands	r3, r2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f040 80a9 	bne.w	800701c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d02e      	beq.n	8006f2e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006ed0:	2208      	movs	r2, #8
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d228      	bcs.n	8006f2e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8006edc:	2208      	movs	r2, #8
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	4413      	add	r3, r2
 8006ee2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f003 0307 	and.w	r3, r3, #7
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d022      	beq.n	8006f34 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f023 0307 	bic.w	r3, r3, #7
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d215      	bcs.n	8006f28 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f023 0307 	bic.w	r3, r3, #7
 8006f02:	3308      	adds	r3, #8
 8006f04:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f003 0307 	and.w	r3, r3, #7
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d011      	beq.n	8006f34 <pvPortMalloc+0x94>
        __asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	617b      	str	r3, [r7, #20]
    }
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f2c:	e002      	b.n	8006f34 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	e000      	b.n	8006f36 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006f34:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d06f      	beq.n	800701c <pvPortMalloc+0x17c>
 8006f3c:	4b45      	ldr	r3, [pc, #276]	@ (8007054 <pvPortMalloc+0x1b4>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d86a      	bhi.n	800701c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006f46:	4b44      	ldr	r3, [pc, #272]	@ (8007058 <pvPortMalloc+0x1b8>)
 8006f48:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006f4a:	4b43      	ldr	r3, [pc, #268]	@ (8007058 <pvPortMalloc+0x1b8>)
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f50:	e004      	b.n	8006f5c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	687a      	ldr	r2, [r7, #4]
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d903      	bls.n	8006f6e <pvPortMalloc+0xce>
 8006f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1f1      	bne.n	8006f52 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006f6e:	4b37      	ldr	r3, [pc, #220]	@ (800704c <pvPortMalloc+0x1ac>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d051      	beq.n	800701c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	2208      	movs	r2, #8
 8006f7e:	4413      	add	r3, r2
 8006f80:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	6a3b      	ldr	r3, [r7, #32]
 8006f88:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	685a      	ldr	r2, [r3, #4]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	1ad2      	subs	r2, r2, r3
 8006f92:	2308      	movs	r3, #8
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d920      	bls.n	8006fdc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fa2:	69bb      	ldr	r3, [r7, #24]
 8006fa4:	f003 0307 	and.w	r3, r3, #7
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00b      	beq.n	8006fc4 <pvPortMalloc+0x124>
        __asm volatile
 8006fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb0:	f383 8811 	msr	BASEPRI, r3
 8006fb4:	f3bf 8f6f 	isb	sy
 8006fb8:	f3bf 8f4f 	dsb	sy
 8006fbc:	613b      	str	r3, [r7, #16]
    }
 8006fbe:	bf00      	nop
 8006fc0:	bf00      	nop
 8006fc2:	e7fd      	b.n	8006fc0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	1ad2      	subs	r2, r2, r3
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fd6:	69b8      	ldr	r0, [r7, #24]
 8006fd8:	f000 f90a 	bl	80071f0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8007054 <pvPortMalloc+0x1b4>)
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	4a1b      	ldr	r2, [pc, #108]	@ (8007054 <pvPortMalloc+0x1b4>)
 8006fe8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fea:	4b1a      	ldr	r3, [pc, #104]	@ (8007054 <pvPortMalloc+0x1b4>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	4b1b      	ldr	r3, [pc, #108]	@ (800705c <pvPortMalloc+0x1bc>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d203      	bcs.n	8006ffe <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006ff6:	4b17      	ldr	r3, [pc, #92]	@ (8007054 <pvPortMalloc+0x1b4>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a18      	ldr	r2, [pc, #96]	@ (800705c <pvPortMalloc+0x1bc>)
 8006ffc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007000:	685a      	ldr	r2, [r3, #4]
 8007002:	4b13      	ldr	r3, [pc, #76]	@ (8007050 <pvPortMalloc+0x1b0>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	431a      	orrs	r2, r3
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	2200      	movs	r2, #0
 8007010:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007012:	4b13      	ldr	r3, [pc, #76]	@ (8007060 <pvPortMalloc+0x1c0>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	3301      	adds	r3, #1
 8007018:	4a11      	ldr	r2, [pc, #68]	@ (8007060 <pvPortMalloc+0x1c0>)
 800701a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800701c:	f7fe fa24 	bl	8005468 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <pvPortMalloc+0x1a2>
        __asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	60fb      	str	r3, [r7, #12]
    }
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <pvPortMalloc+0x19e>
    return pvReturn;
 8007042:	69fb      	ldr	r3, [r7, #28]
}
 8007044:	4618      	mov	r0, r3
 8007046:	3728      	adds	r7, #40	@ 0x28
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	200192a8 	.word	0x200192a8
 8007050:	200192bc 	.word	0x200192bc
 8007054:	200192ac 	.word	0x200192ac
 8007058:	200192a0 	.word	0x200192a0
 800705c:	200192b0 	.word	0x200192b0
 8007060:	200192b4 	.word	0x200192b4

08007064 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d04f      	beq.n	8007116 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007076:	2308      	movs	r3, #8
 8007078:	425b      	negs	r3, r3
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4413      	add	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	685a      	ldr	r2, [r3, #4]
 8007088:	4b25      	ldr	r3, [pc, #148]	@ (8007120 <vPortFree+0xbc>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4013      	ands	r3, r2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10b      	bne.n	80070aa <vPortFree+0x46>
        __asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	60fb      	str	r3, [r7, #12]
    }
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop
 80070a8:	e7fd      	b.n	80070a6 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00b      	beq.n	80070ca <vPortFree+0x66>
        __asm volatile
 80070b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b6:	f383 8811 	msr	BASEPRI, r3
 80070ba:	f3bf 8f6f 	isb	sy
 80070be:	f3bf 8f4f 	dsb	sy
 80070c2:	60bb      	str	r3, [r7, #8]
    }
 80070c4:	bf00      	nop
 80070c6:	bf00      	nop
 80070c8:	e7fd      	b.n	80070c6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	685a      	ldr	r2, [r3, #4]
 80070ce:	4b14      	ldr	r3, [pc, #80]	@ (8007120 <vPortFree+0xbc>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4013      	ands	r3, r2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01e      	beq.n	8007116 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d11a      	bne.n	8007116 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	685a      	ldr	r2, [r3, #4]
 80070e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007120 <vPortFree+0xbc>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	43db      	mvns	r3, r3
 80070ea:	401a      	ands	r2, r3
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80070f0:	f7fe f9ac 	bl	800544c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	685a      	ldr	r2, [r3, #4]
 80070f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007124 <vPortFree+0xc0>)
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4413      	add	r3, r2
 80070fe:	4a09      	ldr	r2, [pc, #36]	@ (8007124 <vPortFree+0xc0>)
 8007100:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007102:	6938      	ldr	r0, [r7, #16]
 8007104:	f000 f874 	bl	80071f0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007108:	4b07      	ldr	r3, [pc, #28]	@ (8007128 <vPortFree+0xc4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3301      	adds	r3, #1
 800710e:	4a06      	ldr	r2, [pc, #24]	@ (8007128 <vPortFree+0xc4>)
 8007110:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007112:	f7fe f9a9 	bl	8005468 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007116:	bf00      	nop
 8007118:	3718      	adds	r7, #24
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	200192bc 	.word	0x200192bc
 8007124:	200192ac 	.word	0x200192ac
 8007128:	200192b8 	.word	0x200192b8

0800712c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007132:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8007136:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007138:	4b27      	ldr	r3, [pc, #156]	@ (80071d8 <prvHeapInit+0xac>)
 800713a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00c      	beq.n	8007160 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3307      	adds	r3, #7
 800714a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f023 0307 	bic.w	r3, r3, #7
 8007152:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	4a1f      	ldr	r2, [pc, #124]	@ (80071d8 <prvHeapInit+0xac>)
 800715c:	4413      	add	r3, r2
 800715e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007164:	4a1d      	ldr	r2, [pc, #116]	@ (80071dc <prvHeapInit+0xb0>)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800716a:	4b1c      	ldr	r3, [pc, #112]	@ (80071dc <prvHeapInit+0xb0>)
 800716c:	2200      	movs	r2, #0
 800716e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	4413      	add	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007178:	2208      	movs	r2, #8
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	1a9b      	subs	r3, r3, r2
 800717e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0307 	bic.w	r3, r3, #7
 8007186:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4a15      	ldr	r2, [pc, #84]	@ (80071e0 <prvHeapInit+0xb4>)
 800718c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800718e:	4b14      	ldr	r3, [pc, #80]	@ (80071e0 <prvHeapInit+0xb4>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	2200      	movs	r2, #0
 8007194:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007196:	4b12      	ldr	r3, [pc, #72]	@ (80071e0 <prvHeapInit+0xb4>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68fa      	ldr	r2, [r7, #12]
 80071a6:	1ad2      	subs	r2, r2, r3
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80071ac:	4b0c      	ldr	r3, [pc, #48]	@ (80071e0 <prvHeapInit+0xb4>)
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	4a0a      	ldr	r2, [pc, #40]	@ (80071e4 <prvHeapInit+0xb8>)
 80071ba:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	4a09      	ldr	r2, [pc, #36]	@ (80071e8 <prvHeapInit+0xbc>)
 80071c2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80071c4:	4b09      	ldr	r3, [pc, #36]	@ (80071ec <prvHeapInit+0xc0>)
 80071c6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80071ca:	601a      	str	r2, [r3, #0]
}
 80071cc:	bf00      	nop
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr
 80071d8:	200002a0 	.word	0x200002a0
 80071dc:	200192a0 	.word	0x200192a0
 80071e0:	200192a8 	.word	0x200192a8
 80071e4:	200192b0 	.word	0x200192b0
 80071e8:	200192ac 	.word	0x200192ac
 80071ec:	200192bc 	.word	0x200192bc

080071f0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071f8:	4b28      	ldr	r3, [pc, #160]	@ (800729c <prvInsertBlockIntoFreeList+0xac>)
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	e002      	b.n	8007204 <prvInsertBlockIntoFreeList+0x14>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60fb      	str	r3, [r7, #12]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	429a      	cmp	r2, r3
 800720c:	d8f7      	bhi.n	80071fe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	685b      	ldr	r3, [r3, #4]
 8007216:	68ba      	ldr	r2, [r7, #8]
 8007218:	4413      	add	r3, r2
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	429a      	cmp	r2, r3
 800721e:	d108      	bne.n	8007232 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	685a      	ldr	r2, [r3, #4]
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	441a      	add	r2, r3
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	441a      	add	r2, r3
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	429a      	cmp	r2, r3
 8007244:	d118      	bne.n	8007278 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	4b15      	ldr	r3, [pc, #84]	@ (80072a0 <prvInsertBlockIntoFreeList+0xb0>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	429a      	cmp	r2, r3
 8007250:	d00d      	beq.n	800726e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	441a      	add	r2, r3
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	601a      	str	r2, [r3, #0]
 800726c:	e008      	b.n	8007280 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800726e:	4b0c      	ldr	r3, [pc, #48]	@ (80072a0 <prvInsertBlockIntoFreeList+0xb0>)
 8007270:	681a      	ldr	r2, [r3, #0]
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	601a      	str	r2, [r3, #0]
 8007276:	e003      	b.n	8007280 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	429a      	cmp	r2, r3
 8007286:	d002      	beq.n	800728e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800728e:	bf00      	nop
 8007290:	3714      	adds	r7, #20
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
 800729a:	bf00      	nop
 800729c:	200192a0 	.word	0x200192a0
 80072a0:	200192a8 	.word	0x200192a8

080072a4 <memset>:
 80072a4:	4402      	add	r2, r0
 80072a6:	4603      	mov	r3, r0
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d100      	bne.n	80072ae <memset+0xa>
 80072ac:	4770      	bx	lr
 80072ae:	f803 1b01 	strb.w	r1, [r3], #1
 80072b2:	e7f9      	b.n	80072a8 <memset+0x4>

080072b4 <__libc_init_array>:
 80072b4:	b570      	push	{r4, r5, r6, lr}
 80072b6:	4d0d      	ldr	r5, [pc, #52]	@ (80072ec <__libc_init_array+0x38>)
 80072b8:	4c0d      	ldr	r4, [pc, #52]	@ (80072f0 <__libc_init_array+0x3c>)
 80072ba:	1b64      	subs	r4, r4, r5
 80072bc:	10a4      	asrs	r4, r4, #2
 80072be:	2600      	movs	r6, #0
 80072c0:	42a6      	cmp	r6, r4
 80072c2:	d109      	bne.n	80072d8 <__libc_init_array+0x24>
 80072c4:	4d0b      	ldr	r5, [pc, #44]	@ (80072f4 <__libc_init_array+0x40>)
 80072c6:	4c0c      	ldr	r4, [pc, #48]	@ (80072f8 <__libc_init_array+0x44>)
 80072c8:	f000 f826 	bl	8007318 <_init>
 80072cc:	1b64      	subs	r4, r4, r5
 80072ce:	10a4      	asrs	r4, r4, #2
 80072d0:	2600      	movs	r6, #0
 80072d2:	42a6      	cmp	r6, r4
 80072d4:	d105      	bne.n	80072e2 <__libc_init_array+0x2e>
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
 80072d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80072dc:	4798      	blx	r3
 80072de:	3601      	adds	r6, #1
 80072e0:	e7ee      	b.n	80072c0 <__libc_init_array+0xc>
 80072e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e6:	4798      	blx	r3
 80072e8:	3601      	adds	r6, #1
 80072ea:	e7f2      	b.n	80072d2 <__libc_init_array+0x1e>
 80072ec:	080077fc 	.word	0x080077fc
 80072f0:	080077fc 	.word	0x080077fc
 80072f4:	080077fc 	.word	0x080077fc
 80072f8:	08007800 	.word	0x08007800

080072fc <memcpy>:
 80072fc:	440a      	add	r2, r1
 80072fe:	4291      	cmp	r1, r2
 8007300:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8007304:	d100      	bne.n	8007308 <memcpy+0xc>
 8007306:	4770      	bx	lr
 8007308:	b510      	push	{r4, lr}
 800730a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800730e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007312:	4291      	cmp	r1, r2
 8007314:	d1f9      	bne.n	800730a <memcpy+0xe>
 8007316:	bd10      	pop	{r4, pc}

08007318 <_init>:
 8007318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731a:	bf00      	nop
 800731c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800731e:	bc08      	pop	{r3}
 8007320:	469e      	mov	lr, r3
 8007322:	4770      	bx	lr

08007324 <_fini>:
 8007324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007326:	bf00      	nop
 8007328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732a:	bc08      	pop	{r3}
 800732c:	469e      	mov	lr, r3
 800732e:	4770      	bx	lr
