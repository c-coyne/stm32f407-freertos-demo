
FreeRTOSDemoProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d74  0800dd9c  0800dd9c  0000ed9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb10  0800eb10  000100d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800eb10  0800eb10  0000fb10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb18  0800eb18  000100d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb18  0800eb18  0000fb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb1c  0800eb1c  0000fb1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d4  20000000  0800eb20  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000100d4  2**0
                  CONTENTS
 10 .bss          0001ac28  200000d4  200000d4  000100d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001acfc  2001acfc  000100d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000100d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fba4  00000000  00000000  00010104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ad7  00000000  00000000  0002fca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b48  00000000  00000000  00034780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001519  00000000  00000000  000362c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027135  00000000  00000000  000377e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002294d  00000000  00000000  0005e916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3fe8  00000000  00000000  00081263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016524b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007838  00000000  00000000  00165290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ae  00000000  00000000  0016cac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d4 	.word	0x200000d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd84 	.word	0x0800dd84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d8 	.word	0x200000d8
 80001cc:	0800dd84 	.word	0x0800dd84

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200195e0 	.word	0x200195e0

08000264 <strcmp>:
 8000264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800026c:	2a01      	cmp	r2, #1
 800026e:	bf28      	it	cs
 8000270:	429a      	cmpcs	r2, r3
 8000272:	d0f7      	beq.n	8000264 <strcmp>
 8000274:	1ad0      	subs	r0, r2, r3
 8000276:	4770      	bx	lr

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	@ 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b30:	f000 b96a 	b.w	8000e08 <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	460c      	mov	r4, r1
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d14e      	bne.n	8000bf6 <__udivmoddi4+0xaa>
 8000b58:	4694      	mov	ip, r2
 8000b5a:	458c      	cmp	ip, r1
 8000b5c:	4686      	mov	lr, r0
 8000b5e:	fab2 f282 	clz	r2, r2
 8000b62:	d962      	bls.n	8000c2a <__udivmoddi4+0xde>
 8000b64:	b14a      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b66:	f1c2 0320 	rsb	r3, r2, #32
 8000b6a:	4091      	lsls	r1, r2
 8000b6c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b74:	4319      	orrs	r1, r3
 8000b76:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b7a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b7e:	fa1f f68c 	uxth.w	r6, ip
 8000b82:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b86:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b8a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b92:	fb04 f106 	mul.w	r1, r4, r6
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x64>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000ba2:	f080 8112 	bcs.w	8000dca <__udivmoddi4+0x27e>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 810f 	bls.w	8000dca <__udivmoddi4+0x27e>
 8000bac:	3c02      	subs	r4, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a59      	subs	r1, r3, r1
 8000bb2:	fa1f f38e 	uxth.w	r3, lr
 8000bb6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bba:	fb07 1110 	mls	r1, r7, r0, r1
 8000bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc2:	fb00 f606 	mul.w	r6, r0, r6
 8000bc6:	429e      	cmp	r6, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x94>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bd2:	f080 80fc 	bcs.w	8000dce <__udivmoddi4+0x282>
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	f240 80f9 	bls.w	8000dce <__udivmoddi4+0x282>
 8000bdc:	4463      	add	r3, ip
 8000bde:	3802      	subs	r0, #2
 8000be0:	1b9b      	subs	r3, r3, r6
 8000be2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000be6:	2100      	movs	r1, #0
 8000be8:	b11d      	cbz	r5, 8000bf2 <__udivmoddi4+0xa6>
 8000bea:	40d3      	lsrs	r3, r2
 8000bec:	2200      	movs	r2, #0
 8000bee:	e9c5 3200 	strd	r3, r2, [r5]
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d905      	bls.n	8000c06 <__udivmoddi4+0xba>
 8000bfa:	b10d      	cbz	r5, 8000c00 <__udivmoddi4+0xb4>
 8000bfc:	e9c5 0100 	strd	r0, r1, [r5]
 8000c00:	2100      	movs	r1, #0
 8000c02:	4608      	mov	r0, r1
 8000c04:	e7f5      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000c06:	fab3 f183 	clz	r1, r3
 8000c0a:	2900      	cmp	r1, #0
 8000c0c:	d146      	bne.n	8000c9c <__udivmoddi4+0x150>
 8000c0e:	42a3      	cmp	r3, r4
 8000c10:	d302      	bcc.n	8000c18 <__udivmoddi4+0xcc>
 8000c12:	4290      	cmp	r0, r2
 8000c14:	f0c0 80f0 	bcc.w	8000df8 <__udivmoddi4+0x2ac>
 8000c18:	1a86      	subs	r6, r0, r2
 8000c1a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c1e:	2001      	movs	r0, #1
 8000c20:	2d00      	cmp	r5, #0
 8000c22:	d0e6      	beq.n	8000bf2 <__udivmoddi4+0xa6>
 8000c24:	e9c5 6300 	strd	r6, r3, [r5]
 8000c28:	e7e3      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000c2a:	2a00      	cmp	r2, #0
 8000c2c:	f040 8090 	bne.w	8000d50 <__udivmoddi4+0x204>
 8000c30:	eba1 040c 	sub.w	r4, r1, ip
 8000c34:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c38:	fa1f f78c 	uxth.w	r7, ip
 8000c3c:	2101      	movs	r1, #1
 8000c3e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c42:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c46:	fb08 4416 	mls	r4, r8, r6, r4
 8000c4a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c4e:	fb07 f006 	mul.w	r0, r7, r6
 8000c52:	4298      	cmp	r0, r3
 8000c54:	d908      	bls.n	8000c68 <__udivmoddi4+0x11c>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c5e:	d202      	bcs.n	8000c66 <__udivmoddi4+0x11a>
 8000c60:	4298      	cmp	r0, r3
 8000c62:	f200 80cd 	bhi.w	8000e00 <__udivmoddi4+0x2b4>
 8000c66:	4626      	mov	r6, r4
 8000c68:	1a1c      	subs	r4, r3, r0
 8000c6a:	fa1f f38e 	uxth.w	r3, lr
 8000c6e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c72:	fb08 4410 	mls	r4, r8, r0, r4
 8000c76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7a:	fb00 f707 	mul.w	r7, r0, r7
 8000c7e:	429f      	cmp	r7, r3
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x148>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c8a:	d202      	bcs.n	8000c92 <__udivmoddi4+0x146>
 8000c8c:	429f      	cmp	r7, r3
 8000c8e:	f200 80b0 	bhi.w	8000df2 <__udivmoddi4+0x2a6>
 8000c92:	4620      	mov	r0, r4
 8000c94:	1bdb      	subs	r3, r3, r7
 8000c96:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9a:	e7a5      	b.n	8000be8 <__udivmoddi4+0x9c>
 8000c9c:	f1c1 0620 	rsb	r6, r1, #32
 8000ca0:	408b      	lsls	r3, r1
 8000ca2:	fa22 f706 	lsr.w	r7, r2, r6
 8000ca6:	431f      	orrs	r7, r3
 8000ca8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cac:	fa04 f301 	lsl.w	r3, r4, r1
 8000cb0:	ea43 030c 	orr.w	r3, r3, ip
 8000cb4:	40f4      	lsrs	r4, r6
 8000cb6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cba:	0c38      	lsrs	r0, r7, #16
 8000cbc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cc0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cc4:	fa1f fc87 	uxth.w	ip, r7
 8000cc8:	fb00 441e 	mls	r4, r0, lr, r4
 8000ccc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cd0:	fb0e f90c 	mul.w	r9, lr, ip
 8000cd4:	45a1      	cmp	r9, r4
 8000cd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cda:	d90a      	bls.n	8000cf2 <__udivmoddi4+0x1a6>
 8000cdc:	193c      	adds	r4, r7, r4
 8000cde:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ce2:	f080 8084 	bcs.w	8000dee <__udivmoddi4+0x2a2>
 8000ce6:	45a1      	cmp	r9, r4
 8000ce8:	f240 8081 	bls.w	8000dee <__udivmoddi4+0x2a2>
 8000cec:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cf0:	443c      	add	r4, r7
 8000cf2:	eba4 0409 	sub.w	r4, r4, r9
 8000cf6:	fa1f f983 	uxth.w	r9, r3
 8000cfa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cfe:	fb00 4413 	mls	r4, r0, r3, r4
 8000d02:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d06:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d0a:	45a4      	cmp	ip, r4
 8000d0c:	d907      	bls.n	8000d1e <__udivmoddi4+0x1d2>
 8000d0e:	193c      	adds	r4, r7, r4
 8000d10:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d14:	d267      	bcs.n	8000de6 <__udivmoddi4+0x29a>
 8000d16:	45a4      	cmp	ip, r4
 8000d18:	d965      	bls.n	8000de6 <__udivmoddi4+0x29a>
 8000d1a:	3b02      	subs	r3, #2
 8000d1c:	443c      	add	r4, r7
 8000d1e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d22:	fba0 9302 	umull	r9, r3, r0, r2
 8000d26:	eba4 040c 	sub.w	r4, r4, ip
 8000d2a:	429c      	cmp	r4, r3
 8000d2c:	46ce      	mov	lr, r9
 8000d2e:	469c      	mov	ip, r3
 8000d30:	d351      	bcc.n	8000dd6 <__udivmoddi4+0x28a>
 8000d32:	d04e      	beq.n	8000dd2 <__udivmoddi4+0x286>
 8000d34:	b155      	cbz	r5, 8000d4c <__udivmoddi4+0x200>
 8000d36:	ebb8 030e 	subs.w	r3, r8, lr
 8000d3a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d3e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d42:	40cb      	lsrs	r3, r1
 8000d44:	431e      	orrs	r6, r3
 8000d46:	40cc      	lsrs	r4, r1
 8000d48:	e9c5 6400 	strd	r6, r4, [r5]
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	e750      	b.n	8000bf2 <__udivmoddi4+0xa6>
 8000d50:	f1c2 0320 	rsb	r3, r2, #32
 8000d54:	fa20 f103 	lsr.w	r1, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d60:	4094      	lsls	r4, r2
 8000d62:	430c      	orrs	r4, r1
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d6c:	fa1f f78c 	uxth.w	r7, ip
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3110 	mls	r1, r8, r0, r3
 8000d78:	0c23      	lsrs	r3, r4, #16
 8000d7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7e:	fb00 f107 	mul.w	r1, r0, r7
 8000d82:	4299      	cmp	r1, r3
 8000d84:	d908      	bls.n	8000d98 <__udivmoddi4+0x24c>
 8000d86:	eb1c 0303 	adds.w	r3, ip, r3
 8000d8a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d8e:	d22c      	bcs.n	8000dea <__udivmoddi4+0x29e>
 8000d90:	4299      	cmp	r1, r3
 8000d92:	d92a      	bls.n	8000dea <__udivmoddi4+0x29e>
 8000d94:	3802      	subs	r0, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000da0:	fb08 3311 	mls	r3, r8, r1, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb01 f307 	mul.w	r3, r1, r7
 8000dac:	42a3      	cmp	r3, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x276>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000db8:	d213      	bcs.n	8000de2 <__udivmoddi4+0x296>
 8000dba:	42a3      	cmp	r3, r4
 8000dbc:	d911      	bls.n	8000de2 <__udivmoddi4+0x296>
 8000dbe:	3902      	subs	r1, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	1ae4      	subs	r4, r4, r3
 8000dc4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dc8:	e739      	b.n	8000c3e <__udivmoddi4+0xf2>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	e6f0      	b.n	8000bb0 <__udivmoddi4+0x64>
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e706      	b.n	8000be0 <__udivmoddi4+0x94>
 8000dd2:	45c8      	cmp	r8, r9
 8000dd4:	d2ae      	bcs.n	8000d34 <__udivmoddi4+0x1e8>
 8000dd6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dda:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dde:	3801      	subs	r0, #1
 8000de0:	e7a8      	b.n	8000d34 <__udivmoddi4+0x1e8>
 8000de2:	4631      	mov	r1, r6
 8000de4:	e7ed      	b.n	8000dc2 <__udivmoddi4+0x276>
 8000de6:	4603      	mov	r3, r0
 8000de8:	e799      	b.n	8000d1e <__udivmoddi4+0x1d2>
 8000dea:	4630      	mov	r0, r6
 8000dec:	e7d4      	b.n	8000d98 <__udivmoddi4+0x24c>
 8000dee:	46d6      	mov	lr, sl
 8000df0:	e77f      	b.n	8000cf2 <__udivmoddi4+0x1a6>
 8000df2:	4463      	add	r3, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	e74d      	b.n	8000c94 <__udivmoddi4+0x148>
 8000df8:	4606      	mov	r6, r0
 8000dfa:	4623      	mov	r3, r4
 8000dfc:	4608      	mov	r0, r1
 8000dfe:	e70f      	b.n	8000c20 <__udivmoddi4+0xd4>
 8000e00:	3e02      	subs	r6, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	e730      	b.n	8000c68 <__udivmoddi4+0x11c>
 8000e06:	bf00      	nop

08000e08 <__aeabi_idiv0>:
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop

08000e0c <acc_task>:
 * - xQueueSend(): Sends messages to a queue for printing messages to the user.						   *
 * - xEventGroupSetBits(): Sets event group bits for synchronizing with the LED task.				   *
 ******************************************************************************************************/

void acc_task(void* param)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08c      	sub	sp, #48	@ 0x30
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;
	int16_t acc_data[3];		// Array to hold accelerometer values
	char acc_flag[3] = {0};		// Array to hold new data flags
 8000e14:	4b80      	ldr	r3, [pc, #512]	@ (8001018 <acc_task+0x20c>)
 8000e16:	881b      	ldrh	r3, [r3, #0]
 8000e18:	81bb      	strh	r3, [r7, #12]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73bb      	strb	r3, [r7, #14]

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000e1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e22:	9300      	str	r3, [sp, #0]
 8000e24:	2300      	movs	r3, #0
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f009 f95a 	bl	800a0e4 <xTaskGenericNotifyWait>

		// Display Accelerometer menu for the user
		xQueueSend(q_print, &msg_acc_menu, portMAX_DELAY);
 8000e30:	4b7a      	ldr	r3, [pc, #488]	@ (800101c <acc_task+0x210>)
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	2300      	movs	r3, #0
 8000e36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e3a:	4979      	ldr	r1, [pc, #484]	@ (8001020 <acc_task+0x214>)
 8000e3c:	f007 fa4e 	bl	80082dc <xQueueGenericSend>

		// Wait for the user to make a selection
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8000e40:	f107 0318 	add.w	r3, r7, #24
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e48:	9200      	str	r2, [sp, #0]
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f009 f948 	bl	800a0e4 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	61fb      	str	r3, [r7, #28]

		// Set all new data flags to 0
		for(int i=0; i<3; i++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e5c:	e008      	b.n	8000e70 <acc_task+0x64>
			acc_flag[i] = 0;
 8000e5e:	f107 020c 	add.w	r2, r7, #12
 8000e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e64:	4413      	add	r3, r2
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<3; i++) {
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	ddf3      	ble.n	8000e5e <acc_task+0x52>
		}

		// Process command
		if(msg->len <= 4) {
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	f200 80b5 	bhi.w	8000fea <acc_task+0x1de>
			if(!strcmp((char*)msg->payload, "X")) {
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	4968      	ldr	r1, [pc, #416]	@ (8001024 <acc_task+0x218>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f9ed 	bl	8000264 <strcmp>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d115      	bne.n	8000ebc <acc_task+0xb0>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f901 	bl	800109c <accelerometer_read>
				acc_flag[0] = 1; 									// Set X-axis new data flag
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	733b      	strb	r3, [r7, #12]
				show_acc_data(acc_data, acc_flag);					// Show data
 8000e9e:	f107 020c 	add.w	r2, r7, #12
 8000ea2:	f107 0310 	add.w	r3, r7, #16
 8000ea6:	4611      	mov	r1, r2
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f000 f93d 	bl	8001128 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_X_BIT);	// Set X-axis event group bit for LED task synchronization
 8000eae:	4b5e      	ldr	r3, [pc, #376]	@ (8001028 <acc_task+0x21c>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f006 ffb9 	bl	8007e2c <xEventGroupSetBits>
 8000eba:	e09e      	b.n	8000ffa <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "Y")) {
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	495b      	ldr	r1, [pc, #364]	@ (800102c <acc_task+0x220>)
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff f9cf 	bl	8000264 <strcmp>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d115      	bne.n	8000ef8 <acc_task+0xec>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 8000ecc:	f107 0310 	add.w	r3, r7, #16
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f000 f8e3 	bl	800109c <accelerometer_read>
				acc_flag[1] = 1; 									// Set Y-axis new data flag
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	737b      	strb	r3, [r7, #13]
				show_acc_data(acc_data, acc_flag);					// Show data
 8000eda:	f107 020c 	add.w	r2, r7, #12
 8000ede:	f107 0310 	add.w	r3, r7, #16
 8000ee2:	4611      	mov	r1, r2
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f000 f91f 	bl	8001128 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Y_BIT); 	// Set Y-axis event group bit for LED task synchronization
 8000eea:	4b4f      	ldr	r3, [pc, #316]	@ (8001028 <acc_task+0x21c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2102      	movs	r1, #2
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f006 ff9b 	bl	8007e2c <xEventGroupSetBits>
 8000ef6:	e080      	b.n	8000ffa <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "Z")) {
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	494d      	ldr	r1, [pc, #308]	@ (8001030 <acc_task+0x224>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff f9b1 	bl	8000264 <strcmp>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d115      	bne.n	8000f34 <acc_task+0x128>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f000 f8c5 	bl	800109c <accelerometer_read>
				acc_flag[2] = 1; 									// Set Z-axis new data flag
 8000f12:	2301      	movs	r3, #1
 8000f14:	73bb      	strb	r3, [r7, #14]
				show_acc_data(acc_data, acc_flag);					// Show data
 8000f16:	f107 020c 	add.w	r2, r7, #12
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f000 f901 	bl	8001128 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Z_BIT);	// Set Z-axis event group bit for LED task synchronization
 8000f26:	4b40      	ldr	r3, [pc, #256]	@ (8001028 <acc_task+0x21c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2104      	movs	r1, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f006 ff7d 	bl	8007e2c <xEventGroupSetBits>
 8000f32:	e062      	b.n	8000ffa <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "All")) {
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	493f      	ldr	r1, [pc, #252]	@ (8001034 <acc_task+0x228>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff f993 	bl	8000264 <strcmp>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d12e      	bne.n	8000fa2 <acc_task+0x196>
				accelerometer_read(acc_data);						// Read data
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f8a7 	bl	800109c <accelerometer_read>
				for(int i=0; i<3; i++) acc_flag[i] = 1; 			// Set new data flags for all axes
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
 8000f52:	e008      	b.n	8000f66 <acc_task+0x15a>
 8000f54:	f107 020c 	add.w	r2, r7, #12
 8000f58:	6a3b      	ldr	r3, [r7, #32]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	701a      	strb	r2, [r3, #0]
 8000f60:	6a3b      	ldr	r3, [r7, #32]
 8000f62:	3301      	adds	r3, #1
 8000f64:	623b      	str	r3, [r7, #32]
 8000f66:	6a3b      	ldr	r3, [r7, #32]
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	ddf3      	ble.n	8000f54 <acc_task+0x148>
				show_acc_data(acc_data, acc_flag);					// Show data
 8000f6c:	f107 020c 	add.w	r2, r7, #12
 8000f70:	f107 0310 	add.w	r3, r7, #16
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 f8d6 	bl	8001128 <show_acc_data>
				// Set all event group bits for LED task synchronization
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_X_BIT);
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001028 <acc_task+0x21c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2101      	movs	r1, #1
 8000f82:	4618      	mov	r0, r3
 8000f84:	f006 ff52 	bl	8007e2c <xEventGroupSetBits>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Y_BIT);
 8000f88:	4b27      	ldr	r3, [pc, #156]	@ (8001028 <acc_task+0x21c>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2102      	movs	r1, #2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f006 ff4c 	bl	8007e2c <xEventGroupSetBits>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Z_BIT);
 8000f94:	4b24      	ldr	r3, [pc, #144]	@ (8001028 <acc_task+0x21c>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f006 ff46 	bl	8007e2c <xEventGroupSetBits>
 8000fa0:	e02b      	b.n	8000ffa <acc_task+0x1ee>
			}
			else if (!strcmp((char*)msg->payload, "Main")) {
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	4924      	ldr	r1, [pc, #144]	@ (8001038 <acc_task+0x22c>)
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff f95c 	bl	8000264 <strcmp>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d112      	bne.n	8000fd8 <acc_task+0x1cc>
				// Update the system state
				curr_sys_state = sMainMenu;
 8000fb2:	4b22      	ldr	r3, [pc, #136]	@ (800103c <acc_task+0x230>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]

				// Set event group bit to turn off all LEDs upon exiting accelerometer menu
				xEventGroupSetBits(ledEventGroup, TURN_OFF_LEDS_BIT);
 8000fb8:	4b1b      	ldr	r3, [pc, #108]	@ (8001028 <acc_task+0x21c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2108      	movs	r1, #8
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f006 ff34 	bl	8007e2c <xEventGroupSetBits>

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8000fc4:	4b1e      	ldr	r3, [pc, #120]	@ (8001040 <acc_task+0x234>)
 8000fc6:	6818      	ldr	r0, [r3, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f009 f911 	bl	800a1f8 <xTaskGenericNotify>
 8000fd6:	e010      	b.n	8000ffa <acc_task+0x1ee>
			}
			else {
				xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 8000fd8:	4b10      	ldr	r3, [pc, #64]	@ (800101c <acc_task+0x210>)
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fe2:	4918      	ldr	r1, [pc, #96]	@ (8001044 <acc_task+0x238>)
 8000fe4:	f007 f97a 	bl	80082dc <xQueueGenericSend>
 8000fe8:	e007      	b.n	8000ffa <acc_task+0x1ee>
			}
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 8000fea:	4b0c      	ldr	r3, [pc, #48]	@ (800101c <acc_task+0x210>)
 8000fec:	6818      	ldr	r0, [r3, #0]
 8000fee:	2300      	movs	r3, #0
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ff4:	4913      	ldr	r1, [pc, #76]	@ (8001044 <acc_task+0x238>)
 8000ff6:	f007 f971 	bl	80082dc <xQueueGenericSend>
		}

		// Notify self / accelerometer task if not returning to the main menu
		if (sAccMenu == curr_sys_state)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	@ (800103c <acc_task+0x230>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	f47f af0d 	bne.w	8000e1e <acc_task+0x12>
			xTaskNotify(handle_acc_task, 0, eNoAction);
 8001004:	4b10      	ldr	r3, [pc, #64]	@ (8001048 <acc_task+0x23c>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	2300      	movs	r3, #0
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2300      	movs	r3, #0
 800100e:	2200      	movs	r2, #0
 8001010:	2100      	movs	r1, #0
 8001012:	f009 f8f1 	bl	800a1f8 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001016:	e702      	b.n	8000e1e <acc_task+0x12>
 8001018:	0800def4 	.word	0x0800def4
 800101c:	2000031c 	.word	0x2000031c
 8001020:	20000004 	.word	0x20000004
 8001024:	0800dedc 	.word	0x0800dedc
 8001028:	20000334 	.word	0x20000334
 800102c:	0800dee0 	.word	0x0800dee0
 8001030:	0800dee4 	.word	0x0800dee4
 8001034:	0800dee8 	.word	0x0800dee8
 8001038:	0800deec 	.word	0x0800deec
 800103c:	20000341 	.word	0x20000341
 8001040:	20000300 	.word	0x20000300
 8001044:	20000000 	.word	0x20000000
 8001048:	20000314 	.word	0x20000314

0800104c <accelerometer_init>:
 * - Sends the configuration data over SPI to set the desired settings.								   *
 * - Pulls the chip select (CS) pin high to de-select the device.									   *
 ******************************************************************************************************/

void accelerometer_init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
	// Configure CTRL_REG1_A: 100Hz, normal power mode, all axes enabled
	uint8_t configData = 0x57; // 0b01010111: 100Hz, normal power mode, all axes enabled
 8001052:	2357      	movs	r3, #87	@ 0x57
 8001054:	71fb      	strb	r3, [r7, #7]

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001056:	2200      	movs	r2, #0
 8001058:	2108      	movs	r1, #8
 800105a:	480e      	ldr	r0, [pc, #56]	@ (8001094 <accelerometer_init+0x48>)
 800105c:	f002 fe6c 	bl	8003d38 <HAL_GPIO_WritePin>

	// Send the register address
	uint8_t reg = LSM303DLHC_CTRL_REG1_A;
 8001060:	2320      	movs	r3, #32
 8001062:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8001064:	1db9      	adds	r1, r7, #6
 8001066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800106a:	2201      	movs	r2, #1
 800106c:	480a      	ldr	r0, [pc, #40]	@ (8001098 <accelerometer_init+0x4c>)
 800106e:	f003 ffd8 	bl	8005022 <HAL_SPI_Transmit>

	// Send the configuration data
	HAL_SPI_Transmit(&hspi1, &configData, 1, HAL_MAX_DELAY);
 8001072:	1df9      	adds	r1, r7, #7
 8001074:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001078:	2201      	movs	r2, #1
 800107a:	4807      	ldr	r0, [pc, #28]	@ (8001098 <accelerometer_init+0x4c>)
 800107c:	f003 ffd1 	bl	8005022 <HAL_SPI_Transmit>

	// Pull CS high to deselect the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8001080:	2201      	movs	r2, #1
 8001082:	2108      	movs	r1, #8
 8001084:	4803      	ldr	r0, [pc, #12]	@ (8001094 <accelerometer_init+0x48>)
 8001086:	f002 fe57 	bl	8003d38 <HAL_GPIO_WritePin>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000
 8001098:	200001d0 	.word	0x200001d0

0800109c <accelerometer_read>:
 * - Converts the received byte data to 16-bit integer values for each axis and stores them in the 	   *
 *   provided array.																				   *
 ******************************************************************************************************/

void accelerometer_read(int16_t *acc_data)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	uint8_t sensor_reading[6];
	uint8_t reg = ACC_X_ADDR;
 80010a4:	23a8      	movs	r3, #168	@ 0xa8
 80010a6:	73fb      	strb	r3, [r7, #15]

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80010a8:	2200      	movs	r2, #0
 80010aa:	2108      	movs	r1, #8
 80010ac:	481c      	ldr	r0, [pc, #112]	@ (8001120 <accelerometer_read+0x84>)
 80010ae:	f002 fe43 	bl	8003d38 <HAL_GPIO_WritePin>

	// Send the register address
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 80010b2:	f107 010f 	add.w	r1, r7, #15
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ba:	2201      	movs	r2, #1
 80010bc:	4819      	ldr	r0, [pc, #100]	@ (8001124 <accelerometer_read+0x88>)
 80010be:	f003 ffb0 	bl	8005022 <HAL_SPI_Transmit>

	// Receive the data
	HAL_SPI_Receive(&hspi1, sensor_reading, 6, HAL_MAX_DELAY);
 80010c2:	f107 0110 	add.w	r1, r7, #16
 80010c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010ca:	2206      	movs	r2, #6
 80010cc:	4815      	ldr	r0, [pc, #84]	@ (8001124 <accelerometer_read+0x88>)
 80010ce:	f004 f8eb 	bl	80052a8 <HAL_SPI_Receive>

	// Pull CS high to de-select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 80010d2:	2201      	movs	r2, #1
 80010d4:	2108      	movs	r1, #8
 80010d6:	4812      	ldr	r0, [pc, #72]	@ (8001120 <accelerometer_read+0x84>)
 80010d8:	f002 fe2e 	bl	8003d38 <HAL_GPIO_WritePin>

	// Convert the sensor reading
	acc_data[0] = (int16_t)(sensor_reading[1] << 8 | sensor_reading[0]); // x
 80010dc:	7c7b      	ldrb	r3, [r7, #17]
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	7c3b      	ldrb	r3, [r7, #16]
 80010e4:	b21b      	sxth	r3, r3
 80010e6:	4313      	orrs	r3, r2
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	801a      	strh	r2, [r3, #0]
	acc_data[1] = (int16_t)(sensor_reading[3] << 8 | sensor_reading[2]); // y
 80010ee:	7cfb      	ldrb	r3, [r7, #19]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	b219      	sxth	r1, r3
 80010f4:	7cbb      	ldrb	r3, [r7, #18]
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3302      	adds	r3, #2
 80010fc:	430a      	orrs	r2, r1
 80010fe:	b212      	sxth	r2, r2
 8001100:	801a      	strh	r2, [r3, #0]
	acc_data[2] = (int16_t)(sensor_reading[5] << 8 | sensor_reading[4]); // z
 8001102:	7d7b      	ldrb	r3, [r7, #21]
 8001104:	021b      	lsls	r3, r3, #8
 8001106:	b219      	sxth	r1, r3
 8001108:	7d3b      	ldrb	r3, [r7, #20]
 800110a:	b21a      	sxth	r2, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3304      	adds	r3, #4
 8001110:	430a      	orrs	r2, r1
 8001112:	b212      	sxth	r2, r2
 8001114:	801a      	strh	r2, [r3, #0]
}
 8001116:	bf00      	nop
 8001118:	3718      	adds	r7, #24
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	40021000 	.word	0x40021000
 8001124:	200001d0 	.word	0x200001d0

08001128 <show_acc_data>:
 * - Formats and displays data in g values for the available axes based on flags.					   *
 * - Sends the formatted data to the print queue for display.										   *
 ******************************************************************************************************/

void show_acc_data(int16_t *acc_data, char *acc_flag)
{
 8001128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112a:	b097      	sub	sp, #92	@ 0x5c
 800112c:	af08      	add	r7, sp, #32
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
	// Set up buffer
	static char showacc[80];
	static char* acc = showacc;

	// Convert from raw sensor value to milli-g's [mg], using +/- 2g sensitivity
	int16_t x_mg = acc_data[0] * 2000 / 32768;
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001138:	461a      	mov	r2, r3
 800113a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800113e:	fb02 f303 	mul.w	r3, r2, r3
 8001142:	2b00      	cmp	r3, #0
 8001144:	da02      	bge.n	800114c <show_acc_data+0x24>
 8001146:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800114a:	337f      	adds	r3, #127	@ 0x7f
 800114c:	13db      	asrs	r3, r3, #15
 800114e:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t y_mg = acc_data[1] * 2000 / 32768;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3302      	adds	r3, #2
 8001154:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001158:	461a      	mov	r2, r3
 800115a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800115e:	fb02 f303 	mul.w	r3, r2, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	da02      	bge.n	800116c <show_acc_data+0x44>
 8001166:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800116a:	337f      	adds	r3, #127	@ 0x7f
 800116c:	13db      	asrs	r3, r3, #15
 800116e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	int16_t z_mg = acc_data[2] * 2000 / 32768;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	3304      	adds	r3, #4
 8001174:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001178:	461a      	mov	r2, r3
 800117a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800117e:	fb02 f303 	mul.w	r3, r2, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	da02      	bge.n	800118c <show_acc_data+0x64>
 8001186:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 800118a:	337f      	adds	r3, #127	@ 0x7f
 800118c:	13db      	asrs	r3, r3, #15
 800118e:	867b      	strh	r3, [r7, #50]	@ 0x32

	// Variables to simulate floating point numbers
	int x_i, x_d, y_i, y_d, z_i, z_d;
	char x_s[2] = {"+"};
 8001190:	232b      	movs	r3, #43	@ 0x2b
 8001192:	82bb      	strh	r3, [r7, #20]
	char y_s[2] = {"+"};
 8001194:	232b      	movs	r3, #43	@ 0x2b
 8001196:	823b      	strh	r3, [r7, #16]
	char z_s[2] = {"+"};
 8001198:	232b      	movs	r3, #43	@ 0x2b
 800119a:	81bb      	strh	r3, [r7, #12]

	// Display the data that's available
	// All axes
	if((acc_flag[0] == 1) && (acc_flag[1] == 1) && (acc_flag[2] == 1)) {
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d141      	bne.n	8001228 <show_acc_data+0x100>
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	3301      	adds	r3, #1
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d13c      	bne.n	8001228 <show_acc_data+0x100>
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	3302      	adds	r3, #2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d137      	bne.n	8001228 <show_acc_data+0x100>
		split_integer(x_mg, x_s, &x_i, &x_d);
 80011b8:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 80011bc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011c0:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80011c4:	f107 0114 	add.w	r1, r7, #20
 80011c8:	f000 f894 	bl	80012f4 <split_integer>
		split_integer(y_mg, y_s, &y_i, &y_d);
 80011cc:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	@ 0x34
 80011d0:	f107 0320 	add.w	r3, r7, #32
 80011d4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80011d8:	f107 0110 	add.w	r1, r7, #16
 80011dc:	f000 f88a 	bl	80012f4 <split_integer>
		split_integer(z_mg, z_s, &z_i, &z_d);
 80011e0:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	@ 0x32
 80011e4:	f107 0318 	add.w	r3, r7, #24
 80011e8:	f107 021c 	add.w	r2, r7, #28
 80011ec:	f107 010c 	add.w	r1, r7, #12
 80011f0:	f000 f880 	bl	80012f4 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: X = %s%d.%d g, Y = %s%d.%d g, Z = %s%d.%d g\r\n", x_s, x_i, x_d, y_s, y_i, y_d, z_s, z_i, z_d);
 80011f4:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 80011f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011fa:	6a39      	ldr	r1, [r7, #32]
 80011fc:	69f8      	ldr	r0, [r7, #28]
 80011fe:	69bc      	ldr	r4, [r7, #24]
 8001200:	f107 0514 	add.w	r5, r7, #20
 8001204:	9406      	str	r4, [sp, #24]
 8001206:	9005      	str	r0, [sp, #20]
 8001208:	f107 000c 	add.w	r0, r7, #12
 800120c:	9004      	str	r0, [sp, #16]
 800120e:	9103      	str	r1, [sp, #12]
 8001210:	9202      	str	r2, [sp, #8]
 8001212:	f107 0210 	add.w	r2, r7, #16
 8001216:	9201      	str	r2, [sp, #4]
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	4633      	mov	r3, r6
 800121c:	462a      	mov	r2, r5
 800121e:	492e      	ldr	r1, [pc, #184]	@ (80012d8 <show_acc_data+0x1b0>)
 8001220:	482e      	ldr	r0, [pc, #184]	@ (80012dc <show_acc_data+0x1b4>)
 8001222:	f00c f8ff 	bl	800d424 <siprintf>
 8001226:	e04b      	b.n	80012c0 <show_acc_data+0x198>
	}
	// X-axis only
	else if (acc_flag[0] == 1) {
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d114      	bne.n	800125a <show_acc_data+0x132>
		split_integer(x_mg, x_s, &x_i, &x_d);
 8001230:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001234:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001238:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800123c:	f107 0114 	add.w	r1, r7, #20
 8001240:	f000 f858 	bl	80012f4 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: X = %s%d.%d g\r\n", x_s, x_i, x_d);
 8001244:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001248:	f107 0214 	add.w	r2, r7, #20
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	460b      	mov	r3, r1
 8001250:	4923      	ldr	r1, [pc, #140]	@ (80012e0 <show_acc_data+0x1b8>)
 8001252:	4822      	ldr	r0, [pc, #136]	@ (80012dc <show_acc_data+0x1b4>)
 8001254:	f00c f8e6 	bl	800d424 <siprintf>
 8001258:	e032      	b.n	80012c0 <show_acc_data+0x198>
	}
	// Y-axis only
	else if (acc_flag[1] == 1) {
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	3301      	adds	r3, #1
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b01      	cmp	r3, #1
 8001262:	d114      	bne.n	800128e <show_acc_data+0x166>
		split_integer(y_mg, y_s, &y_i, &y_d);
 8001264:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	@ 0x34
 8001268:	f107 0320 	add.w	r3, r7, #32
 800126c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001270:	f107 0110 	add.w	r1, r7, #16
 8001274:	f000 f83e 	bl	80012f4 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: Y = %s%d.%d g\r\n", y_s, y_i, y_d);
 8001278:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	f107 0210 	add.w	r2, r7, #16
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	460b      	mov	r3, r1
 8001284:	4917      	ldr	r1, [pc, #92]	@ (80012e4 <show_acc_data+0x1bc>)
 8001286:	4815      	ldr	r0, [pc, #84]	@ (80012dc <show_acc_data+0x1b4>)
 8001288:	f00c f8cc 	bl	800d424 <siprintf>
 800128c:	e018      	b.n	80012c0 <show_acc_data+0x198>
	}
	// Z-axis only
	else if (acc_flag[2] == 1) {
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	3302      	adds	r3, #2
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d113      	bne.n	80012c0 <show_acc_data+0x198>
		split_integer(z_mg, z_s, &z_i, &z_d);
 8001298:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	@ 0x32
 800129c:	f107 0318 	add.w	r3, r7, #24
 80012a0:	f107 021c 	add.w	r2, r7, #28
 80012a4:	f107 010c 	add.w	r1, r7, #12
 80012a8:	f000 f824 	bl	80012f4 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: Z = %s%d.%d g\r\n", z_s, z_i, z_d);
 80012ac:	69f9      	ldr	r1, [r7, #28]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	f107 020c 	add.w	r2, r7, #12
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	460b      	mov	r3, r1
 80012b8:	490b      	ldr	r1, [pc, #44]	@ (80012e8 <show_acc_data+0x1c0>)
 80012ba:	4808      	ldr	r0, [pc, #32]	@ (80012dc <show_acc_data+0x1b4>)
 80012bc:	f00c f8b2 	bl	800d424 <siprintf>
	}

	// Populate the print queue
	xQueueSend(q_print, &acc, portMAX_DELAY);
 80012c0:	4b0a      	ldr	r3, [pc, #40]	@ (80012ec <show_acc_data+0x1c4>)
 80012c2:	6818      	ldr	r0, [r3, #0]
 80012c4:	2300      	movs	r3, #0
 80012c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012ca:	4909      	ldr	r1, [pc, #36]	@ (80012f0 <show_acc_data+0x1c8>)
 80012cc:	f007 f806 	bl	80082dc <xQueueGenericSend>
}
 80012d0:	bf00      	nop
 80012d2:	373c      	adds	r7, #60	@ 0x3c
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012d8:	0800def8 	.word	0x0800def8
 80012dc:	200000f0 	.word	0x200000f0
 80012e0:	0800df40 	.word	0x0800df40
 80012e4:	0800df68 	.word	0x0800df68
 80012e8:	0800df90 	.word	0x0800df90
 80012ec:	2000031c 	.word	0x2000031c
 80012f0:	20000008 	.word	0x20000008

080012f4 <split_integer>:
 * the hundreds part is always positive. If the hundreds part rounds up to exactly 1000, the 		   *
 * thousands part is incremented and the hundreds part is reset to 0.								   *
 ******************************************************************************************************/

void split_integer(int value, char* sign, int *thousands_part, int *hundreds_part)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	60f8      	str	r0, [r7, #12]
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	603b      	str	r3, [r7, #0]
	// Evaluate the sign
	if(value < 0) {
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	da06      	bge.n	8001316 <split_integer+0x22>
		strcpy(sign, "-");
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4925      	ldr	r1, [pc, #148]	@ (80013a0 <split_integer+0xac>)
 800130c:	461a      	mov	r2, r3
 800130e:	460b      	mov	r3, r1
 8001310:	881b      	ldrh	r3, [r3, #0]
 8001312:	8013      	strh	r3, [r2, #0]
 8001314:	e005      	b.n	8001322 <split_integer+0x2e>
	}
	else {
		strcpy(sign, "+");
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	4922      	ldr	r1, [pc, #136]	@ (80013a4 <split_integer+0xb0>)
 800131a:	461a      	mov	r2, r3
 800131c:	460b      	mov	r3, r1
 800131e:	881b      	ldrh	r3, [r3, #0]
 8001320:	8013      	strh	r3, [r2, #0]
	}

	// Calculate how many thousands
    *thousands_part = abs(value / 1000);
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	4a20      	ldr	r2, [pc, #128]	@ (80013a8 <split_integer+0xb4>)
 8001326:	fb82 1203 	smull	r1, r2, r2, r3
 800132a:	1192      	asrs	r2, r2, #6
 800132c:	17db      	asrs	r3, r3, #31
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001334:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	601a      	str	r2, [r3, #0]

    // Calculate the remaining hundreds
    int remainder = value % 1000;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4a1a      	ldr	r2, [pc, #104]	@ (80013a8 <split_integer+0xb4>)
 8001340:	fb82 1203 	smull	r1, r2, r2, r3
 8001344:	1191      	asrs	r1, r2, #6
 8001346:	17da      	asrs	r2, r3, #31
 8001348:	1a8a      	subs	r2, r1, r2
 800134a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800134e:	fb01 f202 	mul.w	r2, r1, r2
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	617b      	str	r3, [r7, #20]

    // Ensure hundreds_part is positive
    *hundreds_part = abs((int)(remainder / 100.0));
 8001356:	6978      	ldr	r0, [r7, #20]
 8001358:	f7ff f93c 	bl	80005d4 <__aeabi_i2d>
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <split_integer+0xb8>)
 8001362:	f7ff facb 	bl	80008fc <__aeabi_ddiv>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4610      	mov	r0, r2
 800136c:	4619      	mov	r1, r3
 800136e:	f7ff fbad 	bl	8000acc <__aeabi_d2iz>
 8001372:	4603      	mov	r3, r0
 8001374:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001378:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	601a      	str	r2, [r3, #0]

    // Adjust thousands_part if rounding up results in exactly 1000
    if (*hundreds_part == 10) {
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b0a      	cmp	r3, #10
 8001386:	d107      	bne.n	8001398 <split_integer+0xa4>
        *thousands_part += 1;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	1c5a      	adds	r2, r3, #1
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	601a      	str	r2, [r3, #0]
        *hundreds_part = 0;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
    }
}
 8001398:	bf00      	nop
 800139a:	3718      	adds	r7, #24
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	0800dfb8 	.word	0x0800dfb8
 80013a4:	0800dfbc 	.word	0x0800dfbc
 80013a8:	10624dd3 	.word	0x10624dd3
 80013ac:	40590000 	.word	0x40590000

080013b0 <led_task>:
 * @note The task must be notified when a new command is available.									   *
 * @note The function utilizes software timers to control LED effects.								   *
 ******************************************************************************************************/

void led_task(void *param)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b08c      	sub	sp, #48	@ 0x30
 80013b4:	af02      	add	r7, sp, #8
 80013b6:	6078      	str	r0, [r7, #4]
	// Communication variables
	uint32_t msg_addr;
	message_t *msg;

	// LED timer parameters
	int freq = 2; // Frequency in Hz
 80013b8:	2302      	movs	r3, #2
 80013ba:	613b      	str	r3, [r7, #16]
	int period = 500; // Period in ms
 80013bc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80013c0:	627b      	str	r3, [r7, #36]	@ 0x24

	// FreeRTOS variables
	const TickType_t xTicksToWait = pdMS_TO_TICKS(EVENT_GROUP_WAIT_TIME); // Wait period for the event group
 80013c2:	2364      	movs	r3, #100	@ 0x64
 80013c4:	623b      	str	r3, [r7, #32]
	uint32_t notificationValue;
	EventBits_t eventBits;

	while(1) {
		// Wait for task notification or timeout =========================================================================
		if (xTaskNotifyWait(0, 0, &notificationValue, xTicksToWait) == pdPASS) {										//
 80013c6:	f107 020c 	add.w	r2, r7, #12
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	4613      	mov	r3, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	2100      	movs	r1, #0
 80013d4:	2000      	movs	r0, #0
 80013d6:	f008 fe85 	bl	800a0e4 <xTaskGenericNotifyWait>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b01      	cmp	r3, #1
 80013de:	f040 817a 	bne.w	80016d6 <led_task+0x326>
																														//
			// Display LED menu for the user																			//
			xQueueSend(q_print, &msg_led_menu, portMAX_DELAY);															//
 80013e2:	4b9a      	ldr	r3, [pc, #616]	@ (800164c <led_task+0x29c>)
 80013e4:	6818      	ldr	r0, [r3, #0]
 80013e6:	2300      	movs	r3, #0
 80013e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013ec:	4998      	ldr	r1, [pc, #608]	@ (8001650 <led_task+0x2a0>)
 80013ee:	f006 ff75 	bl	80082dc <xQueueGenericSend>
																														//
			// Wait for the user to select their desired LED effect														//
			xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);															//
 80013f2:	f107 0314 	add.w	r3, r7, #20
 80013f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013fa:	9200      	str	r2, [sp, #0]
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	2000      	movs	r0, #0
 8001402:	f008 fe6f 	bl	800a0e4 <xTaskGenericNotifyWait>
			msg = (message_t*)msg_addr;																					//
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	61fb      	str	r3, [r7, #28]
																														//
			// Process command, adjust LED state, and set software timers accordingly									//
			if(msg->len <= 4) {																							//
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b04      	cmp	r3, #4
 8001410:	f200 814c 	bhi.w	80016ac <led_task+0x2fc>
				if(!strcmp((char*)msg->payload, "None"))			// No effect										//
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	498f      	ldr	r1, [pc, #572]	@ (8001654 <led_task+0x2a4>)
 8001418:	4618      	mov	r0, r3
 800141a:	f7fe ff23 	bl	8000264 <strcmp>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d109      	bne.n	8001438 <led_task+0x88>
				{																										//
					set_led_timer(effectNone);																			//
 8001424:	2004      	movs	r0, #4
 8001426:	f000 fa25 	bl	8001874 <set_led_timer>
					curr_led_state = sNone;																				//
 800142a:	4b8b      	ldr	r3, [pc, #556]	@ (8001658 <led_task+0x2a8>)
 800142c:	2204      	movs	r2, #4
 800142e:	701a      	strb	r2, [r3, #0]
					control_all_leds(LED_OFF);																			//
 8001430:	2000      	movs	r0, #0
 8001432:	f000 fa51 	bl	80018d8 <control_all_leds>
 8001436:	e141      	b.n	80016bc <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E1")) {		// E1 effect										//
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4988      	ldr	r1, [pc, #544]	@ (800165c <led_task+0x2ac>)
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ff11 	bl	8000264 <strcmp>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d106      	bne.n	8001456 <led_task+0xa6>
					curr_led_state = sEffectE1;																			//
 8001448:	4b83      	ldr	r3, [pc, #524]	@ (8001658 <led_task+0x2a8>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE1);																			//
 800144e:	2000      	movs	r0, #0
 8001450:	f000 fa10 	bl	8001874 <set_led_timer>
 8001454:	e132      	b.n	80016bc <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E2")) {		// E2 effect										//
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	4981      	ldr	r1, [pc, #516]	@ (8001660 <led_task+0x2b0>)
 800145a:	4618      	mov	r0, r3
 800145c:	f7fe ff02 	bl	8000264 <strcmp>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d106      	bne.n	8001474 <led_task+0xc4>
					curr_led_state = sEffectE2;																			//
 8001466:	4b7c      	ldr	r3, [pc, #496]	@ (8001658 <led_task+0x2a8>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE2);																			//
 800146c:	2001      	movs	r0, #1
 800146e:	f000 fa01 	bl	8001874 <set_led_timer>
 8001472:	e123      	b.n	80016bc <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E3")) {		// E3 effect										//
 8001474:	69fb      	ldr	r3, [r7, #28]
 8001476:	497b      	ldr	r1, [pc, #492]	@ (8001664 <led_task+0x2b4>)
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe fef3 	bl	8000264 <strcmp>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d106      	bne.n	8001492 <led_task+0xe2>
					curr_led_state = sEffectE3;																			//
 8001484:	4b74      	ldr	r3, [pc, #464]	@ (8001658 <led_task+0x2a8>)
 8001486:	2202      	movs	r2, #2
 8001488:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE3);																			//
 800148a:	2002      	movs	r0, #2
 800148c:	f000 f9f2 	bl	8001874 <set_led_timer>
 8001490:	e114      	b.n	80016bc <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E4")) {		// E4 effect										//
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	4974      	ldr	r1, [pc, #464]	@ (8001668 <led_task+0x2b8>)
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fee4 	bl	8000264 <strcmp>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d106      	bne.n	80014b0 <led_task+0x100>
					curr_led_state = sEffectE4;																			//
 80014a2:	4b6d      	ldr	r3, [pc, #436]	@ (8001658 <led_task+0x2a8>)
 80014a4:	2203      	movs	r2, #3
 80014a6:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE4);																			//
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 f9e3 	bl	8001874 <set_led_timer>
 80014ae:	e105      	b.n	80016bc <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "Tor")) {		// Toggle orange LED								//
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	496e      	ldr	r1, [pc, #440]	@ (800166c <led_task+0x2bc>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7fe fed5 	bl	8000264 <strcmp>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d10b      	bne.n	80014d8 <led_task+0x128>
					set_led_timer(effectNone);																			//
 80014c0:	2004      	movs	r0, #4
 80014c2:	f000 f9d7 	bl	8001874 <set_led_timer>
					curr_led_state = sNone;																				//
 80014c6:	4b64      	ldr	r3, [pc, #400]	@ (8001658 <led_task+0x2a8>)
 80014c8:	2204      	movs	r2, #4
 80014ca:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(ORANGE_LED_PORT, ORANGE_LED_PIN);												//
 80014cc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014d0:	4867      	ldr	r0, [pc, #412]	@ (8001670 <led_task+0x2c0>)
 80014d2:	f002 fc4a 	bl	8003d6a <HAL_GPIO_TogglePin>
 80014d6:	e0f1      	b.n	80016bc <led_task+0x30c>
				}																										// N
				else if (!strcmp((char*)msg->payload, "Tgr")) {		// Toggle green LED									// O
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	4966      	ldr	r1, [pc, #408]	@ (8001674 <led_task+0x2c4>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f7fe fec1 	bl	8000264 <strcmp>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10b      	bne.n	8001500 <led_task+0x150>
					set_led_timer(effectNone);																			// T
 80014e8:	2004      	movs	r0, #4
 80014ea:	f000 f9c3 	bl	8001874 <set_led_timer>
					curr_led_state = sNone;																				// I
 80014ee:	4b5a      	ldr	r3, [pc, #360]	@ (8001658 <led_task+0x2a8>)
 80014f0:	2204      	movs	r2, #4
 80014f2:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);													// F
 80014f4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80014f8:	485d      	ldr	r0, [pc, #372]	@ (8001670 <led_task+0x2c0>)
 80014fa:	f002 fc36 	bl	8003d6a <HAL_GPIO_TogglePin>
 80014fe:	e0dd      	b.n	80016bc <led_task+0x30c>
				}																										// I
				else if (!strcmp((char*)msg->payload, "Tbl")) {		// Toggle blue LED									// C
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	495d      	ldr	r1, [pc, #372]	@ (8001678 <led_task+0x2c8>)
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe fead 	bl	8000264 <strcmp>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d10b      	bne.n	8001528 <led_task+0x178>
					set_led_timer(effectNone);																			// A
 8001510:	2004      	movs	r0, #4
 8001512:	f000 f9af 	bl	8001874 <set_led_timer>
					curr_led_state = sNone;																				// T
 8001516:	4b50      	ldr	r3, [pc, #320]	@ (8001658 <led_task+0x2a8>)
 8001518:	2204      	movs	r2, #4
 800151a:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);													// I
 800151c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001520:	4853      	ldr	r0, [pc, #332]	@ (8001670 <led_task+0x2c0>)
 8001522:	f002 fc22 	bl	8003d6a <HAL_GPIO_TogglePin>
 8001526:	e0c9      	b.n	80016bc <led_task+0x30c>
				}																										// O
				else if (!strcmp((char*)msg->payload, "Tre")) {		// Toggle red LED									// N
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	4954      	ldr	r1, [pc, #336]	@ (800167c <led_task+0x2cc>)
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe fe99 	bl	8000264 <strcmp>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d10b      	bne.n	8001550 <led_task+0x1a0>
					set_led_timer(effectNone);																			//
 8001538:	2004      	movs	r0, #4
 800153a:	f000 f99b 	bl	8001874 <set_led_timer>
					curr_led_state = sNone;																				//
 800153e:	4b46      	ldr	r3, [pc, #280]	@ (8001658 <led_task+0x2a8>)
 8001540:	2204      	movs	r2, #4
 8001542:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);														//
 8001544:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001548:	4849      	ldr	r0, [pc, #292]	@ (8001670 <led_task+0x2c0>)
 800154a:	f002 fc0e 	bl	8003d6a <HAL_GPIO_TogglePin>
 800154e:	e0b5      	b.n	80016bc <led_task+0x30c>
				}																										//
				else if (parse_freq_string(msg, &freq)) {			// Frequency adjustment								//
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	4619      	mov	r1, r3
 8001556:	69f8      	ldr	r0, [r7, #28]
 8001558:	f000 fab2 	bl	8001ac0 <parse_freq_string>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d055      	beq.n	800160e <led_task+0x25e>
					// Check that there is an active effect																//
					if(sNone == curr_led_state) {																		//
 8001562:	4b3d      	ldr	r3, [pc, #244]	@ (8001658 <led_task+0x2a8>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b04      	cmp	r3, #4
 8001568:	d108      	bne.n	800157c <led_task+0x1cc>
						xQueueSend(q_print, &msg_no_active_effect, portMAX_DELAY);										//
 800156a:	4b38      	ldr	r3, [pc, #224]	@ (800164c <led_task+0x29c>)
 800156c:	6818      	ldr	r0, [r3, #0]
 800156e:	2300      	movs	r3, #0
 8001570:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001574:	4942      	ldr	r1, [pc, #264]	@ (8001680 <led_task+0x2d0>)
 8001576:	f006 feb1 	bl	80082dc <xQueueGenericSend>
 800157a:	e09f      	b.n	80016bc <led_task+0x30c>
					}																									//
					// Check that frequency is between 1 and 10 Hz														//
					else if(freq > 10) {																				//
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	2b0a      	cmp	r3, #10
 8001580:	dd08      	ble.n	8001594 <led_task+0x1e4>
						xQueueSend(q_print, &msg_inv_freq, portMAX_DELAY);												//
 8001582:	4b32      	ldr	r3, [pc, #200]	@ (800164c <led_task+0x29c>)
 8001584:	6818      	ldr	r0, [r3, #0]
 8001586:	2300      	movs	r3, #0
 8001588:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800158c:	493d      	ldr	r1, [pc, #244]	@ (8001684 <led_task+0x2d4>)
 800158e:	f006 fea5 	bl	80082dc <xQueueGenericSend>
 8001592:	e093      	b.n	80016bc <led_task+0x30c>
					}																									//
					// Change timer frequency																			//
					else {																								//
						period = (1.0 / freq) * 1000;																	//
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff f81c 	bl	80005d4 <__aeabi_i2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	f04f 0000 	mov.w	r0, #0
 80015a4:	4938      	ldr	r1, [pc, #224]	@ (8001688 <led_task+0x2d8>)
 80015a6:	f7ff f9a9 	bl	80008fc <__aeabi_ddiv>
 80015aa:	4602      	mov	r2, r0
 80015ac:	460b      	mov	r3, r1
 80015ae:	4610      	mov	r0, r2
 80015b0:	4619      	mov	r1, r3
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	4b35      	ldr	r3, [pc, #212]	@ (800168c <led_task+0x2dc>)
 80015b8:	f7ff f876 	bl	80006a8 <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f7ff fa82 	bl	8000acc <__aeabi_d2iz>
 80015c8:	4603      	mov	r3, r0
 80015ca:	627b      	str	r3, [r7, #36]	@ 0x24
						if (xTimerChangePeriod(handle_led_timer[curr_led_state], pdMS_TO_TICKS(period), 0) != pdPASS) {	//
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <led_task+0x2a8>)
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	461a      	mov	r2, r3
 80015d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001690 <led_task+0x2e0>)
 80015d4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80015d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	4a2c      	ldr	r2, [pc, #176]	@ (8001694 <led_task+0x2e4>)
 80015e4:	fba2 2303 	umull	r2, r3, r2, r3
 80015e8:	099a      	lsrs	r2, r3, #6
 80015ea:	2300      	movs	r3, #0
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	2104      	movs	r1, #4
 80015f2:	f009 f91b 	bl	800a82c <xTimerGenericCommand>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d05f      	beq.n	80016bc <led_task+0x30c>
							// If frequency update was not successful, notify the user									//
							xQueueSend(q_print, &msg_err_freq, portMAX_DELAY);											//
 80015fc:	4b13      	ldr	r3, [pc, #76]	@ (800164c <led_task+0x29c>)
 80015fe:	6818      	ldr	r0, [r3, #0]
 8001600:	2300      	movs	r3, #0
 8001602:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001606:	4924      	ldr	r1, [pc, #144]	@ (8001698 <led_task+0x2e8>)
 8001608:	f006 fe68 	bl	80082dc <xQueueGenericSend>
 800160c:	e056      	b.n	80016bc <led_task+0x30c>
						}																								//
					}																									//
				}																										//
				else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu								//
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	4922      	ldr	r1, [pc, #136]	@ (800169c <led_task+0x2ec>)
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe fe26 	bl	8000264 <strcmp>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10c      	bne.n	8001638 <led_task+0x288>
					// Update the system state																			//
					curr_sys_state = sMainMenu;																			//
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <led_task+0x2f0>)
 8001620:	2200      	movs	r2, #0
 8001622:	701a      	strb	r2, [r3, #0]
																														//
					// Notify the main menu task																		//
					xTaskNotify(handle_main_menu_task, 0, eNoAction);													//
 8001624:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <led_task+0x2f4>)
 8001626:	6818      	ldr	r0, [r3, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	2300      	movs	r3, #0
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	f008 fde1 	bl	800a1f8 <xTaskGenericNotify>
 8001636:	e041      	b.n	80016bc <led_task+0x30c>
				}																										//
				else												// Invalid response									//
					xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);													//
 8001638:	4b04      	ldr	r3, [pc, #16]	@ (800164c <led_task+0x29c>)
 800163a:	6818      	ldr	r0, [r3, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001642:	4919      	ldr	r1, [pc, #100]	@ (80016a8 <led_task+0x2f8>)
 8001644:	f006 fe4a 	bl	80082dc <xQueueGenericSend>
 8001648:	e038      	b.n	80016bc <led_task+0x30c>
 800164a:	bf00      	nop
 800164c:	2000031c 	.word	0x2000031c
 8001650:	2000001c 	.word	0x2000001c
 8001654:	0800e278 	.word	0x0800e278
 8001658:	20000020 	.word	0x20000020
 800165c:	0800e280 	.word	0x0800e280
 8001660:	0800e284 	.word	0x0800e284
 8001664:	0800e288 	.word	0x0800e288
 8001668:	0800e28c 	.word	0x0800e28c
 800166c:	0800e290 	.word	0x0800e290
 8001670:	40020c00 	.word	0x40020c00
 8001674:	0800e294 	.word	0x0800e294
 8001678:	0800e298 	.word	0x0800e298
 800167c:	0800e29c 	.word	0x0800e29c
 8001680:	20000010 	.word	0x20000010
 8001684:	20000018 	.word	0x20000018
 8001688:	3ff00000 	.word	0x3ff00000
 800168c:	408f4000 	.word	0x408f4000
 8001690:	20000324 	.word	0x20000324
 8001694:	10624dd3 	.word	0x10624dd3
 8001698:	20000014 	.word	0x20000014
 800169c:	0800e2a0 	.word	0x0800e2a0
 80016a0:	20000341 	.word	0x20000341
 80016a4:	20000300 	.word	0x20000300
 80016a8:	2000000c 	.word	0x2000000c
			}																											//
			else {																										//
				// If user input is longer than 4 characters, notify user of invalid response							//
				xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);														//
 80016ac:	4b5f      	ldr	r3, [pc, #380]	@ (800182c <led_task+0x47c>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	2300      	movs	r3, #0
 80016b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016b6:	495e      	ldr	r1, [pc, #376]	@ (8001830 <led_task+0x480>)
 80016b8:	f006 fe10 	bl	80082dc <xQueueGenericSend>
			}																											//
																														//
			// Notify self / led task if not returning to the main menu													//
			if (sLedMenu == curr_sys_state)																				//
 80016bc:	4b5d      	ldr	r3, [pc, #372]	@ (8001834 <led_task+0x484>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d108      	bne.n	80016d6 <led_task+0x326>
				xTaskNotify(handle_led_task, 0, eNoAction);																//
 80016c4:	4b5c      	ldr	r3, [pc, #368]	@ (8001838 <led_task+0x488>)
 80016c6:	6818      	ldr	r0, [r3, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2300      	movs	r3, #0
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	f008 fd91 	bl	800a1f8 <xTaskGenericNotify>
		}	// ===========================================================================================================
		// If timeout, check for any LED event group bits set ------------------------------------------------------------
		eventBits =  xEventGroupWaitBits(																				//
 80016d6:	4b59      	ldr	r3, [pc, #356]	@ (800183c <led_task+0x48c>)
 80016d8:	6818      	ldr	r0, [r3, #0]
 80016da:	2300      	movs	r3, #0
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	2201      	movs	r2, #1
 80016e2:	210f      	movs	r1, #15
 80016e4:	f006 fad0 	bl	8007c88 <xEventGroupWaitBits>
 80016e8:	61b8      	str	r0, [r7, #24]
		             ACCEL_READ_X_BIT | ACCEL_READ_Y_BIT | ACCEL_READ_Z_BIT | TURN_OFF_LEDS_BIT,						//
		             pdTRUE,  // Clear bits on exit																		//
		             pdFALSE, // Wait for any bit to be set																//
		             0);      // Do not block																			//
																														//
		if ((eventBits & ACCEL_READ_X_BIT) && (eventBits & ACCEL_READ_Y_BIT) && (eventBits & ACCEL_READ_Z_BIT)) {		//
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d022      	beq.n	800173a <led_task+0x38a>
 80016f4:	69bb      	ldr	r3, [r7, #24]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d01d      	beq.n	800173a <led_task+0x38a>
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	2b00      	cmp	r3, #0
 8001706:	d018      	beq.n	800173a <led_task+0x38a>
			// Light all LED for x-, y-, and z-axis success																//
			set_led_timer(effectNone);																					//
 8001708:	2004      	movs	r0, #4
 800170a:	f000 f8b3 	bl	8001874 <set_led_timer>
			curr_led_state = sNone;																						//
 800170e:	4b4c      	ldr	r3, [pc, #304]	@ (8001840 <led_task+0x490>)
 8001710:	2204      	movs	r2, #4
 8001712:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, SET);													//
 8001714:	2201      	movs	r2, #1
 8001716:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800171a:	484a      	ldr	r0, [pc, #296]	@ (8001844 <led_task+0x494>)
 800171c:	f002 fb0c 	bl	8003d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, SET);														//
 8001720:	2201      	movs	r2, #1
 8001722:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001726:	4847      	ldr	r0, [pc, #284]	@ (8001844 <led_task+0x494>)
 8001728:	f002 fb06 	bl	8003d38 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, SET);														//
 800172c:	2201      	movs	r2, #1
 800172e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001732:	4844      	ldr	r0, [pc, #272]	@ (8001844 <led_task+0x494>)
 8001734:	f002 fb00 	bl	8003d38 <HAL_GPIO_WritePin>
 8001738:	e04c      	b.n	80017d4 <led_task+0x424>
		}																												//
		else if (eventBits & TURN_OFF_LEDS_BIT) {																		// E
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	f003 0308 	and.w	r3, r3, #8
 8001740:	2b00      	cmp	r3, #0
 8001742:	d009      	beq.n	8001758 <led_task+0x3a8>
			// Turn off all LEDs																						// V
			set_led_timer(effectNone);																					// E
 8001744:	2004      	movs	r0, #4
 8001746:	f000 f895 	bl	8001874 <set_led_timer>
			curr_led_state = sNone;																						// N
 800174a:	4b3d      	ldr	r3, [pc, #244]	@ (8001840 <led_task+0x490>)
 800174c:	2204      	movs	r2, #4
 800174e:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					// T
 8001750:	2000      	movs	r0, #0
 8001752:	f000 f8c1 	bl	80018d8 <control_all_leds>
 8001756:	e03d      	b.n	80017d4 <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_X_BIT) {																		// G
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00f      	beq.n	8001782 <led_task+0x3d2>
			// Light orange LED for x-axis success																		// R
			set_led_timer(effectNone);																					// O
 8001762:	2004      	movs	r0, #4
 8001764:	f000 f886 	bl	8001874 <set_led_timer>
			curr_led_state = sNone;																						// U
 8001768:	4b35      	ldr	r3, [pc, #212]	@ (8001840 <led_task+0x490>)
 800176a:	2204      	movs	r2, #4
 800176c:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					// P
 800176e:	2000      	movs	r0, #0
 8001770:	f000 f8b2 	bl	80018d8 <control_all_leds>
			HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, SET);													//
 8001774:	2201      	movs	r2, #1
 8001776:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800177a:	4832      	ldr	r0, [pc, #200]	@ (8001844 <led_task+0x494>)
 800177c:	f002 fadc 	bl	8003d38 <HAL_GPIO_WritePin>
 8001780:	e028      	b.n	80017d4 <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_Y_BIT) {																		//
 8001782:	69bb      	ldr	r3, [r7, #24]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d00f      	beq.n	80017ac <led_task+0x3fc>
			// Light blue LED for y-axis success																		//
			set_led_timer(effectNone);																					//
 800178c:	2004      	movs	r0, #4
 800178e:	f000 f871 	bl	8001874 <set_led_timer>
			curr_led_state = sNone;																						//
 8001792:	4b2b      	ldr	r3, [pc, #172]	@ (8001840 <led_task+0x490>)
 8001794:	2204      	movs	r2, #4
 8001796:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 8001798:	2000      	movs	r0, #0
 800179a:	f000 f89d 	bl	80018d8 <control_all_leds>
			HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, SET);														//
 800179e:	2201      	movs	r2, #1
 80017a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017a4:	4827      	ldr	r0, [pc, #156]	@ (8001844 <led_task+0x494>)
 80017a6:	f002 fac7 	bl	8003d38 <HAL_GPIO_WritePin>
 80017aa:	e013      	b.n	80017d4 <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_Z_BIT) {																		//
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00e      	beq.n	80017d4 <led_task+0x424>
			// Light green LED for z-axis success																		//
			set_led_timer(effectNone);																					//
 80017b6:	2004      	movs	r0, #4
 80017b8:	f000 f85c 	bl	8001874 <set_led_timer>
			curr_led_state = sNone;																						//
 80017bc:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <led_task+0x490>)
 80017be:	2204      	movs	r2, #4
 80017c0:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 80017c2:	2000      	movs	r0, #0
 80017c4:	f000 f888 	bl	80018d8 <control_all_leds>
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, SET);														//
 80017c8:	2201      	movs	r2, #1
 80017ca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80017ce:	481d      	ldr	r0, [pc, #116]	@ (8001844 <led_task+0x494>)
 80017d0:	f002 fab2 	bl	8003d38 <HAL_GPIO_WritePin>
		}	// -----------------------------------------------------------------------------------------------------------
		// ===============================================================================================================
		// Check if rtcSemaphore is available																			//
		if (xSemaphoreTake(rtcSemaphore, RTC_SEMAPHORE_WAIT_TIME) == pdTRUE) {											// S
 80017d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001848 <led_task+0x498>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	210a      	movs	r1, #10
 80017da:	4618      	mov	r0, r3
 80017dc:	f007 f87e 	bl	80088dc <xQueueSemaphoreTake>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d10e      	bne.n	8001804 <led_task+0x454>
			// Light red LED to indicate successful RTC configuration													// E
			set_led_timer(effectNone);																					// M
 80017e6:	2004      	movs	r0, #4
 80017e8:	f000 f844 	bl	8001874 <set_led_timer>
			curr_led_state = sNone;																						// A
 80017ec:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <led_task+0x490>)
 80017ee:	2204      	movs	r2, #4
 80017f0:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					// P
 80017f2:	2000      	movs	r0, #0
 80017f4:	f000 f870 	bl	80018d8 <control_all_leds>
			HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, SET);															// H
 80017f8:	2201      	movs	r2, #1
 80017fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017fe:	4811      	ldr	r0, [pc, #68]	@ (8001844 <led_task+0x494>)
 8001800:	f002 fa9a 	bl	8003d38 <HAL_GPIO_WritePin>
		} 																												// O
		if (xSemaphoreTake(ledOffSemaphore, RTC_SEMAPHORE_WAIT_TIME) == pdTRUE) {										// R
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <led_task+0x49c>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	210a      	movs	r1, #10
 800180a:	4618      	mov	r0, r3
 800180c:	f007 f866 	bl	80088dc <xQueueSemaphoreTake>
 8001810:	4603      	mov	r3, r0
 8001812:	2b01      	cmp	r3, #1
 8001814:	f47f add7 	bne.w	80013c6 <led_task+0x16>
			// Turn off all LEDs																						// E
			set_led_timer(effectNone);																					// S
 8001818:	2004      	movs	r0, #4
 800181a:	f000 f82b 	bl	8001874 <set_led_timer>
			curr_led_state = sNone;																						//
 800181e:	4b08      	ldr	r3, [pc, #32]	@ (8001840 <led_task+0x490>)
 8001820:	2204      	movs	r2, #4
 8001822:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 8001824:	2000      	movs	r0, #0
 8001826:	f000 f857 	bl	80018d8 <control_all_leds>
		if (xTaskNotifyWait(0, 0, &notificationValue, xTicksToWait) == pdPASS) {										//
 800182a:	e5cc      	b.n	80013c6 <led_task+0x16>
 800182c:	2000031c 	.word	0x2000031c
 8001830:	2000000c 	.word	0x2000000c
 8001834:	20000341 	.word	0x20000341
 8001838:	2000030c 	.word	0x2000030c
 800183c:	20000334 	.word	0x20000334
 8001840:	20000020 	.word	0x20000020
 8001844:	40020c00 	.word	0x40020c00
 8001848:	20000338 	.word	0x20000338
 800184c:	2000033c 	.word	0x2000033c

08001850 <led_callback>:
 * @note The function assumes that the timer IDs correspond directly to the LED effects to be executed *
 *       and relies on proper timer setup and management by the calling code.						   *
 ******************************************************************************************************/

void led_callback(TimerHandle_t xTimer)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	// Get timer ID
	int id = (uint32_t)pvTimerGetTimerID(xTimer);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f009 fad1 	bl	800ae00 <pvTimerGetTimerID>
 800185e:	4603      	mov	r3, r0
 8001860:	60fb      	str	r3, [r7, #12]

	// LED effects correspond to timer ID's
	int effect = id;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	60bb      	str	r3, [r7, #8]
	execute_led_effect(effect);
 8001866:	68b8      	ldr	r0, [r7, #8]
 8001868:	f000 f8c4 	bl	80019f4 <execute_led_effect>
}
 800186c:	bf00      	nop
 800186e:	3710      	adds	r7, #16
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <set_led_timer>:
 * @note This function assumes that `handle_led_timer[]` array is properly initialized and contains    *
 *       valid FreeRTOS software timer handles for each LED effect.									   *
 ******************************************************************************************************/

void set_led_timer(led_effect_t effect)
{
 8001874:	b590      	push	{r4, r7, lr}
 8001876:	b087      	sub	sp, #28
 8001878:	af02      	add	r7, sp, #8
 800187a:	4603      	mov	r3, r0
 800187c:	71fb      	strb	r3, [r7, #7]
	// Turn off all timers
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 800187e:	2300      	movs	r3, #0
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e00e      	b.n	80018a2 <set_led_timer+0x2e>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 8001884:	4a13      	ldr	r2, [pc, #76]	@ (80018d4 <set_led_timer+0x60>)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800188c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2300      	movs	r3, #0
 8001894:	2200      	movs	r2, #0
 8001896:	2103      	movs	r1, #3
 8001898:	f008 ffc8 	bl	800a82c <xTimerGenericCommand>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3301      	adds	r3, #1
 80018a0:	60fb      	str	r3, [r7, #12]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2b03      	cmp	r3, #3
 80018a6:	dded      	ble.n	8001884 <set_led_timer+0x10>
	}

	// Start the selected timer
	if(effectNone != effect) {
 80018a8:	79fb      	ldrb	r3, [r7, #7]
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	d00e      	beq.n	80018cc <set_led_timer+0x58>
		xTimerStart(handle_led_timer[effect], portMAX_DELAY);
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	4a08      	ldr	r2, [pc, #32]	@ (80018d4 <set_led_timer+0x60>)
 80018b2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80018b6:	f007 fe4b 	bl	8009550 <xTaskGetTickCount>
 80018ba:	4602      	mov	r2, r0
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2300      	movs	r3, #0
 80018c4:	2101      	movs	r1, #1
 80018c6:	4620      	mov	r0, r4
 80018c8:	f008 ffb0 	bl	800a82c <xTimerGenericCommand>
	}
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd90      	pop	{r4, r7, pc}
 80018d4:	20000324 	.word	0x20000324

080018d8 <control_all_leds>:
 * 																									   *
 * @note This function assumes that the macros for each on-board LED are configured correctly.	       *
 ******************************************************************************************************/

void control_all_leds(int state)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, state);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	461a      	mov	r2, r3
 80018e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018ea:	480f      	ldr	r0, [pc, #60]	@ (8001928 <control_all_leds+0x50>)
 80018ec:	f002 fa24 	bl	8003d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, state);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	b2db      	uxtb	r3, r3
 80018f4:	461a      	mov	r2, r3
 80018f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80018fa:	480b      	ldr	r0, [pc, #44]	@ (8001928 <control_all_leds+0x50>)
 80018fc:	f002 fa1c 	bl	8003d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, state);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	b2db      	uxtb	r3, r3
 8001904:	461a      	mov	r2, r3
 8001906:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800190a:	4807      	ldr	r0, [pc, #28]	@ (8001928 <control_all_leds+0x50>)
 800190c:	f002 fa14 	bl	8003d38 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, state);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	461a      	mov	r2, r3
 8001916:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800191a:	4803      	ldr	r0, [pc, #12]	@ (8001928 <control_all_leds+0x50>)
 800191c:	f002 fa0c 	bl	8003d38 <HAL_GPIO_WritePin>
}
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40020c00 	.word	0x40020c00

0800192c <control_led_group>:
 * @note The provided `led_mode` specifies which LED group should be turned on (ex. LED_EVEN). The	   *
 *       other LED group (ex. LED_ODD) will be turned off.											   *
 ******************************************************************************************************/

void control_led_group(int led_mode)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
	// Turn on even LEDs
	if(LED_EVEN == led_mode) {
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d118      	bne.n	800196c <control_led_group+0x40>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 800193a:	2200      	movs	r2, #0
 800193c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001940:	4818      	ldr	r0, [pc, #96]	@ (80019a4 <control_led_group+0x78>)
 8001942:	f002 f9f9 	bl	8003d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800194c:	4815      	ldr	r0, [pc, #84]	@ (80019a4 <control_led_group+0x78>)
 800194e:	f002 f9f3 	bl	8003d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001958:	4812      	ldr	r0, [pc, #72]	@ (80019a4 <control_led_group+0x78>)
 800195a:	f002 f9ed 	bl	8003d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 800195e:	2201      	movs	r2, #1
 8001960:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001964:	480f      	ldr	r0, [pc, #60]	@ (80019a4 <control_led_group+0x78>)
 8001966:	f002 f9e7 	bl	8003d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
	}
}
 800196a:	e017      	b.n	800199c <control_led_group+0x70>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
 800196c:	2201      	movs	r2, #1
 800196e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001972:	480c      	ldr	r0, [pc, #48]	@ (80019a4 <control_led_group+0x78>)
 8001974:	f002 f9e0 	bl	8003d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800197e:	4809      	ldr	r0, [pc, #36]	@ (80019a4 <control_led_group+0x78>)
 8001980:	f002 f9da 	bl	8003d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
 8001984:	2201      	movs	r2, #1
 8001986:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800198a:	4806      	ldr	r0, [pc, #24]	@ (80019a4 <control_led_group+0x78>)
 800198c:	f002 f9d4 	bl	8003d38 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001990:	2200      	movs	r2, #0
 8001992:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001996:	4803      	ldr	r0, [pc, #12]	@ (80019a4 <control_led_group+0x78>)
 8001998:	f002 f9ce 	bl	8003d38 <HAL_GPIO_WritePin>
}
 800199c:	bf00      	nop
 800199e:	3708      	adds	r7, #8
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40020c00 	.word	0x40020c00

080019a8 <control_single_led>:
 * @note `config` dictates the LED states, ex. 0x05 = 0101 = Green and Red LEDs on, Orange and Blue    *
 *       LEDs off.																					   *
 ******************************************************************************************************/

void control_single_led(int config)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
	// Orange		LD3			GPIO_PIN_13		0x2000  //
	// Red			LD5			GPIO_PIN_14		0x4000  //
	// Blue			LD6			GPIO_PIN_15		0x8000  //
	//////////////////////////////////////////////////////

	for(int i=0; i<NUM_LED_TIMERS; i++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	e014      	b.n	80019e0 <control_single_led+0x38>
		HAL_GPIO_WritePin(GREEN_LED_PORT, (GREEN_LED_PIN << i), ((config >> i) & 0x1));
 80019b6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	b299      	uxth	r1, r3
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	fa42 f303 	asr.w	r3, r2, r3
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	461a      	mov	r2, r3
 80019d4:	4806      	ldr	r0, [pc, #24]	@ (80019f0 <control_single_led+0x48>)
 80019d6:	f002 f9af 	bl	8003d38 <HAL_GPIO_WritePin>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3301      	adds	r3, #1
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b03      	cmp	r3, #3
 80019e4:	dde7      	ble.n	80019b6 <control_single_led+0xe>
	}
}
 80019e6:	bf00      	nop
 80019e8:	bf00      	nop
 80019ea:	3710      	adds	r7, #16
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40020c00 	.word	0x40020c00

080019f4 <execute_led_effect>:
 * @note This function assumes that functions `control_all_leds()`, `control_led_group()`, and 		   *
 *       `control_single_led()` are implemented to control the LEDs accordingly.			 		   *
 ******************************************************************************************************/

void execute_led_effect(int effect)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
	// Flag used for effects E1 and E2
	static int flag = 1;
	// i and used for effects E3 and E4
	static int i = 0;

	switch(effect) {
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d854      	bhi.n	8001aac <execute_led_effect+0xb8>
 8001a02:	a201      	add	r2, pc, #4	@ (adr r2, 8001a08 <execute_led_effect+0x14>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001a3d 	.word	0x08001a3d
 8001a10:	08001a61 	.word	0x08001a61
 8001a14:	08001a87 	.word	0x08001a87
		case effectE1:
			// Flash all LEDs in unison
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 8001a18:	4b27      	ldr	r3, [pc, #156]	@ (8001ab8 <execute_led_effect+0xc4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f083 0301 	eor.w	r3, r3, #1
 8001a20:	4a25      	ldr	r2, [pc, #148]	@ (8001ab8 <execute_led_effect+0xc4>)
 8001a22:	6013      	str	r3, [r2, #0]
 8001a24:	4b24      	ldr	r3, [pc, #144]	@ (8001ab8 <execute_led_effect+0xc4>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d003      	beq.n	8001a34 <execute_led_effect+0x40>
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff ff53 	bl	80018d8 <control_all_leds>
			break;
 8001a32:	e03c      	b.n	8001aae <execute_led_effect+0xba>
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff ff4f 	bl	80018d8 <control_all_leds>
			break;
 8001a3a:	e038      	b.n	8001aae <execute_led_effect+0xba>
		case effectE2:
			// Flash even and odd LEDs back and forth
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 8001a3c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ab8 <execute_led_effect+0xc4>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f083 0301 	eor.w	r3, r3, #1
 8001a44:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab8 <execute_led_effect+0xc4>)
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b1b      	ldr	r3, [pc, #108]	@ (8001ab8 <execute_led_effect+0xc4>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d003      	beq.n	8001a58 <execute_led_effect+0x64>
 8001a50:	2000      	movs	r0, #0
 8001a52:	f7ff ff6b 	bl	800192c <control_led_group>
			break;
 8001a56:	e02a      	b.n	8001aae <execute_led_effect+0xba>
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 8001a58:	2001      	movs	r0, #1
 8001a5a:	f7ff ff67 	bl	800192c <control_led_group>
			break;
 8001a5e:	e026      	b.n	8001aae <execute_led_effect+0xba>
		case effectE3:
			// Move the illuminated LED around the circle of on-board LEDs
			control_single_led(0x1 << (i++ % 4));
 8001a60:	4b16      	ldr	r3, [pc, #88]	@ (8001abc <execute_led_effect+0xc8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	1c5a      	adds	r2, r3, #1
 8001a66:	4915      	ldr	r1, [pc, #84]	@ (8001abc <execute_led_effect+0xc8>)
 8001a68:	600a      	str	r2, [r1, #0]
 8001a6a:	425a      	negs	r2, r3
 8001a6c:	f003 0303 	and.w	r3, r3, #3
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	bf58      	it	pl
 8001a76:	4253      	negpl	r3, r2
 8001a78:	2201      	movs	r2, #1
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff ff92 	bl	80019a8 <control_single_led>
			break;
 8001a84:	e013      	b.n	8001aae <execute_led_effect+0xba>
		case effectE4:
			// Move the illuminated LED around the circle of on-board LEDs in opposite direction of effect E3
			control_single_led(0x08 >> (i++ % 4));
 8001a86:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <execute_led_effect+0xc8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	490b      	ldr	r1, [pc, #44]	@ (8001abc <execute_led_effect+0xc8>)
 8001a8e:	600a      	str	r2, [r1, #0]
 8001a90:	425a      	negs	r2, r3
 8001a92:	f003 0303 	and.w	r3, r3, #3
 8001a96:	f002 0203 	and.w	r2, r2, #3
 8001a9a:	bf58      	it	pl
 8001a9c:	4253      	negpl	r3, r2
 8001a9e:	2208      	movs	r2, #8
 8001aa0:	fa42 f303 	asr.w	r3, r2, r3
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff ff7f 	bl	80019a8 <control_single_led>
			break;
 8001aaa:	e000      	b.n	8001aae <execute_led_effect+0xba>
		default:
			break;
 8001aac:	bf00      	nop
	}
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000024 	.word	0x20000024
 8001abc:	20000140 	.word	0x20000140

08001ac0 <parse_freq_string>:
 *       validate the value range explicitly. It relies on other components to handle invalid values.  *
 ******************************************************************************************************/


int parse_freq_string(message_t *msg, int *freq_Hz)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
    // Check if the input string is at least 2 characters long (F and one digit)
    int len = strlen((char *)msg->payload);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7fe fbd3 	bl	8000278 <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	60bb      	str	r3, [r7, #8]
    if (len < 2 || len > 4) return 0;
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	dd02      	ble.n	8001ae2 <parse_freq_string+0x22>
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	2b04      	cmp	r3, #4
 8001ae0:	dd01      	ble.n	8001ae6 <parse_freq_string+0x26>
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e025      	b.n	8001b32 <parse_freq_string+0x72>

    // Check if the first character is 'F'
    if (msg->payload[0] != 'F') return 0;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b46      	cmp	r3, #70	@ 0x46
 8001aec:	d001      	beq.n	8001af2 <parse_freq_string+0x32>
 8001aee:	2300      	movs	r3, #0
 8001af0:	e01f      	b.n	8001b32 <parse_freq_string+0x72>

    // Check if the remaining characters are digits
    for (int i = 1; i < len; i++)
 8001af2:	2301      	movs	r3, #1
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	e010      	b.n	8001b1a <parse_freq_string+0x5a>
    {
        if (!isdigit(msg->payload[i])) return 0;
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	3301      	adds	r3, #1
 8001b02:	4a0e      	ldr	r2, [pc, #56]	@ (8001b3c <parse_freq_string+0x7c>)
 8001b04:	4413      	add	r3, r2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	f003 0304 	and.w	r3, r3, #4
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d101      	bne.n	8001b14 <parse_freq_string+0x54>
 8001b10:	2300      	movs	r3, #0
 8001b12:	e00e      	b.n	8001b32 <parse_freq_string+0x72>
    for (int i = 1; i < len; i++)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	3301      	adds	r3, #1
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	429a      	cmp	r2, r3
 8001b20:	dbea      	blt.n	8001af8 <parse_freq_string+0x38>
    }

    // Convert the numeric part to an integer
    *freq_Hz = freq_str_to_int(msg, len);
 8001b22:	68b9      	ldr	r1, [r7, #8]
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f000 f80b 	bl	8001b40 <freq_str_to_int>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	601a      	str	r2, [r3, #0]
    return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	0800e9da 	.word	0x0800e9da

08001b40 <freq_str_to_int>:
 *       invalid formats or edge cases (e.g., non-numeric characters). It relies on proper validation  *
 *       by the calling function.																	   *
 ******************************************************************************************************/

int freq_str_to_int(message_t *msg, int len)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
 8001b48:	6039      	str	r1, [r7, #0]
	int ret = 0;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<len; i++) {
 8001b4e:	2301      	movs	r3, #1
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	e00f      	b.n	8001b74 <freq_str_to_int+0x34>
		ret = ret * 10 + (msg->payload[i] - '0'); // Convert from ASCII to an integer
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4613      	mov	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	4413      	add	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	4619      	mov	r1, r3
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4413      	add	r3, r2
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	3b30      	subs	r3, #48	@ 0x30
 8001b6a:	440b      	add	r3, r1
 8001b6c:	60fb      	str	r3, [r7, #12]
	for(int i=1; i<len; i++) {
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	3301      	adds	r3, #1
 8001b72:	60bb      	str	r3, [r7, #8]
 8001b74:	68ba      	ldr	r2, [r7, #8]
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	dbeb      	blt.n	8001b54 <freq_str_to_int+0x14>
	}

	return ret;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <motor_task>:
 * @note The print queue (`q_print`) and other required queues must be initialized.				 	   *
 * @note The task must be notified when a new command is available.									   *
 ******************************************************************************************************/

void motor_task(void *param)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af02      	add	r7, sp, #8
 8001b92:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2100      	movs	r1, #0
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f008 fa9f 	bl	800a0e4 <xTaskGenericNotifyWait>

		// Display motor manager menu for the user
		xQueueSend(q_print, &msg_motor_menu, portMAX_DELAY);
 8001ba6:	4b40      	ldr	r3, [pc, #256]	@ (8001ca8 <motor_task+0x11c>)
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	2300      	movs	r3, #0
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bb0:	493e      	ldr	r1, [pc, #248]	@ (8001cac <motor_task+0x120>)
 8001bb2:	f006 fb93 	bl	80082dc <xQueueGenericSend>

		// Wait for the user to make a selection
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001bb6:	f107 0308 	add.w	r3, r7, #8
 8001bba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bbe:	9200      	str	r2, [sp, #0]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	2100      	movs	r1, #0
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f008 fa8d 	bl	800a0e4 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	60fb      	str	r3, [r7, #12]

		// Process command
		if(msg->len <= 5) {
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	2b05      	cmp	r3, #5
 8001bd4:	d851      	bhi.n	8001c7a <motor_task+0xee>
			if(!strcmp((char*)msg->payload, "Start")) {
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4935      	ldr	r1, [pc, #212]	@ (8001cb0 <motor_task+0x124>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7fe fb42 	bl	8000264 <strcmp>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10c      	bne.n	8001c00 <motor_task+0x74>
				// Configure the H-bridge for forward rotation
				HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8001be6:	2200      	movs	r2, #0
 8001be8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001bec:	4831      	ldr	r0, [pc, #196]	@ (8001cb4 <motor_task+0x128>)
 8001bee:	f002 f8a3 	bl	8003d38 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf8:	482e      	ldr	r0, [pc, #184]	@ (8001cb4 <motor_task+0x128>)
 8001bfa:	f002 f89d 	bl	8003d38 <HAL_GPIO_WritePin>
 8001bfe:	e044      	b.n	8001c8a <motor_task+0xfe>
			}
			else if(!strcmp((char*)msg->payload, "Stop")) {
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	492d      	ldr	r1, [pc, #180]	@ (8001cb8 <motor_task+0x12c>)
 8001c04:	4618      	mov	r0, r3
 8001c06:	f7fe fb2d 	bl	8000264 <strcmp>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d106      	bne.n	8001c1e <motor_task+0x92>
				// Pull both IN1 and IN2 low to stop current flow to the motor
				HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin|MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001c16:	4827      	ldr	r0, [pc, #156]	@ (8001cb4 <motor_task+0x128>)
 8001c18:	f002 f88e 	bl	8003d38 <HAL_GPIO_WritePin>
 8001c1c:	e035      	b.n	8001c8a <motor_task+0xfe>
			}
			else if(!strcmp((char*)msg->payload, "Algo")) {
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4926      	ldr	r1, [pc, #152]	@ (8001cbc <motor_task+0x130>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fb1e 	bl	8000264 <strcmp>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d02d      	beq.n	8001c8a <motor_task+0xfe>
				// execute "Algo" command
			}
			else if(!strcmp((char*)msg->payload, "Speed")) {
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4923      	ldr	r1, [pc, #140]	@ (8001cc0 <motor_task+0x134>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fb16 	bl	8000264 <strcmp>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d025      	beq.n	8001c8a <motor_task+0xfe>
				// execute "Speed" command
			}
			else if (!strcmp((char*)msg->payload, "Main")) {
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	4920      	ldr	r1, [pc, #128]	@ (8001cc4 <motor_task+0x138>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7fe fb0e 	bl	8000264 <strcmp>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d10c      	bne.n	8001c68 <motor_task+0xdc>
				// Update the system state
				curr_sys_state = sMainMenu;
 8001c4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc8 <motor_task+0x13c>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	701a      	strb	r2, [r3, #0]

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8001c54:	4b1d      	ldr	r3, [pc, #116]	@ (8001ccc <motor_task+0x140>)
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	2300      	movs	r3, #0
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	f008 fac9 	bl	800a1f8 <xTaskGenericNotify>
 8001c66:	e010      	b.n	8001c8a <motor_task+0xfe>
			}
			else {
				xQueueSend(q_print, &msg_inv_motor, portMAX_DELAY);
 8001c68:	4b0f      	ldr	r3, [pc, #60]	@ (8001ca8 <motor_task+0x11c>)
 8001c6a:	6818      	ldr	r0, [r3, #0]
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c72:	4917      	ldr	r1, [pc, #92]	@ (8001cd0 <motor_task+0x144>)
 8001c74:	f006 fb32 	bl	80082dc <xQueueGenericSend>
 8001c78:	e007      	b.n	8001c8a <motor_task+0xfe>
			}
		}
		else {
			// If user input is longer than 5 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_motor, portMAX_DELAY);
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca8 <motor_task+0x11c>)
 8001c7c:	6818      	ldr	r0, [r3, #0]
 8001c7e:	2300      	movs	r3, #0
 8001c80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c84:	4912      	ldr	r1, [pc, #72]	@ (8001cd0 <motor_task+0x144>)
 8001c86:	f006 fb29 	bl	80082dc <xQueueGenericSend>
		}

		// Notify self / accelerometer task if not returning to the main menu
		if (sMotorMenu == curr_sys_state)
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc8 <motor_task+0x13c>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	d180      	bne.n	8001b94 <motor_task+0x8>
			xTaskNotify(handle_motor_task, 0, eNoAction);
 8001c92:	4b10      	ldr	r3, [pc, #64]	@ (8001cd4 <motor_task+0x148>)
 8001c94:	6818      	ldr	r0, [r3, #0]
 8001c96:	2300      	movs	r3, #0
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	2100      	movs	r1, #0
 8001ca0:	f008 faaa 	bl	800a1f8 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001ca4:	e776      	b.n	8001b94 <motor_task+0x8>
 8001ca6:	bf00      	nop
 8001ca8:	2000031c 	.word	0x2000031c
 8001cac:	2000002c 	.word	0x2000002c
 8001cb0:	0800e40c 	.word	0x0800e40c
 8001cb4:	40020800 	.word	0x40020800
 8001cb8:	0800e414 	.word	0x0800e414
 8001cbc:	0800e41c 	.word	0x0800e41c
 8001cc0:	0800e424 	.word	0x0800e424
 8001cc4:	0800e42c 	.word	0x0800e42c
 8001cc8:	20000341 	.word	0x20000341
 8001ccc:	20000300 	.word	0x20000300
 8001cd0:	20000028 	.word	0x20000028
 8001cd4:	20000318 	.word	0x20000318

08001cd8 <rtc_task>:
 * @note There are multiple state machines handled here: the overall system state machine and the	   *
 *       RTC-specific state machine.																   *
 ******************************************************************************************************/

void rtc_task(void *param)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b088      	sub	sp, #32
 8001cdc:	af02      	add	r7, sp, #8
 8001cde:	6078      	str	r0, [r7, #4]
	message_t *msg;

	while(1) {

		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2100      	movs	r1, #0
 8001cec:	2000      	movs	r0, #0
 8001cee:	f008 f9f9 	bl	800a0e4 <xTaskGenericNotifyWait>

		while(curr_sys_state != sMainMenu) {
 8001cf2:	e218      	b.n	8002126 <rtc_task+0x44e>

			switch(curr_sys_state) {
 8001cf4:	4bb5      	ldr	r3, [pc, #724]	@ (8001fcc <rtc_task+0x2f4>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b06      	cmp	r3, #6
 8001cfa:	f000 8132 	beq.w	8001f62 <rtc_task+0x28a>
 8001cfe:	2b06      	cmp	r3, #6
 8001d00:	f300 81fb 	bgt.w	80020fa <rtc_task+0x422>
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d003      	beq.n	8001d10 <rtc_task+0x38>
 8001d08:	2b05      	cmp	r3, #5
 8001d0a:	f000 8089 	beq.w	8001e20 <rtc_task+0x148>
 8001d0e:	e1f4      	b.n	80020fa <rtc_task+0x422>
				/***** RTC main menu state *****/
				case sRtcMenu:
					// Display RTC menu for the user, show current time and date
					xQueueSend(q_print, &msg_rtc_menu_1, portMAX_DELAY);
 8001d10:	4baf      	ldr	r3, [pc, #700]	@ (8001fd0 <rtc_task+0x2f8>)
 8001d12:	6818      	ldr	r0, [r3, #0]
 8001d14:	2300      	movs	r3, #0
 8001d16:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d1a:	49ae      	ldr	r1, [pc, #696]	@ (8001fd4 <rtc_task+0x2fc>)
 8001d1c:	f006 fade 	bl	80082dc <xQueueGenericSend>
					show_time_date();
 8001d20:	f000 faa4 	bl	800226c <show_time_date>
					xQueueSend(q_print, &msg_rtc_menu_2, portMAX_DELAY);
 8001d24:	4baa      	ldr	r3, [pc, #680]	@ (8001fd0 <rtc_task+0x2f8>)
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d2e:	49aa      	ldr	r1, [pc, #680]	@ (8001fd8 <rtc_task+0x300>)
 8001d30:	f006 fad4 	bl	80082dc <xQueueGenericSend>

					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001d34:	f107 0308 	add.w	r3, r7, #8
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d3c:	9200      	str	r2, [sp, #0]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2000      	movs	r0, #0
 8001d44:	f008 f9ce 	bl	800a0e4 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	617b      	str	r3, [r7, #20]

					// Process command, update date / time accordingly
					if(msg->len <= 4) {
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d859      	bhi.n	8001e08 <rtc_task+0x130>
						if(!strcmp((char*)msg->payload, "Date")) {			// Configure date
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	49a1      	ldr	r1, [pc, #644]	@ (8001fdc <rtc_task+0x304>)
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fa83 	bl	8000264 <strcmp>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d10b      	bne.n	8001d7c <rtc_task+0xa4>
							// Update the system state
							curr_sys_state = sRtcDateConfig;
 8001d64:	4b99      	ldr	r3, [pc, #612]	@ (8001fcc <rtc_task+0x2f4>)
 8001d66:	2205      	movs	r2, #5
 8001d68:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 8001d6a:	4b99      	ldr	r3, [pc, #612]	@ (8001fd0 <rtc_task+0x2f8>)
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d74:	499a      	ldr	r1, [pc, #616]	@ (8001fe0 <rtc_task+0x308>)
 8001d76:	f006 fab1 	bl	80082dc <xQueueGenericSend>
					else {
						// If user input is longer than 4 characters, notify user of invalid response
						curr_sys_state = sMainMenu;
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
					}
					break;
 8001d7a:	e1d4      	b.n	8002126 <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Time")) {	// Configure time
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	4999      	ldr	r1, [pc, #612]	@ (8001fe4 <rtc_task+0x30c>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7fe fa6f 	bl	8000264 <strcmp>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10b      	bne.n	8001da4 <rtc_task+0xcc>
							curr_sys_state = sRtcTimeConfig;
 8001d8c:	4b8f      	ldr	r3, [pc, #572]	@ (8001fcc <rtc_task+0x2f4>)
 8001d8e:	2206      	movs	r2, #6
 8001d90:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 8001d92:	4b8f      	ldr	r3, [pc, #572]	@ (8001fd0 <rtc_task+0x2f8>)
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	2300      	movs	r3, #0
 8001d98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d9c:	4992      	ldr	r1, [pc, #584]	@ (8001fe8 <rtc_task+0x310>)
 8001d9e:	f006 fa9d 	bl	80082dc <xQueueGenericSend>
					break;
 8001da2:	e1c0      	b.n	8002126 <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Rfsh")) {	// Refresh the date and time
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	4991      	ldr	r1, [pc, #580]	@ (8001fec <rtc_task+0x314>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fa5b 	bl	8000264 <strcmp>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d103      	bne.n	8001dbc <rtc_task+0xe4>
							curr_sys_state = sRtcMenu;
 8001db4:	4b85      	ldr	r3, [pc, #532]	@ (8001fcc <rtc_task+0x2f4>)
 8001db6:	2203      	movs	r2, #3
 8001db8:	701a      	strb	r2, [r3, #0]
					break;
 8001dba:	e1b4      	b.n	8002126 <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	498c      	ldr	r1, [pc, #560]	@ (8001ff0 <rtc_task+0x318>)
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7fe fa4f 	bl	8000264 <strcmp>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d10a      	bne.n	8001de2 <rtc_task+0x10a>
							curr_sys_state = sMainMenu;
 8001dcc:	4b7f      	ldr	r3, [pc, #508]	@ (8001fcc <rtc_task+0x2f4>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	701a      	strb	r2, [r3, #0]
							xSemaphoreGive(ledOffSemaphore);
 8001dd2:	4b88      	ldr	r3, [pc, #544]	@ (8001ff4 <rtc_task+0x31c>)
 8001dd4:	6818      	ldr	r0, [r3, #0]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	f006 fa7e 	bl	80082dc <xQueueGenericSend>
					break;
 8001de0:	e1a1      	b.n	8002126 <rtc_task+0x44e>
							curr_sys_state = sMainMenu;
 8001de2:	4b7a      	ldr	r3, [pc, #488]	@ (8001fcc <rtc_task+0x2f4>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001de8:	4b79      	ldr	r3, [pc, #484]	@ (8001fd0 <rtc_task+0x2f8>)
 8001dea:	6818      	ldr	r0, [r3, #0]
 8001dec:	2300      	movs	r3, #0
 8001dee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001df2:	4981      	ldr	r1, [pc, #516]	@ (8001ff8 <rtc_task+0x320>)
 8001df4:	f006 fa72 	bl	80082dc <xQueueGenericSend>
							xSemaphoreGive(ledOffSemaphore);
 8001df8:	4b7e      	ldr	r3, [pc, #504]	@ (8001ff4 <rtc_task+0x31c>)
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	2200      	movs	r2, #0
 8001e00:	2100      	movs	r1, #0
 8001e02:	f006 fa6b 	bl	80082dc <xQueueGenericSend>
					break;
 8001e06:	e18e      	b.n	8002126 <rtc_task+0x44e>
						curr_sys_state = sMainMenu;
 8001e08:	4b70      	ldr	r3, [pc, #448]	@ (8001fcc <rtc_task+0x2f4>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001e0e:	4b70      	ldr	r3, [pc, #448]	@ (8001fd0 <rtc_task+0x2f8>)
 8001e10:	6818      	ldr	r0, [r3, #0]
 8001e12:	2300      	movs	r3, #0
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e18:	4977      	ldr	r1, [pc, #476]	@ (8001ff8 <rtc_task+0x320>)
 8001e1a:	f006 fa5f 	bl	80082dc <xQueueGenericSend>
					break;
 8001e1e:	e182      	b.n	8002126 <rtc_task+0x44e>
				/***** RTC date configuration state *****/
				case sRtcDateConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001e20:	f107 0308 	add.w	r3, r7, #8
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e28:	9200      	str	r2, [sp, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f008 f958 	bl	800a0e4 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	617b      	str	r3, [r7, #20]

					// Configure month, date, year, or day of week accordingly
					switch(curr_rtc_state) {
 8001e38:	4b70      	ldr	r3, [pc, #448]	@ (8001ffc <rtc_task+0x324>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	f200 816f 	bhi.w	8002120 <rtc_task+0x448>
 8001e42:	a201      	add	r2, pc, #4	@ (adr r2, 8001e48 <rtc_task+0x170>)
 8001e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e48:	08001e59 	.word	0x08001e59
 8001e4c:	08001e89 	.word	0x08001e89
 8001e50:	08001eb9 	.word	0x08001eb9
 8001e54:	08001ee9 	.word	0x08001ee9
						case MONTH_CONFIG:									// Month config
							uint8_t m = getnumber(msg->payload, msg->len);
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4610      	mov	r0, r2
 8001e62:	f000 f985 	bl	8002170 <getnumber>
 8001e66:	4603      	mov	r3, r0
 8001e68:	733b      	strb	r3, [r7, #12]
							date.Month = m;
 8001e6a:	4a65      	ldr	r2, [pc, #404]	@ (8002000 <rtc_task+0x328>)
 8001e6c:	7b3b      	ldrb	r3, [r7, #12]
 8001e6e:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = DATE_CONFIG;
 8001e70:	4b62      	ldr	r3, [pc, #392]	@ (8001ffc <rtc_task+0x324>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 8001e76:	4b56      	ldr	r3, [pc, #344]	@ (8001fd0 <rtc_task+0x2f8>)
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e80:	4960      	ldr	r1, [pc, #384]	@ (8002004 <rtc_task+0x32c>)
 8001e82:	f006 fa2b 	bl	80082dc <xQueueGenericSend>
							break;
 8001e86:	e06b      	b.n	8001f60 <rtc_task+0x288>
						case DATE_CONFIG:									// Date config
							uint8_t d = getnumber(msg->payload, msg->len);
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4610      	mov	r0, r2
 8001e92:	f000 f96d 	bl	8002170 <getnumber>
 8001e96:	4603      	mov	r3, r0
 8001e98:	737b      	strb	r3, [r7, #13]
							date.Date = d;
 8001e9a:	4a59      	ldr	r2, [pc, #356]	@ (8002000 <rtc_task+0x328>)
 8001e9c:	7b7b      	ldrb	r3, [r7, #13]
 8001e9e:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = YEAR_CONFIG;
 8001ea0:	4b56      	ldr	r3, [pc, #344]	@ (8001ffc <rtc_task+0x324>)
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 8001ea6:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd0 <rtc_task+0x2f8>)
 8001ea8:	6818      	ldr	r0, [r3, #0]
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eb0:	4955      	ldr	r1, [pc, #340]	@ (8002008 <rtc_task+0x330>)
 8001eb2:	f006 fa13 	bl	80082dc <xQueueGenericSend>
							break;
 8001eb6:	e053      	b.n	8001f60 <rtc_task+0x288>
						case YEAR_CONFIG:									// Year config
							uint8_t y = getnumber(msg->payload, msg->len);
 8001eb8:	697a      	ldr	r2, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4610      	mov	r0, r2
 8001ec2:	f000 f955 	bl	8002170 <getnumber>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	73bb      	strb	r3, [r7, #14]
							date.Year = y;
 8001eca:	4a4d      	ldr	r2, [pc, #308]	@ (8002000 <rtc_task+0x328>)
 8001ecc:	7bbb      	ldrb	r3, [r7, #14]
 8001ece:	70d3      	strb	r3, [r2, #3]
							curr_rtc_state = DAY_CONFIG;
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	@ (8001ffc <rtc_task+0x324>)
 8001ed2:	2203      	movs	r2, #3
 8001ed4:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <rtc_task+0x2f8>)
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	2300      	movs	r3, #0
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ee0:	494a      	ldr	r1, [pc, #296]	@ (800200c <rtc_task+0x334>)
 8001ee2:	f006 f9fb 	bl	80082dc <xQueueGenericSend>
							break;
 8001ee6:	e03b      	b.n	8001f60 <rtc_task+0x288>
						case DAY_CONFIG:									// Day of week config
							uint8_t day = getnumber(msg->payload, msg->len);
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	f000 f93d 	bl	8002170 <getnumber>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	73fb      	strb	r3, [r7, #15]
							date.WeekDay = day;
 8001efa:	4a41      	ldr	r2, [pc, #260]	@ (8002000 <rtc_task+0x328>)
 8001efc:	7bfb      	ldrb	r3, [r7, #15]
 8001efe:	7013      	strb	r3, [r2, #0]

							// Check that the user entered a valid date entry, configure date
							if(!validate_rtc_information(NULL, &date)) {
 8001f00:	493f      	ldr	r1, [pc, #252]	@ (8002000 <rtc_task+0x328>)
 8001f02:	2000      	movs	r0, #0
 8001f04:	f000 f955 	bl	80021b2 <validate_rtc_information>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d112      	bne.n	8001f34 <rtc_task+0x25c>
								rtc_configure_date(&date); // Configure date
 8001f0e:	483c      	ldr	r0, [pc, #240]	@ (8002000 <rtc_task+0x328>)
 8001f10:	f000 f99c 	bl	800224c <rtc_configure_date>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY); // Send confirmation to print queue
 8001f14:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd0 <rtc_task+0x2f8>)
 8001f16:	6818      	ldr	r0, [r3, #0]
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f1e:	493c      	ldr	r1, [pc, #240]	@ (8002010 <rtc_task+0x338>)
 8001f20:	f006 f9dc 	bl	80082dc <xQueueGenericSend>
								xSemaphoreGive(rtcSemaphore); // Give rtcSemaphore for led_task to light LED
 8001f24:	4b3b      	ldr	r3, [pc, #236]	@ (8002014 <rtc_task+0x33c>)
 8001f26:	6818      	ldr	r0, [r3, #0]
 8001f28:	2300      	movs	r3, #0
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	f006 f9d5 	bl	80082dc <xQueueGenericSend>
 8001f32:	e00e      	b.n	8001f52 <rtc_task+0x27a>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001f34:	4b26      	ldr	r3, [pc, #152]	@ (8001fd0 <rtc_task+0x2f8>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f3e:	492e      	ldr	r1, [pc, #184]	@ (8001ff8 <rtc_task+0x320>)
 8001f40:	f006 f9cc 	bl	80082dc <xQueueGenericSend>
								// Give semaphore for led_task to turn LEDs off
								xSemaphoreGive(ledOffSemaphore);
 8001f44:	4b2b      	ldr	r3, [pc, #172]	@ (8001ff4 <rtc_task+0x31c>)
 8001f46:	6818      	ldr	r0, [r3, #0]
 8001f48:	2300      	movs	r3, #0
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	f006 f9c5 	bl	80082dc <xQueueGenericSend>
							}

							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <rtc_task+0x2f4>)
 8001f54:	2203      	movs	r2, #3
 8001f56:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 8001f58:	4b28      	ldr	r3, [pc, #160]	@ (8001ffc <rtc_task+0x324>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
							break;
 8001f5e:	bf00      	nop
					}
					break;
 8001f60:	e0de      	b.n	8002120 <rtc_task+0x448>
				/***** RTC time configuration state *****/
				case sRtcTimeConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001f62:	f107 0308 	add.w	r3, r7, #8
 8001f66:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f6a:	9200      	str	r2, [sp, #0]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	2100      	movs	r1, #0
 8001f70:	2000      	movs	r0, #0
 8001f72:	f008 f8b7 	bl	800a0e4 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	617b      	str	r3, [r7, #20]

					// Configure hours, minutes, or seconds accordingly
					switch(curr_rtc_state) {
 8001f7a:	4b20      	ldr	r3, [pc, #128]	@ (8001ffc <rtc_task+0x324>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2b03      	cmp	r3, #3
 8001f80:	f200 80d0 	bhi.w	8002124 <rtc_task+0x44c>
 8001f84:	a201      	add	r2, pc, #4	@ (adr r2, 8001f8c <rtc_task+0x2b4>)
 8001f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f8a:	bf00      	nop
 8001f8c:	08001f9d 	.word	0x08001f9d
 8001f90:	08002021 	.word	0x08002021
 8001f94:	08002051 	.word	0x08002051
 8001f98:	08002081 	.word	0x08002081
						case HH_CONFIG:
							uint8_t hour = getnumber(msg->payload, msg->len);
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	f000 f8e3 	bl	8002170 <getnumber>
 8001faa:	4603      	mov	r3, r0
 8001fac:	743b      	strb	r3, [r7, #16]
							time.Hours = hour;
 8001fae:	4a1a      	ldr	r2, [pc, #104]	@ (8002018 <rtc_task+0x340>)
 8001fb0:	7c3b      	ldrb	r3, [r7, #16]
 8001fb2:	7013      	strb	r3, [r2, #0]
							curr_rtc_state = MM_CONFIG;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	@ (8001ffc <rtc_task+0x324>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 8001fba:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <rtc_task+0x2f8>)
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fc4:	4915      	ldr	r1, [pc, #84]	@ (800201c <rtc_task+0x344>)
 8001fc6:	f006 f989 	bl	80082dc <xQueueGenericSend>
							break;
 8001fca:	e095      	b.n	80020f8 <rtc_task+0x420>
 8001fcc:	20000341 	.word	0x20000341
 8001fd0:	2000031c 	.word	0x2000031c
 8001fd4:	20000058 	.word	0x20000058
 8001fd8:	2000005c 	.word	0x2000005c
 8001fdc:	0800e654 	.word	0x0800e654
 8001fe0:	20000048 	.word	0x20000048
 8001fe4:	0800e65c 	.word	0x0800e65c
 8001fe8:	20000038 	.word	0x20000038
 8001fec:	0800e664 	.word	0x0800e664
 8001ff0:	0800e66c 	.word	0x0800e66c
 8001ff4:	2000033c 	.word	0x2000033c
 8001ff8:	20000030 	.word	0x20000030
 8001ffc:	20000144 	.word	0x20000144
 8002000:	2000015c 	.word	0x2000015c
 8002004:	2000004c 	.word	0x2000004c
 8002008:	20000050 	.word	0x20000050
 800200c:	20000054 	.word	0x20000054
 8002010:	20000034 	.word	0x20000034
 8002014:	20000338 	.word	0x20000338
 8002018:	20000148 	.word	0x20000148
 800201c:	2000003c 	.word	0x2000003c
						case MM_CONFIG:
							uint8_t min = getnumber(msg->payload, msg->len);
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	4619      	mov	r1, r3
 8002028:	4610      	mov	r0, r2
 800202a:	f000 f8a1 	bl	8002170 <getnumber>
 800202e:	4603      	mov	r3, r0
 8002030:	747b      	strb	r3, [r7, #17]
							time.Minutes = min;
 8002032:	4a44      	ldr	r2, [pc, #272]	@ (8002144 <rtc_task+0x46c>)
 8002034:	7c7b      	ldrb	r3, [r7, #17]
 8002036:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = SS_CONFIG;
 8002038:	4b43      	ldr	r3, [pc, #268]	@ (8002148 <rtc_task+0x470>)
 800203a:	2202      	movs	r2, #2
 800203c:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 800203e:	4b43      	ldr	r3, [pc, #268]	@ (800214c <rtc_task+0x474>)
 8002040:	6818      	ldr	r0, [r3, #0]
 8002042:	2300      	movs	r3, #0
 8002044:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002048:	4941      	ldr	r1, [pc, #260]	@ (8002150 <rtc_task+0x478>)
 800204a:	f006 f947 	bl	80082dc <xQueueGenericSend>
							break;
 800204e:	e053      	b.n	80020f8 <rtc_task+0x420>
						case SS_CONFIG:
							uint8_t sec = getnumber(msg->payload, msg->len);
 8002050:	697a      	ldr	r2, [r7, #20]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4619      	mov	r1, r3
 8002058:	4610      	mov	r0, r2
 800205a:	f000 f889 	bl	8002170 <getnumber>
 800205e:	4603      	mov	r3, r0
 8002060:	74bb      	strb	r3, [r7, #18]
							time.Seconds = sec;
 8002062:	4a38      	ldr	r2, [pc, #224]	@ (8002144 <rtc_task+0x46c>)
 8002064:	7cbb      	ldrb	r3, [r7, #18]
 8002066:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = AMPM_CONFIG;
 8002068:	4b37      	ldr	r3, [pc, #220]	@ (8002148 <rtc_task+0x470>)
 800206a:	2203      	movs	r2, #3
 800206c:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ampm, portMAX_DELAY);
 800206e:	4b37      	ldr	r3, [pc, #220]	@ (800214c <rtc_task+0x474>)
 8002070:	6818      	ldr	r0, [r3, #0]
 8002072:	2300      	movs	r3, #0
 8002074:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002078:	4936      	ldr	r1, [pc, #216]	@ (8002154 <rtc_task+0x47c>)
 800207a:	f006 f92f 	bl	80082dc <xQueueGenericSend>
							break;
 800207e:	e03b      	b.n	80020f8 <rtc_task+0x420>
						case AMPM_CONFIG:
							uint8_t opt = getnumber(msg->payload, msg->len);
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4619      	mov	r1, r3
 8002088:	4610      	mov	r0, r2
 800208a:	f000 f871 	bl	8002170 <getnumber>
 800208e:	4603      	mov	r3, r0
 8002090:	74fb      	strb	r3, [r7, #19]
							time.TimeFormat = opt; // Note: 0 = RTC_HOURFORMAT12_AM, 1 = RTC_HOURFORMAT12_PM
 8002092:	4a2c      	ldr	r2, [pc, #176]	@ (8002144 <rtc_task+0x46c>)
 8002094:	7cfb      	ldrb	r3, [r7, #19]
 8002096:	70d3      	strb	r3, [r2, #3]
							
							// Check that the user entered a valid date entry, configure time
							if(!validate_rtc_information(&time, NULL)) {
 8002098:	2100      	movs	r1, #0
 800209a:	482a      	ldr	r0, [pc, #168]	@ (8002144 <rtc_task+0x46c>)
 800209c:	f000 f889 	bl	80021b2 <validate_rtc_information>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d112      	bne.n	80020cc <rtc_task+0x3f4>
								rtc_configure_time(&time); // Configure time
 80020a6:	4827      	ldr	r0, [pc, #156]	@ (8002144 <rtc_task+0x46c>)
 80020a8:	f000 f8ba 	bl	8002220 <rtc_configure_time>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY); // Send confirmation to print queue
 80020ac:	4b27      	ldr	r3, [pc, #156]	@ (800214c <rtc_task+0x474>)
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	2300      	movs	r3, #0
 80020b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020b6:	4928      	ldr	r1, [pc, #160]	@ (8002158 <rtc_task+0x480>)
 80020b8:	f006 f910 	bl	80082dc <xQueueGenericSend>
								xSemaphoreGive(rtcSemaphore); // Give rtcSemaphore for led_task to light LED
 80020bc:	4b27      	ldr	r3, [pc, #156]	@ (800215c <rtc_task+0x484>)
 80020be:	6818      	ldr	r0, [r3, #0]
 80020c0:	2300      	movs	r3, #0
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	f006 f909 	bl	80082dc <xQueueGenericSend>
 80020ca:	e00e      	b.n	80020ea <rtc_task+0x412>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 80020cc:	4b1f      	ldr	r3, [pc, #124]	@ (800214c <rtc_task+0x474>)
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	2300      	movs	r3, #0
 80020d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020d6:	4922      	ldr	r1, [pc, #136]	@ (8002160 <rtc_task+0x488>)
 80020d8:	f006 f900 	bl	80082dc <xQueueGenericSend>
								// Give semaphore for led_task to turn LEDs off
								xSemaphoreGive(ledOffSemaphore);
 80020dc:	4b21      	ldr	r3, [pc, #132]	@ (8002164 <rtc_task+0x48c>)
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	2300      	movs	r3, #0
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	f006 f8f9 	bl	80082dc <xQueueGenericSend>
							}
							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 80020ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002168 <rtc_task+0x490>)
 80020ec:	2203      	movs	r2, #3
 80020ee:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 80020f0:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <rtc_task+0x470>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
							break;
 80020f6:	bf00      	nop
					}
					break;
 80020f8:	e014      	b.n	8002124 <rtc_task+0x44c>
				default:
					// Return control to the main menu task
					curr_sys_state = sMainMenu;
 80020fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002168 <rtc_task+0x490>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8002100:	4b12      	ldr	r3, [pc, #72]	@ (800214c <rtc_task+0x474>)
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	2300      	movs	r3, #0
 8002106:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800210a:	4915      	ldr	r1, [pc, #84]	@ (8002160 <rtc_task+0x488>)
 800210c:	f006 f8e6 	bl	80082dc <xQueueGenericSend>
					// Give semaphore for led_task to turn LEDs off
					xSemaphoreGive(ledOffSemaphore);
 8002110:	4b14      	ldr	r3, [pc, #80]	@ (8002164 <rtc_task+0x48c>)
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	2300      	movs	r3, #0
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	f006 f8df 	bl	80082dc <xQueueGenericSend>
					break;
 800211e:	e002      	b.n	8002126 <rtc_task+0x44e>
					break;
 8002120:	bf00      	nop
 8002122:	e000      	b.n	8002126 <rtc_task+0x44e>
					break;
 8002124:	bf00      	nop
		while(curr_sys_state != sMainMenu) {
 8002126:	4b10      	ldr	r3, [pc, #64]	@ (8002168 <rtc_task+0x490>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	f47f ade2 	bne.w	8001cf4 <rtc_task+0x1c>
			}

		} // while end

		// Notify the main menu task
		xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8002130:	4b0e      	ldr	r3, [pc, #56]	@ (800216c <rtc_task+0x494>)
 8002132:	6818      	ldr	r0, [r3, #0]
 8002134:	2300      	movs	r3, #0
 8002136:	9300      	str	r3, [sp, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	2200      	movs	r2, #0
 800213c:	2100      	movs	r1, #0
 800213e:	f008 f85b 	bl	800a1f8 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002142:	e5cd      	b.n	8001ce0 <rtc_task+0x8>
 8002144:	20000148 	.word	0x20000148
 8002148:	20000144 	.word	0x20000144
 800214c:	2000031c 	.word	0x2000031c
 8002150:	20000040 	.word	0x20000040
 8002154:	20000044 	.word	0x20000044
 8002158:	20000034 	.word	0x20000034
 800215c:	20000338 	.word	0x20000338
 8002160:	20000030 	.word	0x20000030
 8002164:	2000033c 	.word	0x2000033c
 8002168:	20000341 	.word	0x20000341
 800216c:	20000300 	.word	0x20000300

08002170 <getnumber>:
 * @note This function assumes only one or two digits in the ASCII number. If there are more than	   *
 *       two digits, it will only convert the first two to a number.								   *
  ******************************************************************************************************/

uint8_t getnumber(uint8_t *p, int len)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
	return (len > 1) ? ( ((p[0]-48) * 10) + (p[1]-48) ) : (p[0]-48);
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2b01      	cmp	r3, #1
 800217e:	dd0e      	ble.n	800219e <getnumber+0x2e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	0092      	lsls	r2, r2, #2
 8002188:	4413      	add	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	b2da      	uxtb	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	3301      	adds	r3, #1
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4413      	add	r3, r2
 8002196:	b2db      	uxtb	r3, r3
 8002198:	3b10      	subs	r3, #16
 800219a:	b2db      	uxtb	r3, r3
 800219c:	e003      	b.n	80021a6 <getnumber+0x36>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	3b30      	subs	r3, #48	@ 0x30
 80021a4:	b2db      	uxtb	r3, r3
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <validate_rtc_information>:
 *       - Year should be in the range 0-99 (assumption is 21st century).							   *
 *       - Month should be in the range 1-12.														   *
  ******************************************************************************************************/

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
	if(time) {
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d011      	beq.n	80021e6 <validate_rtc_information+0x34>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) || (time->TimeFormat > 1) )
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b0c      	cmp	r3, #12
 80021c8:	d80b      	bhi.n	80021e2 <validate_rtc_information+0x30>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	785b      	ldrb	r3, [r3, #1]
 80021ce:	2b3b      	cmp	r3, #59	@ 0x3b
 80021d0:	d807      	bhi.n	80021e2 <validate_rtc_information+0x30>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	789b      	ldrb	r3, [r3, #2]
 80021d6:	2b3b      	cmp	r3, #59	@ 0x3b
 80021d8:	d803      	bhi.n	80021e2 <validate_rtc_information+0x30>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	78db      	ldrb	r3, [r3, #3]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d901      	bls.n	80021e6 <validate_rtc_information+0x34>
			return 1;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e015      	b.n	8002212 <validate_rtc_information+0x60>
	}
	if(date) {
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d011      	beq.n	8002210 <validate_rtc_information+0x5e>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	789b      	ldrb	r3, [r3, #2]
 80021f0:	2b1f      	cmp	r3, #31
 80021f2:	d80b      	bhi.n	800220c <validate_rtc_information+0x5a>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b07      	cmp	r3, #7
 80021fa:	d807      	bhi.n	800220c <validate_rtc_information+0x5a>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	78db      	ldrb	r3, [r3, #3]
 8002200:	2b63      	cmp	r3, #99	@ 0x63
 8002202:	d803      	bhi.n	800220c <validate_rtc_information+0x5a>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	785b      	ldrb	r3, [r3, #1]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d901      	bls.n	8002210 <validate_rtc_information+0x5e>
			return 1;
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <validate_rtc_information+0x60>
	}

	return 0;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
	...

08002220 <rtc_configure_time>:
 * @note The DayLightSaving defaults to RTC_DAYLIGHTSAVING_NONE (disable daylight saving).			   *
 * @note The StoreOperation defaults to RTC_STOREOPERATION_RESET.									   *														   *
  ******************************************************************************************************/

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b082      	sub	sp, #8
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8002234:	2200      	movs	r2, #0
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4803      	ldr	r0, [pc, #12]	@ (8002248 <rtc_configure_time+0x28>)
 800223a:	f002 fbe0 	bl	80049fe <HAL_RTC_SetTime>
}
 800223e:	bf00      	nop
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200001b0 	.word	0x200001b0

0800224c <rtc_configure_date>:
 * 																									   *
 * @note This function uses the HAL library to set the RTC date in binary format (RTC_FORMAT_BIN). 	   *
  ******************************************************************************************************/

void rtc_configure_date(RTC_DateTypeDef *date)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8002254:	2200      	movs	r2, #0
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4803      	ldr	r0, [pc, #12]	@ (8002268 <rtc_configure_date+0x1c>)
 800225a:	f002 fcc8 	bl	8004bee <HAL_RTC_SetDate>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	200001b0 	.word	0x200001b0

0800226c <show_time_date>:
 * 		 format "day, month-date-year". 															   *
 * @note The function assumes the presence of a queue `q_print` to send the formatted strings.		   *
  ******************************************************************************************************/

void show_time_date(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08c      	sub	sp, #48	@ 0x30
 8002270:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	2204      	movs	r2, #4
 8002278:	2100      	movs	r1, #0
 800227a:	4618      	mov	r0, r3
 800227c:	f00b f902 	bl	800d484 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8002280:	463b      	mov	r3, r7
 8002282:	2214      	movs	r2, #20
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f00b f8fc 	bl	800d484 <memset>

	// Get the RTC current time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800228c:	463b      	mov	r3, r7
 800228e:	2200      	movs	r2, #0
 8002290:	4619      	mov	r1, r3
 8002292:	4837      	ldr	r0, [pc, #220]	@ (8002370 <show_time_date+0x104>)
 8002294:	f002 fc4d 	bl	8004b32 <HAL_RTC_GetTime>

	// Get the RTC current date
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	4619      	mov	r1, r3
 80022a0:	4833      	ldr	r0, [pc, #204]	@ (8002370 <show_time_date+0x104>)
 80022a2:	f002 fd28 	bl	8004cf6 <HAL_RTC_GetDate>

	// Get AM / PM
	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d101      	bne.n	80022b0 <show_time_date+0x44>
 80022ac:	4b31      	ldr	r3, [pc, #196]	@ (8002374 <show_time_date+0x108>)
 80022ae:	e000      	b.n	80022b2 <show_time_date+0x46>
 80022b0:	4b31      	ldr	r3, [pc, #196]	@ (8002378 <show_time_date+0x10c>)
 80022b2:	61bb      	str	r3, [r7, #24]

	// Display time format: hh:mm:ss [AM/PM]
	sprintf((char*)showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time & Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 80022b4:	783b      	ldrb	r3, [r7, #0]
 80022b6:	4618      	mov	r0, r3
 80022b8:	787b      	ldrb	r3, [r7, #1]
 80022ba:	461a      	mov	r2, r3
 80022bc:	78bb      	ldrb	r3, [r7, #2]
 80022be:	4619      	mov	r1, r3
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	9302      	str	r3, [sp, #8]
 80022c4:	9101      	str	r1, [sp, #4]
 80022c6:	9200      	str	r2, [sp, #0]
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a2c      	ldr	r2, [pc, #176]	@ (800237c <show_time_date+0x110>)
 80022cc:	492c      	ldr	r1, [pc, #176]	@ (8002380 <show_time_date+0x114>)
 80022ce:	482d      	ldr	r0, [pc, #180]	@ (8002384 <show_time_date+0x118>)
 80022d0:	f00b f8a8 	bl	800d424 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 80022d4:	4b2c      	ldr	r3, [pc, #176]	@ (8002388 <show_time_date+0x11c>)
 80022d6:	6818      	ldr	r0, [r3, #0]
 80022d8:	2300      	movs	r3, #0
 80022da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022de:	492b      	ldr	r1, [pc, #172]	@ (800238c <show_time_date+0x120>)
 80022e0:	f005 fffc 	bl	80082dc <xQueueGenericSend>

	// Convert the user input day of the week from a number to a string
	switch(rtc_date.WeekDay) {
 80022e4:	7d3b      	ldrb	r3, [r7, #20]
 80022e6:	3b01      	subs	r3, #1
 80022e8:	2b06      	cmp	r3, #6
 80022ea:	d826      	bhi.n	800233a <show_time_date+0xce>
 80022ec:	a201      	add	r2, pc, #4	@ (adr r2, 80022f4 <show_time_date+0x88>)
 80022ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f2:	bf00      	nop
 80022f4:	08002311 	.word	0x08002311
 80022f8:	08002317 	.word	0x08002317
 80022fc:	0800231d 	.word	0x0800231d
 8002300:	08002323 	.word	0x08002323
 8002304:	08002329 	.word	0x08002329
 8002308:	0800232f 	.word	0x0800232f
 800230c:	08002335 	.word	0x08002335
		case 1:
			weekday = "Sunday";
 8002310:	4b1f      	ldr	r3, [pc, #124]	@ (8002390 <show_time_date+0x124>)
 8002312:	61fb      	str	r3, [r7, #28]
			break;
 8002314:	e011      	b.n	800233a <show_time_date+0xce>
		case 2:
			weekday = "Monday";
 8002316:	4b1f      	ldr	r3, [pc, #124]	@ (8002394 <show_time_date+0x128>)
 8002318:	61fb      	str	r3, [r7, #28]
			break;
 800231a:	e00e      	b.n	800233a <show_time_date+0xce>
		case 3:
			weekday = "Tuesday";
 800231c:	4b1e      	ldr	r3, [pc, #120]	@ (8002398 <show_time_date+0x12c>)
 800231e:	61fb      	str	r3, [r7, #28]
			break;
 8002320:	e00b      	b.n	800233a <show_time_date+0xce>
		case 4:
			weekday = "Wednesday";
 8002322:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <show_time_date+0x130>)
 8002324:	61fb      	str	r3, [r7, #28]
			break;
 8002326:	e008      	b.n	800233a <show_time_date+0xce>
		case 5:
			weekday = "Thursday";
 8002328:	4b1d      	ldr	r3, [pc, #116]	@ (80023a0 <show_time_date+0x134>)
 800232a:	61fb      	str	r3, [r7, #28]
			break;
 800232c:	e005      	b.n	800233a <show_time_date+0xce>
		case 6:
			weekday = "Friday";
 800232e:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <show_time_date+0x138>)
 8002330:	61fb      	str	r3, [r7, #28]
			break;
 8002332:	e002      	b.n	800233a <show_time_date+0xce>
		case 7:
			weekday = "Saturday";
 8002334:	4b1c      	ldr	r3, [pc, #112]	@ (80023a8 <show_time_date+0x13c>)
 8002336:	61fb      	str	r3, [r7, #28]
			break;
 8002338:	bf00      	nop
	}
	
	// Display date format: day, month-date-year
	sprintf((char*)showdate, "\t%s, %02d-%02d-%02d\n", weekday, rtc_date.Month, rtc_date.Date, rtc_date.Year + 2000);
 800233a:	7d7b      	ldrb	r3, [r7, #21]
 800233c:	4619      	mov	r1, r3
 800233e:	7dbb      	ldrb	r3, [r7, #22]
 8002340:	461a      	mov	r2, r3
 8002342:	7dfb      	ldrb	r3, [r7, #23]
 8002344:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	9200      	str	r2, [sp, #0]
 800234c:	460b      	mov	r3, r1
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	4916      	ldr	r1, [pc, #88]	@ (80023ac <show_time_date+0x140>)
 8002352:	4817      	ldr	r0, [pc, #92]	@ (80023b0 <show_time_date+0x144>)
 8002354:	f00b f866 	bl	800d424 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 8002358:	4b0b      	ldr	r3, [pc, #44]	@ (8002388 <show_time_date+0x11c>)
 800235a:	6818      	ldr	r0, [r3, #0]
 800235c:	2300      	movs	r3, #0
 800235e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002362:	4914      	ldr	r1, [pc, #80]	@ (80023b4 <show_time_date+0x148>)
 8002364:	f005 ffba 	bl	80082dc <xQueueGenericSend>
}
 8002368:	bf00      	nop
 800236a:	3720      	adds	r7, #32
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	200001b0 	.word	0x200001b0
 8002374:	0800e674 	.word	0x0800e674
 8002378:	0800e678 	.word	0x0800e678
 800237c:	0800e67c 	.word	0x0800e67c
 8002380:	0800e694 	.word	0x0800e694
 8002384:	20000160 	.word	0x20000160
 8002388:	2000031c 	.word	0x2000031c
 800238c:	20000060 	.word	0x20000060
 8002390:	0800e6ac 	.word	0x0800e6ac
 8002394:	0800e6b4 	.word	0x0800e6b4
 8002398:	0800e6bc 	.word	0x0800e6bc
 800239c:	0800e6c4 	.word	0x0800e6c4
 80023a0:	0800e6d0 	.word	0x0800e6d0
 80023a4:	0800e6dc 	.word	0x0800e6dc
 80023a8:	0800e6e4 	.word	0x0800e6e4
 80023ac:	0800e6f0 	.word	0x0800e6f0
 80023b0:	20000188 	.word	0x20000188
 80023b4:	20000064 	.word	0x20000064

080023b8 <main_menu_task>:
 *       command is available.                                                                         *
 * @note The main menu is displayed, and the user input is processed. Invalid inputs are handled and   *
 * an error message is sent to the print queue.                                                        *
 ******************************************************************************************************/
void main_menu_task(void *param)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b088      	sub	sp, #32
 80023bc:	af02      	add	r7, sp, #8
 80023be:	6078      	str	r0, [r7, #4]
	int option;

	while(1) {

		// Present the main menu to the user
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 80023c0:	4b3c      	ldr	r3, [pc, #240]	@ (80024b4 <main_menu_task+0xfc>)
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	2300      	movs	r3, #0
 80023c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023ca:	493b      	ldr	r1, [pc, #236]	@ (80024b8 <main_menu_task+0x100>)
 80023cc:	f005 ff86 	bl	80082dc <xQueueGenericSend>

		// Wait for user to select a menu option
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023d8:	9200      	str	r2, [sp, #0]
 80023da:	2200      	movs	r2, #0
 80023dc:	2100      	movs	r1, #0
 80023de:	2000      	movs	r0, #0
 80023e0:	f007 fe80 	bl	800a0e4 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	617b      	str	r3, [r7, #20]

		if(msg->len == 1) {
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d14e      	bne.n	800248e <main_menu_task+0xd6>
			// Get user option, convert from ASCII to number
			option = msg->payload[0] - 48;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	3b30      	subs	r3, #48	@ 0x30
 80023f6:	613b      	str	r3, [r7, #16]
			switch(option) {
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	2b03      	cmp	r3, #3
 80023fc:	d83e      	bhi.n	800247c <main_menu_task+0xc4>
 80023fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002404 <main_menu_task+0x4c>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	08002415 	.word	0x08002415
 8002408:	0800242f 	.word	0x0800242f
 800240c:	08002449 	.word	0x08002449
 8002410:	08002463 	.word	0x08002463
				case 0:
					// User selection: LED menu
					curr_sys_state = sLedMenu;
 8002414:	4b29      	ldr	r3, [pc, #164]	@ (80024bc <main_menu_task+0x104>)
 8002416:	2201      	movs	r2, #1
 8002418:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 800241a:	4b29      	ldr	r3, [pc, #164]	@ (80024c0 <main_menu_task+0x108>)
 800241c:	6818      	ldr	r0, [r3, #0]
 800241e:	2300      	movs	r3, #0
 8002420:	9300      	str	r3, [sp, #0]
 8002422:	2300      	movs	r3, #0
 8002424:	2200      	movs	r2, #0
 8002426:	2100      	movs	r1, #0
 8002428:	f007 fee6 	bl	800a1f8 <xTaskGenericNotify>
					break;
 800242c:	e038      	b.n	80024a0 <main_menu_task+0xe8>
				case 1:
					curr_sys_state = sRtcMenu;
 800242e:	4b23      	ldr	r3, [pc, #140]	@ (80024bc <main_menu_task+0x104>)
 8002430:	2203      	movs	r2, #3
 8002432:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 8002434:	4b23      	ldr	r3, [pc, #140]	@ (80024c4 <main_menu_task+0x10c>)
 8002436:	6818      	ldr	r0, [r3, #0]
 8002438:	2300      	movs	r3, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	2300      	movs	r3, #0
 800243e:	2200      	movs	r2, #0
 8002440:	2100      	movs	r1, #0
 8002442:	f007 fed9 	bl	800a1f8 <xTaskGenericNotify>
					break;
 8002446:	e02b      	b.n	80024a0 <main_menu_task+0xe8>
				case 2:
					curr_sys_state = sAccMenu;
 8002448:	4b1c      	ldr	r3, [pc, #112]	@ (80024bc <main_menu_task+0x104>)
 800244a:	2202      	movs	r2, #2
 800244c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_acc_task, 0, eNoAction);
 800244e:	4b1e      	ldr	r3, [pc, #120]	@ (80024c8 <main_menu_task+0x110>)
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	2300      	movs	r3, #0
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2300      	movs	r3, #0
 8002458:	2200      	movs	r2, #0
 800245a:	2100      	movs	r1, #0
 800245c:	f007 fecc 	bl	800a1f8 <xTaskGenericNotify>
					break;
 8002460:	e01e      	b.n	80024a0 <main_menu_task+0xe8>
				case 3:
					curr_sys_state = sMotorMenu;
 8002462:	4b16      	ldr	r3, [pc, #88]	@ (80024bc <main_menu_task+0x104>)
 8002464:	2204      	movs	r2, #4
 8002466:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_motor_task, 0, eNoAction);
 8002468:	4b18      	ldr	r3, [pc, #96]	@ (80024cc <main_menu_task+0x114>)
 800246a:	6818      	ldr	r0, [r3, #0]
 800246c:	2300      	movs	r3, #0
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	2200      	movs	r2, #0
 8002474:	2100      	movs	r1, #0
 8002476:	f007 febf 	bl	800a1f8 <xTaskGenericNotify>
					break;
 800247a:	e011      	b.n	80024a0 <main_menu_task+0xe8>
				default:
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 800247c:	4b0d      	ldr	r3, [pc, #52]	@ (80024b4 <main_menu_task+0xfc>)
 800247e:	6818      	ldr	r0, [r3, #0]
 8002480:	2300      	movs	r3, #0
 8002482:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002486:	4912      	ldr	r1, [pc, #72]	@ (80024d0 <main_menu_task+0x118>)
 8002488:	f005 ff28 	bl	80082dc <xQueueGenericSend>
					continue;
 800248c:	e011      	b.n	80024b2 <main_menu_task+0xfa>
			}
		}
		// Handle invalid entry
		else {
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 800248e:	4b09      	ldr	r3, [pc, #36]	@ (80024b4 <main_menu_task+0xfc>)
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	2300      	movs	r3, #0
 8002494:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002498:	490d      	ldr	r1, [pc, #52]	@ (80024d0 <main_menu_task+0x118>)
 800249a:	f005 ff1f 	bl	80082dc <xQueueGenericSend>
			continue;
 800249e:	e008      	b.n	80024b2 <main_menu_task+0xfa>
		}

		// Wait for notification from another task before running again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	2300      	movs	r3, #0
 80024a8:	2200      	movs	r2, #0
 80024aa:	2100      	movs	r1, #0
 80024ac:	2000      	movs	r0, #0
 80024ae:	f007 fe19 	bl	800a0e4 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 80024b2:	e785      	b.n	80023c0 <main_menu_task+0x8>
 80024b4:	2000031c 	.word	0x2000031c
 80024b8:	2000006c 	.word	0x2000006c
 80024bc:	20000341 	.word	0x20000341
 80024c0:	2000030c 	.word	0x2000030c
 80024c4:	20000310 	.word	0x20000310
 80024c8:	20000314 	.word	0x20000314
 80024cc:	20000318 	.word	0x20000318
 80024d0:	20000068 	.word	0x20000068

080024d4 <message_handler_task>:
 * @note The data queue (`q_data`) and print queue (`q_print`) must be initialized. The task must be   *
 *       notified when a new message is available.                                                     *
 * @note The processed message is sent to the print queue (`q_print`).                                 *
 ******************************************************************************************************/
void message_handler_task(void *param)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	@ 0x28
 80024d8:	af02      	add	r7, sp, #8
 80024da:	6078      	str	r0, [r7, #4]
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80024dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024e0:	9300      	str	r3, [sp, #0]
 80024e2:	2300      	movs	r3, #0
 80024e4:	2200      	movs	r2, #0
 80024e6:	2100      	movs	r1, #0
 80024e8:	2000      	movs	r0, #0
 80024ea:	f007 fdfb 	bl	800a0e4 <xTaskGenericNotifyWait>
 80024ee:	61f8      	str	r0, [r7, #28]

		if(pdTRUE == ret) {
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d1f2      	bne.n	80024dc <message_handler_task+0x8>
			// Process the message stored in the input data queue
			process_message(&msg);
 80024f6:	f107 030c 	add.w	r3, r7, #12
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f822 	bl	8002544 <process_message>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002500:	e7ec      	b.n	80024dc <message_handler_task+0x8>
	...

08002504 <print_task>:
 * @note This function is intended to run as a FreeRTOS task.                                          *
 * @note The print queue (`q_print`) must be initialized and contain messages to print.                *
 * @note The received message is transmitted via UART.                                                 *
 ******************************************************************************************************/
void print_task(void *param)
{
 8002504:	b590      	push	{r4, r7, lr}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 800250c:	4b0b      	ldr	r3, [pc, #44]	@ (800253c <print_task+0x38>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f107 010c 	add.w	r1, r7, #12
 8002514:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002518:	4618      	mov	r0, r3
 800251a:	f006 f8cb 	bl	80086b4 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 800251e:	68fc      	ldr	r4, [r7, #12]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd fea8 	bl	8000278 <strlen>
 8002528:	4603      	mov	r3, r0
 800252a:	b29a      	uxth	r2, r3
 800252c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002530:	4621      	mov	r1, r4
 8002532:	4803      	ldr	r0, [pc, #12]	@ (8002540 <print_task+0x3c>)
 8002534:	f004 fb8a 	bl	8006c4c <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8002538:	bf00      	nop
 800253a:	e7e7      	b.n	800250c <print_task+0x8>
 800253c:	2000031c 	.word	0x2000031c
 8002540:	200002b8 	.word	0x200002b8

08002544 <process_message>:
 * @return void                                                                                        *
 *                                                                                                     *
 * @note This function is called by the `message_handler_task` when a notification is received.        *
 * @note The data queue (`q_data`) must be initialized and contain a message to process.               *
 ******************************************************************************************************/
void process_message(message_t *msg) {
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af02      	add	r7, sp, #8
 800254a:	6078      	str	r0, [r7, #4]

	extract_command(msg);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 f859 	bl	8002604 <extract_command>

	switch(curr_sys_state) {
 8002552:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <process_message+0xa8>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b06      	cmp	r3, #6
 8002558:	d842      	bhi.n	80025e0 <process_message+0x9c>
 800255a:	a201      	add	r2, pc, #4	@ (adr r2, 8002560 <process_message+0x1c>)
 800255c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002560:	0800257d 	.word	0x0800257d
 8002564:	08002591 	.word	0x08002591
 8002568:	080025a5 	.word	0x080025a5
 800256c:	080025cd 	.word	0x080025cd
 8002570:	080025b9 	.word	0x080025b9
 8002574:	080025cd 	.word	0x080025cd
 8002578:	080025cd 	.word	0x080025cd
		case sMainMenu:
			// Notify the main menu task and pass the message
			xTaskNotify(handle_main_menu_task, (uint32_t)msg, eSetValueWithOverwrite);
 800257c:	4b1c      	ldr	r3, [pc, #112]	@ (80025f0 <process_message+0xac>)
 800257e:	6818      	ldr	r0, [r3, #0]
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	2300      	movs	r3, #0
 8002584:	9300      	str	r3, [sp, #0]
 8002586:	2303      	movs	r3, #3
 8002588:	2100      	movs	r1, #0
 800258a:	f007 fe35 	bl	800a1f8 <xTaskGenericNotify>
			break;
 800258e:	e028      	b.n	80025e2 <process_message+0x9e>
		case sLedMenu:
			// Notify the led task and pass the message
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
 8002590:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <process_message+0xb0>)
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	2300      	movs	r3, #0
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2303      	movs	r3, #3
 800259c:	2100      	movs	r1, #0
 800259e:	f007 fe2b 	bl	800a1f8 <xTaskGenericNotify>
			break;
 80025a2:	e01e      	b.n	80025e2 <process_message+0x9e>
		case sAccMenu:
			// Notify the ACC task and pass the message
			xTaskNotify(handle_acc_task, (uint32_t)msg, eSetValueWithOverwrite);
 80025a4:	4b14      	ldr	r3, [pc, #80]	@ (80025f8 <process_message+0xb4>)
 80025a6:	6818      	ldr	r0, [r3, #0]
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	2300      	movs	r3, #0
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	2303      	movs	r3, #3
 80025b0:	2100      	movs	r1, #0
 80025b2:	f007 fe21 	bl	800a1f8 <xTaskGenericNotify>
			break;
 80025b6:	e014      	b.n	80025e2 <process_message+0x9e>
		case sMotorMenu:
			// Notify the motor task and pass the message
			xTaskNotify(handle_motor_task, (uint32_t)msg, eSetValueWithOverwrite);
 80025b8:	4b10      	ldr	r3, [pc, #64]	@ (80025fc <process_message+0xb8>)
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	2300      	movs	r3, #0
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2303      	movs	r3, #3
 80025c4:	2100      	movs	r1, #0
 80025c6:	f007 fe17 	bl	800a1f8 <xTaskGenericNotify>
			break;
 80025ca:	e00a      	b.n	80025e2 <process_message+0x9e>
		case sRtcMenu:
		case sRtcTimeConfig:
		case sRtcDateConfig:
			// Notify the RTC task and pass the message
			xTaskNotify(handle_rtc_task, (uint32_t)msg, eSetValueWithOverwrite);
 80025cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <process_message+0xbc>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	687a      	ldr	r2, [r7, #4]
 80025d2:	2300      	movs	r3, #0
 80025d4:	9300      	str	r3, [sp, #0]
 80025d6:	2303      	movs	r3, #3
 80025d8:	2100      	movs	r1, #0
 80025da:	f007 fe0d 	bl	800a1f8 <xTaskGenericNotify>
			break;
 80025de:	e000      	b.n	80025e2 <process_message+0x9e>
		default:
			break;
 80025e0:	bf00      	nop
	}
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000341 	.word	0x20000341
 80025f0:	20000300 	.word	0x20000300
 80025f4:	2000030c 	.word	0x2000030c
 80025f8:	20000314 	.word	0x20000314
 80025fc:	20000318 	.word	0x20000318
 8002600:	20000310 	.word	0x20000310

08002604 <extract_command>:
 * @note This function is called by `process_message` to parse the incoming command message.           *
 * @note The data queue (`q_data`) must be initialized and contain a message to extract.               *
 * @note The extracted command is stored in the `msg` structure, with its payload and length fields    *
 *       populated.                                                                                    *
 ******************************************************************************************************/
int extract_command(message_t *msg) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	// Check if there is data in the data queue
	status = uxQueueMessagesWaiting(q_data);
 800260c:	4b19      	ldr	r3, [pc, #100]	@ (8002674 <extract_command+0x70>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f006 fb53 	bl	8008cbc <uxQueueMessagesWaiting>
 8002616:	4603      	mov	r3, r0
 8002618:	613b      	str	r3, [r7, #16]
	if(!status) {
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d102      	bne.n	8002626 <extract_command+0x22>
		return -1;
 8002620:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002624:	e022      	b.n	800266c <extract_command+0x68>
	}

	// If data is available in the data queue, load it to the msg payload
	uint8_t i=0;
 8002626:	2300      	movs	r3, #0
 8002628:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 800262a:	4b12      	ldr	r3, [pc, #72]	@ (8002674 <extract_command+0x70>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f107 010f 	add.w	r1, r7, #15
 8002632:	2200      	movs	r2, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f006 f83d 	bl	80086b4 <xQueueReceive>
 800263a:	6138      	str	r0, [r7, #16]
		if(pdTRUE == status) {
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d106      	bne.n	8002650 <extract_command+0x4c>
			msg->payload[i++] = item;
 8002642:	7dfb      	ldrb	r3, [r7, #23]
 8002644:	1c5a      	adds	r2, r3, #1
 8002646:	75fa      	strb	r2, [r7, #23]
 8002648:	461a      	mov	r2, r3
 800264a:	7bf9      	ldrb	r1, [r7, #15]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\n');
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b0a      	cmp	r3, #10
 8002654:	d1e9      	bne.n	800262a <extract_command+0x26>

	// Set final character in message payload to null character
	msg->payload[i-1] = '\0';
 8002656:	7dfb      	ldrb	r3, [r7, #23]
 8002658:	3b01      	subs	r3, #1
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	2100      	movs	r1, #0
 800265e:	54d1      	strb	r1, [r2, r3]
	// Save length of message without null character
	msg->len = i-1;
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	3b01      	subs	r3, #1
 8002664:	461a      	mov	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	60da      	str	r2, [r3, #12]

	return 0;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	20000320 	.word	0x20000320

08002678 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b090      	sub	sp, #64	@ 0x40
 800267c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800267e:	f001 f809 	bl	8003694 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002682:	f000 f9ab 	bl	80029dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002686:	f000 fb97 	bl	8002db8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800268a:	f000 fb6b 	bl	8002d64 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800268e:	f000 fa11 	bl	8002ab4 <MX_RTC_Init>
  MX_SPI1_Init();
 8002692:	f000 fa35 	bl	8002b00 <MX_SPI1_Init>
  MX_TIM3_Init();
 8002696:	f000 faed 	bl	8002c74 <MX_TIM3_Init>
  MX_TIM1_Init();
 800269a:	f000 fa67 	bl	8002b6c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 800269e:	4b9d      	ldr	r3, [pc, #628]	@ (8002914 <main+0x29c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a9c      	ldr	r2, [pc, #624]	@ (8002914 <main+0x29c>)
 80026a4:	f043 0301 	orr.w	r3, r3, #1
 80026a8:	6013      	str	r3, [r2, #0]

  // Start SEGGER recording
  SEGGER_SYSVIEW_Conf();
 80026aa:	f009 f8c1 	bl	800b830 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80026ae:	f00a f8e3 	bl	800c878 <SEGGER_SYSVIEW_Start>

  // Initialize the accelerometer
  accelerometer_init();
 80026b2:	f7fe fccb 	bl	800104c <accelerometer_init>

  // Create main menu task and check that it was created successfully
  status = xTaskCreate(main_menu_task, "main_menu_task", 250, NULL, 2, &handle_main_menu_task);
 80026b6:	4b98      	ldr	r3, [pc, #608]	@ (8002918 <main+0x2a0>)
 80026b8:	9301      	str	r3, [sp, #4]
 80026ba:	2302      	movs	r3, #2
 80026bc:	9300      	str	r3, [sp, #0]
 80026be:	2300      	movs	r3, #0
 80026c0:	22fa      	movs	r2, #250	@ 0xfa
 80026c2:	4996      	ldr	r1, [pc, #600]	@ (800291c <main+0x2a4>)
 80026c4:	4896      	ldr	r0, [pc, #600]	@ (8002920 <main+0x2a8>)
 80026c6:	f006 fccd 	bl	8009064 <xTaskCreate>
 80026ca:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 80026cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d00b      	beq.n	80026ea <main+0x72>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80026d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d6:	f383 8811 	msr	BASEPRI, r3
 80026da:	f3bf 8f6f 	isb	sy
 80026de:	f3bf 8f4f 	dsb	sy
 80026e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	e7fd      	b.n	80026e6 <main+0x6e>

  // Create message handler task and check that it was created successfully
  status = xTaskCreate(message_handler_task, "msg_task", 250, NULL, 2, &handle_message_handler_task);
 80026ea:	4b8e      	ldr	r3, [pc, #568]	@ (8002924 <main+0x2ac>)
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2302      	movs	r3, #2
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	2300      	movs	r3, #0
 80026f4:	22fa      	movs	r2, #250	@ 0xfa
 80026f6:	498c      	ldr	r1, [pc, #560]	@ (8002928 <main+0x2b0>)
 80026f8:	488c      	ldr	r0, [pc, #560]	@ (800292c <main+0x2b4>)
 80026fa:	f006 fcb3 	bl	8009064 <xTaskCreate>
 80026fe:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002702:	2b01      	cmp	r3, #1
 8002704:	d00b      	beq.n	800271e <main+0xa6>
        __asm volatile
 8002706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800270a:	f383 8811 	msr	BASEPRI, r3
 800270e:	f3bf 8f6f 	isb	sy
 8002712:	f3bf 8f4f 	dsb	sy
 8002716:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	e7fd      	b.n	800271a <main+0xa2>

  // Create print task and check that it was created successfully
  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800271e:	4b84      	ldr	r3, [pc, #528]	@ (8002930 <main+0x2b8>)
 8002720:	9301      	str	r3, [sp, #4]
 8002722:	2302      	movs	r3, #2
 8002724:	9300      	str	r3, [sp, #0]
 8002726:	2300      	movs	r3, #0
 8002728:	22fa      	movs	r2, #250	@ 0xfa
 800272a:	4982      	ldr	r1, [pc, #520]	@ (8002934 <main+0x2bc>)
 800272c:	4882      	ldr	r0, [pc, #520]	@ (8002938 <main+0x2c0>)
 800272e:	f006 fc99 	bl	8009064 <xTaskCreate>
 8002732:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002736:	2b01      	cmp	r3, #1
 8002738:	d00b      	beq.n	8002752 <main+0xda>
        __asm volatile
 800273a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800274c:	bf00      	nop
 800274e:	bf00      	nop
 8002750:	e7fd      	b.n	800274e <main+0xd6>

  // Create LED task and check that it was created successfully
  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8002752:	4b7a      	ldr	r3, [pc, #488]	@ (800293c <main+0x2c4>)
 8002754:	9301      	str	r3, [sp, #4]
 8002756:	2302      	movs	r3, #2
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2300      	movs	r3, #0
 800275c:	22fa      	movs	r2, #250	@ 0xfa
 800275e:	4978      	ldr	r1, [pc, #480]	@ (8002940 <main+0x2c8>)
 8002760:	4878      	ldr	r0, [pc, #480]	@ (8002944 <main+0x2cc>)
 8002762:	f006 fc7f 	bl	8009064 <xTaskCreate>
 8002766:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276a:	2b01      	cmp	r3, #1
 800276c:	d00b      	beq.n	8002786 <main+0x10e>
        __asm volatile
 800276e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002772:	f383 8811 	msr	BASEPRI, r3
 8002776:	f3bf 8f6f 	isb	sy
 800277a:	f3bf 8f4f 	dsb	sy
 800277e:	623b      	str	r3, [r7, #32]
    }
 8002780:	bf00      	nop
 8002782:	bf00      	nop
 8002784:	e7fd      	b.n	8002782 <main+0x10a>

  // Create RTC task and check that it was created successfully
  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8002786:	4b70      	ldr	r3, [pc, #448]	@ (8002948 <main+0x2d0>)
 8002788:	9301      	str	r3, [sp, #4]
 800278a:	2302      	movs	r3, #2
 800278c:	9300      	str	r3, [sp, #0]
 800278e:	2300      	movs	r3, #0
 8002790:	22fa      	movs	r2, #250	@ 0xfa
 8002792:	496e      	ldr	r1, [pc, #440]	@ (800294c <main+0x2d4>)
 8002794:	486e      	ldr	r0, [pc, #440]	@ (8002950 <main+0x2d8>)
 8002796:	f006 fc65 	bl	8009064 <xTaskCreate>
 800279a:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 800279c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d00b      	beq.n	80027ba <main+0x142>
        __asm volatile
 80027a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a6:	f383 8811 	msr	BASEPRI, r3
 80027aa:	f3bf 8f6f 	isb	sy
 80027ae:	f3bf 8f4f 	dsb	sy
 80027b2:	61fb      	str	r3, [r7, #28]
    }
 80027b4:	bf00      	nop
 80027b6:	bf00      	nop
 80027b8:	e7fd      	b.n	80027b6 <main+0x13e>

  // Create accelerometer task and check that it was created successfully
  status = xTaskCreate(acc_task, "accelerometer_task", 250, NULL, 2, &handle_acc_task);
 80027ba:	4b66      	ldr	r3, [pc, #408]	@ (8002954 <main+0x2dc>)
 80027bc:	9301      	str	r3, [sp, #4]
 80027be:	2302      	movs	r3, #2
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	2300      	movs	r3, #0
 80027c4:	22fa      	movs	r2, #250	@ 0xfa
 80027c6:	4964      	ldr	r1, [pc, #400]	@ (8002958 <main+0x2e0>)
 80027c8:	4864      	ldr	r0, [pc, #400]	@ (800295c <main+0x2e4>)
 80027ca:	f006 fc4b 	bl	8009064 <xTaskCreate>
 80027ce:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 80027d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d00b      	beq.n	80027ee <main+0x176>
        __asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	61bb      	str	r3, [r7, #24]
    }
 80027e8:	bf00      	nop
 80027ea:	bf00      	nop
 80027ec:	e7fd      	b.n	80027ea <main+0x172>

  // Create motor task and check that it was created successfully
  status = xTaskCreate(motor_task, "motor_task", 250, NULL, 2, &handle_motor_task);
 80027ee:	4b5c      	ldr	r3, [pc, #368]	@ (8002960 <main+0x2e8>)
 80027f0:	9301      	str	r3, [sp, #4]
 80027f2:	2302      	movs	r3, #2
 80027f4:	9300      	str	r3, [sp, #0]
 80027f6:	2300      	movs	r3, #0
 80027f8:	22fa      	movs	r2, #250	@ 0xfa
 80027fa:	495a      	ldr	r1, [pc, #360]	@ (8002964 <main+0x2ec>)
 80027fc:	485a      	ldr	r0, [pc, #360]	@ (8002968 <main+0x2f0>)
 80027fe:	f006 fc31 	bl	8009064 <xTaskCreate>
 8002802:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002806:	2b01      	cmp	r3, #1
 8002808:	d00b      	beq.n	8002822 <main+0x1aa>
        __asm volatile
 800280a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800280e:	f383 8811 	msr	BASEPRI, r3
 8002812:	f3bf 8f6f 	isb	sy
 8002816:	f3bf 8f4f 	dsb	sy
 800281a:	617b      	str	r3, [r7, #20]
    }
 800281c:	bf00      	nop
 800281e:	bf00      	nop
 8002820:	e7fd      	b.n	800281e <main+0x1a6>

  // Create data queue and check that it was created successfully
  q_data = xQueueCreate(10, sizeof(char));
 8002822:	2200      	movs	r2, #0
 8002824:	2101      	movs	r1, #1
 8002826:	200a      	movs	r0, #10
 8002828:	f005 fccc 	bl	80081c4 <xQueueGenericCreate>
 800282c:	4603      	mov	r3, r0
 800282e:	4a4f      	ldr	r2, [pc, #316]	@ (800296c <main+0x2f4>)
 8002830:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_data);
 8002832:	4b4e      	ldr	r3, [pc, #312]	@ (800296c <main+0x2f4>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10b      	bne.n	8002852 <main+0x1da>
        __asm volatile
 800283a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800283e:	f383 8811 	msr	BASEPRI, r3
 8002842:	f3bf 8f6f 	isb	sy
 8002846:	f3bf 8f4f 	dsb	sy
 800284a:	613b      	str	r3, [r7, #16]
    }
 800284c:	bf00      	nop
 800284e:	bf00      	nop
 8002850:	e7fd      	b.n	800284e <main+0x1d6>

  // Create print queue and check that it was created successfully
  q_print = xQueueCreate(10, sizeof(size_t));
 8002852:	2200      	movs	r2, #0
 8002854:	2104      	movs	r1, #4
 8002856:	200a      	movs	r0, #10
 8002858:	f005 fcb4 	bl	80081c4 <xQueueGenericCreate>
 800285c:	4603      	mov	r3, r0
 800285e:	4a44      	ldr	r2, [pc, #272]	@ (8002970 <main+0x2f8>)
 8002860:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_print);
 8002862:	4b43      	ldr	r3, [pc, #268]	@ (8002970 <main+0x2f8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <main+0x20a>
        __asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	60fb      	str	r3, [r7, #12]
    }
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	e7fd      	b.n	800287e <main+0x206>

  // Create an event group to synchronize accelerometer readings and LED triggers
  ledEventGroup = xEventGroupCreate();
 8002882:	f005 f9e9 	bl	8007c58 <xEventGroupCreate>
 8002886:	4603      	mov	r3, r0
 8002888:	4a3a      	ldr	r2, [pc, #232]	@ (8002974 <main+0x2fc>)
 800288a:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != ledEventGroup);
 800288c:	4b39      	ldr	r3, [pc, #228]	@ (8002974 <main+0x2fc>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10b      	bne.n	80028ac <main+0x234>
        __asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	60bb      	str	r3, [r7, #8]
    }
 80028a6:	bf00      	nop
 80028a8:	bf00      	nop
 80028aa:	e7fd      	b.n	80028a8 <main+0x230>

  // Create a binary semaphore to synchronize RTC configuration and LED triggers
  rtcSemaphore = xSemaphoreCreateBinary();
 80028ac:	2203      	movs	r2, #3
 80028ae:	2100      	movs	r1, #0
 80028b0:	2001      	movs	r0, #1
 80028b2:	f005 fc87 	bl	80081c4 <xQueueGenericCreate>
 80028b6:	4603      	mov	r3, r0
 80028b8:	4a2f      	ldr	r2, [pc, #188]	@ (8002978 <main+0x300>)
 80028ba:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != rtcSemaphore);
 80028bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002978 <main+0x300>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10b      	bne.n	80028dc <main+0x264>
        __asm volatile
 80028c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c8:	f383 8811 	msr	BASEPRI, r3
 80028cc:	f3bf 8f6f 	isb	sy
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	607b      	str	r3, [r7, #4]
    }
 80028d6:	bf00      	nop
 80028d8:	bf00      	nop
 80028da:	e7fd      	b.n	80028d8 <main+0x260>

  // Create a binary semaphore to synchronize LEDs off after exiting RTC menu
  ledOffSemaphore = xSemaphoreCreateBinary();
 80028dc:	2203      	movs	r2, #3
 80028de:	2100      	movs	r1, #0
 80028e0:	2001      	movs	r0, #1
 80028e2:	f005 fc6f 	bl	80081c4 <xQueueGenericCreate>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4a24      	ldr	r2, [pc, #144]	@ (800297c <main+0x304>)
 80028ea:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != ledOffSemaphore);
 80028ec:	4b23      	ldr	r3, [pc, #140]	@ (800297c <main+0x304>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10b      	bne.n	800290c <main+0x294>
        __asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	603b      	str	r3, [r7, #0]
    }
 8002906:	bf00      	nop
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <main+0x290>

  // Create software timers for LED effects
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 800290c:	2300      	movs	r3, #0
 800290e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002910:	e047      	b.n	80029a2 <main+0x32a>
 8002912:	bf00      	nop
 8002914:	e0001000 	.word	0xe0001000
 8002918:	20000300 	.word	0x20000300
 800291c:	0800e854 	.word	0x0800e854
 8002920:	080023b9 	.word	0x080023b9
 8002924:	20000304 	.word	0x20000304
 8002928:	0800e864 	.word	0x0800e864
 800292c:	080024d5 	.word	0x080024d5
 8002930:	20000308 	.word	0x20000308
 8002934:	0800e870 	.word	0x0800e870
 8002938:	08002505 	.word	0x08002505
 800293c:	2000030c 	.word	0x2000030c
 8002940:	0800e87c 	.word	0x0800e87c
 8002944:	080013b1 	.word	0x080013b1
 8002948:	20000310 	.word	0x20000310
 800294c:	0800e888 	.word	0x0800e888
 8002950:	08001cd9 	.word	0x08001cd9
 8002954:	20000314 	.word	0x20000314
 8002958:	0800e894 	.word	0x0800e894
 800295c:	08000e0d 	.word	0x08000e0d
 8002960:	20000318 	.word	0x20000318
 8002964:	0800e8a8 	.word	0x0800e8a8
 8002968:	08001b8d 	.word	0x08001b8d
 800296c:	20000320 	.word	0x20000320
 8002970:	2000031c 	.word	0x2000031c
 8002974:	20000334 	.word	0x20000334
 8002978:	20000338 	.word	0x20000338
 800297c:	2000033c 	.word	0x2000033c
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)i, led_callback);
 8002980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002982:	4a10      	ldr	r2, [pc, #64]	@ (80029c4 <main+0x34c>)
 8002984:	9200      	str	r2, [sp, #0]
 8002986:	2201      	movs	r2, #1
 8002988:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800298c:	480e      	ldr	r0, [pc, #56]	@ (80029c8 <main+0x350>)
 800298e:	f007 feef 	bl	800a770 <xTimerCreate>
 8002992:	4602      	mov	r2, r0
 8002994:	490d      	ldr	r1, [pc, #52]	@ (80029cc <main+0x354>)
 8002996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002998:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 800299c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299e:	3301      	adds	r3, #1
 80029a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80029a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	ddeb      	ble.n	8002980 <main+0x308>
  }

  // Prepare UART to receive a message
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80029a8:	2201      	movs	r2, #1
 80029aa:	4909      	ldr	r1, [pc, #36]	@ (80029d0 <main+0x358>)
 80029ac:	4809      	ldr	r0, [pc, #36]	@ (80029d4 <main+0x35c>)
 80029ae:	f004 f9d8 	bl	8006d62 <HAL_UART_Receive_IT>

  // Start PWM generation
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80029b2:	2100      	movs	r1, #0
 80029b4:	4808      	ldr	r0, [pc, #32]	@ (80029d8 <main+0x360>)
 80029b6:	f003 f991 	bl	8005cdc <HAL_TIM_PWM_Start>

  // Start the kernel
  vTaskStartScheduler();
 80029ba:	f006 fcb7 	bl	800932c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029be:	bf00      	nop
 80029c0:	e7fd      	b.n	80029be <main+0x346>
 80029c2:	bf00      	nop
 80029c4:	08001851 	.word	0x08001851
 80029c8:	0800e8b4 	.word	0x0800e8b4
 80029cc:	20000324 	.word	0x20000324
 80029d0:	20000340 	.word	0x20000340
 80029d4:	200002b8 	.word	0x200002b8
 80029d8:	20000270 	.word	0x20000270

080029dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b094      	sub	sp, #80	@ 0x50
 80029e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029e2:	f107 0320 	add.w	r3, r7, #32
 80029e6:	2230      	movs	r2, #48	@ 0x30
 80029e8:	2100      	movs	r1, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f00a fd4a 	bl	800d484 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029f0:	f107 030c 	add.w	r3, r7, #12
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	4b29      	ldr	r3, [pc, #164]	@ (8002aac <SystemClock_Config+0xd0>)
 8002a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a08:	4a28      	ldr	r2, [pc, #160]	@ (8002aac <SystemClock_Config+0xd0>)
 8002a0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a10:	4b26      	ldr	r3, [pc, #152]	@ (8002aac <SystemClock_Config+0xd0>)
 8002a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	4b23      	ldr	r3, [pc, #140]	@ (8002ab0 <SystemClock_Config+0xd4>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a22      	ldr	r2, [pc, #136]	@ (8002ab0 <SystemClock_Config+0xd4>)
 8002a26:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a2a:	6013      	str	r3, [r2, #0]
 8002a2c:	4b20      	ldr	r3, [pc, #128]	@ (8002ab0 <SystemClock_Config+0xd4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a34:	607b      	str	r3, [r7, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002a38:	230a      	movs	r3, #10
 8002a3a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a40:	2310      	movs	r3, #16
 8002a42:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002a44:	2301      	movs	r3, #1
 8002a46:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a48:	2302      	movs	r3, #2
 8002a4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a50:	2308      	movs	r3, #8
 8002a52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8002a54:	2332      	movs	r3, #50	@ 0x32
 8002a56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002a58:	2304      	movs	r3, #4
 8002a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002a5c:	2307      	movs	r3, #7
 8002a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a60:	f107 0320 	add.w	r3, r7, #32
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 f99b 	bl	8003da0 <HAL_RCC_OscConfig>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8002a70:	f000 fb5c 	bl	800312c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a74:	230f      	movs	r3, #15
 8002a76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a78:	2302      	movs	r3, #2
 8002a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a80:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a8c:	f107 030c 	add.w	r3, r7, #12
 8002a90:	2100      	movs	r1, #0
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 fbfc 	bl	8004290 <HAL_RCC_ClockConfig>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002a9e:	f000 fb45 	bl	800312c <Error_Handler>
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3750      	adds	r7, #80	@ 0x50
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40023800 	.word	0x40023800
 8002ab0:	40007000 	.word	0x40007000

08002ab4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8002af8 <MX_RTC_Init+0x44>)
 8002aba:	4a10      	ldr	r2, [pc, #64]	@ (8002afc <MX_RTC_Init+0x48>)
 8002abc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8002abe:	4b0e      	ldr	r3, [pc, #56]	@ (8002af8 <MX_RTC_Init+0x44>)
 8002ac0:	2240      	movs	r2, #64	@ 0x40
 8002ac2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8002af8 <MX_RTC_Init+0x44>)
 8002ac6:	227f      	movs	r2, #127	@ 0x7f
 8002ac8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002aca:	4b0b      	ldr	r3, [pc, #44]	@ (8002af8 <MX_RTC_Init+0x44>)
 8002acc:	22ff      	movs	r2, #255	@ 0xff
 8002ace:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002ad0:	4b09      	ldr	r3, [pc, #36]	@ (8002af8 <MX_RTC_Init+0x44>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002ad6:	4b08      	ldr	r3, [pc, #32]	@ (8002af8 <MX_RTC_Init+0x44>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002adc:	4b06      	ldr	r3, [pc, #24]	@ (8002af8 <MX_RTC_Init+0x44>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002ae2:	4805      	ldr	r0, [pc, #20]	@ (8002af8 <MX_RTC_Init+0x44>)
 8002ae4:	f001 ff08 	bl	80048f8 <HAL_RTC_Init>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002aee:	f000 fb1d 	bl	800312c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002af2:	bf00      	nop
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	200001b0 	.word	0x200001b0
 8002afc:	40002800 	.word	0x40002800

08002b00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002b04:	4b17      	ldr	r3, [pc, #92]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b06:	4a18      	ldr	r2, [pc, #96]	@ (8002b68 <MX_SPI1_Init+0x68>)
 8002b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b0a:	4b16      	ldr	r3, [pc, #88]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b12:	4b14      	ldr	r3, [pc, #80]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b1e:	4b11      	ldr	r3, [pc, #68]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b24:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002b30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b32:	4b0c      	ldr	r3, [pc, #48]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b38:	4b0a      	ldr	r3, [pc, #40]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b3e:	4b09      	ldr	r3, [pc, #36]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b44:	4b07      	ldr	r3, [pc, #28]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002b4a:	4b06      	ldr	r3, [pc, #24]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b4c:	220a      	movs	r2, #10
 8002b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b50:	4804      	ldr	r0, [pc, #16]	@ (8002b64 <MX_SPI1_Init+0x64>)
 8002b52:	f002 f9dd 	bl	8004f10 <HAL_SPI_Init>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002b5c:	f000 fae6 	bl	800312c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002b60:	bf00      	nop
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	200001d0 	.word	0x200001d0
 8002b68:	40013000 	.word	0x40013000

08002b6c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b092      	sub	sp, #72	@ 0x48
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b76:	2200      	movs	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
 8002b7a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
 8002b8c:	615a      	str	r2, [r3, #20]
 8002b8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b90:	1d3b      	adds	r3, r7, #4
 8002b92:	2220      	movs	r2, #32
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f00a fc74 	bl	800d484 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b9c:	4b33      	ldr	r3, [pc, #204]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002b9e:	4a34      	ldr	r2, [pc, #208]	@ (8002c70 <MX_TIM1_Init+0x104>)
 8002ba0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ba2:	4b32      	ldr	r3, [pc, #200]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ba8:	4b30      	ldr	r3, [pc, #192]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002bae:	4b2f      	ldr	r3, [pc, #188]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002bb0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002bb4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc2:	4b2a      	ldr	r3, [pc, #168]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002bc8:	4828      	ldr	r0, [pc, #160]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002bca:	f003 f837 	bl	8005c3c <HAL_TIM_PWM_Init>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002bd4:	f000 faaa 	bl	800312c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002be0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002be4:	4619      	mov	r1, r3
 8002be6:	4821      	ldr	r0, [pc, #132]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002be8:	f003 fefe 	bl	80069e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002bf2:	f000 fa9b 	bl	800312c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002bf6:	2360      	movs	r3, #96	@ 0x60
 8002bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002c02:	2300      	movs	r3, #0
 8002c04:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002c06:	2300      	movs	r3, #0
 8002c08:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c16:	2200      	movs	r2, #0
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4814      	ldr	r0, [pc, #80]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002c1c:	f003 fa16 	bl	800604c <HAL_TIM_PWM_ConfigChannel>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002c26:	f000 fa81 	bl	800312c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c32:	2300      	movs	r3, #0
 8002c34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c48:	1d3b      	adds	r3, r7, #4
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4807      	ldr	r0, [pc, #28]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002c4e:	f003 ff47 	bl	8006ae0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002c58:	f000 fa68 	bl	800312c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c5c:	4803      	ldr	r0, [pc, #12]	@ (8002c6c <MX_TIM1_Init+0x100>)
 8002c5e:	f000 fb49 	bl	80032f4 <HAL_TIM_MspPostInit>

}
 8002c62:	bf00      	nop
 8002c64:	3748      	adds	r7, #72	@ 0x48
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000228 	.word	0x20000228
 8002c70:	40010000 	.word	0x40010000

08002c74 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b08e      	sub	sp, #56	@ 0x38
 8002c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c7a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c88:	f107 0320 	add.w	r3, r7, #32
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]
 8002c90:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002c92:	1d3b      	adds	r3, r7, #4
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
 8002ca0:	615a      	str	r2, [r3, #20]
 8002ca2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002ca6:	4a2e      	ldr	r2, [pc, #184]	@ (8002d60 <MX_TIM3_Init+0xec>)
 8002ca8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8002caa:	4b2c      	ldr	r3, [pc, #176]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002cac:	2218      	movs	r2, #24
 8002cae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002cb6:	4b29      	ldr	r3, [pc, #164]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002cb8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cbe:	4b27      	ldr	r3, [pc, #156]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002cc4:	4b25      	ldr	r3, [pc, #148]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002cc6:	2280      	movs	r2, #128	@ 0x80
 8002cc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002cca:	4824      	ldr	r0, [pc, #144]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002ccc:	f002 fef6 	bl	8005abc <HAL_TIM_Base_Init>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d001      	beq.n	8002cda <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002cd6:	f000 fa29 	bl	800312c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002ce0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	481d      	ldr	r0, [pc, #116]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002ce8:	f003 fa72 	bl	80061d0 <HAL_TIM_ConfigClockSource>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002cf2:	f000 fa1b 	bl	800312c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002cf6:	4819      	ldr	r0, [pc, #100]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002cf8:	f002 ffa0 	bl	8005c3c <HAL_TIM_PWM_Init>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002d02:	f000 fa13 	bl	800312c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002d0e:	f107 0320 	add.w	r3, r7, #32
 8002d12:	4619      	mov	r1, r3
 8002d14:	4811      	ldr	r0, [pc, #68]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002d16:	f003 fe67 	bl	80069e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002d20:	f000 fa04 	bl	800312c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002d24:	2360      	movs	r3, #96	@ 0x60
 8002d26:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 8002d28:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8002d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002d36:	1d3b      	adds	r3, r7, #4
 8002d38:	2200      	movs	r2, #0
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4807      	ldr	r0, [pc, #28]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002d3e:	f003 f985 	bl	800604c <HAL_TIM_PWM_ConfigChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002d48:	f000 f9f0 	bl	800312c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002d4c:	4803      	ldr	r0, [pc, #12]	@ (8002d5c <MX_TIM3_Init+0xe8>)
 8002d4e:	f000 fad1 	bl	80032f4 <HAL_TIM_MspPostInit>

}
 8002d52:	bf00      	nop
 8002d54:	3738      	adds	r7, #56	@ 0x38
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000270 	.word	0x20000270
 8002d60:	40000400 	.word	0x40000400

08002d64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d68:	4b11      	ldr	r3, [pc, #68]	@ (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d6a:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <MX_USART2_UART_Init+0x50>)
 8002d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d6e:	4b10      	ldr	r3, [pc, #64]	@ (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d70:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d76:	4b0e      	ldr	r3, [pc, #56]	@ (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d82:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d88:	4b09      	ldr	r3, [pc, #36]	@ (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8e:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d94:	4b06      	ldr	r3, [pc, #24]	@ (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002d9a:	4805      	ldr	r0, [pc, #20]	@ (8002db0 <MX_USART2_UART_Init+0x4c>)
 8002d9c:	f003 ff06 	bl	8006bac <HAL_UART_Init>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002da6:	f000 f9c1 	bl	800312c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200002b8 	.word	0x200002b8
 8002db4:	40004400 	.word	0x40004400

08002db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08c      	sub	sp, #48	@ 0x30
 8002dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dbe:	f107 031c 	add.w	r3, r7, #28
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	605a      	str	r2, [r3, #4]
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	60da      	str	r2, [r3, #12]
 8002dcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	4b9d      	ldr	r3, [pc, #628]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dd6:	4a9c      	ldr	r2, [pc, #624]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002dd8:	f043 0310 	orr.w	r3, r3, #16
 8002ddc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dde:	4b9a      	ldr	r3, [pc, #616]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002de2:	f003 0310 	and.w	r3, r3, #16
 8002de6:	61bb      	str	r3, [r7, #24]
 8002de8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	617b      	str	r3, [r7, #20]
 8002dee:	4b96      	ldr	r3, [pc, #600]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	4a95      	ldr	r2, [pc, #596]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002df4:	f043 0304 	orr.w	r3, r3, #4
 8002df8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dfa:	4b93      	ldr	r3, [pc, #588]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfe:	f003 0304 	and.w	r3, r3, #4
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	4b8f      	ldr	r3, [pc, #572]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4a8e      	ldr	r2, [pc, #568]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e14:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e16:	4b8c      	ldr	r3, [pc, #560]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1e:	613b      	str	r3, [r7, #16]
 8002e20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	4b88      	ldr	r3, [pc, #544]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2a:	4a87      	ldr	r2, [pc, #540]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e2c:	f043 0301 	orr.w	r3, r3, #1
 8002e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e32:	4b85      	ldr	r3, [pc, #532]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	4b81      	ldr	r3, [pc, #516]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	4a80      	ldr	r2, [pc, #512]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e48:	f043 0302 	orr.w	r3, r3, #2
 8002e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e4e:	4b7e      	ldr	r3, [pc, #504]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e52:	f003 0302 	and.w	r3, r3, #2
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	4b7a      	ldr	r3, [pc, #488]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e62:	4a79      	ldr	r2, [pc, #484]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e64:	f043 0308 	orr.w	r3, r3, #8
 8002e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e6a:	4b77      	ldr	r3, [pc, #476]	@ (8003048 <MX_GPIO_Init+0x290>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	607b      	str	r3, [r7, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2108      	movs	r1, #8
 8002e7a:	4874      	ldr	r0, [pc, #464]	@ (800304c <MX_GPIO_Init+0x294>)
 8002e7c:	f000 ff5c 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002e80:	2201      	movs	r2, #1
 8002e82:	2101      	movs	r1, #1
 8002e84:	4872      	ldr	r0, [pc, #456]	@ (8003050 <MX_GPIO_Init+0x298>)
 8002e86:	f000 ff57 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002e90:	4870      	ldr	r0, [pc, #448]	@ (8003054 <MX_GPIO_Init+0x29c>)
 8002e92:	f000 ff51 	bl	8003d38 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_IN1_Pin|MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8002e96:	2200      	movs	r2, #0
 8002e98:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002e9c:	486c      	ldr	r0, [pc, #432]	@ (8003050 <MX_GPIO_Init+0x298>)
 8002e9e:	f000 ff4b 	bl	8003d38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002ea2:	2308      	movs	r3, #8
 8002ea4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002eb2:	f107 031c 	add.w	r3, r7, #28
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	4864      	ldr	r0, [pc, #400]	@ (800304c <MX_GPIO_Init+0x294>)
 8002eba:	f000 fda1 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin MOTOR_IN1_Pin MOTOR_IN2_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 8002ebe:	f240 3301 	movw	r3, #769	@ 0x301
 8002ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ed0:	f107 031c 	add.w	r3, r7, #28
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	485e      	ldr	r0, [pc, #376]	@ (8003050 <MX_GPIO_Init+0x298>)
 8002ed8:	f000 fd92 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002edc:	2308      	movs	r3, #8
 8002ede:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002eec:	2305      	movs	r3, #5
 8002eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002ef0:	f107 031c 	add.w	r3, r7, #28
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	4856      	ldr	r0, [pc, #344]	@ (8003050 <MX_GPIO_Init+0x298>)
 8002ef8:	f000 fd82 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002efc:	2301      	movs	r3, #1
 8002efe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f00:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002f04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	2300      	movs	r3, #0
 8002f08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002f0a:	f107 031c 	add.w	r3, r7, #28
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4851      	ldr	r0, [pc, #324]	@ (8003058 <MX_GPIO_Init+0x2a0>)
 8002f12:	f000 fd75 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002f16:	2310      	movs	r3, #16
 8002f18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f22:	2300      	movs	r3, #0
 8002f24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002f26:	2306      	movs	r3, #6
 8002f28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002f2a:	f107 031c 	add.w	r3, r7, #28
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4849      	ldr	r0, [pc, #292]	@ (8003058 <MX_GPIO_Init+0x2a0>)
 8002f32:	f000 fd65 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002f36:	2304      	movs	r3, #4
 8002f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002f42:	f107 031c 	add.w	r3, r7, #28
 8002f46:	4619      	mov	r1, r3
 8002f48:	4844      	ldr	r0, [pc, #272]	@ (800305c <MX_GPIO_Init+0x2a4>)
 8002f4a:	f000 fd59 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002f4e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f54:	2302      	movs	r3, #2
 8002f56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002f60:	2305      	movs	r3, #5
 8002f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002f64:	f107 031c 	add.w	r3, r7, #28
 8002f68:	4619      	mov	r1, r3
 8002f6a:	483c      	ldr	r0, [pc, #240]	@ (800305c <MX_GPIO_Init+0x2a4>)
 8002f6c:	f000 fd48 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002f70:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002f74:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f76:	2301      	movs	r3, #1
 8002f78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f82:	f107 031c 	add.w	r3, r7, #28
 8002f86:	4619      	mov	r1, r3
 8002f88:	4832      	ldr	r0, [pc, #200]	@ (8003054 <MX_GPIO_Init+0x29c>)
 8002f8a:	f000 fd39 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002f8e:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f94:	2302      	movs	r3, #2
 8002f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002fa0:	2306      	movs	r3, #6
 8002fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fa4:	f107 031c 	add.w	r3, r7, #28
 8002fa8:	4619      	mov	r1, r3
 8002faa:	4829      	ldr	r0, [pc, #164]	@ (8003050 <MX_GPIO_Init+0x298>)
 8002fac:	f000 fd28 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002fb0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002fb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	f107 031c 	add.w	r3, r7, #28
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4824      	ldr	r0, [pc, #144]	@ (8003058 <MX_GPIO_Init+0x2a0>)
 8002fc6:	f000 fd1b 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002fca:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002fce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002fdc:	230a      	movs	r3, #10
 8002fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fe0:	f107 031c 	add.w	r3, r7, #28
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	481c      	ldr	r0, [pc, #112]	@ (8003058 <MX_GPIO_Init+0x2a0>)
 8002fe8:	f000 fd0a 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002fec:	2320      	movs	r3, #32
 8002fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002ff8:	f107 031c 	add.w	r3, r7, #28
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4815      	ldr	r0, [pc, #84]	@ (8003054 <MX_GPIO_Init+0x29c>)
 8003000:	f000 fcfe 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003004:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800300a:	2312      	movs	r3, #18
 800300c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800300e:	2301      	movs	r3, #1
 8003010:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003012:	2302      	movs	r3, #2
 8003014:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003016:	2304      	movs	r3, #4
 8003018:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800301a:	f107 031c 	add.w	r3, r7, #28
 800301e:	4619      	mov	r1, r3
 8003020:	480e      	ldr	r0, [pc, #56]	@ (800305c <MX_GPIO_Init+0x2a4>)
 8003022:	f000 fced 	bl	8003a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003026:	2302      	movs	r3, #2
 8003028:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800302a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800302e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003030:	2300      	movs	r3, #0
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003034:	f107 031c 	add.w	r3, r7, #28
 8003038:	4619      	mov	r1, r3
 800303a:	4804      	ldr	r0, [pc, #16]	@ (800304c <MX_GPIO_Init+0x294>)
 800303c:	f000 fce0 	bl	8003a00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003040:	bf00      	nop
 8003042:	3730      	adds	r7, #48	@ 0x30
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40023800 	.word	0x40023800
 800304c:	40021000 	.word	0x40021000
 8003050:	40020800 	.word	0x40020800
 8003054:	40020c00 	.word	0x40020c00
 8003058:	40020000 	.word	0x40020000
 800305c:	40020400 	.word	0x40020400

08003060 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler, so it executes in the interrupt context
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af02      	add	r7, sp, #8
 8003066:	6078      	str	r0, [r7, #4]
	// Dummy variable used to replace final character in data queue
	uint8_t dummy;

	// Add a small delay to allow timing for message transmission
	for(uint32_t i=0; i<4000; i++);
 8003068:	2300      	movs	r3, #0
 800306a:	60fb      	str	r3, [r7, #12]
 800306c:	e002      	b.n	8003074 <HAL_UART_RxCpltCallback+0x14>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	3301      	adds	r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800307a:	d3f8      	bcc.n	800306e <HAL_UART_RxCpltCallback+0xe>

	// Check if data is available via UART
	if(!xQueueIsQueueFullFromISR(q_data)) {
 800307c:	4b1e      	ldr	r3, [pc, #120]	@ (80030f8 <HAL_UART_RxCpltCallback+0x98>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f005 ff62 	bl	8008f4a <xQueueIsQueueFullFromISR>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d107      	bne.n	800309c <HAL_UART_RxCpltCallback+0x3c>
		// Enqueue data byte
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 800308c:	4b1a      	ldr	r3, [pc, #104]	@ (80030f8 <HAL_UART_RxCpltCallback+0x98>)
 800308e:	6818      	ldr	r0, [r3, #0]
 8003090:	2300      	movs	r3, #0
 8003092:	2200      	movs	r2, #0
 8003094:	4919      	ldr	r1, [pc, #100]	@ (80030fc <HAL_UART_RxCpltCallback+0x9c>)
 8003096:	f005 fa4b 	bl	8008530 <xQueueGenericSendFromISR>
 800309a:	e013      	b.n	80030c4 <HAL_UART_RxCpltCallback+0x64>
	}
	// If no data available, check if last entered character is newline character
	else {
		if(user_data == '\n') {
 800309c:	4b17      	ldr	r3, [pc, #92]	@ (80030fc <HAL_UART_RxCpltCallback+0x9c>)
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b0a      	cmp	r3, #10
 80030a4:	d10e      	bne.n	80030c4 <HAL_UART_RxCpltCallback+0x64>
			// Replace last byte of data queue with '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 80030a6:	4b14      	ldr	r3, [pc, #80]	@ (80030f8 <HAL_UART_RxCpltCallback+0x98>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f107 010b 	add.w	r1, r7, #11
 80030ae:	2200      	movs	r2, #0
 80030b0:	4618      	mov	r0, r3
 80030b2:	f005 fd53 	bl	8008b5c <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 80030b6:	4b10      	ldr	r3, [pc, #64]	@ (80030f8 <HAL_UART_RxCpltCallback+0x98>)
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	2300      	movs	r3, #0
 80030bc:	2200      	movs	r2, #0
 80030be:	490f      	ldr	r1, [pc, #60]	@ (80030fc <HAL_UART_RxCpltCallback+0x9c>)
 80030c0:	f005 fa36 	bl	8008530 <xQueueGenericSendFromISR>
		}
	}

	// Send notification to message handler task if user_data == '\n'
	if(user_data == '\n') {
 80030c4:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <HAL_UART_RxCpltCallback+0x9c>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b0a      	cmp	r3, #10
 80030cc:	d10a      	bne.n	80030e4 <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_message_handler_task, 0, eNoAction, NULL);
 80030ce:	4b0c      	ldr	r3, [pc, #48]	@ (8003100 <HAL_UART_RxCpltCallback+0xa0>)
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	2300      	movs	r3, #0
 80030d4:	9301      	str	r3, [sp, #4]
 80030d6:	2300      	movs	r3, #0
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	2300      	movs	r3, #0
 80030dc:	2200      	movs	r2, #0
 80030de:	2100      	movs	r1, #0
 80030e0:	f007 f980 	bl	800a3e4 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in interrupt mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80030e4:	2201      	movs	r2, #1
 80030e6:	4905      	ldr	r1, [pc, #20]	@ (80030fc <HAL_UART_RxCpltCallback+0x9c>)
 80030e8:	4806      	ldr	r0, [pc, #24]	@ (8003104 <HAL_UART_RxCpltCallback+0xa4>)
 80030ea:	f003 fe3a 	bl	8006d62 <HAL_UART_Receive_IT>

}
 80030ee:	bf00      	nop
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	20000320 	.word	0x20000320
 80030fc:	20000340 	.word	0x20000340
 8003100:	20000304 	.word	0x20000304
 8003104:	200002b8 	.word	0x200002b8

08003108 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a04      	ldr	r2, [pc, #16]	@ (8003128 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d101      	bne.n	800311e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800311a:	f000 fadd 	bl	80036d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800311e:	bf00      	nop
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	40001000 	.word	0x40001000

0800312c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003130:	b672      	cpsid	i
}
 8003132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003134:	bf00      	nop
 8003136:	e7fd      	b.n	8003134 <Error_Handler+0x8>

08003138 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800313e:	2300      	movs	r3, #0
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <HAL_MspInit+0x4c>)
 8003144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003146:	4a0f      	ldr	r2, [pc, #60]	@ (8003184 <HAL_MspInit+0x4c>)
 8003148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800314c:	6453      	str	r3, [r2, #68]	@ 0x44
 800314e:	4b0d      	ldr	r3, [pc, #52]	@ (8003184 <HAL_MspInit+0x4c>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003156:	607b      	str	r3, [r7, #4]
 8003158:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	603b      	str	r3, [r7, #0]
 800315e:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <HAL_MspInit+0x4c>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <HAL_MspInit+0x4c>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	@ 0x40
 800316a:	4b06      	ldr	r3, [pc, #24]	@ (8003184 <HAL_MspInit+0x4c>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003172:	603b      	str	r3, [r7, #0]
 8003174:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8003176:	f007 ff99 	bl	800b0ac <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 800317a:	bf00      	nop
 800317c:	3708      	adds	r7, #8
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800

08003188 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003190:	f107 0308 	add.w	r3, r7, #8
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a0c      	ldr	r2, [pc, #48]	@ (80031d4 <HAL_RTC_MspInit+0x4c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80031a8:	2302      	movs	r3, #2
 80031aa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80031ac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80031b0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031b2:	f107 0308 	add.w	r3, r7, #8
 80031b6:	4618      	mov	r0, r3
 80031b8:	f001 fabc 	bl	8004734 <HAL_RCCEx_PeriphCLKConfig>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d001      	beq.n	80031c6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80031c2:	f7ff ffb3 	bl	800312c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80031c6:	4b04      	ldr	r3, [pc, #16]	@ (80031d8 <HAL_RTC_MspInit+0x50>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80031cc:	bf00      	nop
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40002800 	.word	0x40002800
 80031d8:	42470e3c 	.word	0x42470e3c

080031dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	@ 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031e4:	f107 0314 	add.w	r3, r7, #20
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	60da      	str	r2, [r3, #12]
 80031f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a19      	ldr	r2, [pc, #100]	@ (8003260 <HAL_SPI_MspInit+0x84>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d12b      	bne.n	8003256 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80031fe:	2300      	movs	r3, #0
 8003200:	613b      	str	r3, [r7, #16]
 8003202:	4b18      	ldr	r3, [pc, #96]	@ (8003264 <HAL_SPI_MspInit+0x88>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003206:	4a17      	ldr	r2, [pc, #92]	@ (8003264 <HAL_SPI_MspInit+0x88>)
 8003208:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800320c:	6453      	str	r3, [r2, #68]	@ 0x44
 800320e:	4b15      	ldr	r3, [pc, #84]	@ (8003264 <HAL_SPI_MspInit+0x88>)
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003216:	613b      	str	r3, [r7, #16]
 8003218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800321a:	2300      	movs	r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	4b11      	ldr	r3, [pc, #68]	@ (8003264 <HAL_SPI_MspInit+0x88>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003222:	4a10      	ldr	r2, [pc, #64]	@ (8003264 <HAL_SPI_MspInit+0x88>)
 8003224:	f043 0301 	orr.w	r3, r3, #1
 8003228:	6313      	str	r3, [r2, #48]	@ 0x30
 800322a:	4b0e      	ldr	r3, [pc, #56]	@ (8003264 <HAL_SPI_MspInit+0x88>)
 800322c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	60fb      	str	r3, [r7, #12]
 8003234:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003236:	23e0      	movs	r3, #224	@ 0xe0
 8003238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800323a:	2302      	movs	r3, #2
 800323c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003242:	2303      	movs	r3, #3
 8003244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003246:	2305      	movs	r3, #5
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800324a:	f107 0314 	add.w	r3, r7, #20
 800324e:	4619      	mov	r1, r3
 8003250:	4805      	ldr	r0, [pc, #20]	@ (8003268 <HAL_SPI_MspInit+0x8c>)
 8003252:	f000 fbd5 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003256:	bf00      	nop
 8003258:	3728      	adds	r7, #40	@ 0x28
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	40013000 	.word	0x40013000
 8003264:	40023800 	.word	0x40023800
 8003268:	40020000 	.word	0x40020000

0800326c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800326c:	b480      	push	{r7}
 800326e:	b085      	sub	sp, #20
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a0b      	ldr	r2, [pc, #44]	@ (80032a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d10d      	bne.n	800329a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <HAL_TIM_PWM_MspInit+0x40>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	4a09      	ldr	r2, [pc, #36]	@ (80032ac <HAL_TIM_PWM_MspInit+0x40>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6453      	str	r3, [r2, #68]	@ 0x44
 800328e:	4b07      	ldr	r3, [pc, #28]	@ (80032ac <HAL_TIM_PWM_MspInit+0x40>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40010000 	.word	0x40010000
 80032ac:	40023800 	.word	0x40023800

080032b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a0b      	ldr	r2, [pc, #44]	@ (80032ec <HAL_TIM_Base_MspInit+0x3c>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d10d      	bne.n	80032de <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60fb      	str	r3, [r7, #12]
 80032c6:	4b0a      	ldr	r3, [pc, #40]	@ (80032f0 <HAL_TIM_Base_MspInit+0x40>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ca:	4a09      	ldr	r2, [pc, #36]	@ (80032f0 <HAL_TIM_Base_MspInit+0x40>)
 80032cc:	f043 0302 	orr.w	r3, r3, #2
 80032d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80032d2:	4b07      	ldr	r3, [pc, #28]	@ (80032f0 <HAL_TIM_Base_MspInit+0x40>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	60fb      	str	r3, [r7, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40000400 	.word	0x40000400
 80032f0:	40023800 	.word	0x40023800

080032f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b08a      	sub	sp, #40	@ 0x28
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032fc:	f107 0314 	add.w	r3, r7, #20
 8003300:	2200      	movs	r2, #0
 8003302:	601a      	str	r2, [r3, #0]
 8003304:	605a      	str	r2, [r3, #4]
 8003306:	609a      	str	r2, [r3, #8]
 8003308:	60da      	str	r2, [r3, #12]
 800330a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a24      	ldr	r2, [pc, #144]	@ (80033a4 <HAL_TIM_MspPostInit+0xb0>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d11f      	bne.n	8003356 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003316:	2300      	movs	r3, #0
 8003318:	613b      	str	r3, [r7, #16]
 800331a:	4b23      	ldr	r3, [pc, #140]	@ (80033a8 <HAL_TIM_MspPostInit+0xb4>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	4a22      	ldr	r2, [pc, #136]	@ (80033a8 <HAL_TIM_MspPostInit+0xb4>)
 8003320:	f043 0310 	orr.w	r3, r3, #16
 8003324:	6313      	str	r3, [r2, #48]	@ 0x30
 8003326:	4b20      	ldr	r3, [pc, #128]	@ (80033a8 <HAL_TIM_MspPostInit+0xb4>)
 8003328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332a:	f003 0310 	and.w	r3, r3, #16
 800332e:	613b      	str	r3, [r7, #16]
 8003330:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003332:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003336:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003338:	2302      	movs	r3, #2
 800333a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800333c:	2300      	movs	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003340:	2300      	movs	r3, #0
 8003342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003344:	2301      	movs	r3, #1
 8003346:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003348:	f107 0314 	add.w	r3, r7, #20
 800334c:	4619      	mov	r1, r3
 800334e:	4817      	ldr	r0, [pc, #92]	@ (80033ac <HAL_TIM_MspPostInit+0xb8>)
 8003350:	f000 fb56 	bl	8003a00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003354:	e022      	b.n	800339c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a15      	ldr	r2, [pc, #84]	@ (80033b0 <HAL_TIM_MspPostInit+0xbc>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d11d      	bne.n	800339c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	4b10      	ldr	r3, [pc, #64]	@ (80033a8 <HAL_TIM_MspPostInit+0xb4>)
 8003366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003368:	4a0f      	ldr	r2, [pc, #60]	@ (80033a8 <HAL_TIM_MspPostInit+0xb4>)
 800336a:	f043 0304 	orr.w	r3, r3, #4
 800336e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003370:	4b0d      	ldr	r3, [pc, #52]	@ (80033a8 <HAL_TIM_MspPostInit+0xb4>)
 8003372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800337c:	2340      	movs	r3, #64	@ 0x40
 800337e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003380:	2302      	movs	r3, #2
 8003382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003384:	2300      	movs	r3, #0
 8003386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003388:	2300      	movs	r3, #0
 800338a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800338c:	2302      	movs	r3, #2
 800338e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003390:	f107 0314 	add.w	r3, r7, #20
 8003394:	4619      	mov	r1, r3
 8003396:	4807      	ldr	r0, [pc, #28]	@ (80033b4 <HAL_TIM_MspPostInit+0xc0>)
 8003398:	f000 fb32 	bl	8003a00 <HAL_GPIO_Init>
}
 800339c:	bf00      	nop
 800339e:	3728      	adds	r7, #40	@ 0x28
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40010000 	.word	0x40010000
 80033a8:	40023800 	.word	0x40023800
 80033ac:	40021000 	.word	0x40021000
 80033b0:	40000400 	.word	0x40000400
 80033b4:	40020800 	.word	0x40020800

080033b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	@ 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a1d      	ldr	r2, [pc, #116]	@ (800344c <HAL_UART_MspInit+0x94>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d133      	bne.n	8003442 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b1c      	ldr	r3, [pc, #112]	@ (8003450 <HAL_UART_MspInit+0x98>)
 80033e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e2:	4a1b      	ldr	r2, [pc, #108]	@ (8003450 <HAL_UART_MspInit+0x98>)
 80033e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80033ea:	4b19      	ldr	r3, [pc, #100]	@ (8003450 <HAL_UART_MspInit+0x98>)
 80033ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033f6:	2300      	movs	r3, #0
 80033f8:	60fb      	str	r3, [r7, #12]
 80033fa:	4b15      	ldr	r3, [pc, #84]	@ (8003450 <HAL_UART_MspInit+0x98>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	4a14      	ldr	r2, [pc, #80]	@ (8003450 <HAL_UART_MspInit+0x98>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	6313      	str	r3, [r2, #48]	@ 0x30
 8003406:	4b12      	ldr	r3, [pc, #72]	@ (8003450 <HAL_UART_MspInit+0x98>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	60fb      	str	r3, [r7, #12]
 8003410:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003412:	230c      	movs	r3, #12
 8003414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003416:	2302      	movs	r3, #2
 8003418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341e:	2303      	movs	r3, #3
 8003420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003422:	2307      	movs	r3, #7
 8003424:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	4619      	mov	r1, r3
 800342c:	4809      	ldr	r0, [pc, #36]	@ (8003454 <HAL_UART_MspInit+0x9c>)
 800342e:	f000 fae7 	bl	8003a00 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	2106      	movs	r1, #6
 8003436:	2026      	movs	r0, #38	@ 0x26
 8003438:	f000 fa26 	bl	8003888 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800343c:	2026      	movs	r0, #38	@ 0x26
 800343e:	f000 fa3f 	bl	80038c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003442:	bf00      	nop
 8003444:	3728      	adds	r7, #40	@ 0x28
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40004400 	.word	0x40004400
 8003450:	40023800 	.word	0x40023800
 8003454:	40020000 	.word	0x40020000

08003458 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08e      	sub	sp, #56	@ 0x38
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003460:	2300      	movs	r3, #0
 8003462:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003468:	2300      	movs	r3, #0
 800346a:	60fb      	str	r3, [r7, #12]
 800346c:	4b33      	ldr	r3, [pc, #204]	@ (800353c <HAL_InitTick+0xe4>)
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	4a32      	ldr	r2, [pc, #200]	@ (800353c <HAL_InitTick+0xe4>)
 8003472:	f043 0310 	orr.w	r3, r3, #16
 8003476:	6413      	str	r3, [r2, #64]	@ 0x40
 8003478:	4b30      	ldr	r3, [pc, #192]	@ (800353c <HAL_InitTick+0xe4>)
 800347a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347c:	f003 0310 	and.w	r3, r3, #16
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003484:	f107 0210 	add.w	r2, r7, #16
 8003488:	f107 0314 	add.w	r3, r7, #20
 800348c:	4611      	mov	r1, r2
 800348e:	4618      	mov	r0, r3
 8003490:	f001 f91e 	bl	80046d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003494:	6a3b      	ldr	r3, [r7, #32]
 8003496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800349a:	2b00      	cmp	r3, #0
 800349c:	d103      	bne.n	80034a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800349e:	f001 f8ef 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 80034a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80034a4:	e004      	b.n	80034b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80034a6:	f001 f8eb 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 80034aa:	4603      	mov	r3, r0
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034b2:	4a23      	ldr	r2, [pc, #140]	@ (8003540 <HAL_InitTick+0xe8>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	0c9b      	lsrs	r3, r3, #18
 80034ba:	3b01      	subs	r3, #1
 80034bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80034be:	4b21      	ldr	r3, [pc, #132]	@ (8003544 <HAL_InitTick+0xec>)
 80034c0:	4a21      	ldr	r2, [pc, #132]	@ (8003548 <HAL_InitTick+0xf0>)
 80034c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80034c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003544 <HAL_InitTick+0xec>)
 80034c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80034ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80034cc:	4a1d      	ldr	r2, [pc, #116]	@ (8003544 <HAL_InitTick+0xec>)
 80034ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80034d2:	4b1c      	ldr	r3, [pc, #112]	@ (8003544 <HAL_InitTick+0xec>)
 80034d4:	2200      	movs	r2, #0
 80034d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034d8:	4b1a      	ldr	r3, [pc, #104]	@ (8003544 <HAL_InitTick+0xec>)
 80034da:	2200      	movs	r2, #0
 80034dc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034de:	4b19      	ldr	r3, [pc, #100]	@ (8003544 <HAL_InitTick+0xec>)
 80034e0:	2200      	movs	r2, #0
 80034e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80034e4:	4817      	ldr	r0, [pc, #92]	@ (8003544 <HAL_InitTick+0xec>)
 80034e6:	f002 fae9 	bl	8005abc <HAL_TIM_Base_Init>
 80034ea:	4603      	mov	r3, r0
 80034ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80034f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d11b      	bne.n	8003530 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80034f8:	4812      	ldr	r0, [pc, #72]	@ (8003544 <HAL_InitTick+0xec>)
 80034fa:	f002 fb2f 	bl	8005b5c <HAL_TIM_Base_Start_IT>
 80034fe:	4603      	mov	r3, r0
 8003500:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003504:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003508:	2b00      	cmp	r3, #0
 800350a:	d111      	bne.n	8003530 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800350c:	2036      	movs	r0, #54	@ 0x36
 800350e:	f000 f9d7 	bl	80038c0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b0f      	cmp	r3, #15
 8003516:	d808      	bhi.n	800352a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003518:	2200      	movs	r2, #0
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	2036      	movs	r0, #54	@ 0x36
 800351e:	f000 f9b3 	bl	8003888 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003522:	4a0a      	ldr	r2, [pc, #40]	@ (800354c <HAL_InitTick+0xf4>)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6013      	str	r3, [r2, #0]
 8003528:	e002      	b.n	8003530 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003530:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003534:	4618      	mov	r0, r3
 8003536:	3738      	adds	r7, #56	@ 0x38
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	40023800 	.word	0x40023800
 8003540:	431bde83 	.word	0x431bde83
 8003544:	20000344 	.word	0x20000344
 8003548:	40001000 	.word	0x40001000
 800354c:	20000074 	.word	0x20000074

08003550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <NMI_Handler+0x4>

08003558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800355c:	bf00      	nop
 800355e:	e7fd      	b.n	800355c <HardFault_Handler+0x4>

08003560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003564:	bf00      	nop
 8003566:	e7fd      	b.n	8003564 <MemManage_Handler+0x4>

08003568 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <BusFault_Handler+0x4>

08003570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003574:	bf00      	nop
 8003576:	e7fd      	b.n	8003574 <UsageFault_Handler+0x4>

08003578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
	...

08003588 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800358c:	4802      	ldr	r0, [pc, #8]	@ (8003598 <USART2_IRQHandler+0x10>)
 800358e:	f003 fc0d 	bl	8006dac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	200002b8 	.word	0x200002b8

0800359c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035a0:	4802      	ldr	r0, [pc, #8]	@ (80035ac <TIM6_DAC_IRQHandler+0x10>)
 80035a2:	f002 fc63 	bl	8005e6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035a6:	bf00      	nop
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	20000344 	.word	0x20000344

080035b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035b8:	4a14      	ldr	r2, [pc, #80]	@ (800360c <_sbrk+0x5c>)
 80035ba:	4b15      	ldr	r3, [pc, #84]	@ (8003610 <_sbrk+0x60>)
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035c4:	4b13      	ldr	r3, [pc, #76]	@ (8003614 <_sbrk+0x64>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d102      	bne.n	80035d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035cc:	4b11      	ldr	r3, [pc, #68]	@ (8003614 <_sbrk+0x64>)
 80035ce:	4a12      	ldr	r2, [pc, #72]	@ (8003618 <_sbrk+0x68>)
 80035d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035d2:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <_sbrk+0x64>)
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4413      	add	r3, r2
 80035da:	693a      	ldr	r2, [r7, #16]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d207      	bcs.n	80035f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80035e0:	f009 ff58 	bl	800d494 <__errno>
 80035e4:	4603      	mov	r3, r0
 80035e6:	220c      	movs	r2, #12
 80035e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035ee:	e009      	b.n	8003604 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035f0:	4b08      	ldr	r3, [pc, #32]	@ (8003614 <_sbrk+0x64>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035f6:	4b07      	ldr	r3, [pc, #28]	@ (8003614 <_sbrk+0x64>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4413      	add	r3, r2
 80035fe:	4a05      	ldr	r2, [pc, #20]	@ (8003614 <_sbrk+0x64>)
 8003600:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003602:	68fb      	ldr	r3, [r7, #12]
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	20020000 	.word	0x20020000
 8003610:	00000400 	.word	0x00000400
 8003614:	2000038c 	.word	0x2000038c
 8003618:	2001ad00 	.word	0x2001ad00

0800361c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003620:	4b06      	ldr	r3, [pc, #24]	@ (800363c <SystemInit+0x20>)
 8003622:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003626:	4a05      	ldr	r2, [pc, #20]	@ (800363c <SystemInit+0x20>)
 8003628:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800362c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003630:	bf00      	nop
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	e000ed00 	.word	0xe000ed00

08003640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003678 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003644:	f7ff ffea 	bl	800361c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003648:	480c      	ldr	r0, [pc, #48]	@ (800367c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800364a:	490d      	ldr	r1, [pc, #52]	@ (8003680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800364c:	4a0d      	ldr	r2, [pc, #52]	@ (8003684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800364e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003650:	e002      	b.n	8003658 <LoopCopyDataInit>

08003652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003656:	3304      	adds	r3, #4

08003658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800365a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800365c:	d3f9      	bcc.n	8003652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800365e:	4a0a      	ldr	r2, [pc, #40]	@ (8003688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003660:	4c0a      	ldr	r4, [pc, #40]	@ (800368c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003664:	e001      	b.n	800366a <LoopFillZerobss>

08003666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003668:	3204      	adds	r2, #4

0800366a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800366a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800366c:	d3fb      	bcc.n	8003666 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800366e:	f009 ff17 	bl	800d4a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003672:	f7ff f801 	bl	8002678 <main>
  bx  lr    
 8003676:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800367c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003680:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8003684:	0800eb20 	.word	0x0800eb20
  ldr r2, =_sbss
 8003688:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 800368c:	2001acfc 	.word	0x2001acfc

08003690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003690:	e7fe      	b.n	8003690 <ADC_IRQHandler>
	...

08003694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003698:	4b0e      	ldr	r3, [pc, #56]	@ (80036d4 <HAL_Init+0x40>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a0d      	ldr	r2, [pc, #52]	@ (80036d4 <HAL_Init+0x40>)
 800369e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036a4:	4b0b      	ldr	r3, [pc, #44]	@ (80036d4 <HAL_Init+0x40>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a0a      	ldr	r2, [pc, #40]	@ (80036d4 <HAL_Init+0x40>)
 80036aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b0:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <HAL_Init+0x40>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a07      	ldr	r2, [pc, #28]	@ (80036d4 <HAL_Init+0x40>)
 80036b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036bc:	2003      	movs	r0, #3
 80036be:	f000 f8d8 	bl	8003872 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036c2:	200f      	movs	r0, #15
 80036c4:	f7ff fec8 	bl	8003458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036c8:	f7ff fd36 	bl	8003138 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40023c00 	.word	0x40023c00

080036d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036dc:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <HAL_IncTick+0x20>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b06      	ldr	r3, [pc, #24]	@ (80036fc <HAL_IncTick+0x24>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4413      	add	r3, r2
 80036e8:	4a04      	ldr	r2, [pc, #16]	@ (80036fc <HAL_IncTick+0x24>)
 80036ea:	6013      	str	r3, [r2, #0]
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000078 	.word	0x20000078
 80036fc:	20000390 	.word	0x20000390

08003700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return uwTick;
 8003704:	4b03      	ldr	r3, [pc, #12]	@ (8003714 <HAL_GetTick+0x14>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000390 	.word	0x20000390

08003718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003728:	4b0c      	ldr	r3, [pc, #48]	@ (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003734:	4013      	ands	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003740:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003744:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374a:	4a04      	ldr	r2, [pc, #16]	@ (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	60d3      	str	r3, [r2, #12]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <__NVIC_GetPriorityGrouping+0x18>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 0307 	and.w	r3, r3, #7
}
 800376e:	4618      	mov	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	db0b      	blt.n	80037a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	4907      	ldr	r1, [pc, #28]	@ (80037b4 <__NVIC_EnableIRQ+0x38>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2001      	movs	r0, #1
 800379e:	fa00 f202 	lsl.w	r2, r0, r2
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000e100 	.word	0xe000e100

080037b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	db0a      	blt.n	80037e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	490c      	ldr	r1, [pc, #48]	@ (8003804 <__NVIC_SetPriority+0x4c>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	440b      	add	r3, r1
 80037dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e0:	e00a      	b.n	80037f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4908      	ldr	r1, [pc, #32]	@ (8003808 <__NVIC_SetPriority+0x50>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3b04      	subs	r3, #4
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	440b      	add	r3, r1
 80037f6:	761a      	strb	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	@ 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f1c3 0307 	rsb	r3, r3, #7
 8003826:	2b04      	cmp	r3, #4
 8003828:	bf28      	it	cs
 800382a:	2304      	movcs	r3, #4
 800382c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3304      	adds	r3, #4
 8003832:	2b06      	cmp	r3, #6
 8003834:	d902      	bls.n	800383c <NVIC_EncodePriority+0x30>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3b03      	subs	r3, #3
 800383a:	e000      	b.n	800383e <NVIC_EncodePriority+0x32>
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	401a      	ands	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003854:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43d9      	mvns	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	4313      	orrs	r3, r2
         );
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	@ 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr

08003872 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f7ff ff4c 	bl	8003718 <__NVIC_SetPriorityGrouping>
}
 8003880:	bf00      	nop
 8003882:	3708      	adds	r7, #8
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}

08003888 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003888:	b580      	push	{r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af00      	add	r7, sp, #0
 800388e:	4603      	mov	r3, r0
 8003890:	60b9      	str	r1, [r7, #8]
 8003892:	607a      	str	r2, [r7, #4]
 8003894:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003896:	2300      	movs	r3, #0
 8003898:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800389a:	f7ff ff61 	bl	8003760 <__NVIC_GetPriorityGrouping>
 800389e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	6978      	ldr	r0, [r7, #20]
 80038a6:	f7ff ffb1 	bl	800380c <NVIC_EncodePriority>
 80038aa:	4602      	mov	r2, r0
 80038ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b0:	4611      	mov	r1, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7ff ff80 	bl	80037b8 <__NVIC_SetPriority>
}
 80038b8:	bf00      	nop
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	4603      	mov	r3, r0
 80038c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038ce:	4618      	mov	r0, r3
 80038d0:	f7ff ff54 	bl	800377c <__NVIC_EnableIRQ>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b084      	sub	sp, #16
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038ea:	f7ff ff09 	bl	8003700 <HAL_GetTick>
 80038ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d008      	beq.n	800390e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2280      	movs	r2, #128	@ 0x80
 8003900:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e052      	b.n	80039b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0216 	bic.w	r2, r2, #22
 800391c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	695a      	ldr	r2, [r3, #20]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800392c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003932:	2b00      	cmp	r3, #0
 8003934:	d103      	bne.n	800393e <HAL_DMA_Abort+0x62>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800393a:	2b00      	cmp	r3, #0
 800393c:	d007      	beq.n	800394e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f022 0208 	bic.w	r2, r2, #8
 800394c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800395e:	e013      	b.n	8003988 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003960:	f7ff fece 	bl	8003700 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b05      	cmp	r3, #5
 800396c:	d90c      	bls.n	8003988 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2203      	movs	r2, #3
 8003978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003984:	2303      	movs	r3, #3
 8003986:	e015      	b.n	80039b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1e4      	bne.n	8003960 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800399a:	223f      	movs	r2, #63	@ 0x3f
 800399c:	409a      	lsls	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d004      	beq.n	80039da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2280      	movs	r2, #128	@ 0x80
 80039d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00c      	b.n	80039f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2205      	movs	r2, #5
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b089      	sub	sp, #36	@ 0x24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a12:	2300      	movs	r3, #0
 8003a14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a16:	2300      	movs	r3, #0
 8003a18:	61fb      	str	r3, [r7, #28]
 8003a1a:	e16b      	b.n	8003cf4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a1c:	2201      	movs	r2, #1
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	f040 815a 	bne.w	8003cee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f003 0303 	and.w	r3, r3, #3
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d005      	beq.n	8003a52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d130      	bne.n	8003ab4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a88:	2201      	movs	r2, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 0201 	and.w	r2, r3, #1
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f003 0303 	and.w	r3, r3, #3
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d017      	beq.n	8003af0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	005b      	lsls	r3, r3, #1
 8003aca:	2203      	movs	r2, #3
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 0303 	and.w	r3, r3, #3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d123      	bne.n	8003b44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	08da      	lsrs	r2, r3, #3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	3208      	adds	r2, #8
 8003b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	220f      	movs	r2, #15
 8003b14:	fa02 f303 	lsl.w	r3, r2, r3
 8003b18:	43db      	mvns	r3, r3
 8003b1a:	69ba      	ldr	r2, [r7, #24]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b36:	69fb      	ldr	r3, [r7, #28]
 8003b38:	08da      	lsrs	r2, r3, #3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3208      	adds	r2, #8
 8003b3e:	69b9      	ldr	r1, [r7, #24]
 8003b40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	2203      	movs	r2, #3
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f003 0203 	and.w	r2, r3, #3
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	005b      	lsls	r3, r3, #1
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f000 80b4 	beq.w	8003cee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	4b60      	ldr	r3, [pc, #384]	@ (8003d0c <HAL_GPIO_Init+0x30c>)
 8003b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8e:	4a5f      	ldr	r2, [pc, #380]	@ (8003d0c <HAL_GPIO_Init+0x30c>)
 8003b90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b96:	4b5d      	ldr	r3, [pc, #372]	@ (8003d0c <HAL_GPIO_Init+0x30c>)
 8003b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b9e:	60fb      	str	r3, [r7, #12]
 8003ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ba2:	4a5b      	ldr	r2, [pc, #364]	@ (8003d10 <HAL_GPIO_Init+0x310>)
 8003ba4:	69fb      	ldr	r3, [r7, #28]
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	3302      	adds	r3, #2
 8003baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003bb0:	69fb      	ldr	r3, [r7, #28]
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	220f      	movs	r2, #15
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a52      	ldr	r2, [pc, #328]	@ (8003d14 <HAL_GPIO_Init+0x314>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d02b      	beq.n	8003c26 <HAL_GPIO_Init+0x226>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a51      	ldr	r2, [pc, #324]	@ (8003d18 <HAL_GPIO_Init+0x318>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d025      	beq.n	8003c22 <HAL_GPIO_Init+0x222>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a50      	ldr	r2, [pc, #320]	@ (8003d1c <HAL_GPIO_Init+0x31c>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d01f      	beq.n	8003c1e <HAL_GPIO_Init+0x21e>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a4f      	ldr	r2, [pc, #316]	@ (8003d20 <HAL_GPIO_Init+0x320>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d019      	beq.n	8003c1a <HAL_GPIO_Init+0x21a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a4e      	ldr	r2, [pc, #312]	@ (8003d24 <HAL_GPIO_Init+0x324>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d013      	beq.n	8003c16 <HAL_GPIO_Init+0x216>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a4d      	ldr	r2, [pc, #308]	@ (8003d28 <HAL_GPIO_Init+0x328>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d00d      	beq.n	8003c12 <HAL_GPIO_Init+0x212>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a4c      	ldr	r2, [pc, #304]	@ (8003d2c <HAL_GPIO_Init+0x32c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d007      	beq.n	8003c0e <HAL_GPIO_Init+0x20e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a4b      	ldr	r2, [pc, #300]	@ (8003d30 <HAL_GPIO_Init+0x330>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d101      	bne.n	8003c0a <HAL_GPIO_Init+0x20a>
 8003c06:	2307      	movs	r3, #7
 8003c08:	e00e      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c0a:	2308      	movs	r3, #8
 8003c0c:	e00c      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c0e:	2306      	movs	r3, #6
 8003c10:	e00a      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c12:	2305      	movs	r3, #5
 8003c14:	e008      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c16:	2304      	movs	r3, #4
 8003c18:	e006      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e004      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c1e:	2302      	movs	r3, #2
 8003c20:	e002      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c22:	2301      	movs	r3, #1
 8003c24:	e000      	b.n	8003c28 <HAL_GPIO_Init+0x228>
 8003c26:	2300      	movs	r3, #0
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	f002 0203 	and.w	r2, r2, #3
 8003c2e:	0092      	lsls	r2, r2, #2
 8003c30:	4093      	lsls	r3, r2
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c38:	4935      	ldr	r1, [pc, #212]	@ (8003d10 <HAL_GPIO_Init+0x310>)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	089b      	lsrs	r3, r3, #2
 8003c3e:	3302      	adds	r3, #2
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c46:	4b3b      	ldr	r3, [pc, #236]	@ (8003d34 <HAL_GPIO_Init+0x334>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	43db      	mvns	r3, r3
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	4013      	ands	r3, r2
 8003c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003c62:	69ba      	ldr	r2, [r7, #24]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c6a:	4a32      	ldr	r2, [pc, #200]	@ (8003d34 <HAL_GPIO_Init+0x334>)
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c70:	4b30      	ldr	r3, [pc, #192]	@ (8003d34 <HAL_GPIO_Init+0x334>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d003      	beq.n	8003c94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c94:	4a27      	ldr	r2, [pc, #156]	@ (8003d34 <HAL_GPIO_Init+0x334>)
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c9a:	4b26      	ldr	r3, [pc, #152]	@ (8003d34 <HAL_GPIO_Init+0x334>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003cb6:	69ba      	ldr	r2, [r7, #24]
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003d34 <HAL_GPIO_Init+0x334>)
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <HAL_GPIO_Init+0x334>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ce0:	69ba      	ldr	r2, [r7, #24]
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ce8:	4a12      	ldr	r2, [pc, #72]	@ (8003d34 <HAL_GPIO_Init+0x334>)
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	2b0f      	cmp	r3, #15
 8003cf8:	f67f ae90 	bls.w	8003a1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	3724      	adds	r7, #36	@ 0x24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	40013800 	.word	0x40013800
 8003d14:	40020000 	.word	0x40020000
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	40020800 	.word	0x40020800
 8003d20:	40020c00 	.word	0x40020c00
 8003d24:	40021000 	.word	0x40021000
 8003d28:	40021400 	.word	0x40021400
 8003d2c:	40021800 	.word	0x40021800
 8003d30:	40021c00 	.word	0x40021c00
 8003d34:	40013c00 	.word	0x40013c00

08003d38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	460b      	mov	r3, r1
 8003d42:	807b      	strh	r3, [r7, #2]
 8003d44:	4613      	mov	r3, r2
 8003d46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d48:	787b      	ldrb	r3, [r7, #1]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d4e:	887a      	ldrh	r2, [r7, #2]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d54:	e003      	b.n	8003d5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d56:	887b      	ldrh	r3, [r7, #2]
 8003d58:	041a      	lsls	r2, r3, #16
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	619a      	str	r2, [r3, #24]
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	460b      	mov	r3, r1
 8003d74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d7c:	887a      	ldrh	r2, [r7, #2]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	4013      	ands	r3, r2
 8003d82:	041a      	lsls	r2, r3, #16
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	43d9      	mvns	r1, r3
 8003d88:	887b      	ldrh	r3, [r7, #2]
 8003d8a:	400b      	ands	r3, r1
 8003d8c:	431a      	orrs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	619a      	str	r2, [r3, #24]
}
 8003d92:	bf00      	nop
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
	...

08003da0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e267      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d075      	beq.n	8003eaa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dbe:	4b88      	ldr	r3, [pc, #544]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 030c 	and.w	r3, r3, #12
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d00c      	beq.n	8003de4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dca:	4b85      	ldr	r3, [pc, #532]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dd2:	2b08      	cmp	r3, #8
 8003dd4:	d112      	bne.n	8003dfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd6:	4b82      	ldr	r3, [pc, #520]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003dde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003de2:	d10b      	bne.n	8003dfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	4b7e      	ldr	r3, [pc, #504]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d05b      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x108>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d157      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e242      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e04:	d106      	bne.n	8003e14 <HAL_RCC_OscConfig+0x74>
 8003e06:	4b76      	ldr	r3, [pc, #472]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a75      	ldr	r2, [pc, #468]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e10:	6013      	str	r3, [r2, #0]
 8003e12:	e01d      	b.n	8003e50 <HAL_RCC_OscConfig+0xb0>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e1c:	d10c      	bne.n	8003e38 <HAL_RCC_OscConfig+0x98>
 8003e1e:	4b70      	ldr	r3, [pc, #448]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a6f      	ldr	r2, [pc, #444]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e28:	6013      	str	r3, [r2, #0]
 8003e2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a6c      	ldr	r2, [pc, #432]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e34:	6013      	str	r3, [r2, #0]
 8003e36:	e00b      	b.n	8003e50 <HAL_RCC_OscConfig+0xb0>
 8003e38:	4b69      	ldr	r3, [pc, #420]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a68      	ldr	r2, [pc, #416]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	4b66      	ldr	r3, [pc, #408]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a65      	ldr	r2, [pc, #404]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d013      	beq.n	8003e80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e58:	f7ff fc52 	bl	8003700 <HAL_GetTick>
 8003e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e60:	f7ff fc4e 	bl	8003700 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	2b64      	cmp	r3, #100	@ 0x64
 8003e6c:	d901      	bls.n	8003e72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e207      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e72:	4b5b      	ldr	r3, [pc, #364]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d0f0      	beq.n	8003e60 <HAL_RCC_OscConfig+0xc0>
 8003e7e:	e014      	b.n	8003eaa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e80:	f7ff fc3e 	bl	8003700 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e88:	f7ff fc3a 	bl	8003700 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b64      	cmp	r3, #100	@ 0x64
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e1f3      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e9a:	4b51      	ldr	r3, [pc, #324]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d1f0      	bne.n	8003e88 <HAL_RCC_OscConfig+0xe8>
 8003ea6:	e000      	b.n	8003eaa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d063      	beq.n	8003f7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eb6:	4b4a      	ldr	r3, [pc, #296]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 030c 	and.w	r3, r3, #12
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00b      	beq.n	8003eda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ec2:	4b47      	ldr	r3, [pc, #284]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d11c      	bne.n	8003f08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ece:	4b44      	ldr	r3, [pc, #272]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d116      	bne.n	8003f08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eda:	4b41      	ldr	r3, [pc, #260]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x152>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e1c7      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4937      	ldr	r1, [pc, #220]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f06:	e03a      	b.n	8003f7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d020      	beq.n	8003f52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f10:	4b34      	ldr	r3, [pc, #208]	@ (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f16:	f7ff fbf3 	bl	8003700 <HAL_GetTick>
 8003f1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f1e:	f7ff fbef 	bl	8003700 <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e1a8      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f30:	4b2b      	ldr	r3, [pc, #172]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3c:	4b28      	ldr	r3, [pc, #160]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	691b      	ldr	r3, [r3, #16]
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	4925      	ldr	r1, [pc, #148]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	600b      	str	r3, [r1, #0]
 8003f50:	e015      	b.n	8003f7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f52:	4b24      	ldr	r3, [pc, #144]	@ (8003fe4 <HAL_RCC_OscConfig+0x244>)
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7ff fbd2 	bl	8003700 <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f60:	f7ff fbce 	bl	8003700 <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e187      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f72:	4b1b      	ldr	r3, [pc, #108]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d036      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d016      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f92:	4b15      	ldr	r3, [pc, #84]	@ (8003fe8 <HAL_RCC_OscConfig+0x248>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f98:	f7ff fbb2 	bl	8003700 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fa0:	f7ff fbae 	bl	8003700 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e167      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe0 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0f0      	beq.n	8003fa0 <HAL_RCC_OscConfig+0x200>
 8003fbe:	e01b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fc0:	4b09      	ldr	r3, [pc, #36]	@ (8003fe8 <HAL_RCC_OscConfig+0x248>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fc6:	f7ff fb9b 	bl	8003700 <HAL_GetTick>
 8003fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fcc:	e00e      	b.n	8003fec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fce:	f7ff fb97 	bl	8003700 <HAL_GetTick>
 8003fd2:	4602      	mov	r2, r0
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d907      	bls.n	8003fec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	e150      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	42470000 	.word	0x42470000
 8003fe8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	4b88      	ldr	r3, [pc, #544]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8003fee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1ea      	bne.n	8003fce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0304 	and.w	r3, r3, #4
 8004000:	2b00      	cmp	r3, #0
 8004002:	f000 8097 	beq.w	8004134 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004006:	2300      	movs	r3, #0
 8004008:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800400a:	4b81      	ldr	r3, [pc, #516]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 800400c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800400e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10f      	bne.n	8004036 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004016:	2300      	movs	r3, #0
 8004018:	60bb      	str	r3, [r7, #8]
 800401a:	4b7d      	ldr	r3, [pc, #500]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 800401c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401e:	4a7c      	ldr	r2, [pc, #496]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004020:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004024:	6413      	str	r3, [r2, #64]	@ 0x40
 8004026:	4b7a      	ldr	r3, [pc, #488]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402e:	60bb      	str	r3, [r7, #8]
 8004030:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004032:	2301      	movs	r3, #1
 8004034:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004036:	4b77      	ldr	r3, [pc, #476]	@ (8004214 <HAL_RCC_OscConfig+0x474>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800403e:	2b00      	cmp	r3, #0
 8004040:	d118      	bne.n	8004074 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004042:	4b74      	ldr	r3, [pc, #464]	@ (8004214 <HAL_RCC_OscConfig+0x474>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a73      	ldr	r2, [pc, #460]	@ (8004214 <HAL_RCC_OscConfig+0x474>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800404c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800404e:	f7ff fb57 	bl	8003700 <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004056:	f7ff fb53 	bl	8003700 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e10c      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	4b6a      	ldr	r3, [pc, #424]	@ (8004214 <HAL_RCC_OscConfig+0x474>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004070:	2b00      	cmp	r3, #0
 8004072:	d0f0      	beq.n	8004056 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	2b01      	cmp	r3, #1
 800407a:	d106      	bne.n	800408a <HAL_RCC_OscConfig+0x2ea>
 800407c:	4b64      	ldr	r3, [pc, #400]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 800407e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004080:	4a63      	ldr	r2, [pc, #396]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004082:	f043 0301 	orr.w	r3, r3, #1
 8004086:	6713      	str	r3, [r2, #112]	@ 0x70
 8004088:	e01c      	b.n	80040c4 <HAL_RCC_OscConfig+0x324>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	2b05      	cmp	r3, #5
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x30c>
 8004092:	4b5f      	ldr	r3, [pc, #380]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004096:	4a5e      	ldr	r2, [pc, #376]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004098:	f043 0304 	orr.w	r3, r3, #4
 800409c:	6713      	str	r3, [r2, #112]	@ 0x70
 800409e:	4b5c      	ldr	r3, [pc, #368]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_OscConfig+0x324>
 80040ac:	4b58      	ldr	r3, [pc, #352]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040b0:	4a57      	ldr	r2, [pc, #348]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80040b8:	4b55      	ldr	r3, [pc, #340]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040bc:	4a54      	ldr	r2, [pc, #336]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040be:	f023 0304 	bic.w	r3, r3, #4
 80040c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040cc:	f7ff fb18 	bl	8003700 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040d2:	e00a      	b.n	80040ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040d4:	f7ff fb14 	bl	8003700 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e0cb      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ea:	4b49      	ldr	r3, [pc, #292]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80040ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d0ee      	beq.n	80040d4 <HAL_RCC_OscConfig+0x334>
 80040f6:	e014      	b.n	8004122 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040f8:	f7ff fb02 	bl	8003700 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040fe:	e00a      	b.n	8004116 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004100:	f7ff fafe 	bl	8003700 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800410e:	4293      	cmp	r3, r2
 8004110:	d901      	bls.n	8004116 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004112:	2303      	movs	r3, #3
 8004114:	e0b5      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004116:	4b3e      	ldr	r3, [pc, #248]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411a:	f003 0302 	and.w	r3, r3, #2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1ee      	bne.n	8004100 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004122:	7dfb      	ldrb	r3, [r7, #23]
 8004124:	2b01      	cmp	r3, #1
 8004126:	d105      	bne.n	8004134 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004128:	4b39      	ldr	r3, [pc, #228]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 800412a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412c:	4a38      	ldr	r2, [pc, #224]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 800412e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004132:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	2b00      	cmp	r3, #0
 800413a:	f000 80a1 	beq.w	8004280 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800413e:	4b34      	ldr	r3, [pc, #208]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 030c 	and.w	r3, r3, #12
 8004146:	2b08      	cmp	r3, #8
 8004148:	d05c      	beq.n	8004204 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	2b02      	cmp	r3, #2
 8004150:	d141      	bne.n	80041d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004152:	4b31      	ldr	r3, [pc, #196]	@ (8004218 <HAL_RCC_OscConfig+0x478>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7ff fad2 	bl	8003700 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004160:	f7ff face 	bl	8003700 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e087      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	4b27      	ldr	r3, [pc, #156]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69da      	ldr	r2, [r3, #28]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800418c:	019b      	lsls	r3, r3, #6
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004194:	085b      	lsrs	r3, r3, #1
 8004196:	3b01      	subs	r3, #1
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041a0:	061b      	lsls	r3, r3, #24
 80041a2:	491b      	ldr	r1, [pc, #108]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <HAL_RCC_OscConfig+0x478>)
 80041aa:	2201      	movs	r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ae:	f7ff faa7 	bl	8003700 <HAL_GetTick>
 80041b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041b4:	e008      	b.n	80041c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041b6:	f7ff faa3 	bl	8003700 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e05c      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c8:	4b11      	ldr	r3, [pc, #68]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d0f0      	beq.n	80041b6 <HAL_RCC_OscConfig+0x416>
 80041d4:	e054      	b.n	8004280 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041d6:	4b10      	ldr	r3, [pc, #64]	@ (8004218 <HAL_RCC_OscConfig+0x478>)
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041dc:	f7ff fa90 	bl	8003700 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041e4:	f7ff fa8c 	bl	8003700 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e045      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041f6:	4b06      	ldr	r3, [pc, #24]	@ (8004210 <HAL_RCC_OscConfig+0x470>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x444>
 8004202:	e03d      	b.n	8004280 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d107      	bne.n	800421c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e038      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
 8004210:	40023800 	.word	0x40023800
 8004214:	40007000 	.word	0x40007000
 8004218:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800421c:	4b1b      	ldr	r3, [pc, #108]	@ (800428c <HAL_RCC_OscConfig+0x4ec>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d028      	beq.n	800427c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004234:	429a      	cmp	r2, r3
 8004236:	d121      	bne.n	800427c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004242:	429a      	cmp	r2, r3
 8004244:	d11a      	bne.n	800427c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800424c:	4013      	ands	r3, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004252:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004254:	4293      	cmp	r3, r2
 8004256:	d111      	bne.n	800427c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004262:	085b      	lsrs	r3, r3, #1
 8004264:	3b01      	subs	r3, #1
 8004266:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004268:	429a      	cmp	r2, r3
 800426a:	d107      	bne.n	800427c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	40023800 	.word	0x40023800

08004290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
 8004298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d101      	bne.n	80042a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e0cc      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a4:	4b68      	ldr	r3, [pc, #416]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0307 	and.w	r3, r3, #7
 80042ac:	683a      	ldr	r2, [r7, #0]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d90c      	bls.n	80042cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b2:	4b65      	ldr	r3, [pc, #404]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ba:	4b63      	ldr	r3, [pc, #396]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0307 	and.w	r3, r3, #7
 80042c2:	683a      	ldr	r2, [r7, #0]
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d001      	beq.n	80042cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e0b8      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d020      	beq.n	800431a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d005      	beq.n	80042f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80042e4:	4b59      	ldr	r3, [pc, #356]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	4a58      	ldr	r2, [pc, #352]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80042ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042fc:	4b53      	ldr	r3, [pc, #332]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4a52      	ldr	r2, [pc, #328]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004302:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004306:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004308:	4b50      	ldr	r3, [pc, #320]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	494d      	ldr	r1, [pc, #308]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0301 	and.w	r3, r3, #1
 8004322:	2b00      	cmp	r3, #0
 8004324:	d044      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d107      	bne.n	800433e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b47      	ldr	r3, [pc, #284]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d119      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e07f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	2b02      	cmp	r3, #2
 8004344:	d003      	beq.n	800434e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800434a:	2b03      	cmp	r3, #3
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	4b3f      	ldr	r3, [pc, #252]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d109      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e06f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800435e:	4b3b      	ldr	r3, [pc, #236]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e067      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800436e:	4b37      	ldr	r3, [pc, #220]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f023 0203 	bic.w	r2, r3, #3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	4934      	ldr	r1, [pc, #208]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800437c:	4313      	orrs	r3, r2
 800437e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004380:	f7ff f9be 	bl	8003700 <HAL_GetTick>
 8004384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004386:	e00a      	b.n	800439e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004388:	f7ff f9ba 	bl	8003700 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004396:	4293      	cmp	r3, r2
 8004398:	d901      	bls.n	800439e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e04f      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439e:	4b2b      	ldr	r3, [pc, #172]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f003 020c 	and.w	r2, r3, #12
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d1eb      	bne.n	8004388 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043b0:	4b25      	ldr	r3, [pc, #148]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0307 	and.w	r3, r3, #7
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d20c      	bcs.n	80043d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043be:	4b22      	ldr	r3, [pc, #136]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	b2d2      	uxtb	r2, r2
 80043c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c6:	4b20      	ldr	r3, [pc, #128]	@ (8004448 <HAL_RCC_ClockConfig+0x1b8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d001      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e032      	b.n	800443e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d008      	beq.n	80043f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043e4:	4b19      	ldr	r3, [pc, #100]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4916      	ldr	r1, [pc, #88]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	4313      	orrs	r3, r2
 80043f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004402:	4b12      	ldr	r3, [pc, #72]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	490e      	ldr	r1, [pc, #56]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004416:	f000 f821 	bl	800445c <HAL_RCC_GetSysClockFreq>
 800441a:	4602      	mov	r2, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	091b      	lsrs	r3, r3, #4
 8004422:	f003 030f 	and.w	r3, r3, #15
 8004426:	490a      	ldr	r1, [pc, #40]	@ (8004450 <HAL_RCC_ClockConfig+0x1c0>)
 8004428:	5ccb      	ldrb	r3, [r1, r3]
 800442a:	fa22 f303 	lsr.w	r3, r2, r3
 800442e:	4a09      	ldr	r2, [pc, #36]	@ (8004454 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004432:	4b09      	ldr	r3, [pc, #36]	@ (8004458 <HAL_RCC_ClockConfig+0x1c8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff f80e 	bl	8003458 <HAL_InitTick>

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40023c00 	.word	0x40023c00
 800444c:	40023800 	.word	0x40023800
 8004450:	0800e99c 	.word	0x0800e99c
 8004454:	20000070 	.word	0x20000070
 8004458:	20000074 	.word	0x20000074

0800445c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800445c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004460:	b094      	sub	sp, #80	@ 0x50
 8004462:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	647b      	str	r3, [r7, #68]	@ 0x44
 8004468:	2300      	movs	r3, #0
 800446a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800446c:	2300      	movs	r3, #0
 800446e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004474:	4b79      	ldr	r3, [pc, #484]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	f003 030c 	and.w	r3, r3, #12
 800447c:	2b08      	cmp	r3, #8
 800447e:	d00d      	beq.n	800449c <HAL_RCC_GetSysClockFreq+0x40>
 8004480:	2b08      	cmp	r3, #8
 8004482:	f200 80e1 	bhi.w	8004648 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d002      	beq.n	8004490 <HAL_RCC_GetSysClockFreq+0x34>
 800448a:	2b04      	cmp	r3, #4
 800448c:	d003      	beq.n	8004496 <HAL_RCC_GetSysClockFreq+0x3a>
 800448e:	e0db      	b.n	8004648 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004490:	4b73      	ldr	r3, [pc, #460]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x204>)
 8004492:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004494:	e0db      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004496:	4b73      	ldr	r3, [pc, #460]	@ (8004664 <HAL_RCC_GetSysClockFreq+0x208>)
 8004498:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800449a:	e0d8      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800449c:	4b6f      	ldr	r3, [pc, #444]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044a4:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044a6:	4b6d      	ldr	r3, [pc, #436]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d063      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044b2:	4b6a      	ldr	r3, [pc, #424]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	099b      	lsrs	r3, r3, #6
 80044b8:	2200      	movs	r2, #0
 80044ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044bc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80044be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80044c6:	2300      	movs	r3, #0
 80044c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80044ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80044ce:	4622      	mov	r2, r4
 80044d0:	462b      	mov	r3, r5
 80044d2:	f04f 0000 	mov.w	r0, #0
 80044d6:	f04f 0100 	mov.w	r1, #0
 80044da:	0159      	lsls	r1, r3, #5
 80044dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044e0:	0150      	lsls	r0, r2, #5
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4621      	mov	r1, r4
 80044e8:	1a51      	subs	r1, r2, r1
 80044ea:	6139      	str	r1, [r7, #16]
 80044ec:	4629      	mov	r1, r5
 80044ee:	eb63 0301 	sbc.w	r3, r3, r1
 80044f2:	617b      	str	r3, [r7, #20]
 80044f4:	f04f 0200 	mov.w	r2, #0
 80044f8:	f04f 0300 	mov.w	r3, #0
 80044fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004500:	4659      	mov	r1, fp
 8004502:	018b      	lsls	r3, r1, #6
 8004504:	4651      	mov	r1, sl
 8004506:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800450a:	4651      	mov	r1, sl
 800450c:	018a      	lsls	r2, r1, #6
 800450e:	4651      	mov	r1, sl
 8004510:	ebb2 0801 	subs.w	r8, r2, r1
 8004514:	4659      	mov	r1, fp
 8004516:	eb63 0901 	sbc.w	r9, r3, r1
 800451a:	f04f 0200 	mov.w	r2, #0
 800451e:	f04f 0300 	mov.w	r3, #0
 8004522:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004526:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800452a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800452e:	4690      	mov	r8, r2
 8004530:	4699      	mov	r9, r3
 8004532:	4623      	mov	r3, r4
 8004534:	eb18 0303 	adds.w	r3, r8, r3
 8004538:	60bb      	str	r3, [r7, #8]
 800453a:	462b      	mov	r3, r5
 800453c:	eb49 0303 	adc.w	r3, r9, r3
 8004540:	60fb      	str	r3, [r7, #12]
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800454e:	4629      	mov	r1, r5
 8004550:	024b      	lsls	r3, r1, #9
 8004552:	4621      	mov	r1, r4
 8004554:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004558:	4621      	mov	r1, r4
 800455a:	024a      	lsls	r2, r1, #9
 800455c:	4610      	mov	r0, r2
 800455e:	4619      	mov	r1, r3
 8004560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004562:	2200      	movs	r2, #0
 8004564:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004566:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004568:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800456c:	f7fc fad6 	bl	8000b1c <__aeabi_uldivmod>
 8004570:	4602      	mov	r2, r0
 8004572:	460b      	mov	r3, r1
 8004574:	4613      	mov	r3, r2
 8004576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004578:	e058      	b.n	800462c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800457a:	4b38      	ldr	r3, [pc, #224]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	099b      	lsrs	r3, r3, #6
 8004580:	2200      	movs	r2, #0
 8004582:	4618      	mov	r0, r3
 8004584:	4611      	mov	r1, r2
 8004586:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800458a:	623b      	str	r3, [r7, #32]
 800458c:	2300      	movs	r3, #0
 800458e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004590:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004594:	4642      	mov	r2, r8
 8004596:	464b      	mov	r3, r9
 8004598:	f04f 0000 	mov.w	r0, #0
 800459c:	f04f 0100 	mov.w	r1, #0
 80045a0:	0159      	lsls	r1, r3, #5
 80045a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045a6:	0150      	lsls	r0, r2, #5
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4641      	mov	r1, r8
 80045ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80045b2:	4649      	mov	r1, r9
 80045b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045cc:	ebb2 040a 	subs.w	r4, r2, sl
 80045d0:	eb63 050b 	sbc.w	r5, r3, fp
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	00eb      	lsls	r3, r5, #3
 80045de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80045e2:	00e2      	lsls	r2, r4, #3
 80045e4:	4614      	mov	r4, r2
 80045e6:	461d      	mov	r5, r3
 80045e8:	4643      	mov	r3, r8
 80045ea:	18e3      	adds	r3, r4, r3
 80045ec:	603b      	str	r3, [r7, #0]
 80045ee:	464b      	mov	r3, r9
 80045f0:	eb45 0303 	adc.w	r3, r5, r3
 80045f4:	607b      	str	r3, [r7, #4]
 80045f6:	f04f 0200 	mov.w	r2, #0
 80045fa:	f04f 0300 	mov.w	r3, #0
 80045fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004602:	4629      	mov	r1, r5
 8004604:	028b      	lsls	r3, r1, #10
 8004606:	4621      	mov	r1, r4
 8004608:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800460c:	4621      	mov	r1, r4
 800460e:	028a      	lsls	r2, r1, #10
 8004610:	4610      	mov	r0, r2
 8004612:	4619      	mov	r1, r3
 8004614:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004616:	2200      	movs	r2, #0
 8004618:	61bb      	str	r3, [r7, #24]
 800461a:	61fa      	str	r2, [r7, #28]
 800461c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004620:	f7fc fa7c 	bl	8000b1c <__aeabi_uldivmod>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4613      	mov	r3, r2
 800462a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800462c:	4b0b      	ldr	r3, [pc, #44]	@ (800465c <HAL_RCC_GetSysClockFreq+0x200>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	f003 0303 	and.w	r3, r3, #3
 8004636:	3301      	adds	r3, #1
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800463c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800463e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004640:	fbb2 f3f3 	udiv	r3, r2, r3
 8004644:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004646:	e002      	b.n	800464e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004648:	4b05      	ldr	r3, [pc, #20]	@ (8004660 <HAL_RCC_GetSysClockFreq+0x204>)
 800464a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800464c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800464e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004650:	4618      	mov	r0, r3
 8004652:	3750      	adds	r7, #80	@ 0x50
 8004654:	46bd      	mov	sp, r7
 8004656:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800465a:	bf00      	nop
 800465c:	40023800 	.word	0x40023800
 8004660:	00f42400 	.word	0x00f42400
 8004664:	007a1200 	.word	0x007a1200

08004668 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800466c:	4b03      	ldr	r3, [pc, #12]	@ (800467c <HAL_RCC_GetHCLKFreq+0x14>)
 800466e:	681b      	ldr	r3, [r3, #0]
}
 8004670:	4618      	mov	r0, r3
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20000070 	.word	0x20000070

08004680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004684:	f7ff fff0 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 8004688:	4602      	mov	r2, r0
 800468a:	4b05      	ldr	r3, [pc, #20]	@ (80046a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	0a9b      	lsrs	r3, r3, #10
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	4903      	ldr	r1, [pc, #12]	@ (80046a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004696:	5ccb      	ldrb	r3, [r1, r3]
 8004698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800469c:	4618      	mov	r0, r3
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40023800 	.word	0x40023800
 80046a4:	0800e9ac 	.word	0x0800e9ac

080046a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046ac:	f7ff ffdc 	bl	8004668 <HAL_RCC_GetHCLKFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b05      	ldr	r3, [pc, #20]	@ (80046c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	0b5b      	lsrs	r3, r3, #13
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	4903      	ldr	r1, [pc, #12]	@ (80046cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40023800 	.word	0x40023800
 80046cc:	0800e9ac 	.word	0x0800e9ac

080046d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	220f      	movs	r2, #15
 80046de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80046e0:	4b12      	ldr	r3, [pc, #72]	@ (800472c <HAL_RCC_GetClockConfig+0x5c>)
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0203 	and.w	r2, r3, #3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80046ec:	4b0f      	ldr	r3, [pc, #60]	@ (800472c <HAL_RCC_GetClockConfig+0x5c>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80046f8:	4b0c      	ldr	r3, [pc, #48]	@ (800472c <HAL_RCC_GetClockConfig+0x5c>)
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004704:	4b09      	ldr	r3, [pc, #36]	@ (800472c <HAL_RCC_GetClockConfig+0x5c>)
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	08db      	lsrs	r3, r3, #3
 800470a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004712:	4b07      	ldr	r3, [pc, #28]	@ (8004730 <HAL_RCC_GetClockConfig+0x60>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0207 	and.w	r2, r3, #7
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	601a      	str	r2, [r3, #0]
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40023800 	.word	0x40023800
 8004730:	40023c00 	.word	0x40023c00

08004734 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0301 	and.w	r3, r3, #1
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004758:	2b00      	cmp	r3, #0
 800475a:	d035      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800475c:	4b62      	ldr	r3, [pc, #392]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004762:	f7fe ffcd 	bl	8003700 <HAL_GetTick>
 8004766:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004768:	e008      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800476a:	f7fe ffc9 	bl	8003700 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e0b0      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800477c:	4b5b      	ldr	r3, [pc, #364]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1f0      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	019a      	lsls	r2, r3, #6
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	071b      	lsls	r3, r3, #28
 8004794:	4955      	ldr	r1, [pc, #340]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004796:	4313      	orrs	r3, r2
 8004798:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800479c:	4b52      	ldr	r3, [pc, #328]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800479e:	2201      	movs	r2, #1
 80047a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047a2:	f7fe ffad 	bl	8003700 <HAL_GetTick>
 80047a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047a8:	e008      	b.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80047aa:	f7fe ffa9 	bl	8003700 <HAL_GetTick>
 80047ae:	4602      	mov	r2, r0
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	1ad3      	subs	r3, r2, r3
 80047b4:	2b02      	cmp	r3, #2
 80047b6:	d901      	bls.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e090      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047bc:	4b4b      	ldr	r3, [pc, #300]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d0f0      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8083 	beq.w	80048dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047d6:	2300      	movs	r3, #0
 80047d8:	60fb      	str	r3, [r7, #12]
 80047da:	4b44      	ldr	r3, [pc, #272]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	4a43      	ldr	r2, [pc, #268]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80047e6:	4b41      	ldr	r3, [pc, #260]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047ee:	60fb      	str	r3, [r7, #12]
 80047f0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80047f2:	4b3f      	ldr	r3, [pc, #252]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a3e      	ldr	r2, [pc, #248]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80047fe:	f7fe ff7f 	bl	8003700 <HAL_GetTick>
 8004802:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004804:	e008      	b.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004806:	f7fe ff7b 	bl	8003700 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e062      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004818:	4b35      	ldr	r3, [pc, #212]	@ (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004824:	4b31      	ldr	r3, [pc, #196]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800482c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d02f      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800483c:	693a      	ldr	r2, [r7, #16]
 800483e:	429a      	cmp	r2, r3
 8004840:	d028      	beq.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004842:	4b2a      	ldr	r3, [pc, #168]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800484a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800484c:	4b29      	ldr	r3, [pc, #164]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800484e:	2201      	movs	r2, #1
 8004850:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004852:	4b28      	ldr	r3, [pc, #160]	@ (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004854:	2200      	movs	r2, #0
 8004856:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004858:	4a24      	ldr	r2, [pc, #144]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800485e:	4b23      	ldr	r3, [pc, #140]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b01      	cmp	r3, #1
 8004868:	d114      	bne.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800486a:	f7fe ff49 	bl	8003700 <HAL_GetTick>
 800486e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004870:	e00a      	b.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004872:	f7fe ff45 	bl	8003700 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004880:	4293      	cmp	r3, r2
 8004882:	d901      	bls.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004884:	2303      	movs	r3, #3
 8004886:	e02a      	b.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004888:	4b18      	ldr	r3, [pc, #96]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800488a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d0ee      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800489c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048a0:	d10d      	bne.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80048a2:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80048b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048b6:	490d      	ldr	r1, [pc, #52]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	608b      	str	r3, [r1, #8]
 80048bc:	e005      	b.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0x196>
 80048be:	4b0b      	ldr	r3, [pc, #44]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	4a0a      	ldr	r2, [pc, #40]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048c4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80048c8:	6093      	str	r3, [r2, #8]
 80048ca:	4b08      	ldr	r3, [pc, #32]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048cc:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	68db      	ldr	r3, [r3, #12]
 80048d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048d6:	4905      	ldr	r1, [pc, #20]	@ (80048ec <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	42470068 	.word	0x42470068
 80048ec:	40023800 	.word	0x40023800
 80048f0:	40007000 	.word	0x40007000
 80048f4:	42470e40 	.word	0x42470e40

080048f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e073      	b.n	80049f6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	7f5b      	ldrb	r3, [r3, #29]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	2b00      	cmp	r3, #0
 8004916:	d105      	bne.n	8004924 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fe fc32 	bl	8003188 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0310 	and.w	r3, r3, #16
 8004934:	2b10      	cmp	r3, #16
 8004936:	d055      	beq.n	80049e4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	22ca      	movs	r2, #202	@ 0xca
 800493e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2253      	movs	r2, #83	@ 0x53
 8004946:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fa49 	bl	8004de0 <RTC_EnterInitMode>
 800494e:	4603      	mov	r3, r0
 8004950:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004952:	7bfb      	ldrb	r3, [r7, #15]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d12c      	bne.n	80049b2 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004966:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800496a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	6899      	ldr	r1, [r3, #8]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	431a      	orrs	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	695b      	ldr	r3, [r3, #20]
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	68d2      	ldr	r2, [r2, #12]
 8004992:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6919      	ldr	r1, [r3, #16]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	041a      	lsls	r2, r3, #16
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fa50 	bl	8004e4e <RTC_ExitInitMode>
 80049ae:	4603      	mov	r3, r0
 80049b0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d110      	bne.n	80049da <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80049c6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699a      	ldr	r2, [r3, #24]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	430a      	orrs	r2, r1
 80049d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	22ff      	movs	r2, #255	@ 0xff
 80049e0:	625a      	str	r2, [r3, #36]	@ 0x24
 80049e2:	e001      	b.n	80049e8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d102      	bne.n	80049f4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80049fe:	b590      	push	{r4, r7, lr}
 8004a00:	b087      	sub	sp, #28
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	60f8      	str	r0, [r7, #12]
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	7f1b      	ldrb	r3, [r3, #28]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_RTC_SetTime+0x1c>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e087      	b.n	8004b2a <HAL_RTC_SetTime+0x12c>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2202      	movs	r2, #2
 8004a24:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d126      	bne.n	8004a7a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d102      	bne.n	8004a40 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fa27 	bl	8004e98 <RTC_ByteToBcd2>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	785b      	ldrb	r3, [r3, #1]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 fa20 	bl	8004e98 <RTC_ByteToBcd2>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a5c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	789b      	ldrb	r3, [r3, #2]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fa18 	bl	8004e98 <RTC_ByteToBcd2>
 8004a68:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8004a6a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	78db      	ldrb	r3, [r3, #3]
 8004a72:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e018      	b.n	8004aac <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d102      	bne.n	8004a8e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	785b      	ldrb	r3, [r3, #1]
 8004a98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004a9a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8004aa0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	78db      	ldrb	r3, [r3, #3]
 8004aa6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	22ca      	movs	r2, #202	@ 0xca
 8004ab2:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2253      	movs	r2, #83	@ 0x53
 8004aba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f98f 	bl	8004de0 <RTC_EnterInitMode>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004ac6:	7cfb      	ldrb	r3, [r7, #19]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d120      	bne.n	8004b0e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004ad6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004ada:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689a      	ldr	r2, [r3, #8]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004aea:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6899      	ldr	r1, [r3, #8]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004b04:	68f8      	ldr	r0, [r7, #12]
 8004b06:	f000 f9a2 	bl	8004e4e <RTC_ExitInitMode>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004b0e:	7cfb      	ldrb	r3, [r7, #19]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d102      	bne.n	8004b1a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2201      	movs	r2, #1
 8004b18:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	22ff      	movs	r2, #255	@ 0xff
 8004b20:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]

  return status;
 8004b28:	7cfb      	ldrb	r3, [r7, #19]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	371c      	adds	r7, #28
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd90      	pop	{r4, r7, pc}

08004b32 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	60b9      	str	r1, [r7, #8]
 8004b3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b48:	68bb      	ldr	r3, [r7, #8]
 8004b4a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004b64:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004b68:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	0c1b      	lsrs	r3, r3, #16
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	0a1b      	lsrs	r3, r3, #8
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b84:	b2da      	uxtb	r2, r3
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	0d9b      	lsrs	r3, r3, #22
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d11a      	bne.n	8004be4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f98e 	bl	8004ed4 <RTC_Bcd2ToByte>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	785b      	ldrb	r3, [r3, #1]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f000 f985 	bl	8004ed4 <RTC_Bcd2ToByte>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	461a      	mov	r2, r3
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	789b      	ldrb	r3, [r3, #2]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f000 f97c 	bl	8004ed4 <RTC_Bcd2ToByte>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	461a      	mov	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}

08004bee <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004bee:	b590      	push	{r4, r7, lr}
 8004bf0:	b087      	sub	sp, #28
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	60f8      	str	r0, [r7, #12]
 8004bf6:	60b9      	str	r1, [r7, #8]
 8004bf8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	7f1b      	ldrb	r3, [r3, #28]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_RTC_SetDate+0x1c>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e071      	b.n	8004cee <HAL_RTC_SetDate+0x100>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2202      	movs	r2, #2
 8004c14:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10e      	bne.n	8004c3a <HAL_RTC_SetDate+0x4c>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	f003 0310 	and.w	r3, r3, #16
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	f023 0310 	bic.w	r3, r3, #16
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	330a      	adds	r3, #10
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d11c      	bne.n	8004c7a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	78db      	ldrb	r3, [r3, #3]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f000 f927 	bl	8004e98 <RTC_ByteToBcd2>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	785b      	ldrb	r3, [r3, #1]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f920 	bl	8004e98 <RTC_ByteToBcd2>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c5c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	789b      	ldrb	r3, [r3, #2]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 f918 	bl	8004e98 <RTC_ByteToBcd2>
 8004c68:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004c6a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]
 8004c78:	e00e      	b.n	8004c98 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	78db      	ldrb	r3, [r3, #3]
 8004c7e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c86:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8004c8c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8004c94:	4313      	orrs	r3, r2
 8004c96:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	22ca      	movs	r2, #202	@ 0xca
 8004c9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2253      	movs	r2, #83	@ 0x53
 8004ca6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f899 	bl	8004de0 <RTC_EnterInitMode>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004cb2:	7cfb      	ldrb	r3, [r7, #19]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d10c      	bne.n	8004cd2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004cc2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004cc6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f8c0 	bl	8004e4e <RTC_ExitInitMode>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8004cd2:	7cfb      	ldrb	r3, [r7, #19]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d102      	bne.n	8004cde <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	22ff      	movs	r2, #255	@ 0xff
 8004ce4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	771a      	strb	r2, [r3, #28]

  return status;
 8004cec:	7cfb      	ldrb	r3, [r7, #19]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	371c      	adds	r7, #28
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd90      	pop	{r4, r7, pc}

08004cf6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b086      	sub	sp, #24
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	60f8      	str	r0, [r7, #12]
 8004cfe:	60b9      	str	r1, [r7, #8]
 8004d00:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004d02:	2300      	movs	r3, #0
 8004d04:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004d10:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004d14:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	0a1b      	lsrs	r3, r3, #8
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	f003 031f 	and.w	r3, r3, #31
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d38:	b2da      	uxtb	r2, r3
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	0b5b      	lsrs	r3, r3, #13
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d11a      	bne.n	8004d8a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	78db      	ldrb	r3, [r3, #3]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 f8bb 	bl	8004ed4 <RTC_Bcd2ToByte>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	461a      	mov	r2, r3
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	785b      	ldrb	r3, [r3, #1]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 f8b2 	bl	8004ed4 <RTC_Bcd2ToByte>
 8004d70:	4603      	mov	r3, r0
 8004d72:	461a      	mov	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	789b      	ldrb	r3, [r3, #2]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 f8a9 	bl	8004ed4 <RTC_Bcd2ToByte>
 8004d82:	4603      	mov	r3, r0
 8004d84:	461a      	mov	r2, r3
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8004d8a:	2300      	movs	r3, #0
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	3718      	adds	r7, #24
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a0d      	ldr	r2, [pc, #52]	@ (8004ddc <HAL_RTC_WaitForSynchro+0x48>)
 8004da6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da8:	f7fe fcaa 	bl	8003700 <HAL_GetTick>
 8004dac:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004dae:	e009      	b.n	8004dc4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004db0:	f7fe fca6 	bl	8003700 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e007      	b.n	8004dd4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f003 0320 	and.w	r3, r3, #32
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0ee      	beq.n	8004db0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	00017f5f 	.word	0x00017f5f

08004de0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004dec:	2300      	movs	r3, #0
 8004dee:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d122      	bne.n	8004e44 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004e0c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e0e:	f7fe fc77 	bl	8003700 <HAL_GetTick>
 8004e12:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e14:	e00c      	b.n	8004e30 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004e16:	f7fe fc73 	bl	8003700 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004e24:	d904      	bls.n	8004e30 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2204      	movs	r2, #4
 8004e2a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d102      	bne.n	8004e44 <RTC_EnterInitMode+0x64>
 8004e3e:	7bfb      	ldrb	r3, [r7, #15]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d1e8      	bne.n	8004e16 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004e44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3710      	adds	r7, #16
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b084      	sub	sp, #16
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e68:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 0320 	and.w	r3, r3, #32
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10a      	bne.n	8004e8e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f7ff ff8b 	bl	8004d94 <HAL_RTC_WaitForSynchro>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d004      	beq.n	8004e8e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2204      	movs	r2, #4
 8004e88:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b085      	sub	sp, #20
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8004ea6:	e005      	b.n	8004eb4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	3b0a      	subs	r3, #10
 8004eb2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	2b09      	cmp	r3, #9
 8004eb8:	d8f6      	bhi.n	8004ea8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	011b      	lsls	r3, r3, #4
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	b2db      	uxtb	r3, r3
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	4603      	mov	r3, r0
 8004edc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8004ee2:	79fb      	ldrb	r3, [r7, #7]
 8004ee4:	091b      	lsrs	r3, r3, #4
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	461a      	mov	r2, r3
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	005b      	lsls	r3, r3, #1
 8004ef2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	b2da      	uxtb	r2, r3
 8004ef8:	79fb      	ldrb	r3, [r7, #7]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	4413      	add	r3, r2
 8004f02:	b2db      	uxtb	r3, r3
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	3714      	adds	r7, #20
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e07b      	b.n	800501a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d108      	bne.n	8004f3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f32:	d009      	beq.n	8004f48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	61da      	str	r2, [r3, #28]
 8004f3a:	e005      	b.n	8004f48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d106      	bne.n	8004f68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7fe f93a 	bl	80031dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004f90:	431a      	orrs	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f003 0302 	and.w	r3, r3, #2
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fcc:	ea42 0103 	orr.w	r1, r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	430a      	orrs	r2, r1
 8004fde:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	699b      	ldr	r3, [r3, #24]
 8004fe4:	0c1b      	lsrs	r3, r3, #16
 8004fe6:	f003 0104 	and.w	r1, r3, #4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	f003 0210 	and.w	r2, r3, #16
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005008:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2200      	movs	r2, #0
 800500e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2201      	movs	r2, #1
 8005014:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b088      	sub	sp, #32
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	603b      	str	r3, [r7, #0]
 800502e:	4613      	mov	r3, r2
 8005030:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_SPI_Transmit+0x22>
 8005040:	2302      	movs	r3, #2
 8005042:	e12d      	b.n	80052a0 <HAL_SPI_Transmit+0x27e>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800504c:	f7fe fb58 	bl	8003700 <HAL_GetTick>
 8005050:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005052:	88fb      	ldrh	r3, [r7, #6]
 8005054:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800505c:	b2db      	uxtb	r3, r3
 800505e:	2b01      	cmp	r3, #1
 8005060:	d002      	beq.n	8005068 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005062:	2302      	movs	r3, #2
 8005064:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005066:	e116      	b.n	8005296 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d002      	beq.n	8005074 <HAL_SPI_Transmit+0x52>
 800506e:	88fb      	ldrh	r3, [r7, #6]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d102      	bne.n	800507a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005078:	e10d      	b.n	8005296 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2203      	movs	r2, #3
 800507e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2200      	movs	r2, #0
 80050aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c0:	d10f      	bne.n	80050e2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80050e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ec:	2b40      	cmp	r3, #64	@ 0x40
 80050ee:	d007      	beq.n	8005100 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80050fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005108:	d14f      	bne.n	80051aa <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d002      	beq.n	8005118 <HAL_SPI_Transmit+0xf6>
 8005112:	8afb      	ldrh	r3, [r7, #22]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d142      	bne.n	800519e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	881a      	ldrh	r2, [r3, #0]
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005128:	1c9a      	adds	r2, r3, #2
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005132:	b29b      	uxth	r3, r3
 8005134:	3b01      	subs	r3, #1
 8005136:	b29a      	uxth	r2, r3
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800513c:	e02f      	b.n	800519e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f003 0302 	and.w	r3, r3, #2
 8005148:	2b02      	cmp	r3, #2
 800514a:	d112      	bne.n	8005172 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005150:	881a      	ldrh	r2, [r3, #0]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800515c:	1c9a      	adds	r2, r3, #2
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005166:	b29b      	uxth	r3, r3
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005170:	e015      	b.n	800519e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005172:	f7fe fac5 	bl	8003700 <HAL_GetTick>
 8005176:	4602      	mov	r2, r0
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	683a      	ldr	r2, [r7, #0]
 800517e:	429a      	cmp	r2, r3
 8005180:	d803      	bhi.n	800518a <HAL_SPI_Transmit+0x168>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005188:	d102      	bne.n	8005190 <HAL_SPI_Transmit+0x16e>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d106      	bne.n	800519e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2201      	movs	r2, #1
 8005198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800519c:	e07b      	b.n	8005296 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1ca      	bne.n	800513e <HAL_SPI_Transmit+0x11c>
 80051a8:	e050      	b.n	800524c <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_SPI_Transmit+0x196>
 80051b2:	8afb      	ldrh	r3, [r7, #22]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d144      	bne.n	8005242 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	7812      	ldrb	r2, [r2, #0]
 80051c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80051d4:	b29b      	uxth	r3, r3
 80051d6:	3b01      	subs	r3, #1
 80051d8:	b29a      	uxth	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051de:	e030      	b.n	8005242 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d113      	bne.n	8005216 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	330c      	adds	r3, #12
 80051f8:	7812      	ldrb	r2, [r2, #0]
 80051fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005200:	1c5a      	adds	r2, r3, #1
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800520a:	b29b      	uxth	r3, r3
 800520c:	3b01      	subs	r3, #1
 800520e:	b29a      	uxth	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005214:	e015      	b.n	8005242 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005216:	f7fe fa73 	bl	8003700 <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	1ad3      	subs	r3, r2, r3
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	429a      	cmp	r2, r3
 8005224:	d803      	bhi.n	800522e <HAL_SPI_Transmit+0x20c>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800522c:	d102      	bne.n	8005234 <HAL_SPI_Transmit+0x212>
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d106      	bne.n	8005242 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005240:	e029      	b.n	8005296 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005246:	b29b      	uxth	r3, r3
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1c9      	bne.n	80051e0 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	6839      	ldr	r1, [r7, #0]
 8005250:	68f8      	ldr	r0, [r7, #12]
 8005252:	f000 fbdf 	bl	8005a14 <SPI_EndRxTxTransaction>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	689b      	ldr	r3, [r3, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d10a      	bne.n	8005280 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800526a:	2300      	movs	r3, #0
 800526c:	613b      	str	r3, [r7, #16]
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	77fb      	strb	r3, [r7, #31]
 800528c:	e003      	b.n	8005296 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800529e:	7ffb      	ldrb	r3, [r7, #31]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3720      	adds	r7, #32
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	603b      	str	r3, [r7, #0]
 80052b4:	4613      	mov	r3, r2
 80052b6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052b8:	2300      	movs	r3, #0
 80052ba:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80052c8:	2302      	movs	r3, #2
 80052ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052cc:	e0fb      	b.n	80054c6 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80052d6:	d112      	bne.n	80052fe <HAL_SPI_Receive+0x56>
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10e      	bne.n	80052fe <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2204      	movs	r2, #4
 80052e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052e8:	88fa      	ldrh	r2, [r7, #6]
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	4613      	mov	r3, r2
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	f000 f8ef 	bl	80054d8 <HAL_SPI_TransmitReceive>
 80052fa:	4603      	mov	r3, r0
 80052fc:	e0e8      	b.n	80054d0 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005304:	2b01      	cmp	r3, #1
 8005306:	d101      	bne.n	800530c <HAL_SPI_Receive+0x64>
 8005308:	2302      	movs	r3, #2
 800530a:	e0e1      	b.n	80054d0 <HAL_SPI_Receive+0x228>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005314:	f7fe f9f4 	bl	8003700 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d002      	beq.n	8005326 <HAL_SPI_Receive+0x7e>
 8005320:	88fb      	ldrh	r3, [r7, #6]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d102      	bne.n	800532c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	75fb      	strb	r3, [r7, #23]
    goto error;
 800532a:	e0cc      	b.n	80054c6 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2204      	movs	r2, #4
 8005330:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	88fa      	ldrh	r2, [r7, #6]
 8005344:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	88fa      	ldrh	r2, [r7, #6]
 800534a:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2200      	movs	r2, #0
 800535c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2200      	movs	r2, #0
 8005362:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005372:	d10f      	bne.n	8005394 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005382:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005392:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539e:	2b40      	cmp	r3, #64	@ 0x40
 80053a0:	d007      	beq.n	80053b2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80053b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d16a      	bne.n	8005490 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053ba:	e032      	b.n	8005422 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d115      	bne.n	80053f6 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f103 020c 	add.w	r2, r3, #12
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d6:	7812      	ldrb	r2, [r2, #0]
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80053f4:	e015      	b.n	8005422 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80053f6:	f7fe f983 	bl	8003700 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d803      	bhi.n	800540e <HAL_SPI_Receive+0x166>
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800540c:	d102      	bne.n	8005414 <HAL_SPI_Receive+0x16c>
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005420:	e051      	b.n	80054c6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1c7      	bne.n	80053bc <HAL_SPI_Receive+0x114>
 800542c:	e035      	b.n	800549a <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 0301 	and.w	r3, r3, #1
 8005438:	2b01      	cmp	r3, #1
 800543a:	d113      	bne.n	8005464 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005446:	b292      	uxth	r2, r2
 8005448:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544e:	1c9a      	adds	r2, r3, #2
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005458:	b29b      	uxth	r3, r3
 800545a:	3b01      	subs	r3, #1
 800545c:	b29a      	uxth	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005462:	e015      	b.n	8005490 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005464:	f7fe f94c 	bl	8003700 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d803      	bhi.n	800547c <HAL_SPI_Receive+0x1d4>
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800547a:	d102      	bne.n	8005482 <HAL_SPI_Receive+0x1da>
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800548e:	e01a      	b.n	80054c6 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005494:	b29b      	uxth	r3, r3
 8005496:	2b00      	cmp	r3, #0
 8005498:	d1c9      	bne.n	800542e <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800549a:	693a      	ldr	r2, [r7, #16]
 800549c:	6839      	ldr	r1, [r7, #0]
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	f000 fa52 	bl	8005948 <SPI_EndRxTransaction>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d002      	beq.n	80054b0 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2220      	movs	r2, #32
 80054ae:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d002      	beq.n	80054be <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	75fb      	strb	r3, [r7, #23]
 80054bc:	e003      	b.n	80054c6 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80054ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3718      	adds	r7, #24
 80054d4:	46bd      	mov	sp, r7
 80054d6:	bd80      	pop	{r7, pc}

080054d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b08c      	sub	sp, #48	@ 0x30
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80054e6:	2301      	movs	r3, #1
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_SPI_TransmitReceive+0x26>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e198      	b.n	8005830 <HAL_SPI_TransmitReceive+0x358>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005506:	f7fe f8fb 	bl	8003700 <HAL_GetTick>
 800550a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005512:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800551c:	887b      	ldrh	r3, [r7, #2]
 800551e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005520:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005524:	2b01      	cmp	r3, #1
 8005526:	d00f      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x70>
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800552e:	d107      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d103      	bne.n	8005540 <HAL_SPI_TransmitReceive+0x68>
 8005538:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800553c:	2b04      	cmp	r3, #4
 800553e:	d003      	beq.n	8005548 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005540:	2302      	movs	r3, #2
 8005542:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005546:	e16d      	b.n	8005824 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d005      	beq.n	800555a <HAL_SPI_TransmitReceive+0x82>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <HAL_SPI_TransmitReceive+0x82>
 8005554:	887b      	ldrh	r3, [r7, #2]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d103      	bne.n	8005562 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005560:	e160      	b.n	8005824 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b04      	cmp	r3, #4
 800556c:	d003      	beq.n	8005576 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2205      	movs	r2, #5
 8005572:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	687a      	ldr	r2, [r7, #4]
 8005580:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	887a      	ldrh	r2, [r7, #2]
 8005586:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	887a      	ldrh	r2, [r7, #2]
 800558c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	887a      	ldrh	r2, [r7, #2]
 8005598:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	887a      	ldrh	r2, [r7, #2]
 800559e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2200      	movs	r2, #0
 80055a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b6:	2b40      	cmp	r3, #64	@ 0x40
 80055b8:	d007      	beq.n	80055ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055d2:	d17c      	bne.n	80056ce <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <HAL_SPI_TransmitReceive+0x10a>
 80055dc:	8b7b      	ldrh	r3, [r7, #26]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d16a      	bne.n	80056b8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055e6:	881a      	ldrh	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055f2:	1c9a      	adds	r2, r3, #2
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005606:	e057      	b.n	80056b8 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b02      	cmp	r3, #2
 8005614:	d11b      	bne.n	800564e <HAL_SPI_TransmitReceive+0x176>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800561a:	b29b      	uxth	r3, r3
 800561c:	2b00      	cmp	r3, #0
 800561e:	d016      	beq.n	800564e <HAL_SPI_TransmitReceive+0x176>
 8005620:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005622:	2b01      	cmp	r3, #1
 8005624:	d113      	bne.n	800564e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800562a:	881a      	ldrh	r2, [r3, #0]
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005636:	1c9a      	adds	r2, r3, #2
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005640:	b29b      	uxth	r3, r3
 8005642:	3b01      	subs	r3, #1
 8005644:	b29a      	uxth	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800564a:	2300      	movs	r3, #0
 800564c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f003 0301 	and.w	r3, r3, #1
 8005658:	2b01      	cmp	r3, #1
 800565a:	d119      	bne.n	8005690 <HAL_SPI_TransmitReceive+0x1b8>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d014      	beq.n	8005690 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68da      	ldr	r2, [r3, #12]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005670:	b292      	uxth	r2, r2
 8005672:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005678:	1c9a      	adds	r2, r3, #2
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005682:	b29b      	uxth	r3, r3
 8005684:	3b01      	subs	r3, #1
 8005686:	b29a      	uxth	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800568c:	2301      	movs	r3, #1
 800568e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005690:	f7fe f836 	bl	8003700 <HAL_GetTick>
 8005694:	4602      	mov	r2, r0
 8005696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800569c:	429a      	cmp	r2, r3
 800569e:	d80b      	bhi.n	80056b8 <HAL_SPI_TransmitReceive+0x1e0>
 80056a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056a6:	d007      	beq.n	80056b8 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80056b6:	e0b5      	b.n	8005824 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056bc:	b29b      	uxth	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1a2      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x130>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d19d      	bne.n	8005608 <HAL_SPI_TransmitReceive+0x130>
 80056cc:	e080      	b.n	80057d0 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d002      	beq.n	80056dc <HAL_SPI_TransmitReceive+0x204>
 80056d6:	8b7b      	ldrh	r3, [r7, #26]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d16f      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	330c      	adds	r3, #12
 80056e6:	7812      	ldrb	r2, [r2, #0]
 80056e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ee:	1c5a      	adds	r2, r3, #1
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056f8:	b29b      	uxth	r3, r3
 80056fa:	3b01      	subs	r3, #1
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005702:	e05b      	b.n	80057bc <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f003 0302 	and.w	r3, r3, #2
 800570e:	2b02      	cmp	r3, #2
 8005710:	d11c      	bne.n	800574c <HAL_SPI_TransmitReceive+0x274>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005716:	b29b      	uxth	r3, r3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d017      	beq.n	800574c <HAL_SPI_TransmitReceive+0x274>
 800571c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800571e:	2b01      	cmp	r3, #1
 8005720:	d114      	bne.n	800574c <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	7812      	ldrb	r2, [r2, #0]
 800572e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005734:	1c5a      	adds	r2, r3, #1
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800573e:	b29b      	uxth	r3, r3
 8005740:	3b01      	subs	r3, #1
 8005742:	b29a      	uxth	r2, r3
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f003 0301 	and.w	r3, r3, #1
 8005756:	2b01      	cmp	r3, #1
 8005758:	d119      	bne.n	800578e <HAL_SPI_TransmitReceive+0x2b6>
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800575e:	b29b      	uxth	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d014      	beq.n	800578e <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576e:	b2d2      	uxtb	r2, r2
 8005770:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005776:	1c5a      	adds	r2, r3, #1
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005780:	b29b      	uxth	r3, r3
 8005782:	3b01      	subs	r3, #1
 8005784:	b29a      	uxth	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800578a:	2301      	movs	r3, #1
 800578c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800578e:	f7fd ffb7 	bl	8003700 <HAL_GetTick>
 8005792:	4602      	mov	r2, r0
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800579a:	429a      	cmp	r2, r3
 800579c:	d803      	bhi.n	80057a6 <HAL_SPI_TransmitReceive+0x2ce>
 800579e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80057a4:	d102      	bne.n	80057ac <HAL_SPI_TransmitReceive+0x2d4>
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d107      	bne.n	80057bc <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80057ba:	e033      	b.n	8005824 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d19e      	bne.n	8005704 <HAL_SPI_TransmitReceive+0x22c>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d199      	bne.n	8005704 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 f91d 	bl	8005a14 <SPI_EndRxTxTransaction>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d006      	beq.n	80057ee <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2220      	movs	r2, #32
 80057ea:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80057ec:	e01a      	b.n	8005824 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10a      	bne.n	800580c <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	617b      	str	r3, [r7, #20]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800581a:	e003      	b.n	8005824 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800582c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8005830:	4618      	mov	r0, r3
 8005832:	3730      	adds	r7, #48	@ 0x30
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	603b      	str	r3, [r7, #0]
 8005844:	4613      	mov	r3, r2
 8005846:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005848:	f7fd ff5a 	bl	8003700 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005850:	1a9b      	subs	r3, r3, r2
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	4413      	add	r3, r2
 8005856:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005858:	f7fd ff52 	bl	8003700 <HAL_GetTick>
 800585c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800585e:	4b39      	ldr	r3, [pc, #228]	@ (8005944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	015b      	lsls	r3, r3, #5
 8005864:	0d1b      	lsrs	r3, r3, #20
 8005866:	69fa      	ldr	r2, [r7, #28]
 8005868:	fb02 f303 	mul.w	r3, r2, r3
 800586c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800586e:	e054      	b.n	800591a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005876:	d050      	beq.n	800591a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005878:	f7fd ff42 	bl	8003700 <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	429a      	cmp	r2, r3
 8005886:	d902      	bls.n	800588e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d13d      	bne.n	800590a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800589c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058a6:	d111      	bne.n	80058cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80058b0:	d004      	beq.n	80058bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058ba:	d107      	bne.n	80058cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80058d4:	d10f      	bne.n	80058f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058e4:	601a      	str	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2201      	movs	r2, #1
 80058fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	e017      	b.n	800593a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	3b01      	subs	r3, #1
 8005918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4013      	ands	r3, r2
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	429a      	cmp	r2, r3
 8005928:	bf0c      	ite	eq
 800592a:	2301      	moveq	r3, #1
 800592c:	2300      	movne	r3, #0
 800592e:	b2db      	uxtb	r3, r3
 8005930:	461a      	mov	r2, r3
 8005932:	79fb      	ldrb	r3, [r7, #7]
 8005934:	429a      	cmp	r2, r3
 8005936:	d19b      	bne.n	8005870 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3720      	adds	r7, #32
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop
 8005944:	20000070 	.word	0x20000070

08005948 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af02      	add	r7, sp, #8
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800595c:	d111      	bne.n	8005982 <SPI_EndRxTransaction+0x3a>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005966:	d004      	beq.n	8005972 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005970:	d107      	bne.n	8005982 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005980:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800598a:	d12a      	bne.n	80059e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005994:	d012      	beq.n	80059bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	2200      	movs	r2, #0
 800599e:	2180      	movs	r1, #128	@ 0x80
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff ff49 	bl	8005838 <SPI_WaitFlagStateUntilTimeout>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d02d      	beq.n	8005a08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059b0:	f043 0220 	orr.w	r2, r3, #32
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e026      	b.n	8005a0a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2200      	movs	r2, #0
 80059c4:	2101      	movs	r1, #1
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f7ff ff36 	bl	8005838 <SPI_WaitFlagStateUntilTimeout>
 80059cc:	4603      	mov	r3, r0
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01a      	beq.n	8005a08 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d6:	f043 0220 	orr.w	r2, r3, #32
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	e013      	b.n	8005a0a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	2200      	movs	r2, #0
 80059ea:	2101      	movs	r1, #1
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f7ff ff23 	bl	8005838 <SPI_WaitFlagStateUntilTimeout>
 80059f2:	4603      	mov	r3, r0
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fc:	f043 0220 	orr.w	r2, r3, #32
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e000      	b.n	8005a0a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a08:	2300      	movs	r3, #0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b088      	sub	sp, #32
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	2201      	movs	r2, #1
 8005a28:	2102      	movs	r1, #2
 8005a2a:	68f8      	ldr	r0, [r7, #12]
 8005a2c:	f7ff ff04 	bl	8005838 <SPI_WaitFlagStateUntilTimeout>
 8005a30:	4603      	mov	r3, r0
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d007      	beq.n	8005a46 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a3a:	f043 0220 	orr.w	r2, r3, #32
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005a42:	2303      	movs	r3, #3
 8005a44:	e032      	b.n	8005aac <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a46:	4b1b      	ldr	r3, [pc, #108]	@ (8005ab4 <SPI_EndRxTxTransaction+0xa0>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab8 <SPI_EndRxTxTransaction+0xa4>)
 8005a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8005a50:	0d5b      	lsrs	r3, r3, #21
 8005a52:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005a56:	fb02 f303 	mul.w	r3, r2, r3
 8005a5a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685b      	ldr	r3, [r3, #4]
 8005a60:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a64:	d112      	bne.n	8005a8c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2180      	movs	r1, #128	@ 0x80
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f7ff fee1 	bl	8005838 <SPI_WaitFlagStateUntilTimeout>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d016      	beq.n	8005aaa <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a80:	f043 0220 	orr.w	r2, r3, #32
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e00f      	b.n	8005aac <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00a      	beq.n	8005aa8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa2:	2b80      	cmp	r3, #128	@ 0x80
 8005aa4:	d0f2      	beq.n	8005a8c <SPI_EndRxTxTransaction+0x78>
 8005aa6:	e000      	b.n	8005aaa <SPI_EndRxTxTransaction+0x96>
        break;
 8005aa8:	bf00      	nop
  }

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	20000070 	.word	0x20000070
 8005ab8:	165e9f81 	.word	0x165e9f81

08005abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d101      	bne.n	8005ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e041      	b.n	8005b52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d106      	bne.n	8005ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f7fd fbe4 	bl	80032b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2202      	movs	r2, #2
 8005aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	4619      	mov	r1, r3
 8005afa:	4610      	mov	r0, r2
 8005afc:	f000 fc58 	bl	80063b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2201      	movs	r2, #1
 8005b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2201      	movs	r2, #1
 8005b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005b50:	2300      	movs	r3, #0
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	3708      	adds	r7, #8
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}
	...

08005b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d001      	beq.n	8005b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e04e      	b.n	8005c12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68da      	ldr	r2, [r3, #12]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f042 0201 	orr.w	r2, r2, #1
 8005b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a23      	ldr	r2, [pc, #140]	@ (8005c20 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d022      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x80>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b9e:	d01d      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x80>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a1f      	ldr	r2, [pc, #124]	@ (8005c24 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d018      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x80>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a1e      	ldr	r2, [pc, #120]	@ (8005c28 <HAL_TIM_Base_Start_IT+0xcc>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d013      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x80>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a1c      	ldr	r2, [pc, #112]	@ (8005c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d00e      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x80>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a1b      	ldr	r2, [pc, #108]	@ (8005c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d009      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x80>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a19      	ldr	r2, [pc, #100]	@ (8005c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d004      	beq.n	8005bdc <HAL_TIM_Base_Start_IT+0x80>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a18      	ldr	r2, [pc, #96]	@ (8005c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d111      	bne.n	8005c00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b06      	cmp	r3, #6
 8005bec:	d010      	beq.n	8005c10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f042 0201 	orr.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bfe:	e007      	b.n	8005c10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c10:	2300      	movs	r3, #0
}
 8005c12:	4618      	mov	r0, r3
 8005c14:	3714      	adds	r7, #20
 8005c16:	46bd      	mov	sp, r7
 8005c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1c:	4770      	bx	lr
 8005c1e:	bf00      	nop
 8005c20:	40010000 	.word	0x40010000
 8005c24:	40000400 	.word	0x40000400
 8005c28:	40000800 	.word	0x40000800
 8005c2c:	40000c00 	.word	0x40000c00
 8005c30:	40010400 	.word	0x40010400
 8005c34:	40014000 	.word	0x40014000
 8005c38:	40001800 	.word	0x40001800

08005c3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e041      	b.n	8005cd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fd fb02 	bl	800326c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	3304      	adds	r3, #4
 8005c78:	4619      	mov	r1, r3
 8005c7a:	4610      	mov	r0, r2
 8005c7c:	f000 fb98 	bl	80063b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2201      	movs	r2, #1
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
 8005ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d109      	bne.n	8005d00 <HAL_TIM_PWM_Start+0x24>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	bf14      	ite	ne
 8005cf8:	2301      	movne	r3, #1
 8005cfa:	2300      	moveq	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	e022      	b.n	8005d46 <HAL_TIM_PWM_Start+0x6a>
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b04      	cmp	r3, #4
 8005d04:	d109      	bne.n	8005d1a <HAL_TIM_PWM_Start+0x3e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	bf14      	ite	ne
 8005d12:	2301      	movne	r3, #1
 8005d14:	2300      	moveq	r3, #0
 8005d16:	b2db      	uxtb	r3, r3
 8005d18:	e015      	b.n	8005d46 <HAL_TIM_PWM_Start+0x6a>
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b08      	cmp	r3, #8
 8005d1e:	d109      	bne.n	8005d34 <HAL_TIM_PWM_Start+0x58>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	bf14      	ite	ne
 8005d2c:	2301      	movne	r3, #1
 8005d2e:	2300      	moveq	r3, #0
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	e008      	b.n	8005d46 <HAL_TIM_PWM_Start+0x6a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	bf14      	ite	ne
 8005d40:	2301      	movne	r3, #1
 8005d42:	2300      	moveq	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d001      	beq.n	8005d4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	e07c      	b.n	8005e48 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d104      	bne.n	8005d5e <HAL_TIM_PWM_Start+0x82>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005d5c:	e013      	b.n	8005d86 <HAL_TIM_PWM_Start+0xaa>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b04      	cmp	r3, #4
 8005d62:	d104      	bne.n	8005d6e <HAL_TIM_PWM_Start+0x92>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2202      	movs	r2, #2
 8005d68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d6c:	e00b      	b.n	8005d86 <HAL_TIM_PWM_Start+0xaa>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b08      	cmp	r3, #8
 8005d72:	d104      	bne.n	8005d7e <HAL_TIM_PWM_Start+0xa2>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2202      	movs	r2, #2
 8005d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d7c:	e003      	b.n	8005d86 <HAL_TIM_PWM_Start+0xaa>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2202      	movs	r2, #2
 8005d82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fe04 	bl	800699c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a2d      	ldr	r2, [pc, #180]	@ (8005e50 <HAL_TIM_PWM_Start+0x174>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d004      	beq.n	8005da8 <HAL_TIM_PWM_Start+0xcc>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a2c      	ldr	r2, [pc, #176]	@ (8005e54 <HAL_TIM_PWM_Start+0x178>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d101      	bne.n	8005dac <HAL_TIM_PWM_Start+0xd0>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <HAL_TIM_PWM_Start+0xd2>
 8005dac:	2300      	movs	r3, #0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d007      	beq.n	8005dc2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005dc0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a22      	ldr	r2, [pc, #136]	@ (8005e50 <HAL_TIM_PWM_Start+0x174>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d022      	beq.n	8005e12 <HAL_TIM_PWM_Start+0x136>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dd4:	d01d      	beq.n	8005e12 <HAL_TIM_PWM_Start+0x136>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a1f      	ldr	r2, [pc, #124]	@ (8005e58 <HAL_TIM_PWM_Start+0x17c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d018      	beq.n	8005e12 <HAL_TIM_PWM_Start+0x136>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a1d      	ldr	r2, [pc, #116]	@ (8005e5c <HAL_TIM_PWM_Start+0x180>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d013      	beq.n	8005e12 <HAL_TIM_PWM_Start+0x136>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a1c      	ldr	r2, [pc, #112]	@ (8005e60 <HAL_TIM_PWM_Start+0x184>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d00e      	beq.n	8005e12 <HAL_TIM_PWM_Start+0x136>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	4a16      	ldr	r2, [pc, #88]	@ (8005e54 <HAL_TIM_PWM_Start+0x178>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d009      	beq.n	8005e12 <HAL_TIM_PWM_Start+0x136>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a18      	ldr	r2, [pc, #96]	@ (8005e64 <HAL_TIM_PWM_Start+0x188>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d004      	beq.n	8005e12 <HAL_TIM_PWM_Start+0x136>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a16      	ldr	r2, [pc, #88]	@ (8005e68 <HAL_TIM_PWM_Start+0x18c>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d111      	bne.n	8005e36 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f003 0307 	and.w	r3, r3, #7
 8005e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2b06      	cmp	r3, #6
 8005e22:	d010      	beq.n	8005e46 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e34:	e007      	b.n	8005e46 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f042 0201 	orr.w	r2, r2, #1
 8005e44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3710      	adds	r7, #16
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40010000 	.word	0x40010000
 8005e54:	40010400 	.word	0x40010400
 8005e58:	40000400 	.word	0x40000400
 8005e5c:	40000800 	.word	0x40000800
 8005e60:	40000c00 	.word	0x40000c00
 8005e64:	40014000 	.word	0x40014000
 8005e68:	40001800 	.word	0x40001800

08005e6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d020      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d01b      	beq.n	8005ed0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f06f 0202 	mvn.w	r2, #2
 8005ea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 fa5b 	bl	8006372 <HAL_TIM_IC_CaptureCallback>
 8005ebc:	e005      	b.n	8005eca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 fa4d 	bl	800635e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 fa5e 	bl	8006386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d020      	beq.n	8005f1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d01b      	beq.n	8005f1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f06f 0204 	mvn.w	r2, #4
 8005eec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2202      	movs	r2, #2
 8005ef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d003      	beq.n	8005f0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa35 	bl	8006372 <HAL_TIM_IC_CaptureCallback>
 8005f08:	e005      	b.n	8005f16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fa27 	bl	800635e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa38 	bl	8006386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f003 0308 	and.w	r3, r3, #8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d020      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f003 0308 	and.w	r3, r3, #8
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0208 	mvn.w	r2, #8
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f003 0303 	and.w	r3, r3, #3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 fa0f 	bl	8006372 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fa01 	bl	800635e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fa12 	bl	8006386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d020      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0210 	mvn.w	r2, #16
 8005f84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2208      	movs	r2, #8
 8005f8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	69db      	ldr	r3, [r3, #28]
 8005f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 f9e9 	bl	8006372 <HAL_TIM_IC_CaptureCallback>
 8005fa0:	e005      	b.n	8005fae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9db 	bl	800635e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 f9ec 	bl	8006386 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00c      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f003 0301 	and.w	r3, r3, #1
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d007      	beq.n	8005fd8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f06f 0201 	mvn.w	r2, #1
 8005fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fd f898 	bl	8003108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d00c      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d007      	beq.n	8005ffc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fdce 	bl	8006b98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00c      	beq.n	8006020 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600c:	2b00      	cmp	r3, #0
 800600e:	d007      	beq.n	8006020 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f9bd 	bl	800639a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0320 	and.w	r3, r3, #32
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00c      	beq.n	8006044 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0320 	and.w	r3, r3, #32
 8006030:	2b00      	cmp	r3, #0
 8006032:	d007      	beq.n	8006044 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0220 	mvn.w	r2, #32
 800603c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fda0 	bl	8006b84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}

0800604c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006058:	2300      	movs	r3, #0
 800605a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006066:	2302      	movs	r3, #2
 8006068:	e0ae      	b.n	80061c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2b0c      	cmp	r3, #12
 8006076:	f200 809f 	bhi.w	80061b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800607a:	a201      	add	r2, pc, #4	@ (adr r2, 8006080 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800607c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006080:	080060b5 	.word	0x080060b5
 8006084:	080061b9 	.word	0x080061b9
 8006088:	080061b9 	.word	0x080061b9
 800608c:	080061b9 	.word	0x080061b9
 8006090:	080060f5 	.word	0x080060f5
 8006094:	080061b9 	.word	0x080061b9
 8006098:	080061b9 	.word	0x080061b9
 800609c:	080061b9 	.word	0x080061b9
 80060a0:	08006137 	.word	0x08006137
 80060a4:	080061b9 	.word	0x080061b9
 80060a8:	080061b9 	.word	0x080061b9
 80060ac:	080061b9 	.word	0x080061b9
 80060b0:	08006177 	.word	0x08006177
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f000 fa24 	bl	8006508 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	699a      	ldr	r2, [r3, #24]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f042 0208 	orr.w	r2, r2, #8
 80060ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0204 	bic.w	r2, r2, #4
 80060de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	6999      	ldr	r1, [r3, #24]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	691a      	ldr	r2, [r3, #16]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	619a      	str	r2, [r3, #24]
      break;
 80060f2:	e064      	b.n	80061be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68b9      	ldr	r1, [r7, #8]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f000 fa74 	bl	80065e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699a      	ldr	r2, [r3, #24]
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800610e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	699a      	ldr	r2, [r3, #24]
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800611e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6999      	ldr	r1, [r3, #24]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	021a      	lsls	r2, r3, #8
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	430a      	orrs	r2, r1
 8006132:	619a      	str	r2, [r3, #24]
      break;
 8006134:	e043      	b.n	80061be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	4618      	mov	r0, r3
 800613e:	f000 fac9 	bl	80066d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	69da      	ldr	r2, [r3, #28]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0208 	orr.w	r2, r2, #8
 8006150:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f022 0204 	bic.w	r2, r2, #4
 8006160:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69d9      	ldr	r1, [r3, #28]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	691a      	ldr	r2, [r3, #16]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	430a      	orrs	r2, r1
 8006172:	61da      	str	r2, [r3, #28]
      break;
 8006174:	e023      	b.n	80061be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68b9      	ldr	r1, [r7, #8]
 800617c:	4618      	mov	r0, r3
 800617e:	f000 fb1d 	bl	80067bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006190:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69da      	ldr	r2, [r3, #28]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69d9      	ldr	r1, [r3, #28]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	021a      	lsls	r2, r3, #8
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	61da      	str	r2, [r3, #28]
      break;
 80061b6:	e002      	b.n	80061be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	75fb      	strb	r3, [r7, #23]
      break;
 80061bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b084      	sub	sp, #16
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
 80061d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d101      	bne.n	80061ec <HAL_TIM_ConfigClockSource+0x1c>
 80061e8:	2302      	movs	r3, #2
 80061ea:	e0b4      	b.n	8006356 <HAL_TIM_ConfigClockSource+0x186>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800620a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006212:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68ba      	ldr	r2, [r7, #8]
 800621a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006224:	d03e      	beq.n	80062a4 <HAL_TIM_ConfigClockSource+0xd4>
 8006226:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800622a:	f200 8087 	bhi.w	800633c <HAL_TIM_ConfigClockSource+0x16c>
 800622e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006232:	f000 8086 	beq.w	8006342 <HAL_TIM_ConfigClockSource+0x172>
 8006236:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800623a:	d87f      	bhi.n	800633c <HAL_TIM_ConfigClockSource+0x16c>
 800623c:	2b70      	cmp	r3, #112	@ 0x70
 800623e:	d01a      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0xa6>
 8006240:	2b70      	cmp	r3, #112	@ 0x70
 8006242:	d87b      	bhi.n	800633c <HAL_TIM_ConfigClockSource+0x16c>
 8006244:	2b60      	cmp	r3, #96	@ 0x60
 8006246:	d050      	beq.n	80062ea <HAL_TIM_ConfigClockSource+0x11a>
 8006248:	2b60      	cmp	r3, #96	@ 0x60
 800624a:	d877      	bhi.n	800633c <HAL_TIM_ConfigClockSource+0x16c>
 800624c:	2b50      	cmp	r3, #80	@ 0x50
 800624e:	d03c      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0xfa>
 8006250:	2b50      	cmp	r3, #80	@ 0x50
 8006252:	d873      	bhi.n	800633c <HAL_TIM_ConfigClockSource+0x16c>
 8006254:	2b40      	cmp	r3, #64	@ 0x40
 8006256:	d058      	beq.n	800630a <HAL_TIM_ConfigClockSource+0x13a>
 8006258:	2b40      	cmp	r3, #64	@ 0x40
 800625a:	d86f      	bhi.n	800633c <HAL_TIM_ConfigClockSource+0x16c>
 800625c:	2b30      	cmp	r3, #48	@ 0x30
 800625e:	d064      	beq.n	800632a <HAL_TIM_ConfigClockSource+0x15a>
 8006260:	2b30      	cmp	r3, #48	@ 0x30
 8006262:	d86b      	bhi.n	800633c <HAL_TIM_ConfigClockSource+0x16c>
 8006264:	2b20      	cmp	r3, #32
 8006266:	d060      	beq.n	800632a <HAL_TIM_ConfigClockSource+0x15a>
 8006268:	2b20      	cmp	r3, #32
 800626a:	d867      	bhi.n	800633c <HAL_TIM_ConfigClockSource+0x16c>
 800626c:	2b00      	cmp	r3, #0
 800626e:	d05c      	beq.n	800632a <HAL_TIM_ConfigClockSource+0x15a>
 8006270:	2b10      	cmp	r3, #16
 8006272:	d05a      	beq.n	800632a <HAL_TIM_ConfigClockSource+0x15a>
 8006274:	e062      	b.n	800633c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006286:	f000 fb69 	bl	800695c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006298:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	609a      	str	r2, [r3, #8]
      break;
 80062a2:	e04f      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062b4:	f000 fb52 	bl	800695c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689a      	ldr	r2, [r3, #8]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80062c6:	609a      	str	r2, [r3, #8]
      break;
 80062c8:	e03c      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d6:	461a      	mov	r2, r3
 80062d8:	f000 fac6 	bl	8006868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	2150      	movs	r1, #80	@ 0x50
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fb1f 	bl	8006926 <TIM_ITRx_SetConfig>
      break;
 80062e8:	e02c      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062f6:	461a      	mov	r2, r3
 80062f8:	f000 fae5 	bl	80068c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2160      	movs	r1, #96	@ 0x60
 8006302:	4618      	mov	r0, r3
 8006304:	f000 fb0f 	bl	8006926 <TIM_ITRx_SetConfig>
      break;
 8006308:	e01c      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006316:	461a      	mov	r2, r3
 8006318:	f000 faa6 	bl	8006868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	2140      	movs	r1, #64	@ 0x40
 8006322:	4618      	mov	r0, r3
 8006324:	f000 faff 	bl	8006926 <TIM_ITRx_SetConfig>
      break;
 8006328:	e00c      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4619      	mov	r1, r3
 8006334:	4610      	mov	r0, r2
 8006336:	f000 faf6 	bl	8006926 <TIM_ITRx_SetConfig>
      break;
 800633a:	e003      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]
      break;
 8006340:	e000      	b.n	8006344 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006342:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006354:	7bfb      	ldrb	r3, [r7, #15]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800635e:	b480      	push	{r7}
 8006360:	b083      	sub	sp, #12
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006366:	bf00      	nop
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006372:	b480      	push	{r7}
 8006374:	b083      	sub	sp, #12
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800638e:	bf00      	nop
 8006390:	370c      	adds	r7, #12
 8006392:	46bd      	mov	sp, r7
 8006394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006398:	4770      	bx	lr

0800639a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800639a:	b480      	push	{r7}
 800639c:	b083      	sub	sp, #12
 800639e:	af00      	add	r7, sp, #0
 80063a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
	...

080063b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a46      	ldr	r2, [pc, #280]	@ (80064dc <TIM_Base_SetConfig+0x12c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d013      	beq.n	80063f0 <TIM_Base_SetConfig+0x40>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063ce:	d00f      	beq.n	80063f0 <TIM_Base_SetConfig+0x40>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4a43      	ldr	r2, [pc, #268]	@ (80064e0 <TIM_Base_SetConfig+0x130>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d00b      	beq.n	80063f0 <TIM_Base_SetConfig+0x40>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	4a42      	ldr	r2, [pc, #264]	@ (80064e4 <TIM_Base_SetConfig+0x134>)
 80063dc:	4293      	cmp	r3, r2
 80063de:	d007      	beq.n	80063f0 <TIM_Base_SetConfig+0x40>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	4a41      	ldr	r2, [pc, #260]	@ (80064e8 <TIM_Base_SetConfig+0x138>)
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d003      	beq.n	80063f0 <TIM_Base_SetConfig+0x40>
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a40      	ldr	r2, [pc, #256]	@ (80064ec <TIM_Base_SetConfig+0x13c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d108      	bne.n	8006402 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	68fa      	ldr	r2, [r7, #12]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	4a35      	ldr	r2, [pc, #212]	@ (80064dc <TIM_Base_SetConfig+0x12c>)
 8006406:	4293      	cmp	r3, r2
 8006408:	d02b      	beq.n	8006462 <TIM_Base_SetConfig+0xb2>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006410:	d027      	beq.n	8006462 <TIM_Base_SetConfig+0xb2>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	4a32      	ldr	r2, [pc, #200]	@ (80064e0 <TIM_Base_SetConfig+0x130>)
 8006416:	4293      	cmp	r3, r2
 8006418:	d023      	beq.n	8006462 <TIM_Base_SetConfig+0xb2>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4a31      	ldr	r2, [pc, #196]	@ (80064e4 <TIM_Base_SetConfig+0x134>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d01f      	beq.n	8006462 <TIM_Base_SetConfig+0xb2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4a30      	ldr	r2, [pc, #192]	@ (80064e8 <TIM_Base_SetConfig+0x138>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d01b      	beq.n	8006462 <TIM_Base_SetConfig+0xb2>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a2f      	ldr	r2, [pc, #188]	@ (80064ec <TIM_Base_SetConfig+0x13c>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d017      	beq.n	8006462 <TIM_Base_SetConfig+0xb2>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a2e      	ldr	r2, [pc, #184]	@ (80064f0 <TIM_Base_SetConfig+0x140>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d013      	beq.n	8006462 <TIM_Base_SetConfig+0xb2>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	4a2d      	ldr	r2, [pc, #180]	@ (80064f4 <TIM_Base_SetConfig+0x144>)
 800643e:	4293      	cmp	r3, r2
 8006440:	d00f      	beq.n	8006462 <TIM_Base_SetConfig+0xb2>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a2c      	ldr	r2, [pc, #176]	@ (80064f8 <TIM_Base_SetConfig+0x148>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d00b      	beq.n	8006462 <TIM_Base_SetConfig+0xb2>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a2b      	ldr	r2, [pc, #172]	@ (80064fc <TIM_Base_SetConfig+0x14c>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d007      	beq.n	8006462 <TIM_Base_SetConfig+0xb2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	4a2a      	ldr	r2, [pc, #168]	@ (8006500 <TIM_Base_SetConfig+0x150>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d003      	beq.n	8006462 <TIM_Base_SetConfig+0xb2>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	4a29      	ldr	r2, [pc, #164]	@ (8006504 <TIM_Base_SetConfig+0x154>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d108      	bne.n	8006474 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006468:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	4313      	orrs	r3, r2
 8006472:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	4313      	orrs	r3, r2
 8006480:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a10      	ldr	r2, [pc, #64]	@ (80064dc <TIM_Base_SetConfig+0x12c>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d003      	beq.n	80064a8 <TIM_Base_SetConfig+0xf8>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a12      	ldr	r2, [pc, #72]	@ (80064ec <TIM_Base_SetConfig+0x13c>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d103      	bne.n	80064b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	691a      	ldr	r2, [r3, #16]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	691b      	ldr	r3, [r3, #16]
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d105      	bne.n	80064ce <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f023 0201 	bic.w	r2, r3, #1
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	611a      	str	r2, [r3, #16]
  }
}
 80064ce:	bf00      	nop
 80064d0:	3714      	adds	r7, #20
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	40010000 	.word	0x40010000
 80064e0:	40000400 	.word	0x40000400
 80064e4:	40000800 	.word	0x40000800
 80064e8:	40000c00 	.word	0x40000c00
 80064ec:	40010400 	.word	0x40010400
 80064f0:	40014000 	.word	0x40014000
 80064f4:	40014400 	.word	0x40014400
 80064f8:	40014800 	.word	0x40014800
 80064fc:	40001800 	.word	0x40001800
 8006500:	40001c00 	.word	0x40001c00
 8006504:	40002000 	.word	0x40002000

08006508 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f023 0201 	bic.w	r2, r3, #1
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f023 0303 	bic.w	r3, r3, #3
 800653e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68fa      	ldr	r2, [r7, #12]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f023 0302 	bic.w	r3, r3, #2
 8006550:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	697a      	ldr	r2, [r7, #20]
 8006558:	4313      	orrs	r3, r2
 800655a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a20      	ldr	r2, [pc, #128]	@ (80065e0 <TIM_OC1_SetConfig+0xd8>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d003      	beq.n	800656c <TIM_OC1_SetConfig+0x64>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	4a1f      	ldr	r2, [pc, #124]	@ (80065e4 <TIM_OC1_SetConfig+0xdc>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d10c      	bne.n	8006586 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f023 0308 	bic.w	r3, r3, #8
 8006572:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	697a      	ldr	r2, [r7, #20]
 800657a:	4313      	orrs	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f023 0304 	bic.w	r3, r3, #4
 8006584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	4a15      	ldr	r2, [pc, #84]	@ (80065e0 <TIM_OC1_SetConfig+0xd8>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d003      	beq.n	8006596 <TIM_OC1_SetConfig+0x8e>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a14      	ldr	r2, [pc, #80]	@ (80065e4 <TIM_OC1_SetConfig+0xdc>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d111      	bne.n	80065ba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800659c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80065a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	685a      	ldr	r2, [r3, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	621a      	str	r2, [r3, #32]
}
 80065d4:	bf00      	nop
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	40010000 	.word	0x40010000
 80065e4:	40010400 	.word	0x40010400

080065e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6a1b      	ldr	r3, [r3, #32]
 80065f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	f023 0210 	bic.w	r2, r3, #16
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800661e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	021b      	lsls	r3, r3, #8
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	4313      	orrs	r3, r2
 800662a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f023 0320 	bic.w	r3, r3, #32
 8006632:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	011b      	lsls	r3, r3, #4
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a22      	ldr	r2, [pc, #136]	@ (80066cc <TIM_OC2_SetConfig+0xe4>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d003      	beq.n	8006650 <TIM_OC2_SetConfig+0x68>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a21      	ldr	r2, [pc, #132]	@ (80066d0 <TIM_OC2_SetConfig+0xe8>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d10d      	bne.n	800666c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	011b      	lsls	r3, r3, #4
 800665e:	697a      	ldr	r2, [r7, #20]
 8006660:	4313      	orrs	r3, r2
 8006662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800666a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	4a17      	ldr	r2, [pc, #92]	@ (80066cc <TIM_OC2_SetConfig+0xe4>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d003      	beq.n	800667c <TIM_OC2_SetConfig+0x94>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a16      	ldr	r2, [pc, #88]	@ (80066d0 <TIM_OC2_SetConfig+0xe8>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d113      	bne.n	80066a4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800668a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	695b      	ldr	r3, [r3, #20]
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4313      	orrs	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	699b      	ldr	r3, [r3, #24]
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	68fa      	ldr	r2, [r7, #12]
 80066ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	621a      	str	r2, [r3, #32]
}
 80066be:	bf00      	nop
 80066c0:	371c      	adds	r7, #28
 80066c2:	46bd      	mov	sp, r7
 80066c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	40010000 	.word	0x40010000
 80066d0:	40010400 	.word	0x40010400

080066d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b087      	sub	sp, #28
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6a1b      	ldr	r3, [r3, #32]
 80066e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f023 0303 	bic.w	r3, r3, #3
 800670a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68fa      	ldr	r2, [r7, #12]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800671c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a21      	ldr	r2, [pc, #132]	@ (80067b4 <TIM_OC3_SetConfig+0xe0>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d003      	beq.n	800673a <TIM_OC3_SetConfig+0x66>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a20      	ldr	r2, [pc, #128]	@ (80067b8 <TIM_OC3_SetConfig+0xe4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d10d      	bne.n	8006756 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006740:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	021b      	lsls	r3, r3, #8
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	4313      	orrs	r3, r2
 800674c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	4a16      	ldr	r2, [pc, #88]	@ (80067b4 <TIM_OC3_SetConfig+0xe0>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d003      	beq.n	8006766 <TIM_OC3_SetConfig+0x92>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	4a15      	ldr	r2, [pc, #84]	@ (80067b8 <TIM_OC3_SetConfig+0xe4>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d113      	bne.n	800678e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006766:	693b      	ldr	r3, [r7, #16]
 8006768:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800676c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	695b      	ldr	r3, [r3, #20]
 800677a:	011b      	lsls	r3, r3, #4
 800677c:	693a      	ldr	r2, [r7, #16]
 800677e:	4313      	orrs	r3, r2
 8006780:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	011b      	lsls	r3, r3, #4
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	697a      	ldr	r2, [r7, #20]
 80067a6:	621a      	str	r2, [r3, #32]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	40010000 	.word	0x40010000
 80067b8:	40010400 	.word	0x40010400

080067bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067bc:	b480      	push	{r7}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a1b      	ldr	r3, [r3, #32]
 80067d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	021b      	lsls	r3, r3, #8
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006806:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	031b      	lsls	r3, r3, #12
 800680e:	693a      	ldr	r2, [r7, #16]
 8006810:	4313      	orrs	r3, r2
 8006812:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a12      	ldr	r2, [pc, #72]	@ (8006860 <TIM_OC4_SetConfig+0xa4>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d003      	beq.n	8006824 <TIM_OC4_SetConfig+0x68>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a11      	ldr	r2, [pc, #68]	@ (8006864 <TIM_OC4_SetConfig+0xa8>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d109      	bne.n	8006838 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800682a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800682c:	683b      	ldr	r3, [r7, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	019b      	lsls	r3, r3, #6
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4313      	orrs	r3, r2
 8006836:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	621a      	str	r2, [r3, #32]
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
 800685e:	bf00      	nop
 8006860:	40010000 	.word	0x40010000
 8006864:	40010400 	.word	0x40010400

08006868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	f023 0201 	bic.w	r2, r3, #1
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 030a 	bic.w	r3, r3, #10
 80068a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	621a      	str	r2, [r3, #32]
}
 80068ba:	bf00      	nop
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b087      	sub	sp, #28
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	f023 0210 	bic.w	r2, r3, #16
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80068f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	031b      	lsls	r3, r3, #12
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006902:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	693a      	ldr	r2, [r7, #16]
 8006912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006926:	b480      	push	{r7}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800693c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	f043 0307 	orr.w	r3, r3, #7
 8006948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	609a      	str	r2, [r3, #8]
}
 8006950:	bf00      	nop
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	021a      	lsls	r2, r3, #8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	431a      	orrs	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4313      	orrs	r3, r2
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	609a      	str	r2, [r3, #8]
}
 8006990:	bf00      	nop
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800699c:	b480      	push	{r7}
 800699e:	b087      	sub	sp, #28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 031f 	and.w	r3, r3, #31
 80069ae:	2201      	movs	r2, #1
 80069b0:	fa02 f303 	lsl.w	r3, r2, r3
 80069b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6a1a      	ldr	r2, [r3, #32]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	43db      	mvns	r3, r3
 80069be:	401a      	ands	r2, r3
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a1a      	ldr	r2, [r3, #32]
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f003 031f 	and.w	r3, r3, #31
 80069ce:	6879      	ldr	r1, [r7, #4]
 80069d0:	fa01 f303 	lsl.w	r3, r1, r3
 80069d4:	431a      	orrs	r2, r3
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	621a      	str	r2, [r3, #32]
}
 80069da:	bf00      	nop
 80069dc:	371c      	adds	r7, #28
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
	...

080069e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b085      	sub	sp, #20
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069fc:	2302      	movs	r3, #2
 80069fe:	e05a      	b.n	8006ab6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2202      	movs	r2, #2
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a21      	ldr	r2, [pc, #132]	@ (8006ac4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d022      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a4c:	d01d      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	4a1d      	ldr	r2, [pc, #116]	@ (8006ac8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d018      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a1b      	ldr	r2, [pc, #108]	@ (8006acc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d013      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a1a      	ldr	r2, [pc, #104]	@ (8006ad0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00e      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a18      	ldr	r2, [pc, #96]	@ (8006ad4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d009      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a17      	ldr	r2, [pc, #92]	@ (8006ad8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d004      	beq.n	8006a8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a15      	ldr	r2, [pc, #84]	@ (8006adc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d10c      	bne.n	8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	685b      	ldr	r3, [r3, #4]
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68ba      	ldr	r2, [r7, #8]
 8006aa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3714      	adds	r7, #20
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40010000 	.word	0x40010000
 8006ac8:	40000400 	.word	0x40000400
 8006acc:	40000800 	.word	0x40000800
 8006ad0:	40000c00 	.word	0x40000c00
 8006ad4:	40010400 	.word	0x40010400
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	40001800 	.word	0x40001800

08006ae0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b085      	sub	sp, #20
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006aea:	2300      	movs	r3, #0
 8006aec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d101      	bne.n	8006afc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006af8:	2302      	movs	r3, #2
 8006afa:	e03d      	b.n	8006b78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	695b      	ldr	r3, [r3, #20]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	69db      	ldr	r3, [r3, #28]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68fa      	ldr	r2, [r7, #12]
 8006b6c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b76:	2300      	movs	r3, #0
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3714      	adds	r7, #20
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ba0:	bf00      	nop
 8006ba2:	370c      	adds	r7, #12
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b082      	sub	sp, #8
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	e042      	b.n	8006c44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d106      	bne.n	8006bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7fc fbf0 	bl	80033b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2224      	movs	r2, #36	@ 0x24
 8006bdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fdbd 	bl	8007770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695a      	ldr	r2, [r3, #20]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68da      	ldr	r2, [r3, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2220      	movs	r2, #32
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	@ 0x28
 8006c50:	af02      	add	r7, sp, #8
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c66:	b2db      	uxtb	r3, r3
 8006c68:	2b20      	cmp	r3, #32
 8006c6a:	d175      	bne.n	8006d58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d002      	beq.n	8006c78 <HAL_UART_Transmit+0x2c>
 8006c72:	88fb      	ldrh	r3, [r7, #6]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d101      	bne.n	8006c7c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e06e      	b.n	8006d5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2221      	movs	r2, #33	@ 0x21
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c8a:	f7fc fd39 	bl	8003700 <HAL_GetTick>
 8006c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	88fa      	ldrh	r2, [r7, #6]
 8006c94:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	88fa      	ldrh	r2, [r7, #6]
 8006c9a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ca4:	d108      	bne.n	8006cb8 <HAL_UART_Transmit+0x6c>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d104      	bne.n	8006cb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	61bb      	str	r3, [r7, #24]
 8006cb6:	e003      	b.n	8006cc0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cc0:	e02e      	b.n	8006d20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	9300      	str	r3, [sp, #0]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	2180      	movs	r1, #128	@ 0x80
 8006ccc:	68f8      	ldr	r0, [r7, #12]
 8006cce:	f000 fb1f 	bl	8007310 <UART_WaitOnFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d005      	beq.n	8006ce4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	2220      	movs	r2, #32
 8006cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e03a      	b.n	8006d5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d10b      	bne.n	8006d02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006cea:	69bb      	ldr	r3, [r7, #24]
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cf8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cfa:	69bb      	ldr	r3, [r7, #24]
 8006cfc:	3302      	adds	r3, #2
 8006cfe:	61bb      	str	r3, [r7, #24]
 8006d00:	e007      	b.n	8006d12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d02:	69fb      	ldr	r3, [r7, #28]
 8006d04:	781a      	ldrb	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d16:	b29b      	uxth	r3, r3
 8006d18:	3b01      	subs	r3, #1
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d1cb      	bne.n	8006cc2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	2200      	movs	r2, #0
 8006d32:	2140      	movs	r1, #64	@ 0x40
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f000 faeb 	bl	8007310 <UART_WaitOnFlagUntilTimeout>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d005      	beq.n	8006d4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2220      	movs	r2, #32
 8006d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e006      	b.n	8006d5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2220      	movs	r2, #32
 8006d50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006d54:	2300      	movs	r3, #0
 8006d56:	e000      	b.n	8006d5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006d58:	2302      	movs	r3, #2
  }
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3720      	adds	r7, #32
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	60f8      	str	r0, [r7, #12]
 8006d6a:	60b9      	str	r1, [r7, #8]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b20      	cmp	r3, #32
 8006d7a:	d112      	bne.n	8006da2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <HAL_UART_Receive_IT+0x26>
 8006d82:	88fb      	ldrh	r3, [r7, #6]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e00b      	b.n	8006da4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	461a      	mov	r2, r3
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	68f8      	ldr	r0, [r7, #12]
 8006d9a:	f000 fb12 	bl	80073c2 <UART_Start_Receive_IT>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	e000      	b.n	8006da4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006da2:	2302      	movs	r3, #2
  }
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}

08006dac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b0ba      	sub	sp, #232	@ 0xe8
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006de2:	f003 030f 	and.w	r3, r3, #15
 8006de6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006dea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10f      	bne.n	8006e12 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <HAL_UART_IRQHandler+0x66>
 8006dfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e02:	f003 0320 	and.w	r3, r3, #32
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d003      	beq.n	8006e12 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fbf2 	bl	80075f4 <UART_Receive_IT>
      return;
 8006e10:	e25b      	b.n	80072ca <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006e12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80de 	beq.w	8006fd8 <HAL_UART_IRQHandler+0x22c>
 8006e1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e20:	f003 0301 	and.w	r3, r3, #1
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d106      	bne.n	8006e36 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e2c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 80d1 	beq.w	8006fd8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e3a:	f003 0301 	and.w	r3, r3, #1
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00b      	beq.n	8006e5a <HAL_UART_IRQHandler+0xae>
 8006e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e52:	f043 0201 	orr.w	r2, r3, #1
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5e:	f003 0304 	and.w	r3, r3, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00b      	beq.n	8006e7e <HAL_UART_IRQHandler+0xd2>
 8006e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e76:	f043 0202 	orr.w	r2, r3, #2
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d00b      	beq.n	8006ea2 <HAL_UART_IRQHandler+0xf6>
 8006e8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d005      	beq.n	8006ea2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e9a:	f043 0204 	orr.w	r2, r3, #4
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006ea2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d011      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x126>
 8006eae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eb2:	f003 0320 	and.w	r3, r3, #32
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d105      	bne.n	8006ec6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ebe:	f003 0301 	and.w	r3, r3, #1
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d005      	beq.n	8006ed2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eca:	f043 0208 	orr.w	r2, r3, #8
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	f000 81f2 	beq.w	80072c0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006edc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee0:	f003 0320 	and.w	r3, r3, #32
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d008      	beq.n	8006efa <HAL_UART_IRQHandler+0x14e>
 8006ee8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006eec:	f003 0320 	and.w	r3, r3, #32
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006ef4:	6878      	ldr	r0, [r7, #4]
 8006ef6:	f000 fb7d 	bl	80075f4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	695b      	ldr	r3, [r3, #20]
 8006f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f04:	2b40      	cmp	r3, #64	@ 0x40
 8006f06:	bf0c      	ite	eq
 8006f08:	2301      	moveq	r3, #1
 8006f0a:	2300      	movne	r3, #0
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f16:	f003 0308 	and.w	r3, r3, #8
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d103      	bne.n	8006f26 <HAL_UART_IRQHandler+0x17a>
 8006f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d04f      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fa85 	bl	8007436 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f36:	2b40      	cmp	r3, #64	@ 0x40
 8006f38:	d141      	bne.n	8006fbe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	3314      	adds	r3, #20
 8006f40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006f48:	e853 3f00 	ldrex	r3, [r3]
 8006f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006f50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006f54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	3314      	adds	r3, #20
 8006f62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006f66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006f72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006f76:	e841 2300 	strex	r3, r2, [r1]
 8006f7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006f7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1d9      	bne.n	8006f3a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d013      	beq.n	8006fb6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f92:	4a7e      	ldr	r2, [pc, #504]	@ (800718c <HAL_UART_IRQHandler+0x3e0>)
 8006f94:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	f7fc fd0e 	bl	80039bc <HAL_DMA_Abort_IT>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d016      	beq.n	8006fd4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006fb0:	4610      	mov	r0, r2
 8006fb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fb4:	e00e      	b.n	8006fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 f994 	bl	80072e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fbc:	e00a      	b.n	8006fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 f990 	bl	80072e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fc4:	e006      	b.n	8006fd4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f98c 	bl	80072e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006fd2:	e175      	b.n	80072c0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fd4:	bf00      	nop
    return;
 8006fd6:	e173      	b.n	80072c0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	f040 814f 	bne.w	8007280 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fe6:	f003 0310 	and.w	r3, r3, #16
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8148 	beq.w	8007280 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ff4:	f003 0310 	and.w	r3, r3, #16
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	f000 8141 	beq.w	8007280 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006ffe:	2300      	movs	r3, #0
 8007000:	60bb      	str	r3, [r7, #8]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	60bb      	str	r3, [r7, #8]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	60bb      	str	r3, [r7, #8]
 8007012:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800701e:	2b40      	cmp	r3, #64	@ 0x40
 8007020:	f040 80b6 	bne.w	8007190 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007030:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007034:	2b00      	cmp	r3, #0
 8007036:	f000 8145 	beq.w	80072c4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800703e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007042:	429a      	cmp	r2, r3
 8007044:	f080 813e 	bcs.w	80072c4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800704e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007054:	69db      	ldr	r3, [r3, #28]
 8007056:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800705a:	f000 8088 	beq.w	800716e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	330c      	adds	r3, #12
 8007064:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007068:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800706c:	e853 3f00 	ldrex	r3, [r3]
 8007070:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007074:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007078:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800707c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	330c      	adds	r3, #12
 8007086:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800708a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800708e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007092:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007096:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800709a:	e841 2300 	strex	r3, r2, [r1]
 800709e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80070a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1d9      	bne.n	800705e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	3314      	adds	r3, #20
 80070b0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80070b4:	e853 3f00 	ldrex	r3, [r3]
 80070b8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80070ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80070bc:	f023 0301 	bic.w	r3, r3, #1
 80070c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	3314      	adds	r3, #20
 80070ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80070ce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80070d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80070d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80070e0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e1      	bne.n	80070aa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3314      	adds	r3, #20
 80070ec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80070f6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80070f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3314      	adds	r3, #20
 8007106:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800710a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800710c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007110:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007118:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800711a:	2b00      	cmp	r3, #0
 800711c:	d1e3      	bne.n	80070e6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2220      	movs	r2, #32
 8007122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	330c      	adds	r3, #12
 8007132:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800713c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800713e:	f023 0310 	bic.w	r3, r3, #16
 8007142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	330c      	adds	r3, #12
 800714c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007150:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007152:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007154:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007156:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007158:	e841 2300 	strex	r3, r2, [r1]
 800715c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800715e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1e3      	bne.n	800712c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007168:	4618      	mov	r0, r3
 800716a:	f7fc fbb7 	bl	80038dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2202      	movs	r2, #2
 8007172:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800717c:	b29b      	uxth	r3, r3
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	b29b      	uxth	r3, r3
 8007182:	4619      	mov	r1, r3
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f000 f8b7 	bl	80072f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800718a:	e09b      	b.n	80072c4 <HAL_UART_IRQHandler+0x518>
 800718c:	080074fd 	.word	0x080074fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007198:	b29b      	uxth	r3, r3
 800719a:	1ad3      	subs	r3, r2, r3
 800719c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	f000 808e 	beq.w	80072c8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80071ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	f000 8089 	beq.w	80072c8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	330c      	adds	r3, #12
 80071bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071c0:	e853 3f00 	ldrex	r3, [r3]
 80071c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80071cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	330c      	adds	r3, #12
 80071d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80071da:	647a      	str	r2, [r7, #68]	@ 0x44
 80071dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071e2:	e841 2300 	strex	r3, r2, [r1]
 80071e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d1e3      	bne.n	80071b6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	3314      	adds	r3, #20
 80071f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f8:	e853 3f00 	ldrex	r3, [r3]
 80071fc:	623b      	str	r3, [r7, #32]
   return(result);
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	f023 0301 	bic.w	r3, r3, #1
 8007204:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3314      	adds	r3, #20
 800720e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007212:	633a      	str	r2, [r7, #48]	@ 0x30
 8007214:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007216:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800721a:	e841 2300 	strex	r3, r2, [r1]
 800721e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007222:	2b00      	cmp	r3, #0
 8007224:	d1e3      	bne.n	80071ee <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2220      	movs	r2, #32
 800722a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2200      	movs	r2, #0
 8007232:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	330c      	adds	r3, #12
 800723a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	60fb      	str	r3, [r7, #12]
   return(result);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	f023 0310 	bic.w	r3, r3, #16
 800724a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	330c      	adds	r3, #12
 8007254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007258:	61fa      	str	r2, [r7, #28]
 800725a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725c:	69b9      	ldr	r1, [r7, #24]
 800725e:	69fa      	ldr	r2, [r7, #28]
 8007260:	e841 2300 	strex	r3, r2, [r1]
 8007264:	617b      	str	r3, [r7, #20]
   return(result);
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d1e3      	bne.n	8007234 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2202      	movs	r2, #2
 8007270:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007272:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007276:	4619      	mov	r1, r3
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f000 f83d 	bl	80072f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800727e:	e023      	b.n	80072c8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007288:	2b00      	cmp	r3, #0
 800728a:	d009      	beq.n	80072a0 <HAL_UART_IRQHandler+0x4f4>
 800728c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007294:	2b00      	cmp	r3, #0
 8007296:	d003      	beq.n	80072a0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f943 	bl	8007524 <UART_Transmit_IT>
    return;
 800729e:	e014      	b.n	80072ca <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80072a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d00e      	beq.n	80072ca <HAL_UART_IRQHandler+0x51e>
 80072ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d008      	beq.n	80072ca <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f983 	bl	80075c4 <UART_EndTransmit_IT>
    return;
 80072be:	e004      	b.n	80072ca <HAL_UART_IRQHandler+0x51e>
    return;
 80072c0:	bf00      	nop
 80072c2:	e002      	b.n	80072ca <HAL_UART_IRQHandler+0x51e>
      return;
 80072c4:	bf00      	nop
 80072c6:	e000      	b.n	80072ca <HAL_UART_IRQHandler+0x51e>
      return;
 80072c8:	bf00      	nop
  }
}
 80072ca:	37e8      	adds	r7, #232	@ 0xe8
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}

080072d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	460b      	mov	r3, r1
 8007302:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	603b      	str	r3, [r7, #0]
 800731c:	4613      	mov	r3, r2
 800731e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007320:	e03b      	b.n	800739a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007322:	6a3b      	ldr	r3, [r7, #32]
 8007324:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007328:	d037      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800732a:	f7fc f9e9 	bl	8003700 <HAL_GetTick>
 800732e:	4602      	mov	r2, r0
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	1ad3      	subs	r3, r2, r3
 8007334:	6a3a      	ldr	r2, [r7, #32]
 8007336:	429a      	cmp	r2, r3
 8007338:	d302      	bcc.n	8007340 <UART_WaitOnFlagUntilTimeout+0x30>
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d101      	bne.n	8007344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007340:	2303      	movs	r3, #3
 8007342:	e03a      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f003 0304 	and.w	r3, r3, #4
 800734e:	2b00      	cmp	r3, #0
 8007350:	d023      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	2b80      	cmp	r3, #128	@ 0x80
 8007356:	d020      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0x8a>
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2b40      	cmp	r3, #64	@ 0x40
 800735c:	d01d      	beq.n	800739a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0308 	and.w	r3, r3, #8
 8007368:	2b08      	cmp	r3, #8
 800736a:	d116      	bne.n	800739a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800736c:	2300      	movs	r3, #0
 800736e:	617b      	str	r3, [r7, #20]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	617b      	str	r3, [r7, #20]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 f857 	bl	8007436 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2208      	movs	r2, #8
 800738c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	2200      	movs	r2, #0
 8007392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e00f      	b.n	80073ba <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	4013      	ands	r3, r2
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	bf0c      	ite	eq
 80073aa:	2301      	moveq	r3, #1
 80073ac:	2300      	movne	r3, #0
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	461a      	mov	r2, r3
 80073b2:	79fb      	ldrb	r3, [r7, #7]
 80073b4:	429a      	cmp	r2, r3
 80073b6:	d0b4      	beq.n	8007322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073b8:	2300      	movs	r3, #0
}
 80073ba:	4618      	mov	r0, r3
 80073bc:	3718      	adds	r7, #24
 80073be:	46bd      	mov	sp, r7
 80073c0:	bd80      	pop	{r7, pc}

080073c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073c2:	b480      	push	{r7}
 80073c4:	b085      	sub	sp, #20
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	60f8      	str	r0, [r7, #12]
 80073ca:	60b9      	str	r1, [r7, #8]
 80073cc:	4613      	mov	r3, r2
 80073ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	88fa      	ldrh	r2, [r7, #6]
 80073da:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	88fa      	ldrh	r2, [r7, #6]
 80073e0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2222      	movs	r2, #34	@ 0x22
 80073ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d007      	beq.n	8007408 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007406:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	695a      	ldr	r2, [r3, #20]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f042 0201 	orr.w	r2, r2, #1
 8007416:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68da      	ldr	r2, [r3, #12]
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f042 0220 	orr.w	r2, r2, #32
 8007426:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3714      	adds	r7, #20
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007436:	b480      	push	{r7}
 8007438:	b095      	sub	sp, #84	@ 0x54
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	330c      	adds	r3, #12
 8007444:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007448:	e853 3f00 	ldrex	r3, [r3]
 800744c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800744e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007450:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007454:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	330c      	adds	r3, #12
 800745c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800745e:	643a      	str	r2, [r7, #64]	@ 0x40
 8007460:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007462:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007464:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007466:	e841 2300 	strex	r3, r2, [r1]
 800746a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800746c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800746e:	2b00      	cmp	r3, #0
 8007470:	d1e5      	bne.n	800743e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	3314      	adds	r3, #20
 8007478:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	e853 3f00 	ldrex	r3, [r3]
 8007480:	61fb      	str	r3, [r7, #28]
   return(result);
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f023 0301 	bic.w	r3, r3, #1
 8007488:	64bb      	str	r3, [r7, #72]	@ 0x48
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3314      	adds	r3, #20
 8007490:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007492:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007494:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007496:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007498:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800749a:	e841 2300 	strex	r3, r2, [r1]
 800749e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80074a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1e5      	bne.n	8007472 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d119      	bne.n	80074e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	330c      	adds	r3, #12
 80074b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	e853 3f00 	ldrex	r3, [r3]
 80074bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	f023 0310 	bic.w	r3, r3, #16
 80074c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	330c      	adds	r3, #12
 80074cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074ce:	61ba      	str	r2, [r7, #24]
 80074d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d2:	6979      	ldr	r1, [r7, #20]
 80074d4:	69ba      	ldr	r2, [r7, #24]
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	613b      	str	r3, [r7, #16]
   return(result);
 80074dc:	693b      	ldr	r3, [r7, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1e5      	bne.n	80074ae <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80074f0:	bf00      	nop
 80074f2:	3754      	adds	r7, #84	@ 0x54
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b084      	sub	sp, #16
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007508:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2200      	movs	r2, #0
 800750e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2200      	movs	r2, #0
 8007514:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007516:	68f8      	ldr	r0, [r7, #12]
 8007518:	f7ff fee4 	bl	80072e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800751c:	bf00      	nop
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b21      	cmp	r3, #33	@ 0x21
 8007536:	d13e      	bne.n	80075b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007540:	d114      	bne.n	800756c <UART_Transmit_IT+0x48>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d110      	bne.n	800756c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	881b      	ldrh	r3, [r3, #0]
 8007554:	461a      	mov	r2, r3
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800755e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	1c9a      	adds	r2, r3, #2
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	621a      	str	r2, [r3, #32]
 800756a:	e008      	b.n	800757e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6a1b      	ldr	r3, [r3, #32]
 8007570:	1c59      	adds	r1, r3, #1
 8007572:	687a      	ldr	r2, [r7, #4]
 8007574:	6211      	str	r1, [r2, #32]
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007582:	b29b      	uxth	r3, r3
 8007584:	3b01      	subs	r3, #1
 8007586:	b29b      	uxth	r3, r3
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	4619      	mov	r1, r3
 800758c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10f      	bne.n	80075b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80075a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80075b2:	2300      	movs	r3, #0
 80075b4:	e000      	b.n	80075b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80075b6:	2302      	movs	r3, #2
  }
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3714      	adds	r7, #20
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68da      	ldr	r2, [r3, #12]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075da:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2220      	movs	r2, #32
 80075e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7ff fe73 	bl	80072d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08c      	sub	sp, #48	@ 0x30
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007602:	b2db      	uxtb	r3, r3
 8007604:	2b22      	cmp	r3, #34	@ 0x22
 8007606:	f040 80ae 	bne.w	8007766 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007612:	d117      	bne.n	8007644 <UART_Receive_IT+0x50>
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d113      	bne.n	8007644 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800761c:	2300      	movs	r3, #0
 800761e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007624:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685b      	ldr	r3, [r3, #4]
 800762c:	b29b      	uxth	r3, r3
 800762e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007632:	b29a      	uxth	r2, r3
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800763c:	1c9a      	adds	r2, r3, #2
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	629a      	str	r2, [r3, #40]	@ 0x28
 8007642:	e026      	b.n	8007692 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007648:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800764a:	2300      	movs	r3, #0
 800764c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007656:	d007      	beq.n	8007668 <UART_Receive_IT+0x74>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <UART_Receive_IT+0x82>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	691b      	ldr	r3, [r3, #16]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	b2da      	uxtb	r2, r3
 8007670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	e008      	b.n	8007688 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	b2db      	uxtb	r3, r3
 800767e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007682:	b2da      	uxtb	r2, r3
 8007684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007686:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768c:	1c5a      	adds	r2, r3, #1
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007696:	b29b      	uxth	r3, r3
 8007698:	3b01      	subs	r3, #1
 800769a:	b29b      	uxth	r3, r3
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	4619      	mov	r1, r3
 80076a0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d15d      	bne.n	8007762 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	68da      	ldr	r2, [r3, #12]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0220 	bic.w	r2, r2, #32
 80076b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68da      	ldr	r2, [r3, #12]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80076c4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695a      	ldr	r2, [r3, #20]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f022 0201 	bic.w	r2, r2, #1
 80076d4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2220      	movs	r2, #32
 80076da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d135      	bne.n	8007758 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	330c      	adds	r3, #12
 80076f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	e853 3f00 	ldrex	r3, [r3]
 8007700:	613b      	str	r3, [r7, #16]
   return(result);
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	f023 0310 	bic.w	r3, r3, #16
 8007708:	627b      	str	r3, [r7, #36]	@ 0x24
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	330c      	adds	r3, #12
 8007710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007712:	623a      	str	r2, [r7, #32]
 8007714:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	69f9      	ldr	r1, [r7, #28]
 8007718:	6a3a      	ldr	r2, [r7, #32]
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e5      	bne.n	80076f2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f003 0310 	and.w	r3, r3, #16
 8007730:	2b10      	cmp	r3, #16
 8007732:	d10a      	bne.n	800774a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007734:	2300      	movs	r3, #0
 8007736:	60fb      	str	r3, [r7, #12]
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	60fb      	str	r3, [r7, #12]
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685b      	ldr	r3, [r3, #4]
 8007746:	60fb      	str	r3, [r7, #12]
 8007748:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff fdd1 	bl	80072f8 <HAL_UARTEx_RxEventCallback>
 8007756:	e002      	b.n	800775e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7fb fc81 	bl	8003060 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800775e:	2300      	movs	r3, #0
 8007760:	e002      	b.n	8007768 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	e000      	b.n	8007768 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007766:	2302      	movs	r3, #2
  }
}
 8007768:	4618      	mov	r0, r3
 800776a:	3730      	adds	r7, #48	@ 0x30
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}

08007770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007774:	b0c0      	sub	sp, #256	@ 0x100
 8007776:	af00      	add	r7, sp, #0
 8007778:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800777c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	691b      	ldr	r3, [r3, #16]
 8007784:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778c:	68d9      	ldr	r1, [r3, #12]
 800778e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007792:	681a      	ldr	r2, [r3, #0]
 8007794:	ea40 0301 	orr.w	r3, r0, r1
 8007798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800779a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779e:	689a      	ldr	r2, [r3, #8]
 80077a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	431a      	orrs	r2, r3
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ac:	695b      	ldr	r3, [r3, #20]
 80077ae:	431a      	orrs	r2, r3
 80077b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	4313      	orrs	r3, r2
 80077b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80077bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68db      	ldr	r3, [r3, #12]
 80077c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80077c8:	f021 010c 	bic.w	r1, r1, #12
 80077cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077d6:	430b      	orrs	r3, r1
 80077d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	695b      	ldr	r3, [r3, #20]
 80077e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80077e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ea:	6999      	ldr	r1, [r3, #24]
 80077ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f0:	681a      	ldr	r2, [r3, #0]
 80077f2:	ea40 0301 	orr.w	r3, r0, r1
 80077f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	4b8f      	ldr	r3, [pc, #572]	@ (8007a3c <UART_SetConfig+0x2cc>)
 8007800:	429a      	cmp	r2, r3
 8007802:	d005      	beq.n	8007810 <UART_SetConfig+0xa0>
 8007804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007808:	681a      	ldr	r2, [r3, #0]
 800780a:	4b8d      	ldr	r3, [pc, #564]	@ (8007a40 <UART_SetConfig+0x2d0>)
 800780c:	429a      	cmp	r2, r3
 800780e:	d104      	bne.n	800781a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007810:	f7fc ff4a 	bl	80046a8 <HAL_RCC_GetPCLK2Freq>
 8007814:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007818:	e003      	b.n	8007822 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800781a:	f7fc ff31 	bl	8004680 <HAL_RCC_GetPCLK1Freq>
 800781e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007826:	69db      	ldr	r3, [r3, #28]
 8007828:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800782c:	f040 810c 	bne.w	8007a48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007834:	2200      	movs	r2, #0
 8007836:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800783a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800783e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007842:	4622      	mov	r2, r4
 8007844:	462b      	mov	r3, r5
 8007846:	1891      	adds	r1, r2, r2
 8007848:	65b9      	str	r1, [r7, #88]	@ 0x58
 800784a:	415b      	adcs	r3, r3
 800784c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800784e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007852:	4621      	mov	r1, r4
 8007854:	eb12 0801 	adds.w	r8, r2, r1
 8007858:	4629      	mov	r1, r5
 800785a:	eb43 0901 	adc.w	r9, r3, r1
 800785e:	f04f 0200 	mov.w	r2, #0
 8007862:	f04f 0300 	mov.w	r3, #0
 8007866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800786a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800786e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007872:	4690      	mov	r8, r2
 8007874:	4699      	mov	r9, r3
 8007876:	4623      	mov	r3, r4
 8007878:	eb18 0303 	adds.w	r3, r8, r3
 800787c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007880:	462b      	mov	r3, r5
 8007882:	eb49 0303 	adc.w	r3, r9, r3
 8007886:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800788a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007896:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800789a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800789e:	460b      	mov	r3, r1
 80078a0:	18db      	adds	r3, r3, r3
 80078a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80078a4:	4613      	mov	r3, r2
 80078a6:	eb42 0303 	adc.w	r3, r2, r3
 80078aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80078ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80078b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80078b4:	f7f9 f932 	bl	8000b1c <__aeabi_uldivmod>
 80078b8:	4602      	mov	r2, r0
 80078ba:	460b      	mov	r3, r1
 80078bc:	4b61      	ldr	r3, [pc, #388]	@ (8007a44 <UART_SetConfig+0x2d4>)
 80078be:	fba3 2302 	umull	r2, r3, r3, r2
 80078c2:	095b      	lsrs	r3, r3, #5
 80078c4:	011c      	lsls	r4, r3, #4
 80078c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80078d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80078d8:	4642      	mov	r2, r8
 80078da:	464b      	mov	r3, r9
 80078dc:	1891      	adds	r1, r2, r2
 80078de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80078e0:	415b      	adcs	r3, r3
 80078e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078e8:	4641      	mov	r1, r8
 80078ea:	eb12 0a01 	adds.w	sl, r2, r1
 80078ee:	4649      	mov	r1, r9
 80078f0:	eb43 0b01 	adc.w	fp, r3, r1
 80078f4:	f04f 0200 	mov.w	r2, #0
 80078f8:	f04f 0300 	mov.w	r3, #0
 80078fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007900:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007908:	4692      	mov	sl, r2
 800790a:	469b      	mov	fp, r3
 800790c:	4643      	mov	r3, r8
 800790e:	eb1a 0303 	adds.w	r3, sl, r3
 8007912:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007916:	464b      	mov	r3, r9
 8007918:	eb4b 0303 	adc.w	r3, fp, r3
 800791c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007924:	685b      	ldr	r3, [r3, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800792c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007930:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007934:	460b      	mov	r3, r1
 8007936:	18db      	adds	r3, r3, r3
 8007938:	643b      	str	r3, [r7, #64]	@ 0x40
 800793a:	4613      	mov	r3, r2
 800793c:	eb42 0303 	adc.w	r3, r2, r3
 8007940:	647b      	str	r3, [r7, #68]	@ 0x44
 8007942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800794a:	f7f9 f8e7 	bl	8000b1c <__aeabi_uldivmod>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4611      	mov	r1, r2
 8007954:	4b3b      	ldr	r3, [pc, #236]	@ (8007a44 <UART_SetConfig+0x2d4>)
 8007956:	fba3 2301 	umull	r2, r3, r3, r1
 800795a:	095b      	lsrs	r3, r3, #5
 800795c:	2264      	movs	r2, #100	@ 0x64
 800795e:	fb02 f303 	mul.w	r3, r2, r3
 8007962:	1acb      	subs	r3, r1, r3
 8007964:	00db      	lsls	r3, r3, #3
 8007966:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800796a:	4b36      	ldr	r3, [pc, #216]	@ (8007a44 <UART_SetConfig+0x2d4>)
 800796c:	fba3 2302 	umull	r2, r3, r3, r2
 8007970:	095b      	lsrs	r3, r3, #5
 8007972:	005b      	lsls	r3, r3, #1
 8007974:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007978:	441c      	add	r4, r3
 800797a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800797e:	2200      	movs	r2, #0
 8007980:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007984:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007988:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800798c:	4642      	mov	r2, r8
 800798e:	464b      	mov	r3, r9
 8007990:	1891      	adds	r1, r2, r2
 8007992:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007994:	415b      	adcs	r3, r3
 8007996:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800799c:	4641      	mov	r1, r8
 800799e:	1851      	adds	r1, r2, r1
 80079a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80079a2:	4649      	mov	r1, r9
 80079a4:	414b      	adcs	r3, r1
 80079a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80079a8:	f04f 0200 	mov.w	r2, #0
 80079ac:	f04f 0300 	mov.w	r3, #0
 80079b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80079b4:	4659      	mov	r1, fp
 80079b6:	00cb      	lsls	r3, r1, #3
 80079b8:	4651      	mov	r1, sl
 80079ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079be:	4651      	mov	r1, sl
 80079c0:	00ca      	lsls	r2, r1, #3
 80079c2:	4610      	mov	r0, r2
 80079c4:	4619      	mov	r1, r3
 80079c6:	4603      	mov	r3, r0
 80079c8:	4642      	mov	r2, r8
 80079ca:	189b      	adds	r3, r3, r2
 80079cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079d0:	464b      	mov	r3, r9
 80079d2:	460a      	mov	r2, r1
 80079d4:	eb42 0303 	adc.w	r3, r2, r3
 80079d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80079ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079f0:	460b      	mov	r3, r1
 80079f2:	18db      	adds	r3, r3, r3
 80079f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079f6:	4613      	mov	r3, r2
 80079f8:	eb42 0303 	adc.w	r3, r2, r3
 80079fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007a02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007a06:	f7f9 f889 	bl	8000b1c <__aeabi_uldivmod>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	460b      	mov	r3, r1
 8007a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a44 <UART_SetConfig+0x2d4>)
 8007a10:	fba3 1302 	umull	r1, r3, r3, r2
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	2164      	movs	r1, #100	@ 0x64
 8007a18:	fb01 f303 	mul.w	r3, r1, r3
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	3332      	adds	r3, #50	@ 0x32
 8007a22:	4a08      	ldr	r2, [pc, #32]	@ (8007a44 <UART_SetConfig+0x2d4>)
 8007a24:	fba2 2303 	umull	r2, r3, r2, r3
 8007a28:	095b      	lsrs	r3, r3, #5
 8007a2a:	f003 0207 	and.w	r2, r3, #7
 8007a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4422      	add	r2, r4
 8007a36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a38:	e106      	b.n	8007c48 <UART_SetConfig+0x4d8>
 8007a3a:	bf00      	nop
 8007a3c:	40011000 	.word	0x40011000
 8007a40:	40011400 	.word	0x40011400
 8007a44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a52:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a5a:	4642      	mov	r2, r8
 8007a5c:	464b      	mov	r3, r9
 8007a5e:	1891      	adds	r1, r2, r2
 8007a60:	6239      	str	r1, [r7, #32]
 8007a62:	415b      	adcs	r3, r3
 8007a64:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a6a:	4641      	mov	r1, r8
 8007a6c:	1854      	adds	r4, r2, r1
 8007a6e:	4649      	mov	r1, r9
 8007a70:	eb43 0501 	adc.w	r5, r3, r1
 8007a74:	f04f 0200 	mov.w	r2, #0
 8007a78:	f04f 0300 	mov.w	r3, #0
 8007a7c:	00eb      	lsls	r3, r5, #3
 8007a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a82:	00e2      	lsls	r2, r4, #3
 8007a84:	4614      	mov	r4, r2
 8007a86:	461d      	mov	r5, r3
 8007a88:	4643      	mov	r3, r8
 8007a8a:	18e3      	adds	r3, r4, r3
 8007a8c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a90:	464b      	mov	r3, r9
 8007a92:	eb45 0303 	adc.w	r3, r5, r3
 8007a96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007aa6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007aaa:	f04f 0200 	mov.w	r2, #0
 8007aae:	f04f 0300 	mov.w	r3, #0
 8007ab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	008b      	lsls	r3, r1, #2
 8007aba:	4621      	mov	r1, r4
 8007abc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	008a      	lsls	r2, r1, #2
 8007ac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ac8:	f7f9 f828 	bl	8000b1c <__aeabi_uldivmod>
 8007acc:	4602      	mov	r2, r0
 8007ace:	460b      	mov	r3, r1
 8007ad0:	4b60      	ldr	r3, [pc, #384]	@ (8007c54 <UART_SetConfig+0x4e4>)
 8007ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8007ad6:	095b      	lsrs	r3, r3, #5
 8007ad8:	011c      	lsls	r4, r3, #4
 8007ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ade:	2200      	movs	r2, #0
 8007ae0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ae4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ae8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007aec:	4642      	mov	r2, r8
 8007aee:	464b      	mov	r3, r9
 8007af0:	1891      	adds	r1, r2, r2
 8007af2:	61b9      	str	r1, [r7, #24]
 8007af4:	415b      	adcs	r3, r3
 8007af6:	61fb      	str	r3, [r7, #28]
 8007af8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007afc:	4641      	mov	r1, r8
 8007afe:	1851      	adds	r1, r2, r1
 8007b00:	6139      	str	r1, [r7, #16]
 8007b02:	4649      	mov	r1, r9
 8007b04:	414b      	adcs	r3, r1
 8007b06:	617b      	str	r3, [r7, #20]
 8007b08:	f04f 0200 	mov.w	r2, #0
 8007b0c:	f04f 0300 	mov.w	r3, #0
 8007b10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b14:	4659      	mov	r1, fp
 8007b16:	00cb      	lsls	r3, r1, #3
 8007b18:	4651      	mov	r1, sl
 8007b1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b1e:	4651      	mov	r1, sl
 8007b20:	00ca      	lsls	r2, r1, #3
 8007b22:	4610      	mov	r0, r2
 8007b24:	4619      	mov	r1, r3
 8007b26:	4603      	mov	r3, r0
 8007b28:	4642      	mov	r2, r8
 8007b2a:	189b      	adds	r3, r3, r2
 8007b2c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b30:	464b      	mov	r3, r9
 8007b32:	460a      	mov	r2, r1
 8007b34:	eb42 0303 	adc.w	r3, r2, r3
 8007b38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b46:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007b48:	f04f 0200 	mov.w	r2, #0
 8007b4c:	f04f 0300 	mov.w	r3, #0
 8007b50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b54:	4649      	mov	r1, r9
 8007b56:	008b      	lsls	r3, r1, #2
 8007b58:	4641      	mov	r1, r8
 8007b5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b5e:	4641      	mov	r1, r8
 8007b60:	008a      	lsls	r2, r1, #2
 8007b62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b66:	f7f8 ffd9 	bl	8000b1c <__aeabi_uldivmod>
 8007b6a:	4602      	mov	r2, r0
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4611      	mov	r1, r2
 8007b70:	4b38      	ldr	r3, [pc, #224]	@ (8007c54 <UART_SetConfig+0x4e4>)
 8007b72:	fba3 2301 	umull	r2, r3, r3, r1
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	2264      	movs	r2, #100	@ 0x64
 8007b7a:	fb02 f303 	mul.w	r3, r2, r3
 8007b7e:	1acb      	subs	r3, r1, r3
 8007b80:	011b      	lsls	r3, r3, #4
 8007b82:	3332      	adds	r3, #50	@ 0x32
 8007b84:	4a33      	ldr	r2, [pc, #204]	@ (8007c54 <UART_SetConfig+0x4e4>)
 8007b86:	fba2 2303 	umull	r2, r3, r2, r3
 8007b8a:	095b      	lsrs	r3, r3, #5
 8007b8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b90:	441c      	add	r4, r3
 8007b92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b96:	2200      	movs	r2, #0
 8007b98:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b9a:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b9c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007ba0:	4642      	mov	r2, r8
 8007ba2:	464b      	mov	r3, r9
 8007ba4:	1891      	adds	r1, r2, r2
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	415b      	adcs	r3, r3
 8007baa:	60fb      	str	r3, [r7, #12]
 8007bac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007bb0:	4641      	mov	r1, r8
 8007bb2:	1851      	adds	r1, r2, r1
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	4649      	mov	r1, r9
 8007bb8:	414b      	adcs	r3, r1
 8007bba:	607b      	str	r3, [r7, #4]
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007bc8:	4659      	mov	r1, fp
 8007bca:	00cb      	lsls	r3, r1, #3
 8007bcc:	4651      	mov	r1, sl
 8007bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bd2:	4651      	mov	r1, sl
 8007bd4:	00ca      	lsls	r2, r1, #3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	4619      	mov	r1, r3
 8007bda:	4603      	mov	r3, r0
 8007bdc:	4642      	mov	r2, r8
 8007bde:	189b      	adds	r3, r3, r2
 8007be0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007be2:	464b      	mov	r3, r9
 8007be4:	460a      	mov	r2, r1
 8007be6:	eb42 0303 	adc.w	r3, r2, r3
 8007bea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf0:	685b      	ldr	r3, [r3, #4]
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bf6:	667a      	str	r2, [r7, #100]	@ 0x64
 8007bf8:	f04f 0200 	mov.w	r2, #0
 8007bfc:	f04f 0300 	mov.w	r3, #0
 8007c00:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007c04:	4649      	mov	r1, r9
 8007c06:	008b      	lsls	r3, r1, #2
 8007c08:	4641      	mov	r1, r8
 8007c0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007c0e:	4641      	mov	r1, r8
 8007c10:	008a      	lsls	r2, r1, #2
 8007c12:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007c16:	f7f8 ff81 	bl	8000b1c <__aeabi_uldivmod>
 8007c1a:	4602      	mov	r2, r0
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c54 <UART_SetConfig+0x4e4>)
 8007c20:	fba3 1302 	umull	r1, r3, r3, r2
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	2164      	movs	r1, #100	@ 0x64
 8007c28:	fb01 f303 	mul.w	r3, r1, r3
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	011b      	lsls	r3, r3, #4
 8007c30:	3332      	adds	r3, #50	@ 0x32
 8007c32:	4a08      	ldr	r2, [pc, #32]	@ (8007c54 <UART_SetConfig+0x4e4>)
 8007c34:	fba2 2303 	umull	r2, r3, r2, r3
 8007c38:	095b      	lsrs	r3, r3, #5
 8007c3a:	f003 020f 	and.w	r2, r3, #15
 8007c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4422      	add	r2, r4
 8007c46:	609a      	str	r2, [r3, #8]
}
 8007c48:	bf00      	nop
 8007c4a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c54:	51eb851f 	.word	0x51eb851f

08007c58 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8007c5e:	201c      	movs	r0, #28
 8007c60:	f003 fbd6 	bl	800b410 <pvPortMalloc>
 8007c64:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d007      	beq.n	8007c7c <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	3304      	adds	r3, #4
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 f986 	bl	8007f88 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 8007c7c:	687b      	ldr	r3, [r7, #4]
    }
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b090      	sub	sp, #64	@ 0x40
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
 8007c94:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	637b      	str	r3, [r7, #52]	@ 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d10b      	bne.n	8007cc0 <xEventGroupWaitBits+0x38>
        __asm volatile
 8007ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cac:	f383 8811 	msr	BASEPRI, r3
 8007cb0:	f3bf 8f6f 	isb	sy
 8007cb4:	f3bf 8f4f 	dsb	sy
 8007cb8:	623b      	str	r3, [r7, #32]
    }
 8007cba:	bf00      	nop
 8007cbc:	bf00      	nop
 8007cbe:	e7fd      	b.n	8007cbc <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007cc0:	68bb      	ldr	r3, [r7, #8]
 8007cc2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007cc6:	d30b      	bcc.n	8007ce0 <xEventGroupWaitBits+0x58>
        __asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	61fb      	str	r3, [r7, #28]
    }
 8007cda:	bf00      	nop
 8007cdc:	bf00      	nop
 8007cde:	e7fd      	b.n	8007cdc <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <xEventGroupWaitBits+0x76>
        __asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	61bb      	str	r3, [r7, #24]
    }
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <xEventGroupWaitBits+0x72>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007cfe:	f002 f811 	bl	8009d24 <xTaskGetSchedulerState>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <xEventGroupWaitBits+0x86>
 8007d08:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <xEventGroupWaitBits+0x8a>
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e000      	b.n	8007d14 <xEventGroupWaitBits+0x8c>
 8007d12:	2300      	movs	r3, #0
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d10b      	bne.n	8007d30 <xEventGroupWaitBits+0xa8>
        __asm volatile
 8007d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1c:	f383 8811 	msr	BASEPRI, r3
 8007d20:	f3bf 8f6f 	isb	sy
 8007d24:	f3bf 8f4f 	dsb	sy
 8007d28:	617b      	str	r3, [r7, #20]
    }
 8007d2a:	bf00      	nop
 8007d2c:	bf00      	nop
 8007d2e:	e7fd      	b.n	8007d2c <xEventGroupWaitBits+0xa4>
        }
    #endif

    vTaskSuspendAll();
 8007d30:	f001 fb5e 	bl	80093f0 <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8007d34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8007d3a:	683a      	ldr	r2, [r7, #0]
 8007d3c:	68b9      	ldr	r1, [r7, #8]
 8007d3e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d40:	f000 f900 	bl	8007f44 <prvTestWaitCondition>
 8007d44:	62b8      	str	r0, [r7, #40]	@ 0x28

        if( xWaitConditionMet != pdFALSE )
 8007d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00e      	beq.n	8007d6a <xEventGroupWaitBits+0xe2>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 8007d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            xTicksToWait = ( TickType_t ) 0;
 8007d50:	2300      	movs	r3, #0
 8007d52:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d028      	beq.n	8007dac <xEventGroupWaitBits+0x124>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007d5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d5c:	681a      	ldr	r2, [r3, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	43db      	mvns	r3, r3
 8007d62:	401a      	ands	r2, r3
 8007d64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d66:	601a      	str	r2, [r3, #0]
 8007d68:	e020      	b.n	8007dac <xEventGroupWaitBits+0x124>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 8007d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d104      	bne.n	8007d7a <xEventGroupWaitBits+0xf2>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 8007d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
            xTimeoutOccurred = pdTRUE;
 8007d74:	2301      	movs	r3, #1
 8007d76:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d78:	e018      	b.n	8007dac <xEventGroupWaitBits+0x124>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d003      	beq.n	8007d88 <xEventGroupWaitBits+0x100>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8007d80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007d86:	63bb      	str	r3, [r7, #56]	@ 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d003      	beq.n	8007d96 <xEventGroupWaitBits+0x10e>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8007d8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007d94:	63bb      	str	r3, [r7, #56]	@ 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8007d96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d98:	1d18      	adds	r0, r3, #4
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d9e:	4313      	orrs	r3, r2
 8007da0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007da2:	4619      	mov	r1, r3
 8007da4:	f001 fd44 	bl	8009830 <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8007da8:	2300      	movs	r3, #0
 8007daa:	63fb      	str	r3, [r7, #60]	@ 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8007dac:	f001 fb2e 	bl	800940c <xTaskResumeAll>
 8007db0:	6278      	str	r0, [r7, #36]	@ 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 8007db2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d031      	beq.n	8007e1c <xEventGroupWaitBits+0x194>
    {
        if( xAlreadyYielded == pdFALSE )
 8007db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d107      	bne.n	8007dce <xEventGroupWaitBits+0x146>
        {
            portYIELD_WITHIN_API();
 8007dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8007e28 <xEventGroupWaitBits+0x1a0>)
 8007dc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007dc4:	601a      	str	r2, [r3, #0]
 8007dc6:	f3bf 8f4f 	dsb	sy
 8007dca:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 8007dce:	f002 f95d 	bl	800a08c <uxTaskResetEventItemValue>
 8007dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8007dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d11a      	bne.n	8007e14 <xEventGroupWaitBits+0x18c>
        {
            taskENTER_CRITICAL();
 8007dde:	f003 f9e5 	bl	800b1ac <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 8007de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	68b9      	ldr	r1, [r7, #8]
 8007dec:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007dee:	f000 f8a9 	bl	8007f44 <prvTestWaitCondition>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d009      	beq.n	8007e0c <xEventGroupWaitBits+0x184>
                {
                    if( xClearOnExit != pdFALSE )
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d006      	beq.n	8007e0c <xEventGroupWaitBits+0x184>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8007dfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	43db      	mvns	r3, r3
 8007e06:	401a      	ands	r2, r3
 8007e08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e0a:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	633b      	str	r3, [r7, #48]	@ 0x30
            }
            taskEXIT_CRITICAL();
 8007e10:	f003 f9fe 	bl	800b210 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007e14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e16:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8007e1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3740      	adds	r7, #64	@ 0x40
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	bf00      	nop
 8007e28:	e000ed04 	.word	0xe000ed04

08007e2c <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b08e      	sub	sp, #56	@ 0x38
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
 8007e34:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8007e36:	2300      	movs	r3, #0
 8007e38:	633b      	str	r3, [r7, #48]	@ 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    BaseType_t xMatchFound = pdFALSE;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10b      	bne.n	8007e60 <xEventGroupSetBits+0x34>
        __asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	613b      	str	r3, [r7, #16]
    }
 8007e5a:	bf00      	nop
 8007e5c:	bf00      	nop
 8007e5e:	e7fd      	b.n	8007e5c <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007e66:	d30b      	bcc.n	8007e80 <xEventGroupSetBits+0x54>
        __asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	60fb      	str	r3, [r7, #12]
    }
 8007e7a:	bf00      	nop
 8007e7c:	bf00      	nop
 8007e7e:	e7fd      	b.n	8007e7c <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 8007e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e82:	3304      	adds	r3, #4
 8007e84:	627b      	str	r3, [r7, #36]	@ 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e88:	3308      	adds	r3, #8
 8007e8a:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 8007e8c:	f001 fab0 	bl	80093f0 <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 8007e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e92:	68db      	ldr	r3, [r3, #12]
 8007e94:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8007e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea0:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 8007ea2:	e03c      	b.n	8007f1e <xEventGroupSetBits+0xf2>
        {
            pxNext = listGET_NEXT( pxListItem );
 8007ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ea6:	685b      	ldr	r3, [r3, #4]
 8007ea8:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8007eba:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8007ebc:	69bb      	ldr	r3, [r7, #24]
 8007ebe:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007ec2:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d108      	bne.n	8007ee0 <xEventGroupSetBits+0xb4>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8007ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00b      	beq.n	8007ef2 <xEventGroupSetBits+0xc6>
                {
                    xMatchFound = pdTRUE;
 8007eda:	2301      	movs	r3, #1
 8007edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ede:	e008      	b.n	8007ef2 <xEventGroupSetBits+0xc6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8007ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	69bb      	ldr	r3, [r7, #24]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	69ba      	ldr	r2, [r7, #24]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d101      	bne.n	8007ef2 <xEventGroupSetBits+0xc6>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 8007eee:	2301      	movs	r3, #1
 8007ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 8007ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d010      	beq.n	8007f1a <xEventGroupSetBits+0xee>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d003      	beq.n	8007f0a <xEventGroupSetBits+0xde>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 8007f02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	633b      	str	r3, [r7, #48]	@ 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8007f0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8007f12:	4619      	mov	r1, r3
 8007f14:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8007f16:	f001 fd61 	bl	80099dc <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	637b      	str	r3, [r7, #52]	@ 0x34
        while( pxListItem != pxListEnd )
 8007f1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f20:	6a3b      	ldr	r3, [r7, #32]
 8007f22:	429a      	cmp	r2, r3
 8007f24:	d1be      	bne.n	8007ea4 <xEventGroupSetBits+0x78>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 8007f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2c:	43db      	mvns	r3, r3
 8007f2e:	401a      	ands	r2, r3
 8007f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f32:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 8007f34:	f001 fa6a 	bl	800940c <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 8007f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3a:	681b      	ldr	r3, [r3, #0]
}
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	3738      	adds	r7, #56	@ 0x38
 8007f40:	46bd      	mov	sp, r7
 8007f42:	bd80      	pop	{r7, pc}

08007f44 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 8007f44:	b480      	push	{r7}
 8007f46:	b087      	sub	sp, #28
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	60b9      	str	r1, [r7, #8]
 8007f4e:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d107      	bne.n	8007f6a <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8007f5a:	68fa      	ldr	r2, [r7, #12]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d00a      	beq.n	8007f7a <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8007f64:	2301      	movs	r3, #1
 8007f66:	617b      	str	r3, [r7, #20]
 8007f68:	e007      	b.n	8007f7a <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8007f6a:	68fa      	ldr	r2, [r7, #12]
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4013      	ands	r3, r2
 8007f70:	68ba      	ldr	r2, [r7, #8]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d101      	bne.n	8007f7a <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 8007f76:	2301      	movs	r3, #1
 8007f78:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 8007f7a:	697b      	ldr	r3, [r7, #20]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	371c      	adds	r7, #28
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f103 0208 	add.w	r2, r3, #8
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007fa0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f103 0208 	add.w	r2, r3, #8
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f103 0208 	add.w	r2, r3, #8
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007fbc:	bf00      	nop
 8007fbe:	370c      	adds	r7, #12
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b085      	sub	sp, #20
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	683a      	ldr	r2, [r7, #0]
 8008006:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	1c5a      	adds	r2, r3, #1
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	601a      	str	r2, [r3, #0]
}
 800801e:	bf00      	nop
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr

0800802a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800802a:	b480      	push	{r7}
 800802c:	b085      	sub	sp, #20
 800802e:	af00      	add	r7, sp, #0
 8008030:	6078      	str	r0, [r7, #4]
 8008032:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800803a:	68bb      	ldr	r3, [r7, #8]
 800803c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008040:	d103      	bne.n	800804a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	691b      	ldr	r3, [r3, #16]
 8008046:	60fb      	str	r3, [r7, #12]
 8008048:	e00c      	b.n	8008064 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	3308      	adds	r3, #8
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	e002      	b.n	8008058 <vListInsert+0x2e>
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	60fb      	str	r3, [r7, #12]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	429a      	cmp	r2, r3
 8008062:	d2f6      	bcs.n	8008052 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	683a      	ldr	r2, [r7, #0]
 800807e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	1c5a      	adds	r2, r3, #1
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	601a      	str	r2, [r3, #0]
}
 8008090:	bf00      	nop
 8008092:	3714      	adds	r7, #20
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr

0800809c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	6892      	ldr	r2, [r2, #8]
 80080b2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	6852      	ldr	r2, [r2, #4]
 80080bc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	687a      	ldr	r2, [r7, #4]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d103      	bne.n	80080d0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	1e5a      	subs	r2, r3, #1
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr

080080f0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d10b      	bne.n	800811c <xQueueGenericReset+0x2c>
        __asm volatile
 8008104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008108:	f383 8811 	msr	BASEPRI, r3
 800810c:	f3bf 8f6f 	isb	sy
 8008110:	f3bf 8f4f 	dsb	sy
 8008114:	60bb      	str	r3, [r7, #8]
    }
 8008116:	bf00      	nop
 8008118:	bf00      	nop
 800811a:	e7fd      	b.n	8008118 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800811c:	f003 f846 	bl	800b1ac <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008128:	68f9      	ldr	r1, [r7, #12]
 800812a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800812c:	fb01 f303 	mul.w	r3, r1, r3
 8008130:	441a      	add	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681a      	ldr	r2, [r3, #0]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800814c:	3b01      	subs	r3, #1
 800814e:	68f9      	ldr	r1, [r7, #12]
 8008150:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008152:	fb01 f303 	mul.w	r3, r1, r3
 8008156:	441a      	add	r2, r3
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	22ff      	movs	r2, #255	@ 0xff
 8008160:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	22ff      	movs	r2, #255	@ 0xff
 8008168:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d114      	bne.n	800819c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d01a      	beq.n	80081b0 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	3310      	adds	r3, #16
 800817e:	4618      	mov	r0, r3
 8008180:	f001 fbc4 	bl	800990c <xTaskRemoveFromEventList>
 8008184:	4603      	mov	r3, r0
 8008186:	2b00      	cmp	r3, #0
 8008188:	d012      	beq.n	80081b0 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800818a:	4b0d      	ldr	r3, [pc, #52]	@ (80081c0 <xQueueGenericReset+0xd0>)
 800818c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008190:	601a      	str	r2, [r3, #0]
 8008192:	f3bf 8f4f 	dsb	sy
 8008196:	f3bf 8f6f 	isb	sy
 800819a:	e009      	b.n	80081b0 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	3310      	adds	r3, #16
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff fef1 	bl	8007f88 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	3324      	adds	r3, #36	@ 0x24
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7ff feec 	bl	8007f88 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80081b0:	f003 f82e 	bl	800b210 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80081b4:	2301      	movs	r3, #1
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3710      	adds	r7, #16
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	e000ed04 	.word	0xe000ed04

080081c4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b08c      	sub	sp, #48	@ 0x30
 80081c8:	af02      	add	r7, sp, #8
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	4613      	mov	r3, r2
 80081d0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d10b      	bne.n	80081f0 <xQueueGenericCreate+0x2c>
        __asm volatile
 80081d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081dc:	f383 8811 	msr	BASEPRI, r3
 80081e0:	f3bf 8f6f 	isb	sy
 80081e4:	f3bf 8f4f 	dsb	sy
 80081e8:	61bb      	str	r3, [r7, #24]
    }
 80081ea:	bf00      	nop
 80081ec:	bf00      	nop
 80081ee:	e7fd      	b.n	80081ec <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	68ba      	ldr	r2, [r7, #8]
 80081f4:	fb02 f303 	mul.w	r3, r2, r3
 80081f8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d006      	beq.n	800820e <xQueueGenericCreate+0x4a>
 8008200:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	fbb2 f3f3 	udiv	r3, r2, r3
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	429a      	cmp	r2, r3
 800820c:	d101      	bne.n	8008212 <xQueueGenericCreate+0x4e>
 800820e:	2301      	movs	r3, #1
 8008210:	e000      	b.n	8008214 <xQueueGenericCreate+0x50>
 8008212:	2300      	movs	r3, #0
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10b      	bne.n	8008230 <xQueueGenericCreate+0x6c>
        __asm volatile
 8008218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821c:	f383 8811 	msr	BASEPRI, r3
 8008220:	f3bf 8f6f 	isb	sy
 8008224:	f3bf 8f4f 	dsb	sy
 8008228:	617b      	str	r3, [r7, #20]
    }
 800822a:	bf00      	nop
 800822c:	bf00      	nop
 800822e:	e7fd      	b.n	800822c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8008230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008232:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008236:	d90b      	bls.n	8008250 <xQueueGenericCreate+0x8c>
        __asm volatile
 8008238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800823c:	f383 8811 	msr	BASEPRI, r3
 8008240:	f3bf 8f6f 	isb	sy
 8008244:	f3bf 8f4f 	dsb	sy
 8008248:	613b      	str	r3, [r7, #16]
    }
 800824a:	bf00      	nop
 800824c:	bf00      	nop
 800824e:	e7fd      	b.n	800824c <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008252:	3350      	adds	r3, #80	@ 0x50
 8008254:	4618      	mov	r0, r3
 8008256:	f003 f8db 	bl	800b410 <pvPortMalloc>
 800825a:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 800825c:	6a3b      	ldr	r3, [r7, #32]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00d      	beq.n	800827e <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008266:	69fb      	ldr	r3, [r7, #28]
 8008268:	3350      	adds	r3, #80	@ 0x50
 800826a:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800826c:	79fa      	ldrb	r2, [r7, #7]
 800826e:	6a3b      	ldr	r3, [r7, #32]
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	4613      	mov	r3, r2
 8008274:	69fa      	ldr	r2, [r7, #28]
 8008276:	68b9      	ldr	r1, [r7, #8]
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 f805 	bl	8008288 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800827e:	6a3b      	ldr	r3, [r7, #32]
    }
 8008280:	4618      	mov	r0, r3
 8008282:	3728      	adds	r7, #40	@ 0x28
 8008284:	46bd      	mov	sp, r7
 8008286:	bd80      	pop	{r7, pc}

08008288 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b084      	sub	sp, #16
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	607a      	str	r2, [r7, #4]
 8008294:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d103      	bne.n	80082a4 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800829c:	69bb      	ldr	r3, [r7, #24]
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	e002      	b.n	80082aa <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80082a4:	69bb      	ldr	r3, [r7, #24]
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80082b6:	2101      	movs	r1, #1
 80082b8:	69b8      	ldr	r0, [r7, #24]
 80082ba:	f7ff ff19 	bl	80080f0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	78fa      	ldrb	r2, [r7, #3]
 80082c2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80082c6:	78fb      	ldrb	r3, [r7, #3]
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	68f9      	ldr	r1, [r7, #12]
 80082cc:	2073      	movs	r0, #115	@ 0x73
 80082ce:	f004 f91d 	bl	800c50c <SEGGER_SYSVIEW_RecordU32x3>
}
 80082d2:	bf00      	nop
 80082d4:	3710      	adds	r7, #16
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}
	...

080082dc <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b090      	sub	sp, #64	@ 0x40
 80082e0:	af02      	add	r7, sp, #8
 80082e2:	60f8      	str	r0, [r7, #12]
 80082e4:	60b9      	str	r1, [r7, #8]
 80082e6:	607a      	str	r2, [r7, #4]
 80082e8:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80082ea:	2300      	movs	r3, #0
 80082ec:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80082f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d10b      	bne.n	8008310 <xQueueGenericSend+0x34>
        __asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082fc:	f383 8811 	msr	BASEPRI, r3
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	f3bf 8f4f 	dsb	sy
 8008308:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800830a:	bf00      	nop
 800830c:	bf00      	nop
 800830e:	e7fd      	b.n	800830c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d103      	bne.n	800831e <xQueueGenericSend+0x42>
 8008316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	d101      	bne.n	8008322 <xQueueGenericSend+0x46>
 800831e:	2301      	movs	r3, #1
 8008320:	e000      	b.n	8008324 <xQueueGenericSend+0x48>
 8008322:	2300      	movs	r3, #0
 8008324:	2b00      	cmp	r3, #0
 8008326:	d10b      	bne.n	8008340 <xQueueGenericSend+0x64>
        __asm volatile
 8008328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832c:	f383 8811 	msr	BASEPRI, r3
 8008330:	f3bf 8f6f 	isb	sy
 8008334:	f3bf 8f4f 	dsb	sy
 8008338:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	e7fd      	b.n	800833c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	2b02      	cmp	r3, #2
 8008344:	d103      	bne.n	800834e <xQueueGenericSend+0x72>
 8008346:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008348:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800834a:	2b01      	cmp	r3, #1
 800834c:	d101      	bne.n	8008352 <xQueueGenericSend+0x76>
 800834e:	2301      	movs	r3, #1
 8008350:	e000      	b.n	8008354 <xQueueGenericSend+0x78>
 8008352:	2300      	movs	r3, #0
 8008354:	2b00      	cmp	r3, #0
 8008356:	d10b      	bne.n	8008370 <xQueueGenericSend+0x94>
        __asm volatile
 8008358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800835c:	f383 8811 	msr	BASEPRI, r3
 8008360:	f3bf 8f6f 	isb	sy
 8008364:	f3bf 8f4f 	dsb	sy
 8008368:	623b      	str	r3, [r7, #32]
    }
 800836a:	bf00      	nop
 800836c:	bf00      	nop
 800836e:	e7fd      	b.n	800836c <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008370:	f001 fcd8 	bl	8009d24 <xTaskGetSchedulerState>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d102      	bne.n	8008380 <xQueueGenericSend+0xa4>
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <xQueueGenericSend+0xa8>
 8008380:	2301      	movs	r3, #1
 8008382:	e000      	b.n	8008386 <xQueueGenericSend+0xaa>
 8008384:	2300      	movs	r3, #0
 8008386:	2b00      	cmp	r3, #0
 8008388:	d10b      	bne.n	80083a2 <xQueueGenericSend+0xc6>
        __asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	61fb      	str	r3, [r7, #28]
    }
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	e7fd      	b.n	800839e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80083a2:	f002 ff03 	bl	800b1ac <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80083aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d302      	bcc.n	80083b8 <xQueueGenericSend+0xdc>
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b02      	cmp	r3, #2
 80083b6:	d136      	bne.n	8008426 <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 80083b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083ba:	4618      	mov	r0, r3
 80083bc:	f004 fee0 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	6879      	ldr	r1, [r7, #4]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	9300      	str	r3, [sp, #0]
 80083c8:	460b      	mov	r3, r1
 80083ca:	4601      	mov	r1, r0
 80083cc:	205a      	movs	r0, #90	@ 0x5a
 80083ce:	f004 f913 	bl	800c5f8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80083d2:	683a      	ldr	r2, [r7, #0]
 80083d4:	68b9      	ldr	r1, [r7, #8]
 80083d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80083d8:	f000 fca7 	bl	8008d2a <prvCopyDataToQueue>
 80083dc:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80083de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d010      	beq.n	8008408 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80083e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083e8:	3324      	adds	r3, #36	@ 0x24
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 fa8e 	bl	800990c <xTaskRemoveFromEventList>
 80083f0:	4603      	mov	r3, r0
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d013      	beq.n	800841e <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 80083f6:	4b4d      	ldr	r3, [pc, #308]	@ (800852c <xQueueGenericSend+0x250>)
 80083f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083fc:	601a      	str	r2, [r3, #0]
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	e00a      	b.n	800841e <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8008408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800840a:	2b00      	cmp	r3, #0
 800840c:	d007      	beq.n	800841e <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800840e:	4b47      	ldr	r3, [pc, #284]	@ (800852c <xQueueGenericSend+0x250>)
 8008410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	f3bf 8f4f 	dsb	sy
 800841a:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800841e:	f002 fef7 	bl	800b210 <vPortExitCritical>
                return pdPASS;
 8008422:	2301      	movs	r3, #1
 8008424:	e07d      	b.n	8008522 <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d110      	bne.n	800844e <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800842c:	f002 fef0 	bl	800b210 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8008430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008432:	4618      	mov	r0, r3
 8008434:	f004 fea4 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	9300      	str	r3, [sp, #0]
 8008440:	460b      	mov	r3, r1
 8008442:	4601      	mov	r1, r0
 8008444:	205a      	movs	r0, #90	@ 0x5a
 8008446:	f004 f8d7 	bl	800c5f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 800844a:	2300      	movs	r3, #0
 800844c:	e069      	b.n	8008522 <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 800844e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008450:	2b00      	cmp	r3, #0
 8008452:	d106      	bne.n	8008462 <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008454:	f107 0314 	add.w	r3, r7, #20
 8008458:	4618      	mov	r0, r3
 800845a:	f001 fb27 	bl	8009aac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800845e:	2301      	movs	r3, #1
 8008460:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008462:	f002 fed5 	bl	800b210 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008466:	f000 ffc3 	bl	80093f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800846a:	f002 fe9f 	bl	800b1ac <vPortEnterCritical>
 800846e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008470:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008474:	b25b      	sxtb	r3, r3
 8008476:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800847a:	d103      	bne.n	8008484 <xQueueGenericSend+0x1a8>
 800847c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800847e:	2200      	movs	r2, #0
 8008480:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008486:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800848a:	b25b      	sxtb	r3, r3
 800848c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008490:	d103      	bne.n	800849a <xQueueGenericSend+0x1be>
 8008492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800849a:	f002 feb9 	bl	800b210 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800849e:	1d3a      	adds	r2, r7, #4
 80084a0:	f107 0314 	add.w	r3, r7, #20
 80084a4:	4611      	mov	r1, r2
 80084a6:	4618      	mov	r0, r3
 80084a8:	f001 fb16 	bl	8009ad8 <xTaskCheckForTimeOut>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d124      	bne.n	80084fc <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80084b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084b4:	f000 fd31 	bl	8008f1a <prvIsQueueFull>
 80084b8:	4603      	mov	r3, r0
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d018      	beq.n	80084f0 <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	3310      	adds	r3, #16
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f001 f98c 	bl	80097e4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80084cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084ce:	f000 fcbc 	bl	8008e4a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80084d2:	f000 ff9b 	bl	800940c <xTaskResumeAll>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f47f af62 	bne.w	80083a2 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80084de:	4b13      	ldr	r3, [pc, #76]	@ (800852c <xQueueGenericSend+0x250>)
 80084e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084e4:	601a      	str	r2, [r3, #0]
 80084e6:	f3bf 8f4f 	dsb	sy
 80084ea:	f3bf 8f6f 	isb	sy
 80084ee:	e758      	b.n	80083a2 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80084f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084f2:	f000 fcaa 	bl	8008e4a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80084f6:	f000 ff89 	bl	800940c <xTaskResumeAll>
 80084fa:	e752      	b.n	80083a2 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80084fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80084fe:	f000 fca4 	bl	8008e4a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008502:	f000 ff83 	bl	800940c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8008506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008508:	4618      	mov	r0, r3
 800850a:	f004 fe39 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 800850e:	68ba      	ldr	r2, [r7, #8]
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	460b      	mov	r3, r1
 8008518:	4601      	mov	r1, r0
 800851a:	205a      	movs	r0, #90	@ 0x5a
 800851c:	f004 f86c 	bl	800c5f8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8008520:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008522:	4618      	mov	r0, r3
 8008524:	3738      	adds	r7, #56	@ 0x38
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}
 800852a:	bf00      	nop
 800852c:	e000ed04 	.word	0xe000ed04

08008530 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b090      	sub	sp, #64	@ 0x40
 8008534:	af00      	add	r7, sp, #0
 8008536:	60f8      	str	r0, [r7, #12]
 8008538:	60b9      	str	r1, [r7, #8]
 800853a:	607a      	str	r2, [r7, #4]
 800853c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8008542:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10b      	bne.n	8008560 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	e7fd      	b.n	800855c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008560:	68bb      	ldr	r3, [r7, #8]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d103      	bne.n	800856e <xQueueGenericSendFromISR+0x3e>
 8008566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d101      	bne.n	8008572 <xQueueGenericSendFromISR+0x42>
 800856e:	2301      	movs	r3, #1
 8008570:	e000      	b.n	8008574 <xQueueGenericSendFromISR+0x44>
 8008572:	2300      	movs	r3, #0
 8008574:	2b00      	cmp	r3, #0
 8008576:	d10b      	bne.n	8008590 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8008578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857c:	f383 8811 	msr	BASEPRI, r3
 8008580:	f3bf 8f6f 	isb	sy
 8008584:	f3bf 8f4f 	dsb	sy
 8008588:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800858a:	bf00      	nop
 800858c:	bf00      	nop
 800858e:	e7fd      	b.n	800858c <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	2b02      	cmp	r3, #2
 8008594:	d103      	bne.n	800859e <xQueueGenericSendFromISR+0x6e>
 8008596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800859a:	2b01      	cmp	r3, #1
 800859c:	d101      	bne.n	80085a2 <xQueueGenericSendFromISR+0x72>
 800859e:	2301      	movs	r3, #1
 80085a0:	e000      	b.n	80085a4 <xQueueGenericSendFromISR+0x74>
 80085a2:	2300      	movs	r3, #0
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d10b      	bne.n	80085c0 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80085a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ac:	f383 8811 	msr	BASEPRI, r3
 80085b0:	f3bf 8f6f 	isb	sy
 80085b4:	f3bf 8f4f 	dsb	sy
 80085b8:	623b      	str	r3, [r7, #32]
    }
 80085ba:	bf00      	nop
 80085bc:	bf00      	nop
 80085be:	e7fd      	b.n	80085bc <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80085c0:	f002 fee4 	bl	800b38c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80085c4:	f3ef 8211 	mrs	r2, BASEPRI
 80085c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085cc:	f383 8811 	msr	BASEPRI, r3
 80085d0:	f3bf 8f6f 	isb	sy
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	61fa      	str	r2, [r7, #28]
 80085da:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80085dc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80085de:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80085e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d302      	bcc.n	80085f2 <xQueueGenericSendFromISR+0xc2>
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	2b02      	cmp	r3, #2
 80085f0:	d149      	bne.n	8008686 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80085f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80085f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008600:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008604:	4618      	mov	r0, r3
 8008606:	f004 fdbb 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 800860a:	4601      	mov	r1, r0
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	461a      	mov	r2, r3
 8008610:	2060      	movs	r0, #96	@ 0x60
 8008612:	f003 ff21 	bl	800c458 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008616:	683a      	ldr	r2, [r7, #0]
 8008618:	68b9      	ldr	r1, [r7, #8]
 800861a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800861c:	f000 fb85 	bl	8008d2a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8008620:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008624:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008628:	d112      	bne.n	8008650 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800862a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800862e:	2b00      	cmp	r3, #0
 8008630:	d026      	beq.n	8008680 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008634:	3324      	adds	r3, #36	@ 0x24
 8008636:	4618      	mov	r0, r3
 8008638:	f001 f968 	bl	800990c <xTaskRemoveFromEventList>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d01e      	beq.n	8008680 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d01b      	beq.n	8008680 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e017      	b.n	8008680 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8008650:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008654:	2b7f      	cmp	r3, #127	@ 0x7f
 8008656:	d10b      	bne.n	8008670 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8008658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800865c:	f383 8811 	msr	BASEPRI, r3
 8008660:	f3bf 8f6f 	isb	sy
 8008664:	f3bf 8f4f 	dsb	sy
 8008668:	617b      	str	r3, [r7, #20]
    }
 800866a:	bf00      	nop
 800866c:	bf00      	nop
 800866e:	e7fd      	b.n	800866c <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008670:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008674:	3301      	adds	r3, #1
 8008676:	b2db      	uxtb	r3, r3
 8008678:	b25a      	sxtb	r2, r3
 800867a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800867c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8008680:	2301      	movs	r3, #1
 8008682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8008684:	e00b      	b.n	800869e <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8008686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008688:	4618      	mov	r0, r3
 800868a:	f004 fd79 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 800868e:	4601      	mov	r1, r0
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	461a      	mov	r2, r3
 8008694:	2060      	movs	r0, #96	@ 0x60
 8008696:	f003 fedf 	bl	800c458 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800869a:	2300      	movs	r3, #0
 800869c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800869e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086a0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80086a8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80086aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3740      	adds	r7, #64	@ 0x40
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}

080086b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80086b4:	b590      	push	{r4, r7, lr}
 80086b6:	b08f      	sub	sp, #60	@ 0x3c
 80086b8:	af02      	add	r7, sp, #8
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80086c0:	2300      	movs	r3, #0
 80086c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80086c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d10b      	bne.n	80086e6 <xQueueReceive+0x32>
        __asm volatile
 80086ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086d2:	f383 8811 	msr	BASEPRI, r3
 80086d6:	f3bf 8f6f 	isb	sy
 80086da:	f3bf 8f4f 	dsb	sy
 80086de:	623b      	str	r3, [r7, #32]
    }
 80086e0:	bf00      	nop
 80086e2:	bf00      	nop
 80086e4:	e7fd      	b.n	80086e2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d103      	bne.n	80086f4 <xQueueReceive+0x40>
 80086ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d101      	bne.n	80086f8 <xQueueReceive+0x44>
 80086f4:	2301      	movs	r3, #1
 80086f6:	e000      	b.n	80086fa <xQueueReceive+0x46>
 80086f8:	2300      	movs	r3, #0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d10b      	bne.n	8008716 <xQueueReceive+0x62>
        __asm volatile
 80086fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008702:	f383 8811 	msr	BASEPRI, r3
 8008706:	f3bf 8f6f 	isb	sy
 800870a:	f3bf 8f4f 	dsb	sy
 800870e:	61fb      	str	r3, [r7, #28]
    }
 8008710:	bf00      	nop
 8008712:	bf00      	nop
 8008714:	e7fd      	b.n	8008712 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008716:	f001 fb05 	bl	8009d24 <xTaskGetSchedulerState>
 800871a:	4603      	mov	r3, r0
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <xQueueReceive+0x72>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <xQueueReceive+0x76>
 8008726:	2301      	movs	r3, #1
 8008728:	e000      	b.n	800872c <xQueueReceive+0x78>
 800872a:	2300      	movs	r3, #0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10b      	bne.n	8008748 <xQueueReceive+0x94>
        __asm volatile
 8008730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008734:	f383 8811 	msr	BASEPRI, r3
 8008738:	f3bf 8f6f 	isb	sy
 800873c:	f3bf 8f4f 	dsb	sy
 8008740:	61bb      	str	r3, [r7, #24]
    }
 8008742:	bf00      	nop
 8008744:	bf00      	nop
 8008746:	e7fd      	b.n	8008744 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008748:	f002 fd30 	bl	800b1ac <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800874c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008750:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d02f      	beq.n	80087b8 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008758:	68b9      	ldr	r1, [r7, #8]
 800875a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800875c:	f000 fb4f 	bl	8008dfe <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	4618      	mov	r0, r3
 8008764:	f004 fd0c 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008768:	4604      	mov	r4, r0
 800876a:	2000      	movs	r0, #0
 800876c:	f004 fd08 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008770:	4602      	mov	r2, r0
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2101      	movs	r1, #1
 8008776:	9100      	str	r1, [sp, #0]
 8008778:	4621      	mov	r1, r4
 800877a:	205c      	movs	r0, #92	@ 0x5c
 800877c:	f003 ff3c 	bl	800c5f8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008782:	1e5a      	subs	r2, r3, #1
 8008784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008786:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800878a:	691b      	ldr	r3, [r3, #16]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d00f      	beq.n	80087b0 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008792:	3310      	adds	r3, #16
 8008794:	4618      	mov	r0, r3
 8008796:	f001 f8b9 	bl	800990c <xTaskRemoveFromEventList>
 800879a:	4603      	mov	r3, r0
 800879c:	2b00      	cmp	r3, #0
 800879e:	d007      	beq.n	80087b0 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80087a0:	4b4d      	ldr	r3, [pc, #308]	@ (80088d8 <xQueueReceive+0x224>)
 80087a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087a6:	601a      	str	r2, [r3, #0]
 80087a8:	f3bf 8f4f 	dsb	sy
 80087ac:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80087b0:	f002 fd2e 	bl	800b210 <vPortExitCritical>
                return pdPASS;
 80087b4:	2301      	movs	r3, #1
 80087b6:	e08a      	b.n	80088ce <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d113      	bne.n	80087e6 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80087be:	f002 fd27 	bl	800b210 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80087c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c4:	4618      	mov	r0, r3
 80087c6:	f004 fcdb 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 80087ca:	4604      	mov	r4, r0
 80087cc:	2000      	movs	r0, #0
 80087ce:	f004 fcd7 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 80087d2:	4602      	mov	r2, r0
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2101      	movs	r1, #1
 80087d8:	9100      	str	r1, [sp, #0]
 80087da:	4621      	mov	r1, r4
 80087dc:	205c      	movs	r0, #92	@ 0x5c
 80087de:	f003 ff0b 	bl	800c5f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80087e2:	2300      	movs	r3, #0
 80087e4:	e073      	b.n	80088ce <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80087e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d106      	bne.n	80087fa <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80087ec:	f107 0310 	add.w	r3, r7, #16
 80087f0:	4618      	mov	r0, r3
 80087f2:	f001 f95b 	bl	8009aac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80087f6:	2301      	movs	r3, #1
 80087f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80087fa:	f002 fd09 	bl	800b210 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80087fe:	f000 fdf7 	bl	80093f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008802:	f002 fcd3 	bl	800b1ac <vPortEnterCritical>
 8008806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008808:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800880c:	b25b      	sxtb	r3, r3
 800880e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008812:	d103      	bne.n	800881c <xQueueReceive+0x168>
 8008814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008816:	2200      	movs	r2, #0
 8008818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800881c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008822:	b25b      	sxtb	r3, r3
 8008824:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008828:	d103      	bne.n	8008832 <xQueueReceive+0x17e>
 800882a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800882c:	2200      	movs	r2, #0
 800882e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008832:	f002 fced 	bl	800b210 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008836:	1d3a      	adds	r2, r7, #4
 8008838:	f107 0310 	add.w	r3, r7, #16
 800883c:	4611      	mov	r1, r2
 800883e:	4618      	mov	r0, r3
 8008840:	f001 f94a 	bl	8009ad8 <xTaskCheckForTimeOut>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d124      	bne.n	8008894 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800884a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800884c:	f000 fb4f 	bl	8008eee <prvIsQueueEmpty>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d018      	beq.n	8008888 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008858:	3324      	adds	r3, #36	@ 0x24
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	4611      	mov	r1, r2
 800885e:	4618      	mov	r0, r3
 8008860:	f000 ffc0 	bl	80097e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008866:	f000 faf0 	bl	8008e4a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800886a:	f000 fdcf 	bl	800940c <xTaskResumeAll>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	f47f af69 	bne.w	8008748 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8008876:	4b18      	ldr	r3, [pc, #96]	@ (80088d8 <xQueueReceive+0x224>)
 8008878:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	e75f      	b.n	8008748 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8008888:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800888a:	f000 fade 	bl	8008e4a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800888e:	f000 fdbd 	bl	800940c <xTaskResumeAll>
 8008892:	e759      	b.n	8008748 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8008894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008896:	f000 fad8 	bl	8008e4a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800889a:	f000 fdb7 	bl	800940c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800889e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088a0:	f000 fb25 	bl	8008eee <prvIsQueueEmpty>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f43f af4e 	beq.w	8008748 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80088ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ae:	4618      	mov	r0, r3
 80088b0:	f004 fc66 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 80088b4:	4604      	mov	r4, r0
 80088b6:	2000      	movs	r0, #0
 80088b8:	f004 fc62 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 80088bc:	4602      	mov	r2, r0
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2101      	movs	r1, #1
 80088c2:	9100      	str	r1, [sp, #0]
 80088c4:	4621      	mov	r1, r4
 80088c6:	205c      	movs	r0, #92	@ 0x5c
 80088c8:	f003 fe96 	bl	800c5f8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80088cc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3734      	adds	r7, #52	@ 0x34
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd90      	pop	{r4, r7, pc}
 80088d6:	bf00      	nop
 80088d8:	e000ed04 	.word	0xe000ed04

080088dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80088dc:	b590      	push	{r4, r7, lr}
 80088de:	b091      	sub	sp, #68	@ 0x44
 80088e0:	af02      	add	r7, sp, #8
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80088e6:	2300      	movs	r3, #0
 80088e8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80088ee:	2300      	movs	r3, #0
 80088f0:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80088f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10b      	bne.n	8008910 <xQueueSemaphoreTake+0x34>
        __asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088fc:	f383 8811 	msr	BASEPRI, r3
 8008900:	f3bf 8f6f 	isb	sy
 8008904:	f3bf 8f4f 	dsb	sy
 8008908:	623b      	str	r3, [r7, #32]
    }
 800890a:	bf00      	nop
 800890c:	bf00      	nop
 800890e:	e7fd      	b.n	800890c <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8008910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00b      	beq.n	8008930 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8008918:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	61fb      	str	r3, [r7, #28]
    }
 800892a:	bf00      	nop
 800892c:	bf00      	nop
 800892e:	e7fd      	b.n	800892c <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008930:	f001 f9f8 	bl	8009d24 <xTaskGetSchedulerState>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <xQueueSemaphoreTake+0x64>
 800893a:	683b      	ldr	r3, [r7, #0]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d101      	bne.n	8008944 <xQueueSemaphoreTake+0x68>
 8008940:	2301      	movs	r3, #1
 8008942:	e000      	b.n	8008946 <xQueueSemaphoreTake+0x6a>
 8008944:	2300      	movs	r3, #0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10b      	bne.n	8008962 <xQueueSemaphoreTake+0x86>
        __asm volatile
 800894a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800894e:	f383 8811 	msr	BASEPRI, r3
 8008952:	f3bf 8f6f 	isb	sy
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	61bb      	str	r3, [r7, #24]
    }
 800895c:	bf00      	nop
 800895e:	bf00      	nop
 8008960:	e7fd      	b.n	800895e <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008962:	f002 fc23 	bl	800b1ac <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800896c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800896e:	2b00      	cmp	r3, #0
 8008970:	d034      	beq.n	80089dc <xQueueSemaphoreTake+0x100>
            {
                traceQUEUE_RECEIVE( pxQueue );
 8008972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008974:	4618      	mov	r0, r3
 8008976:	f004 fc03 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 800897a:	4604      	mov	r4, r0
 800897c:	2000      	movs	r0, #0
 800897e:	f004 fbff 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008982:	4602      	mov	r2, r0
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	2101      	movs	r1, #1
 8008988:	9100      	str	r1, [sp, #0]
 800898a:	4621      	mov	r1, r4
 800898c:	205c      	movs	r0, #92	@ 0x5c
 800898e:	f003 fe33 	bl	800c5f8 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008994:	1e5a      	subs	r2, r3, #1
 8008996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008998:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800899a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d104      	bne.n	80089ac <xQueueSemaphoreTake+0xd0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80089a2:	f001 fb8b 	bl	800a0bc <pvTaskIncrementMutexHeldCount>
 80089a6:	4602      	mov	r2, r0
 80089a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089aa:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d00f      	beq.n	80089d4 <xQueueSemaphoreTake+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b6:	3310      	adds	r3, #16
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 ffa7 	bl	800990c <xTaskRemoveFromEventList>
 80089be:	4603      	mov	r3, r0
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d007      	beq.n	80089d4 <xQueueSemaphoreTake+0xf8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80089c4:	4b64      	ldr	r3, [pc, #400]	@ (8008b58 <xQueueSemaphoreTake+0x27c>)
 80089c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80089ca:	601a      	str	r2, [r3, #0]
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80089d4:	f002 fc1c 	bl	800b210 <vPortExitCritical>
                return pdPASS;
 80089d8:	2301      	movs	r3, #1
 80089da:	e0b8      	b.n	8008b4e <xQueueSemaphoreTake+0x272>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d122      	bne.n	8008a28 <xQueueSemaphoreTake+0x14c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 80089e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00b      	beq.n	8008a00 <xQueueSemaphoreTake+0x124>
        __asm volatile
 80089e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ec:	f383 8811 	msr	BASEPRI, r3
 80089f0:	f3bf 8f6f 	isb	sy
 80089f4:	f3bf 8f4f 	dsb	sy
 80089f8:	617b      	str	r3, [r7, #20]
    }
 80089fa:	bf00      	nop
 80089fc:	bf00      	nop
 80089fe:	e7fd      	b.n	80089fc <xQueueSemaphoreTake+0x120>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8008a00:	f002 fc06 	bl	800b210 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a06:	4618      	mov	r0, r3
 8008a08:	f004 fbba 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	2000      	movs	r0, #0
 8008a10:	f004 fbb6 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008a14:	4602      	mov	r2, r0
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	2101      	movs	r1, #1
 8008a1a:	9100      	str	r1, [sp, #0]
 8008a1c:	4621      	mov	r1, r4
 8008a1e:	205c      	movs	r0, #92	@ 0x5c
 8008a20:	f003 fdea 	bl	800c5f8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8008a24:	2300      	movs	r3, #0
 8008a26:	e092      	b.n	8008b4e <xQueueSemaphoreTake+0x272>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d106      	bne.n	8008a3c <xQueueSemaphoreTake+0x160>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008a2e:	f107 030c 	add.w	r3, r7, #12
 8008a32:	4618      	mov	r0, r3
 8008a34:	f001 f83a 	bl	8009aac <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008a38:	2301      	movs	r3, #1
 8008a3a:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008a3c:	f002 fbe8 	bl	800b210 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008a40:	f000 fcd6 	bl	80093f0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008a44:	f002 fbb2 	bl	800b1ac <vPortEnterCritical>
 8008a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008a4e:	b25b      	sxtb	r3, r3
 8008a50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a54:	d103      	bne.n	8008a5e <xQueueSemaphoreTake+0x182>
 8008a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a58:	2200      	movs	r2, #0
 8008a5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a64:	b25b      	sxtb	r3, r3
 8008a66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a6a:	d103      	bne.n	8008a74 <xQueueSemaphoreTake+0x198>
 8008a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008a74:	f002 fbcc 	bl	800b210 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a78:	463a      	mov	r2, r7
 8008a7a:	f107 030c 	add.w	r3, r7, #12
 8008a7e:	4611      	mov	r1, r2
 8008a80:	4618      	mov	r0, r3
 8008a82:	f001 f829 	bl	8009ad8 <xTaskCheckForTimeOut>
 8008a86:	4603      	mov	r3, r0
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d132      	bne.n	8008af2 <xQueueSemaphoreTake+0x216>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008a8e:	f000 fa2e 	bl	8008eee <prvIsQueueEmpty>
 8008a92:	4603      	mov	r3, r0
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d026      	beq.n	8008ae6 <xQueueSemaphoreTake+0x20a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d109      	bne.n	8008ab4 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 8008aa0:	f002 fb84 	bl	800b1ac <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aa6:	689b      	ldr	r3, [r3, #8]
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f001 f959 	bl	8009d60 <xTaskPriorityInherit>
 8008aae:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 8008ab0:	f002 fbae 	bl	800b210 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ab6:	3324      	adds	r3, #36	@ 0x24
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	4611      	mov	r1, r2
 8008abc:	4618      	mov	r0, r3
 8008abe:	f000 fe91 	bl	80097e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008ac2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ac4:	f000 f9c1 	bl	8008e4a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008ac8:	f000 fca0 	bl	800940c <xTaskResumeAll>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	f47f af47 	bne.w	8008962 <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8008ad4:	4b20      	ldr	r3, [pc, #128]	@ (8008b58 <xQueueSemaphoreTake+0x27c>)
 8008ad6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ada:	601a      	str	r2, [r3, #0]
 8008adc:	f3bf 8f4f 	dsb	sy
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	e73d      	b.n	8008962 <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8008ae6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ae8:	f000 f9af 	bl	8008e4a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008aec:	f000 fc8e 	bl	800940c <xTaskResumeAll>
 8008af0:	e737      	b.n	8008962 <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8008af2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008af4:	f000 f9a9 	bl	8008e4a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008af8:	f000 fc88 	bl	800940c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008afc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008afe:	f000 f9f6 	bl	8008eee <prvIsQueueEmpty>
 8008b02:	4603      	mov	r3, r0
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	f43f af2c 	beq.w	8008962 <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8008b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d00d      	beq.n	8008b2c <xQueueSemaphoreTake+0x250>
                        {
                            taskENTER_CRITICAL();
 8008b10:	f002 fb4c 	bl	800b1ac <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008b14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008b16:	f000 f8f0 	bl	8008cfa <prvGetDisinheritPriorityAfterTimeout>
 8008b1a:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008b1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 fa18 	bl	8009f58 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 8008b28:	f002 fb72 	bl	800b210 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8008b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f004 fb26 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008b34:	4604      	mov	r4, r0
 8008b36:	2000      	movs	r0, #0
 8008b38:	f004 fb22 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008b3c:	4602      	mov	r2, r0
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	2101      	movs	r1, #1
 8008b42:	9100      	str	r1, [sp, #0]
 8008b44:	4621      	mov	r1, r4
 8008b46:	205c      	movs	r0, #92	@ 0x5c
 8008b48:	f003 fd56 	bl	800c5f8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8008b4c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	373c      	adds	r7, #60	@ 0x3c
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd90      	pop	{r4, r7, pc}
 8008b56:	bf00      	nop
 8008b58:	e000ed04 	.word	0xe000ed04

08008b5c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008b5c:	b590      	push	{r4, r7, lr}
 8008b5e:	b091      	sub	sp, #68	@ 0x44
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8008b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d10b      	bne.n	8008b8a <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8008b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b76:	f383 8811 	msr	BASEPRI, r3
 8008b7a:	f3bf 8f6f 	isb	sy
 8008b7e:	f3bf 8f4f 	dsb	sy
 8008b82:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8008b84:	bf00      	nop
 8008b86:	bf00      	nop
 8008b88:	e7fd      	b.n	8008b86 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d103      	bne.n	8008b98 <xQueueReceiveFromISR+0x3c>
 8008b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d101      	bne.n	8008b9c <xQueueReceiveFromISR+0x40>
 8008b98:	2301      	movs	r3, #1
 8008b9a:	e000      	b.n	8008b9e <xQueueReceiveFromISR+0x42>
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10b      	bne.n	8008bba <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8008ba2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba6:	f383 8811 	msr	BASEPRI, r3
 8008baa:	f3bf 8f6f 	isb	sy
 8008bae:	f3bf 8f4f 	dsb	sy
 8008bb2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8008bb4:	bf00      	nop
 8008bb6:	bf00      	nop
 8008bb8:	e7fd      	b.n	8008bb6 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bba:	f002 fbe7 	bl	800b38c <vPortValidateInterruptPriority>
        __asm volatile
 8008bbe:	f3ef 8211 	mrs	r2, BASEPRI
 8008bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bc6:	f383 8811 	msr	BASEPRI, r3
 8008bca:	f3bf 8f6f 	isb	sy
 8008bce:	f3bf 8f4f 	dsb	sy
 8008bd2:	623a      	str	r2, [r7, #32]
 8008bd4:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8008bd6:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008bd8:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bde:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d04e      	beq.n	8008c84 <xQueueReceiveFromISR+0x128>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8008be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008be8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 8008bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f004 fac4 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008bf8:	4604      	mov	r4, r0
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f004 fabf 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008c02:	4602      	mov	r2, r0
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4621      	mov	r1, r4
 8008c08:	2062      	movs	r0, #98	@ 0x62
 8008c0a:	f003 fc7f 	bl	800c50c <SEGGER_SYSVIEW_RecordU32x3>

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008c0e:	68b9      	ldr	r1, [r7, #8]
 8008c10:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008c12:	f000 f8f4 	bl	8008dfe <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c18:	1e5a      	subs	r2, r3, #1
 8008c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c1c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8008c1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008c22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c26:	d112      	bne.n	8008c4e <xQueueReceiveFromISR+0xf2>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c2a:	691b      	ldr	r3, [r3, #16]
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d026      	beq.n	8008c7e <xQueueReceiveFromISR+0x122>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c32:	3310      	adds	r3, #16
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 fe69 	bl	800990c <xTaskRemoveFromEventList>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d01e      	beq.n	8008c7e <xQueueReceiveFromISR+0x122>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d01b      	beq.n	8008c7e <xQueueReceiveFromISR+0x122>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	601a      	str	r2, [r3, #0]
 8008c4c:	e017      	b.n	8008c7e <xQueueReceiveFromISR+0x122>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8008c4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8008c52:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c54:	d10b      	bne.n	8008c6e <xQueueReceiveFromISR+0x112>
        __asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	61bb      	str	r3, [r7, #24]
    }
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <xQueueReceiveFromISR+0x10e>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8008c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c72:	3301      	adds	r3, #1
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	b25a      	sxtb	r2, r3
 8008c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008c82:	e010      	b.n	8008ca6 <xQueueReceiveFromISR+0x14a>
        }
        else
        {
            xReturn = pdFAIL;
 8008c84:	2300      	movs	r3, #0
 8008c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8008c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f004 fa78 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008c90:	4604      	mov	r4, r0
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	4618      	mov	r0, r3
 8008c96:	f004 fa73 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	2062      	movs	r0, #98	@ 0x62
 8008ca2:	f003 fc33 	bl	800c50c <SEGGER_SYSVIEW_RecordU32x3>
 8008ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ca8:	617b      	str	r3, [r7, #20]
        __asm volatile
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	f383 8811 	msr	BASEPRI, r3
    }
 8008cb0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8008cb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	3744      	adds	r7, #68	@ 0x44
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	bd90      	pop	{r4, r7, pc}

08008cbc <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d10b      	bne.n	8008ce2 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8008cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cce:	f383 8811 	msr	BASEPRI, r3
 8008cd2:	f3bf 8f6f 	isb	sy
 8008cd6:	f3bf 8f4f 	dsb	sy
 8008cda:	60bb      	str	r3, [r7, #8]
    }
 8008cdc:	bf00      	nop
 8008cde:	bf00      	nop
 8008ce0:	e7fd      	b.n	8008cde <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8008ce2:	f002 fa63 	bl	800b1ac <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cea:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8008cec:	f002 fa90 	bl	800b210 <vPortExitCritical>

    return uxReturn;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	3710      	adds	r7, #16
 8008cf6:	46bd      	mov	sp, r7
 8008cf8:	bd80      	pop	{r7, pc}

08008cfa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8008cfa:	b480      	push	{r7}
 8008cfc:	b085      	sub	sp, #20
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d006      	beq.n	8008d18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f1c3 0305 	rsb	r3, r3, #5
 8008d14:	60fb      	str	r3, [r7, #12]
 8008d16:	e001      	b.n	8008d1c <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
    }
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b086      	sub	sp, #24
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008d36:	2300      	movs	r3, #0
 8008d38:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d10d      	bne.n	8008d64 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d14d      	bne.n	8008dec <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	689b      	ldr	r3, [r3, #8]
 8008d54:	4618      	mov	r0, r3
 8008d56:	f001 f87d 	bl	8009e54 <xTaskPriorityDisinherit>
 8008d5a:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	609a      	str	r2, [r3, #8]
 8008d62:	e043      	b.n	8008dec <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d119      	bne.n	8008d9e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6858      	ldr	r0, [r3, #4]
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d72:	461a      	mov	r2, r3
 8008d74:	68b9      	ldr	r1, [r7, #8]
 8008d76:	f004 fbb9 	bl	800d4ec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d82:	441a      	add	r2, r3
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	689b      	ldr	r3, [r3, #8]
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d32b      	bcc.n	8008dec <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681a      	ldr	r2, [r3, #0]
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	605a      	str	r2, [r3, #4]
 8008d9c:	e026      	b.n	8008dec <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	68d8      	ldr	r0, [r3, #12]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008da6:	461a      	mov	r2, r3
 8008da8:	68b9      	ldr	r1, [r7, #8]
 8008daa:	f004 fb9f 	bl	800d4ec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	68da      	ldr	r2, [r3, #12]
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db6:	425b      	negs	r3, r3
 8008db8:	441a      	add	r2, r3
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	68da      	ldr	r2, [r3, #12]
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d207      	bcs.n	8008dda <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	689a      	ldr	r2, [r3, #8]
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dd2:	425b      	negs	r3, r3
 8008dd4:	441a      	add	r2, r3
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d105      	bne.n	8008dec <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008de0:	693b      	ldr	r3, [r7, #16]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d002      	beq.n	8008dec <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008dec:	693b      	ldr	r3, [r7, #16]
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8008df4:	697b      	ldr	r3, [r7, #20]
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3718      	adds	r7, #24
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}

08008dfe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b082      	sub	sp, #8
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	6078      	str	r0, [r7, #4]
 8008e06:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d018      	beq.n	8008e42 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e18:	441a      	add	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68da      	ldr	r2, [r3, #12]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	689b      	ldr	r3, [r3, #8]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d303      	bcc.n	8008e32 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681a      	ldr	r2, [r3, #0]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68d9      	ldr	r1, [r3, #12]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	6838      	ldr	r0, [r7, #0]
 8008e3e:	f004 fb55 	bl	800d4ec <memcpy>
    }
}
 8008e42:	bf00      	nop
 8008e44:	3708      	adds	r7, #8
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b084      	sub	sp, #16
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008e52:	f002 f9ab 	bl	800b1ac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e5c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e5e:	e011      	b.n	8008e84 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d012      	beq.n	8008e8e <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3324      	adds	r3, #36	@ 0x24
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	f000 fd4d 	bl	800990c <xTaskRemoveFromEventList>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d001      	beq.n	8008e7c <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8008e78:	f000 fe96 	bl	8009ba8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	3b01      	subs	r3, #1
 8008e80:	b2db      	uxtb	r3, r3
 8008e82:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	dce9      	bgt.n	8008e60 <prvUnlockQueue+0x16>
 8008e8c:	e000      	b.n	8008e90 <prvUnlockQueue+0x46>
                        break;
 8008e8e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	22ff      	movs	r2, #255	@ 0xff
 8008e94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8008e98:	f002 f9ba 	bl	800b210 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8008e9c:	f002 f986 	bl	800b1ac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008ea6:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ea8:	e011      	b.n	8008ece <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d012      	beq.n	8008ed8 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	3310      	adds	r3, #16
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fd28 	bl	800990c <xTaskRemoveFromEventList>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d001      	beq.n	8008ec6 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008ec2:	f000 fe71 	bl	8009ba8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	b2db      	uxtb	r3, r3
 8008ecc:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008ece:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	dce9      	bgt.n	8008eaa <prvUnlockQueue+0x60>
 8008ed6:	e000      	b.n	8008eda <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8008ed8:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	22ff      	movs	r2, #255	@ 0xff
 8008ede:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8008ee2:	f002 f995 	bl	800b210 <vPortExitCritical>
}
 8008ee6:	bf00      	nop
 8008ee8:	3710      	adds	r7, #16
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b084      	sub	sp, #16
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008ef6:	f002 f959 	bl	800b1ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d102      	bne.n	8008f08 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8008f02:	2301      	movs	r3, #1
 8008f04:	60fb      	str	r3, [r7, #12]
 8008f06:	e001      	b.n	8008f0c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008f0c:	f002 f980 	bl	800b210 <vPortExitCritical>

    return xReturn;
 8008f10:	68fb      	ldr	r3, [r7, #12]
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3710      	adds	r7, #16
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	b084      	sub	sp, #16
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008f22:	f002 f943 	bl	800b1ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f2e:	429a      	cmp	r2, r3
 8008f30:	d102      	bne.n	8008f38 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8008f32:	2301      	movs	r3, #1
 8008f34:	60fb      	str	r3, [r7, #12]
 8008f36:	e001      	b.n	8008f3c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008f3c:	f002 f968 	bl	800b210 <vPortExitCritical>

    return xReturn;
 8008f40:	68fb      	ldr	r3, [r7, #12]
}
 8008f42:	4618      	mov	r0, r3
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}

08008f4a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8008f4a:	b480      	push	{r7}
 8008f4c:	b087      	sub	sp, #28
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d10b      	bne.n	8008f74 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8008f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f60:	f383 8811 	msr	BASEPRI, r3
 8008f64:	f3bf 8f6f 	isb	sy
 8008f68:	f3bf 8f4f 	dsb	sy
 8008f6c:	60fb      	str	r3, [r7, #12]
    }
 8008f6e:	bf00      	nop
 8008f70:	bf00      	nop
 8008f72:	e7fd      	b.n	8008f70 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f78:	693b      	ldr	r3, [r7, #16]
 8008f7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d102      	bne.n	8008f86 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8008f80:	2301      	movs	r3, #1
 8008f82:	617b      	str	r3, [r7, #20]
 8008f84:	e001      	b.n	8008f8a <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8008f86:	2300      	movs	r3, #0
 8008f88:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8008f8a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	371c      	adds	r7, #28
 8008f90:	46bd      	mov	sp, r7
 8008f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f96:	4770      	bx	lr

08008f98 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	e01e      	b.n	8008fe6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008fa8:	4a13      	ldr	r2, [pc, #76]	@ (8008ff8 <vQueueAddToRegistry+0x60>)
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d115      	bne.n	8008fe0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008fb4:	4910      	ldr	r1, [pc, #64]	@ (8008ff8 <vQueueAddToRegistry+0x60>)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8008fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8008ff8 <vQueueAddToRegistry+0x60>)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	4413      	add	r3, r2
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f004 f8d7 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 8008fd2:	4601      	mov	r1, r0
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	2071      	movs	r0, #113	@ 0x71
 8008fda:	f003 fa3d 	bl	800c458 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8008fde:	e006      	b.n	8008fee <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	3301      	adds	r3, #1
 8008fe4:	60fb      	str	r3, [r7, #12]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	2b07      	cmp	r3, #7
 8008fea:	d9dd      	bls.n	8008fa8 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8008fec:	bf00      	nop
 8008fee:	bf00      	nop
 8008ff0:	3710      	adds	r7, #16
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	bf00      	nop
 8008ff8:	20000394 	.word	0x20000394

08008ffc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0
 8009002:	60f8      	str	r0, [r7, #12]
 8009004:	60b9      	str	r1, [r7, #8]
 8009006:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800900c:	f002 f8ce 	bl	800b1ac <vPortEnterCritical>
 8009010:	697b      	ldr	r3, [r7, #20]
 8009012:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009016:	b25b      	sxtb	r3, r3
 8009018:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800901c:	d103      	bne.n	8009026 <vQueueWaitForMessageRestricted+0x2a>
 800901e:	697b      	ldr	r3, [r7, #20]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800902c:	b25b      	sxtb	r3, r3
 800902e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009032:	d103      	bne.n	800903c <vQueueWaitForMessageRestricted+0x40>
 8009034:	697b      	ldr	r3, [r7, #20]
 8009036:	2200      	movs	r2, #0
 8009038:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800903c:	f002 f8e8 	bl	800b210 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009044:	2b00      	cmp	r3, #0
 8009046:	d106      	bne.n	8009056 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	3324      	adds	r3, #36	@ 0x24
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	68b9      	ldr	r1, [r7, #8]
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fc2b 	bl	80098ac <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8009056:	6978      	ldr	r0, [r7, #20]
 8009058:	f7ff fef7 	bl	8008e4a <prvUnlockQueue>
    }
 800905c:	bf00      	nop
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8009064:	b580      	push	{r7, lr}
 8009066:	b08c      	sub	sp, #48	@ 0x30
 8009068:	af04      	add	r7, sp, #16
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	60b9      	str	r1, [r7, #8]
 800906e:	603b      	str	r3, [r7, #0]
 8009070:	4613      	mov	r3, r2
 8009072:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009074:	88fb      	ldrh	r3, [r7, #6]
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4618      	mov	r0, r3
 800907a:	f002 f9c9 	bl	800b410 <pvPortMalloc>
 800907e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d00e      	beq.n	80090a4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009086:	2058      	movs	r0, #88	@ 0x58
 8009088:	f002 f9c2 	bl	800b410 <pvPortMalloc>
 800908c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8009094:	69fb      	ldr	r3, [r7, #28]
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	631a      	str	r2, [r3, #48]	@ 0x30
 800909a:	e005      	b.n	80090a8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800909c:	6978      	ldr	r0, [r7, #20]
 800909e:	f002 fa99 	bl	800b5d4 <vPortFree>
 80090a2:	e001      	b.n	80090a8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80090a4:	2300      	movs	r3, #0
 80090a6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d013      	beq.n	80090d6 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090ae:	88fa      	ldrh	r2, [r7, #6]
 80090b0:	2300      	movs	r3, #0
 80090b2:	9303      	str	r3, [sp, #12]
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	9302      	str	r3, [sp, #8]
 80090b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80090ba:	9301      	str	r3, [sp, #4]
 80090bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090be:	9300      	str	r3, [sp, #0]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	68b9      	ldr	r1, [r7, #8]
 80090c4:	68f8      	ldr	r0, [r7, #12]
 80090c6:	f000 f80e 	bl	80090e6 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80090ca:	69f8      	ldr	r0, [r7, #28]
 80090cc:	f000 f8a2 	bl	8009214 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80090d0:	2301      	movs	r3, #1
 80090d2:	61bb      	str	r3, [r7, #24]
 80090d4:	e002      	b.n	80090dc <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80090da:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80090dc:	69bb      	ldr	r3, [r7, #24]
    }
 80090de:	4618      	mov	r0, r3
 80090e0:	3720      	adds	r7, #32
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b088      	sub	sp, #32
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	607a      	str	r2, [r7, #4]
 80090f2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090f6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	461a      	mov	r2, r3
 80090fe:	21a5      	movs	r1, #165	@ 0xa5
 8009100:	f004 f9c0 	bl	800d484 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009106:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800910e:	3b01      	subs	r3, #1
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009116:	69bb      	ldr	r3, [r7, #24]
 8009118:	f023 0307 	bic.w	r3, r3, #7
 800911c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800911e:	69bb      	ldr	r3, [r7, #24]
 8009120:	f003 0307 	and.w	r3, r3, #7
 8009124:	2b00      	cmp	r3, #0
 8009126:	d00b      	beq.n	8009140 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8009128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800912c:	f383 8811 	msr	BASEPRI, r3
 8009130:	f3bf 8f6f 	isb	sy
 8009134:	f3bf 8f4f 	dsb	sy
 8009138:	617b      	str	r3, [r7, #20]
    }
 800913a:	bf00      	nop
 800913c:	bf00      	nop
 800913e:	e7fd      	b.n	800913c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d01f      	beq.n	8009186 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009146:	2300      	movs	r3, #0
 8009148:	61fb      	str	r3, [r7, #28]
 800914a:	e012      	b.n	8009172 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800914c:	68ba      	ldr	r2, [r7, #8]
 800914e:	69fb      	ldr	r3, [r7, #28]
 8009150:	4413      	add	r3, r2
 8009152:	7819      	ldrb	r1, [r3, #0]
 8009154:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009156:	69fb      	ldr	r3, [r7, #28]
 8009158:	4413      	add	r3, r2
 800915a:	3334      	adds	r3, #52	@ 0x34
 800915c:	460a      	mov	r2, r1
 800915e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009160:	68ba      	ldr	r2, [r7, #8]
 8009162:	69fb      	ldr	r3, [r7, #28]
 8009164:	4413      	add	r3, r2
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d006      	beq.n	800917a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	3301      	adds	r3, #1
 8009170:	61fb      	str	r3, [r7, #28]
 8009172:	69fb      	ldr	r3, [r7, #28]
 8009174:	2b09      	cmp	r3, #9
 8009176:	d9e9      	bls.n	800914c <prvInitialiseNewTask+0x66>
 8009178:	e000      	b.n	800917c <prvInitialiseNewTask+0x96>
            {
                break;
 800917a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800917c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800917e:	2200      	movs	r2, #0
 8009180:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009184:	e003      	b.n	800918e <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009188:	2200      	movs	r2, #0
 800918a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800918e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009190:	2b04      	cmp	r3, #4
 8009192:	d901      	bls.n	8009198 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009194:	2304      	movs	r3, #4
 8009196:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800919a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800919c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800919e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091a2:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80091a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a6:	2200      	movs	r2, #0
 80091a8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80091aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091ac:	3304      	adds	r3, #4
 80091ae:	4618      	mov	r0, r3
 80091b0:	f7fe ff0a 	bl	8007fc8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80091b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b6:	3318      	adds	r3, #24
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7fe ff05 	bl	8007fc8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091c2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c6:	f1c3 0205 	rsb	r2, r3, #5
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80091ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091d2:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80091d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091d6:	3350      	adds	r3, #80	@ 0x50
 80091d8:	2204      	movs	r2, #4
 80091da:	2100      	movs	r1, #0
 80091dc:	4618      	mov	r0, r3
 80091de:	f004 f951 	bl	800d484 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80091e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091e4:	3354      	adds	r3, #84	@ 0x54
 80091e6:	2201      	movs	r2, #1
 80091e8:	2100      	movs	r1, #0
 80091ea:	4618      	mov	r0, r3
 80091ec:	f004 f94a 	bl	800d484 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091f0:	683a      	ldr	r2, [r7, #0]
 80091f2:	68f9      	ldr	r1, [r7, #12]
 80091f4:	69b8      	ldr	r0, [r7, #24]
 80091f6:	f001 fe25 	bl	800ae44 <pxPortInitialiseStack>
 80091fa:	4602      	mov	r2, r0
 80091fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091fe:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800920a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800920c:	bf00      	nop
 800920e:	3720      	adds	r7, #32
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}

08009214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009214:	b5b0      	push	{r4, r5, r7, lr}
 8009216:	b084      	sub	sp, #16
 8009218:	af02      	add	r7, sp, #8
 800921a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800921c:	f001 ffc6 	bl	800b1ac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009220:	4b3b      	ldr	r3, [pc, #236]	@ (8009310 <prvAddNewTaskToReadyList+0xfc>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	3301      	adds	r3, #1
 8009226:	4a3a      	ldr	r2, [pc, #232]	@ (8009310 <prvAddNewTaskToReadyList+0xfc>)
 8009228:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800922a:	4b3a      	ldr	r3, [pc, #232]	@ (8009314 <prvAddNewTaskToReadyList+0x100>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	2b00      	cmp	r3, #0
 8009230:	d109      	bne.n	8009246 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009232:	4a38      	ldr	r2, [pc, #224]	@ (8009314 <prvAddNewTaskToReadyList+0x100>)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009238:	4b35      	ldr	r3, [pc, #212]	@ (8009310 <prvAddNewTaskToReadyList+0xfc>)
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d110      	bne.n	8009262 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009240:	f000 fcd6 	bl	8009bf0 <prvInitialiseTaskLists>
 8009244:	e00d      	b.n	8009262 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009246:	4b34      	ldr	r3, [pc, #208]	@ (8009318 <prvAddNewTaskToReadyList+0x104>)
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d109      	bne.n	8009262 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800924e:	4b31      	ldr	r3, [pc, #196]	@ (8009314 <prvAddNewTaskToReadyList+0x100>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009258:	429a      	cmp	r2, r3
 800925a:	d802      	bhi.n	8009262 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800925c:	4a2d      	ldr	r2, [pc, #180]	@ (8009314 <prvAddNewTaskToReadyList+0x100>)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009262:	4b2e      	ldr	r3, [pc, #184]	@ (800931c <prvAddNewTaskToReadyList+0x108>)
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	3301      	adds	r3, #1
 8009268:	4a2c      	ldr	r2, [pc, #176]	@ (800931c <prvAddNewTaskToReadyList+0x108>)
 800926a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800926c:	4b2b      	ldr	r3, [pc, #172]	@ (800931c <prvAddNewTaskToReadyList+0x108>)
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d016      	beq.n	80092a8 <prvAddNewTaskToReadyList+0x94>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4618      	mov	r0, r3
 800927e:	f003 fe59 	bl	800cf34 <SEGGER_SYSVIEW_OnTaskCreate>
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009292:	461d      	mov	r5, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	461c      	mov	r4, r3
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800929e:	1ae3      	subs	r3, r4, r3
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	462b      	mov	r3, r5
 80092a4:	f002 fb66 	bl	800b974 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f003 fec6 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092b4:	2201      	movs	r2, #1
 80092b6:	409a      	lsls	r2, r3
 80092b8:	4b19      	ldr	r3, [pc, #100]	@ (8009320 <prvAddNewTaskToReadyList+0x10c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	4313      	orrs	r3, r2
 80092be:	4a18      	ldr	r2, [pc, #96]	@ (8009320 <prvAddNewTaskToReadyList+0x10c>)
 80092c0:	6013      	str	r3, [r2, #0]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c6:	4613      	mov	r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	4413      	add	r3, r2
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4a15      	ldr	r2, [pc, #84]	@ (8009324 <prvAddNewTaskToReadyList+0x110>)
 80092d0:	441a      	add	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	3304      	adds	r3, #4
 80092d6:	4619      	mov	r1, r3
 80092d8:	4610      	mov	r0, r2
 80092da:	f7fe fe82 	bl	8007fe2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80092de:	f001 ff97 	bl	800b210 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80092e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009318 <prvAddNewTaskToReadyList+0x104>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00e      	beq.n	8009308 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092ea:	4b0a      	ldr	r3, [pc, #40]	@ (8009314 <prvAddNewTaskToReadyList+0x100>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d207      	bcs.n	8009308 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80092f8:	4b0b      	ldr	r3, [pc, #44]	@ (8009328 <prvAddNewTaskToReadyList+0x114>)
 80092fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092fe:	601a      	str	r2, [r3, #0]
 8009300:	f3bf 8f4f 	dsb	sy
 8009304:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009308:	bf00      	nop
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bdb0      	pop	{r4, r5, r7, pc}
 8009310:	200004ac 	.word	0x200004ac
 8009314:	200003d4 	.word	0x200003d4
 8009318:	200004b8 	.word	0x200004b8
 800931c:	200004c8 	.word	0x200004c8
 8009320:	200004b4 	.word	0x200004b4
 8009324:	200003d8 	.word	0x200003d8
 8009328:	e000ed04 	.word	0xe000ed04

0800932c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b086      	sub	sp, #24
 8009330:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8009332:	4b27      	ldr	r3, [pc, #156]	@ (80093d0 <vTaskStartScheduler+0xa4>)
 8009334:	9301      	str	r3, [sp, #4]
 8009336:	2300      	movs	r3, #0
 8009338:	9300      	str	r3, [sp, #0]
 800933a:	2300      	movs	r3, #0
 800933c:	2282      	movs	r2, #130	@ 0x82
 800933e:	4925      	ldr	r1, [pc, #148]	@ (80093d4 <vTaskStartScheduler+0xa8>)
 8009340:	4825      	ldr	r0, [pc, #148]	@ (80093d8 <vTaskStartScheduler+0xac>)
 8009342:	f7ff fe8f 	bl	8009064 <xTaskCreate>
 8009346:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d102      	bne.n	8009354 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800934e:	f001 f9db 	bl	800a708 <xTimerCreateTimerTask>
 8009352:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d124      	bne.n	80093a4 <vTaskStartScheduler+0x78>
        __asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	60bb      	str	r3, [r7, #8]
    }
 800936c:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800936e:	4b1b      	ldr	r3, [pc, #108]	@ (80093dc <vTaskStartScheduler+0xb0>)
 8009370:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009374:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009376:	4b1a      	ldr	r3, [pc, #104]	@ (80093e0 <vTaskStartScheduler+0xb4>)
 8009378:	2201      	movs	r2, #1
 800937a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800937c:	4b19      	ldr	r3, [pc, #100]	@ (80093e4 <vTaskStartScheduler+0xb8>)
 800937e:	2200      	movs	r2, #0
 8009380:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8009382:	4b19      	ldr	r3, [pc, #100]	@ (80093e8 <vTaskStartScheduler+0xbc>)
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	4b12      	ldr	r3, [pc, #72]	@ (80093d0 <vTaskStartScheduler+0xa4>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	429a      	cmp	r2, r3
 800938c:	d102      	bne.n	8009394 <vTaskStartScheduler+0x68>
 800938e:	f003 fdb5 	bl	800cefc <SEGGER_SYSVIEW_OnIdle>
 8009392:	e004      	b.n	800939e <vTaskStartScheduler+0x72>
 8009394:	4b14      	ldr	r3, [pc, #80]	@ (80093e8 <vTaskStartScheduler+0xbc>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	4618      	mov	r0, r3
 800939a:	f003 fe0d 	bl	800cfb8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800939e:	f001 fde1 	bl	800af64 <xPortStartScheduler>
 80093a2:	e00f      	b.n	80093c4 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093aa:	d10b      	bne.n	80093c4 <vTaskStartScheduler+0x98>
        __asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	607b      	str	r3, [r7, #4]
    }
 80093be:	bf00      	nop
 80093c0:	bf00      	nop
 80093c2:	e7fd      	b.n	80093c0 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80093c4:	4b09      	ldr	r3, [pc, #36]	@ (80093ec <vTaskStartScheduler+0xc0>)
 80093c6:	681b      	ldr	r3, [r3, #0]
}
 80093c8:	bf00      	nop
 80093ca:	3710      	adds	r7, #16
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}
 80093d0:	200004d0 	.word	0x200004d0
 80093d4:	0800e8c0 	.word	0x0800e8c0
 80093d8:	08009bc1 	.word	0x08009bc1
 80093dc:	200004cc 	.word	0x200004cc
 80093e0:	200004b8 	.word	0x200004b8
 80093e4:	200004b0 	.word	0x200004b0
 80093e8:	200003d4 	.word	0x200003d4
 80093ec:	2000007c 	.word	0x2000007c

080093f0 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093f0:	b480      	push	{r7}
 80093f2:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80093f4:	4b04      	ldr	r3, [pc, #16]	@ (8009408 <vTaskSuspendAll+0x18>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	4a03      	ldr	r2, [pc, #12]	@ (8009408 <vTaskSuspendAll+0x18>)
 80093fc:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80093fe:	bf00      	nop
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	200004d4 	.word	0x200004d4

0800940c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b084      	sub	sp, #16
 8009410:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009412:	2300      	movs	r3, #0
 8009414:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009416:	2300      	movs	r3, #0
 8009418:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800941a:	4b44      	ldr	r3, [pc, #272]	@ (800952c <xTaskResumeAll+0x120>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d10b      	bne.n	800943a <xTaskResumeAll+0x2e>
        __asm volatile
 8009422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009426:	f383 8811 	msr	BASEPRI, r3
 800942a:	f3bf 8f6f 	isb	sy
 800942e:	f3bf 8f4f 	dsb	sy
 8009432:	603b      	str	r3, [r7, #0]
    }
 8009434:	bf00      	nop
 8009436:	bf00      	nop
 8009438:	e7fd      	b.n	8009436 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800943a:	f001 feb7 	bl	800b1ac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800943e:	4b3b      	ldr	r3, [pc, #236]	@ (800952c <xTaskResumeAll+0x120>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	3b01      	subs	r3, #1
 8009444:	4a39      	ldr	r2, [pc, #228]	@ (800952c <xTaskResumeAll+0x120>)
 8009446:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009448:	4b38      	ldr	r3, [pc, #224]	@ (800952c <xTaskResumeAll+0x120>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d165      	bne.n	800951c <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009450:	4b37      	ldr	r3, [pc, #220]	@ (8009530 <xTaskResumeAll+0x124>)
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d061      	beq.n	800951c <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009458:	e032      	b.n	80094c0 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800945a:	4b36      	ldr	r3, [pc, #216]	@ (8009534 <xTaskResumeAll+0x128>)
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3318      	adds	r3, #24
 8009466:	4618      	mov	r0, r3
 8009468:	f7fe fe18 	bl	800809c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	3304      	adds	r3, #4
 8009470:	4618      	mov	r0, r3
 8009472:	f7fe fe13 	bl	800809c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4618      	mov	r0, r3
 800947a:	f003 fddf 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009482:	2201      	movs	r2, #1
 8009484:	409a      	lsls	r2, r3
 8009486:	4b2c      	ldr	r3, [pc, #176]	@ (8009538 <xTaskResumeAll+0x12c>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4313      	orrs	r3, r2
 800948c:	4a2a      	ldr	r2, [pc, #168]	@ (8009538 <xTaskResumeAll+0x12c>)
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4a27      	ldr	r2, [pc, #156]	@ (800953c <xTaskResumeAll+0x130>)
 800949e:	441a      	add	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4619      	mov	r1, r3
 80094a6:	4610      	mov	r0, r2
 80094a8:	f7fe fd9b 	bl	8007fe2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b0:	4b23      	ldr	r3, [pc, #140]	@ (8009540 <xTaskResumeAll+0x134>)
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d302      	bcc.n	80094c0 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 80094ba:	4b22      	ldr	r3, [pc, #136]	@ (8009544 <xTaskResumeAll+0x138>)
 80094bc:	2201      	movs	r2, #1
 80094be:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094c0:	4b1c      	ldr	r3, [pc, #112]	@ (8009534 <xTaskResumeAll+0x128>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d1c8      	bne.n	800945a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d001      	beq.n	80094d2 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80094ce:	f000 fc0d 	bl	8009cec <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094d2:	4b1d      	ldr	r3, [pc, #116]	@ (8009548 <xTaskResumeAll+0x13c>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d010      	beq.n	8009500 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80094de:	f000 f859 	bl	8009594 <xTaskIncrementTick>
 80094e2:	4603      	mov	r3, r0
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d002      	beq.n	80094ee <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 80094e8:	4b16      	ldr	r3, [pc, #88]	@ (8009544 <xTaskResumeAll+0x138>)
 80094ea:	2201      	movs	r2, #1
 80094ec:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	3b01      	subs	r3, #1
 80094f2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d1f1      	bne.n	80094de <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80094fa:	4b13      	ldr	r3, [pc, #76]	@ (8009548 <xTaskResumeAll+0x13c>)
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009500:	4b10      	ldr	r3, [pc, #64]	@ (8009544 <xTaskResumeAll+0x138>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d009      	beq.n	800951c <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8009508:	2301      	movs	r3, #1
 800950a:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800950c:	4b0f      	ldr	r3, [pc, #60]	@ (800954c <xTaskResumeAll+0x140>)
 800950e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009512:	601a      	str	r2, [r3, #0]
 8009514:	f3bf 8f4f 	dsb	sy
 8009518:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800951c:	f001 fe78 	bl	800b210 <vPortExitCritical>

    return xAlreadyYielded;
 8009520:	68bb      	ldr	r3, [r7, #8]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	200004d4 	.word	0x200004d4
 8009530:	200004ac 	.word	0x200004ac
 8009534:	2000046c 	.word	0x2000046c
 8009538:	200004b4 	.word	0x200004b4
 800953c:	200003d8 	.word	0x200003d8
 8009540:	200003d4 	.word	0x200003d4
 8009544:	200004c0 	.word	0x200004c0
 8009548:	200004bc 	.word	0x200004bc
 800954c:	e000ed04 	.word	0xe000ed04

08009550 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009550:	b480      	push	{r7}
 8009552:	b083      	sub	sp, #12
 8009554:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009556:	4b05      	ldr	r3, [pc, #20]	@ (800956c <xTaskGetTickCount+0x1c>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800955c:	687b      	ldr	r3, [r7, #4]
}
 800955e:	4618      	mov	r0, r3
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	200004b0 	.word	0x200004b0

08009570 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b082      	sub	sp, #8
 8009574:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009576:	f001 ff09 	bl	800b38c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800957a:	2300      	movs	r3, #0
 800957c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800957e:	4b04      	ldr	r3, [pc, #16]	@ (8009590 <xTaskGetTickCountFromISR+0x20>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009584:	683b      	ldr	r3, [r7, #0]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	200004b0 	.word	0x200004b0

08009594 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800959a:	2300      	movs	r3, #0
 800959c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800959e:	4b51      	ldr	r3, [pc, #324]	@ (80096e4 <xTaskIncrementTick+0x150>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 8093 	bne.w	80096ce <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095a8:	4b4f      	ldr	r3, [pc, #316]	@ (80096e8 <xTaskIncrementTick+0x154>)
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	3301      	adds	r3, #1
 80095ae:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80095b0:	4a4d      	ldr	r2, [pc, #308]	@ (80096e8 <xTaskIncrementTick+0x154>)
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d121      	bne.n	8009600 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80095bc:	4b4b      	ldr	r3, [pc, #300]	@ (80096ec <xTaskIncrementTick+0x158>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d00b      	beq.n	80095de <xTaskIncrementTick+0x4a>
        __asm volatile
 80095c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ca:	f383 8811 	msr	BASEPRI, r3
 80095ce:	f3bf 8f6f 	isb	sy
 80095d2:	f3bf 8f4f 	dsb	sy
 80095d6:	603b      	str	r3, [r7, #0]
    }
 80095d8:	bf00      	nop
 80095da:	bf00      	nop
 80095dc:	e7fd      	b.n	80095da <xTaskIncrementTick+0x46>
 80095de:	4b43      	ldr	r3, [pc, #268]	@ (80096ec <xTaskIncrementTick+0x158>)
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	60fb      	str	r3, [r7, #12]
 80095e4:	4b42      	ldr	r3, [pc, #264]	@ (80096f0 <xTaskIncrementTick+0x15c>)
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a40      	ldr	r2, [pc, #256]	@ (80096ec <xTaskIncrementTick+0x158>)
 80095ea:	6013      	str	r3, [r2, #0]
 80095ec:	4a40      	ldr	r2, [pc, #256]	@ (80096f0 <xTaskIncrementTick+0x15c>)
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	6013      	str	r3, [r2, #0]
 80095f2:	4b40      	ldr	r3, [pc, #256]	@ (80096f4 <xTaskIncrementTick+0x160>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	3301      	adds	r3, #1
 80095f8:	4a3e      	ldr	r2, [pc, #248]	@ (80096f4 <xTaskIncrementTick+0x160>)
 80095fa:	6013      	str	r3, [r2, #0]
 80095fc:	f000 fb76 	bl	8009cec <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009600:	4b3d      	ldr	r3, [pc, #244]	@ (80096f8 <xTaskIncrementTick+0x164>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	693a      	ldr	r2, [r7, #16]
 8009606:	429a      	cmp	r2, r3
 8009608:	d34c      	bcc.n	80096a4 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800960a:	4b38      	ldr	r3, [pc, #224]	@ (80096ec <xTaskIncrementTick+0x158>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d104      	bne.n	800961e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009614:	4b38      	ldr	r3, [pc, #224]	@ (80096f8 <xTaskIncrementTick+0x164>)
 8009616:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800961a:	601a      	str	r2, [r3, #0]
                    break;
 800961c:	e042      	b.n	80096a4 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800961e:	4b33      	ldr	r3, [pc, #204]	@ (80096ec <xTaskIncrementTick+0x158>)
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	429a      	cmp	r2, r3
 8009634:	d203      	bcs.n	800963e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009636:	4a30      	ldr	r2, [pc, #192]	@ (80096f8 <xTaskIncrementTick+0x164>)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800963c:	e032      	b.n	80096a4 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800963e:	68bb      	ldr	r3, [r7, #8]
 8009640:	3304      	adds	r3, #4
 8009642:	4618      	mov	r0, r3
 8009644:	f7fe fd2a 	bl	800809c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009648:	68bb      	ldr	r3, [r7, #8]
 800964a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800964c:	2b00      	cmp	r3, #0
 800964e:	d004      	beq.n	800965a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	3318      	adds	r3, #24
 8009654:	4618      	mov	r0, r3
 8009656:	f7fe fd21 	bl	800809c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	4618      	mov	r0, r3
 800965e:	f003 fced 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009666:	2201      	movs	r2, #1
 8009668:	409a      	lsls	r2, r3
 800966a:	4b24      	ldr	r3, [pc, #144]	@ (80096fc <xTaskIncrementTick+0x168>)
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4313      	orrs	r3, r2
 8009670:	4a22      	ldr	r2, [pc, #136]	@ (80096fc <xTaskIncrementTick+0x168>)
 8009672:	6013      	str	r3, [r2, #0]
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009678:	4613      	mov	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4413      	add	r3, r2
 800967e:	009b      	lsls	r3, r3, #2
 8009680:	4a1f      	ldr	r2, [pc, #124]	@ (8009700 <xTaskIncrementTick+0x16c>)
 8009682:	441a      	add	r2, r3
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	3304      	adds	r3, #4
 8009688:	4619      	mov	r1, r3
 800968a:	4610      	mov	r0, r2
 800968c:	f7fe fca9 	bl	8007fe2 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009694:	4b1b      	ldr	r3, [pc, #108]	@ (8009704 <xTaskIncrementTick+0x170>)
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800969a:	429a      	cmp	r2, r3
 800969c:	d3b5      	bcc.n	800960a <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800969e:	2301      	movs	r3, #1
 80096a0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096a2:	e7b2      	b.n	800960a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096a4:	4b17      	ldr	r3, [pc, #92]	@ (8009704 <xTaskIncrementTick+0x170>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096aa:	4915      	ldr	r1, [pc, #84]	@ (8009700 <xTaskIncrementTick+0x16c>)
 80096ac:	4613      	mov	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	009b      	lsls	r3, r3, #2
 80096b4:	440b      	add	r3, r1
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d901      	bls.n	80096c0 <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 80096bc:	2301      	movs	r3, #1
 80096be:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80096c0:	4b11      	ldr	r3, [pc, #68]	@ (8009708 <xTaskIncrementTick+0x174>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d007      	beq.n	80096d8 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 80096c8:	2301      	movs	r3, #1
 80096ca:	617b      	str	r3, [r7, #20]
 80096cc:	e004      	b.n	80096d8 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80096ce:	4b0f      	ldr	r3, [pc, #60]	@ (800970c <xTaskIncrementTick+0x178>)
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	3301      	adds	r3, #1
 80096d4:	4a0d      	ldr	r2, [pc, #52]	@ (800970c <xTaskIncrementTick+0x178>)
 80096d6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80096d8:	697b      	ldr	r3, [r7, #20]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
 80096e2:	bf00      	nop
 80096e4:	200004d4 	.word	0x200004d4
 80096e8:	200004b0 	.word	0x200004b0
 80096ec:	20000464 	.word	0x20000464
 80096f0:	20000468 	.word	0x20000468
 80096f4:	200004c4 	.word	0x200004c4
 80096f8:	200004cc 	.word	0x200004cc
 80096fc:	200004b4 	.word	0x200004b4
 8009700:	200003d8 	.word	0x200003d8
 8009704:	200003d4 	.word	0x200003d4
 8009708:	200004c0 	.word	0x200004c0
 800970c:	200004bc 	.word	0x200004bc

08009710 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b086      	sub	sp, #24
 8009714:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009716:	4b2d      	ldr	r3, [pc, #180]	@ (80097cc <vTaskSwitchContext+0xbc>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d003      	beq.n	8009726 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800971e:	4b2c      	ldr	r3, [pc, #176]	@ (80097d0 <vTaskSwitchContext+0xc0>)
 8009720:	2201      	movs	r2, #1
 8009722:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8009724:	e04e      	b.n	80097c4 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8009726:	4b2a      	ldr	r3, [pc, #168]	@ (80097d0 <vTaskSwitchContext+0xc0>)
 8009728:	2200      	movs	r2, #0
 800972a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800972c:	4b29      	ldr	r3, [pc, #164]	@ (80097d4 <vTaskSwitchContext+0xc4>)
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	fab3 f383 	clz	r3, r3
 8009738:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800973a:	7afb      	ldrb	r3, [r7, #11]
 800973c:	f1c3 031f 	rsb	r3, r3, #31
 8009740:	617b      	str	r3, [r7, #20]
 8009742:	4925      	ldr	r1, [pc, #148]	@ (80097d8 <vTaskSwitchContext+0xc8>)
 8009744:	697a      	ldr	r2, [r7, #20]
 8009746:	4613      	mov	r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	009b      	lsls	r3, r3, #2
 800974e:	440b      	add	r3, r1
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d10b      	bne.n	800976e <vTaskSwitchContext+0x5e>
        __asm volatile
 8009756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975a:	f383 8811 	msr	BASEPRI, r3
 800975e:	f3bf 8f6f 	isb	sy
 8009762:	f3bf 8f4f 	dsb	sy
 8009766:	607b      	str	r3, [r7, #4]
    }
 8009768:	bf00      	nop
 800976a:	bf00      	nop
 800976c:	e7fd      	b.n	800976a <vTaskSwitchContext+0x5a>
 800976e:	697a      	ldr	r2, [r7, #20]
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	4a17      	ldr	r2, [pc, #92]	@ (80097d8 <vTaskSwitchContext+0xc8>)
 800977a:	4413      	add	r3, r2
 800977c:	613b      	str	r3, [r7, #16]
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	685a      	ldr	r2, [r3, #4]
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	605a      	str	r2, [r3, #4]
 8009788:	693b      	ldr	r3, [r7, #16]
 800978a:	685a      	ldr	r2, [r3, #4]
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	3308      	adds	r3, #8
 8009790:	429a      	cmp	r2, r3
 8009792:	d104      	bne.n	800979e <vTaskSwitchContext+0x8e>
 8009794:	693b      	ldr	r3, [r7, #16]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	685a      	ldr	r2, [r3, #4]
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	605a      	str	r2, [r3, #4]
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	68db      	ldr	r3, [r3, #12]
 80097a4:	4a0d      	ldr	r2, [pc, #52]	@ (80097dc <vTaskSwitchContext+0xcc>)
 80097a6:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80097a8:	4b0c      	ldr	r3, [pc, #48]	@ (80097dc <vTaskSwitchContext+0xcc>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	4b0c      	ldr	r3, [pc, #48]	@ (80097e0 <vTaskSwitchContext+0xd0>)
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d102      	bne.n	80097ba <vTaskSwitchContext+0xaa>
 80097b4:	f003 fba2 	bl	800cefc <SEGGER_SYSVIEW_OnIdle>
}
 80097b8:	e004      	b.n	80097c4 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80097ba:	4b08      	ldr	r3, [pc, #32]	@ (80097dc <vTaskSwitchContext+0xcc>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4618      	mov	r0, r3
 80097c0:	f003 fbfa 	bl	800cfb8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80097c4:	bf00      	nop
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	200004d4 	.word	0x200004d4
 80097d0:	200004c0 	.word	0x200004c0
 80097d4:	200004b4 	.word	0x200004b4
 80097d8:	200003d8 	.word	0x200003d8
 80097dc:	200003d4 	.word	0x200003d4
 80097e0:	200004d0 	.word	0x200004d0

080097e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10b      	bne.n	800980c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80097f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	60fb      	str	r3, [r7, #12]
    }
 8009806:	bf00      	nop
 8009808:	bf00      	nop
 800980a:	e7fd      	b.n	8009808 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800980c:	4b07      	ldr	r3, [pc, #28]	@ (800982c <vTaskPlaceOnEventList+0x48>)
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	3318      	adds	r3, #24
 8009812:	4619      	mov	r1, r3
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7fe fc08 	bl	800802a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800981a:	2101      	movs	r1, #1
 800981c:	6838      	ldr	r0, [r7, #0]
 800981e:	f000 fefb 	bl	800a618 <prvAddCurrentTaskToDelayedList>
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	200003d4 	.word	0x200003d4

08009830 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b086      	sub	sp, #24
 8009834:	af00      	add	r7, sp, #0
 8009836:	60f8      	str	r0, [r7, #12]
 8009838:	60b9      	str	r1, [r7, #8]
 800983a:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d10b      	bne.n	800985a <vTaskPlaceOnUnorderedEventList+0x2a>
        __asm volatile
 8009842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009846:	f383 8811 	msr	BASEPRI, r3
 800984a:	f3bf 8f6f 	isb	sy
 800984e:	f3bf 8f4f 	dsb	sy
 8009852:	617b      	str	r3, [r7, #20]
    }
 8009854:	bf00      	nop
 8009856:	bf00      	nop
 8009858:	e7fd      	b.n	8009856 <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 800985a:	4b12      	ldr	r3, [pc, #72]	@ (80098a4 <vTaskPlaceOnUnorderedEventList+0x74>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10b      	bne.n	800987a <vTaskPlaceOnUnorderedEventList+0x4a>
        __asm volatile
 8009862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009866:	f383 8811 	msr	BASEPRI, r3
 800986a:	f3bf 8f6f 	isb	sy
 800986e:	f3bf 8f4f 	dsb	sy
 8009872:	613b      	str	r3, [r7, #16]
    }
 8009874:	bf00      	nop
 8009876:	bf00      	nop
 8009878:	e7fd      	b.n	8009876 <vTaskPlaceOnUnorderedEventList+0x46>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800987a:	4b0b      	ldr	r3, [pc, #44]	@ (80098a8 <vTaskPlaceOnUnorderedEventList+0x78>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	68ba      	ldr	r2, [r7, #8]
 8009880:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009884:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009886:	4b08      	ldr	r3, [pc, #32]	@ (80098a8 <vTaskPlaceOnUnorderedEventList+0x78>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	3318      	adds	r3, #24
 800988c:	4619      	mov	r1, r3
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f7fe fba7 	bl	8007fe2 <vListInsertEnd>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009894:	2101      	movs	r1, #1
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 febe 	bl	800a618 <prvAddCurrentTaskToDelayedList>
}
 800989c:	bf00      	nop
 800989e:	3718      	adds	r7, #24
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	200004d4 	.word	0x200004d4
 80098a8:	200003d4 	.word	0x200003d4

080098ac <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	60b9      	str	r1, [r7, #8]
 80098b6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d10b      	bne.n	80098d6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80098be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098c2:	f383 8811 	msr	BASEPRI, r3
 80098c6:	f3bf 8f6f 	isb	sy
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	617b      	str	r3, [r7, #20]
    }
 80098d0:	bf00      	nop
 80098d2:	bf00      	nop
 80098d4:	e7fd      	b.n	80098d2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098d6:	4b0c      	ldr	r3, [pc, #48]	@ (8009908 <vTaskPlaceOnEventListRestricted+0x5c>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3318      	adds	r3, #24
 80098dc:	4619      	mov	r1, r3
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f7fe fb7f 	bl	8007fe2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d002      	beq.n	80098f0 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80098ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80098ee:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80098f0:	2024      	movs	r0, #36	@ 0x24
 80098f2:	f002 fd57 	bl	800c3a4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098f6:	6879      	ldr	r1, [r7, #4]
 80098f8:	68b8      	ldr	r0, [r7, #8]
 80098fa:	f000 fe8d 	bl	800a618 <prvAddCurrentTaskToDelayedList>
    }
 80098fe:	bf00      	nop
 8009900:	3718      	adds	r7, #24
 8009902:	46bd      	mov	sp, r7
 8009904:	bd80      	pop	{r7, pc}
 8009906:	bf00      	nop
 8009908:	200003d4 	.word	0x200003d4

0800990c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b086      	sub	sp, #24
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10b      	bne.n	800993a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	60fb      	str	r3, [r7, #12]
    }
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	e7fd      	b.n	8009936 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	3318      	adds	r3, #24
 800993e:	4618      	mov	r0, r3
 8009940:	f7fe fbac 	bl	800809c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009944:	4b1f      	ldr	r3, [pc, #124]	@ (80099c4 <xTaskRemoveFromEventList+0xb8>)
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d120      	bne.n	800998e <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	3304      	adds	r3, #4
 8009950:	4618      	mov	r0, r3
 8009952:	f7fe fba3 	bl	800809c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	4618      	mov	r0, r3
 800995a:	f003 fb6f 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800995e:	693b      	ldr	r3, [r7, #16]
 8009960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009962:	2201      	movs	r2, #1
 8009964:	409a      	lsls	r2, r3
 8009966:	4b18      	ldr	r3, [pc, #96]	@ (80099c8 <xTaskRemoveFromEventList+0xbc>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4313      	orrs	r3, r2
 800996c:	4a16      	ldr	r2, [pc, #88]	@ (80099c8 <xTaskRemoveFromEventList+0xbc>)
 800996e:	6013      	str	r3, [r2, #0]
 8009970:	693b      	ldr	r3, [r7, #16]
 8009972:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4a13      	ldr	r2, [pc, #76]	@ (80099cc <xTaskRemoveFromEventList+0xc0>)
 800997e:	441a      	add	r2, r3
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	3304      	adds	r3, #4
 8009984:	4619      	mov	r1, r3
 8009986:	4610      	mov	r0, r2
 8009988:	f7fe fb2b 	bl	8007fe2 <vListInsertEnd>
 800998c:	e005      	b.n	800999a <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800998e:	693b      	ldr	r3, [r7, #16]
 8009990:	3318      	adds	r3, #24
 8009992:	4619      	mov	r1, r3
 8009994:	480e      	ldr	r0, [pc, #56]	@ (80099d0 <xTaskRemoveFromEventList+0xc4>)
 8009996:	f7fe fb24 	bl	8007fe2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800999e:	4b0d      	ldr	r3, [pc, #52]	@ (80099d4 <xTaskRemoveFromEventList+0xc8>)
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d905      	bls.n	80099b4 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80099a8:	2301      	movs	r3, #1
 80099aa:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80099ac:	4b0a      	ldr	r3, [pc, #40]	@ (80099d8 <xTaskRemoveFromEventList+0xcc>)
 80099ae:	2201      	movs	r2, #1
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	e001      	b.n	80099b8 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 80099b4:	2300      	movs	r3, #0
 80099b6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80099b8:	697b      	ldr	r3, [r7, #20]
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3718      	adds	r7, #24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	200004d4 	.word	0x200004d4
 80099c8:	200004b4 	.word	0x200004b4
 80099cc:	200003d8 	.word	0x200003d8
 80099d0:	2000046c 	.word	0x2000046c
 80099d4:	200003d4 	.word	0x200003d4
 80099d8:	200004c0 	.word	0x200004c0

080099dc <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 80099e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009a98 <vTaskRemoveFromUnorderedEventList+0xbc>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10b      	bne.n	8009a06 <vTaskRemoveFromUnorderedEventList+0x2a>
        __asm volatile
 80099ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099f2:	f383 8811 	msr	BASEPRI, r3
 80099f6:	f3bf 8f6f 	isb	sy
 80099fa:	f3bf 8f4f 	dsb	sy
 80099fe:	613b      	str	r3, [r7, #16]
    }
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop
 8009a04:	e7fd      	b.n	8009a02 <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	68db      	ldr	r3, [r3, #12]
 8009a14:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8009a16:	697b      	ldr	r3, [r7, #20]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10b      	bne.n	8009a34 <vTaskRemoveFromUnorderedEventList+0x58>
        __asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	60fb      	str	r3, [r7, #12]
    }
 8009a2e:	bf00      	nop
 8009a30:	bf00      	nop
 8009a32:	e7fd      	b.n	8009a30 <vTaskRemoveFromUnorderedEventList+0x54>
    ( void ) uxListRemove( pxEventListItem );
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7fe fb31 	bl	800809c <uxListRemove>
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	4618      	mov	r0, r3
 8009a40:	f7fe fb2c 	bl	800809c <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f003 faf8 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 8009a4c:	697b      	ldr	r3, [r7, #20]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a50:	2201      	movs	r2, #1
 8009a52:	409a      	lsls	r2, r3
 8009a54:	4b11      	ldr	r3, [pc, #68]	@ (8009a9c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4313      	orrs	r3, r2
 8009a5a:	4a10      	ldr	r2, [pc, #64]	@ (8009a9c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8009a5c:	6013      	str	r3, [r2, #0]
 8009a5e:	697b      	ldr	r3, [r7, #20]
 8009a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a62:	4613      	mov	r3, r2
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4a0d      	ldr	r2, [pc, #52]	@ (8009aa0 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8009a6c:	441a      	add	r2, r3
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	3304      	adds	r3, #4
 8009a72:	4619      	mov	r1, r3
 8009a74:	4610      	mov	r0, r2
 8009a76:	f7fe fab4 	bl	8007fe2 <vListInsertEnd>

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a7e:	4b09      	ldr	r3, [pc, #36]	@ (8009aa4 <vTaskRemoveFromUnorderedEventList+0xc8>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a84:	429a      	cmp	r2, r3
 8009a86:	d902      	bls.n	8009a8e <vTaskRemoveFromUnorderedEventList+0xb2>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 8009a88:	4b07      	ldr	r3, [pc, #28]	@ (8009aa8 <vTaskRemoveFromUnorderedEventList+0xcc>)
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	601a      	str	r2, [r3, #0]
    }
}
 8009a8e:	bf00      	nop
 8009a90:	3718      	adds	r7, #24
 8009a92:	46bd      	mov	sp, r7
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	200004d4 	.word	0x200004d4
 8009a9c:	200004b4 	.word	0x200004b4
 8009aa0:	200003d8 	.word	0x200003d8
 8009aa4:	200003d4 	.word	0x200003d4
 8009aa8:	200004c0 	.word	0x200004c0

08009aac <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009aac:	b480      	push	{r7}
 8009aae:	b083      	sub	sp, #12
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009ab4:	4b06      	ldr	r3, [pc, #24]	@ (8009ad0 <vTaskInternalSetTimeOutState+0x24>)
 8009ab6:	681a      	ldr	r2, [r3, #0]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009abc:	4b05      	ldr	r3, [pc, #20]	@ (8009ad4 <vTaskInternalSetTimeOutState+0x28>)
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	605a      	str	r2, [r3, #4]
}
 8009ac4:	bf00      	nop
 8009ac6:	370c      	adds	r7, #12
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	200004c4 	.word	0x200004c4
 8009ad4:	200004b0 	.word	0x200004b0

08009ad8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d10b      	bne.n	8009b00 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8009ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aec:	f383 8811 	msr	BASEPRI, r3
 8009af0:	f3bf 8f6f 	isb	sy
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	613b      	str	r3, [r7, #16]
    }
 8009afa:	bf00      	nop
 8009afc:	bf00      	nop
 8009afe:	e7fd      	b.n	8009afc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d10b      	bne.n	8009b1e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8009b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b0a:	f383 8811 	msr	BASEPRI, r3
 8009b0e:	f3bf 8f6f 	isb	sy
 8009b12:	f3bf 8f4f 	dsb	sy
 8009b16:	60fb      	str	r3, [r7, #12]
    }
 8009b18:	bf00      	nop
 8009b1a:	bf00      	nop
 8009b1c:	e7fd      	b.n	8009b1a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8009b1e:	f001 fb45 	bl	800b1ac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8009b22:	4b1f      	ldr	r3, [pc, #124]	@ (8009ba0 <xTaskCheckForTimeOut+0xc8>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	69ba      	ldr	r2, [r7, #24]
 8009b2e:	1ad3      	subs	r3, r2, r3
 8009b30:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009b3a:	d102      	bne.n	8009b42 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	61fb      	str	r3, [r7, #28]
 8009b40:	e026      	b.n	8009b90 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	4b17      	ldr	r3, [pc, #92]	@ (8009ba4 <xTaskCheckForTimeOut+0xcc>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d00a      	beq.n	8009b64 <xTaskCheckForTimeOut+0x8c>
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d305      	bcc.n	8009b64 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	601a      	str	r2, [r3, #0]
 8009b62:	e015      	b.n	8009b90 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d20b      	bcs.n	8009b86 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	697b      	ldr	r3, [r7, #20]
 8009b74:	1ad2      	subs	r2, r2, r3
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8009b7a:	6878      	ldr	r0, [r7, #4]
 8009b7c:	f7ff ff96 	bl	8009aac <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009b80:	2300      	movs	r3, #0
 8009b82:	61fb      	str	r3, [r7, #28]
 8009b84:	e004      	b.n	8009b90 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009b90:	f001 fb3e 	bl	800b210 <vPortExitCritical>

    return xReturn;
 8009b94:	69fb      	ldr	r3, [r7, #28]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3720      	adds	r7, #32
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	200004b0 	.word	0x200004b0
 8009ba4:	200004c4 	.word	0x200004c4

08009ba8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ba8:	b480      	push	{r7}
 8009baa:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8009bac:	4b03      	ldr	r3, [pc, #12]	@ (8009bbc <vTaskMissedYield+0x14>)
 8009bae:	2201      	movs	r2, #1
 8009bb0:	601a      	str	r2, [r3, #0]
}
 8009bb2:	bf00      	nop
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	200004c0 	.word	0x200004c0

08009bc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b082      	sub	sp, #8
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009bc8:	f000 f852 	bl	8009c70 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009bcc:	4b06      	ldr	r3, [pc, #24]	@ (8009be8 <prvIdleTask+0x28>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b01      	cmp	r3, #1
 8009bd2:	d9f9      	bls.n	8009bc8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8009bd4:	4b05      	ldr	r3, [pc, #20]	@ (8009bec <prvIdleTask+0x2c>)
 8009bd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bda:	601a      	str	r2, [r3, #0]
 8009bdc:	f3bf 8f4f 	dsb	sy
 8009be0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8009be4:	e7f0      	b.n	8009bc8 <prvIdleTask+0x8>
 8009be6:	bf00      	nop
 8009be8:	200003d8 	.word	0x200003d8
 8009bec:	e000ed04 	.word	0xe000ed04

08009bf0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b082      	sub	sp, #8
 8009bf4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	607b      	str	r3, [r7, #4]
 8009bfa:	e00c      	b.n	8009c16 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	4613      	mov	r3, r2
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	4413      	add	r3, r2
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4a12      	ldr	r2, [pc, #72]	@ (8009c50 <prvInitialiseTaskLists+0x60>)
 8009c08:	4413      	add	r3, r2
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	f7fe f9bc 	bl	8007f88 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	3301      	adds	r3, #1
 8009c14:	607b      	str	r3, [r7, #4]
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b04      	cmp	r3, #4
 8009c1a:	d9ef      	bls.n	8009bfc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009c1c:	480d      	ldr	r0, [pc, #52]	@ (8009c54 <prvInitialiseTaskLists+0x64>)
 8009c1e:	f7fe f9b3 	bl	8007f88 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8009c22:	480d      	ldr	r0, [pc, #52]	@ (8009c58 <prvInitialiseTaskLists+0x68>)
 8009c24:	f7fe f9b0 	bl	8007f88 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8009c28:	480c      	ldr	r0, [pc, #48]	@ (8009c5c <prvInitialiseTaskLists+0x6c>)
 8009c2a:	f7fe f9ad 	bl	8007f88 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8009c2e:	480c      	ldr	r0, [pc, #48]	@ (8009c60 <prvInitialiseTaskLists+0x70>)
 8009c30:	f7fe f9aa 	bl	8007f88 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8009c34:	480b      	ldr	r0, [pc, #44]	@ (8009c64 <prvInitialiseTaskLists+0x74>)
 8009c36:	f7fe f9a7 	bl	8007f88 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8009c3a:	4b0b      	ldr	r3, [pc, #44]	@ (8009c68 <prvInitialiseTaskLists+0x78>)
 8009c3c:	4a05      	ldr	r2, [pc, #20]	@ (8009c54 <prvInitialiseTaskLists+0x64>)
 8009c3e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009c40:	4b0a      	ldr	r3, [pc, #40]	@ (8009c6c <prvInitialiseTaskLists+0x7c>)
 8009c42:	4a05      	ldr	r2, [pc, #20]	@ (8009c58 <prvInitialiseTaskLists+0x68>)
 8009c44:	601a      	str	r2, [r3, #0]
}
 8009c46:	bf00      	nop
 8009c48:	3708      	adds	r7, #8
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	bd80      	pop	{r7, pc}
 8009c4e:	bf00      	nop
 8009c50:	200003d8 	.word	0x200003d8
 8009c54:	2000043c 	.word	0x2000043c
 8009c58:	20000450 	.word	0x20000450
 8009c5c:	2000046c 	.word	0x2000046c
 8009c60:	20000480 	.word	0x20000480
 8009c64:	20000498 	.word	0x20000498
 8009c68:	20000464 	.word	0x20000464
 8009c6c:	20000468 	.word	0x20000468

08009c70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009c76:	e019      	b.n	8009cac <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8009c78:	f001 fa98 	bl	800b1ac <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c7c:	4b10      	ldr	r3, [pc, #64]	@ (8009cc0 <prvCheckTasksWaitingTermination+0x50>)
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3304      	adds	r3, #4
 8009c88:	4618      	mov	r0, r3
 8009c8a:	f7fe fa07 	bl	800809c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8009c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009cc4 <prvCheckTasksWaitingTermination+0x54>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	3b01      	subs	r3, #1
 8009c94:	4a0b      	ldr	r2, [pc, #44]	@ (8009cc4 <prvCheckTasksWaitingTermination+0x54>)
 8009c96:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8009c98:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc8 <prvCheckTasksWaitingTermination+0x58>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	3b01      	subs	r3, #1
 8009c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8009cc8 <prvCheckTasksWaitingTermination+0x58>)
 8009ca0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8009ca2:	f001 fab5 	bl	800b210 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f810 	bl	8009ccc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009cac:	4b06      	ldr	r3, [pc, #24]	@ (8009cc8 <prvCheckTasksWaitingTermination+0x58>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1e1      	bne.n	8009c78 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8009cb4:	bf00      	nop
 8009cb6:	bf00      	nop
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	20000480 	.word	0x20000480
 8009cc4:	200004ac 	.word	0x200004ac
 8009cc8:	20000494 	.word	0x20000494

08009ccc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f001 fc7b 	bl	800b5d4 <vPortFree>
                vPortFree( pxTCB );
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f001 fc78 	bl	800b5d4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009ce4:	bf00      	nop
 8009ce6:	3708      	adds	r7, #8
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009cec:	b480      	push	{r7}
 8009cee:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8009d1c <prvResetNextTaskUnblockTime+0x30>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d104      	bne.n	8009d04 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009cfa:	4b09      	ldr	r3, [pc, #36]	@ (8009d20 <prvResetNextTaskUnblockTime+0x34>)
 8009cfc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009d00:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009d02:	e005      	b.n	8009d10 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009d04:	4b05      	ldr	r3, [pc, #20]	@ (8009d1c <prvResetNextTaskUnblockTime+0x30>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a04      	ldr	r2, [pc, #16]	@ (8009d20 <prvResetNextTaskUnblockTime+0x34>)
 8009d0e:	6013      	str	r3, [r2, #0]
}
 8009d10:	bf00      	nop
 8009d12:	46bd      	mov	sp, r7
 8009d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d18:	4770      	bx	lr
 8009d1a:	bf00      	nop
 8009d1c:	20000464 	.word	0x20000464
 8009d20:	200004cc 	.word	0x200004cc

08009d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8009d24:	b480      	push	{r7}
 8009d26:	b083      	sub	sp, #12
 8009d28:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8009d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8009d58 <xTaskGetSchedulerState+0x34>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d102      	bne.n	8009d38 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8009d32:	2301      	movs	r3, #1
 8009d34:	607b      	str	r3, [r7, #4]
 8009d36:	e008      	b.n	8009d4a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d38:	4b08      	ldr	r3, [pc, #32]	@ (8009d5c <xTaskGetSchedulerState+0x38>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d102      	bne.n	8009d46 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8009d40:	2302      	movs	r3, #2
 8009d42:	607b      	str	r3, [r7, #4]
 8009d44:	e001      	b.n	8009d4a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8009d46:	2300      	movs	r3, #0
 8009d48:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8009d4a:	687b      	ldr	r3, [r7, #4]
    }
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	370c      	adds	r7, #12
 8009d50:	46bd      	mov	sp, r7
 8009d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d56:	4770      	bx	lr
 8009d58:	200004b8 	.word	0x200004b8
 8009d5c:	200004d4 	.word	0x200004d4

08009d60 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b084      	sub	sp, #16
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d063      	beq.n	8009e3e <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009d7a:	4b33      	ldr	r3, [pc, #204]	@ (8009e48 <xTaskPriorityInherit+0xe8>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d253      	bcs.n	8009e2c <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	699b      	ldr	r3, [r3, #24]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	db06      	blt.n	8009d9a <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d8c:	4b2e      	ldr	r3, [pc, #184]	@ (8009e48 <xTaskPriorityInherit+0xe8>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d92:	f1c3 0205 	rsb	r2, r3, #5
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	6959      	ldr	r1, [r3, #20]
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da2:	4613      	mov	r3, r2
 8009da4:	009b      	lsls	r3, r3, #2
 8009da6:	4413      	add	r3, r2
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	4a28      	ldr	r2, [pc, #160]	@ (8009e4c <xTaskPriorityInherit+0xec>)
 8009dac:	4413      	add	r3, r2
 8009dae:	4299      	cmp	r1, r3
 8009db0:	d12f      	bne.n	8009e12 <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	3304      	adds	r3, #4
 8009db6:	4618      	mov	r0, r3
 8009db8:	f7fe f970 	bl	800809c <uxListRemove>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d10a      	bne.n	8009dd8 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dc6:	2201      	movs	r2, #1
 8009dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8009dcc:	43da      	mvns	r2, r3
 8009dce:	4b20      	ldr	r3, [pc, #128]	@ (8009e50 <xTaskPriorityInherit+0xf0>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8009e50 <xTaskPriorityInherit+0xf0>)
 8009dd6:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8009e48 <xTaskPriorityInherit+0xe8>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de6:	2201      	movs	r2, #1
 8009de8:	409a      	lsls	r2, r3
 8009dea:	4b19      	ldr	r3, [pc, #100]	@ (8009e50 <xTaskPriorityInherit+0xf0>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	4a17      	ldr	r2, [pc, #92]	@ (8009e50 <xTaskPriorityInherit+0xf0>)
 8009df2:	6013      	str	r3, [r2, #0]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009df8:	4613      	mov	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4413      	add	r3, r2
 8009dfe:	009b      	lsls	r3, r3, #2
 8009e00:	4a12      	ldr	r2, [pc, #72]	@ (8009e4c <xTaskPriorityInherit+0xec>)
 8009e02:	441a      	add	r2, r3
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	3304      	adds	r3, #4
 8009e08:	4619      	mov	r1, r3
 8009e0a:	4610      	mov	r0, r2
 8009e0c:	f7fe f8e9 	bl	8007fe2 <vListInsertEnd>
 8009e10:	e004      	b.n	8009e1c <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009e12:	4b0d      	ldr	r3, [pc, #52]	@ (8009e48 <xTaskPriorityInherit+0xe8>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4619      	mov	r1, r3
 8009e20:	2049      	movs	r0, #73	@ 0x49
 8009e22:	f002 fadd 	bl	800c3e0 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 8009e26:	2301      	movs	r3, #1
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	e008      	b.n	8009e3e <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009e30:	4b05      	ldr	r3, [pc, #20]	@ (8009e48 <xTaskPriorityInherit+0xe8>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e36:	429a      	cmp	r2, r3
 8009e38:	d201      	bcs.n	8009e3e <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
    }
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	200003d4 	.word	0x200003d4
 8009e4c:	200003d8 	.word	0x200003d8
 8009e50:	200004b4 	.word	0x200004b4

08009e54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8009e60:	2300      	movs	r3, #0
 8009e62:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d06a      	beq.n	8009f40 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8009e6a:	4b38      	ldr	r3, [pc, #224]	@ (8009f4c <xTaskPriorityDisinherit+0xf8>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	693a      	ldr	r2, [r7, #16]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d00b      	beq.n	8009e8c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8009e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e78:	f383 8811 	msr	BASEPRI, r3
 8009e7c:	f3bf 8f6f 	isb	sy
 8009e80:	f3bf 8f4f 	dsb	sy
 8009e84:	60fb      	str	r3, [r7, #12]
    }
 8009e86:	bf00      	nop
 8009e88:	bf00      	nop
 8009e8a:	e7fd      	b.n	8009e88 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10b      	bne.n	8009eac <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8009e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e98:	f383 8811 	msr	BASEPRI, r3
 8009e9c:	f3bf 8f6f 	isb	sy
 8009ea0:	f3bf 8f4f 	dsb	sy
 8009ea4:	60bb      	str	r3, [r7, #8]
    }
 8009ea6:	bf00      	nop
 8009ea8:	bf00      	nop
 8009eaa:	e7fd      	b.n	8009ea8 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009eb0:	1e5a      	subs	r2, r3, #1
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eba:	693b      	ldr	r3, [r7, #16]
 8009ebc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	d03e      	beq.n	8009f40 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d13a      	bne.n	8009f40 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	3304      	adds	r3, #4
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe f8e4 	bl	800809c <uxListRemove>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d10a      	bne.n	8009ef0 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ede:	2201      	movs	r2, #1
 8009ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8009ee4:	43da      	mvns	r2, r3
 8009ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8009f50 <xTaskPriorityDisinherit+0xfc>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	4013      	ands	r3, r2
 8009eec:	4a18      	ldr	r2, [pc, #96]	@ (8009f50 <xTaskPriorityDisinherit+0xfc>)
 8009eee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	204a      	movs	r0, #74	@ 0x4a
 8009ef6:	f002 fa73 	bl	800c3e0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f06:	f1c3 0205 	rsb	r2, r3, #5
 8009f0a:	693b      	ldr	r3, [r7, #16]
 8009f0c:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8009f0e:	693b      	ldr	r3, [r7, #16]
 8009f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f12:	2201      	movs	r2, #1
 8009f14:	409a      	lsls	r2, r3
 8009f16:	4b0e      	ldr	r3, [pc, #56]	@ (8009f50 <xTaskPriorityDisinherit+0xfc>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	4a0c      	ldr	r2, [pc, #48]	@ (8009f50 <xTaskPriorityDisinherit+0xfc>)
 8009f1e:	6013      	str	r3, [r2, #0]
 8009f20:	693b      	ldr	r3, [r7, #16]
 8009f22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009f24:	4613      	mov	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4413      	add	r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4a09      	ldr	r2, [pc, #36]	@ (8009f54 <xTaskPriorityDisinherit+0x100>)
 8009f2e:	441a      	add	r2, r3
 8009f30:	693b      	ldr	r3, [r7, #16]
 8009f32:	3304      	adds	r3, #4
 8009f34:	4619      	mov	r1, r3
 8009f36:	4610      	mov	r0, r2
 8009f38:	f7fe f853 	bl	8007fe2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009f40:	697b      	ldr	r3, [r7, #20]
    }
 8009f42:	4618      	mov	r0, r3
 8009f44:	3718      	adds	r7, #24
 8009f46:	46bd      	mov	sp, r7
 8009f48:	bd80      	pop	{r7, pc}
 8009f4a:	bf00      	nop
 8009f4c:	200003d4 	.word	0x200003d4
 8009f50:	200004b4 	.word	0x200004b4
 8009f54:	200003d8 	.word	0x200003d8

08009f58 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b088      	sub	sp, #32
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009f66:	2301      	movs	r3, #1
 8009f68:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	f000 8083 	beq.w	800a078 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8009f72:	69bb      	ldr	r3, [r7, #24]
 8009f74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10b      	bne.n	8009f92 <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	60fb      	str	r3, [r7, #12]
    }
 8009f8c:	bf00      	nop
 8009f8e:	bf00      	nop
 8009f90:	e7fd      	b.n	8009f8e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009f96:	683a      	ldr	r2, [r7, #0]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d902      	bls.n	8009fa2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	61fb      	str	r3, [r7, #28]
 8009fa0:	e002      	b.n	8009fa8 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fa6:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fac:	69fa      	ldr	r2, [r7, #28]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d062      	beq.n	800a078 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fb6:	697a      	ldr	r2, [r7, #20]
 8009fb8:	429a      	cmp	r2, r3
 8009fba:	d15d      	bne.n	800a078 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8009fbc:	4b30      	ldr	r3, [pc, #192]	@ (800a080 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	69ba      	ldr	r2, [r7, #24]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d10b      	bne.n	8009fde <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 8009fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fca:	f383 8811 	msr	BASEPRI, r3
 8009fce:	f3bf 8f6f 	isb	sy
 8009fd2:	f3bf 8f4f 	dsb	sy
 8009fd6:	60bb      	str	r3, [r7, #8]
    }
 8009fd8:	bf00      	nop
 8009fda:	bf00      	nop
 8009fdc:	e7fd      	b.n	8009fda <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4619      	mov	r1, r3
 8009fe2:	204a      	movs	r0, #74	@ 0x4a
 8009fe4:	f002 f9fc 	bl	800c3e0 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fec:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	69fa      	ldr	r2, [r7, #28]
 8009ff2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ff4:	69bb      	ldr	r3, [r7, #24]
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	db04      	blt.n	800a006 <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	f1c3 0205 	rsb	r2, r3, #5
 800a002:	69bb      	ldr	r3, [r7, #24]
 800a004:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a006:	69bb      	ldr	r3, [r7, #24]
 800a008:	6959      	ldr	r1, [r3, #20]
 800a00a:	693a      	ldr	r2, [r7, #16]
 800a00c:	4613      	mov	r3, r2
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	4413      	add	r3, r2
 800a012:	009b      	lsls	r3, r3, #2
 800a014:	4a1b      	ldr	r2, [pc, #108]	@ (800a084 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a016:	4413      	add	r3, r2
 800a018:	4299      	cmp	r1, r3
 800a01a:	d12d      	bne.n	800a078 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	3304      	adds	r3, #4
 800a020:	4618      	mov	r0, r3
 800a022:	f7fe f83b 	bl	800809c <uxListRemove>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a030:	2201      	movs	r2, #1
 800a032:	fa02 f303 	lsl.w	r3, r2, r3
 800a036:	43da      	mvns	r2, r3
 800a038:	4b13      	ldr	r3, [pc, #76]	@ (800a088 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4013      	ands	r3, r2
 800a03e:	4a12      	ldr	r2, [pc, #72]	@ (800a088 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a040:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800a042:	69bb      	ldr	r3, [r7, #24]
 800a044:	4618      	mov	r0, r3
 800a046:	f002 fff9 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a04e:	2201      	movs	r2, #1
 800a050:	409a      	lsls	r2, r3
 800a052:	4b0d      	ldr	r3, [pc, #52]	@ (800a088 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4313      	orrs	r3, r2
 800a058:	4a0b      	ldr	r2, [pc, #44]	@ (800a088 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a05a:	6013      	str	r3, [r2, #0]
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a060:	4613      	mov	r3, r2
 800a062:	009b      	lsls	r3, r3, #2
 800a064:	4413      	add	r3, r2
 800a066:	009b      	lsls	r3, r3, #2
 800a068:	4a06      	ldr	r2, [pc, #24]	@ (800a084 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a06a:	441a      	add	r2, r3
 800a06c:	69bb      	ldr	r3, [r7, #24]
 800a06e:	3304      	adds	r3, #4
 800a070:	4619      	mov	r1, r3
 800a072:	4610      	mov	r0, r2
 800a074:	f7fd ffb5 	bl	8007fe2 <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a078:	bf00      	nop
 800a07a:	3720      	adds	r7, #32
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	200003d4 	.word	0x200003d4
 800a084:	200003d8 	.word	0x200003d8
 800a088:	200004b4 	.word	0x200004b4

0800a08c <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800a092:	4b09      	ldr	r3, [pc, #36]	@ (800a0b8 <uxTaskResetEventItemValue+0x2c>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	699b      	ldr	r3, [r3, #24]
 800a098:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a09a:	4b07      	ldr	r3, [pc, #28]	@ (800a0b8 <uxTaskResetEventItemValue+0x2c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0a0:	4b05      	ldr	r3, [pc, #20]	@ (800a0b8 <uxTaskResetEventItemValue+0x2c>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	f1c2 0205 	rsb	r2, r2, #5
 800a0a8:	619a      	str	r2, [r3, #24]

    return uxReturn;
 800a0aa:	687b      	ldr	r3, [r7, #4]
}
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr
 800a0b8:	200003d4 	.word	0x200003d4

0800a0bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800a0bc:	b480      	push	{r7}
 800a0be:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800a0c0:	4b07      	ldr	r3, [pc, #28]	@ (800a0e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d004      	beq.n	800a0d2 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800a0c8:	4b05      	ldr	r3, [pc, #20]	@ (800a0e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a0ce:	3201      	adds	r2, #1
 800a0d0:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800a0d2:	4b03      	ldr	r3, [pc, #12]	@ (800a0e0 <pvTaskIncrementMutexHeldCount+0x24>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
    }
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr
 800a0e0:	200003d4 	.word	0x200003d4

0800a0e4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b088      	sub	sp, #32
 800a0e8:	af02      	add	r7, sp, #8
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d00b      	beq.n	800a110 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 800a0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0fc:	f383 8811 	msr	BASEPRI, r3
 800a100:	f3bf 8f6f 	isb	sy
 800a104:	f3bf 8f4f 	dsb	sy
 800a108:	613b      	str	r3, [r7, #16]
    }
 800a10a:	bf00      	nop
 800a10c:	bf00      	nop
 800a10e:	e7fd      	b.n	800a10c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800a110:	f001 f84c 	bl	800b1ac <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800a114:	4b36      	ldr	r3, [pc, #216]	@ (800a1f0 <xTaskGenericNotifyWait+0x10c>)
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	4413      	add	r3, r2
 800a11c:	3354      	adds	r3, #84	@ 0x54
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	b2db      	uxtb	r3, r3
 800a122:	2b02      	cmp	r3, #2
 800a124:	d022      	beq.n	800a16c <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800a126:	4b32      	ldr	r3, [pc, #200]	@ (800a1f0 <xTaskGenericNotifyWait+0x10c>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	68fa      	ldr	r2, [r7, #12]
 800a12c:	3214      	adds	r2, #20
 800a12e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a132:	68ba      	ldr	r2, [r7, #8]
 800a134:	43d2      	mvns	r2, r2
 800a136:	4011      	ands	r1, r2
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	3214      	adds	r2, #20
 800a13c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800a140:	4b2b      	ldr	r3, [pc, #172]	@ (800a1f0 <xTaskGenericNotifyWait+0x10c>)
 800a142:	681a      	ldr	r2, [r3, #0]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	4413      	add	r3, r2
 800a148:	3354      	adds	r3, #84	@ 0x54
 800a14a:	2201      	movs	r2, #1
 800a14c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800a14e:	6a3b      	ldr	r3, [r7, #32]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d00b      	beq.n	800a16c <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a154:	2101      	movs	r1, #1
 800a156:	6a38      	ldr	r0, [r7, #32]
 800a158:	f000 fa5e 	bl	800a618 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800a15c:	4b25      	ldr	r3, [pc, #148]	@ (800a1f4 <xTaskGenericNotifyWait+0x110>)
 800a15e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a162:	601a      	str	r2, [r3, #0]
 800a164:	f3bf 8f4f 	dsb	sy
 800a168:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a16c:	f001 f850 	bl	800b210 <vPortExitCritical>

        taskENTER_CRITICAL();
 800a170:	f001 f81c 	bl	800b1ac <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800a174:	683a      	ldr	r2, [r7, #0]
 800a176:	6a3b      	ldr	r3, [r7, #32]
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	4613      	mov	r3, r2
 800a17c:	687a      	ldr	r2, [r7, #4]
 800a17e:	68b9      	ldr	r1, [r7, #8]
 800a180:	2040      	movs	r0, #64	@ 0x40
 800a182:	f002 fa39 	bl	800c5f8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d007      	beq.n	800a19c <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800a18c:	4b18      	ldr	r3, [pc, #96]	@ (800a1f0 <xTaskGenericNotifyWait+0x10c>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	3214      	adds	r2, #20
 800a194:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800a19c:	4b14      	ldr	r3, [pc, #80]	@ (800a1f0 <xTaskGenericNotifyWait+0x10c>)
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	4413      	add	r3, r2
 800a1a4:	3354      	adds	r3, #84	@ 0x54
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d002      	beq.n	800a1b4 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	e00e      	b.n	800a1d2 <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800a1b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a1f0 <xTaskGenericNotifyWait+0x10c>)
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	3214      	adds	r2, #20
 800a1bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	43d2      	mvns	r2, r2
 800a1c4:	4011      	ands	r1, r2
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	3214      	adds	r2, #20
 800a1ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800a1d2:	4b07      	ldr	r3, [pc, #28]	@ (800a1f0 <xTaskGenericNotifyWait+0x10c>)
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	4413      	add	r3, r2
 800a1da:	3354      	adds	r3, #84	@ 0x54
 800a1dc:	2200      	movs	r2, #0
 800a1de:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800a1e0:	f001 f816 	bl	800b210 <vPortExitCritical>

        return xReturn;
 800a1e4:	697b      	ldr	r3, [r7, #20]
    }
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	200003d4 	.word	0x200003d4
 800a1f4:	e000ed04 	.word	0xe000ed04

0800a1f8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08e      	sub	sp, #56	@ 0x38
 800a1fc:	af02      	add	r7, sp, #8
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800a206:	2301      	movs	r3, #1
 800a208:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00b      	beq.n	800a228 <xTaskGenericNotify+0x30>
        __asm volatile
 800a210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a214:	f383 8811 	msr	BASEPRI, r3
 800a218:	f3bf 8f6f 	isb	sy
 800a21c:	f3bf 8f4f 	dsb	sy
 800a220:	623b      	str	r3, [r7, #32]
    }
 800a222:	bf00      	nop
 800a224:	bf00      	nop
 800a226:	e7fd      	b.n	800a224 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10b      	bne.n	800a246 <xTaskGenericNotify+0x4e>
        __asm volatile
 800a22e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a232:	f383 8811 	msr	BASEPRI, r3
 800a236:	f3bf 8f6f 	isb	sy
 800a23a:	f3bf 8f4f 	dsb	sy
 800a23e:	61fb      	str	r3, [r7, #28]
    }
 800a240:	bf00      	nop
 800a242:	bf00      	nop
 800a244:	e7fd      	b.n	800a242 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 800a24a:	f000 ffaf 	bl	800b1ac <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800a24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a250:	2b00      	cmp	r3, #0
 800a252:	d006      	beq.n	800a262 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800a254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a256:	68ba      	ldr	r2, [r7, #8]
 800a258:	3214      	adds	r2, #20
 800a25a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a260:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800a262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a264:	68bb      	ldr	r3, [r7, #8]
 800a266:	4413      	add	r3, r2
 800a268:	3354      	adds	r3, #84	@ 0x54
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800a270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	4413      	add	r3, r2
 800a276:	3354      	adds	r3, #84	@ 0x54
 800a278:	2202      	movs	r2, #2
 800a27a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800a27c:	78fb      	ldrb	r3, [r7, #3]
 800a27e:	2b04      	cmp	r3, #4
 800a280:	d83b      	bhi.n	800a2fa <xTaskGenericNotify+0x102>
 800a282:	a201      	add	r2, pc, #4	@ (adr r2, 800a288 <xTaskGenericNotify+0x90>)
 800a284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a288:	0800a31b 	.word	0x0800a31b
 800a28c:	0800a29d 	.word	0x0800a29d
 800a290:	0800a2b9 	.word	0x0800a2b9
 800a294:	0800a2d1 	.word	0x0800a2d1
 800a298:	0800a2df 	.word	0x0800a2df
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800a29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29e:	68ba      	ldr	r2, [r7, #8]
 800a2a0:	3214      	adds	r2, #20
 800a2a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	ea42 0103 	orr.w	r1, r2, r3
 800a2ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	3214      	adds	r2, #20
 800a2b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a2b6:	e033      	b.n	800a320 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800a2b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	3214      	adds	r2, #20
 800a2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2c2:	1c59      	adds	r1, r3, #1
 800a2c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	3214      	adds	r2, #20
 800a2ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a2ce:	e027      	b.n	800a320 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a2d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2d2:	68ba      	ldr	r2, [r7, #8]
 800a2d4:	3214      	adds	r2, #20
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a2dc:	e020      	b.n	800a320 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a2de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2e2:	2b02      	cmp	r3, #2
 800a2e4:	d006      	beq.n	800a2f4 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	3214      	adds	r2, #20
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800a2f2:	e015      	b.n	800a320 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 800a2f8:	e012      	b.n	800a320 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800a2fa:	4b35      	ldr	r3, [pc, #212]	@ (800a3d0 <xTaskGenericNotify+0x1d8>)
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d00d      	beq.n	800a31e <xTaskGenericNotify+0x126>
        __asm volatile
 800a302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a306:	f383 8811 	msr	BASEPRI, r3
 800a30a:	f3bf 8f6f 	isb	sy
 800a30e:	f3bf 8f4f 	dsb	sy
 800a312:	61bb      	str	r3, [r7, #24]
    }
 800a314:	bf00      	nop
 800a316:	bf00      	nop
 800a318:	e7fd      	b.n	800a316 <xTaskGenericNotify+0x11e>
                    break;
 800a31a:	bf00      	nop
 800a31c:	e000      	b.n	800a320 <xTaskGenericNotify+0x128>

                    break;
 800a31e:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800a320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a322:	4618      	mov	r0, r3
 800a324:	f002 ff2c 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 800a328:	4601      	mov	r1, r0
 800a32a:	78fa      	ldrb	r2, [r7, #3]
 800a32c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a32e:	9300      	str	r3, [sp, #0]
 800a330:	4613      	mov	r3, r2
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	203e      	movs	r0, #62	@ 0x3e
 800a336:	f002 f95f 	bl	800c5f8 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a33a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a33e:	2b01      	cmp	r3, #1
 800a340:	d13e      	bne.n	800a3c0 <xTaskGenericNotify+0x1c8>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a344:	3304      	adds	r3, #4
 800a346:	4618      	mov	r0, r3
 800a348:	f7fd fea8 	bl	800809c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800a34c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a34e:	4618      	mov	r0, r3
 800a350:	f002 fe74 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a358:	2201      	movs	r2, #1
 800a35a:	409a      	lsls	r2, r3
 800a35c:	4b1d      	ldr	r3, [pc, #116]	@ (800a3d4 <xTaskGenericNotify+0x1dc>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	4313      	orrs	r3, r2
 800a362:	4a1c      	ldr	r2, [pc, #112]	@ (800a3d4 <xTaskGenericNotify+0x1dc>)
 800a364:	6013      	str	r3, [r2, #0]
 800a366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a36a:	4613      	mov	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4a19      	ldr	r2, [pc, #100]	@ (800a3d8 <xTaskGenericNotify+0x1e0>)
 800a374:	441a      	add	r2, r3
 800a376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a378:	3304      	adds	r3, #4
 800a37a:	4619      	mov	r1, r3
 800a37c:	4610      	mov	r0, r2
 800a37e:	f7fd fe30 	bl	8007fe2 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a384:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00b      	beq.n	800a3a2 <xTaskGenericNotify+0x1aa>
        __asm volatile
 800a38a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38e:	f383 8811 	msr	BASEPRI, r3
 800a392:	f3bf 8f6f 	isb	sy
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	617b      	str	r3, [r7, #20]
    }
 800a39c:	bf00      	nop
 800a39e:	bf00      	nop
 800a3a0:	e7fd      	b.n	800a39e <xTaskGenericNotify+0x1a6>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a3dc <xTaskGenericNotify+0x1e4>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d907      	bls.n	800a3c0 <xTaskGenericNotify+0x1c8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800a3b0:	4b0b      	ldr	r3, [pc, #44]	@ (800a3e0 <xTaskGenericNotify+0x1e8>)
 800a3b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800a3c0:	f000 ff26 	bl	800b210 <vPortExitCritical>

        return xReturn;
 800a3c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3730      	adds	r7, #48	@ 0x30
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}
 800a3ce:	bf00      	nop
 800a3d0:	200004b0 	.word	0x200004b0
 800a3d4:	200004b4 	.word	0x200004b4
 800a3d8:	200003d8 	.word	0x200003d8
 800a3dc:	200003d4 	.word	0x200003d4
 800a3e0:	e000ed04 	.word	0xe000ed04

0800a3e4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b092      	sub	sp, #72	@ 0x48
 800a3e8:	af02      	add	r7, sp, #8
 800a3ea:	60f8      	str	r0, [r7, #12]
 800a3ec:	60b9      	str	r1, [r7, #8]
 800a3ee:	607a      	str	r2, [r7, #4]
 800a3f0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d10b      	bne.n	800a414 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 800a3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a400:	f383 8811 	msr	BASEPRI, r3
 800a404:	f3bf 8f6f 	isb	sy
 800a408:	f3bf 8f4f 	dsb	sy
 800a40c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 800a40e:	bf00      	nop
 800a410:	bf00      	nop
 800a412:	e7fd      	b.n	800a410 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d00b      	beq.n	800a432 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 800a41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a41e:	f383 8811 	msr	BASEPRI, r3
 800a422:	f3bf 8f6f 	isb	sy
 800a426:	f3bf 8f4f 	dsb	sy
 800a42a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800a42c:	bf00      	nop
 800a42e:	bf00      	nop
 800a430:	e7fd      	b.n	800a42e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a432:	f000 ffab 	bl	800b38c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 800a43a:	f3ef 8211 	mrs	r2, BASEPRI
 800a43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a442:	f383 8811 	msr	BASEPRI, r3
 800a446:	f3bf 8f6f 	isb	sy
 800a44a:	f3bf 8f4f 	dsb	sy
 800a44e:	627a      	str	r2, [r7, #36]	@ 0x24
 800a450:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800a452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a454:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800a456:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d006      	beq.n	800a46a <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800a45c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a45e:	68ba      	ldr	r2, [r7, #8]
 800a460:	3214      	adds	r2, #20
 800a462:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a466:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a468:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800a46a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	4413      	add	r3, r2
 800a470:	3354      	adds	r3, #84	@ 0x54
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800a478:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a47a:	68bb      	ldr	r3, [r7, #8]
 800a47c:	4413      	add	r3, r2
 800a47e:	3354      	adds	r3, #84	@ 0x54
 800a480:	2202      	movs	r2, #2
 800a482:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800a484:	78fb      	ldrb	r3, [r7, #3]
 800a486:	2b04      	cmp	r3, #4
 800a488:	d83b      	bhi.n	800a502 <xTaskGenericNotifyFromISR+0x11e>
 800a48a:	a201      	add	r2, pc, #4	@ (adr r2, 800a490 <xTaskGenericNotifyFromISR+0xac>)
 800a48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a490:	0800a523 	.word	0x0800a523
 800a494:	0800a4a5 	.word	0x0800a4a5
 800a498:	0800a4c1 	.word	0x0800a4c1
 800a49c:	0800a4d9 	.word	0x0800a4d9
 800a4a0:	0800a4e7 	.word	0x0800a4e7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800a4a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a6:	68ba      	ldr	r2, [r7, #8]
 800a4a8:	3214      	adds	r2, #20
 800a4aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	ea42 0103 	orr.w	r1, r2, r3
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4b6:	68ba      	ldr	r2, [r7, #8]
 800a4b8:	3214      	adds	r2, #20
 800a4ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a4be:	e033      	b.n	800a528 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4c2:	68ba      	ldr	r2, [r7, #8]
 800a4c4:	3214      	adds	r2, #20
 800a4c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4ca:	1c59      	adds	r1, r3, #1
 800a4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ce:	68ba      	ldr	r2, [r7, #8]
 800a4d0:	3214      	adds	r2, #20
 800a4d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a4d6:	e027      	b.n	800a528 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4da:	68ba      	ldr	r2, [r7, #8]
 800a4dc:	3214      	adds	r2, #20
 800a4de:	6879      	ldr	r1, [r7, #4]
 800a4e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800a4e4:	e020      	b.n	800a528 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800a4e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d006      	beq.n	800a4fc <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800a4ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f0:	68ba      	ldr	r2, [r7, #8]
 800a4f2:	3214      	adds	r2, #20
 800a4f4:	6879      	ldr	r1, [r7, #4]
 800a4f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800a4fa:	e015      	b.n	800a528 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 800a500:	e012      	b.n	800a528 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800a502:	4b3e      	ldr	r3, [pc, #248]	@ (800a5fc <xTaskGenericNotifyFromISR+0x218>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	2b00      	cmp	r3, #0
 800a508:	d00d      	beq.n	800a526 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 800a50a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a50e:	f383 8811 	msr	BASEPRI, r3
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	f3bf 8f4f 	dsb	sy
 800a51a:	61fb      	str	r3, [r7, #28]
    }
 800a51c:	bf00      	nop
 800a51e:	bf00      	nop
 800a520:	e7fd      	b.n	800a51e <xTaskGenericNotifyFromISR+0x13a>
                    break;
 800a522:	bf00      	nop
 800a524:	e000      	b.n	800a528 <xTaskGenericNotifyFromISR+0x144>
                    break;
 800a526:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800a528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52a:	4618      	mov	r0, r3
 800a52c:	f002 fe28 	bl	800d180 <SEGGER_SYSVIEW_ShrinkId>
 800a530:	78f9      	ldrb	r1, [r7, #3]
 800a532:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a534:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800a536:	9201      	str	r2, [sp, #4]
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	460b      	mov	r3, r1
 800a53c:	687a      	ldr	r2, [r7, #4]
 800a53e:	4601      	mov	r1, r0
 800a540:	203f      	movs	r0, #63	@ 0x3f
 800a542:	f002 f8eb 	bl	800c71c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800a546:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d14a      	bne.n	800a5e4 <xTaskGenericNotifyFromISR+0x200>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800a54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a552:	2b00      	cmp	r3, #0
 800a554:	d00b      	beq.n	800a56e <xTaskGenericNotifyFromISR+0x18a>
        __asm volatile
 800a556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a55a:	f383 8811 	msr	BASEPRI, r3
 800a55e:	f3bf 8f6f 	isb	sy
 800a562:	f3bf 8f4f 	dsb	sy
 800a566:	61bb      	str	r3, [r7, #24]
    }
 800a568:	bf00      	nop
 800a56a:	bf00      	nop
 800a56c:	e7fd      	b.n	800a56a <xTaskGenericNotifyFromISR+0x186>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a56e:	4b24      	ldr	r3, [pc, #144]	@ (800a600 <xTaskGenericNotifyFromISR+0x21c>)
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d120      	bne.n	800a5b8 <xTaskGenericNotifyFromISR+0x1d4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a578:	3304      	adds	r3, #4
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7fd fd8e 	bl	800809c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800a580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a582:	4618      	mov	r0, r3
 800a584:	f002 fd5a 	bl	800d03c <SEGGER_SYSVIEW_OnTaskStartReady>
 800a588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a58c:	2201      	movs	r2, #1
 800a58e:	409a      	lsls	r2, r3
 800a590:	4b1c      	ldr	r3, [pc, #112]	@ (800a604 <xTaskGenericNotifyFromISR+0x220>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4313      	orrs	r3, r2
 800a596:	4a1b      	ldr	r2, [pc, #108]	@ (800a604 <xTaskGenericNotifyFromISR+0x220>)
 800a598:	6013      	str	r3, [r2, #0]
 800a59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a59e:	4613      	mov	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	4a18      	ldr	r2, [pc, #96]	@ (800a608 <xTaskGenericNotifyFromISR+0x224>)
 800a5a8:	441a      	add	r2, r3
 800a5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ac:	3304      	adds	r3, #4
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	4610      	mov	r0, r2
 800a5b2:	f7fd fd16 	bl	8007fe2 <vListInsertEnd>
 800a5b6:	e005      	b.n	800a5c4 <xTaskGenericNotifyFromISR+0x1e0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800a5b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5ba:	3318      	adds	r3, #24
 800a5bc:	4619      	mov	r1, r3
 800a5be:	4813      	ldr	r0, [pc, #76]	@ (800a60c <xTaskGenericNotifyFromISR+0x228>)
 800a5c0:	f7fd fd0f 	bl	8007fe2 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a5c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a5c8:	4b11      	ldr	r3, [pc, #68]	@ (800a610 <xTaskGenericNotifyFromISR+0x22c>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5ce:	429a      	cmp	r2, r3
 800a5d0:	d908      	bls.n	800a5e4 <xTaskGenericNotifyFromISR+0x200>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800a5d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d002      	beq.n	800a5de <xTaskGenericNotifyFromISR+0x1fa>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800a5d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a5da:	2201      	movs	r2, #1
 800a5dc:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800a5de:	4b0d      	ldr	r3, [pc, #52]	@ (800a614 <xTaskGenericNotifyFromISR+0x230>)
 800a5e0:	2201      	movs	r2, #1
 800a5e2:	601a      	str	r2, [r3, #0]
 800a5e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a5e6:	617b      	str	r3, [r7, #20]
        __asm volatile
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f383 8811 	msr	BASEPRI, r3
    }
 800a5ee:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800a5f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3740      	adds	r7, #64	@ 0x40
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	200004b0 	.word	0x200004b0
 800a600:	200004d4 	.word	0x200004d4
 800a604:	200004b4 	.word	0x200004b4
 800a608:	200003d8 	.word	0x200003d8
 800a60c:	2000046c 	.word	0x2000046c
 800a610:	200003d4 	.word	0x200003d4
 800a614:	200004c0 	.word	0x200004c0

0800a618 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b084      	sub	sp, #16
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800a622:	4b32      	ldr	r3, [pc, #200]	@ (800a6ec <prvAddCurrentTaskToDelayedList+0xd4>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a628:	4b31      	ldr	r3, [pc, #196]	@ (800a6f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	3304      	adds	r3, #4
 800a62e:	4618      	mov	r0, r3
 800a630:	f7fd fd34 	bl	800809c <uxListRemove>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d10b      	bne.n	800a652 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a63a:	4b2d      	ldr	r3, [pc, #180]	@ (800a6f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a640:	2201      	movs	r2, #1
 800a642:	fa02 f303 	lsl.w	r3, r2, r3
 800a646:	43da      	mvns	r2, r3
 800a648:	4b2a      	ldr	r3, [pc, #168]	@ (800a6f4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4013      	ands	r3, r2
 800a64e:	4a29      	ldr	r2, [pc, #164]	@ (800a6f4 <prvAddCurrentTaskToDelayedList+0xdc>)
 800a650:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a658:	d110      	bne.n	800a67c <prvAddCurrentTaskToDelayedList+0x64>
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00d      	beq.n	800a67c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800a660:	4b23      	ldr	r3, [pc, #140]	@ (800a6f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	211b      	movs	r1, #27
 800a666:	4618      	mov	r0, r3
 800a668:	f002 fd2a 	bl	800d0c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a66c:	4b20      	ldr	r3, [pc, #128]	@ (800a6f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	3304      	adds	r3, #4
 800a672:	4619      	mov	r1, r3
 800a674:	4820      	ldr	r0, [pc, #128]	@ (800a6f8 <prvAddCurrentTaskToDelayedList+0xe0>)
 800a676:	f7fd fcb4 	bl	8007fe2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800a67a:	e032      	b.n	800a6e2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800a67c:	68fa      	ldr	r2, [r7, #12]
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	4413      	add	r3, r2
 800a682:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a684:	4b1a      	ldr	r3, [pc, #104]	@ (800a6f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	68ba      	ldr	r2, [r7, #8]
 800a68a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800a68c:	68ba      	ldr	r2, [r7, #8]
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	429a      	cmp	r2, r3
 800a692:	d20f      	bcs.n	800a6b4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800a694:	4b16      	ldr	r3, [pc, #88]	@ (800a6f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2104      	movs	r1, #4
 800a69a:	4618      	mov	r0, r3
 800a69c:	f002 fd10 	bl	800d0c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6a0:	4b16      	ldr	r3, [pc, #88]	@ (800a6fc <prvAddCurrentTaskToDelayedList+0xe4>)
 800a6a2:	681a      	ldr	r2, [r3, #0]
 800a6a4:	4b12      	ldr	r3, [pc, #72]	@ (800a6f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	3304      	adds	r3, #4
 800a6aa:	4619      	mov	r1, r3
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	f7fd fcbc 	bl	800802a <vListInsert>
}
 800a6b2:	e016      	b.n	800a6e2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800a6b4:	4b0e      	ldr	r3, [pc, #56]	@ (800a6f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2104      	movs	r1, #4
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f002 fd00 	bl	800d0c0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a6c0:	4b0f      	ldr	r3, [pc, #60]	@ (800a700 <prvAddCurrentTaskToDelayedList+0xe8>)
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	4b0a      	ldr	r3, [pc, #40]	@ (800a6f0 <prvAddCurrentTaskToDelayedList+0xd8>)
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	3304      	adds	r3, #4
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	4610      	mov	r0, r2
 800a6ce:	f7fd fcac 	bl	800802a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800a6d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a704 <prvAddCurrentTaskToDelayedList+0xec>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	68ba      	ldr	r2, [r7, #8]
 800a6d8:	429a      	cmp	r2, r3
 800a6da:	d202      	bcs.n	800a6e2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800a6dc:	4a09      	ldr	r2, [pc, #36]	@ (800a704 <prvAddCurrentTaskToDelayedList+0xec>)
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	6013      	str	r3, [r2, #0]
}
 800a6e2:	bf00      	nop
 800a6e4:	3710      	adds	r7, #16
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	200004b0 	.word	0x200004b0
 800a6f0:	200003d4 	.word	0x200003d4
 800a6f4:	200004b4 	.word	0x200004b4
 800a6f8:	20000498 	.word	0x20000498
 800a6fc:	20000468 	.word	0x20000468
 800a700:	20000464 	.word	0x20000464
 800a704:	200004cc 	.word	0x200004cc

0800a708 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800a70e:	2300      	movs	r3, #0
 800a710:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800a712:	f000 fb3f 	bl	800ad94 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800a716:	4b12      	ldr	r3, [pc, #72]	@ (800a760 <xTimerCreateTimerTask+0x58>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d00b      	beq.n	800a736 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800a71e:	4b11      	ldr	r3, [pc, #68]	@ (800a764 <xTimerCreateTimerTask+0x5c>)
 800a720:	9301      	str	r3, [sp, #4]
 800a722:	2302      	movs	r3, #2
 800a724:	9300      	str	r3, [sp, #0]
 800a726:	2300      	movs	r3, #0
 800a728:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800a72c:	490e      	ldr	r1, [pc, #56]	@ (800a768 <xTimerCreateTimerTask+0x60>)
 800a72e:	480f      	ldr	r0, [pc, #60]	@ (800a76c <xTimerCreateTimerTask+0x64>)
 800a730:	f7fe fc98 	bl	8009064 <xTaskCreate>
 800a734:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10b      	bne.n	800a754 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800a73c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a740:	f383 8811 	msr	BASEPRI, r3
 800a744:	f3bf 8f6f 	isb	sy
 800a748:	f3bf 8f4f 	dsb	sy
 800a74c:	603b      	str	r3, [r7, #0]
    }
 800a74e:	bf00      	nop
 800a750:	bf00      	nop
 800a752:	e7fd      	b.n	800a750 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800a754:	687b      	ldr	r3, [r7, #4]
    }
 800a756:	4618      	mov	r0, r3
 800a758:	3708      	adds	r7, #8
 800a75a:	46bd      	mov	sp, r7
 800a75c:	bd80      	pop	{r7, pc}
 800a75e:	bf00      	nop
 800a760:	20000508 	.word	0x20000508
 800a764:	2000050c 	.word	0x2000050c
 800a768:	0800e8c8 	.word	0x0800e8c8
 800a76c:	0800a965 	.word	0x0800a965

0800a770 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800a770:	b580      	push	{r7, lr}
 800a772:	b088      	sub	sp, #32
 800a774:	af02      	add	r7, sp, #8
 800a776:	60f8      	str	r0, [r7, #12]
 800a778:	60b9      	str	r1, [r7, #8]
 800a77a:	607a      	str	r2, [r7, #4]
 800a77c:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800a77e:	202c      	movs	r0, #44	@ 0x2c
 800a780:	f000 fe46 	bl	800b410 <pvPortMalloc>
 800a784:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d00d      	beq.n	800a7a8 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	2200      	movs	r2, #0
 800a790:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	9301      	str	r3, [sp, #4]
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	9300      	str	r3, [sp, #0]
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	68b9      	ldr	r1, [r7, #8]
 800a7a2:	68f8      	ldr	r0, [r7, #12]
 800a7a4:	f000 f805 	bl	800a7b2 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800a7a8:	697b      	ldr	r3, [r7, #20]
        }
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b086      	sub	sp, #24
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	60f8      	str	r0, [r7, #12]
 800a7ba:	60b9      	str	r1, [r7, #8]
 800a7bc:	607a      	str	r2, [r7, #4]
 800a7be:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10b      	bne.n	800a7de <prvInitialiseNewTimer+0x2c>
        __asm volatile
 800a7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7ca:	f383 8811 	msr	BASEPRI, r3
 800a7ce:	f3bf 8f6f 	isb	sy
 800a7d2:	f3bf 8f4f 	dsb	sy
 800a7d6:	617b      	str	r3, [r7, #20]
    }
 800a7d8:	bf00      	nop
 800a7da:	bf00      	nop
 800a7dc:	e7fd      	b.n	800a7da <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800a7de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d01e      	beq.n	800a822 <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800a7e4:	f000 fad6 	bl	800ad94 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800a7e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ea:	68fa      	ldr	r2, [r7, #12]
 800a7ec:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800a7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800a7f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f6:	683a      	ldr	r2, [r7, #0]
 800a7f8:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7fc:	6a3a      	ldr	r2, [r7, #32]
 800a7fe:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800a800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a802:	3304      	adds	r3, #4
 800a804:	4618      	mov	r0, r3
 800a806:	f7fd fbdf 	bl	8007fc8 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d008      	beq.n	800a822 <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800a810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a812:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a816:	f043 0304 	orr.w	r3, r3, #4
 800a81a:	b2da      	uxtb	r2, r3
 800a81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a81e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800a822:	bf00      	nop
 800a824:	3718      	adds	r7, #24
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
	...

0800a82c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800a82c:	b580      	push	{r7, lr}
 800a82e:	b08a      	sub	sp, #40	@ 0x28
 800a830:	af00      	add	r7, sp, #0
 800a832:	60f8      	str	r0, [r7, #12]
 800a834:	60b9      	str	r1, [r7, #8]
 800a836:	607a      	str	r2, [r7, #4]
 800a838:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800a83a:	2300      	movs	r3, #0
 800a83c:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10b      	bne.n	800a85c <xTimerGenericCommand+0x30>
        __asm volatile
 800a844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a848:	f383 8811 	msr	BASEPRI, r3
 800a84c:	f3bf 8f6f 	isb	sy
 800a850:	f3bf 8f4f 	dsb	sy
 800a854:	623b      	str	r3, [r7, #32]
    }
 800a856:	bf00      	nop
 800a858:	bf00      	nop
 800a85a:	e7fd      	b.n	800a858 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800a85c:	4b19      	ldr	r3, [pc, #100]	@ (800a8c4 <xTimerGenericCommand+0x98>)
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d02a      	beq.n	800a8ba <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800a864:	68bb      	ldr	r3, [r7, #8]
 800a866:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	2b05      	cmp	r3, #5
 800a874:	dc18      	bgt.n	800a8a8 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a876:	f7ff fa55 	bl	8009d24 <xTaskGetSchedulerState>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b02      	cmp	r3, #2
 800a87e:	d109      	bne.n	800a894 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a880:	4b10      	ldr	r3, [pc, #64]	@ (800a8c4 <xTimerGenericCommand+0x98>)
 800a882:	6818      	ldr	r0, [r3, #0]
 800a884:	f107 0114 	add.w	r1, r7, #20
 800a888:	2300      	movs	r3, #0
 800a88a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a88c:	f7fd fd26 	bl	80082dc <xQueueGenericSend>
 800a890:	6278      	str	r0, [r7, #36]	@ 0x24
 800a892:	e012      	b.n	800a8ba <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a894:	4b0b      	ldr	r3, [pc, #44]	@ (800a8c4 <xTimerGenericCommand+0x98>)
 800a896:	6818      	ldr	r0, [r3, #0]
 800a898:	f107 0114 	add.w	r1, r7, #20
 800a89c:	2300      	movs	r3, #0
 800a89e:	2200      	movs	r2, #0
 800a8a0:	f7fd fd1c 	bl	80082dc <xQueueGenericSend>
 800a8a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800a8a6:	e008      	b.n	800a8ba <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a8a8:	4b06      	ldr	r3, [pc, #24]	@ (800a8c4 <xTimerGenericCommand+0x98>)
 800a8aa:	6818      	ldr	r0, [r3, #0]
 800a8ac:	f107 0114 	add.w	r1, r7, #20
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	f7fd fe3c 	bl	8008530 <xQueueGenericSendFromISR>
 800a8b8:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3728      	adds	r7, #40	@ 0x28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	20000508 	.word	0x20000508

0800a8c8 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b088      	sub	sp, #32
 800a8cc:	af02      	add	r7, sp, #8
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a8d2:	4b23      	ldr	r3, [pc, #140]	@ (800a960 <prvProcessExpiredTimer+0x98>)
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	68db      	ldr	r3, [r3, #12]
 800a8da:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	3304      	adds	r3, #4
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	f7fd fbdb 	bl	800809c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a8ec:	f003 0304 	and.w	r3, r3, #4
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d023      	beq.n	800a93c <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	699a      	ldr	r2, [r3, #24]
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	18d1      	adds	r1, r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	6978      	ldr	r0, [r7, #20]
 800a902:	f000 f8d5 	bl	800aab0 <prvInsertTimerInActiveList>
 800a906:	4603      	mov	r3, r0
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d020      	beq.n	800a94e <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a90c:	2300      	movs	r3, #0
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	2300      	movs	r3, #0
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	2100      	movs	r1, #0
 800a916:	6978      	ldr	r0, [r7, #20]
 800a918:	f7ff ff88 	bl	800a82c <xTimerGenericCommand>
 800a91c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800a91e:	693b      	ldr	r3, [r7, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d114      	bne.n	800a94e <prvProcessExpiredTimer+0x86>
        __asm volatile
 800a924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a928:	f383 8811 	msr	BASEPRI, r3
 800a92c:	f3bf 8f6f 	isb	sy
 800a930:	f3bf 8f4f 	dsb	sy
 800a934:	60fb      	str	r3, [r7, #12]
    }
 800a936:	bf00      	nop
 800a938:	bf00      	nop
 800a93a:	e7fd      	b.n	800a938 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a93c:	697b      	ldr	r3, [r7, #20]
 800a93e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a942:	f023 0301 	bic.w	r3, r3, #1
 800a946:	b2da      	uxtb	r2, r3
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	6978      	ldr	r0, [r7, #20]
 800a954:	4798      	blx	r3
    }
 800a956:	bf00      	nop
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	20000500 	.word	0x20000500

0800a964 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a96c:	f107 0308 	add.w	r3, r7, #8
 800a970:	4618      	mov	r0, r3
 800a972:	f000 f859 	bl	800aa28 <prvGetNextExpireTime>
 800a976:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	4619      	mov	r1, r3
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f805 	bl	800a98c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800a982:	f000 f8d7 	bl	800ab34 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a986:	bf00      	nop
 800a988:	e7f0      	b.n	800a96c <prvTimerTask+0x8>
	...

0800a98c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800a996:	f7fe fd2b 	bl	80093f0 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a99a:	f107 0308 	add.w	r3, r7, #8
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 f866 	bl	800aa70 <prvSampleTimeNow>
 800a9a4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d130      	bne.n	800aa0e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10a      	bne.n	800a9c8 <prvProcessTimerOrBlockTask+0x3c>
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	429a      	cmp	r2, r3
 800a9b8:	d806      	bhi.n	800a9c8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800a9ba:	f7fe fd27 	bl	800940c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a9be:	68f9      	ldr	r1, [r7, #12]
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7ff ff81 	bl	800a8c8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800a9c6:	e024      	b.n	800aa12 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d008      	beq.n	800a9e0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a9ce:	4b13      	ldr	r3, [pc, #76]	@ (800aa1c <prvProcessTimerOrBlockTask+0x90>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d101      	bne.n	800a9dc <prvProcessTimerOrBlockTask+0x50>
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e000      	b.n	800a9de <prvProcessTimerOrBlockTask+0x52>
 800a9dc:	2300      	movs	r3, #0
 800a9de:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a9e0:	4b0f      	ldr	r3, [pc, #60]	@ (800aa20 <prvProcessTimerOrBlockTask+0x94>)
 800a9e2:	6818      	ldr	r0, [r3, #0]
 800a9e4:	687a      	ldr	r2, [r7, #4]
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	1ad3      	subs	r3, r2, r3
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	f7fe fb05 	bl	8008ffc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800a9f2:	f7fe fd0b 	bl	800940c <xTaskResumeAll>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10a      	bne.n	800aa12 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800a9fc:	4b09      	ldr	r3, [pc, #36]	@ (800aa24 <prvProcessTimerOrBlockTask+0x98>)
 800a9fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa02:	601a      	str	r2, [r3, #0]
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	f3bf 8f6f 	isb	sy
    }
 800aa0c:	e001      	b.n	800aa12 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800aa0e:	f7fe fcfd 	bl	800940c <xTaskResumeAll>
    }
 800aa12:	bf00      	nop
 800aa14:	3710      	adds	r7, #16
 800aa16:	46bd      	mov	sp, r7
 800aa18:	bd80      	pop	{r7, pc}
 800aa1a:	bf00      	nop
 800aa1c:	20000504 	.word	0x20000504
 800aa20:	20000508 	.word	0x20000508
 800aa24:	e000ed04 	.word	0xe000ed04

0800aa28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800aa28:	b480      	push	{r7}
 800aa2a:	b085      	sub	sp, #20
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800aa30:	4b0e      	ldr	r3, [pc, #56]	@ (800aa6c <prvGetNextExpireTime+0x44>)
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d101      	bne.n	800aa3e <prvGetNextExpireTime+0x16>
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	e000      	b.n	800aa40 <prvGetNextExpireTime+0x18>
 800aa3e:	2200      	movs	r2, #0
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d105      	bne.n	800aa58 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa4c:	4b07      	ldr	r3, [pc, #28]	@ (800aa6c <prvGetNextExpireTime+0x44>)
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	e001      	b.n	800aa5c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
    }
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3714      	adds	r7, #20
 800aa62:	46bd      	mov	sp, r7
 800aa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	20000500 	.word	0x20000500

0800aa70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b084      	sub	sp, #16
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800aa78:	f7fe fd6a 	bl	8009550 <xTaskGetTickCount>
 800aa7c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800aa7e:	4b0b      	ldr	r3, [pc, #44]	@ (800aaac <prvSampleTimeNow+0x3c>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d205      	bcs.n	800aa94 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800aa88:	f000 f91e 	bl	800acc8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	601a      	str	r2, [r3, #0]
 800aa92:	e002      	b.n	800aa9a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800aa9a:	4a04      	ldr	r2, [pc, #16]	@ (800aaac <prvSampleTimeNow+0x3c>)
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
    }
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3710      	adds	r7, #16
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20000510 	.word	0x20000510

0800aab0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	607a      	str	r2, [r7, #4]
 800aabc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800aabe:	2300      	movs	r3, #0
 800aac0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	68ba      	ldr	r2, [r7, #8]
 800aac6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800aace:	68ba      	ldr	r2, [r7, #8]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d812      	bhi.n	800aafc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aad6:	687a      	ldr	r2, [r7, #4]
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	1ad2      	subs	r2, r2, r3
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	699b      	ldr	r3, [r3, #24]
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d302      	bcc.n	800aaea <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800aae4:	2301      	movs	r3, #1
 800aae6:	617b      	str	r3, [r7, #20]
 800aae8:	e01b      	b.n	800ab22 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800aaea:	4b10      	ldr	r3, [pc, #64]	@ (800ab2c <prvInsertTimerInActiveList+0x7c>)
 800aaec:	681a      	ldr	r2, [r3, #0]
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	3304      	adds	r3, #4
 800aaf2:	4619      	mov	r1, r3
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	f7fd fa98 	bl	800802a <vListInsert>
 800aafa:	e012      	b.n	800ab22 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d206      	bcs.n	800ab12 <prvInsertTimerInActiveList+0x62>
 800ab04:	68ba      	ldr	r2, [r7, #8]
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	429a      	cmp	r2, r3
 800ab0a:	d302      	bcc.n	800ab12 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	617b      	str	r3, [r7, #20]
 800ab10:	e007      	b.n	800ab22 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab12:	4b07      	ldr	r3, [pc, #28]	@ (800ab30 <prvInsertTimerInActiveList+0x80>)
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	3304      	adds	r3, #4
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	4610      	mov	r0, r2
 800ab1e:	f7fd fa84 	bl	800802a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800ab22:	697b      	ldr	r3, [r7, #20]
    }
 800ab24:	4618      	mov	r0, r3
 800ab26:	3718      	adds	r7, #24
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	bd80      	pop	{r7, pc}
 800ab2c:	20000504 	.word	0x20000504
 800ab30:	20000500 	.word	0x20000500

0800ab34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b08c      	sub	sp, #48	@ 0x30
 800ab38:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab3a:	e0b2      	b.n	800aca2 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f2c0 80af 	blt.w	800aca2 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ab48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4a:	695b      	ldr	r3, [r3, #20]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d004      	beq.n	800ab5a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab52:	3304      	adds	r3, #4
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7fd faa1 	bl	800809c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ab5a:	1d3b      	adds	r3, r7, #4
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f7ff ff87 	bl	800aa70 <prvSampleTimeNow>
 800ab62:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b09      	cmp	r3, #9
 800ab68:	f200 8098 	bhi.w	800ac9c <prvProcessReceivedCommands+0x168>
 800ab6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ab74 <prvProcessReceivedCommands+0x40>)
 800ab6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab72:	bf00      	nop
 800ab74:	0800ab9d 	.word	0x0800ab9d
 800ab78:	0800ab9d 	.word	0x0800ab9d
 800ab7c:	0800ab9d 	.word	0x0800ab9d
 800ab80:	0800ac13 	.word	0x0800ac13
 800ab84:	0800ac27 	.word	0x0800ac27
 800ab88:	0800ac73 	.word	0x0800ac73
 800ab8c:	0800ab9d 	.word	0x0800ab9d
 800ab90:	0800ab9d 	.word	0x0800ab9d
 800ab94:	0800ac13 	.word	0x0800ac13
 800ab98:	0800ac27 	.word	0x0800ac27
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aba2:	f043 0301 	orr.w	r3, r3, #1
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abaa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abb2:	699b      	ldr	r3, [r3, #24]
 800abb4:	18d1      	adds	r1, r2, r3
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	6a3a      	ldr	r2, [r7, #32]
 800abba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800abbc:	f7ff ff78 	bl	800aab0 <prvInsertTimerInActiveList>
 800abc0:	4603      	mov	r3, r0
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d06c      	beq.n	800aca0 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800abcc:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abd4:	f003 0304 	and.w	r3, r3, #4
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d061      	beq.n	800aca0 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abe0:	699b      	ldr	r3, [r3, #24]
 800abe2:	441a      	add	r2, r3
 800abe4:	2300      	movs	r3, #0
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	2300      	movs	r3, #0
 800abea:	2100      	movs	r1, #0
 800abec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800abee:	f7ff fe1d 	bl	800a82c <xTimerGenericCommand>
 800abf2:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d152      	bne.n	800aca0 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800abfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfe:	f383 8811 	msr	BASEPRI, r3
 800ac02:	f3bf 8f6f 	isb	sy
 800ac06:	f3bf 8f4f 	dsb	sy
 800ac0a:	61bb      	str	r3, [r7, #24]
    }
 800ac0c:	bf00      	nop
 800ac0e:	bf00      	nop
 800ac10:	e7fd      	b.n	800ac0e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac18:	f023 0301 	bic.w	r3, r3, #1
 800ac1c:	b2da      	uxtb	r2, r3
 800ac1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac20:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800ac24:	e03d      	b.n	800aca2 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ac26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac2c:	f043 0301 	orr.w	r3, r3, #1
 800ac30:	b2da      	uxtb	r2, r3
 800ac32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac3c:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ac3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10b      	bne.n	800ac5e <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800ac46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	617b      	str	r3, [r7, #20]
    }
 800ac58:	bf00      	nop
 800ac5a:	bf00      	nop
 800ac5c:	e7fd      	b.n	800ac5a <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac60:	699a      	ldr	r2, [r3, #24]
 800ac62:	6a3b      	ldr	r3, [r7, #32]
 800ac64:	18d1      	adds	r1, r2, r3
 800ac66:	6a3b      	ldr	r3, [r7, #32]
 800ac68:	6a3a      	ldr	r2, [r7, #32]
 800ac6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac6c:	f7ff ff20 	bl	800aab0 <prvInsertTimerInActiveList>
                        break;
 800ac70:	e017      	b.n	800aca2 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ac72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac78:	f003 0302 	and.w	r3, r3, #2
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d103      	bne.n	800ac88 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800ac80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac82:	f000 fca7 	bl	800b5d4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800ac86:	e00c      	b.n	800aca2 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ac88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ac8e:	f023 0301 	bic.w	r3, r3, #1
 800ac92:	b2da      	uxtb	r2, r3
 800ac94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800ac9a:	e002      	b.n	800aca2 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800ac9c:	bf00      	nop
 800ac9e:	e000      	b.n	800aca2 <prvProcessReceivedCommands+0x16e>
                        break;
 800aca0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aca2:	4b08      	ldr	r3, [pc, #32]	@ (800acc4 <prvProcessReceivedCommands+0x190>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f107 0108 	add.w	r1, r7, #8
 800acaa:	2200      	movs	r2, #0
 800acac:	4618      	mov	r0, r3
 800acae:	f7fd fd01 	bl	80086b4 <xQueueReceive>
 800acb2:	4603      	mov	r3, r0
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f47f af41 	bne.w	800ab3c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	3728      	adds	r7, #40	@ 0x28
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	20000508 	.word	0x20000508

0800acc8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800acc8:	b580      	push	{r7, lr}
 800acca:	b088      	sub	sp, #32
 800accc:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800acce:	e049      	b.n	800ad64 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800acd0:	4b2e      	ldr	r3, [pc, #184]	@ (800ad8c <prvSwitchTimerLists+0xc4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800acda:	4b2c      	ldr	r3, [pc, #176]	@ (800ad8c <prvSwitchTimerLists+0xc4>)
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68db      	ldr	r3, [r3, #12]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	3304      	adds	r3, #4
 800ace8:	4618      	mov	r0, r3
 800acea:	f7fd f9d7 	bl	800809c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	6a1b      	ldr	r3, [r3, #32]
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800acfc:	f003 0304 	and.w	r3, r3, #4
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d02f      	beq.n	800ad64 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	699b      	ldr	r3, [r3, #24]
 800ad08:	693a      	ldr	r2, [r7, #16]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	693b      	ldr	r3, [r7, #16]
 800ad12:	429a      	cmp	r2, r3
 800ad14:	d90e      	bls.n	800ad34 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	68ba      	ldr	r2, [r7, #8]
 800ad1a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	68fa      	ldr	r2, [r7, #12]
 800ad20:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad22:	4b1a      	ldr	r3, [pc, #104]	@ (800ad8c <prvSwitchTimerLists+0xc4>)
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	3304      	adds	r3, #4
 800ad2a:	4619      	mov	r1, r3
 800ad2c:	4610      	mov	r0, r2
 800ad2e:	f7fd f97c 	bl	800802a <vListInsert>
 800ad32:	e017      	b.n	800ad64 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ad34:	2300      	movs	r3, #0
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	2300      	movs	r3, #0
 800ad3a:	693a      	ldr	r2, [r7, #16]
 800ad3c:	2100      	movs	r1, #0
 800ad3e:	68f8      	ldr	r0, [r7, #12]
 800ad40:	f7ff fd74 	bl	800a82c <xTimerGenericCommand>
 800ad44:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d10b      	bne.n	800ad64 <prvSwitchTimerLists+0x9c>
        __asm volatile
 800ad4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad50:	f383 8811 	msr	BASEPRI, r3
 800ad54:	f3bf 8f6f 	isb	sy
 800ad58:	f3bf 8f4f 	dsb	sy
 800ad5c:	603b      	str	r3, [r7, #0]
    }
 800ad5e:	bf00      	nop
 800ad60:	bf00      	nop
 800ad62:	e7fd      	b.n	800ad60 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ad64:	4b09      	ldr	r3, [pc, #36]	@ (800ad8c <prvSwitchTimerLists+0xc4>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d1b0      	bne.n	800acd0 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800ad6e:	4b07      	ldr	r3, [pc, #28]	@ (800ad8c <prvSwitchTimerLists+0xc4>)
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800ad74:	4b06      	ldr	r3, [pc, #24]	@ (800ad90 <prvSwitchTimerLists+0xc8>)
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a04      	ldr	r2, [pc, #16]	@ (800ad8c <prvSwitchTimerLists+0xc4>)
 800ad7a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800ad7c:	4a04      	ldr	r2, [pc, #16]	@ (800ad90 <prvSwitchTimerLists+0xc8>)
 800ad7e:	697b      	ldr	r3, [r7, #20]
 800ad80:	6013      	str	r3, [r2, #0]
    }
 800ad82:	bf00      	nop
 800ad84:	3718      	adds	r7, #24
 800ad86:	46bd      	mov	sp, r7
 800ad88:	bd80      	pop	{r7, pc}
 800ad8a:	bf00      	nop
 800ad8c:	20000500 	.word	0x20000500
 800ad90:	20000504 	.word	0x20000504

0800ad94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800ad94:	b580      	push	{r7, lr}
 800ad96:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800ad98:	f000 fa08 	bl	800b1ac <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800ad9c:	4b12      	ldr	r3, [pc, #72]	@ (800ade8 <prvCheckForValidListAndQueue+0x54>)
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d11d      	bne.n	800ade0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800ada4:	4811      	ldr	r0, [pc, #68]	@ (800adec <prvCheckForValidListAndQueue+0x58>)
 800ada6:	f7fd f8ef 	bl	8007f88 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800adaa:	4811      	ldr	r0, [pc, #68]	@ (800adf0 <prvCheckForValidListAndQueue+0x5c>)
 800adac:	f7fd f8ec 	bl	8007f88 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800adb0:	4b10      	ldr	r3, [pc, #64]	@ (800adf4 <prvCheckForValidListAndQueue+0x60>)
 800adb2:	4a0e      	ldr	r2, [pc, #56]	@ (800adec <prvCheckForValidListAndQueue+0x58>)
 800adb4:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800adb6:	4b10      	ldr	r3, [pc, #64]	@ (800adf8 <prvCheckForValidListAndQueue+0x64>)
 800adb8:	4a0d      	ldr	r2, [pc, #52]	@ (800adf0 <prvCheckForValidListAndQueue+0x5c>)
 800adba:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800adbc:	2200      	movs	r2, #0
 800adbe:	210c      	movs	r1, #12
 800adc0:	200a      	movs	r0, #10
 800adc2:	f7fd f9ff 	bl	80081c4 <xQueueGenericCreate>
 800adc6:	4603      	mov	r3, r0
 800adc8:	4a07      	ldr	r2, [pc, #28]	@ (800ade8 <prvCheckForValidListAndQueue+0x54>)
 800adca:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800adcc:	4b06      	ldr	r3, [pc, #24]	@ (800ade8 <prvCheckForValidListAndQueue+0x54>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d005      	beq.n	800ade0 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800add4:	4b04      	ldr	r3, [pc, #16]	@ (800ade8 <prvCheckForValidListAndQueue+0x54>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	4908      	ldr	r1, [pc, #32]	@ (800adfc <prvCheckForValidListAndQueue+0x68>)
 800adda:	4618      	mov	r0, r3
 800addc:	f7fe f8dc 	bl	8008f98 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800ade0:	f000 fa16 	bl	800b210 <vPortExitCritical>
    }
 800ade4:	bf00      	nop
 800ade6:	bd80      	pop	{r7, pc}
 800ade8:	20000508 	.word	0x20000508
 800adec:	200004d8 	.word	0x200004d8
 800adf0:	200004ec 	.word	0x200004ec
 800adf4:	20000500 	.word	0x20000500
 800adf8:	20000504 	.word	0x20000504
 800adfc:	0800e8d0 	.word	0x0800e8d0

0800ae00 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b086      	sub	sp, #24
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d10b      	bne.n	800ae2a <pvTimerGetTimerID+0x2a>
        __asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	60fb      	str	r3, [r7, #12]
    }
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop
 800ae28:	e7fd      	b.n	800ae26 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800ae2a:	f000 f9bf 	bl	800b1ac <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	69db      	ldr	r3, [r3, #28]
 800ae32:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 800ae34:	f000 f9ec 	bl	800b210 <vPortExitCritical>

        return pvReturn;
 800ae38:	693b      	ldr	r3, [r7, #16]
    }
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	3718      	adds	r7, #24
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	bd80      	pop	{r7, pc}
	...

0800ae44 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800ae44:	b480      	push	{r7}
 800ae46:	b085      	sub	sp, #20
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	60f8      	str	r0, [r7, #12]
 800ae4c:	60b9      	str	r1, [r7, #8]
 800ae4e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	3b04      	subs	r3, #4
 800ae54:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800ae5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	3b04      	subs	r3, #4
 800ae62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	f023 0201 	bic.w	r2, r3, #1
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	3b04      	subs	r3, #4
 800ae72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800ae74:	4a0c      	ldr	r2, [pc, #48]	@ (800aea8 <pxPortInitialiseStack+0x64>)
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	3b14      	subs	r3, #20
 800ae7e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	3b04      	subs	r3, #4
 800ae8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f06f 0202 	mvn.w	r2, #2
 800ae92:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	3b20      	subs	r3, #32
 800ae98:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	3714      	adds	r7, #20
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	0800aead 	.word	0x0800aead

0800aeac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800aeac:	b480      	push	{r7}
 800aeae:	b085      	sub	sp, #20
 800aeb0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800aeb6:	4b13      	ldr	r3, [pc, #76]	@ (800af04 <prvTaskExitError+0x58>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aebe:	d00b      	beq.n	800aed8 <prvTaskExitError+0x2c>
        __asm volatile
 800aec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aec4:	f383 8811 	msr	BASEPRI, r3
 800aec8:	f3bf 8f6f 	isb	sy
 800aecc:	f3bf 8f4f 	dsb	sy
 800aed0:	60fb      	str	r3, [r7, #12]
    }
 800aed2:	bf00      	nop
 800aed4:	bf00      	nop
 800aed6:	e7fd      	b.n	800aed4 <prvTaskExitError+0x28>
        __asm volatile
 800aed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aedc:	f383 8811 	msr	BASEPRI, r3
 800aee0:	f3bf 8f6f 	isb	sy
 800aee4:	f3bf 8f4f 	dsb	sy
 800aee8:	60bb      	str	r3, [r7, #8]
    }
 800aeea:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800aeec:	bf00      	nop
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d0fc      	beq.n	800aeee <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	20000080 	.word	0x20000080
	...

0800af10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800af10:	4b07      	ldr	r3, [pc, #28]	@ (800af30 <pxCurrentTCBConst2>)
 800af12:	6819      	ldr	r1, [r3, #0]
 800af14:	6808      	ldr	r0, [r1, #0]
 800af16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af1a:	f380 8809 	msr	PSP, r0
 800af1e:	f3bf 8f6f 	isb	sy
 800af22:	f04f 0000 	mov.w	r0, #0
 800af26:	f380 8811 	msr	BASEPRI, r0
 800af2a:	4770      	bx	lr
 800af2c:	f3af 8000 	nop.w

0800af30 <pxCurrentTCBConst2>:
 800af30:	200003d4 	.word	0x200003d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop

0800af38 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800af38:	4808      	ldr	r0, [pc, #32]	@ (800af5c <prvPortStartFirstTask+0x24>)
 800af3a:	6800      	ldr	r0, [r0, #0]
 800af3c:	6800      	ldr	r0, [r0, #0]
 800af3e:	f380 8808 	msr	MSP, r0
 800af42:	f04f 0000 	mov.w	r0, #0
 800af46:	f380 8814 	msr	CONTROL, r0
 800af4a:	b662      	cpsie	i
 800af4c:	b661      	cpsie	f
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	df00      	svc	0
 800af58:	bf00      	nop
 800af5a:	0000      	.short	0x0000
 800af5c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800af60:	bf00      	nop
 800af62:	bf00      	nop

0800af64 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b086      	sub	sp, #24
 800af68:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800af6a:	4b47      	ldr	r3, [pc, #284]	@ (800b088 <xPortStartScheduler+0x124>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4a47      	ldr	r2, [pc, #284]	@ (800b08c <xPortStartScheduler+0x128>)
 800af70:	4293      	cmp	r3, r2
 800af72:	d10b      	bne.n	800af8c <xPortStartScheduler+0x28>
        __asm volatile
 800af74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af78:	f383 8811 	msr	BASEPRI, r3
 800af7c:	f3bf 8f6f 	isb	sy
 800af80:	f3bf 8f4f 	dsb	sy
 800af84:	613b      	str	r3, [r7, #16]
    }
 800af86:	bf00      	nop
 800af88:	bf00      	nop
 800af8a:	e7fd      	b.n	800af88 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800af8c:	4b3e      	ldr	r3, [pc, #248]	@ (800b088 <xPortStartScheduler+0x124>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a3f      	ldr	r2, [pc, #252]	@ (800b090 <xPortStartScheduler+0x12c>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d10b      	bne.n	800afae <xPortStartScheduler+0x4a>
        __asm volatile
 800af96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af9a:	f383 8811 	msr	BASEPRI, r3
 800af9e:	f3bf 8f6f 	isb	sy
 800afa2:	f3bf 8f4f 	dsb	sy
 800afa6:	60fb      	str	r3, [r7, #12]
    }
 800afa8:	bf00      	nop
 800afaa:	bf00      	nop
 800afac:	e7fd      	b.n	800afaa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800afae:	4b39      	ldr	r3, [pc, #228]	@ (800b094 <xPortStartScheduler+0x130>)
 800afb0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800afb2:	697b      	ldr	r3, [r7, #20]
 800afb4:	781b      	ldrb	r3, [r3, #0]
 800afb6:	b2db      	uxtb	r3, r3
 800afb8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	22ff      	movs	r2, #255	@ 0xff
 800afbe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800afc0:	697b      	ldr	r3, [r7, #20]
 800afc2:	781b      	ldrb	r3, [r3, #0]
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800afc8:	78fb      	ldrb	r3, [r7, #3]
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800afd0:	b2da      	uxtb	r2, r3
 800afd2:	4b31      	ldr	r3, [pc, #196]	@ (800b098 <xPortStartScheduler+0x134>)
 800afd4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800afd6:	4b31      	ldr	r3, [pc, #196]	@ (800b09c <xPortStartScheduler+0x138>)
 800afd8:	2207      	movs	r2, #7
 800afda:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800afdc:	e009      	b.n	800aff2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800afde:	4b2f      	ldr	r3, [pc, #188]	@ (800b09c <xPortStartScheduler+0x138>)
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	4a2d      	ldr	r2, [pc, #180]	@ (800b09c <xPortStartScheduler+0x138>)
 800afe6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800afe8:	78fb      	ldrb	r3, [r7, #3]
 800afea:	b2db      	uxtb	r3, r3
 800afec:	005b      	lsls	r3, r3, #1
 800afee:	b2db      	uxtb	r3, r3
 800aff0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aff2:	78fb      	ldrb	r3, [r7, #3]
 800aff4:	b2db      	uxtb	r3, r3
 800aff6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800affa:	2b80      	cmp	r3, #128	@ 0x80
 800affc:	d0ef      	beq.n	800afde <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800affe:	4b27      	ldr	r3, [pc, #156]	@ (800b09c <xPortStartScheduler+0x138>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	f1c3 0307 	rsb	r3, r3, #7
 800b006:	2b04      	cmp	r3, #4
 800b008:	d00b      	beq.n	800b022 <xPortStartScheduler+0xbe>
        __asm volatile
 800b00a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b00e:	f383 8811 	msr	BASEPRI, r3
 800b012:	f3bf 8f6f 	isb	sy
 800b016:	f3bf 8f4f 	dsb	sy
 800b01a:	60bb      	str	r3, [r7, #8]
    }
 800b01c:	bf00      	nop
 800b01e:	bf00      	nop
 800b020:	e7fd      	b.n	800b01e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b022:	4b1e      	ldr	r3, [pc, #120]	@ (800b09c <xPortStartScheduler+0x138>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	021b      	lsls	r3, r3, #8
 800b028:	4a1c      	ldr	r2, [pc, #112]	@ (800b09c <xPortStartScheduler+0x138>)
 800b02a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b02c:	4b1b      	ldr	r3, [pc, #108]	@ (800b09c <xPortStartScheduler+0x138>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b034:	4a19      	ldr	r2, [pc, #100]	@ (800b09c <xPortStartScheduler+0x138>)
 800b036:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	697b      	ldr	r3, [r7, #20]
 800b03e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b040:	4b17      	ldr	r3, [pc, #92]	@ (800b0a0 <xPortStartScheduler+0x13c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a16      	ldr	r2, [pc, #88]	@ (800b0a0 <xPortStartScheduler+0x13c>)
 800b046:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b04a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b04c:	4b14      	ldr	r3, [pc, #80]	@ (800b0a0 <xPortStartScheduler+0x13c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a13      	ldr	r2, [pc, #76]	@ (800b0a0 <xPortStartScheduler+0x13c>)
 800b052:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b056:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b058:	f000 f968 	bl	800b32c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b05c:	4b11      	ldr	r3, [pc, #68]	@ (800b0a4 <xPortStartScheduler+0x140>)
 800b05e:	2200      	movs	r2, #0
 800b060:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b062:	f000 f987 	bl	800b374 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b066:	4b10      	ldr	r3, [pc, #64]	@ (800b0a8 <xPortStartScheduler+0x144>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a0f      	ldr	r2, [pc, #60]	@ (800b0a8 <xPortStartScheduler+0x144>)
 800b06c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b070:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b072:	f7ff ff61 	bl	800af38 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b076:	f7fe fb4b 	bl	8009710 <vTaskSwitchContext>
    prvTaskExitError();
 800b07a:	f7ff ff17 	bl	800aeac <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3718      	adds	r7, #24
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	e000ed00 	.word	0xe000ed00
 800b08c:	410fc271 	.word	0x410fc271
 800b090:	410fc270 	.word	0x410fc270
 800b094:	e000e400 	.word	0xe000e400
 800b098:	20000514 	.word	0x20000514
 800b09c:	20000518 	.word	0x20000518
 800b0a0:	e000ed20 	.word	0xe000ed20
 800b0a4:	20000080 	.word	0x20000080
 800b0a8:	e000ef34 	.word	0xe000ef34

0800b0ac <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b087      	sub	sp, #28
 800b0b0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b0b2:	4b38      	ldr	r3, [pc, #224]	@ (800b194 <vInitPrioGroupValue+0xe8>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a38      	ldr	r2, [pc, #224]	@ (800b198 <vInitPrioGroupValue+0xec>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d10b      	bne.n	800b0d4 <vInitPrioGroupValue+0x28>
        __asm volatile
 800b0bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0c0:	f383 8811 	msr	BASEPRI, r3
 800b0c4:	f3bf 8f6f 	isb	sy
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	613b      	str	r3, [r7, #16]
    }
 800b0ce:	bf00      	nop
 800b0d0:	bf00      	nop
 800b0d2:	e7fd      	b.n	800b0d0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b0d4:	4b2f      	ldr	r3, [pc, #188]	@ (800b194 <vInitPrioGroupValue+0xe8>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a30      	ldr	r2, [pc, #192]	@ (800b19c <vInitPrioGroupValue+0xf0>)
 800b0da:	4293      	cmp	r3, r2
 800b0dc:	d10b      	bne.n	800b0f6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	60fb      	str	r3, [r7, #12]
    }
 800b0f0:	bf00      	nop
 800b0f2:	bf00      	nop
 800b0f4:	e7fd      	b.n	800b0f2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b0f6:	4b2a      	ldr	r3, [pc, #168]	@ (800b1a0 <vInitPrioGroupValue+0xf4>)
 800b0f8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	b2db      	uxtb	r3, r3
 800b100:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	22ff      	movs	r2, #255	@ 0xff
 800b106:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	781b      	ldrb	r3, [r3, #0]
 800b10c:	b2db      	uxtb	r3, r3
 800b10e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b110:	78fb      	ldrb	r3, [r7, #3]
 800b112:	b2db      	uxtb	r3, r3
 800b114:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	4b22      	ldr	r3, [pc, #136]	@ (800b1a4 <vInitPrioGroupValue+0xf8>)
 800b11c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b11e:	4b22      	ldr	r3, [pc, #136]	@ (800b1a8 <vInitPrioGroupValue+0xfc>)
 800b120:	2207      	movs	r2, #7
 800b122:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b124:	e009      	b.n	800b13a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800b126:	4b20      	ldr	r3, [pc, #128]	@ (800b1a8 <vInitPrioGroupValue+0xfc>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3b01      	subs	r3, #1
 800b12c:	4a1e      	ldr	r2, [pc, #120]	@ (800b1a8 <vInitPrioGroupValue+0xfc>)
 800b12e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b130:	78fb      	ldrb	r3, [r7, #3]
 800b132:	b2db      	uxtb	r3, r3
 800b134:	005b      	lsls	r3, r3, #1
 800b136:	b2db      	uxtb	r3, r3
 800b138:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b13a:	78fb      	ldrb	r3, [r7, #3]
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b142:	2b80      	cmp	r3, #128	@ 0x80
 800b144:	d0ef      	beq.n	800b126 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b146:	4b18      	ldr	r3, [pc, #96]	@ (800b1a8 <vInitPrioGroupValue+0xfc>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	f1c3 0307 	rsb	r3, r3, #7
 800b14e:	2b04      	cmp	r3, #4
 800b150:	d00b      	beq.n	800b16a <vInitPrioGroupValue+0xbe>
        __asm volatile
 800b152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b156:	f383 8811 	msr	BASEPRI, r3
 800b15a:	f3bf 8f6f 	isb	sy
 800b15e:	f3bf 8f4f 	dsb	sy
 800b162:	60bb      	str	r3, [r7, #8]
    }
 800b164:	bf00      	nop
 800b166:	bf00      	nop
 800b168:	e7fd      	b.n	800b166 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b16a:	4b0f      	ldr	r3, [pc, #60]	@ (800b1a8 <vInitPrioGroupValue+0xfc>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	021b      	lsls	r3, r3, #8
 800b170:	4a0d      	ldr	r2, [pc, #52]	@ (800b1a8 <vInitPrioGroupValue+0xfc>)
 800b172:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b174:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a8 <vInitPrioGroupValue+0xfc>)
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b17c:	4a0a      	ldr	r2, [pc, #40]	@ (800b1a8 <vInitPrioGroupValue+0xfc>)
 800b17e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	b2da      	uxtb	r2, r3
 800b184:	697b      	ldr	r3, [r7, #20]
 800b186:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800b188:	bf00      	nop
 800b18a:	371c      	adds	r7, #28
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	e000ed00 	.word	0xe000ed00
 800b198:	410fc271 	.word	0x410fc271
 800b19c:	410fc270 	.word	0x410fc270
 800b1a0:	e000e400 	.word	0xe000e400
 800b1a4:	20000514 	.word	0x20000514
 800b1a8:	20000518 	.word	0x20000518

0800b1ac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	b083      	sub	sp, #12
 800b1b0:	af00      	add	r7, sp, #0
        __asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	607b      	str	r3, [r7, #4]
    }
 800b1c4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800b1c6:	4b10      	ldr	r3, [pc, #64]	@ (800b208 <vPortEnterCritical+0x5c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	4a0e      	ldr	r2, [pc, #56]	@ (800b208 <vPortEnterCritical+0x5c>)
 800b1ce:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800b1d0:	4b0d      	ldr	r3, [pc, #52]	@ (800b208 <vPortEnterCritical+0x5c>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d110      	bne.n	800b1fa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b1d8:	4b0c      	ldr	r3, [pc, #48]	@ (800b20c <vPortEnterCritical+0x60>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00b      	beq.n	800b1fa <vPortEnterCritical+0x4e>
        __asm volatile
 800b1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e6:	f383 8811 	msr	BASEPRI, r3
 800b1ea:	f3bf 8f6f 	isb	sy
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	603b      	str	r3, [r7, #0]
    }
 800b1f4:	bf00      	nop
 800b1f6:	bf00      	nop
 800b1f8:	e7fd      	b.n	800b1f6 <vPortEnterCritical+0x4a>
    }
}
 800b1fa:	bf00      	nop
 800b1fc:	370c      	adds	r7, #12
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	20000080 	.word	0x20000080
 800b20c:	e000ed04 	.word	0xe000ed04

0800b210 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800b216:	4b12      	ldr	r3, [pc, #72]	@ (800b260 <vPortExitCritical+0x50>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d10b      	bne.n	800b236 <vPortExitCritical+0x26>
        __asm volatile
 800b21e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b222:	f383 8811 	msr	BASEPRI, r3
 800b226:	f3bf 8f6f 	isb	sy
 800b22a:	f3bf 8f4f 	dsb	sy
 800b22e:	607b      	str	r3, [r7, #4]
    }
 800b230:	bf00      	nop
 800b232:	bf00      	nop
 800b234:	e7fd      	b.n	800b232 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800b236:	4b0a      	ldr	r3, [pc, #40]	@ (800b260 <vPortExitCritical+0x50>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3b01      	subs	r3, #1
 800b23c:	4a08      	ldr	r2, [pc, #32]	@ (800b260 <vPortExitCritical+0x50>)
 800b23e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800b240:	4b07      	ldr	r3, [pc, #28]	@ (800b260 <vPortExitCritical+0x50>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d105      	bne.n	800b254 <vPortExitCritical+0x44>
 800b248:	2300      	movs	r3, #0
 800b24a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	f383 8811 	msr	BASEPRI, r3
    }
 800b252:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800b254:	bf00      	nop
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr
 800b260:	20000080 	.word	0x20000080
	...

0800b270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800b270:	f3ef 8009 	mrs	r0, PSP
 800b274:	f3bf 8f6f 	isb	sy
 800b278:	4b15      	ldr	r3, [pc, #84]	@ (800b2d0 <pxCurrentTCBConst>)
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	f01e 0f10 	tst.w	lr, #16
 800b280:	bf08      	it	eq
 800b282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28a:	6010      	str	r0, [r2, #0]
 800b28c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b290:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b294:	f380 8811 	msr	BASEPRI, r0
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f7fe fa36 	bl	8009710 <vTaskSwitchContext>
 800b2a4:	f04f 0000 	mov.w	r0, #0
 800b2a8:	f380 8811 	msr	BASEPRI, r0
 800b2ac:	bc09      	pop	{r0, r3}
 800b2ae:	6819      	ldr	r1, [r3, #0]
 800b2b0:	6808      	ldr	r0, [r1, #0]
 800b2b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b6:	f01e 0f10 	tst.w	lr, #16
 800b2ba:	bf08      	it	eq
 800b2bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b2c0:	f380 8809 	msr	PSP, r0
 800b2c4:	f3bf 8f6f 	isb	sy
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	f3af 8000 	nop.w

0800b2d0 <pxCurrentTCBConst>:
 800b2d0:	200003d4 	.word	0x200003d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800b2d4:	bf00      	nop
 800b2d6:	bf00      	nop

0800b2d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
        __asm volatile
 800b2de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e2:	f383 8811 	msr	BASEPRI, r3
 800b2e6:	f3bf 8f6f 	isb	sy
 800b2ea:	f3bf 8f4f 	dsb	sy
 800b2ee:	607b      	str	r3, [r7, #4]
    }
 800b2f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800b2f2:	f001 fd89 	bl	800ce08 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800b2f6:	f7fe f94d 	bl	8009594 <xTaskIncrementTick>
 800b2fa:	4603      	mov	r3, r0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d006      	beq.n	800b30e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800b300:	f001 fde0 	bl	800cec4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b304:	4b08      	ldr	r3, [pc, #32]	@ (800b328 <SysTick_Handler+0x50>)
 800b306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b30a:	601a      	str	r2, [r3, #0]
 800b30c:	e001      	b.n	800b312 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800b30e:	f001 fdbd 	bl	800ce8c <SEGGER_SYSVIEW_RecordExitISR>
 800b312:	2300      	movs	r3, #0
 800b314:	603b      	str	r3, [r7, #0]
        __asm volatile
 800b316:	683b      	ldr	r3, [r7, #0]
 800b318:	f383 8811 	msr	BASEPRI, r3
    }
 800b31c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800b31e:	bf00      	nop
 800b320:	3708      	adds	r7, #8
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	e000ed04 	.word	0xe000ed04

0800b32c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800b32c:	b480      	push	{r7}
 800b32e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b330:	4b0b      	ldr	r3, [pc, #44]	@ (800b360 <vPortSetupTimerInterrupt+0x34>)
 800b332:	2200      	movs	r2, #0
 800b334:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b336:	4b0b      	ldr	r3, [pc, #44]	@ (800b364 <vPortSetupTimerInterrupt+0x38>)
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b33c:	4b0a      	ldr	r3, [pc, #40]	@ (800b368 <vPortSetupTimerInterrupt+0x3c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a0a      	ldr	r2, [pc, #40]	@ (800b36c <vPortSetupTimerInterrupt+0x40>)
 800b342:	fba2 2303 	umull	r2, r3, r2, r3
 800b346:	099b      	lsrs	r3, r3, #6
 800b348:	4a09      	ldr	r2, [pc, #36]	@ (800b370 <vPortSetupTimerInterrupt+0x44>)
 800b34a:	3b01      	subs	r3, #1
 800b34c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b34e:	4b04      	ldr	r3, [pc, #16]	@ (800b360 <vPortSetupTimerInterrupt+0x34>)
 800b350:	2207      	movs	r2, #7
 800b352:	601a      	str	r2, [r3, #0]
}
 800b354:	bf00      	nop
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr
 800b35e:	bf00      	nop
 800b360:	e000e010 	.word	0xe000e010
 800b364:	e000e018 	.word	0xe000e018
 800b368:	20000070 	.word	0x20000070
 800b36c:	10624dd3 	.word	0x10624dd3
 800b370:	e000e014 	.word	0xe000e014

0800b374 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800b374:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b384 <vPortEnableVFP+0x10>
 800b378:	6801      	ldr	r1, [r0, #0]
 800b37a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b37e:	6001      	str	r1, [r0, #0]
 800b380:	4770      	bx	lr
 800b382:	0000      	.short	0x0000
 800b384:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800b388:	bf00      	nop
 800b38a:	bf00      	nop

0800b38c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800b392:	f3ef 8305 	mrs	r3, IPSR
 800b396:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2b0f      	cmp	r3, #15
 800b39c:	d915      	bls.n	800b3ca <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b39e:	4a18      	ldr	r2, [pc, #96]	@ (800b400 <vPortValidateInterruptPriority+0x74>)
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b3a8:	4b16      	ldr	r3, [pc, #88]	@ (800b404 <vPortValidateInterruptPriority+0x78>)
 800b3aa:	781b      	ldrb	r3, [r3, #0]
 800b3ac:	7afa      	ldrb	r2, [r7, #11]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d20b      	bcs.n	800b3ca <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800b3b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3b6:	f383 8811 	msr	BASEPRI, r3
 800b3ba:	f3bf 8f6f 	isb	sy
 800b3be:	f3bf 8f4f 	dsb	sy
 800b3c2:	607b      	str	r3, [r7, #4]
    }
 800b3c4:	bf00      	nop
 800b3c6:	bf00      	nop
 800b3c8:	e7fd      	b.n	800b3c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b3ca:	4b0f      	ldr	r3, [pc, #60]	@ (800b408 <vPortValidateInterruptPriority+0x7c>)
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b3d2:	4b0e      	ldr	r3, [pc, #56]	@ (800b40c <vPortValidateInterruptPriority+0x80>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d90b      	bls.n	800b3f2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800b3da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3de:	f383 8811 	msr	BASEPRI, r3
 800b3e2:	f3bf 8f6f 	isb	sy
 800b3e6:	f3bf 8f4f 	dsb	sy
 800b3ea:	603b      	str	r3, [r7, #0]
    }
 800b3ec:	bf00      	nop
 800b3ee:	bf00      	nop
 800b3f0:	e7fd      	b.n	800b3ee <vPortValidateInterruptPriority+0x62>
    }
 800b3f2:	bf00      	nop
 800b3f4:	3714      	adds	r7, #20
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fc:	4770      	bx	lr
 800b3fe:	bf00      	nop
 800b400:	e000e3f0 	.word	0xe000e3f0
 800b404:	20000514 	.word	0x20000514
 800b408:	e000ed0c 	.word	0xe000ed0c
 800b40c:	20000518 	.word	0x20000518

0800b410 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800b410:	b580      	push	{r7, lr}
 800b412:	b08a      	sub	sp, #40	@ 0x28
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800b418:	2300      	movs	r3, #0
 800b41a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800b41c:	f7fd ffe8 	bl	80093f0 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800b420:	4b66      	ldr	r3, [pc, #408]	@ (800b5bc <pvPortMalloc+0x1ac>)
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d101      	bne.n	800b42c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800b428:	f000 f938 	bl	800b69c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b42c:	4b64      	ldr	r3, [pc, #400]	@ (800b5c0 <pvPortMalloc+0x1b0>)
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	4013      	ands	r3, r2
 800b434:	2b00      	cmp	r3, #0
 800b436:	f040 80a9 	bne.w	800b58c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d02e      	beq.n	800b49e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800b440:	2208      	movs	r2, #8
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800b446:	687a      	ldr	r2, [r7, #4]
 800b448:	429a      	cmp	r2, r3
 800b44a:	d228      	bcs.n	800b49e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800b44c:	2208      	movs	r2, #8
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	4413      	add	r3, r2
 800b452:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	f003 0307 	and.w	r3, r3, #7
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d022      	beq.n	800b4a4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f023 0307 	bic.w	r3, r3, #7
 800b464:	3308      	adds	r3, #8
 800b466:	687a      	ldr	r2, [r7, #4]
 800b468:	429a      	cmp	r2, r3
 800b46a:	d215      	bcs.n	800b498 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f023 0307 	bic.w	r3, r3, #7
 800b472:	3308      	adds	r3, #8
 800b474:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f003 0307 	and.w	r3, r3, #7
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d011      	beq.n	800b4a4 <pvPortMalloc+0x94>
        __asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	617b      	str	r3, [r7, #20]
    }
 800b492:	bf00      	nop
 800b494:	bf00      	nop
 800b496:	e7fd      	b.n	800b494 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800b498:	2300      	movs	r3, #0
 800b49a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b49c:	e002      	b.n	800b4a4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	607b      	str	r3, [r7, #4]
 800b4a2:	e000      	b.n	800b4a6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b4a4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d06f      	beq.n	800b58c <pvPortMalloc+0x17c>
 800b4ac:	4b45      	ldr	r3, [pc, #276]	@ (800b5c4 <pvPortMalloc+0x1b4>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d86a      	bhi.n	800b58c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800b4b6:	4b44      	ldr	r3, [pc, #272]	@ (800b5c8 <pvPortMalloc+0x1b8>)
 800b4b8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800b4ba:	4b43      	ldr	r3, [pc, #268]	@ (800b5c8 <pvPortMalloc+0x1b8>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4c0:	e004      	b.n	800b4cc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800b4c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800b4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ce:	685b      	ldr	r3, [r3, #4]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d903      	bls.n	800b4de <pvPortMalloc+0xce>
 800b4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1f1      	bne.n	800b4c2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800b4de:	4b37      	ldr	r3, [pc, #220]	@ (800b5bc <pvPortMalloc+0x1ac>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d051      	beq.n	800b58c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b4e8:	6a3b      	ldr	r3, [r7, #32]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	2208      	movs	r2, #8
 800b4ee:	4413      	add	r3, r2
 800b4f0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b4fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4fc:	685a      	ldr	r2, [r3, #4]
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	1ad2      	subs	r2, r2, r3
 800b502:	2308      	movs	r3, #8
 800b504:	005b      	lsls	r3, r3, #1
 800b506:	429a      	cmp	r2, r3
 800b508:	d920      	bls.n	800b54c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b50a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	4413      	add	r3, r2
 800b510:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b512:	69bb      	ldr	r3, [r7, #24]
 800b514:	f003 0307 	and.w	r3, r3, #7
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <pvPortMalloc+0x124>
        __asm volatile
 800b51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b520:	f383 8811 	msr	BASEPRI, r3
 800b524:	f3bf 8f6f 	isb	sy
 800b528:	f3bf 8f4f 	dsb	sy
 800b52c:	613b      	str	r3, [r7, #16]
    }
 800b52e:	bf00      	nop
 800b530:	bf00      	nop
 800b532:	e7fd      	b.n	800b530 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b536:	685a      	ldr	r2, [r3, #4]
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	1ad2      	subs	r2, r2, r3
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800b540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b542:	687a      	ldr	r2, [r7, #4]
 800b544:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b546:	69b8      	ldr	r0, [r7, #24]
 800b548:	f000 f90a 	bl	800b760 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b54c:	4b1d      	ldr	r3, [pc, #116]	@ (800b5c4 <pvPortMalloc+0x1b4>)
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b552:	685b      	ldr	r3, [r3, #4]
 800b554:	1ad3      	subs	r3, r2, r3
 800b556:	4a1b      	ldr	r2, [pc, #108]	@ (800b5c4 <pvPortMalloc+0x1b4>)
 800b558:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b55a:	4b1a      	ldr	r3, [pc, #104]	@ (800b5c4 <pvPortMalloc+0x1b4>)
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	4b1b      	ldr	r3, [pc, #108]	@ (800b5cc <pvPortMalloc+0x1bc>)
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	429a      	cmp	r2, r3
 800b564:	d203      	bcs.n	800b56e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b566:	4b17      	ldr	r3, [pc, #92]	@ (800b5c4 <pvPortMalloc+0x1b4>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a18      	ldr	r2, [pc, #96]	@ (800b5cc <pvPortMalloc+0x1bc>)
 800b56c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	4b13      	ldr	r3, [pc, #76]	@ (800b5c0 <pvPortMalloc+0x1b0>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	431a      	orrs	r2, r3
 800b578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800b57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b57e:	2200      	movs	r2, #0
 800b580:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800b582:	4b13      	ldr	r3, [pc, #76]	@ (800b5d0 <pvPortMalloc+0x1c0>)
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	3301      	adds	r3, #1
 800b588:	4a11      	ldr	r2, [pc, #68]	@ (800b5d0 <pvPortMalloc+0x1c0>)
 800b58a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800b58c:	f7fd ff3e 	bl	800940c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	f003 0307 	and.w	r3, r3, #7
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00b      	beq.n	800b5b2 <pvPortMalloc+0x1a2>
        __asm volatile
 800b59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b59e:	f383 8811 	msr	BASEPRI, r3
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	60fb      	str	r3, [r7, #12]
    }
 800b5ac:	bf00      	nop
 800b5ae:	bf00      	nop
 800b5b0:	e7fd      	b.n	800b5ae <pvPortMalloc+0x19e>
    return pvReturn;
 800b5b2:	69fb      	ldr	r3, [r7, #28]
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3728      	adds	r7, #40	@ 0x28
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}
 800b5bc:	20019524 	.word	0x20019524
 800b5c0:	20019538 	.word	0x20019538
 800b5c4:	20019528 	.word	0x20019528
 800b5c8:	2001951c 	.word	0x2001951c
 800b5cc:	2001952c 	.word	0x2001952c
 800b5d0:	20019530 	.word	0x20019530

0800b5d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b086      	sub	sp, #24
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d04f      	beq.n	800b686 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800b5e6:	2308      	movs	r3, #8
 800b5e8:	425b      	negs	r3, r3
 800b5ea:	697a      	ldr	r2, [r7, #20]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800b5f0:	697b      	ldr	r3, [r7, #20]
 800b5f2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	685a      	ldr	r2, [r3, #4]
 800b5f8:	4b25      	ldr	r3, [pc, #148]	@ (800b690 <vPortFree+0xbc>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	4013      	ands	r3, r2
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d10b      	bne.n	800b61a <vPortFree+0x46>
        __asm volatile
 800b602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b606:	f383 8811 	msr	BASEPRI, r3
 800b60a:	f3bf 8f6f 	isb	sy
 800b60e:	f3bf 8f4f 	dsb	sy
 800b612:	60fb      	str	r3, [r7, #12]
    }
 800b614:	bf00      	nop
 800b616:	bf00      	nop
 800b618:	e7fd      	b.n	800b616 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00b      	beq.n	800b63a <vPortFree+0x66>
        __asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	60bb      	str	r3, [r7, #8]
    }
 800b634:	bf00      	nop
 800b636:	bf00      	nop
 800b638:	e7fd      	b.n	800b636 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	685a      	ldr	r2, [r3, #4]
 800b63e:	4b14      	ldr	r3, [pc, #80]	@ (800b690 <vPortFree+0xbc>)
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	4013      	ands	r3, r2
 800b644:	2b00      	cmp	r3, #0
 800b646:	d01e      	beq.n	800b686 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d11a      	bne.n	800b686 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	685a      	ldr	r2, [r3, #4]
 800b654:	4b0e      	ldr	r3, [pc, #56]	@ (800b690 <vPortFree+0xbc>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	43db      	mvns	r3, r3
 800b65a:	401a      	ands	r2, r3
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800b660:	f7fd fec6 	bl	80093f0 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	4b0a      	ldr	r3, [pc, #40]	@ (800b694 <vPortFree+0xc0>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4413      	add	r3, r2
 800b66e:	4a09      	ldr	r2, [pc, #36]	@ (800b694 <vPortFree+0xc0>)
 800b670:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b672:	6938      	ldr	r0, [r7, #16]
 800b674:	f000 f874 	bl	800b760 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800b678:	4b07      	ldr	r3, [pc, #28]	@ (800b698 <vPortFree+0xc4>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3301      	adds	r3, #1
 800b67e:	4a06      	ldr	r2, [pc, #24]	@ (800b698 <vPortFree+0xc4>)
 800b680:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800b682:	f7fd fec3 	bl	800940c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800b686:	bf00      	nop
 800b688:	3718      	adds	r7, #24
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	20019538 	.word	0x20019538
 800b694:	20019528 	.word	0x20019528
 800b698:	20019534 	.word	0x20019534

0800b69c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800b69c:	b480      	push	{r7}
 800b69e:	b085      	sub	sp, #20
 800b6a0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b6a2:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800b6a6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800b6a8:	4b27      	ldr	r3, [pc, #156]	@ (800b748 <prvHeapInit+0xac>)
 800b6aa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f003 0307 	and.w	r3, r3, #7
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d00c      	beq.n	800b6d0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	3307      	adds	r3, #7
 800b6ba:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	f023 0307 	bic.w	r3, r3, #7
 800b6c2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b6c4:	68ba      	ldr	r2, [r7, #8]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	1ad3      	subs	r3, r2, r3
 800b6ca:	4a1f      	ldr	r2, [pc, #124]	@ (800b748 <prvHeapInit+0xac>)
 800b6cc:	4413      	add	r3, r2
 800b6ce:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b6d4:	4a1d      	ldr	r2, [pc, #116]	@ (800b74c <prvHeapInit+0xb0>)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800b6da:	4b1c      	ldr	r3, [pc, #112]	@ (800b74c <prvHeapInit+0xb0>)
 800b6dc:	2200      	movs	r2, #0
 800b6de:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	68ba      	ldr	r2, [r7, #8]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800b6e8:	2208      	movs	r2, #8
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	1a9b      	subs	r3, r3, r2
 800b6ee:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f023 0307 	bic.w	r3, r3, #7
 800b6f6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	4a15      	ldr	r2, [pc, #84]	@ (800b750 <prvHeapInit+0xb4>)
 800b6fc:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800b6fe:	4b14      	ldr	r3, [pc, #80]	@ (800b750 <prvHeapInit+0xb4>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2200      	movs	r2, #0
 800b704:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800b706:	4b12      	ldr	r3, [pc, #72]	@ (800b750 <prvHeapInit+0xb4>)
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2200      	movs	r2, #0
 800b70c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	68fa      	ldr	r2, [r7, #12]
 800b716:	1ad2      	subs	r2, r2, r3
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b71c:	4b0c      	ldr	r3, [pc, #48]	@ (800b750 <prvHeapInit+0xb4>)
 800b71e:	681a      	ldr	r2, [r3, #0]
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	4a0a      	ldr	r2, [pc, #40]	@ (800b754 <prvHeapInit+0xb8>)
 800b72a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	685b      	ldr	r3, [r3, #4]
 800b730:	4a09      	ldr	r2, [pc, #36]	@ (800b758 <prvHeapInit+0xbc>)
 800b732:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b734:	4b09      	ldr	r3, [pc, #36]	@ (800b75c <prvHeapInit+0xc0>)
 800b736:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b73a:	601a      	str	r2, [r3, #0]
}
 800b73c:	bf00      	nop
 800b73e:	3714      	adds	r7, #20
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr
 800b748:	2000051c 	.word	0x2000051c
 800b74c:	2001951c 	.word	0x2001951c
 800b750:	20019524 	.word	0x20019524
 800b754:	2001952c 	.word	0x2001952c
 800b758:	20019528 	.word	0x20019528
 800b75c:	20019538 	.word	0x20019538

0800b760 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800b760:	b480      	push	{r7}
 800b762:	b085      	sub	sp, #20
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b768:	4b28      	ldr	r3, [pc, #160]	@ (800b80c <prvInsertBlockIntoFreeList+0xac>)
 800b76a:	60fb      	str	r3, [r7, #12]
 800b76c:	e002      	b.n	800b774 <prvInsertBlockIntoFreeList+0x14>
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	60fb      	str	r3, [r7, #12]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	687a      	ldr	r2, [r7, #4]
 800b77a:	429a      	cmp	r2, r3
 800b77c:	d8f7      	bhi.n	800b76e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	4413      	add	r3, r2
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d108      	bne.n	800b7a2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	685b      	ldr	r3, [r3, #4]
 800b798:	441a      	add	r2, r3
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	68ba      	ldr	r2, [r7, #8]
 800b7ac:	441a      	add	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d118      	bne.n	800b7e8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	681a      	ldr	r2, [r3, #0]
 800b7ba:	4b15      	ldr	r3, [pc, #84]	@ (800b810 <prvInsertBlockIntoFreeList+0xb0>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d00d      	beq.n	800b7de <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	685a      	ldr	r2, [r3, #4]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	441a      	add	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	601a      	str	r2, [r3, #0]
 800b7dc:	e008      	b.n	800b7f0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b7de:	4b0c      	ldr	r3, [pc, #48]	@ (800b810 <prvInsertBlockIntoFreeList+0xb0>)
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	601a      	str	r2, [r3, #0]
 800b7e6:	e003      	b.n	800b7f0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d002      	beq.n	800b7fe <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800b7fe:	bf00      	nop
 800b800:	3714      	adds	r7, #20
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr
 800b80a:	bf00      	nop
 800b80c:	2001951c 	.word	0x2001951c
 800b810:	20019524 	.word	0x20019524

0800b814 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800b814:	b580      	push	{r7, lr}
 800b816:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800b818:	4803      	ldr	r0, [pc, #12]	@ (800b828 <_cbSendSystemDesc+0x14>)
 800b81a:	f001 fa9f 	bl	800cd5c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800b81e:	4803      	ldr	r0, [pc, #12]	@ (800b82c <_cbSendSystemDesc+0x18>)
 800b820:	f001 fa9c 	bl	800cd5c <SEGGER_SYSVIEW_SendSysDesc>
}
 800b824:	bf00      	nop
 800b826:	bd80      	pop	{r7, pc}
 800b828:	0800e8d8 	.word	0x0800e8d8
 800b82c:	0800e918 	.word	0x0800e918

0800b830 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800b830:	b580      	push	{r7, lr}
 800b832:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800b834:	4b06      	ldr	r3, [pc, #24]	@ (800b850 <SEGGER_SYSVIEW_Conf+0x20>)
 800b836:	6818      	ldr	r0, [r3, #0]
 800b838:	4b05      	ldr	r3, [pc, #20]	@ (800b850 <SEGGER_SYSVIEW_Conf+0x20>)
 800b83a:	6819      	ldr	r1, [r3, #0]
 800b83c:	4b05      	ldr	r3, [pc, #20]	@ (800b854 <SEGGER_SYSVIEW_Conf+0x24>)
 800b83e:	4a06      	ldr	r2, [pc, #24]	@ (800b858 <SEGGER_SYSVIEW_Conf+0x28>)
 800b840:	f000 fd5c 	bl	800c2fc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800b844:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800b848:	f000 fd9c 	bl	800c384 <SEGGER_SYSVIEW_SetRAMBase>
}
 800b84c:	bf00      	nop
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	20000070 	.word	0x20000070
 800b854:	0800b815 	.word	0x0800b815
 800b858:	0800e9b4 	.word	0x0800e9b4

0800b85c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800b85c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b85e:	b085      	sub	sp, #20
 800b860:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800b862:	2300      	movs	r3, #0
 800b864:	607b      	str	r3, [r7, #4]
 800b866:	e033      	b.n	800b8d0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800b868:	491e      	ldr	r1, [pc, #120]	@ (800b8e4 <_cbSendTaskList+0x88>)
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	4613      	mov	r3, r2
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	4413      	add	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	440b      	add	r3, r1
 800b876:	6818      	ldr	r0, [r3, #0]
 800b878:	491a      	ldr	r1, [pc, #104]	@ (800b8e4 <_cbSendTaskList+0x88>)
 800b87a:	687a      	ldr	r2, [r7, #4]
 800b87c:	4613      	mov	r3, r2
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	4413      	add	r3, r2
 800b882:	009b      	lsls	r3, r3, #2
 800b884:	440b      	add	r3, r1
 800b886:	3304      	adds	r3, #4
 800b888:	6819      	ldr	r1, [r3, #0]
 800b88a:	4c16      	ldr	r4, [pc, #88]	@ (800b8e4 <_cbSendTaskList+0x88>)
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	4613      	mov	r3, r2
 800b890:	009b      	lsls	r3, r3, #2
 800b892:	4413      	add	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4423      	add	r3, r4
 800b898:	3308      	adds	r3, #8
 800b89a:	681c      	ldr	r4, [r3, #0]
 800b89c:	4d11      	ldr	r5, [pc, #68]	@ (800b8e4 <_cbSendTaskList+0x88>)
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	4413      	add	r3, r2
 800b8a6:	009b      	lsls	r3, r3, #2
 800b8a8:	442b      	add	r3, r5
 800b8aa:	330c      	adds	r3, #12
 800b8ac:	681d      	ldr	r5, [r3, #0]
 800b8ae:	4e0d      	ldr	r6, [pc, #52]	@ (800b8e4 <_cbSendTaskList+0x88>)
 800b8b0:	687a      	ldr	r2, [r7, #4]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	009b      	lsls	r3, r3, #2
 800b8b6:	4413      	add	r3, r2
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	4433      	add	r3, r6
 800b8bc:	3310      	adds	r3, #16
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	9300      	str	r3, [sp, #0]
 800b8c2:	462b      	mov	r3, r5
 800b8c4:	4622      	mov	r2, r4
 800b8c6:	f000 f8bd 	bl	800ba44 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	607b      	str	r3, [r7, #4]
 800b8d0:	4b05      	ldr	r3, [pc, #20]	@ (800b8e8 <_cbSendTaskList+0x8c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d3c6      	bcc.n	800b868 <_cbSendTaskList+0xc>
  }
}
 800b8da:	bf00      	nop
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8e4:	2001953c 	.word	0x2001953c
 800b8e8:	200195dc 	.word	0x200195dc

0800b8ec <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800b8ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8f0:	b082      	sub	sp, #8
 800b8f2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800b8f4:	f7fd fe3c 	bl	8009570 <xTaskGetTickCountFromISR>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	469a      	mov	sl, r3
 800b8fe:	4693      	mov	fp, r2
 800b900:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800b904:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b908:	4602      	mov	r2, r0
 800b90a:	460b      	mov	r3, r1
 800b90c:	f04f 0a00 	mov.w	sl, #0
 800b910:	f04f 0b00 	mov.w	fp, #0
 800b914:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800b918:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800b91c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800b920:	4652      	mov	r2, sl
 800b922:	465b      	mov	r3, fp
 800b924:	1a14      	subs	r4, r2, r0
 800b926:	eb63 0501 	sbc.w	r5, r3, r1
 800b92a:	f04f 0200 	mov.w	r2, #0
 800b92e:	f04f 0300 	mov.w	r3, #0
 800b932:	00ab      	lsls	r3, r5, #2
 800b934:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800b938:	00a2      	lsls	r2, r4, #2
 800b93a:	4614      	mov	r4, r2
 800b93c:	461d      	mov	r5, r3
 800b93e:	eb14 0800 	adds.w	r8, r4, r0
 800b942:	eb45 0901 	adc.w	r9, r5, r1
 800b946:	f04f 0200 	mov.w	r2, #0
 800b94a:	f04f 0300 	mov.w	r3, #0
 800b94e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b95a:	4690      	mov	r8, r2
 800b95c:	4699      	mov	r9, r3
 800b95e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800b962:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800b966:	4610      	mov	r0, r2
 800b968:	4619      	mov	r1, r3
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800b974 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af02      	add	r7, sp, #8
 800b97a:	60f8      	str	r0, [r7, #12]
 800b97c:	60b9      	str	r1, [r7, #8]
 800b97e:	607a      	str	r2, [r7, #4]
 800b980:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800b982:	2205      	movs	r2, #5
 800b984:	492b      	ldr	r1, [pc, #172]	@ (800ba34 <SYSVIEW_AddTask+0xc0>)
 800b986:	68b8      	ldr	r0, [r7, #8]
 800b988:	f001 fd6c 	bl	800d464 <memcmp>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d04b      	beq.n	800ba2a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800b992:	4b29      	ldr	r3, [pc, #164]	@ (800ba38 <SYSVIEW_AddTask+0xc4>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	2b07      	cmp	r3, #7
 800b998:	d903      	bls.n	800b9a2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800b99a:	4828      	ldr	r0, [pc, #160]	@ (800ba3c <SYSVIEW_AddTask+0xc8>)
 800b99c:	f001 fce6 	bl	800d36c <SEGGER_SYSVIEW_Warn>
    return;
 800b9a0:	e044      	b.n	800ba2c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800b9a2:	4b25      	ldr	r3, [pc, #148]	@ (800ba38 <SYSVIEW_AddTask+0xc4>)
 800b9a4:	681a      	ldr	r2, [r3, #0]
 800b9a6:	4926      	ldr	r1, [pc, #152]	@ (800ba40 <SYSVIEW_AddTask+0xcc>)
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	440b      	add	r3, r1
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800b9b6:	4b20      	ldr	r3, [pc, #128]	@ (800ba38 <SYSVIEW_AddTask+0xc4>)
 800b9b8:	681a      	ldr	r2, [r3, #0]
 800b9ba:	4921      	ldr	r1, [pc, #132]	@ (800ba40 <SYSVIEW_AddTask+0xcc>)
 800b9bc:	4613      	mov	r3, r2
 800b9be:	009b      	lsls	r3, r3, #2
 800b9c0:	4413      	add	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	440b      	add	r3, r1
 800b9c6:	3304      	adds	r3, #4
 800b9c8:	68ba      	ldr	r2, [r7, #8]
 800b9ca:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800b9cc:	4b1a      	ldr	r3, [pc, #104]	@ (800ba38 <SYSVIEW_AddTask+0xc4>)
 800b9ce:	681a      	ldr	r2, [r3, #0]
 800b9d0:	491b      	ldr	r1, [pc, #108]	@ (800ba40 <SYSVIEW_AddTask+0xcc>)
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	009b      	lsls	r3, r3, #2
 800b9d6:	4413      	add	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	440b      	add	r3, r1
 800b9dc:	3308      	adds	r3, #8
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800b9e2:	4b15      	ldr	r3, [pc, #84]	@ (800ba38 <SYSVIEW_AddTask+0xc4>)
 800b9e4:	681a      	ldr	r2, [r3, #0]
 800b9e6:	4916      	ldr	r1, [pc, #88]	@ (800ba40 <SYSVIEW_AddTask+0xcc>)
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	009b      	lsls	r3, r3, #2
 800b9ec:	4413      	add	r3, r2
 800b9ee:	009b      	lsls	r3, r3, #2
 800b9f0:	440b      	add	r3, r1
 800b9f2:	330c      	adds	r3, #12
 800b9f4:	683a      	ldr	r2, [r7, #0]
 800b9f6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800b9f8:	4b0f      	ldr	r3, [pc, #60]	@ (800ba38 <SYSVIEW_AddTask+0xc4>)
 800b9fa:	681a      	ldr	r2, [r3, #0]
 800b9fc:	4910      	ldr	r1, [pc, #64]	@ (800ba40 <SYSVIEW_AddTask+0xcc>)
 800b9fe:	4613      	mov	r3, r2
 800ba00:	009b      	lsls	r3, r3, #2
 800ba02:	4413      	add	r3, r2
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	440b      	add	r3, r1
 800ba08:	3310      	adds	r3, #16
 800ba0a:	69ba      	ldr	r2, [r7, #24]
 800ba0c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800ba0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ba38 <SYSVIEW_AddTask+0xc4>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	3301      	adds	r3, #1
 800ba14:	4a08      	ldr	r2, [pc, #32]	@ (800ba38 <SYSVIEW_AddTask+0xc4>)
 800ba16:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800ba18:	69bb      	ldr	r3, [r7, #24]
 800ba1a:	9300      	str	r3, [sp, #0]
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	687a      	ldr	r2, [r7, #4]
 800ba20:	68b9      	ldr	r1, [r7, #8]
 800ba22:	68f8      	ldr	r0, [r7, #12]
 800ba24:	f000 f80e 	bl	800ba44 <SYSVIEW_SendTaskInfo>
 800ba28:	e000      	b.n	800ba2c <SYSVIEW_AddTask+0xb8>
    return;
 800ba2a:	bf00      	nop

}
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	0800e928 	.word	0x0800e928
 800ba38:	200195dc 	.word	0x200195dc
 800ba3c:	0800e930 	.word	0x0800e930
 800ba40:	2001953c 	.word	0x2001953c

0800ba44 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b08a      	sub	sp, #40	@ 0x28
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	60f8      	str	r0, [r7, #12]
 800ba4c:	60b9      	str	r1, [r7, #8]
 800ba4e:	607a      	str	r2, [r7, #4]
 800ba50:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800ba52:	f107 0314 	add.w	r3, r7, #20
 800ba56:	2214      	movs	r2, #20
 800ba58:	2100      	movs	r1, #0
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f001 fd12 	bl	800d484 <memset>
  TaskInfo.TaskID     = TaskID;
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800ba70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba72:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800ba74:	f107 0314 	add.w	r3, r7, #20
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f001 f877 	bl	800cb6c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800ba7e:	bf00      	nop
 800ba80:	3728      	adds	r7, #40	@ 0x28
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}
	...

0800ba88 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b082      	sub	sp, #8
 800ba8c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800ba8e:	4b26      	ldr	r3, [pc, #152]	@ (800bb28 <_DoInit+0xa0>)
 800ba90:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800ba92:	22a8      	movs	r2, #168	@ 0xa8
 800ba94:	2100      	movs	r1, #0
 800ba96:	6838      	ldr	r0, [r7, #0]
 800ba98:	f001 fcf4 	bl	800d484 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	2203      	movs	r2, #3
 800baa0:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	2203      	movs	r2, #3
 800baa6:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	4a20      	ldr	r2, [pc, #128]	@ (800bb2c <_DoInit+0xa4>)
 800baac:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800baae:	683b      	ldr	r3, [r7, #0]
 800bab0:	4a1f      	ldr	r2, [pc, #124]	@ (800bb30 <_DoInit+0xa8>)
 800bab2:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800baba:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	2200      	movs	r2, #0
 800bac0:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	2200      	movs	r2, #0
 800bac6:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	2200      	movs	r2, #0
 800bacc:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	4a16      	ldr	r2, [pc, #88]	@ (800bb2c <_DoInit+0xa4>)
 800bad2:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	4a17      	ldr	r2, [pc, #92]	@ (800bb34 <_DoInit+0xac>)
 800bad8:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	2210      	movs	r2, #16
 800bade:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	2200      	movs	r2, #0
 800bae4:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	2200      	movs	r2, #0
 800baea:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	2200      	movs	r2, #0
 800baf0:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800baf2:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800baf6:	2300      	movs	r3, #0
 800baf8:	607b      	str	r3, [r7, #4]
 800bafa:	e00c      	b.n	800bb16 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f1c3 030f 	rsb	r3, r3, #15
 800bb02:	4a0d      	ldr	r2, [pc, #52]	@ (800bb38 <_DoInit+0xb0>)
 800bb04:	5cd1      	ldrb	r1, [r2, r3]
 800bb06:	683a      	ldr	r2, [r7, #0]
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	460a      	mov	r2, r1
 800bb0e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3301      	adds	r3, #1
 800bb14:	607b      	str	r3, [r7, #4]
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	2b0f      	cmp	r3, #15
 800bb1a:	d9ef      	bls.n	800bafc <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800bb1c:	f3bf 8f5f 	dmb	sy
}
 800bb20:	bf00      	nop
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}
 800bb28:	200195e0 	.word	0x200195e0
 800bb2c:	0800e980 	.word	0x0800e980
 800bb30:	20019688 	.word	0x20019688
 800bb34:	20019a88 	.word	0x20019a88
 800bb38:	0800e9bc 	.word	0x0800e9bc

0800bb3c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b08c      	sub	sp, #48	@ 0x30
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	60f8      	str	r0, [r7, #12]
 800bb44:	60b9      	str	r1, [r7, #8]
 800bb46:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800bb48:	4b3e      	ldr	r3, [pc, #248]	@ (800bc44 <SEGGER_RTT_ReadNoLock+0x108>)
 800bb4a:	623b      	str	r3, [r7, #32]
 800bb4c:	6a3b      	ldr	r3, [r7, #32]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	b2db      	uxtb	r3, r3
 800bb52:	2b53      	cmp	r3, #83	@ 0x53
 800bb54:	d001      	beq.n	800bb5a <SEGGER_RTT_ReadNoLock+0x1e>
 800bb56:	f7ff ff97 	bl	800ba88 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	005b      	lsls	r3, r3, #1
 800bb60:	4413      	add	r3, r2
 800bb62:	00db      	lsls	r3, r3, #3
 800bb64:	3360      	adds	r3, #96	@ 0x60
 800bb66:	4a37      	ldr	r2, [pc, #220]	@ (800bc44 <SEGGER_RTT_ReadNoLock+0x108>)
 800bb68:	4413      	add	r3, r2
 800bb6a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800bb6c:	68bb      	ldr	r3, [r7, #8]
 800bb6e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800bb70:	69fb      	ldr	r3, [r7, #28]
 800bb72:	691b      	ldr	r3, [r3, #16]
 800bb74:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	68db      	ldr	r3, [r3, #12]
 800bb7a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800bb80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	429a      	cmp	r2, r3
 800bb86:	d92b      	bls.n	800bbe0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800bb88:	69fb      	ldr	r3, [r7, #28]
 800bb8a:	689a      	ldr	r2, [r3, #8]
 800bb8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb8e:	1ad3      	subs	r3, r2, r3
 800bb90:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	4293      	cmp	r3, r2
 800bb98:	bf28      	it	cs
 800bb9a:	4613      	movcs	r3, r2
 800bb9c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bb9e:	69fb      	ldr	r3, [r7, #28]
 800bba0:	685a      	ldr	r2, [r3, #4]
 800bba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba4:	4413      	add	r3, r2
 800bba6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800bba8:	697a      	ldr	r2, [r7, #20]
 800bbaa:	6939      	ldr	r1, [r7, #16]
 800bbac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bbae:	f001 fc9d 	bl	800d4ec <memcpy>
    NumBytesRead += NumBytesRem;
 800bbb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bbb4:	697b      	ldr	r3, [r7, #20]
 800bbb6:	4413      	add	r3, r2
 800bbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800bbba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	4413      	add	r3, r2
 800bbc0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800bbc2:	687a      	ldr	r2, [r7, #4]
 800bbc4:	697b      	ldr	r3, [r7, #20]
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800bbca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	4413      	add	r3, r2
 800bbd0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d101      	bne.n	800bbe0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800bbdc:	2300      	movs	r3, #0
 800bbde:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800bbe0:	69ba      	ldr	r2, [r7, #24]
 800bbe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbe4:	1ad3      	subs	r3, r2, r3
 800bbe6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800bbe8:	697a      	ldr	r2, [r7, #20]
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	4293      	cmp	r3, r2
 800bbee:	bf28      	it	cs
 800bbf0:	4613      	movcs	r3, r2
 800bbf2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d019      	beq.n	800bc2e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	685a      	ldr	r2, [r3, #4]
 800bbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc00:	4413      	add	r3, r2
 800bc02:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800bc04:	697a      	ldr	r2, [r7, #20]
 800bc06:	6939      	ldr	r1, [r7, #16]
 800bc08:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bc0a:	f001 fc6f 	bl	800d4ec <memcpy>
    NumBytesRead += NumBytesRem;
 800bc0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	4413      	add	r3, r2
 800bc14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800bc16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc18:	697b      	ldr	r3, [r7, #20]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	1ad3      	subs	r3, r2, r3
 800bc24:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800bc26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800bc2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d002      	beq.n	800bc3a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bc38:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800bc3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3730      	adds	r7, #48	@ 0x30
 800bc40:	46bd      	mov	sp, r7
 800bc42:	bd80      	pop	{r7, pc}
 800bc44:	200195e0 	.word	0x200195e0

0800bc48 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b088      	sub	sp, #32
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	60b9      	str	r1, [r7, #8]
 800bc52:	607a      	str	r2, [r7, #4]
 800bc54:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800bc56:	4b3d      	ldr	r3, [pc, #244]	@ (800bd4c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800bc58:	61bb      	str	r3, [r7, #24]
 800bc5a:	69bb      	ldr	r3, [r7, #24]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	b2db      	uxtb	r3, r3
 800bc60:	2b53      	cmp	r3, #83	@ 0x53
 800bc62:	d001      	beq.n	800bc68 <SEGGER_RTT_AllocUpBuffer+0x20>
 800bc64:	f7ff ff10 	bl	800ba88 <_DoInit>
  SEGGER_RTT_LOCK();
 800bc68:	f3ef 8311 	mrs	r3, BASEPRI
 800bc6c:	f04f 0120 	mov.w	r1, #32
 800bc70:	f381 8811 	msr	BASEPRI, r1
 800bc74:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bc76:	4b35      	ldr	r3, [pc, #212]	@ (800bd4c <SEGGER_RTT_AllocUpBuffer+0x104>)
 800bc78:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800bc7e:	6939      	ldr	r1, [r7, #16]
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	1c5a      	adds	r2, r3, #1
 800bc84:	4613      	mov	r3, r2
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	4413      	add	r3, r2
 800bc8a:	00db      	lsls	r3, r3, #3
 800bc8c:	440b      	add	r3, r1
 800bc8e:	3304      	adds	r3, #4
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d008      	beq.n	800bca8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	691b      	ldr	r3, [r3, #16]
 800bca0:	69fa      	ldr	r2, [r7, #28]
 800bca2:	429a      	cmp	r2, r3
 800bca4:	dbeb      	blt.n	800bc7e <SEGGER_RTT_AllocUpBuffer+0x36>
 800bca6:	e000      	b.n	800bcaa <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800bca8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	69fa      	ldr	r2, [r7, #28]
 800bcb0:	429a      	cmp	r2, r3
 800bcb2:	da3f      	bge.n	800bd34 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800bcb4:	6939      	ldr	r1, [r7, #16]
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	1c5a      	adds	r2, r3, #1
 800bcba:	4613      	mov	r3, r2
 800bcbc:	005b      	lsls	r3, r3, #1
 800bcbe:	4413      	add	r3, r2
 800bcc0:	00db      	lsls	r3, r3, #3
 800bcc2:	440b      	add	r3, r1
 800bcc4:	68fa      	ldr	r2, [r7, #12]
 800bcc6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800bcc8:	6939      	ldr	r1, [r7, #16]
 800bcca:	69fb      	ldr	r3, [r7, #28]
 800bccc:	1c5a      	adds	r2, r3, #1
 800bcce:	4613      	mov	r3, r2
 800bcd0:	005b      	lsls	r3, r3, #1
 800bcd2:	4413      	add	r3, r2
 800bcd4:	00db      	lsls	r3, r3, #3
 800bcd6:	440b      	add	r3, r1
 800bcd8:	3304      	adds	r3, #4
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800bcde:	6939      	ldr	r1, [r7, #16]
 800bce0:	69fa      	ldr	r2, [r7, #28]
 800bce2:	4613      	mov	r3, r2
 800bce4:	005b      	lsls	r3, r3, #1
 800bce6:	4413      	add	r3, r2
 800bce8:	00db      	lsls	r3, r3, #3
 800bcea:	440b      	add	r3, r1
 800bcec:	3320      	adds	r3, #32
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800bcf2:	6939      	ldr	r1, [r7, #16]
 800bcf4:	69fa      	ldr	r2, [r7, #28]
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	005b      	lsls	r3, r3, #1
 800bcfa:	4413      	add	r3, r2
 800bcfc:	00db      	lsls	r3, r3, #3
 800bcfe:	440b      	add	r3, r1
 800bd00:	3328      	adds	r3, #40	@ 0x28
 800bd02:	2200      	movs	r2, #0
 800bd04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800bd06:	6939      	ldr	r1, [r7, #16]
 800bd08:	69fa      	ldr	r2, [r7, #28]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	005b      	lsls	r3, r3, #1
 800bd0e:	4413      	add	r3, r2
 800bd10:	00db      	lsls	r3, r3, #3
 800bd12:	440b      	add	r3, r1
 800bd14:	3324      	adds	r3, #36	@ 0x24
 800bd16:	2200      	movs	r2, #0
 800bd18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800bd1a:	6939      	ldr	r1, [r7, #16]
 800bd1c:	69fa      	ldr	r2, [r7, #28]
 800bd1e:	4613      	mov	r3, r2
 800bd20:	005b      	lsls	r3, r3, #1
 800bd22:	4413      	add	r3, r2
 800bd24:	00db      	lsls	r3, r3, #3
 800bd26:	440b      	add	r3, r1
 800bd28:	332c      	adds	r3, #44	@ 0x2c
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800bd2e:	f3bf 8f5f 	dmb	sy
 800bd32:	e002      	b.n	800bd3a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800bd34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd38:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800bd40:	69fb      	ldr	r3, [r7, #28]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3720      	adds	r7, #32
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	200195e0 	.word	0x200195e0

0800bd50 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b08a      	sub	sp, #40	@ 0x28
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
 800bd5c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800bd5e:	4b21      	ldr	r3, [pc, #132]	@ (800bde4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800bd60:	623b      	str	r3, [r7, #32]
 800bd62:	6a3b      	ldr	r3, [r7, #32]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	b2db      	uxtb	r3, r3
 800bd68:	2b53      	cmp	r3, #83	@ 0x53
 800bd6a:	d001      	beq.n	800bd70 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800bd6c:	f7ff fe8c 	bl	800ba88 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800bd70:	4b1c      	ldr	r3, [pc, #112]	@ (800bde4 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800bd72:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d82c      	bhi.n	800bdd4 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800bd7a:	f3ef 8311 	mrs	r3, BASEPRI
 800bd7e:	f04f 0120 	mov.w	r1, #32
 800bd82:	f381 8811 	msr	BASEPRI, r1
 800bd86:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	005b      	lsls	r3, r3, #1
 800bd8e:	4413      	add	r3, r2
 800bd90:	00db      	lsls	r3, r3, #3
 800bd92:	3360      	adds	r3, #96	@ 0x60
 800bd94:	69fa      	ldr	r2, [r7, #28]
 800bd96:	4413      	add	r3, r2
 800bd98:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00e      	beq.n	800bdbe <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	68ba      	ldr	r2, [r7, #8]
 800bda4:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	687a      	ldr	r2, [r7, #4]
 800bdaa:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800bdac:	697b      	ldr	r3, [r7, #20]
 800bdae:	683a      	ldr	r2, [r7, #0]
 800bdb0:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	2200      	movs	r2, #0
 800bdbc:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdc2:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800bdc4:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdd2:	e002      	b.n	800bdda <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800bdd4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bdd8:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800bdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	3728      	adds	r7, #40	@ 0x28
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	200195e0 	.word	0x200195e0

0800bde8 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800bde8:	b480      	push	{r7}
 800bdea:	b087      	sub	sp, #28
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	1c5a      	adds	r2, r3, #1
 800bdfc:	60fa      	str	r2, [r7, #12]
 800bdfe:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b80      	cmp	r3, #128	@ 0x80
 800be04:	d90a      	bls.n	800be1c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800be06:	2380      	movs	r3, #128	@ 0x80
 800be08:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800be0a:	e007      	b.n	800be1c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	1c53      	adds	r3, r2, #1
 800be10:	60bb      	str	r3, [r7, #8]
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	1c59      	adds	r1, r3, #1
 800be16:	60f9      	str	r1, [r7, #12]
 800be18:	7812      	ldrb	r2, [r2, #0]
 800be1a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	1e5a      	subs	r2, r3, #1
 800be20:	607a      	str	r2, [r7, #4]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d003      	beq.n	800be2e <_EncodeStr+0x46>
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	781b      	ldrb	r3, [r3, #0]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d1ee      	bne.n	800be0c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800be2e:	68ba      	ldr	r2, [r7, #8]
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	b2da      	uxtb	r2, r3
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800be3a:	68fb      	ldr	r3, [r7, #12]
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	371c      	adds	r7, #28
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800be48:	b480      	push	{r7}
 800be4a:	b083      	sub	sp, #12
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	3307      	adds	r3, #7
}
 800be54:	4618      	mov	r0, r3
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800be60:	b580      	push	{r7, lr}
 800be62:	b082      	sub	sp, #8
 800be64:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800be66:	4b34      	ldr	r3, [pc, #208]	@ (800bf38 <_HandleIncomingPacket+0xd8>)
 800be68:	7e1b      	ldrb	r3, [r3, #24]
 800be6a:	4618      	mov	r0, r3
 800be6c:	1cfb      	adds	r3, r7, #3
 800be6e:	2201      	movs	r2, #1
 800be70:	4619      	mov	r1, r3
 800be72:	f7ff fe63 	bl	800bb3c <SEGGER_RTT_ReadNoLock>
 800be76:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d057      	beq.n	800bf2e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800be7e:	78fb      	ldrb	r3, [r7, #3]
 800be80:	2b80      	cmp	r3, #128	@ 0x80
 800be82:	d031      	beq.n	800bee8 <_HandleIncomingPacket+0x88>
 800be84:	2b80      	cmp	r3, #128	@ 0x80
 800be86:	dc40      	bgt.n	800bf0a <_HandleIncomingPacket+0xaa>
 800be88:	2b07      	cmp	r3, #7
 800be8a:	dc15      	bgt.n	800beb8 <_HandleIncomingPacket+0x58>
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	dd3c      	ble.n	800bf0a <_HandleIncomingPacket+0xaa>
 800be90:	3b01      	subs	r3, #1
 800be92:	2b06      	cmp	r3, #6
 800be94:	d839      	bhi.n	800bf0a <_HandleIncomingPacket+0xaa>
 800be96:	a201      	add	r2, pc, #4	@ (adr r2, 800be9c <_HandleIncomingPacket+0x3c>)
 800be98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be9c:	0800bebf 	.word	0x0800bebf
 800bea0:	0800bec5 	.word	0x0800bec5
 800bea4:	0800becb 	.word	0x0800becb
 800bea8:	0800bed1 	.word	0x0800bed1
 800beac:	0800bed7 	.word	0x0800bed7
 800beb0:	0800bedd 	.word	0x0800bedd
 800beb4:	0800bee3 	.word	0x0800bee3
 800beb8:	2b7f      	cmp	r3, #127	@ 0x7f
 800beba:	d033      	beq.n	800bf24 <_HandleIncomingPacket+0xc4>
 800bebc:	e025      	b.n	800bf0a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800bebe:	f000 fcdb 	bl	800c878 <SEGGER_SYSVIEW_Start>
      break;
 800bec2:	e034      	b.n	800bf2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800bec4:	f000 fd92 	bl	800c9ec <SEGGER_SYSVIEW_Stop>
      break;
 800bec8:	e031      	b.n	800bf2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800beca:	f000 ff6b 	bl	800cda4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800bece:	e02e      	b.n	800bf2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800bed0:	f000 ff30 	bl	800cd34 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800bed4:	e02b      	b.n	800bf2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800bed6:	f000 fdaf 	bl	800ca38 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800beda:	e028      	b.n	800bf2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800bedc:	f001 fa08 	bl	800d2f0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800bee0:	e025      	b.n	800bf2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800bee2:	f001 f9e7 	bl	800d2b4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800bee6:	e022      	b.n	800bf2e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bee8:	4b13      	ldr	r3, [pc, #76]	@ (800bf38 <_HandleIncomingPacket+0xd8>)
 800beea:	7e1b      	ldrb	r3, [r3, #24]
 800beec:	4618      	mov	r0, r3
 800beee:	1cfb      	adds	r3, r7, #3
 800bef0:	2201      	movs	r2, #1
 800bef2:	4619      	mov	r1, r3
 800bef4:	f7ff fe22 	bl	800bb3c <SEGGER_RTT_ReadNoLock>
 800bef8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d013      	beq.n	800bf28 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800bf00:	78fb      	ldrb	r3, [r7, #3]
 800bf02:	4618      	mov	r0, r3
 800bf04:	f001 f94c 	bl	800d1a0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800bf08:	e00e      	b.n	800bf28 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800bf0a:	78fb      	ldrb	r3, [r7, #3]
 800bf0c:	b25b      	sxtb	r3, r3
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	da0c      	bge.n	800bf2c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800bf12:	4b09      	ldr	r3, [pc, #36]	@ (800bf38 <_HandleIncomingPacket+0xd8>)
 800bf14:	7e1b      	ldrb	r3, [r3, #24]
 800bf16:	4618      	mov	r0, r3
 800bf18:	1cfb      	adds	r3, r7, #3
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	f7ff fe0d 	bl	800bb3c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800bf22:	e003      	b.n	800bf2c <_HandleIncomingPacket+0xcc>
      break;
 800bf24:	bf00      	nop
 800bf26:	e002      	b.n	800bf2e <_HandleIncomingPacket+0xce>
      break;
 800bf28:	bf00      	nop
 800bf2a:	e000      	b.n	800bf2e <_HandleIncomingPacket+0xce>
      break;
 800bf2c:	bf00      	nop
    }
  }
}
 800bf2e:	bf00      	nop
 800bf30:	3708      	adds	r7, #8
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	2001aaa0 	.word	0x2001aaa0

0800bf3c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b08c      	sub	sp, #48	@ 0x30
 800bf40:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800bf42:	2301      	movs	r3, #1
 800bf44:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800bf46:	1d3b      	adds	r3, r7, #4
 800bf48:	3301      	adds	r3, #1
 800bf4a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800bf4c:	69fb      	ldr	r3, [r7, #28]
 800bf4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bf50:	4b31      	ldr	r3, [pc, #196]	@ (800c018 <_TrySendOverflowPacket+0xdc>)
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf56:	e00b      	b.n	800bf70 <_TrySendOverflowPacket+0x34>
 800bf58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf5e:	1c59      	adds	r1, r3, #1
 800bf60:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800bf62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bf66:	b2d2      	uxtb	r2, r2
 800bf68:	701a      	strb	r2, [r3, #0]
 800bf6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf6c:	09db      	lsrs	r3, r3, #7
 800bf6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf72:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf74:	d8f0      	bhi.n	800bf58 <_TrySendOverflowPacket+0x1c>
 800bf76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf78:	1c5a      	adds	r2, r3, #1
 800bf7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bf7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf7e:	b2d2      	uxtb	r2, r2
 800bf80:	701a      	strb	r2, [r3, #0]
 800bf82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf84:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800bf86:	4b25      	ldr	r3, [pc, #148]	@ (800c01c <_TrySendOverflowPacket+0xe0>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800bf8c:	4b22      	ldr	r3, [pc, #136]	@ (800c018 <_TrySendOverflowPacket+0xdc>)
 800bf8e:	68db      	ldr	r3, [r3, #12]
 800bf90:	69ba      	ldr	r2, [r7, #24]
 800bf92:	1ad3      	subs	r3, r2, r3
 800bf94:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800bf96:	69fb      	ldr	r3, [r7, #28]
 800bf98:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf9a:	697b      	ldr	r3, [r7, #20]
 800bf9c:	623b      	str	r3, [r7, #32]
 800bf9e:	e00b      	b.n	800bfb8 <_TrySendOverflowPacket+0x7c>
 800bfa0:	6a3b      	ldr	r3, [r7, #32]
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa6:	1c59      	adds	r1, r3, #1
 800bfa8:	6279      	str	r1, [r7, #36]	@ 0x24
 800bfaa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bfae:	b2d2      	uxtb	r2, r2
 800bfb0:	701a      	strb	r2, [r3, #0]
 800bfb2:	6a3b      	ldr	r3, [r7, #32]
 800bfb4:	09db      	lsrs	r3, r3, #7
 800bfb6:	623b      	str	r3, [r7, #32]
 800bfb8:	6a3b      	ldr	r3, [r7, #32]
 800bfba:	2b7f      	cmp	r3, #127	@ 0x7f
 800bfbc:	d8f0      	bhi.n	800bfa0 <_TrySendOverflowPacket+0x64>
 800bfbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfc0:	1c5a      	adds	r2, r3, #1
 800bfc2:	627a      	str	r2, [r7, #36]	@ 0x24
 800bfc4:	6a3a      	ldr	r2, [r7, #32]
 800bfc6:	b2d2      	uxtb	r2, r2
 800bfc8:	701a      	strb	r2, [r3, #0]
 800bfca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfcc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800bfce:	4b12      	ldr	r3, [pc, #72]	@ (800c018 <_TrySendOverflowPacket+0xdc>)
 800bfd0:	785b      	ldrb	r3, [r3, #1]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	1d3b      	adds	r3, r7, #4
 800bfd6:	69fa      	ldr	r2, [r7, #28]
 800bfd8:	1ad3      	subs	r3, r2, r3
 800bfda:	461a      	mov	r2, r3
 800bfdc:	1d3b      	adds	r3, r7, #4
 800bfde:	4619      	mov	r1, r3
 800bfe0:	f7f4 f8f6 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d009      	beq.n	800c002 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800bfee:	4a0a      	ldr	r2, [pc, #40]	@ (800c018 <_TrySendOverflowPacket+0xdc>)
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800bff4:	4b08      	ldr	r3, [pc, #32]	@ (800c018 <_TrySendOverflowPacket+0xdc>)
 800bff6:	781b      	ldrb	r3, [r3, #0]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	b2da      	uxtb	r2, r3
 800bffc:	4b06      	ldr	r3, [pc, #24]	@ (800c018 <_TrySendOverflowPacket+0xdc>)
 800bffe:	701a      	strb	r2, [r3, #0]
 800c000:	e004      	b.n	800c00c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c002:	4b05      	ldr	r3, [pc, #20]	@ (800c018 <_TrySendOverflowPacket+0xdc>)
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	3301      	adds	r3, #1
 800c008:	4a03      	ldr	r2, [pc, #12]	@ (800c018 <_TrySendOverflowPacket+0xdc>)
 800c00a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c00c:	693b      	ldr	r3, [r7, #16]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3730      	adds	r7, #48	@ 0x30
 800c012:	46bd      	mov	sp, r7
 800c014:	bd80      	pop	{r7, pc}
 800c016:	bf00      	nop
 800c018:	2001aaa0 	.word	0x2001aaa0
 800c01c:	e0001004 	.word	0xe0001004

0800c020 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c020:	b580      	push	{r7, lr}
 800c022:	b08a      	sub	sp, #40	@ 0x28
 800c024:	af00      	add	r7, sp, #0
 800c026:	60f8      	str	r0, [r7, #12]
 800c028:	60b9      	str	r1, [r7, #8]
 800c02a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c02c:	4b98      	ldr	r3, [pc, #608]	@ (800c290 <_SendPacket+0x270>)
 800c02e:	781b      	ldrb	r3, [r3, #0]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d010      	beq.n	800c056 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c034:	4b96      	ldr	r3, [pc, #600]	@ (800c290 <_SendPacket+0x270>)
 800c036:	781b      	ldrb	r3, [r3, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	f000 812d 	beq.w	800c298 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c03e:	4b94      	ldr	r3, [pc, #592]	@ (800c290 <_SendPacket+0x270>)
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	2b02      	cmp	r3, #2
 800c044:	d109      	bne.n	800c05a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c046:	f7ff ff79 	bl	800bf3c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c04a:	4b91      	ldr	r3, [pc, #580]	@ (800c290 <_SendPacket+0x270>)
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	2b01      	cmp	r3, #1
 800c050:	f040 8124 	bne.w	800c29c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800c054:	e001      	b.n	800c05a <_SendPacket+0x3a>
    goto Send;
 800c056:	bf00      	nop
 800c058:	e000      	b.n	800c05c <_SendPacket+0x3c>
Send:
 800c05a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b1f      	cmp	r3, #31
 800c060:	d809      	bhi.n	800c076 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c062:	4b8b      	ldr	r3, [pc, #556]	@ (800c290 <_SendPacket+0x270>)
 800c064:	69da      	ldr	r2, [r3, #28]
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	fa22 f303 	lsr.w	r3, r2, r3
 800c06c:	f003 0301 	and.w	r3, r3, #1
 800c070:	2b00      	cmp	r3, #0
 800c072:	f040 8115 	bne.w	800c2a0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2b17      	cmp	r3, #23
 800c07a:	d807      	bhi.n	800c08c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	3b01      	subs	r3, #1
 800c080:	60fb      	str	r3, [r7, #12]
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	b2da      	uxtb	r2, r3
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	701a      	strb	r2, [r3, #0]
 800c08a:	e0c4      	b.n	800c216 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800c08c:	68ba      	ldr	r2, [r7, #8]
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	1ad3      	subs	r3, r2, r3
 800c092:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800c094:	69fb      	ldr	r3, [r7, #28]
 800c096:	2b7f      	cmp	r3, #127	@ 0x7f
 800c098:	d912      	bls.n	800c0c0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	09da      	lsrs	r2, r3, #7
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	3b01      	subs	r3, #1
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	b2d2      	uxtb	r2, r2
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	b2db      	uxtb	r3, r3
 800c0ae:	68fa      	ldr	r2, [r7, #12]
 800c0b0:	3a01      	subs	r2, #1
 800c0b2:	60fa      	str	r2, [r7, #12]
 800c0b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c0b8:	b2da      	uxtb	r2, r3
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	701a      	strb	r2, [r3, #0]
 800c0be:	e006      	b.n	800c0ce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	3b01      	subs	r3, #1
 800c0c4:	60fb      	str	r3, [r7, #12]
 800c0c6:	69fb      	ldr	r3, [r7, #28]
 800c0c8:	b2da      	uxtb	r2, r3
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2b7e      	cmp	r3, #126	@ 0x7e
 800c0d2:	d807      	bhi.n	800c0e4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	3b01      	subs	r3, #1
 800c0d8:	60fb      	str	r3, [r7, #12]
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	b2da      	uxtb	r2, r3
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	701a      	strb	r2, [r3, #0]
 800c0e2:	e098      	b.n	800c216 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c0ea:	d212      	bcs.n	800c112 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	09da      	lsrs	r2, r3, #7
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	3b01      	subs	r3, #1
 800c0f4:	60fb      	str	r3, [r7, #12]
 800c0f6:	b2d2      	uxtb	r2, r2
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	b2db      	uxtb	r3, r3
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	3a01      	subs	r2, #1
 800c104:	60fa      	str	r2, [r7, #12]
 800c106:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c10a:	b2da      	uxtb	r2, r3
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	701a      	strb	r2, [r3, #0]
 800c110:	e081      	b.n	800c216 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c118:	d21d      	bcs.n	800c156 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	0b9a      	lsrs	r2, r3, #14
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	3b01      	subs	r3, #1
 800c122:	60fb      	str	r3, [r7, #12]
 800c124:	b2d2      	uxtb	r2, r2
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	09db      	lsrs	r3, r3, #7
 800c12e:	b2db      	uxtb	r3, r3
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	3a01      	subs	r2, #1
 800c134:	60fa      	str	r2, [r7, #12]
 800c136:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c13a:	b2da      	uxtb	r2, r3
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	b2db      	uxtb	r3, r3
 800c144:	68fa      	ldr	r2, [r7, #12]
 800c146:	3a01      	subs	r2, #1
 800c148:	60fa      	str	r2, [r7, #12]
 800c14a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c14e:	b2da      	uxtb	r2, r3
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	701a      	strb	r2, [r3, #0]
 800c154:	e05f      	b.n	800c216 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c15c:	d228      	bcs.n	800c1b0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	0d5a      	lsrs	r2, r3, #21
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	3b01      	subs	r3, #1
 800c166:	60fb      	str	r3, [r7, #12]
 800c168:	b2d2      	uxtb	r2, r2
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	0b9b      	lsrs	r3, r3, #14
 800c172:	b2db      	uxtb	r3, r3
 800c174:	68fa      	ldr	r2, [r7, #12]
 800c176:	3a01      	subs	r2, #1
 800c178:	60fa      	str	r2, [r7, #12]
 800c17a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	09db      	lsrs	r3, r3, #7
 800c188:	b2db      	uxtb	r3, r3
 800c18a:	68fa      	ldr	r2, [r7, #12]
 800c18c:	3a01      	subs	r2, #1
 800c18e:	60fa      	str	r2, [r7, #12]
 800c190:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c194:	b2da      	uxtb	r2, r3
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	b2db      	uxtb	r3, r3
 800c19e:	68fa      	ldr	r2, [r7, #12]
 800c1a0:	3a01      	subs	r2, #1
 800c1a2:	60fa      	str	r2, [r7, #12]
 800c1a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c1a8:	b2da      	uxtb	r2, r3
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	701a      	strb	r2, [r3, #0]
 800c1ae:	e032      	b.n	800c216 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	0f1a      	lsrs	r2, r3, #28
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	3b01      	subs	r3, #1
 800c1b8:	60fb      	str	r3, [r7, #12]
 800c1ba:	b2d2      	uxtb	r2, r2
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	0d5b      	lsrs	r3, r3, #21
 800c1c4:	b2db      	uxtb	r3, r3
 800c1c6:	68fa      	ldr	r2, [r7, #12]
 800c1c8:	3a01      	subs	r2, #1
 800c1ca:	60fa      	str	r2, [r7, #12]
 800c1cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c1d0:	b2da      	uxtb	r2, r3
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	0b9b      	lsrs	r3, r3, #14
 800c1da:	b2db      	uxtb	r3, r3
 800c1dc:	68fa      	ldr	r2, [r7, #12]
 800c1de:	3a01      	subs	r2, #1
 800c1e0:	60fa      	str	r2, [r7, #12]
 800c1e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c1e6:	b2da      	uxtb	r2, r3
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	09db      	lsrs	r3, r3, #7
 800c1f0:	b2db      	uxtb	r3, r3
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	3a01      	subs	r2, #1
 800c1f6:	60fa      	str	r2, [r7, #12]
 800c1f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c1fc:	b2da      	uxtb	r2, r3
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	b2db      	uxtb	r3, r3
 800c206:	68fa      	ldr	r2, [r7, #12]
 800c208:	3a01      	subs	r2, #1
 800c20a:	60fa      	str	r2, [r7, #12]
 800c20c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c210:	b2da      	uxtb	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c216:	4b1f      	ldr	r3, [pc, #124]	@ (800c294 <_SendPacket+0x274>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c21c:	4b1c      	ldr	r3, [pc, #112]	@ (800c290 <_SendPacket+0x270>)
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	69ba      	ldr	r2, [r7, #24]
 800c222:	1ad3      	subs	r3, r2, r3
 800c224:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	627b      	str	r3, [r7, #36]	@ 0x24
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	623b      	str	r3, [r7, #32]
 800c22e:	e00b      	b.n	800c248 <_SendPacket+0x228>
 800c230:	6a3b      	ldr	r3, [r7, #32]
 800c232:	b2da      	uxtb	r2, r3
 800c234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c236:	1c59      	adds	r1, r3, #1
 800c238:	6279      	str	r1, [r7, #36]	@ 0x24
 800c23a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c23e:	b2d2      	uxtb	r2, r2
 800c240:	701a      	strb	r2, [r3, #0]
 800c242:	6a3b      	ldr	r3, [r7, #32]
 800c244:	09db      	lsrs	r3, r3, #7
 800c246:	623b      	str	r3, [r7, #32]
 800c248:	6a3b      	ldr	r3, [r7, #32]
 800c24a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c24c:	d8f0      	bhi.n	800c230 <_SendPacket+0x210>
 800c24e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c250:	1c5a      	adds	r2, r3, #1
 800c252:	627a      	str	r2, [r7, #36]	@ 0x24
 800c254:	6a3a      	ldr	r2, [r7, #32]
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	701a      	strb	r2, [r3, #0]
 800c25a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800c25e:	4b0c      	ldr	r3, [pc, #48]	@ (800c290 <_SendPacket+0x270>)
 800c260:	785b      	ldrb	r3, [r3, #1]
 800c262:	4618      	mov	r0, r3
 800c264:	68ba      	ldr	r2, [r7, #8]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	1ad3      	subs	r3, r2, r3
 800c26a:	461a      	mov	r2, r3
 800c26c:	68f9      	ldr	r1, [r7, #12]
 800c26e:	f7f3 ffaf 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c272:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800c274:	693b      	ldr	r3, [r7, #16]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d003      	beq.n	800c282 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c27a:	4a05      	ldr	r2, [pc, #20]	@ (800c290 <_SendPacket+0x270>)
 800c27c:	69bb      	ldr	r3, [r7, #24]
 800c27e:	60d3      	str	r3, [r2, #12]
 800c280:	e00f      	b.n	800c2a2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800c282:	4b03      	ldr	r3, [pc, #12]	@ (800c290 <_SendPacket+0x270>)
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	3301      	adds	r3, #1
 800c288:	b2da      	uxtb	r2, r3
 800c28a:	4b01      	ldr	r3, [pc, #4]	@ (800c290 <_SendPacket+0x270>)
 800c28c:	701a      	strb	r2, [r3, #0]
 800c28e:	e008      	b.n	800c2a2 <_SendPacket+0x282>
 800c290:	2001aaa0 	.word	0x2001aaa0
 800c294:	e0001004 	.word	0xe0001004
    goto SendDone;
 800c298:	bf00      	nop
 800c29a:	e002      	b.n	800c2a2 <_SendPacket+0x282>
      goto SendDone;
 800c29c:	bf00      	nop
 800c29e:	e000      	b.n	800c2a2 <_SendPacket+0x282>
      goto SendDone;
 800c2a0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800c2a2:	4b14      	ldr	r3, [pc, #80]	@ (800c2f4 <_SendPacket+0x2d4>)
 800c2a4:	7e1b      	ldrb	r3, [r3, #24]
 800c2a6:	4619      	mov	r1, r3
 800c2a8:	4a13      	ldr	r2, [pc, #76]	@ (800c2f8 <_SendPacket+0x2d8>)
 800c2aa:	460b      	mov	r3, r1
 800c2ac:	005b      	lsls	r3, r3, #1
 800c2ae:	440b      	add	r3, r1
 800c2b0:	00db      	lsls	r3, r3, #3
 800c2b2:	4413      	add	r3, r2
 800c2b4:	336c      	adds	r3, #108	@ 0x6c
 800c2b6:	681a      	ldr	r2, [r3, #0]
 800c2b8:	4b0e      	ldr	r3, [pc, #56]	@ (800c2f4 <_SendPacket+0x2d4>)
 800c2ba:	7e1b      	ldrb	r3, [r3, #24]
 800c2bc:	4618      	mov	r0, r3
 800c2be:	490e      	ldr	r1, [pc, #56]	@ (800c2f8 <_SendPacket+0x2d8>)
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	005b      	lsls	r3, r3, #1
 800c2c4:	4403      	add	r3, r0
 800c2c6:	00db      	lsls	r3, r3, #3
 800c2c8:	440b      	add	r3, r1
 800c2ca:	3370      	adds	r3, #112	@ 0x70
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	429a      	cmp	r2, r3
 800c2d0:	d00b      	beq.n	800c2ea <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800c2d2:	4b08      	ldr	r3, [pc, #32]	@ (800c2f4 <_SendPacket+0x2d4>)
 800c2d4:	789b      	ldrb	r3, [r3, #2]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d107      	bne.n	800c2ea <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800c2da:	4b06      	ldr	r3, [pc, #24]	@ (800c2f4 <_SendPacket+0x2d4>)
 800c2dc:	2201      	movs	r2, #1
 800c2de:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800c2e0:	f7ff fdbe 	bl	800be60 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800c2e4:	4b03      	ldr	r3, [pc, #12]	@ (800c2f4 <_SendPacket+0x2d4>)
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800c2ea:	bf00      	nop
 800c2ec:	3728      	adds	r7, #40	@ 0x28
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	2001aaa0 	.word	0x2001aaa0
 800c2f8:	200195e0 	.word	0x200195e0

0800c2fc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b086      	sub	sp, #24
 800c300:	af02      	add	r7, sp, #8
 800c302:	60f8      	str	r0, [r7, #12]
 800c304:	60b9      	str	r1, [r7, #8]
 800c306:	607a      	str	r2, [r7, #4]
 800c308:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c30a:	2300      	movs	r3, #0
 800c30c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c310:	4917      	ldr	r1, [pc, #92]	@ (800c370 <SEGGER_SYSVIEW_Init+0x74>)
 800c312:	4818      	ldr	r0, [pc, #96]	@ (800c374 <SEGGER_SYSVIEW_Init+0x78>)
 800c314:	f7ff fc98 	bl	800bc48 <SEGGER_RTT_AllocUpBuffer>
 800c318:	4603      	mov	r3, r0
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	4b16      	ldr	r3, [pc, #88]	@ (800c378 <SEGGER_SYSVIEW_Init+0x7c>)
 800c31e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800c320:	4b15      	ldr	r3, [pc, #84]	@ (800c378 <SEGGER_SYSVIEW_Init+0x7c>)
 800c322:	785a      	ldrb	r2, [r3, #1]
 800c324:	4b14      	ldr	r3, [pc, #80]	@ (800c378 <SEGGER_SYSVIEW_Init+0x7c>)
 800c326:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800c328:	4b13      	ldr	r3, [pc, #76]	@ (800c378 <SEGGER_SYSVIEW_Init+0x7c>)
 800c32a:	7e1b      	ldrb	r3, [r3, #24]
 800c32c:	4618      	mov	r0, r3
 800c32e:	2300      	movs	r3, #0
 800c330:	9300      	str	r3, [sp, #0]
 800c332:	2308      	movs	r3, #8
 800c334:	4a11      	ldr	r2, [pc, #68]	@ (800c37c <SEGGER_SYSVIEW_Init+0x80>)
 800c336:	490f      	ldr	r1, [pc, #60]	@ (800c374 <SEGGER_SYSVIEW_Init+0x78>)
 800c338:	f7ff fd0a 	bl	800bd50 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800c33c:	4b0e      	ldr	r3, [pc, #56]	@ (800c378 <SEGGER_SYSVIEW_Init+0x7c>)
 800c33e:	2200      	movs	r2, #0
 800c340:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c342:	4b0f      	ldr	r3, [pc, #60]	@ (800c380 <SEGGER_SYSVIEW_Init+0x84>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	4a0c      	ldr	r2, [pc, #48]	@ (800c378 <SEGGER_SYSVIEW_Init+0x7c>)
 800c348:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800c34a:	4a0b      	ldr	r2, [pc, #44]	@ (800c378 <SEGGER_SYSVIEW_Init+0x7c>)
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800c350:	4a09      	ldr	r2, [pc, #36]	@ (800c378 <SEGGER_SYSVIEW_Init+0x7c>)
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800c356:	4a08      	ldr	r2, [pc, #32]	@ (800c378 <SEGGER_SYSVIEW_Init+0x7c>)
 800c358:	68bb      	ldr	r3, [r7, #8]
 800c35a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800c35c:	4a06      	ldr	r2, [pc, #24]	@ (800c378 <SEGGER_SYSVIEW_Init+0x7c>)
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800c362:	4b05      	ldr	r3, [pc, #20]	@ (800c378 <SEGGER_SYSVIEW_Init+0x7c>)
 800c364:	2200      	movs	r2, #0
 800c366:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800c368:	bf00      	nop
 800c36a:	3710      	adds	r7, #16
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}
 800c370:	20019a98 	.word	0x20019a98
 800c374:	0800e994 	.word	0x0800e994
 800c378:	2001aaa0 	.word	0x2001aaa0
 800c37c:	2001aa98 	.word	0x2001aa98
 800c380:	e0001004 	.word	0xe0001004

0800c384 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800c38c:	4a04      	ldr	r2, [pc, #16]	@ (800c3a0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6113      	str	r3, [r2, #16]
}
 800c392:	bf00      	nop
 800c394:	370c      	adds	r7, #12
 800c396:	46bd      	mov	sp, r7
 800c398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39c:	4770      	bx	lr
 800c39e:	bf00      	nop
 800c3a0:	2001aaa0 	.word	0x2001aaa0

0800c3a4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c3ac:	f3ef 8311 	mrs	r3, BASEPRI
 800c3b0:	f04f 0120 	mov.w	r1, #32
 800c3b4:	f381 8811 	msr	BASEPRI, r1
 800c3b8:	60fb      	str	r3, [r7, #12]
 800c3ba:	4808      	ldr	r0, [pc, #32]	@ (800c3dc <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800c3bc:	f7ff fd44 	bl	800be48 <_PreparePacket>
 800c3c0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	68b9      	ldr	r1, [r7, #8]
 800c3c6:	68b8      	ldr	r0, [r7, #8]
 800c3c8:	f7ff fe2a 	bl	800c020 <_SendPacket>
  RECORD_END();
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	f383 8811 	msr	BASEPRI, r3
}
 800c3d2:	bf00      	nop
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}
 800c3da:	bf00      	nop
 800c3dc:	2001aad0 	.word	0x2001aad0

0800c3e0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b088      	sub	sp, #32
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800c3ea:	f3ef 8311 	mrs	r3, BASEPRI
 800c3ee:	f04f 0120 	mov.w	r1, #32
 800c3f2:	f381 8811 	msr	BASEPRI, r1
 800c3f6:	617b      	str	r3, [r7, #20]
 800c3f8:	4816      	ldr	r0, [pc, #88]	@ (800c454 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800c3fa:	f7ff fd25 	bl	800be48 <_PreparePacket>
 800c3fe:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	61fb      	str	r3, [r7, #28]
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	61bb      	str	r3, [r7, #24]
 800c40c:	e00b      	b.n	800c426 <SEGGER_SYSVIEW_RecordU32+0x46>
 800c40e:	69bb      	ldr	r3, [r7, #24]
 800c410:	b2da      	uxtb	r2, r3
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	1c59      	adds	r1, r3, #1
 800c416:	61f9      	str	r1, [r7, #28]
 800c418:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c41c:	b2d2      	uxtb	r2, r2
 800c41e:	701a      	strb	r2, [r3, #0]
 800c420:	69bb      	ldr	r3, [r7, #24]
 800c422:	09db      	lsrs	r3, r3, #7
 800c424:	61bb      	str	r3, [r7, #24]
 800c426:	69bb      	ldr	r3, [r7, #24]
 800c428:	2b7f      	cmp	r3, #127	@ 0x7f
 800c42a:	d8f0      	bhi.n	800c40e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	1c5a      	adds	r2, r3, #1
 800c430:	61fa      	str	r2, [r7, #28]
 800c432:	69ba      	ldr	r2, [r7, #24]
 800c434:	b2d2      	uxtb	r2, r2
 800c436:	701a      	strb	r2, [r3, #0]
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c43c:	687a      	ldr	r2, [r7, #4]
 800c43e:	68f9      	ldr	r1, [r7, #12]
 800c440:	6938      	ldr	r0, [r7, #16]
 800c442:	f7ff fded 	bl	800c020 <_SendPacket>
  RECORD_END();
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	f383 8811 	msr	BASEPRI, r3
}
 800c44c:	bf00      	nop
 800c44e:	3720      	adds	r7, #32
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}
 800c454:	2001aad0 	.word	0x2001aad0

0800c458 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800c458:	b580      	push	{r7, lr}
 800c45a:	b08c      	sub	sp, #48	@ 0x30
 800c45c:	af00      	add	r7, sp, #0
 800c45e:	60f8      	str	r0, [r7, #12]
 800c460:	60b9      	str	r1, [r7, #8]
 800c462:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800c464:	f3ef 8311 	mrs	r3, BASEPRI
 800c468:	f04f 0120 	mov.w	r1, #32
 800c46c:	f381 8811 	msr	BASEPRI, r1
 800c470:	61fb      	str	r3, [r7, #28]
 800c472:	4825      	ldr	r0, [pc, #148]	@ (800c508 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800c474:	f7ff fce8 	bl	800be48 <_PreparePacket>
 800c478:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c47e:	697b      	ldr	r3, [r7, #20]
 800c480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c486:	e00b      	b.n	800c4a0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800c488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c48a:	b2da      	uxtb	r2, r3
 800c48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c48e:	1c59      	adds	r1, r3, #1
 800c490:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c492:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c496:	b2d2      	uxtb	r2, r2
 800c498:	701a      	strb	r2, [r3, #0]
 800c49a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c49c:	09db      	lsrs	r3, r3, #7
 800c49e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c4a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4a4:	d8f0      	bhi.n	800c488 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800c4a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a8:	1c5a      	adds	r2, r3, #1
 800c4aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c4ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c4ae:	b2d2      	uxtb	r2, r2
 800c4b0:	701a      	strb	r2, [r3, #0]
 800c4b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	623b      	str	r3, [r7, #32]
 800c4be:	e00b      	b.n	800c4d8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800c4c0:	6a3b      	ldr	r3, [r7, #32]
 800c4c2:	b2da      	uxtb	r2, r3
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c6:	1c59      	adds	r1, r3, #1
 800c4c8:	6279      	str	r1, [r7, #36]	@ 0x24
 800c4ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c4ce:	b2d2      	uxtb	r2, r2
 800c4d0:	701a      	strb	r2, [r3, #0]
 800c4d2:	6a3b      	ldr	r3, [r7, #32]
 800c4d4:	09db      	lsrs	r3, r3, #7
 800c4d6:	623b      	str	r3, [r7, #32]
 800c4d8:	6a3b      	ldr	r3, [r7, #32]
 800c4da:	2b7f      	cmp	r3, #127	@ 0x7f
 800c4dc:	d8f0      	bhi.n	800c4c0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800c4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4e0:	1c5a      	adds	r2, r3, #1
 800c4e2:	627a      	str	r2, [r7, #36]	@ 0x24
 800c4e4:	6a3a      	ldr	r2, [r7, #32]
 800c4e6:	b2d2      	uxtb	r2, r2
 800c4e8:	701a      	strb	r2, [r3, #0]
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ec:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c4ee:	68fa      	ldr	r2, [r7, #12]
 800c4f0:	6979      	ldr	r1, [r7, #20]
 800c4f2:	69b8      	ldr	r0, [r7, #24]
 800c4f4:	f7ff fd94 	bl	800c020 <_SendPacket>
  RECORD_END();
 800c4f8:	69fb      	ldr	r3, [r7, #28]
 800c4fa:	f383 8811 	msr	BASEPRI, r3
}
 800c4fe:	bf00      	nop
 800c500:	3730      	adds	r7, #48	@ 0x30
 800c502:	46bd      	mov	sp, r7
 800c504:	bd80      	pop	{r7, pc}
 800c506:	bf00      	nop
 800c508:	2001aad0 	.word	0x2001aad0

0800c50c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b08e      	sub	sp, #56	@ 0x38
 800c510:	af00      	add	r7, sp, #0
 800c512:	60f8      	str	r0, [r7, #12]
 800c514:	60b9      	str	r1, [r7, #8]
 800c516:	607a      	str	r2, [r7, #4]
 800c518:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800c51a:	f3ef 8311 	mrs	r3, BASEPRI
 800c51e:	f04f 0120 	mov.w	r1, #32
 800c522:	f381 8811 	msr	BASEPRI, r1
 800c526:	61fb      	str	r3, [r7, #28]
 800c528:	4832      	ldr	r0, [pc, #200]	@ (800c5f4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800c52a:	f7ff fc8d 	bl	800be48 <_PreparePacket>
 800c52e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c530:	69bb      	ldr	r3, [r7, #24]
 800c532:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	637b      	str	r3, [r7, #52]	@ 0x34
 800c538:	68bb      	ldr	r3, [r7, #8]
 800c53a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c53c:	e00b      	b.n	800c556 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800c53e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c540:	b2da      	uxtb	r2, r3
 800c542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c544:	1c59      	adds	r1, r3, #1
 800c546:	6379      	str	r1, [r7, #52]	@ 0x34
 800c548:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c54c:	b2d2      	uxtb	r2, r2
 800c54e:	701a      	strb	r2, [r3, #0]
 800c550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c552:	09db      	lsrs	r3, r3, #7
 800c554:	633b      	str	r3, [r7, #48]	@ 0x30
 800c556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c558:	2b7f      	cmp	r3, #127	@ 0x7f
 800c55a:	d8f0      	bhi.n	800c53e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800c55c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c55e:	1c5a      	adds	r2, r3, #1
 800c560:	637a      	str	r2, [r7, #52]	@ 0x34
 800c562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c564:	b2d2      	uxtb	r2, r2
 800c566:	701a      	strb	r2, [r3, #0]
 800c568:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c56a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c574:	e00b      	b.n	800c58e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800c576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c578:	b2da      	uxtb	r2, r3
 800c57a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c57c:	1c59      	adds	r1, r3, #1
 800c57e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c580:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c584:	b2d2      	uxtb	r2, r2
 800c586:	701a      	strb	r2, [r3, #0]
 800c588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c58a:	09db      	lsrs	r3, r3, #7
 800c58c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c58e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c590:	2b7f      	cmp	r3, #127	@ 0x7f
 800c592:	d8f0      	bhi.n	800c576 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800c594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c596:	1c5a      	adds	r2, r3, #1
 800c598:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c59a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c59c:	b2d2      	uxtb	r2, r2
 800c59e:	701a      	strb	r2, [r3, #0]
 800c5a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	623b      	str	r3, [r7, #32]
 800c5ac:	e00b      	b.n	800c5c6 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800c5ae:	6a3b      	ldr	r3, [r7, #32]
 800c5b0:	b2da      	uxtb	r2, r3
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b4:	1c59      	adds	r1, r3, #1
 800c5b6:	6279      	str	r1, [r7, #36]	@ 0x24
 800c5b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c5bc:	b2d2      	uxtb	r2, r2
 800c5be:	701a      	strb	r2, [r3, #0]
 800c5c0:	6a3b      	ldr	r3, [r7, #32]
 800c5c2:	09db      	lsrs	r3, r3, #7
 800c5c4:	623b      	str	r3, [r7, #32]
 800c5c6:	6a3b      	ldr	r3, [r7, #32]
 800c5c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5ca:	d8f0      	bhi.n	800c5ae <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800c5cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ce:	1c5a      	adds	r2, r3, #1
 800c5d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800c5d2:	6a3a      	ldr	r2, [r7, #32]
 800c5d4:	b2d2      	uxtb	r2, r2
 800c5d6:	701a      	strb	r2, [r3, #0]
 800c5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	6979      	ldr	r1, [r7, #20]
 800c5e0:	69b8      	ldr	r0, [r7, #24]
 800c5e2:	f7ff fd1d 	bl	800c020 <_SendPacket>
  RECORD_END();
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	f383 8811 	msr	BASEPRI, r3
}
 800c5ec:	bf00      	nop
 800c5ee:	3738      	adds	r7, #56	@ 0x38
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	bd80      	pop	{r7, pc}
 800c5f4:	2001aad0 	.word	0x2001aad0

0800c5f8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b090      	sub	sp, #64	@ 0x40
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	60f8      	str	r0, [r7, #12]
 800c600:	60b9      	str	r1, [r7, #8]
 800c602:	607a      	str	r2, [r7, #4]
 800c604:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c606:	f3ef 8311 	mrs	r3, BASEPRI
 800c60a:	f04f 0120 	mov.w	r1, #32
 800c60e:	f381 8811 	msr	BASEPRI, r1
 800c612:	61fb      	str	r3, [r7, #28]
 800c614:	4840      	ldr	r0, [pc, #256]	@ (800c718 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800c616:	f7ff fc17 	bl	800be48 <_PreparePacket>
 800c61a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c628:	e00b      	b.n	800c642 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800c62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c630:	1c59      	adds	r1, r3, #1
 800c632:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c634:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c638:	b2d2      	uxtb	r2, r2
 800c63a:	701a      	strb	r2, [r3, #0]
 800c63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c63e:	09db      	lsrs	r3, r3, #7
 800c640:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c644:	2b7f      	cmp	r3, #127	@ 0x7f
 800c646:	d8f0      	bhi.n	800c62a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800c648:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c64a:	1c5a      	adds	r2, r3, #1
 800c64c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c64e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c650:	b2d2      	uxtb	r2, r2
 800c652:	701a      	strb	r2, [r3, #0]
 800c654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c656:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	637b      	str	r3, [r7, #52]	@ 0x34
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	633b      	str	r3, [r7, #48]	@ 0x30
 800c660:	e00b      	b.n	800c67a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800c662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c664:	b2da      	uxtb	r2, r3
 800c666:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c668:	1c59      	adds	r1, r3, #1
 800c66a:	6379      	str	r1, [r7, #52]	@ 0x34
 800c66c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c670:	b2d2      	uxtb	r2, r2
 800c672:	701a      	strb	r2, [r3, #0]
 800c674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c676:	09db      	lsrs	r3, r3, #7
 800c678:	633b      	str	r3, [r7, #48]	@ 0x30
 800c67a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c67c:	2b7f      	cmp	r3, #127	@ 0x7f
 800c67e:	d8f0      	bhi.n	800c662 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800c680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c682:	1c5a      	adds	r2, r3, #1
 800c684:	637a      	str	r2, [r7, #52]	@ 0x34
 800c686:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c688:	b2d2      	uxtb	r2, r2
 800c68a:	701a      	strb	r2, [r3, #0]
 800c68c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c68e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c690:	697b      	ldr	r3, [r7, #20]
 800c692:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c698:	e00b      	b.n	800c6b2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800c69a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c69c:	b2da      	uxtb	r2, r3
 800c69e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6a0:	1c59      	adds	r1, r3, #1
 800c6a2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c6a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c6a8:	b2d2      	uxtb	r2, r2
 800c6aa:	701a      	strb	r2, [r3, #0]
 800c6ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6ae:	09db      	lsrs	r3, r3, #7
 800c6b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6b4:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6b6:	d8f0      	bhi.n	800c69a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800c6b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6ba:	1c5a      	adds	r2, r3, #1
 800c6bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c6be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6c0:	b2d2      	uxtb	r2, r2
 800c6c2:	701a      	strb	r2, [r3, #0]
 800c6c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6c6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800c6cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c6ce:	623b      	str	r3, [r7, #32]
 800c6d0:	e00b      	b.n	800c6ea <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800c6d2:	6a3b      	ldr	r3, [r7, #32]
 800c6d4:	b2da      	uxtb	r2, r3
 800c6d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6d8:	1c59      	adds	r1, r3, #1
 800c6da:	6279      	str	r1, [r7, #36]	@ 0x24
 800c6dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c6e0:	b2d2      	uxtb	r2, r2
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	6a3b      	ldr	r3, [r7, #32]
 800c6e6:	09db      	lsrs	r3, r3, #7
 800c6e8:	623b      	str	r3, [r7, #32]
 800c6ea:	6a3b      	ldr	r3, [r7, #32]
 800c6ec:	2b7f      	cmp	r3, #127	@ 0x7f
 800c6ee:	d8f0      	bhi.n	800c6d2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6f2:	1c5a      	adds	r2, r3, #1
 800c6f4:	627a      	str	r2, [r7, #36]	@ 0x24
 800c6f6:	6a3a      	ldr	r2, [r7, #32]
 800c6f8:	b2d2      	uxtb	r2, r2
 800c6fa:	701a      	strb	r2, [r3, #0]
 800c6fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c700:	68fa      	ldr	r2, [r7, #12]
 800c702:	6979      	ldr	r1, [r7, #20]
 800c704:	69b8      	ldr	r0, [r7, #24]
 800c706:	f7ff fc8b 	bl	800c020 <_SendPacket>
  RECORD_END();
 800c70a:	69fb      	ldr	r3, [r7, #28]
 800c70c:	f383 8811 	msr	BASEPRI, r3
}
 800c710:	bf00      	nop
 800c712:	3740      	adds	r7, #64	@ 0x40
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	2001aad0 	.word	0x2001aad0

0800c71c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b092      	sub	sp, #72	@ 0x48
 800c720:	af00      	add	r7, sp, #0
 800c722:	60f8      	str	r0, [r7, #12]
 800c724:	60b9      	str	r1, [r7, #8]
 800c726:	607a      	str	r2, [r7, #4]
 800c728:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800c72a:	f3ef 8311 	mrs	r3, BASEPRI
 800c72e:	f04f 0120 	mov.w	r1, #32
 800c732:	f381 8811 	msr	BASEPRI, r1
 800c736:	61fb      	str	r3, [r7, #28]
 800c738:	484e      	ldr	r0, [pc, #312]	@ (800c874 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800c73a:	f7ff fb85 	bl	800be48 <_PreparePacket>
 800c73e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	647b      	str	r3, [r7, #68]	@ 0x44
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	643b      	str	r3, [r7, #64]	@ 0x40
 800c74c:	e00b      	b.n	800c766 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800c74e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c750:	b2da      	uxtb	r2, r3
 800c752:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c754:	1c59      	adds	r1, r3, #1
 800c756:	6479      	str	r1, [r7, #68]	@ 0x44
 800c758:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c75c:	b2d2      	uxtb	r2, r2
 800c75e:	701a      	strb	r2, [r3, #0]
 800c760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c762:	09db      	lsrs	r3, r3, #7
 800c764:	643b      	str	r3, [r7, #64]	@ 0x40
 800c766:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c768:	2b7f      	cmp	r3, #127	@ 0x7f
 800c76a:	d8f0      	bhi.n	800c74e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800c76c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c76e:	1c5a      	adds	r2, r3, #1
 800c770:	647a      	str	r2, [r7, #68]	@ 0x44
 800c772:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c774:	b2d2      	uxtb	r2, r2
 800c776:	701a      	strb	r2, [r3, #0]
 800c778:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c77a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800c77c:	697b      	ldr	r3, [r7, #20]
 800c77e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c784:	e00b      	b.n	800c79e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800c786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c78c:	1c59      	adds	r1, r3, #1
 800c78e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800c790:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c794:	b2d2      	uxtb	r2, r2
 800c796:	701a      	strb	r2, [r3, #0]
 800c798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79a:	09db      	lsrs	r3, r3, #7
 800c79c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c79e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7a2:	d8f0      	bhi.n	800c786 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800c7a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7a6:	1c5a      	adds	r2, r3, #1
 800c7a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c7aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c7ac:	b2d2      	uxtb	r2, r2
 800c7ae:	701a      	strb	r2, [r3, #0]
 800c7b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c7b2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	637b      	str	r3, [r7, #52]	@ 0x34
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7bc:	e00b      	b.n	800c7d6 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c0:	b2da      	uxtb	r2, r3
 800c7c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7c4:	1c59      	adds	r1, r3, #1
 800c7c6:	6379      	str	r1, [r7, #52]	@ 0x34
 800c7c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c7cc:	b2d2      	uxtb	r2, r2
 800c7ce:	701a      	strb	r2, [r3, #0]
 800c7d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d2:	09db      	lsrs	r3, r3, #7
 800c7d4:	633b      	str	r3, [r7, #48]	@ 0x30
 800c7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7d8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c7da:	d8f0      	bhi.n	800c7be <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800c7dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	637a      	str	r2, [r7, #52]	@ 0x34
 800c7e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7e4:	b2d2      	uxtb	r2, r2
 800c7e6:	701a      	strb	r2, [r3, #0]
 800c7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c7ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800c7ec:	697b      	ldr	r3, [r7, #20]
 800c7ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c7f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c7f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c7f4:	e00b      	b.n	800c80e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800c7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f8:	b2da      	uxtb	r2, r3
 800c7fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7fc:	1c59      	adds	r1, r3, #1
 800c7fe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c800:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c804:	b2d2      	uxtb	r2, r2
 800c806:	701a      	strb	r2, [r3, #0]
 800c808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c80a:	09db      	lsrs	r3, r3, #7
 800c80c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c80e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c810:	2b7f      	cmp	r3, #127	@ 0x7f
 800c812:	d8f0      	bhi.n	800c7f6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800c814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c816:	1c5a      	adds	r2, r3, #1
 800c818:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c81a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c81c:	b2d2      	uxtb	r2, r2
 800c81e:	701a      	strb	r2, [r3, #0]
 800c820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c822:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800c824:	697b      	ldr	r3, [r7, #20]
 800c826:	627b      	str	r3, [r7, #36]	@ 0x24
 800c828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c82a:	623b      	str	r3, [r7, #32]
 800c82c:	e00b      	b.n	800c846 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800c82e:	6a3b      	ldr	r3, [r7, #32]
 800c830:	b2da      	uxtb	r2, r3
 800c832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c834:	1c59      	adds	r1, r3, #1
 800c836:	6279      	str	r1, [r7, #36]	@ 0x24
 800c838:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c83c:	b2d2      	uxtb	r2, r2
 800c83e:	701a      	strb	r2, [r3, #0]
 800c840:	6a3b      	ldr	r3, [r7, #32]
 800c842:	09db      	lsrs	r3, r3, #7
 800c844:	623b      	str	r3, [r7, #32]
 800c846:	6a3b      	ldr	r3, [r7, #32]
 800c848:	2b7f      	cmp	r3, #127	@ 0x7f
 800c84a:	d8f0      	bhi.n	800c82e <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800c84c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84e:	1c5a      	adds	r2, r3, #1
 800c850:	627a      	str	r2, [r7, #36]	@ 0x24
 800c852:	6a3a      	ldr	r2, [r7, #32]
 800c854:	b2d2      	uxtb	r2, r2
 800c856:	701a      	strb	r2, [r3, #0]
 800c858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c85a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800c85c:	68fa      	ldr	r2, [r7, #12]
 800c85e:	6979      	ldr	r1, [r7, #20]
 800c860:	69b8      	ldr	r0, [r7, #24]
 800c862:	f7ff fbdd 	bl	800c020 <_SendPacket>
  RECORD_END();
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	f383 8811 	msr	BASEPRI, r3
}
 800c86c:	bf00      	nop
 800c86e:	3748      	adds	r7, #72	@ 0x48
 800c870:	46bd      	mov	sp, r7
 800c872:	bd80      	pop	{r7, pc}
 800c874:	2001aad0 	.word	0x2001aad0

0800c878 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800c878:	b580      	push	{r7, lr}
 800c87a:	b08c      	sub	sp, #48	@ 0x30
 800c87c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800c87e:	4b58      	ldr	r3, [pc, #352]	@ (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c880:	2201      	movs	r2, #1
 800c882:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800c884:	f3ef 8311 	mrs	r3, BASEPRI
 800c888:	f04f 0120 	mov.w	r1, #32
 800c88c:	f381 8811 	msr	BASEPRI, r1
 800c890:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800c892:	4b53      	ldr	r3, [pc, #332]	@ (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c894:	785b      	ldrb	r3, [r3, #1]
 800c896:	220a      	movs	r2, #10
 800c898:	4952      	ldr	r1, [pc, #328]	@ (800c9e4 <SEGGER_SYSVIEW_Start+0x16c>)
 800c89a:	4618      	mov	r0, r3
 800c89c:	f7f3 fc98 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800c8a6:	200a      	movs	r0, #10
 800c8a8:	f7ff fd7c 	bl	800c3a4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800c8ac:	f3ef 8311 	mrs	r3, BASEPRI
 800c8b0:	f04f 0120 	mov.w	r1, #32
 800c8b4:	f381 8811 	msr	BASEPRI, r1
 800c8b8:	60bb      	str	r3, [r7, #8]
 800c8ba:	484b      	ldr	r0, [pc, #300]	@ (800c9e8 <SEGGER_SYSVIEW_Start+0x170>)
 800c8bc:	f7ff fac4 	bl	800be48 <_PreparePacket>
 800c8c0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8ca:	4b45      	ldr	r3, [pc, #276]	@ (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c8cc:	685b      	ldr	r3, [r3, #4]
 800c8ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8d0:	e00b      	b.n	800c8ea <SEGGER_SYSVIEW_Start+0x72>
 800c8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8d4:	b2da      	uxtb	r2, r3
 800c8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8d8:	1c59      	adds	r1, r3, #1
 800c8da:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c8dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c8e0:	b2d2      	uxtb	r2, r2
 800c8e2:	701a      	strb	r2, [r3, #0]
 800c8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8e6:	09db      	lsrs	r3, r3, #7
 800c8e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ec:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8ee:	d8f0      	bhi.n	800c8d2 <SEGGER_SYSVIEW_Start+0x5a>
 800c8f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f2:	1c5a      	adds	r2, r3, #1
 800c8f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c8f8:	b2d2      	uxtb	r2, r2
 800c8fa:	701a      	strb	r2, [r3, #0]
 800c8fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8fe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	627b      	str	r3, [r7, #36]	@ 0x24
 800c904:	4b36      	ldr	r3, [pc, #216]	@ (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c906:	689b      	ldr	r3, [r3, #8]
 800c908:	623b      	str	r3, [r7, #32]
 800c90a:	e00b      	b.n	800c924 <SEGGER_SYSVIEW_Start+0xac>
 800c90c:	6a3b      	ldr	r3, [r7, #32]
 800c90e:	b2da      	uxtb	r2, r3
 800c910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c912:	1c59      	adds	r1, r3, #1
 800c914:	6279      	str	r1, [r7, #36]	@ 0x24
 800c916:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c91a:	b2d2      	uxtb	r2, r2
 800c91c:	701a      	strb	r2, [r3, #0]
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	09db      	lsrs	r3, r3, #7
 800c922:	623b      	str	r3, [r7, #32]
 800c924:	6a3b      	ldr	r3, [r7, #32]
 800c926:	2b7f      	cmp	r3, #127	@ 0x7f
 800c928:	d8f0      	bhi.n	800c90c <SEGGER_SYSVIEW_Start+0x94>
 800c92a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c92c:	1c5a      	adds	r2, r3, #1
 800c92e:	627a      	str	r2, [r7, #36]	@ 0x24
 800c930:	6a3a      	ldr	r2, [r7, #32]
 800c932:	b2d2      	uxtb	r2, r2
 800c934:	701a      	strb	r2, [r3, #0]
 800c936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c938:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	61fb      	str	r3, [r7, #28]
 800c93e:	4b28      	ldr	r3, [pc, #160]	@ (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c940:	691b      	ldr	r3, [r3, #16]
 800c942:	61bb      	str	r3, [r7, #24]
 800c944:	e00b      	b.n	800c95e <SEGGER_SYSVIEW_Start+0xe6>
 800c946:	69bb      	ldr	r3, [r7, #24]
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	69fb      	ldr	r3, [r7, #28]
 800c94c:	1c59      	adds	r1, r3, #1
 800c94e:	61f9      	str	r1, [r7, #28]
 800c950:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c954:	b2d2      	uxtb	r2, r2
 800c956:	701a      	strb	r2, [r3, #0]
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	09db      	lsrs	r3, r3, #7
 800c95c:	61bb      	str	r3, [r7, #24]
 800c95e:	69bb      	ldr	r3, [r7, #24]
 800c960:	2b7f      	cmp	r3, #127	@ 0x7f
 800c962:	d8f0      	bhi.n	800c946 <SEGGER_SYSVIEW_Start+0xce>
 800c964:	69fb      	ldr	r3, [r7, #28]
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	61fa      	str	r2, [r7, #28]
 800c96a:	69ba      	ldr	r2, [r7, #24]
 800c96c:	b2d2      	uxtb	r2, r2
 800c96e:	701a      	strb	r2, [r3, #0]
 800c970:	69fb      	ldr	r3, [r7, #28]
 800c972:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	617b      	str	r3, [r7, #20]
 800c978:	2300      	movs	r3, #0
 800c97a:	613b      	str	r3, [r7, #16]
 800c97c:	e00b      	b.n	800c996 <SEGGER_SYSVIEW_Start+0x11e>
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	b2da      	uxtb	r2, r3
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	1c59      	adds	r1, r3, #1
 800c986:	6179      	str	r1, [r7, #20]
 800c988:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c98c:	b2d2      	uxtb	r2, r2
 800c98e:	701a      	strb	r2, [r3, #0]
 800c990:	693b      	ldr	r3, [r7, #16]
 800c992:	09db      	lsrs	r3, r3, #7
 800c994:	613b      	str	r3, [r7, #16]
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	2b7f      	cmp	r3, #127	@ 0x7f
 800c99a:	d8f0      	bhi.n	800c97e <SEGGER_SYSVIEW_Start+0x106>
 800c99c:	697b      	ldr	r3, [r7, #20]
 800c99e:	1c5a      	adds	r2, r3, #1
 800c9a0:	617a      	str	r2, [r7, #20]
 800c9a2:	693a      	ldr	r2, [r7, #16]
 800c9a4:	b2d2      	uxtb	r2, r2
 800c9a6:	701a      	strb	r2, [r3, #0]
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800c9ac:	2218      	movs	r2, #24
 800c9ae:	6839      	ldr	r1, [r7, #0]
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff fb35 	bl	800c020 <_SendPacket>
      RECORD_END();
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800c9bc:	4b08      	ldr	r3, [pc, #32]	@ (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d002      	beq.n	800c9ca <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800c9c4:	4b06      	ldr	r3, [pc, #24]	@ (800c9e0 <SEGGER_SYSVIEW_Start+0x168>)
 800c9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800c9ca:	f000 f9eb 	bl	800cda4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800c9ce:	f000 f9b1 	bl	800cd34 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800c9d2:	f000 fc8d 	bl	800d2f0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800c9d6:	bf00      	nop
 800c9d8:	3730      	adds	r7, #48	@ 0x30
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	2001aaa0 	.word	0x2001aaa0
 800c9e4:	0800e9d0 	.word	0x0800e9d0
 800c9e8:	2001aad0 	.word	0x2001aad0

0800c9ec <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b082      	sub	sp, #8
 800c9f0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800c9f2:	f3ef 8311 	mrs	r3, BASEPRI
 800c9f6:	f04f 0120 	mov.w	r1, #32
 800c9fa:	f381 8811 	msr	BASEPRI, r1
 800c9fe:	607b      	str	r3, [r7, #4]
 800ca00:	480b      	ldr	r0, [pc, #44]	@ (800ca30 <SEGGER_SYSVIEW_Stop+0x44>)
 800ca02:	f7ff fa21 	bl	800be48 <_PreparePacket>
 800ca06:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800ca08:	4b0a      	ldr	r3, [pc, #40]	@ (800ca34 <SEGGER_SYSVIEW_Stop+0x48>)
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d007      	beq.n	800ca20 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800ca10:	220b      	movs	r2, #11
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6838      	ldr	r0, [r7, #0]
 800ca16:	f7ff fb03 	bl	800c020 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800ca1a:	4b06      	ldr	r3, [pc, #24]	@ (800ca34 <SEGGER_SYSVIEW_Stop+0x48>)
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f383 8811 	msr	BASEPRI, r3
}
 800ca26:	bf00      	nop
 800ca28:	3708      	adds	r7, #8
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	2001aad0 	.word	0x2001aad0
 800ca34:	2001aaa0 	.word	0x2001aaa0

0800ca38 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b08c      	sub	sp, #48	@ 0x30
 800ca3c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800ca3e:	f3ef 8311 	mrs	r3, BASEPRI
 800ca42:	f04f 0120 	mov.w	r1, #32
 800ca46:	f381 8811 	msr	BASEPRI, r1
 800ca4a:	60fb      	str	r3, [r7, #12]
 800ca4c:	4845      	ldr	r0, [pc, #276]	@ (800cb64 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800ca4e:	f7ff f9fb 	bl	800be48 <_PreparePacket>
 800ca52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ca5c:	4b42      	ldr	r3, [pc, #264]	@ (800cb68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ca5e:	685b      	ldr	r3, [r3, #4]
 800ca60:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca62:	e00b      	b.n	800ca7c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800ca64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca66:	b2da      	uxtb	r2, r3
 800ca68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca6a:	1c59      	adds	r1, r3, #1
 800ca6c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ca6e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ca72:	b2d2      	uxtb	r2, r2
 800ca74:	701a      	strb	r2, [r3, #0]
 800ca76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca78:	09db      	lsrs	r3, r3, #7
 800ca7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ca7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ca7e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca80:	d8f0      	bhi.n	800ca64 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800ca82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca84:	1c5a      	adds	r2, r3, #1
 800ca86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ca8a:	b2d2      	uxtb	r2, r2
 800ca8c:	701a      	strb	r2, [r3, #0]
 800ca8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca90:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca96:	4b34      	ldr	r3, [pc, #208]	@ (800cb68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	623b      	str	r3, [r7, #32]
 800ca9c:	e00b      	b.n	800cab6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800ca9e:	6a3b      	ldr	r3, [r7, #32]
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa4:	1c59      	adds	r1, r3, #1
 800caa6:	6279      	str	r1, [r7, #36]	@ 0x24
 800caa8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800caac:	b2d2      	uxtb	r2, r2
 800caae:	701a      	strb	r2, [r3, #0]
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	09db      	lsrs	r3, r3, #7
 800cab4:	623b      	str	r3, [r7, #32]
 800cab6:	6a3b      	ldr	r3, [r7, #32]
 800cab8:	2b7f      	cmp	r3, #127	@ 0x7f
 800caba:	d8f0      	bhi.n	800ca9e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	627a      	str	r2, [r7, #36]	@ 0x24
 800cac2:	6a3a      	ldr	r2, [r7, #32]
 800cac4:	b2d2      	uxtb	r2, r2
 800cac6:	701a      	strb	r2, [r3, #0]
 800cac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	61fb      	str	r3, [r7, #28]
 800cad0:	4b25      	ldr	r3, [pc, #148]	@ (800cb68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cad2:	691b      	ldr	r3, [r3, #16]
 800cad4:	61bb      	str	r3, [r7, #24]
 800cad6:	e00b      	b.n	800caf0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800cad8:	69bb      	ldr	r3, [r7, #24]
 800cada:	b2da      	uxtb	r2, r3
 800cadc:	69fb      	ldr	r3, [r7, #28]
 800cade:	1c59      	adds	r1, r3, #1
 800cae0:	61f9      	str	r1, [r7, #28]
 800cae2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cae6:	b2d2      	uxtb	r2, r2
 800cae8:	701a      	strb	r2, [r3, #0]
 800caea:	69bb      	ldr	r3, [r7, #24]
 800caec:	09db      	lsrs	r3, r3, #7
 800caee:	61bb      	str	r3, [r7, #24]
 800caf0:	69bb      	ldr	r3, [r7, #24]
 800caf2:	2b7f      	cmp	r3, #127	@ 0x7f
 800caf4:	d8f0      	bhi.n	800cad8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800caf6:	69fb      	ldr	r3, [r7, #28]
 800caf8:	1c5a      	adds	r2, r3, #1
 800cafa:	61fa      	str	r2, [r7, #28]
 800cafc:	69ba      	ldr	r2, [r7, #24]
 800cafe:	b2d2      	uxtb	r2, r2
 800cb00:	701a      	strb	r2, [r3, #0]
 800cb02:	69fb      	ldr	r3, [r7, #28]
 800cb04:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	617b      	str	r3, [r7, #20]
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	613b      	str	r3, [r7, #16]
 800cb0e:	e00b      	b.n	800cb28 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	697b      	ldr	r3, [r7, #20]
 800cb16:	1c59      	adds	r1, r3, #1
 800cb18:	6179      	str	r1, [r7, #20]
 800cb1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cb1e:	b2d2      	uxtb	r2, r2
 800cb20:	701a      	strb	r2, [r3, #0]
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	09db      	lsrs	r3, r3, #7
 800cb26:	613b      	str	r3, [r7, #16]
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	2b7f      	cmp	r3, #127	@ 0x7f
 800cb2c:	d8f0      	bhi.n	800cb10 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	1c5a      	adds	r2, r3, #1
 800cb32:	617a      	str	r2, [r7, #20]
 800cb34:	693a      	ldr	r2, [r7, #16]
 800cb36:	b2d2      	uxtb	r2, r2
 800cb38:	701a      	strb	r2, [r3, #0]
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800cb3e:	2218      	movs	r2, #24
 800cb40:	6879      	ldr	r1, [r7, #4]
 800cb42:	68b8      	ldr	r0, [r7, #8]
 800cb44:	f7ff fa6c 	bl	800c020 <_SendPacket>
  RECORD_END();
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800cb4e:	4b06      	ldr	r3, [pc, #24]	@ (800cb68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cb50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d002      	beq.n	800cb5c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800cb56:	4b04      	ldr	r3, [pc, #16]	@ (800cb68 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800cb58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb5a:	4798      	blx	r3
  }
}
 800cb5c:	bf00      	nop
 800cb5e:	3730      	adds	r7, #48	@ 0x30
 800cb60:	46bd      	mov	sp, r7
 800cb62:	bd80      	pop	{r7, pc}
 800cb64:	2001aad0 	.word	0x2001aad0
 800cb68:	2001aaa0 	.word	0x2001aaa0

0800cb6c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b092      	sub	sp, #72	@ 0x48
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800cb74:	f3ef 8311 	mrs	r3, BASEPRI
 800cb78:	f04f 0120 	mov.w	r1, #32
 800cb7c:	f381 8811 	msr	BASEPRI, r1
 800cb80:	617b      	str	r3, [r7, #20]
 800cb82:	486a      	ldr	r0, [pc, #424]	@ (800cd2c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800cb84:	f7ff f960 	bl	800be48 <_PreparePacket>
 800cb88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	647b      	str	r3, [r7, #68]	@ 0x44
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681a      	ldr	r2, [r3, #0]
 800cb96:	4b66      	ldr	r3, [pc, #408]	@ (800cd30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	1ad3      	subs	r3, r2, r3
 800cb9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800cb9e:	e00b      	b.n	800cbb8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800cba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cba2:	b2da      	uxtb	r2, r3
 800cba4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cba6:	1c59      	adds	r1, r3, #1
 800cba8:	6479      	str	r1, [r7, #68]	@ 0x44
 800cbaa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cbae:	b2d2      	uxtb	r2, r2
 800cbb0:	701a      	strb	r2, [r3, #0]
 800cbb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbb4:	09db      	lsrs	r3, r3, #7
 800cbb6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cbba:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbbc:	d8f0      	bhi.n	800cba0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800cbbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbc0:	1c5a      	adds	r2, r3, #1
 800cbc2:	647a      	str	r2, [r7, #68]	@ 0x44
 800cbc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbc6:	b2d2      	uxtb	r2, r2
 800cbc8:	701a      	strb	r2, [r3, #0]
 800cbca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cbcc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	689b      	ldr	r3, [r3, #8]
 800cbd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbd8:	e00b      	b.n	800cbf2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800cbda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbdc:	b2da      	uxtb	r2, r3
 800cbde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbe0:	1c59      	adds	r1, r3, #1
 800cbe2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800cbe4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cbe8:	b2d2      	uxtb	r2, r2
 800cbea:	701a      	strb	r2, [r3, #0]
 800cbec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbee:	09db      	lsrs	r3, r3, #7
 800cbf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbf4:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbf6:	d8f0      	bhi.n	800cbda <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800cbf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cbfa:	1c5a      	adds	r2, r3, #1
 800cbfc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800cbfe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cc00:	b2d2      	uxtb	r2, r2
 800cc02:	701a      	strb	r2, [r3, #0]
 800cc04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc06:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	685b      	ldr	r3, [r3, #4]
 800cc0c:	2220      	movs	r2, #32
 800cc0e:	4619      	mov	r1, r3
 800cc10:	68f8      	ldr	r0, [r7, #12]
 800cc12:	f7ff f8e9 	bl	800bde8 <_EncodeStr>
 800cc16:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800cc18:	2209      	movs	r2, #9
 800cc1a:	68f9      	ldr	r1, [r7, #12]
 800cc1c:	6938      	ldr	r0, [r7, #16]
 800cc1e:	f7ff f9ff 	bl	800c020 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	637b      	str	r3, [r7, #52]	@ 0x34
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	4b40      	ldr	r3, [pc, #256]	@ (800cd30 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800cc30:	691b      	ldr	r3, [r3, #16]
 800cc32:	1ad3      	subs	r3, r2, r3
 800cc34:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc36:	e00b      	b.n	800cc50 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800cc38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc3a:	b2da      	uxtb	r2, r3
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc3e:	1c59      	adds	r1, r3, #1
 800cc40:	6379      	str	r1, [r7, #52]	@ 0x34
 800cc42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc46:	b2d2      	uxtb	r2, r2
 800cc48:	701a      	strb	r2, [r3, #0]
 800cc4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc4c:	09db      	lsrs	r3, r3, #7
 800cc4e:	633b      	str	r3, [r7, #48]	@ 0x30
 800cc50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cc52:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc54:	d8f0      	bhi.n	800cc38 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800cc56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc58:	1c5a      	adds	r2, r3, #1
 800cc5a:	637a      	str	r2, [r7, #52]	@ 0x34
 800cc5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cc5e:	b2d2      	uxtb	r2, r2
 800cc60:	701a      	strb	r2, [r3, #0]
 800cc62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc64:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc70:	e00b      	b.n	800cc8a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800cc72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc78:	1c59      	adds	r1, r3, #1
 800cc7a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cc7c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cc80:	b2d2      	uxtb	r2, r2
 800cc82:	701a      	strb	r2, [r3, #0]
 800cc84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc86:	09db      	lsrs	r3, r3, #7
 800cc88:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cc8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc8c:	2b7f      	cmp	r3, #127	@ 0x7f
 800cc8e:	d8f0      	bhi.n	800cc72 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800cc90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc92:	1c5a      	adds	r2, r3, #1
 800cc94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cc98:	b2d2      	uxtb	r2, r2
 800cc9a:	701a      	strb	r2, [r3, #0]
 800cc9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	627b      	str	r3, [r7, #36]	@ 0x24
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	623b      	str	r3, [r7, #32]
 800ccaa:	e00b      	b.n	800ccc4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800ccac:	6a3b      	ldr	r3, [r7, #32]
 800ccae:	b2da      	uxtb	r2, r3
 800ccb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb2:	1c59      	adds	r1, r3, #1
 800ccb4:	6279      	str	r1, [r7, #36]	@ 0x24
 800ccb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ccba:	b2d2      	uxtb	r2, r2
 800ccbc:	701a      	strb	r2, [r3, #0]
 800ccbe:	6a3b      	ldr	r3, [r7, #32]
 800ccc0:	09db      	lsrs	r3, r3, #7
 800ccc2:	623b      	str	r3, [r7, #32]
 800ccc4:	6a3b      	ldr	r3, [r7, #32]
 800ccc6:	2b7f      	cmp	r3, #127	@ 0x7f
 800ccc8:	d8f0      	bhi.n	800ccac <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800ccca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	627a      	str	r2, [r7, #36]	@ 0x24
 800ccd0:	6a3a      	ldr	r2, [r7, #32]
 800ccd2:	b2d2      	uxtb	r2, r2
 800ccd4:	701a      	strb	r2, [r3, #0]
 800ccd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	61fb      	str	r3, [r7, #28]
 800ccde:	2300      	movs	r3, #0
 800cce0:	61bb      	str	r3, [r7, #24]
 800cce2:	e00b      	b.n	800ccfc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800cce4:	69bb      	ldr	r3, [r7, #24]
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	69fb      	ldr	r3, [r7, #28]
 800ccea:	1c59      	adds	r1, r3, #1
 800ccec:	61f9      	str	r1, [r7, #28]
 800ccee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ccf2:	b2d2      	uxtb	r2, r2
 800ccf4:	701a      	strb	r2, [r3, #0]
 800ccf6:	69bb      	ldr	r3, [r7, #24]
 800ccf8:	09db      	lsrs	r3, r3, #7
 800ccfa:	61bb      	str	r3, [r7, #24]
 800ccfc:	69bb      	ldr	r3, [r7, #24]
 800ccfe:	2b7f      	cmp	r3, #127	@ 0x7f
 800cd00:	d8f0      	bhi.n	800cce4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800cd02:	69fb      	ldr	r3, [r7, #28]
 800cd04:	1c5a      	adds	r2, r3, #1
 800cd06:	61fa      	str	r2, [r7, #28]
 800cd08:	69ba      	ldr	r2, [r7, #24]
 800cd0a:	b2d2      	uxtb	r2, r2
 800cd0c:	701a      	strb	r2, [r3, #0]
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800cd12:	2215      	movs	r2, #21
 800cd14:	68f9      	ldr	r1, [r7, #12]
 800cd16:	6938      	ldr	r0, [r7, #16]
 800cd18:	f7ff f982 	bl	800c020 <_SendPacket>
  RECORD_END();
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	f383 8811 	msr	BASEPRI, r3
}
 800cd22:	bf00      	nop
 800cd24:	3748      	adds	r7, #72	@ 0x48
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	2001aad0 	.word	0x2001aad0
 800cd30:	2001aaa0 	.word	0x2001aaa0

0800cd34 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800cd34:	b580      	push	{r7, lr}
 800cd36:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800cd38:	4b07      	ldr	r3, [pc, #28]	@ (800cd58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cd3a:	6a1b      	ldr	r3, [r3, #32]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d008      	beq.n	800cd52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800cd40:	4b05      	ldr	r3, [pc, #20]	@ (800cd58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cd42:	6a1b      	ldr	r3, [r3, #32]
 800cd44:	685b      	ldr	r3, [r3, #4]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d003      	beq.n	800cd52 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800cd4a:	4b03      	ldr	r3, [pc, #12]	@ (800cd58 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800cd4c:	6a1b      	ldr	r3, [r3, #32]
 800cd4e:	685b      	ldr	r3, [r3, #4]
 800cd50:	4798      	blx	r3
  }
}
 800cd52:	bf00      	nop
 800cd54:	bd80      	pop	{r7, pc}
 800cd56:	bf00      	nop
 800cd58:	2001aaa0 	.word	0x2001aaa0

0800cd5c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b086      	sub	sp, #24
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cd64:	f3ef 8311 	mrs	r3, BASEPRI
 800cd68:	f04f 0120 	mov.w	r1, #32
 800cd6c:	f381 8811 	msr	BASEPRI, r1
 800cd70:	617b      	str	r3, [r7, #20]
 800cd72:	480b      	ldr	r0, [pc, #44]	@ (800cda0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800cd74:	f7ff f868 	bl	800be48 <_PreparePacket>
 800cd78:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800cd7a:	2280      	movs	r2, #128	@ 0x80
 800cd7c:	6879      	ldr	r1, [r7, #4]
 800cd7e:	6938      	ldr	r0, [r7, #16]
 800cd80:	f7ff f832 	bl	800bde8 <_EncodeStr>
 800cd84:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800cd86:	220e      	movs	r2, #14
 800cd88:	68f9      	ldr	r1, [r7, #12]
 800cd8a:	6938      	ldr	r0, [r7, #16]
 800cd8c:	f7ff f948 	bl	800c020 <_SendPacket>
  RECORD_END();
 800cd90:	697b      	ldr	r3, [r7, #20]
 800cd92:	f383 8811 	msr	BASEPRI, r3
}
 800cd96:	bf00      	nop
 800cd98:	3718      	adds	r7, #24
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	2001aad0 	.word	0x2001aad0

0800cda4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800cda4:	b590      	push	{r4, r7, lr}
 800cda6:	b083      	sub	sp, #12
 800cda8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800cdaa:	4b15      	ldr	r3, [pc, #84]	@ (800ce00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cdac:	6a1b      	ldr	r3, [r3, #32]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d01a      	beq.n	800cde8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800cdb2:	4b13      	ldr	r3, [pc, #76]	@ (800ce00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cdb4:	6a1b      	ldr	r3, [r3, #32]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d015      	beq.n	800cde8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800cdbc:	4b10      	ldr	r3, [pc, #64]	@ (800ce00 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800cdbe:	6a1b      	ldr	r3, [r3, #32]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4798      	blx	r3
 800cdc4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800cdc8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800cdca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800cdce:	f04f 0200 	mov.w	r2, #0
 800cdd2:	f04f 0300 	mov.w	r3, #0
 800cdd6:	000a      	movs	r2, r1
 800cdd8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800cdda:	4613      	mov	r3, r2
 800cddc:	461a      	mov	r2, r3
 800cdde:	4621      	mov	r1, r4
 800cde0:	200d      	movs	r0, #13
 800cde2:	f7ff fb39 	bl	800c458 <SEGGER_SYSVIEW_RecordU32x2>
 800cde6:	e006      	b.n	800cdf6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800cde8:	4b06      	ldr	r3, [pc, #24]	@ (800ce04 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4619      	mov	r1, r3
 800cdee:	200c      	movs	r0, #12
 800cdf0:	f7ff faf6 	bl	800c3e0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800cdf4:	bf00      	nop
 800cdf6:	bf00      	nop
 800cdf8:	370c      	adds	r7, #12
 800cdfa:	46bd      	mov	sp, r7
 800cdfc:	bd90      	pop	{r4, r7, pc}
 800cdfe:	bf00      	nop
 800ce00:	2001aaa0 	.word	0x2001aaa0
 800ce04:	e0001004 	.word	0xe0001004

0800ce08 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800ce08:	b580      	push	{r7, lr}
 800ce0a:	b086      	sub	sp, #24
 800ce0c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ce0e:	f3ef 8311 	mrs	r3, BASEPRI
 800ce12:	f04f 0120 	mov.w	r1, #32
 800ce16:	f381 8811 	msr	BASEPRI, r1
 800ce1a:	60fb      	str	r3, [r7, #12]
 800ce1c:	4819      	ldr	r0, [pc, #100]	@ (800ce84 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800ce1e:	f7ff f813 	bl	800be48 <_PreparePacket>
 800ce22:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800ce28:	4b17      	ldr	r3, [pc, #92]	@ (800ce88 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce30:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	617b      	str	r3, [r7, #20]
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	613b      	str	r3, [r7, #16]
 800ce3a:	e00b      	b.n	800ce54 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800ce3c:	693b      	ldr	r3, [r7, #16]
 800ce3e:	b2da      	uxtb	r2, r3
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	1c59      	adds	r1, r3, #1
 800ce44:	6179      	str	r1, [r7, #20]
 800ce46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce4a:	b2d2      	uxtb	r2, r2
 800ce4c:	701a      	strb	r2, [r3, #0]
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	09db      	lsrs	r3, r3, #7
 800ce52:	613b      	str	r3, [r7, #16]
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce58:	d8f0      	bhi.n	800ce3c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800ce5a:	697b      	ldr	r3, [r7, #20]
 800ce5c:	1c5a      	adds	r2, r3, #1
 800ce5e:	617a      	str	r2, [r7, #20]
 800ce60:	693a      	ldr	r2, [r7, #16]
 800ce62:	b2d2      	uxtb	r2, r2
 800ce64:	701a      	strb	r2, [r3, #0]
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800ce6a:	2202      	movs	r2, #2
 800ce6c:	6879      	ldr	r1, [r7, #4]
 800ce6e:	68b8      	ldr	r0, [r7, #8]
 800ce70:	f7ff f8d6 	bl	800c020 <_SendPacket>
  RECORD_END();
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	f383 8811 	msr	BASEPRI, r3
}
 800ce7a:	bf00      	nop
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	2001aad0 	.word	0x2001aad0
 800ce88:	e000ed04 	.word	0xe000ed04

0800ce8c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ce92:	f3ef 8311 	mrs	r3, BASEPRI
 800ce96:	f04f 0120 	mov.w	r1, #32
 800ce9a:	f381 8811 	msr	BASEPRI, r1
 800ce9e:	607b      	str	r3, [r7, #4]
 800cea0:	4807      	ldr	r0, [pc, #28]	@ (800cec0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800cea2:	f7fe ffd1 	bl	800be48 <_PreparePacket>
 800cea6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800cea8:	2203      	movs	r2, #3
 800ceaa:	6839      	ldr	r1, [r7, #0]
 800ceac:	6838      	ldr	r0, [r7, #0]
 800ceae:	f7ff f8b7 	bl	800c020 <_SendPacket>
  RECORD_END();
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f383 8811 	msr	BASEPRI, r3
}
 800ceb8:	bf00      	nop
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	2001aad0 	.word	0x2001aad0

0800cec4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b082      	sub	sp, #8
 800cec8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800ceca:	f3ef 8311 	mrs	r3, BASEPRI
 800cece:	f04f 0120 	mov.w	r1, #32
 800ced2:	f381 8811 	msr	BASEPRI, r1
 800ced6:	607b      	str	r3, [r7, #4]
 800ced8:	4807      	ldr	r0, [pc, #28]	@ (800cef8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800ceda:	f7fe ffb5 	bl	800be48 <_PreparePacket>
 800cede:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800cee0:	2212      	movs	r2, #18
 800cee2:	6839      	ldr	r1, [r7, #0]
 800cee4:	6838      	ldr	r0, [r7, #0]
 800cee6:	f7ff f89b 	bl	800c020 <_SendPacket>
  RECORD_END();
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f383 8811 	msr	BASEPRI, r3
}
 800cef0:	bf00      	nop
 800cef2:	3708      	adds	r7, #8
 800cef4:	46bd      	mov	sp, r7
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	2001aad0 	.word	0x2001aad0

0800cefc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b082      	sub	sp, #8
 800cf00:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cf02:	f3ef 8311 	mrs	r3, BASEPRI
 800cf06:	f04f 0120 	mov.w	r1, #32
 800cf0a:	f381 8811 	msr	BASEPRI, r1
 800cf0e:	607b      	str	r3, [r7, #4]
 800cf10:	4807      	ldr	r0, [pc, #28]	@ (800cf30 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800cf12:	f7fe ff99 	bl	800be48 <_PreparePacket>
 800cf16:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800cf18:	2211      	movs	r2, #17
 800cf1a:	6839      	ldr	r1, [r7, #0]
 800cf1c:	6838      	ldr	r0, [r7, #0]
 800cf1e:	f7ff f87f 	bl	800c020 <_SendPacket>
  RECORD_END();
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f383 8811 	msr	BASEPRI, r3
}
 800cf28:	bf00      	nop
 800cf2a:	3708      	adds	r7, #8
 800cf2c:	46bd      	mov	sp, r7
 800cf2e:	bd80      	pop	{r7, pc}
 800cf30:	2001aad0 	.word	0x2001aad0

0800cf34 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b088      	sub	sp, #32
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cf3c:	f3ef 8311 	mrs	r3, BASEPRI
 800cf40:	f04f 0120 	mov.w	r1, #32
 800cf44:	f381 8811 	msr	BASEPRI, r1
 800cf48:	617b      	str	r3, [r7, #20]
 800cf4a:	4819      	ldr	r0, [pc, #100]	@ (800cfb0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800cf4c:	f7fe ff7c 	bl	800be48 <_PreparePacket>
 800cf50:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cf56:	4b17      	ldr	r3, [pc, #92]	@ (800cfb4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800cf58:	691b      	ldr	r3, [r3, #16]
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	1ad3      	subs	r3, r2, r3
 800cf5e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	61fb      	str	r3, [r7, #28]
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	61bb      	str	r3, [r7, #24]
 800cf68:	e00b      	b.n	800cf82 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	69fb      	ldr	r3, [r7, #28]
 800cf70:	1c59      	adds	r1, r3, #1
 800cf72:	61f9      	str	r1, [r7, #28]
 800cf74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cf78:	b2d2      	uxtb	r2, r2
 800cf7a:	701a      	strb	r2, [r3, #0]
 800cf7c:	69bb      	ldr	r3, [r7, #24]
 800cf7e:	09db      	lsrs	r3, r3, #7
 800cf80:	61bb      	str	r3, [r7, #24]
 800cf82:	69bb      	ldr	r3, [r7, #24]
 800cf84:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf86:	d8f0      	bhi.n	800cf6a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800cf88:	69fb      	ldr	r3, [r7, #28]
 800cf8a:	1c5a      	adds	r2, r3, #1
 800cf8c:	61fa      	str	r2, [r7, #28]
 800cf8e:	69ba      	ldr	r2, [r7, #24]
 800cf90:	b2d2      	uxtb	r2, r2
 800cf92:	701a      	strb	r2, [r3, #0]
 800cf94:	69fb      	ldr	r3, [r7, #28]
 800cf96:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800cf98:	2208      	movs	r2, #8
 800cf9a:	68f9      	ldr	r1, [r7, #12]
 800cf9c:	6938      	ldr	r0, [r7, #16]
 800cf9e:	f7ff f83f 	bl	800c020 <_SendPacket>
  RECORD_END();
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	f383 8811 	msr	BASEPRI, r3
}
 800cfa8:	bf00      	nop
 800cfaa:	3720      	adds	r7, #32
 800cfac:	46bd      	mov	sp, r7
 800cfae:	bd80      	pop	{r7, pc}
 800cfb0:	2001aad0 	.word	0x2001aad0
 800cfb4:	2001aaa0 	.word	0x2001aaa0

0800cfb8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b088      	sub	sp, #32
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cfc0:	f3ef 8311 	mrs	r3, BASEPRI
 800cfc4:	f04f 0120 	mov.w	r1, #32
 800cfc8:	f381 8811 	msr	BASEPRI, r1
 800cfcc:	617b      	str	r3, [r7, #20]
 800cfce:	4819      	ldr	r0, [pc, #100]	@ (800d034 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800cfd0:	f7fe ff3a 	bl	800be48 <_PreparePacket>
 800cfd4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cfd6:	693b      	ldr	r3, [r7, #16]
 800cfd8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800cfda:	4b17      	ldr	r3, [pc, #92]	@ (800d038 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	687a      	ldr	r2, [r7, #4]
 800cfe0:	1ad3      	subs	r3, r2, r3
 800cfe2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	61fb      	str	r3, [r7, #28]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	61bb      	str	r3, [r7, #24]
 800cfec:	e00b      	b.n	800d006 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800cfee:	69bb      	ldr	r3, [r7, #24]
 800cff0:	b2da      	uxtb	r2, r3
 800cff2:	69fb      	ldr	r3, [r7, #28]
 800cff4:	1c59      	adds	r1, r3, #1
 800cff6:	61f9      	str	r1, [r7, #28]
 800cff8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cffc:	b2d2      	uxtb	r2, r2
 800cffe:	701a      	strb	r2, [r3, #0]
 800d000:	69bb      	ldr	r3, [r7, #24]
 800d002:	09db      	lsrs	r3, r3, #7
 800d004:	61bb      	str	r3, [r7, #24]
 800d006:	69bb      	ldr	r3, [r7, #24]
 800d008:	2b7f      	cmp	r3, #127	@ 0x7f
 800d00a:	d8f0      	bhi.n	800cfee <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d00c:	69fb      	ldr	r3, [r7, #28]
 800d00e:	1c5a      	adds	r2, r3, #1
 800d010:	61fa      	str	r2, [r7, #28]
 800d012:	69ba      	ldr	r2, [r7, #24]
 800d014:	b2d2      	uxtb	r2, r2
 800d016:	701a      	strb	r2, [r3, #0]
 800d018:	69fb      	ldr	r3, [r7, #28]
 800d01a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d01c:	2204      	movs	r2, #4
 800d01e:	68f9      	ldr	r1, [r7, #12]
 800d020:	6938      	ldr	r0, [r7, #16]
 800d022:	f7fe fffd 	bl	800c020 <_SendPacket>
  RECORD_END();
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	f383 8811 	msr	BASEPRI, r3
}
 800d02c:	bf00      	nop
 800d02e:	3720      	adds	r7, #32
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}
 800d034:	2001aad0 	.word	0x2001aad0
 800d038:	2001aaa0 	.word	0x2001aaa0

0800d03c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b088      	sub	sp, #32
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d044:	f3ef 8311 	mrs	r3, BASEPRI
 800d048:	f04f 0120 	mov.w	r1, #32
 800d04c:	f381 8811 	msr	BASEPRI, r1
 800d050:	617b      	str	r3, [r7, #20]
 800d052:	4819      	ldr	r0, [pc, #100]	@ (800d0b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d054:	f7fe fef8 	bl	800be48 <_PreparePacket>
 800d058:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d05e:	4b17      	ldr	r3, [pc, #92]	@ (800d0bc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d060:	691b      	ldr	r3, [r3, #16]
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	1ad3      	subs	r3, r2, r3
 800d066:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	61fb      	str	r3, [r7, #28]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	61bb      	str	r3, [r7, #24]
 800d070:	e00b      	b.n	800d08a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d072:	69bb      	ldr	r3, [r7, #24]
 800d074:	b2da      	uxtb	r2, r3
 800d076:	69fb      	ldr	r3, [r7, #28]
 800d078:	1c59      	adds	r1, r3, #1
 800d07a:	61f9      	str	r1, [r7, #28]
 800d07c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d080:	b2d2      	uxtb	r2, r2
 800d082:	701a      	strb	r2, [r3, #0]
 800d084:	69bb      	ldr	r3, [r7, #24]
 800d086:	09db      	lsrs	r3, r3, #7
 800d088:	61bb      	str	r3, [r7, #24]
 800d08a:	69bb      	ldr	r3, [r7, #24]
 800d08c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d08e:	d8f0      	bhi.n	800d072 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800d090:	69fb      	ldr	r3, [r7, #28]
 800d092:	1c5a      	adds	r2, r3, #1
 800d094:	61fa      	str	r2, [r7, #28]
 800d096:	69ba      	ldr	r2, [r7, #24]
 800d098:	b2d2      	uxtb	r2, r2
 800d09a:	701a      	strb	r2, [r3, #0]
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800d0a0:	2206      	movs	r2, #6
 800d0a2:	68f9      	ldr	r1, [r7, #12]
 800d0a4:	6938      	ldr	r0, [r7, #16]
 800d0a6:	f7fe ffbb 	bl	800c020 <_SendPacket>
  RECORD_END();
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	f383 8811 	msr	BASEPRI, r3
}
 800d0b0:	bf00      	nop
 800d0b2:	3720      	adds	r7, #32
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	2001aad0 	.word	0x2001aad0
 800d0bc:	2001aaa0 	.word	0x2001aaa0

0800d0c0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08a      	sub	sp, #40	@ 0x28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
 800d0c8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800d0ca:	f3ef 8311 	mrs	r3, BASEPRI
 800d0ce:	f04f 0120 	mov.w	r1, #32
 800d0d2:	f381 8811 	msr	BASEPRI, r1
 800d0d6:	617b      	str	r3, [r7, #20]
 800d0d8:	4827      	ldr	r0, [pc, #156]	@ (800d178 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800d0da:	f7fe feb5 	bl	800be48 <_PreparePacket>
 800d0de:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d0e4:	4b25      	ldr	r3, [pc, #148]	@ (800d17c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800d0e6:	691b      	ldr	r3, [r3, #16]
 800d0e8:	687a      	ldr	r2, [r7, #4]
 800d0ea:	1ad3      	subs	r3, r2, r3
 800d0ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	623b      	str	r3, [r7, #32]
 800d0f6:	e00b      	b.n	800d110 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800d0f8:	6a3b      	ldr	r3, [r7, #32]
 800d0fa:	b2da      	uxtb	r2, r3
 800d0fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0fe:	1c59      	adds	r1, r3, #1
 800d100:	6279      	str	r1, [r7, #36]	@ 0x24
 800d102:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d106:	b2d2      	uxtb	r2, r2
 800d108:	701a      	strb	r2, [r3, #0]
 800d10a:	6a3b      	ldr	r3, [r7, #32]
 800d10c:	09db      	lsrs	r3, r3, #7
 800d10e:	623b      	str	r3, [r7, #32]
 800d110:	6a3b      	ldr	r3, [r7, #32]
 800d112:	2b7f      	cmp	r3, #127	@ 0x7f
 800d114:	d8f0      	bhi.n	800d0f8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800d116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d118:	1c5a      	adds	r2, r3, #1
 800d11a:	627a      	str	r2, [r7, #36]	@ 0x24
 800d11c:	6a3a      	ldr	r2, [r7, #32]
 800d11e:	b2d2      	uxtb	r2, r2
 800d120:	701a      	strb	r2, [r3, #0]
 800d122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d124:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	61fb      	str	r3, [r7, #28]
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	61bb      	str	r3, [r7, #24]
 800d12e:	e00b      	b.n	800d148 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800d130:	69bb      	ldr	r3, [r7, #24]
 800d132:	b2da      	uxtb	r2, r3
 800d134:	69fb      	ldr	r3, [r7, #28]
 800d136:	1c59      	adds	r1, r3, #1
 800d138:	61f9      	str	r1, [r7, #28]
 800d13a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d13e:	b2d2      	uxtb	r2, r2
 800d140:	701a      	strb	r2, [r3, #0]
 800d142:	69bb      	ldr	r3, [r7, #24]
 800d144:	09db      	lsrs	r3, r3, #7
 800d146:	61bb      	str	r3, [r7, #24]
 800d148:	69bb      	ldr	r3, [r7, #24]
 800d14a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d14c:	d8f0      	bhi.n	800d130 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	1c5a      	adds	r2, r3, #1
 800d152:	61fa      	str	r2, [r7, #28]
 800d154:	69ba      	ldr	r2, [r7, #24]
 800d156:	b2d2      	uxtb	r2, r2
 800d158:	701a      	strb	r2, [r3, #0]
 800d15a:	69fb      	ldr	r3, [r7, #28]
 800d15c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800d15e:	2207      	movs	r2, #7
 800d160:	68f9      	ldr	r1, [r7, #12]
 800d162:	6938      	ldr	r0, [r7, #16]
 800d164:	f7fe ff5c 	bl	800c020 <_SendPacket>
  RECORD_END();
 800d168:	697b      	ldr	r3, [r7, #20]
 800d16a:	f383 8811 	msr	BASEPRI, r3
}
 800d16e:	bf00      	nop
 800d170:	3728      	adds	r7, #40	@ 0x28
 800d172:	46bd      	mov	sp, r7
 800d174:	bd80      	pop	{r7, pc}
 800d176:	bf00      	nop
 800d178:	2001aad0 	.word	0x2001aad0
 800d17c:	2001aaa0 	.word	0x2001aaa0

0800d180 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800d180:	b480      	push	{r7}
 800d182:	b083      	sub	sp, #12
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800d188:	4b04      	ldr	r3, [pc, #16]	@ (800d19c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800d18a:	691b      	ldr	r3, [r3, #16]
 800d18c:	687a      	ldr	r2, [r7, #4]
 800d18e:	1ad3      	subs	r3, r2, r3
}
 800d190:	4618      	mov	r0, r3
 800d192:	370c      	adds	r7, #12
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr
 800d19c:	2001aaa0 	.word	0x2001aaa0

0800d1a0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800d1a0:	b580      	push	{r7, lr}
 800d1a2:	b08c      	sub	sp, #48	@ 0x30
 800d1a4:	af00      	add	r7, sp, #0
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800d1aa:	4b40      	ldr	r3, [pc, #256]	@ (800d2ac <SEGGER_SYSVIEW_SendModule+0x10c>)
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d077      	beq.n	800d2a2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800d1b2:	4b3e      	ldr	r3, [pc, #248]	@ (800d2ac <SEGGER_SYSVIEW_SendModule+0x10c>)
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1bc:	e008      	b.n	800d1d0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800d1be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800d1c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d007      	beq.n	800d1da <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800d1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d1cc:	3301      	adds	r3, #1
 800d1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d1d0:	79fb      	ldrb	r3, [r7, #7]
 800d1d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d3f2      	bcc.n	800d1be <SEGGER_SYSVIEW_SendModule+0x1e>
 800d1d8:	e000      	b.n	800d1dc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800d1da:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800d1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d055      	beq.n	800d28e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d1e2:	f3ef 8311 	mrs	r3, BASEPRI
 800d1e6:	f04f 0120 	mov.w	r1, #32
 800d1ea:	f381 8811 	msr	BASEPRI, r1
 800d1ee:	617b      	str	r3, [r7, #20]
 800d1f0:	482f      	ldr	r0, [pc, #188]	@ (800d2b0 <SEGGER_SYSVIEW_SendModule+0x110>)
 800d1f2:	f7fe fe29 	bl	800be48 <_PreparePacket>
 800d1f6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800d1f8:	693b      	ldr	r3, [r7, #16]
 800d1fa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800d200:	79fb      	ldrb	r3, [r7, #7]
 800d202:	623b      	str	r3, [r7, #32]
 800d204:	e00b      	b.n	800d21e <SEGGER_SYSVIEW_SendModule+0x7e>
 800d206:	6a3b      	ldr	r3, [r7, #32]
 800d208:	b2da      	uxtb	r2, r3
 800d20a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d20c:	1c59      	adds	r1, r3, #1
 800d20e:	6279      	str	r1, [r7, #36]	@ 0x24
 800d210:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d214:	b2d2      	uxtb	r2, r2
 800d216:	701a      	strb	r2, [r3, #0]
 800d218:	6a3b      	ldr	r3, [r7, #32]
 800d21a:	09db      	lsrs	r3, r3, #7
 800d21c:	623b      	str	r3, [r7, #32]
 800d21e:	6a3b      	ldr	r3, [r7, #32]
 800d220:	2b7f      	cmp	r3, #127	@ 0x7f
 800d222:	d8f0      	bhi.n	800d206 <SEGGER_SYSVIEW_SendModule+0x66>
 800d224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d226:	1c5a      	adds	r2, r3, #1
 800d228:	627a      	str	r2, [r7, #36]	@ 0x24
 800d22a:	6a3a      	ldr	r2, [r7, #32]
 800d22c:	b2d2      	uxtb	r2, r2
 800d22e:	701a      	strb	r2, [r3, #0]
 800d230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d232:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	61fb      	str	r3, [r7, #28]
 800d238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	61bb      	str	r3, [r7, #24]
 800d23e:	e00b      	b.n	800d258 <SEGGER_SYSVIEW_SendModule+0xb8>
 800d240:	69bb      	ldr	r3, [r7, #24]
 800d242:	b2da      	uxtb	r2, r3
 800d244:	69fb      	ldr	r3, [r7, #28]
 800d246:	1c59      	adds	r1, r3, #1
 800d248:	61f9      	str	r1, [r7, #28]
 800d24a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d24e:	b2d2      	uxtb	r2, r2
 800d250:	701a      	strb	r2, [r3, #0]
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	09db      	lsrs	r3, r3, #7
 800d256:	61bb      	str	r3, [r7, #24]
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d25c:	d8f0      	bhi.n	800d240 <SEGGER_SYSVIEW_SendModule+0xa0>
 800d25e:	69fb      	ldr	r3, [r7, #28]
 800d260:	1c5a      	adds	r2, r3, #1
 800d262:	61fa      	str	r2, [r7, #28]
 800d264:	69ba      	ldr	r2, [r7, #24]
 800d266:	b2d2      	uxtb	r2, r2
 800d268:	701a      	strb	r2, [r3, #0]
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d26e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2280      	movs	r2, #128	@ 0x80
 800d274:	4619      	mov	r1, r3
 800d276:	68f8      	ldr	r0, [r7, #12]
 800d278:	f7fe fdb6 	bl	800bde8 <_EncodeStr>
 800d27c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800d27e:	2216      	movs	r2, #22
 800d280:	68f9      	ldr	r1, [r7, #12]
 800d282:	6938      	ldr	r0, [r7, #16]
 800d284:	f7fe fecc 	bl	800c020 <_SendPacket>
      RECORD_END();
 800d288:	697b      	ldr	r3, [r7, #20]
 800d28a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800d28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d290:	2b00      	cmp	r3, #0
 800d292:	d006      	beq.n	800d2a2 <SEGGER_SYSVIEW_SendModule+0x102>
 800d294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d296:	68db      	ldr	r3, [r3, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800d29c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d29e:	68db      	ldr	r3, [r3, #12]
 800d2a0:	4798      	blx	r3
    }
  }
}
 800d2a2:	bf00      	nop
 800d2a4:	3730      	adds	r7, #48	@ 0x30
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bd80      	pop	{r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	2001aac8 	.word	0x2001aac8
 800d2b0:	2001aad0 	.word	0x2001aad0

0800d2b4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b082      	sub	sp, #8
 800d2b8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800d2ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d2ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00f      	beq.n	800d2e2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800d2c2:	4b0a      	ldr	r3, [pc, #40]	@ (800d2ec <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	68db      	ldr	r3, [r3, #12]
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d002      	beq.n	800d2d6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	68db      	ldr	r3, [r3, #12]
 800d2d4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d1f2      	bne.n	800d2c8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800d2e2:	bf00      	nop
 800d2e4:	3708      	adds	r7, #8
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	2001aac8 	.word	0x2001aac8

0800d2f0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	b086      	sub	sp, #24
 800d2f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800d2f6:	f3ef 8311 	mrs	r3, BASEPRI
 800d2fa:	f04f 0120 	mov.w	r1, #32
 800d2fe:	f381 8811 	msr	BASEPRI, r1
 800d302:	60fb      	str	r3, [r7, #12]
 800d304:	4817      	ldr	r0, [pc, #92]	@ (800d364 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800d306:	f7fe fd9f 	bl	800be48 <_PreparePacket>
 800d30a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	617b      	str	r3, [r7, #20]
 800d314:	4b14      	ldr	r3, [pc, #80]	@ (800d368 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	613b      	str	r3, [r7, #16]
 800d31a:	e00b      	b.n	800d334 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	b2da      	uxtb	r2, r3
 800d320:	697b      	ldr	r3, [r7, #20]
 800d322:	1c59      	adds	r1, r3, #1
 800d324:	6179      	str	r1, [r7, #20]
 800d326:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d32a:	b2d2      	uxtb	r2, r2
 800d32c:	701a      	strb	r2, [r3, #0]
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	09db      	lsrs	r3, r3, #7
 800d332:	613b      	str	r3, [r7, #16]
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	2b7f      	cmp	r3, #127	@ 0x7f
 800d338:	d8f0      	bhi.n	800d31c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	1c5a      	adds	r2, r3, #1
 800d33e:	617a      	str	r2, [r7, #20]
 800d340:	693a      	ldr	r2, [r7, #16]
 800d342:	b2d2      	uxtb	r2, r2
 800d344:	701a      	strb	r2, [r3, #0]
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800d34a:	221b      	movs	r2, #27
 800d34c:	6879      	ldr	r1, [r7, #4]
 800d34e:	68b8      	ldr	r0, [r7, #8]
 800d350:	f7fe fe66 	bl	800c020 <_SendPacket>
  RECORD_END();
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f383 8811 	msr	BASEPRI, r3
}
 800d35a:	bf00      	nop
 800d35c:	3718      	adds	r7, #24
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	2001aad0 	.word	0x2001aad0
 800d368:	2001aacc 	.word	0x2001aacc

0800d36c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b08a      	sub	sp, #40	@ 0x28
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d374:	f3ef 8311 	mrs	r3, BASEPRI
 800d378:	f04f 0120 	mov.w	r1, #32
 800d37c:	f381 8811 	msr	BASEPRI, r1
 800d380:	617b      	str	r3, [r7, #20]
 800d382:	4827      	ldr	r0, [pc, #156]	@ (800d420 <SEGGER_SYSVIEW_Warn+0xb4>)
 800d384:	f7fe fd60 	bl	800be48 <_PreparePacket>
 800d388:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d38a:	2280      	movs	r2, #128	@ 0x80
 800d38c:	6879      	ldr	r1, [r7, #4]
 800d38e:	6938      	ldr	r0, [r7, #16]
 800d390:	f7fe fd2a 	bl	800bde8 <_EncodeStr>
 800d394:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	627b      	str	r3, [r7, #36]	@ 0x24
 800d39a:	2301      	movs	r3, #1
 800d39c:	623b      	str	r3, [r7, #32]
 800d39e:	e00b      	b.n	800d3b8 <SEGGER_SYSVIEW_Warn+0x4c>
 800d3a0:	6a3b      	ldr	r3, [r7, #32]
 800d3a2:	b2da      	uxtb	r2, r3
 800d3a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3a6:	1c59      	adds	r1, r3, #1
 800d3a8:	6279      	str	r1, [r7, #36]	@ 0x24
 800d3aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d3ae:	b2d2      	uxtb	r2, r2
 800d3b0:	701a      	strb	r2, [r3, #0]
 800d3b2:	6a3b      	ldr	r3, [r7, #32]
 800d3b4:	09db      	lsrs	r3, r3, #7
 800d3b6:	623b      	str	r3, [r7, #32]
 800d3b8:	6a3b      	ldr	r3, [r7, #32]
 800d3ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3bc:	d8f0      	bhi.n	800d3a0 <SEGGER_SYSVIEW_Warn+0x34>
 800d3be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3c0:	1c5a      	adds	r2, r3, #1
 800d3c2:	627a      	str	r2, [r7, #36]	@ 0x24
 800d3c4:	6a3a      	ldr	r2, [r7, #32]
 800d3c6:	b2d2      	uxtb	r2, r2
 800d3c8:	701a      	strb	r2, [r3, #0]
 800d3ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d3cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	61fb      	str	r3, [r7, #28]
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	61bb      	str	r3, [r7, #24]
 800d3d6:	e00b      	b.n	800d3f0 <SEGGER_SYSVIEW_Warn+0x84>
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	b2da      	uxtb	r2, r3
 800d3dc:	69fb      	ldr	r3, [r7, #28]
 800d3de:	1c59      	adds	r1, r3, #1
 800d3e0:	61f9      	str	r1, [r7, #28]
 800d3e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d3e6:	b2d2      	uxtb	r2, r2
 800d3e8:	701a      	strb	r2, [r3, #0]
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	09db      	lsrs	r3, r3, #7
 800d3ee:	61bb      	str	r3, [r7, #24]
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3f4:	d8f0      	bhi.n	800d3d8 <SEGGER_SYSVIEW_Warn+0x6c>
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	1c5a      	adds	r2, r3, #1
 800d3fa:	61fa      	str	r2, [r7, #28]
 800d3fc:	69ba      	ldr	r2, [r7, #24]
 800d3fe:	b2d2      	uxtb	r2, r2
 800d400:	701a      	strb	r2, [r3, #0]
 800d402:	69fb      	ldr	r3, [r7, #28]
 800d404:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800d406:	221a      	movs	r2, #26
 800d408:	68f9      	ldr	r1, [r7, #12]
 800d40a:	6938      	ldr	r0, [r7, #16]
 800d40c:	f7fe fe08 	bl	800c020 <_SendPacket>
  RECORD_END();
 800d410:	697b      	ldr	r3, [r7, #20]
 800d412:	f383 8811 	msr	BASEPRI, r3
}
 800d416:	bf00      	nop
 800d418:	3728      	adds	r7, #40	@ 0x28
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}
 800d41e:	bf00      	nop
 800d420:	2001aad0 	.word	0x2001aad0

0800d424 <siprintf>:
 800d424:	b40e      	push	{r1, r2, r3}
 800d426:	b500      	push	{lr}
 800d428:	b09c      	sub	sp, #112	@ 0x70
 800d42a:	ab1d      	add	r3, sp, #116	@ 0x74
 800d42c:	9002      	str	r0, [sp, #8]
 800d42e:	9006      	str	r0, [sp, #24]
 800d430:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d434:	4809      	ldr	r0, [pc, #36]	@ (800d45c <siprintf+0x38>)
 800d436:	9107      	str	r1, [sp, #28]
 800d438:	9104      	str	r1, [sp, #16]
 800d43a:	4909      	ldr	r1, [pc, #36]	@ (800d460 <siprintf+0x3c>)
 800d43c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d440:	9105      	str	r1, [sp, #20]
 800d442:	6800      	ldr	r0, [r0, #0]
 800d444:	9301      	str	r3, [sp, #4]
 800d446:	a902      	add	r1, sp, #8
 800d448:	f000 f9b2 	bl	800d7b0 <_svfiprintf_r>
 800d44c:	9b02      	ldr	r3, [sp, #8]
 800d44e:	2200      	movs	r2, #0
 800d450:	701a      	strb	r2, [r3, #0]
 800d452:	b01c      	add	sp, #112	@ 0x70
 800d454:	f85d eb04 	ldr.w	lr, [sp], #4
 800d458:	b003      	add	sp, #12
 800d45a:	4770      	bx	lr
 800d45c:	20000084 	.word	0x20000084
 800d460:	ffff0208 	.word	0xffff0208

0800d464 <memcmp>:
 800d464:	b510      	push	{r4, lr}
 800d466:	3901      	subs	r1, #1
 800d468:	4402      	add	r2, r0
 800d46a:	4290      	cmp	r0, r2
 800d46c:	d101      	bne.n	800d472 <memcmp+0xe>
 800d46e:	2000      	movs	r0, #0
 800d470:	e005      	b.n	800d47e <memcmp+0x1a>
 800d472:	7803      	ldrb	r3, [r0, #0]
 800d474:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d478:	42a3      	cmp	r3, r4
 800d47a:	d001      	beq.n	800d480 <memcmp+0x1c>
 800d47c:	1b18      	subs	r0, r3, r4
 800d47e:	bd10      	pop	{r4, pc}
 800d480:	3001      	adds	r0, #1
 800d482:	e7f2      	b.n	800d46a <memcmp+0x6>

0800d484 <memset>:
 800d484:	4402      	add	r2, r0
 800d486:	4603      	mov	r3, r0
 800d488:	4293      	cmp	r3, r2
 800d48a:	d100      	bne.n	800d48e <memset+0xa>
 800d48c:	4770      	bx	lr
 800d48e:	f803 1b01 	strb.w	r1, [r3], #1
 800d492:	e7f9      	b.n	800d488 <memset+0x4>

0800d494 <__errno>:
 800d494:	4b01      	ldr	r3, [pc, #4]	@ (800d49c <__errno+0x8>)
 800d496:	6818      	ldr	r0, [r3, #0]
 800d498:	4770      	bx	lr
 800d49a:	bf00      	nop
 800d49c:	20000084 	.word	0x20000084

0800d4a0 <__libc_init_array>:
 800d4a0:	b570      	push	{r4, r5, r6, lr}
 800d4a2:	4d0d      	ldr	r5, [pc, #52]	@ (800d4d8 <__libc_init_array+0x38>)
 800d4a4:	4c0d      	ldr	r4, [pc, #52]	@ (800d4dc <__libc_init_array+0x3c>)
 800d4a6:	1b64      	subs	r4, r4, r5
 800d4a8:	10a4      	asrs	r4, r4, #2
 800d4aa:	2600      	movs	r6, #0
 800d4ac:	42a6      	cmp	r6, r4
 800d4ae:	d109      	bne.n	800d4c4 <__libc_init_array+0x24>
 800d4b0:	4d0b      	ldr	r5, [pc, #44]	@ (800d4e0 <__libc_init_array+0x40>)
 800d4b2:	4c0c      	ldr	r4, [pc, #48]	@ (800d4e4 <__libc_init_array+0x44>)
 800d4b4:	f000 fc66 	bl	800dd84 <_init>
 800d4b8:	1b64      	subs	r4, r4, r5
 800d4ba:	10a4      	asrs	r4, r4, #2
 800d4bc:	2600      	movs	r6, #0
 800d4be:	42a6      	cmp	r6, r4
 800d4c0:	d105      	bne.n	800d4ce <__libc_init_array+0x2e>
 800d4c2:	bd70      	pop	{r4, r5, r6, pc}
 800d4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4c8:	4798      	blx	r3
 800d4ca:	3601      	adds	r6, #1
 800d4cc:	e7ee      	b.n	800d4ac <__libc_init_array+0xc>
 800d4ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800d4d2:	4798      	blx	r3
 800d4d4:	3601      	adds	r6, #1
 800d4d6:	e7f2      	b.n	800d4be <__libc_init_array+0x1e>
 800d4d8:	0800eb18 	.word	0x0800eb18
 800d4dc:	0800eb18 	.word	0x0800eb18
 800d4e0:	0800eb18 	.word	0x0800eb18
 800d4e4:	0800eb1c 	.word	0x0800eb1c

0800d4e8 <__retarget_lock_acquire_recursive>:
 800d4e8:	4770      	bx	lr

0800d4ea <__retarget_lock_release_recursive>:
 800d4ea:	4770      	bx	lr

0800d4ec <memcpy>:
 800d4ec:	440a      	add	r2, r1
 800d4ee:	4291      	cmp	r1, r2
 800d4f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d4f4:	d100      	bne.n	800d4f8 <memcpy+0xc>
 800d4f6:	4770      	bx	lr
 800d4f8:	b510      	push	{r4, lr}
 800d4fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d502:	4291      	cmp	r1, r2
 800d504:	d1f9      	bne.n	800d4fa <memcpy+0xe>
 800d506:	bd10      	pop	{r4, pc}

0800d508 <_free_r>:
 800d508:	b538      	push	{r3, r4, r5, lr}
 800d50a:	4605      	mov	r5, r0
 800d50c:	2900      	cmp	r1, #0
 800d50e:	d041      	beq.n	800d594 <_free_r+0x8c>
 800d510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d514:	1f0c      	subs	r4, r1, #4
 800d516:	2b00      	cmp	r3, #0
 800d518:	bfb8      	it	lt
 800d51a:	18e4      	addlt	r4, r4, r3
 800d51c:	f000 f8e0 	bl	800d6e0 <__malloc_lock>
 800d520:	4a1d      	ldr	r2, [pc, #116]	@ (800d598 <_free_r+0x90>)
 800d522:	6813      	ldr	r3, [r2, #0]
 800d524:	b933      	cbnz	r3, 800d534 <_free_r+0x2c>
 800d526:	6063      	str	r3, [r4, #4]
 800d528:	6014      	str	r4, [r2, #0]
 800d52a:	4628      	mov	r0, r5
 800d52c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d530:	f000 b8dc 	b.w	800d6ec <__malloc_unlock>
 800d534:	42a3      	cmp	r3, r4
 800d536:	d908      	bls.n	800d54a <_free_r+0x42>
 800d538:	6820      	ldr	r0, [r4, #0]
 800d53a:	1821      	adds	r1, r4, r0
 800d53c:	428b      	cmp	r3, r1
 800d53e:	bf01      	itttt	eq
 800d540:	6819      	ldreq	r1, [r3, #0]
 800d542:	685b      	ldreq	r3, [r3, #4]
 800d544:	1809      	addeq	r1, r1, r0
 800d546:	6021      	streq	r1, [r4, #0]
 800d548:	e7ed      	b.n	800d526 <_free_r+0x1e>
 800d54a:	461a      	mov	r2, r3
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	b10b      	cbz	r3, 800d554 <_free_r+0x4c>
 800d550:	42a3      	cmp	r3, r4
 800d552:	d9fa      	bls.n	800d54a <_free_r+0x42>
 800d554:	6811      	ldr	r1, [r2, #0]
 800d556:	1850      	adds	r0, r2, r1
 800d558:	42a0      	cmp	r0, r4
 800d55a:	d10b      	bne.n	800d574 <_free_r+0x6c>
 800d55c:	6820      	ldr	r0, [r4, #0]
 800d55e:	4401      	add	r1, r0
 800d560:	1850      	adds	r0, r2, r1
 800d562:	4283      	cmp	r3, r0
 800d564:	6011      	str	r1, [r2, #0]
 800d566:	d1e0      	bne.n	800d52a <_free_r+0x22>
 800d568:	6818      	ldr	r0, [r3, #0]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	6053      	str	r3, [r2, #4]
 800d56e:	4408      	add	r0, r1
 800d570:	6010      	str	r0, [r2, #0]
 800d572:	e7da      	b.n	800d52a <_free_r+0x22>
 800d574:	d902      	bls.n	800d57c <_free_r+0x74>
 800d576:	230c      	movs	r3, #12
 800d578:	602b      	str	r3, [r5, #0]
 800d57a:	e7d6      	b.n	800d52a <_free_r+0x22>
 800d57c:	6820      	ldr	r0, [r4, #0]
 800d57e:	1821      	adds	r1, r4, r0
 800d580:	428b      	cmp	r3, r1
 800d582:	bf04      	itt	eq
 800d584:	6819      	ldreq	r1, [r3, #0]
 800d586:	685b      	ldreq	r3, [r3, #4]
 800d588:	6063      	str	r3, [r4, #4]
 800d58a:	bf04      	itt	eq
 800d58c:	1809      	addeq	r1, r1, r0
 800d58e:	6021      	streq	r1, [r4, #0]
 800d590:	6054      	str	r4, [r2, #4]
 800d592:	e7ca      	b.n	800d52a <_free_r+0x22>
 800d594:	bd38      	pop	{r3, r4, r5, pc}
 800d596:	bf00      	nop
 800d598:	2001acf8 	.word	0x2001acf8

0800d59c <sbrk_aligned>:
 800d59c:	b570      	push	{r4, r5, r6, lr}
 800d59e:	4e0f      	ldr	r6, [pc, #60]	@ (800d5dc <sbrk_aligned+0x40>)
 800d5a0:	460c      	mov	r4, r1
 800d5a2:	6831      	ldr	r1, [r6, #0]
 800d5a4:	4605      	mov	r5, r0
 800d5a6:	b911      	cbnz	r1, 800d5ae <sbrk_aligned+0x12>
 800d5a8:	f000 fba6 	bl	800dcf8 <_sbrk_r>
 800d5ac:	6030      	str	r0, [r6, #0]
 800d5ae:	4621      	mov	r1, r4
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f000 fba1 	bl	800dcf8 <_sbrk_r>
 800d5b6:	1c43      	adds	r3, r0, #1
 800d5b8:	d103      	bne.n	800d5c2 <sbrk_aligned+0x26>
 800d5ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d5be:	4620      	mov	r0, r4
 800d5c0:	bd70      	pop	{r4, r5, r6, pc}
 800d5c2:	1cc4      	adds	r4, r0, #3
 800d5c4:	f024 0403 	bic.w	r4, r4, #3
 800d5c8:	42a0      	cmp	r0, r4
 800d5ca:	d0f8      	beq.n	800d5be <sbrk_aligned+0x22>
 800d5cc:	1a21      	subs	r1, r4, r0
 800d5ce:	4628      	mov	r0, r5
 800d5d0:	f000 fb92 	bl	800dcf8 <_sbrk_r>
 800d5d4:	3001      	adds	r0, #1
 800d5d6:	d1f2      	bne.n	800d5be <sbrk_aligned+0x22>
 800d5d8:	e7ef      	b.n	800d5ba <sbrk_aligned+0x1e>
 800d5da:	bf00      	nop
 800d5dc:	2001acf4 	.word	0x2001acf4

0800d5e0 <_malloc_r>:
 800d5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5e4:	1ccd      	adds	r5, r1, #3
 800d5e6:	f025 0503 	bic.w	r5, r5, #3
 800d5ea:	3508      	adds	r5, #8
 800d5ec:	2d0c      	cmp	r5, #12
 800d5ee:	bf38      	it	cc
 800d5f0:	250c      	movcc	r5, #12
 800d5f2:	2d00      	cmp	r5, #0
 800d5f4:	4606      	mov	r6, r0
 800d5f6:	db01      	blt.n	800d5fc <_malloc_r+0x1c>
 800d5f8:	42a9      	cmp	r1, r5
 800d5fa:	d904      	bls.n	800d606 <_malloc_r+0x26>
 800d5fc:	230c      	movs	r3, #12
 800d5fe:	6033      	str	r3, [r6, #0]
 800d600:	2000      	movs	r0, #0
 800d602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6dc <_malloc_r+0xfc>
 800d60a:	f000 f869 	bl	800d6e0 <__malloc_lock>
 800d60e:	f8d8 3000 	ldr.w	r3, [r8]
 800d612:	461c      	mov	r4, r3
 800d614:	bb44      	cbnz	r4, 800d668 <_malloc_r+0x88>
 800d616:	4629      	mov	r1, r5
 800d618:	4630      	mov	r0, r6
 800d61a:	f7ff ffbf 	bl	800d59c <sbrk_aligned>
 800d61e:	1c43      	adds	r3, r0, #1
 800d620:	4604      	mov	r4, r0
 800d622:	d158      	bne.n	800d6d6 <_malloc_r+0xf6>
 800d624:	f8d8 4000 	ldr.w	r4, [r8]
 800d628:	4627      	mov	r7, r4
 800d62a:	2f00      	cmp	r7, #0
 800d62c:	d143      	bne.n	800d6b6 <_malloc_r+0xd6>
 800d62e:	2c00      	cmp	r4, #0
 800d630:	d04b      	beq.n	800d6ca <_malloc_r+0xea>
 800d632:	6823      	ldr	r3, [r4, #0]
 800d634:	4639      	mov	r1, r7
 800d636:	4630      	mov	r0, r6
 800d638:	eb04 0903 	add.w	r9, r4, r3
 800d63c:	f000 fb5c 	bl	800dcf8 <_sbrk_r>
 800d640:	4581      	cmp	r9, r0
 800d642:	d142      	bne.n	800d6ca <_malloc_r+0xea>
 800d644:	6821      	ldr	r1, [r4, #0]
 800d646:	1a6d      	subs	r5, r5, r1
 800d648:	4629      	mov	r1, r5
 800d64a:	4630      	mov	r0, r6
 800d64c:	f7ff ffa6 	bl	800d59c <sbrk_aligned>
 800d650:	3001      	adds	r0, #1
 800d652:	d03a      	beq.n	800d6ca <_malloc_r+0xea>
 800d654:	6823      	ldr	r3, [r4, #0]
 800d656:	442b      	add	r3, r5
 800d658:	6023      	str	r3, [r4, #0]
 800d65a:	f8d8 3000 	ldr.w	r3, [r8]
 800d65e:	685a      	ldr	r2, [r3, #4]
 800d660:	bb62      	cbnz	r2, 800d6bc <_malloc_r+0xdc>
 800d662:	f8c8 7000 	str.w	r7, [r8]
 800d666:	e00f      	b.n	800d688 <_malloc_r+0xa8>
 800d668:	6822      	ldr	r2, [r4, #0]
 800d66a:	1b52      	subs	r2, r2, r5
 800d66c:	d420      	bmi.n	800d6b0 <_malloc_r+0xd0>
 800d66e:	2a0b      	cmp	r2, #11
 800d670:	d917      	bls.n	800d6a2 <_malloc_r+0xc2>
 800d672:	1961      	adds	r1, r4, r5
 800d674:	42a3      	cmp	r3, r4
 800d676:	6025      	str	r5, [r4, #0]
 800d678:	bf18      	it	ne
 800d67a:	6059      	strne	r1, [r3, #4]
 800d67c:	6863      	ldr	r3, [r4, #4]
 800d67e:	bf08      	it	eq
 800d680:	f8c8 1000 	streq.w	r1, [r8]
 800d684:	5162      	str	r2, [r4, r5]
 800d686:	604b      	str	r3, [r1, #4]
 800d688:	4630      	mov	r0, r6
 800d68a:	f000 f82f 	bl	800d6ec <__malloc_unlock>
 800d68e:	f104 000b 	add.w	r0, r4, #11
 800d692:	1d23      	adds	r3, r4, #4
 800d694:	f020 0007 	bic.w	r0, r0, #7
 800d698:	1ac2      	subs	r2, r0, r3
 800d69a:	bf1c      	itt	ne
 800d69c:	1a1b      	subne	r3, r3, r0
 800d69e:	50a3      	strne	r3, [r4, r2]
 800d6a0:	e7af      	b.n	800d602 <_malloc_r+0x22>
 800d6a2:	6862      	ldr	r2, [r4, #4]
 800d6a4:	42a3      	cmp	r3, r4
 800d6a6:	bf0c      	ite	eq
 800d6a8:	f8c8 2000 	streq.w	r2, [r8]
 800d6ac:	605a      	strne	r2, [r3, #4]
 800d6ae:	e7eb      	b.n	800d688 <_malloc_r+0xa8>
 800d6b0:	4623      	mov	r3, r4
 800d6b2:	6864      	ldr	r4, [r4, #4]
 800d6b4:	e7ae      	b.n	800d614 <_malloc_r+0x34>
 800d6b6:	463c      	mov	r4, r7
 800d6b8:	687f      	ldr	r7, [r7, #4]
 800d6ba:	e7b6      	b.n	800d62a <_malloc_r+0x4a>
 800d6bc:	461a      	mov	r2, r3
 800d6be:	685b      	ldr	r3, [r3, #4]
 800d6c0:	42a3      	cmp	r3, r4
 800d6c2:	d1fb      	bne.n	800d6bc <_malloc_r+0xdc>
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	6053      	str	r3, [r2, #4]
 800d6c8:	e7de      	b.n	800d688 <_malloc_r+0xa8>
 800d6ca:	230c      	movs	r3, #12
 800d6cc:	6033      	str	r3, [r6, #0]
 800d6ce:	4630      	mov	r0, r6
 800d6d0:	f000 f80c 	bl	800d6ec <__malloc_unlock>
 800d6d4:	e794      	b.n	800d600 <_malloc_r+0x20>
 800d6d6:	6005      	str	r5, [r0, #0]
 800d6d8:	e7d6      	b.n	800d688 <_malloc_r+0xa8>
 800d6da:	bf00      	nop
 800d6dc:	2001acf8 	.word	0x2001acf8

0800d6e0 <__malloc_lock>:
 800d6e0:	4801      	ldr	r0, [pc, #4]	@ (800d6e8 <__malloc_lock+0x8>)
 800d6e2:	f7ff bf01 	b.w	800d4e8 <__retarget_lock_acquire_recursive>
 800d6e6:	bf00      	nop
 800d6e8:	2001acf0 	.word	0x2001acf0

0800d6ec <__malloc_unlock>:
 800d6ec:	4801      	ldr	r0, [pc, #4]	@ (800d6f4 <__malloc_unlock+0x8>)
 800d6ee:	f7ff befc 	b.w	800d4ea <__retarget_lock_release_recursive>
 800d6f2:	bf00      	nop
 800d6f4:	2001acf0 	.word	0x2001acf0

0800d6f8 <__ssputs_r>:
 800d6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6fc:	688e      	ldr	r6, [r1, #8]
 800d6fe:	461f      	mov	r7, r3
 800d700:	42be      	cmp	r6, r7
 800d702:	680b      	ldr	r3, [r1, #0]
 800d704:	4682      	mov	sl, r0
 800d706:	460c      	mov	r4, r1
 800d708:	4690      	mov	r8, r2
 800d70a:	d82d      	bhi.n	800d768 <__ssputs_r+0x70>
 800d70c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d710:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d714:	d026      	beq.n	800d764 <__ssputs_r+0x6c>
 800d716:	6965      	ldr	r5, [r4, #20]
 800d718:	6909      	ldr	r1, [r1, #16]
 800d71a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d71e:	eba3 0901 	sub.w	r9, r3, r1
 800d722:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d726:	1c7b      	adds	r3, r7, #1
 800d728:	444b      	add	r3, r9
 800d72a:	106d      	asrs	r5, r5, #1
 800d72c:	429d      	cmp	r5, r3
 800d72e:	bf38      	it	cc
 800d730:	461d      	movcc	r5, r3
 800d732:	0553      	lsls	r3, r2, #21
 800d734:	d527      	bpl.n	800d786 <__ssputs_r+0x8e>
 800d736:	4629      	mov	r1, r5
 800d738:	f7ff ff52 	bl	800d5e0 <_malloc_r>
 800d73c:	4606      	mov	r6, r0
 800d73e:	b360      	cbz	r0, 800d79a <__ssputs_r+0xa2>
 800d740:	6921      	ldr	r1, [r4, #16]
 800d742:	464a      	mov	r2, r9
 800d744:	f7ff fed2 	bl	800d4ec <memcpy>
 800d748:	89a3      	ldrh	r3, [r4, #12]
 800d74a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d74e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d752:	81a3      	strh	r3, [r4, #12]
 800d754:	6126      	str	r6, [r4, #16]
 800d756:	6165      	str	r5, [r4, #20]
 800d758:	444e      	add	r6, r9
 800d75a:	eba5 0509 	sub.w	r5, r5, r9
 800d75e:	6026      	str	r6, [r4, #0]
 800d760:	60a5      	str	r5, [r4, #8]
 800d762:	463e      	mov	r6, r7
 800d764:	42be      	cmp	r6, r7
 800d766:	d900      	bls.n	800d76a <__ssputs_r+0x72>
 800d768:	463e      	mov	r6, r7
 800d76a:	6820      	ldr	r0, [r4, #0]
 800d76c:	4632      	mov	r2, r6
 800d76e:	4641      	mov	r1, r8
 800d770:	f000 faa8 	bl	800dcc4 <memmove>
 800d774:	68a3      	ldr	r3, [r4, #8]
 800d776:	1b9b      	subs	r3, r3, r6
 800d778:	60a3      	str	r3, [r4, #8]
 800d77a:	6823      	ldr	r3, [r4, #0]
 800d77c:	4433      	add	r3, r6
 800d77e:	6023      	str	r3, [r4, #0]
 800d780:	2000      	movs	r0, #0
 800d782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d786:	462a      	mov	r2, r5
 800d788:	f000 fac6 	bl	800dd18 <_realloc_r>
 800d78c:	4606      	mov	r6, r0
 800d78e:	2800      	cmp	r0, #0
 800d790:	d1e0      	bne.n	800d754 <__ssputs_r+0x5c>
 800d792:	6921      	ldr	r1, [r4, #16]
 800d794:	4650      	mov	r0, sl
 800d796:	f7ff feb7 	bl	800d508 <_free_r>
 800d79a:	230c      	movs	r3, #12
 800d79c:	f8ca 3000 	str.w	r3, [sl]
 800d7a0:	89a3      	ldrh	r3, [r4, #12]
 800d7a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d7a6:	81a3      	strh	r3, [r4, #12]
 800d7a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d7ac:	e7e9      	b.n	800d782 <__ssputs_r+0x8a>
	...

0800d7b0 <_svfiprintf_r>:
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	4698      	mov	r8, r3
 800d7b6:	898b      	ldrh	r3, [r1, #12]
 800d7b8:	061b      	lsls	r3, r3, #24
 800d7ba:	b09d      	sub	sp, #116	@ 0x74
 800d7bc:	4607      	mov	r7, r0
 800d7be:	460d      	mov	r5, r1
 800d7c0:	4614      	mov	r4, r2
 800d7c2:	d510      	bpl.n	800d7e6 <_svfiprintf_r+0x36>
 800d7c4:	690b      	ldr	r3, [r1, #16]
 800d7c6:	b973      	cbnz	r3, 800d7e6 <_svfiprintf_r+0x36>
 800d7c8:	2140      	movs	r1, #64	@ 0x40
 800d7ca:	f7ff ff09 	bl	800d5e0 <_malloc_r>
 800d7ce:	6028      	str	r0, [r5, #0]
 800d7d0:	6128      	str	r0, [r5, #16]
 800d7d2:	b930      	cbnz	r0, 800d7e2 <_svfiprintf_r+0x32>
 800d7d4:	230c      	movs	r3, #12
 800d7d6:	603b      	str	r3, [r7, #0]
 800d7d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d7dc:	b01d      	add	sp, #116	@ 0x74
 800d7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7e2:	2340      	movs	r3, #64	@ 0x40
 800d7e4:	616b      	str	r3, [r5, #20]
 800d7e6:	2300      	movs	r3, #0
 800d7e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ea:	2320      	movs	r3, #32
 800d7ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d7f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7f4:	2330      	movs	r3, #48	@ 0x30
 800d7f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d994 <_svfiprintf_r+0x1e4>
 800d7fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d7fe:	f04f 0901 	mov.w	r9, #1
 800d802:	4623      	mov	r3, r4
 800d804:	469a      	mov	sl, r3
 800d806:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d80a:	b10a      	cbz	r2, 800d810 <_svfiprintf_r+0x60>
 800d80c:	2a25      	cmp	r2, #37	@ 0x25
 800d80e:	d1f9      	bne.n	800d804 <_svfiprintf_r+0x54>
 800d810:	ebba 0b04 	subs.w	fp, sl, r4
 800d814:	d00b      	beq.n	800d82e <_svfiprintf_r+0x7e>
 800d816:	465b      	mov	r3, fp
 800d818:	4622      	mov	r2, r4
 800d81a:	4629      	mov	r1, r5
 800d81c:	4638      	mov	r0, r7
 800d81e:	f7ff ff6b 	bl	800d6f8 <__ssputs_r>
 800d822:	3001      	adds	r0, #1
 800d824:	f000 80a7 	beq.w	800d976 <_svfiprintf_r+0x1c6>
 800d828:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d82a:	445a      	add	r2, fp
 800d82c:	9209      	str	r2, [sp, #36]	@ 0x24
 800d82e:	f89a 3000 	ldrb.w	r3, [sl]
 800d832:	2b00      	cmp	r3, #0
 800d834:	f000 809f 	beq.w	800d976 <_svfiprintf_r+0x1c6>
 800d838:	2300      	movs	r3, #0
 800d83a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d83e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d842:	f10a 0a01 	add.w	sl, sl, #1
 800d846:	9304      	str	r3, [sp, #16]
 800d848:	9307      	str	r3, [sp, #28]
 800d84a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d84e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d850:	4654      	mov	r4, sl
 800d852:	2205      	movs	r2, #5
 800d854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d858:	484e      	ldr	r0, [pc, #312]	@ (800d994 <_svfiprintf_r+0x1e4>)
 800d85a:	f7f2 fd19 	bl	8000290 <memchr>
 800d85e:	9a04      	ldr	r2, [sp, #16]
 800d860:	b9d8      	cbnz	r0, 800d89a <_svfiprintf_r+0xea>
 800d862:	06d0      	lsls	r0, r2, #27
 800d864:	bf44      	itt	mi
 800d866:	2320      	movmi	r3, #32
 800d868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d86c:	0711      	lsls	r1, r2, #28
 800d86e:	bf44      	itt	mi
 800d870:	232b      	movmi	r3, #43	@ 0x2b
 800d872:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d876:	f89a 3000 	ldrb.w	r3, [sl]
 800d87a:	2b2a      	cmp	r3, #42	@ 0x2a
 800d87c:	d015      	beq.n	800d8aa <_svfiprintf_r+0xfa>
 800d87e:	9a07      	ldr	r2, [sp, #28]
 800d880:	4654      	mov	r4, sl
 800d882:	2000      	movs	r0, #0
 800d884:	f04f 0c0a 	mov.w	ip, #10
 800d888:	4621      	mov	r1, r4
 800d88a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d88e:	3b30      	subs	r3, #48	@ 0x30
 800d890:	2b09      	cmp	r3, #9
 800d892:	d94b      	bls.n	800d92c <_svfiprintf_r+0x17c>
 800d894:	b1b0      	cbz	r0, 800d8c4 <_svfiprintf_r+0x114>
 800d896:	9207      	str	r2, [sp, #28]
 800d898:	e014      	b.n	800d8c4 <_svfiprintf_r+0x114>
 800d89a:	eba0 0308 	sub.w	r3, r0, r8
 800d89e:	fa09 f303 	lsl.w	r3, r9, r3
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	9304      	str	r3, [sp, #16]
 800d8a6:	46a2      	mov	sl, r4
 800d8a8:	e7d2      	b.n	800d850 <_svfiprintf_r+0xa0>
 800d8aa:	9b03      	ldr	r3, [sp, #12]
 800d8ac:	1d19      	adds	r1, r3, #4
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	9103      	str	r1, [sp, #12]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	bfbb      	ittet	lt
 800d8b6:	425b      	neglt	r3, r3
 800d8b8:	f042 0202 	orrlt.w	r2, r2, #2
 800d8bc:	9307      	strge	r3, [sp, #28]
 800d8be:	9307      	strlt	r3, [sp, #28]
 800d8c0:	bfb8      	it	lt
 800d8c2:	9204      	strlt	r2, [sp, #16]
 800d8c4:	7823      	ldrb	r3, [r4, #0]
 800d8c6:	2b2e      	cmp	r3, #46	@ 0x2e
 800d8c8:	d10a      	bne.n	800d8e0 <_svfiprintf_r+0x130>
 800d8ca:	7863      	ldrb	r3, [r4, #1]
 800d8cc:	2b2a      	cmp	r3, #42	@ 0x2a
 800d8ce:	d132      	bne.n	800d936 <_svfiprintf_r+0x186>
 800d8d0:	9b03      	ldr	r3, [sp, #12]
 800d8d2:	1d1a      	adds	r2, r3, #4
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	9203      	str	r2, [sp, #12]
 800d8d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d8dc:	3402      	adds	r4, #2
 800d8de:	9305      	str	r3, [sp, #20]
 800d8e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d9a4 <_svfiprintf_r+0x1f4>
 800d8e4:	7821      	ldrb	r1, [r4, #0]
 800d8e6:	2203      	movs	r2, #3
 800d8e8:	4650      	mov	r0, sl
 800d8ea:	f7f2 fcd1 	bl	8000290 <memchr>
 800d8ee:	b138      	cbz	r0, 800d900 <_svfiprintf_r+0x150>
 800d8f0:	9b04      	ldr	r3, [sp, #16]
 800d8f2:	eba0 000a 	sub.w	r0, r0, sl
 800d8f6:	2240      	movs	r2, #64	@ 0x40
 800d8f8:	4082      	lsls	r2, r0
 800d8fa:	4313      	orrs	r3, r2
 800d8fc:	3401      	adds	r4, #1
 800d8fe:	9304      	str	r3, [sp, #16]
 800d900:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d904:	4824      	ldr	r0, [pc, #144]	@ (800d998 <_svfiprintf_r+0x1e8>)
 800d906:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d90a:	2206      	movs	r2, #6
 800d90c:	f7f2 fcc0 	bl	8000290 <memchr>
 800d910:	2800      	cmp	r0, #0
 800d912:	d036      	beq.n	800d982 <_svfiprintf_r+0x1d2>
 800d914:	4b21      	ldr	r3, [pc, #132]	@ (800d99c <_svfiprintf_r+0x1ec>)
 800d916:	bb1b      	cbnz	r3, 800d960 <_svfiprintf_r+0x1b0>
 800d918:	9b03      	ldr	r3, [sp, #12]
 800d91a:	3307      	adds	r3, #7
 800d91c:	f023 0307 	bic.w	r3, r3, #7
 800d920:	3308      	adds	r3, #8
 800d922:	9303      	str	r3, [sp, #12]
 800d924:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d926:	4433      	add	r3, r6
 800d928:	9309      	str	r3, [sp, #36]	@ 0x24
 800d92a:	e76a      	b.n	800d802 <_svfiprintf_r+0x52>
 800d92c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d930:	460c      	mov	r4, r1
 800d932:	2001      	movs	r0, #1
 800d934:	e7a8      	b.n	800d888 <_svfiprintf_r+0xd8>
 800d936:	2300      	movs	r3, #0
 800d938:	3401      	adds	r4, #1
 800d93a:	9305      	str	r3, [sp, #20]
 800d93c:	4619      	mov	r1, r3
 800d93e:	f04f 0c0a 	mov.w	ip, #10
 800d942:	4620      	mov	r0, r4
 800d944:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d948:	3a30      	subs	r2, #48	@ 0x30
 800d94a:	2a09      	cmp	r2, #9
 800d94c:	d903      	bls.n	800d956 <_svfiprintf_r+0x1a6>
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d0c6      	beq.n	800d8e0 <_svfiprintf_r+0x130>
 800d952:	9105      	str	r1, [sp, #20]
 800d954:	e7c4      	b.n	800d8e0 <_svfiprintf_r+0x130>
 800d956:	fb0c 2101 	mla	r1, ip, r1, r2
 800d95a:	4604      	mov	r4, r0
 800d95c:	2301      	movs	r3, #1
 800d95e:	e7f0      	b.n	800d942 <_svfiprintf_r+0x192>
 800d960:	ab03      	add	r3, sp, #12
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	462a      	mov	r2, r5
 800d966:	4b0e      	ldr	r3, [pc, #56]	@ (800d9a0 <_svfiprintf_r+0x1f0>)
 800d968:	a904      	add	r1, sp, #16
 800d96a:	4638      	mov	r0, r7
 800d96c:	f3af 8000 	nop.w
 800d970:	1c42      	adds	r2, r0, #1
 800d972:	4606      	mov	r6, r0
 800d974:	d1d6      	bne.n	800d924 <_svfiprintf_r+0x174>
 800d976:	89ab      	ldrh	r3, [r5, #12]
 800d978:	065b      	lsls	r3, r3, #25
 800d97a:	f53f af2d 	bmi.w	800d7d8 <_svfiprintf_r+0x28>
 800d97e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d980:	e72c      	b.n	800d7dc <_svfiprintf_r+0x2c>
 800d982:	ab03      	add	r3, sp, #12
 800d984:	9300      	str	r3, [sp, #0]
 800d986:	462a      	mov	r2, r5
 800d988:	4b05      	ldr	r3, [pc, #20]	@ (800d9a0 <_svfiprintf_r+0x1f0>)
 800d98a:	a904      	add	r1, sp, #16
 800d98c:	4638      	mov	r0, r7
 800d98e:	f000 f879 	bl	800da84 <_printf_i>
 800d992:	e7ed      	b.n	800d970 <_svfiprintf_r+0x1c0>
 800d994:	0800eadb 	.word	0x0800eadb
 800d998:	0800eae5 	.word	0x0800eae5
 800d99c:	00000000 	.word	0x00000000
 800d9a0:	0800d6f9 	.word	0x0800d6f9
 800d9a4:	0800eae1 	.word	0x0800eae1

0800d9a8 <_printf_common>:
 800d9a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d9ac:	4616      	mov	r6, r2
 800d9ae:	4698      	mov	r8, r3
 800d9b0:	688a      	ldr	r2, [r1, #8]
 800d9b2:	690b      	ldr	r3, [r1, #16]
 800d9b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	bfb8      	it	lt
 800d9bc:	4613      	movlt	r3, r2
 800d9be:	6033      	str	r3, [r6, #0]
 800d9c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d9c4:	4607      	mov	r7, r0
 800d9c6:	460c      	mov	r4, r1
 800d9c8:	b10a      	cbz	r2, 800d9ce <_printf_common+0x26>
 800d9ca:	3301      	adds	r3, #1
 800d9cc:	6033      	str	r3, [r6, #0]
 800d9ce:	6823      	ldr	r3, [r4, #0]
 800d9d0:	0699      	lsls	r1, r3, #26
 800d9d2:	bf42      	ittt	mi
 800d9d4:	6833      	ldrmi	r3, [r6, #0]
 800d9d6:	3302      	addmi	r3, #2
 800d9d8:	6033      	strmi	r3, [r6, #0]
 800d9da:	6825      	ldr	r5, [r4, #0]
 800d9dc:	f015 0506 	ands.w	r5, r5, #6
 800d9e0:	d106      	bne.n	800d9f0 <_printf_common+0x48>
 800d9e2:	f104 0a19 	add.w	sl, r4, #25
 800d9e6:	68e3      	ldr	r3, [r4, #12]
 800d9e8:	6832      	ldr	r2, [r6, #0]
 800d9ea:	1a9b      	subs	r3, r3, r2
 800d9ec:	42ab      	cmp	r3, r5
 800d9ee:	dc26      	bgt.n	800da3e <_printf_common+0x96>
 800d9f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9f4:	6822      	ldr	r2, [r4, #0]
 800d9f6:	3b00      	subs	r3, #0
 800d9f8:	bf18      	it	ne
 800d9fa:	2301      	movne	r3, #1
 800d9fc:	0692      	lsls	r2, r2, #26
 800d9fe:	d42b      	bmi.n	800da58 <_printf_common+0xb0>
 800da00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800da04:	4641      	mov	r1, r8
 800da06:	4638      	mov	r0, r7
 800da08:	47c8      	blx	r9
 800da0a:	3001      	adds	r0, #1
 800da0c:	d01e      	beq.n	800da4c <_printf_common+0xa4>
 800da0e:	6823      	ldr	r3, [r4, #0]
 800da10:	6922      	ldr	r2, [r4, #16]
 800da12:	f003 0306 	and.w	r3, r3, #6
 800da16:	2b04      	cmp	r3, #4
 800da18:	bf02      	ittt	eq
 800da1a:	68e5      	ldreq	r5, [r4, #12]
 800da1c:	6833      	ldreq	r3, [r6, #0]
 800da1e:	1aed      	subeq	r5, r5, r3
 800da20:	68a3      	ldr	r3, [r4, #8]
 800da22:	bf0c      	ite	eq
 800da24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800da28:	2500      	movne	r5, #0
 800da2a:	4293      	cmp	r3, r2
 800da2c:	bfc4      	itt	gt
 800da2e:	1a9b      	subgt	r3, r3, r2
 800da30:	18ed      	addgt	r5, r5, r3
 800da32:	2600      	movs	r6, #0
 800da34:	341a      	adds	r4, #26
 800da36:	42b5      	cmp	r5, r6
 800da38:	d11a      	bne.n	800da70 <_printf_common+0xc8>
 800da3a:	2000      	movs	r0, #0
 800da3c:	e008      	b.n	800da50 <_printf_common+0xa8>
 800da3e:	2301      	movs	r3, #1
 800da40:	4652      	mov	r2, sl
 800da42:	4641      	mov	r1, r8
 800da44:	4638      	mov	r0, r7
 800da46:	47c8      	blx	r9
 800da48:	3001      	adds	r0, #1
 800da4a:	d103      	bne.n	800da54 <_printf_common+0xac>
 800da4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da54:	3501      	adds	r5, #1
 800da56:	e7c6      	b.n	800d9e6 <_printf_common+0x3e>
 800da58:	18e1      	adds	r1, r4, r3
 800da5a:	1c5a      	adds	r2, r3, #1
 800da5c:	2030      	movs	r0, #48	@ 0x30
 800da5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da62:	4422      	add	r2, r4
 800da64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da6c:	3302      	adds	r3, #2
 800da6e:	e7c7      	b.n	800da00 <_printf_common+0x58>
 800da70:	2301      	movs	r3, #1
 800da72:	4622      	mov	r2, r4
 800da74:	4641      	mov	r1, r8
 800da76:	4638      	mov	r0, r7
 800da78:	47c8      	blx	r9
 800da7a:	3001      	adds	r0, #1
 800da7c:	d0e6      	beq.n	800da4c <_printf_common+0xa4>
 800da7e:	3601      	adds	r6, #1
 800da80:	e7d9      	b.n	800da36 <_printf_common+0x8e>
	...

0800da84 <_printf_i>:
 800da84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da88:	7e0f      	ldrb	r7, [r1, #24]
 800da8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da8c:	2f78      	cmp	r7, #120	@ 0x78
 800da8e:	4691      	mov	r9, r2
 800da90:	4680      	mov	r8, r0
 800da92:	460c      	mov	r4, r1
 800da94:	469a      	mov	sl, r3
 800da96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da9a:	d807      	bhi.n	800daac <_printf_i+0x28>
 800da9c:	2f62      	cmp	r7, #98	@ 0x62
 800da9e:	d80a      	bhi.n	800dab6 <_printf_i+0x32>
 800daa0:	2f00      	cmp	r7, #0
 800daa2:	f000 80d2 	beq.w	800dc4a <_printf_i+0x1c6>
 800daa6:	2f58      	cmp	r7, #88	@ 0x58
 800daa8:	f000 80b9 	beq.w	800dc1e <_printf_i+0x19a>
 800daac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dab0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dab4:	e03a      	b.n	800db2c <_printf_i+0xa8>
 800dab6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800daba:	2b15      	cmp	r3, #21
 800dabc:	d8f6      	bhi.n	800daac <_printf_i+0x28>
 800dabe:	a101      	add	r1, pc, #4	@ (adr r1, 800dac4 <_printf_i+0x40>)
 800dac0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dac4:	0800db1d 	.word	0x0800db1d
 800dac8:	0800db31 	.word	0x0800db31
 800dacc:	0800daad 	.word	0x0800daad
 800dad0:	0800daad 	.word	0x0800daad
 800dad4:	0800daad 	.word	0x0800daad
 800dad8:	0800daad 	.word	0x0800daad
 800dadc:	0800db31 	.word	0x0800db31
 800dae0:	0800daad 	.word	0x0800daad
 800dae4:	0800daad 	.word	0x0800daad
 800dae8:	0800daad 	.word	0x0800daad
 800daec:	0800daad 	.word	0x0800daad
 800daf0:	0800dc31 	.word	0x0800dc31
 800daf4:	0800db5b 	.word	0x0800db5b
 800daf8:	0800dbeb 	.word	0x0800dbeb
 800dafc:	0800daad 	.word	0x0800daad
 800db00:	0800daad 	.word	0x0800daad
 800db04:	0800dc53 	.word	0x0800dc53
 800db08:	0800daad 	.word	0x0800daad
 800db0c:	0800db5b 	.word	0x0800db5b
 800db10:	0800daad 	.word	0x0800daad
 800db14:	0800daad 	.word	0x0800daad
 800db18:	0800dbf3 	.word	0x0800dbf3
 800db1c:	6833      	ldr	r3, [r6, #0]
 800db1e:	1d1a      	adds	r2, r3, #4
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	6032      	str	r2, [r6, #0]
 800db24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800db28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800db2c:	2301      	movs	r3, #1
 800db2e:	e09d      	b.n	800dc6c <_printf_i+0x1e8>
 800db30:	6833      	ldr	r3, [r6, #0]
 800db32:	6820      	ldr	r0, [r4, #0]
 800db34:	1d19      	adds	r1, r3, #4
 800db36:	6031      	str	r1, [r6, #0]
 800db38:	0606      	lsls	r6, r0, #24
 800db3a:	d501      	bpl.n	800db40 <_printf_i+0xbc>
 800db3c:	681d      	ldr	r5, [r3, #0]
 800db3e:	e003      	b.n	800db48 <_printf_i+0xc4>
 800db40:	0645      	lsls	r5, r0, #25
 800db42:	d5fb      	bpl.n	800db3c <_printf_i+0xb8>
 800db44:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db48:	2d00      	cmp	r5, #0
 800db4a:	da03      	bge.n	800db54 <_printf_i+0xd0>
 800db4c:	232d      	movs	r3, #45	@ 0x2d
 800db4e:	426d      	negs	r5, r5
 800db50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db54:	4859      	ldr	r0, [pc, #356]	@ (800dcbc <_printf_i+0x238>)
 800db56:	230a      	movs	r3, #10
 800db58:	e011      	b.n	800db7e <_printf_i+0xfa>
 800db5a:	6821      	ldr	r1, [r4, #0]
 800db5c:	6833      	ldr	r3, [r6, #0]
 800db5e:	0608      	lsls	r0, r1, #24
 800db60:	f853 5b04 	ldr.w	r5, [r3], #4
 800db64:	d402      	bmi.n	800db6c <_printf_i+0xe8>
 800db66:	0649      	lsls	r1, r1, #25
 800db68:	bf48      	it	mi
 800db6a:	b2ad      	uxthmi	r5, r5
 800db6c:	2f6f      	cmp	r7, #111	@ 0x6f
 800db6e:	4853      	ldr	r0, [pc, #332]	@ (800dcbc <_printf_i+0x238>)
 800db70:	6033      	str	r3, [r6, #0]
 800db72:	bf14      	ite	ne
 800db74:	230a      	movne	r3, #10
 800db76:	2308      	moveq	r3, #8
 800db78:	2100      	movs	r1, #0
 800db7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db7e:	6866      	ldr	r6, [r4, #4]
 800db80:	60a6      	str	r6, [r4, #8]
 800db82:	2e00      	cmp	r6, #0
 800db84:	bfa2      	ittt	ge
 800db86:	6821      	ldrge	r1, [r4, #0]
 800db88:	f021 0104 	bicge.w	r1, r1, #4
 800db8c:	6021      	strge	r1, [r4, #0]
 800db8e:	b90d      	cbnz	r5, 800db94 <_printf_i+0x110>
 800db90:	2e00      	cmp	r6, #0
 800db92:	d04b      	beq.n	800dc2c <_printf_i+0x1a8>
 800db94:	4616      	mov	r6, r2
 800db96:	fbb5 f1f3 	udiv	r1, r5, r3
 800db9a:	fb03 5711 	mls	r7, r3, r1, r5
 800db9e:	5dc7      	ldrb	r7, [r0, r7]
 800dba0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dba4:	462f      	mov	r7, r5
 800dba6:	42bb      	cmp	r3, r7
 800dba8:	460d      	mov	r5, r1
 800dbaa:	d9f4      	bls.n	800db96 <_printf_i+0x112>
 800dbac:	2b08      	cmp	r3, #8
 800dbae:	d10b      	bne.n	800dbc8 <_printf_i+0x144>
 800dbb0:	6823      	ldr	r3, [r4, #0]
 800dbb2:	07df      	lsls	r7, r3, #31
 800dbb4:	d508      	bpl.n	800dbc8 <_printf_i+0x144>
 800dbb6:	6923      	ldr	r3, [r4, #16]
 800dbb8:	6861      	ldr	r1, [r4, #4]
 800dbba:	4299      	cmp	r1, r3
 800dbbc:	bfde      	ittt	le
 800dbbe:	2330      	movle	r3, #48	@ 0x30
 800dbc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800dbc4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800dbc8:	1b92      	subs	r2, r2, r6
 800dbca:	6122      	str	r2, [r4, #16]
 800dbcc:	f8cd a000 	str.w	sl, [sp]
 800dbd0:	464b      	mov	r3, r9
 800dbd2:	aa03      	add	r2, sp, #12
 800dbd4:	4621      	mov	r1, r4
 800dbd6:	4640      	mov	r0, r8
 800dbd8:	f7ff fee6 	bl	800d9a8 <_printf_common>
 800dbdc:	3001      	adds	r0, #1
 800dbde:	d14a      	bne.n	800dc76 <_printf_i+0x1f2>
 800dbe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbe4:	b004      	add	sp, #16
 800dbe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbea:	6823      	ldr	r3, [r4, #0]
 800dbec:	f043 0320 	orr.w	r3, r3, #32
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	4833      	ldr	r0, [pc, #204]	@ (800dcc0 <_printf_i+0x23c>)
 800dbf4:	2778      	movs	r7, #120	@ 0x78
 800dbf6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbfa:	6823      	ldr	r3, [r4, #0]
 800dbfc:	6831      	ldr	r1, [r6, #0]
 800dbfe:	061f      	lsls	r7, r3, #24
 800dc00:	f851 5b04 	ldr.w	r5, [r1], #4
 800dc04:	d402      	bmi.n	800dc0c <_printf_i+0x188>
 800dc06:	065f      	lsls	r7, r3, #25
 800dc08:	bf48      	it	mi
 800dc0a:	b2ad      	uxthmi	r5, r5
 800dc0c:	6031      	str	r1, [r6, #0]
 800dc0e:	07d9      	lsls	r1, r3, #31
 800dc10:	bf44      	itt	mi
 800dc12:	f043 0320 	orrmi.w	r3, r3, #32
 800dc16:	6023      	strmi	r3, [r4, #0]
 800dc18:	b11d      	cbz	r5, 800dc22 <_printf_i+0x19e>
 800dc1a:	2310      	movs	r3, #16
 800dc1c:	e7ac      	b.n	800db78 <_printf_i+0xf4>
 800dc1e:	4827      	ldr	r0, [pc, #156]	@ (800dcbc <_printf_i+0x238>)
 800dc20:	e7e9      	b.n	800dbf6 <_printf_i+0x172>
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	f023 0320 	bic.w	r3, r3, #32
 800dc28:	6023      	str	r3, [r4, #0]
 800dc2a:	e7f6      	b.n	800dc1a <_printf_i+0x196>
 800dc2c:	4616      	mov	r6, r2
 800dc2e:	e7bd      	b.n	800dbac <_printf_i+0x128>
 800dc30:	6833      	ldr	r3, [r6, #0]
 800dc32:	6825      	ldr	r5, [r4, #0]
 800dc34:	6961      	ldr	r1, [r4, #20]
 800dc36:	1d18      	adds	r0, r3, #4
 800dc38:	6030      	str	r0, [r6, #0]
 800dc3a:	062e      	lsls	r6, r5, #24
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	d501      	bpl.n	800dc44 <_printf_i+0x1c0>
 800dc40:	6019      	str	r1, [r3, #0]
 800dc42:	e002      	b.n	800dc4a <_printf_i+0x1c6>
 800dc44:	0668      	lsls	r0, r5, #25
 800dc46:	d5fb      	bpl.n	800dc40 <_printf_i+0x1bc>
 800dc48:	8019      	strh	r1, [r3, #0]
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	6123      	str	r3, [r4, #16]
 800dc4e:	4616      	mov	r6, r2
 800dc50:	e7bc      	b.n	800dbcc <_printf_i+0x148>
 800dc52:	6833      	ldr	r3, [r6, #0]
 800dc54:	1d1a      	adds	r2, r3, #4
 800dc56:	6032      	str	r2, [r6, #0]
 800dc58:	681e      	ldr	r6, [r3, #0]
 800dc5a:	6862      	ldr	r2, [r4, #4]
 800dc5c:	2100      	movs	r1, #0
 800dc5e:	4630      	mov	r0, r6
 800dc60:	f7f2 fb16 	bl	8000290 <memchr>
 800dc64:	b108      	cbz	r0, 800dc6a <_printf_i+0x1e6>
 800dc66:	1b80      	subs	r0, r0, r6
 800dc68:	6060      	str	r0, [r4, #4]
 800dc6a:	6863      	ldr	r3, [r4, #4]
 800dc6c:	6123      	str	r3, [r4, #16]
 800dc6e:	2300      	movs	r3, #0
 800dc70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc74:	e7aa      	b.n	800dbcc <_printf_i+0x148>
 800dc76:	6923      	ldr	r3, [r4, #16]
 800dc78:	4632      	mov	r2, r6
 800dc7a:	4649      	mov	r1, r9
 800dc7c:	4640      	mov	r0, r8
 800dc7e:	47d0      	blx	sl
 800dc80:	3001      	adds	r0, #1
 800dc82:	d0ad      	beq.n	800dbe0 <_printf_i+0x15c>
 800dc84:	6823      	ldr	r3, [r4, #0]
 800dc86:	079b      	lsls	r3, r3, #30
 800dc88:	d413      	bmi.n	800dcb2 <_printf_i+0x22e>
 800dc8a:	68e0      	ldr	r0, [r4, #12]
 800dc8c:	9b03      	ldr	r3, [sp, #12]
 800dc8e:	4298      	cmp	r0, r3
 800dc90:	bfb8      	it	lt
 800dc92:	4618      	movlt	r0, r3
 800dc94:	e7a6      	b.n	800dbe4 <_printf_i+0x160>
 800dc96:	2301      	movs	r3, #1
 800dc98:	4632      	mov	r2, r6
 800dc9a:	4649      	mov	r1, r9
 800dc9c:	4640      	mov	r0, r8
 800dc9e:	47d0      	blx	sl
 800dca0:	3001      	adds	r0, #1
 800dca2:	d09d      	beq.n	800dbe0 <_printf_i+0x15c>
 800dca4:	3501      	adds	r5, #1
 800dca6:	68e3      	ldr	r3, [r4, #12]
 800dca8:	9903      	ldr	r1, [sp, #12]
 800dcaa:	1a5b      	subs	r3, r3, r1
 800dcac:	42ab      	cmp	r3, r5
 800dcae:	dcf2      	bgt.n	800dc96 <_printf_i+0x212>
 800dcb0:	e7eb      	b.n	800dc8a <_printf_i+0x206>
 800dcb2:	2500      	movs	r5, #0
 800dcb4:	f104 0619 	add.w	r6, r4, #25
 800dcb8:	e7f5      	b.n	800dca6 <_printf_i+0x222>
 800dcba:	bf00      	nop
 800dcbc:	0800eaec 	.word	0x0800eaec
 800dcc0:	0800eafd 	.word	0x0800eafd

0800dcc4 <memmove>:
 800dcc4:	4288      	cmp	r0, r1
 800dcc6:	b510      	push	{r4, lr}
 800dcc8:	eb01 0402 	add.w	r4, r1, r2
 800dccc:	d902      	bls.n	800dcd4 <memmove+0x10>
 800dcce:	4284      	cmp	r4, r0
 800dcd0:	4623      	mov	r3, r4
 800dcd2:	d807      	bhi.n	800dce4 <memmove+0x20>
 800dcd4:	1e43      	subs	r3, r0, #1
 800dcd6:	42a1      	cmp	r1, r4
 800dcd8:	d008      	beq.n	800dcec <memmove+0x28>
 800dcda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dcde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dce2:	e7f8      	b.n	800dcd6 <memmove+0x12>
 800dce4:	4402      	add	r2, r0
 800dce6:	4601      	mov	r1, r0
 800dce8:	428a      	cmp	r2, r1
 800dcea:	d100      	bne.n	800dcee <memmove+0x2a>
 800dcec:	bd10      	pop	{r4, pc}
 800dcee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcf6:	e7f7      	b.n	800dce8 <memmove+0x24>

0800dcf8 <_sbrk_r>:
 800dcf8:	b538      	push	{r3, r4, r5, lr}
 800dcfa:	4d06      	ldr	r5, [pc, #24]	@ (800dd14 <_sbrk_r+0x1c>)
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	4604      	mov	r4, r0
 800dd00:	4608      	mov	r0, r1
 800dd02:	602b      	str	r3, [r5, #0]
 800dd04:	f7f5 fc54 	bl	80035b0 <_sbrk>
 800dd08:	1c43      	adds	r3, r0, #1
 800dd0a:	d102      	bne.n	800dd12 <_sbrk_r+0x1a>
 800dd0c:	682b      	ldr	r3, [r5, #0]
 800dd0e:	b103      	cbz	r3, 800dd12 <_sbrk_r+0x1a>
 800dd10:	6023      	str	r3, [r4, #0]
 800dd12:	bd38      	pop	{r3, r4, r5, pc}
 800dd14:	2001acec 	.word	0x2001acec

0800dd18 <_realloc_r>:
 800dd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1c:	4680      	mov	r8, r0
 800dd1e:	4615      	mov	r5, r2
 800dd20:	460c      	mov	r4, r1
 800dd22:	b921      	cbnz	r1, 800dd2e <_realloc_r+0x16>
 800dd24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dd28:	4611      	mov	r1, r2
 800dd2a:	f7ff bc59 	b.w	800d5e0 <_malloc_r>
 800dd2e:	b92a      	cbnz	r2, 800dd3c <_realloc_r+0x24>
 800dd30:	f7ff fbea 	bl	800d508 <_free_r>
 800dd34:	2400      	movs	r4, #0
 800dd36:	4620      	mov	r0, r4
 800dd38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd3c:	f000 f81a 	bl	800dd74 <_malloc_usable_size_r>
 800dd40:	4285      	cmp	r5, r0
 800dd42:	4606      	mov	r6, r0
 800dd44:	d802      	bhi.n	800dd4c <_realloc_r+0x34>
 800dd46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800dd4a:	d8f4      	bhi.n	800dd36 <_realloc_r+0x1e>
 800dd4c:	4629      	mov	r1, r5
 800dd4e:	4640      	mov	r0, r8
 800dd50:	f7ff fc46 	bl	800d5e0 <_malloc_r>
 800dd54:	4607      	mov	r7, r0
 800dd56:	2800      	cmp	r0, #0
 800dd58:	d0ec      	beq.n	800dd34 <_realloc_r+0x1c>
 800dd5a:	42b5      	cmp	r5, r6
 800dd5c:	462a      	mov	r2, r5
 800dd5e:	4621      	mov	r1, r4
 800dd60:	bf28      	it	cs
 800dd62:	4632      	movcs	r2, r6
 800dd64:	f7ff fbc2 	bl	800d4ec <memcpy>
 800dd68:	4621      	mov	r1, r4
 800dd6a:	4640      	mov	r0, r8
 800dd6c:	f7ff fbcc 	bl	800d508 <_free_r>
 800dd70:	463c      	mov	r4, r7
 800dd72:	e7e0      	b.n	800dd36 <_realloc_r+0x1e>

0800dd74 <_malloc_usable_size_r>:
 800dd74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd78:	1f18      	subs	r0, r3, #4
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	bfbc      	itt	lt
 800dd7e:	580b      	ldrlt	r3, [r1, r0]
 800dd80:	18c0      	addlt	r0, r0, r3
 800dd82:	4770      	bx	lr

0800dd84 <_init>:
 800dd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd86:	bf00      	nop
 800dd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd8a:	bc08      	pop	{r3}
 800dd8c:	469e      	mov	lr, r3
 800dd8e:	4770      	bx	lr

0800dd90 <_fini>:
 800dd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd92:	bf00      	nop
 800dd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd96:	bc08      	pop	{r3}
 800dd98:	469e      	mov	lr, r3
 800dd9a:	4770      	bx	lr
