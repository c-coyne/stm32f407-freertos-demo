
FreeRTOSDemoProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006550  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e8  080069e8  00008024  2**0
                  CONTENTS
  4 .ARM          00000008  080069e8  080069e8  000079e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069f0  080069f0  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069f0  080069f0  000079f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080069f4  080069f4  000079f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080069f8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008024  2**0
                  CONTENTS
 10 .bss          00019284  20000024  20000024  00008024  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200192a8  200192a8  00008024  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001393d  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030ef  00000000  00000000  0001b991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  0001ea80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dd6  00000000  00000000  0001fc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ef6  00000000  00000000  00020a1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015167  00000000  00000000  00043914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c92  00000000  00000000  00058a7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012c70d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004a20  00000000  00000000  0012c750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00131170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000024 	.word	0x20000024
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066c8 	.word	0x080066c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000028 	.word	0x20000028
 80001cc:	080066c8 	.word	0x080066c8

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr

080001f4 <__aeabi_uldivmod>:
 80001f4:	b953      	cbnz	r3, 800020c <__aeabi_uldivmod+0x18>
 80001f6:	b94a      	cbnz	r2, 800020c <__aeabi_uldivmod+0x18>
 80001f8:	2900      	cmp	r1, #0
 80001fa:	bf08      	it	eq
 80001fc:	2800      	cmpeq	r0, #0
 80001fe:	bf1c      	itt	ne
 8000200:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000204:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000208:	f000 b96a 	b.w	80004e0 <__aeabi_idiv0>
 800020c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000210:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000214:	f000 f806 	bl	8000224 <__udivmoddi4>
 8000218:	f8dd e004 	ldr.w	lr, [sp, #4]
 800021c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000220:	b004      	add	sp, #16
 8000222:	4770      	bx	lr

08000224 <__udivmoddi4>:
 8000224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000228:	9d08      	ldr	r5, [sp, #32]
 800022a:	460c      	mov	r4, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14e      	bne.n	80002ce <__udivmoddi4+0xaa>
 8000230:	4694      	mov	ip, r2
 8000232:	458c      	cmp	ip, r1
 8000234:	4686      	mov	lr, r0
 8000236:	fab2 f282 	clz	r2, r2
 800023a:	d962      	bls.n	8000302 <__udivmoddi4+0xde>
 800023c:	b14a      	cbz	r2, 8000252 <__udivmoddi4+0x2e>
 800023e:	f1c2 0320 	rsb	r3, r2, #32
 8000242:	4091      	lsls	r1, r2
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	fa0c fc02 	lsl.w	ip, ip, r2
 800024c:	4319      	orrs	r1, r3
 800024e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000252:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000256:	fa1f f68c 	uxth.w	r6, ip
 800025a:	fbb1 f4f7 	udiv	r4, r1, r7
 800025e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000262:	fb07 1114 	mls	r1, r7, r4, r1
 8000266:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026a:	fb04 f106 	mul.w	r1, r4, r6
 800026e:	4299      	cmp	r1, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x64>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800027a:	f080 8112 	bcs.w	80004a2 <__udivmoddi4+0x27e>
 800027e:	4299      	cmp	r1, r3
 8000280:	f240 810f 	bls.w	80004a2 <__udivmoddi4+0x27e>
 8000284:	3c02      	subs	r4, #2
 8000286:	4463      	add	r3, ip
 8000288:	1a59      	subs	r1, r3, r1
 800028a:	fa1f f38e 	uxth.w	r3, lr
 800028e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000292:	fb07 1110 	mls	r1, r7, r0, r1
 8000296:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800029a:	fb00 f606 	mul.w	r6, r0, r6
 800029e:	429e      	cmp	r6, r3
 80002a0:	d90a      	bls.n	80002b8 <__udivmoddi4+0x94>
 80002a2:	eb1c 0303 	adds.w	r3, ip, r3
 80002a6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002aa:	f080 80fc 	bcs.w	80004a6 <__udivmoddi4+0x282>
 80002ae:	429e      	cmp	r6, r3
 80002b0:	f240 80f9 	bls.w	80004a6 <__udivmoddi4+0x282>
 80002b4:	4463      	add	r3, ip
 80002b6:	3802      	subs	r0, #2
 80002b8:	1b9b      	subs	r3, r3, r6
 80002ba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002be:	2100      	movs	r1, #0
 80002c0:	b11d      	cbz	r5, 80002ca <__udivmoddi4+0xa6>
 80002c2:	40d3      	lsrs	r3, r2
 80002c4:	2200      	movs	r2, #0
 80002c6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d905      	bls.n	80002de <__udivmoddi4+0xba>
 80002d2:	b10d      	cbz	r5, 80002d8 <__udivmoddi4+0xb4>
 80002d4:	e9c5 0100 	strd	r0, r1, [r5]
 80002d8:	2100      	movs	r1, #0
 80002da:	4608      	mov	r0, r1
 80002dc:	e7f5      	b.n	80002ca <__udivmoddi4+0xa6>
 80002de:	fab3 f183 	clz	r1, r3
 80002e2:	2900      	cmp	r1, #0
 80002e4:	d146      	bne.n	8000374 <__udivmoddi4+0x150>
 80002e6:	42a3      	cmp	r3, r4
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xcc>
 80002ea:	4290      	cmp	r0, r2
 80002ec:	f0c0 80f0 	bcc.w	80004d0 <__udivmoddi4+0x2ac>
 80002f0:	1a86      	subs	r6, r0, r2
 80002f2:	eb64 0303 	sbc.w	r3, r4, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	d0e6      	beq.n	80002ca <__udivmoddi4+0xa6>
 80002fc:	e9c5 6300 	strd	r6, r3, [r5]
 8000300:	e7e3      	b.n	80002ca <__udivmoddi4+0xa6>
 8000302:	2a00      	cmp	r2, #0
 8000304:	f040 8090 	bne.w	8000428 <__udivmoddi4+0x204>
 8000308:	eba1 040c 	sub.w	r4, r1, ip
 800030c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000310:	fa1f f78c 	uxth.w	r7, ip
 8000314:	2101      	movs	r1, #1
 8000316:	fbb4 f6f8 	udiv	r6, r4, r8
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb08 4416 	mls	r4, r8, r6, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb07 f006 	mul.w	r0, r7, r6
 800032a:	4298      	cmp	r0, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x11c>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x11a>
 8000338:	4298      	cmp	r0, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2b4>
 800033e:	4626      	mov	r6, r4
 8000340:	1a1c      	subs	r4, r3, r0
 8000342:	fa1f f38e 	uxth.w	r3, lr
 8000346:	fbb4 f0f8 	udiv	r0, r4, r8
 800034a:	fb08 4410 	mls	r4, r8, r0, r4
 800034e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000352:	fb00 f707 	mul.w	r7, r0, r7
 8000356:	429f      	cmp	r7, r3
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x148>
 800035a:	eb1c 0303 	adds.w	r3, ip, r3
 800035e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x146>
 8000364:	429f      	cmp	r7, r3
 8000366:	f200 80b0 	bhi.w	80004ca <__udivmoddi4+0x2a6>
 800036a:	4620      	mov	r0, r4
 800036c:	1bdb      	subs	r3, r3, r7
 800036e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000372:	e7a5      	b.n	80002c0 <__udivmoddi4+0x9c>
 8000374:	f1c1 0620 	rsb	r6, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 f706 	lsr.w	r7, r2, r6
 800037e:	431f      	orrs	r7, r3
 8000380:	fa20 fc06 	lsr.w	ip, r0, r6
 8000384:	fa04 f301 	lsl.w	r3, r4, r1
 8000388:	ea43 030c 	orr.w	r3, r3, ip
 800038c:	40f4      	lsrs	r4, r6
 800038e:	fa00 f801 	lsl.w	r8, r0, r1
 8000392:	0c38      	lsrs	r0, r7, #16
 8000394:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000398:	fbb4 fef0 	udiv	lr, r4, r0
 800039c:	fa1f fc87 	uxth.w	ip, r7
 80003a0:	fb00 441e 	mls	r4, r0, lr, r4
 80003a4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003a8:	fb0e f90c 	mul.w	r9, lr, ip
 80003ac:	45a1      	cmp	r9, r4
 80003ae:	fa02 f201 	lsl.w	r2, r2, r1
 80003b2:	d90a      	bls.n	80003ca <__udivmoddi4+0x1a6>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ba:	f080 8084 	bcs.w	80004c6 <__udivmoddi4+0x2a2>
 80003be:	45a1      	cmp	r9, r4
 80003c0:	f240 8081 	bls.w	80004c6 <__udivmoddi4+0x2a2>
 80003c4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	eba4 0409 	sub.w	r4, r4, r9
 80003ce:	fa1f f983 	uxth.w	r9, r3
 80003d2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003d6:	fb00 4413 	mls	r4, r0, r3, r4
 80003da:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003de:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d907      	bls.n	80003f6 <__udivmoddi4+0x1d2>
 80003e6:	193c      	adds	r4, r7, r4
 80003e8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003ec:	d267      	bcs.n	80004be <__udivmoddi4+0x29a>
 80003ee:	45a4      	cmp	ip, r4
 80003f0:	d965      	bls.n	80004be <__udivmoddi4+0x29a>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	443c      	add	r4, r7
 80003f6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003fa:	fba0 9302 	umull	r9, r3, r0, r2
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	429c      	cmp	r4, r3
 8000404:	46ce      	mov	lr, r9
 8000406:	469c      	mov	ip, r3
 8000408:	d351      	bcc.n	80004ae <__udivmoddi4+0x28a>
 800040a:	d04e      	beq.n	80004aa <__udivmoddi4+0x286>
 800040c:	b155      	cbz	r5, 8000424 <__udivmoddi4+0x200>
 800040e:	ebb8 030e 	subs.w	r3, r8, lr
 8000412:	eb64 040c 	sbc.w	r4, r4, ip
 8000416:	fa04 f606 	lsl.w	r6, r4, r6
 800041a:	40cb      	lsrs	r3, r1
 800041c:	431e      	orrs	r6, r3
 800041e:	40cc      	lsrs	r4, r1
 8000420:	e9c5 6400 	strd	r6, r4, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	e750      	b.n	80002ca <__udivmoddi4+0xa6>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f103 	lsr.w	r1, r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa24 f303 	lsr.w	r3, r4, r3
 8000438:	4094      	lsls	r4, r2
 800043a:	430c      	orrs	r4, r1
 800043c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000440:	fa00 fe02 	lsl.w	lr, r0, r2
 8000444:	fa1f f78c 	uxth.w	r7, ip
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3110 	mls	r1, r8, r0, r3
 8000450:	0c23      	lsrs	r3, r4, #16
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f107 	mul.w	r1, r0, r7
 800045a:	4299      	cmp	r1, r3
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x24c>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000466:	d22c      	bcs.n	80004c2 <__udivmoddi4+0x29e>
 8000468:	4299      	cmp	r1, r3
 800046a:	d92a      	bls.n	80004c2 <__udivmoddi4+0x29e>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1a5b      	subs	r3, r3, r1
 8000472:	b2a4      	uxth	r4, r4
 8000474:	fbb3 f1f8 	udiv	r1, r3, r8
 8000478:	fb08 3311 	mls	r3, r8, r1, r3
 800047c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000480:	fb01 f307 	mul.w	r3, r1, r7
 8000484:	42a3      	cmp	r3, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x276>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000490:	d213      	bcs.n	80004ba <__udivmoddi4+0x296>
 8000492:	42a3      	cmp	r3, r4
 8000494:	d911      	bls.n	80004ba <__udivmoddi4+0x296>
 8000496:	3902      	subs	r1, #2
 8000498:	4464      	add	r4, ip
 800049a:	1ae4      	subs	r4, r4, r3
 800049c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004a0:	e739      	b.n	8000316 <__udivmoddi4+0xf2>
 80004a2:	4604      	mov	r4, r0
 80004a4:	e6f0      	b.n	8000288 <__udivmoddi4+0x64>
 80004a6:	4608      	mov	r0, r1
 80004a8:	e706      	b.n	80002b8 <__udivmoddi4+0x94>
 80004aa:	45c8      	cmp	r8, r9
 80004ac:	d2ae      	bcs.n	800040c <__udivmoddi4+0x1e8>
 80004ae:	ebb9 0e02 	subs.w	lr, r9, r2
 80004b2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7a8      	b.n	800040c <__udivmoddi4+0x1e8>
 80004ba:	4631      	mov	r1, r6
 80004bc:	e7ed      	b.n	800049a <__udivmoddi4+0x276>
 80004be:	4603      	mov	r3, r0
 80004c0:	e799      	b.n	80003f6 <__udivmoddi4+0x1d2>
 80004c2:	4630      	mov	r0, r6
 80004c4:	e7d4      	b.n	8000470 <__udivmoddi4+0x24c>
 80004c6:	46d6      	mov	lr, sl
 80004c8:	e77f      	b.n	80003ca <__udivmoddi4+0x1a6>
 80004ca:	4463      	add	r3, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e74d      	b.n	800036c <__udivmoddi4+0x148>
 80004d0:	4606      	mov	r6, r0
 80004d2:	4623      	mov	r3, r4
 80004d4:	4608      	mov	r0, r1
 80004d6:	e70f      	b.n	80002f8 <__udivmoddi4+0xd4>
 80004d8:	3e02      	subs	r6, #2
 80004da:	4463      	add	r3, ip
 80004dc:	e730      	b.n	8000340 <__udivmoddi4+0x11c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <led_task>:
/****************************************************
 *  Public functions                                *
 ****************************************************/

void led_task(void *param)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af02      	add	r7, sp, #8
 80004ea:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80004ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004f0:	9300      	str	r3, [sp, #0]
 80004f2:	2300      	movs	r3, #0
 80004f4:	2200      	movs	r2, #0
 80004f6:	2100      	movs	r1, #0
 80004f8:	2000      	movs	r0, #0
 80004fa:	f004 fe01 	bl	8005100 <xTaskGenericNotifyWait>

		// Display LED menu for the user
		xQueueSend(q_print, &msg_led_menu, portMAX_DELAY);
 80004fe:	4b3d      	ldr	r3, [pc, #244]	@ (80005f4 <led_task+0x110>)
 8000500:	6818      	ldr	r0, [r3, #0]
 8000502:	2300      	movs	r3, #0
 8000504:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000508:	493b      	ldr	r1, [pc, #236]	@ (80005f8 <led_task+0x114>)
 800050a:	f003 fb2b 	bl	8003b64 <xQueueGenericSend>

		// Wait for the user to select their desired LED effect
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000516:	9200      	str	r2, [sp, #0]
 8000518:	2200      	movs	r2, #0
 800051a:	2100      	movs	r1, #0
 800051c:	2000      	movs	r0, #0
 800051e:	f004 fdef 	bl	8005100 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	60fb      	str	r3, [r7, #12]

		// Process command and set software timers accordingly
		if(msg->len <= 4) {
 8000526:	68fb      	ldr	r3, [r7, #12]
 8000528:	68db      	ldr	r3, [r3, #12]
 800052a:	2b04      	cmp	r3, #4
 800052c:	d84c      	bhi.n	80005c8 <led_task+0xe4>
			if(!strcmp((char*)msg->payload, "None"))
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	4932      	ldr	r1, [pc, #200]	@ (80005fc <led_task+0x118>)
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff fe4c 	bl	80001d0 <strcmp>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d103      	bne.n	8000546 <led_task+0x62>
				set_led_timer(effectNone);
 800053e:	2000      	movs	r0, #0
 8000540:	f000 f878 	bl	8000634 <set_led_timer>
 8000544:	e048      	b.n	80005d8 <led_task+0xf4>
			else if (!strcmp((char*)msg->payload, "E1"))
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	492d      	ldr	r1, [pc, #180]	@ (8000600 <led_task+0x11c>)
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fe40 	bl	80001d0 <strcmp>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d103      	bne.n	800055e <led_task+0x7a>
				set_led_timer(effectE1);
 8000556:	2001      	movs	r0, #1
 8000558:	f000 f86c 	bl	8000634 <set_led_timer>
 800055c:	e03c      	b.n	80005d8 <led_task+0xf4>
			else if (!strcmp((char*)msg->payload, "E2"))
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	4928      	ldr	r1, [pc, #160]	@ (8000604 <led_task+0x120>)
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff fe34 	bl	80001d0 <strcmp>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d103      	bne.n	8000576 <led_task+0x92>
				set_led_timer(effectE2);
 800056e:	2002      	movs	r0, #2
 8000570:	f000 f860 	bl	8000634 <set_led_timer>
 8000574:	e030      	b.n	80005d8 <led_task+0xf4>
			else if (!strcmp((char*)msg->payload, "E3"))
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	4923      	ldr	r1, [pc, #140]	@ (8000608 <led_task+0x124>)
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff fe28 	bl	80001d0 <strcmp>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d103      	bne.n	800058e <led_task+0xaa>
				set_led_timer(effectE3);
 8000586:	2003      	movs	r0, #3
 8000588:	f000 f854 	bl	8000634 <set_led_timer>
 800058c:	e024      	b.n	80005d8 <led_task+0xf4>
			else if (!strcmp((char*)msg->payload, "E4"))
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	491e      	ldr	r1, [pc, #120]	@ (800060c <led_task+0x128>)
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fe1c 	bl	80001d0 <strcmp>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d103      	bne.n	80005a6 <led_task+0xc2>
				set_led_timer(effectE4);
 800059e:	2004      	movs	r0, #4
 80005a0:	f000 f848 	bl	8000634 <set_led_timer>
 80005a4:	e018      	b.n	80005d8 <led_task+0xf4>
			else if (!strcmp((char*)msg->payload, "Main"))
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	4919      	ldr	r1, [pc, #100]	@ (8000610 <led_task+0x12c>)
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fe10 	bl	80001d0 <strcmp>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d010      	beq.n	80005d8 <led_task+0xf4>
				// Do nothing
				;
			else
				xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 80005b6:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <led_task+0x110>)
 80005b8:	6818      	ldr	r0, [r3, #0]
 80005ba:	2300      	movs	r3, #0
 80005bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005c0:	4914      	ldr	r1, [pc, #80]	@ (8000614 <led_task+0x130>)
 80005c2:	f003 facf 	bl	8003b64 <xQueueGenericSend>
 80005c6:	e007      	b.n	80005d8 <led_task+0xf4>
		}
		else {
			xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 80005c8:	4b0a      	ldr	r3, [pc, #40]	@ (80005f4 <led_task+0x110>)
 80005ca:	6818      	ldr	r0, [r3, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80005d2:	4910      	ldr	r1, [pc, #64]	@ (8000614 <led_task+0x130>)
 80005d4:	f003 fac6 	bl	8003b64 <xQueueGenericSend>
		}

		// Update the system state
		curr_state = sMainMenu;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000618 <led_task+0x134>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]

		// Notify the main menu task
		xTaskNotify(handle_main_menu_task, 0, eNoAction);
 80005de:	4b0f      	ldr	r3, [pc, #60]	@ (800061c <led_task+0x138>)
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	2300      	movs	r3, #0
 80005e4:	9300      	str	r3, [sp, #0]
 80005e6:	2300      	movs	r3, #0
 80005e8:	2200      	movs	r2, #0
 80005ea:	2100      	movs	r1, #0
 80005ec:	f004 fe08 	bl	8005200 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80005f0:	e77c      	b.n	80004ec <led_task+0x8>
 80005f2:	bf00      	nop
 80005f4:	20000098 	.word	0x20000098
 80005f8:	20000004 	.word	0x20000004
 80005fc:	08006870 	.word	0x08006870
 8000600:	08006878 	.word	0x08006878
 8000604:	0800687c 	.word	0x0800687c
 8000608:	08006880 	.word	0x08006880
 800060c:	08006884 	.word	0x08006884
 8000610:	08006888 	.word	0x08006888
 8000614:	20000000 	.word	0x20000000
 8000618:	200000b1 	.word	0x200000b1
 800061c:	20000088 	.word	0x20000088

08000620 <led_callback>:
	}
}

void led_callback(TimerHandle_t xTimer)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <set_led_timer>:

/****************************************************
 *  Private functions                               *
 ****************************************************/
void set_led_timer(led_effect_t effect)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	71fb      	strb	r3, [r7, #7]

}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
	...

0800064c <main_menu_task>:
 *       command is available.                                                                         *
 * @note The main menu is displayed, and the user input is processed. Invalid inputs are handled and   *
 * an error message is sent to the print queue.                                                        *
 ******************************************************************************************************/
void main_menu_task(void *param)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b088      	sub	sp, #32
 8000650:	af02      	add	r7, sp, #8
 8000652:	6078      	str	r0, [r7, #4]
	int option;

	while(1) {

		// Present the main menu to the user
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 8000654:	4b32      	ldr	r3, [pc, #200]	@ (8000720 <main_menu_task+0xd4>)
 8000656:	6818      	ldr	r0, [r3, #0]
 8000658:	2300      	movs	r3, #0
 800065a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800065e:	4931      	ldr	r1, [pc, #196]	@ (8000724 <main_menu_task+0xd8>)
 8000660:	f003 fa80 	bl	8003b64 <xQueueGenericSend>

		// Wait for user to select a menu option
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800066c:	9200      	str	r2, [sp, #0]
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	2000      	movs	r0, #0
 8000674:	f004 fd44 	bl	8005100 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	617b      	str	r3, [r7, #20]

		if(msg->len == 1) {
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d142      	bne.n	800070a <main_menu_task+0xbe>
			// Get user option, convert from ASCII to number
			option = msg->payload[0] - 48;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	3b30      	subs	r3, #48	@ 0x30
 800068a:	613b      	str	r3, [r7, #16]
			switch(option) {
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d029      	beq.n	80006e6 <main_menu_task+0x9a>
 8000692:	693b      	ldr	r3, [r7, #16]
 8000694:	2b02      	cmp	r3, #2
 8000696:	dc2f      	bgt.n	80006f8 <main_menu_task+0xac>
 8000698:	693b      	ldr	r3, [r7, #16]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d003      	beq.n	80006a6 <main_menu_task+0x5a>
 800069e:	693b      	ldr	r3, [r7, #16]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d017      	beq.n	80006d4 <main_menu_task+0x88>
 80006a4:	e028      	b.n	80006f8 <main_menu_task+0xac>
				case 0:
					// User selection: LED menu
					curr_state = sLedMenu;
 80006a6:	4b20      	ldr	r3, [pc, #128]	@ (8000728 <main_menu_task+0xdc>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <main_menu_task+0xe0>)
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	2300      	movs	r3, #0
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	2300      	movs	r3, #0
 80006b6:	2200      	movs	r2, #0
 80006b8:	2100      	movs	r1, #0
 80006ba:	f004 fda1 	bl	8005200 <xTaskGenericNotify>
					break;
 80006be:	bf00      	nop
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
			continue;
		}

		// Wait for notification from another task before running again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2300      	movs	r3, #0
 80006c8:	2200      	movs	r2, #0
 80006ca:	2100      	movs	r1, #0
 80006cc:	2000      	movs	r0, #0
 80006ce:	f004 fd17 	bl	8005100 <xTaskGenericNotifyWait>
 80006d2:	e7bf      	b.n	8000654 <main_menu_task+0x8>
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 80006d4:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <main_menu_task+0xd4>)
 80006d6:	6818      	ldr	r0, [r3, #0]
 80006d8:	2300      	movs	r3, #0
 80006da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006de:	4914      	ldr	r1, [pc, #80]	@ (8000730 <main_menu_task+0xe4>)
 80006e0:	f003 fa40 	bl	8003b64 <xQueueGenericSend>
					continue;
 80006e4:	e01a      	b.n	800071c <main_menu_task+0xd0>
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 80006e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000720 <main_menu_task+0xd4>)
 80006e8:	6818      	ldr	r0, [r3, #0]
 80006ea:	2300      	movs	r3, #0
 80006ec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80006f0:	490f      	ldr	r1, [pc, #60]	@ (8000730 <main_menu_task+0xe4>)
 80006f2:	f003 fa37 	bl	8003b64 <xQueueGenericSend>
					continue;
 80006f6:	e011      	b.n	800071c <main_menu_task+0xd0>
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 80006f8:	4b09      	ldr	r3, [pc, #36]	@ (8000720 <main_menu_task+0xd4>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	2300      	movs	r3, #0
 80006fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000702:	490b      	ldr	r1, [pc, #44]	@ (8000730 <main_menu_task+0xe4>)
 8000704:	f003 fa2e 	bl	8003b64 <xQueueGenericSend>
					continue;
 8000708:	e008      	b.n	800071c <main_menu_task+0xd0>
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 800070a:	4b05      	ldr	r3, [pc, #20]	@ (8000720 <main_menu_task+0xd4>)
 800070c:	6818      	ldr	r0, [r3, #0]
 800070e:	2300      	movs	r3, #0
 8000710:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000714:	4906      	ldr	r1, [pc, #24]	@ (8000730 <main_menu_task+0xe4>)
 8000716:	f003 fa25 	bl	8003b64 <xQueueGenericSend>
			continue;
 800071a:	bf00      	nop
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 800071c:	e79a      	b.n	8000654 <main_menu_task+0x8>
 800071e:	bf00      	nop
 8000720:	20000098 	.word	0x20000098
 8000724:	2000000c 	.word	0x2000000c
 8000728:	200000b1 	.word	0x200000b1
 800072c:	20000094 	.word	0x20000094
 8000730:	20000008 	.word	0x20000008

08000734 <message_handler_task>:
 * @note The data queue (`q_data`) and print queue (`q_print`) must be initialized. The task must be   *
 *       notified when a new message is available.                                                     *
 * @note The processed message is sent to the print queue (`q_print`).                                 *
 ******************************************************************************************************/
void message_handler_task(void *param)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08a      	sub	sp, #40	@ 0x28
 8000738:	af02      	add	r7, sp, #8
 800073a:	6078      	str	r0, [r7, #4]
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800073c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2300      	movs	r3, #0
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	2000      	movs	r0, #0
 800074a:	f004 fcd9 	bl	8005100 <xTaskGenericNotifyWait>
 800074e:	61f8      	str	r0, [r7, #28]

		if(pdTRUE == ret) {
 8000750:	69fb      	ldr	r3, [r7, #28]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d1f2      	bne.n	800073c <message_handler_task+0x8>
			// Process the message stored in the input data queue
			process_message(&msg);
 8000756:	f107 030c 	add.w	r3, r7, #12
 800075a:	4618      	mov	r0, r3
 800075c:	f000 f822 	bl	80007a4 <process_message>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000760:	e7ec      	b.n	800073c <message_handler_task+0x8>
	...

08000764 <print_task>:
 * @note This function is intended to run as a FreeRTOS task.                                          *
 * @note The print queue (`q_print`) must be initialized and contain messages to print.                *
 * @note The received message is transmitted via UART.                                                 *
 ******************************************************************************************************/
void print_task(void *param)
{
 8000764:	b590      	push	{r4, r7, lr}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 800076c:	4b0b      	ldr	r3, [pc, #44]	@ (800079c <print_task+0x38>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f107 010c 	add.w	r1, r7, #12
 8000774:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000778:	4618      	mov	r0, r3
 800077a:	f003 fba3 	bl	8003ec4 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 800077e:	68fc      	ldr	r4, [r7, #12]
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fd2e 	bl	80001e4 <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000790:	4621      	mov	r1, r4
 8000792:	4803      	ldr	r0, [pc, #12]	@ (80007a0 <print_task+0x3c>)
 8000794:	f002 f83c 	bl	8002810 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8000798:	bf00      	nop
 800079a:	e7e7      	b.n	800076c <print_task+0x8>
 800079c:	20000098 	.word	0x20000098
 80007a0:	20000040 	.word	0x20000040

080007a4 <process_message>:
 * @return void                                                                                        *
 *                                                                                                     *
 * @note This function is called by the `message_handler_task` when a notification is received.        *
 * @note The data queue (`q_data`) must be initialized and contain a message to process.               *
 ******************************************************************************************************/
void process_message(message_t *msg) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	6078      	str	r0, [r7, #4]

	extract_command(msg);
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f825 	bl	80007fc <extract_command>

	switch(curr_state) {
 80007b2:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <process_message+0x4c>)
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d002      	beq.n	80007c0 <process_message+0x1c>
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d00a      	beq.n	80007d4 <process_message+0x30>
		case sLedMenu:
			// Notify the led task and pass the message
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
			break;
		default:
			break;
 80007be:	e013      	b.n	80007e8 <process_message+0x44>
			xTaskNotify(handle_main_menu_task, (uint32_t)msg, eSetValueWithOverwrite);
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <process_message+0x50>)
 80007c2:	6818      	ldr	r0, [r3, #0]
 80007c4:	687a      	ldr	r2, [r7, #4]
 80007c6:	2300      	movs	r3, #0
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2303      	movs	r3, #3
 80007cc:	2100      	movs	r1, #0
 80007ce:	f004 fd17 	bl	8005200 <xTaskGenericNotify>
			break;
 80007d2:	e009      	b.n	80007e8 <process_message+0x44>
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
 80007d4:	4b08      	ldr	r3, [pc, #32]	@ (80007f8 <process_message+0x54>)
 80007d6:	6818      	ldr	r0, [r3, #0]
 80007d8:	687a      	ldr	r2, [r7, #4]
 80007da:	2300      	movs	r3, #0
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2303      	movs	r3, #3
 80007e0:	2100      	movs	r1, #0
 80007e2:	f004 fd0d 	bl	8005200 <xTaskGenericNotify>
			break;
 80007e6:	bf00      	nop
	}
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	200000b1 	.word	0x200000b1
 80007f4:	20000088 	.word	0x20000088
 80007f8:	20000094 	.word	0x20000094

080007fc <extract_command>:
 * @note This function is called by `process_message` to parse the incoming command message.           *
 * @note The data queue (`q_data`) must be initialized and contain a message to extract.               *
 * @note The extracted command is stored in the `msg` structure, with its payload and length fields    *
 *       populated.                                                                                    *
 ******************************************************************************************************/
int extract_command(message_t *msg) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b086      	sub	sp, #24
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	// Check if there is data in the data queue
	status = uxQueueMessagesWaiting(q_data);
 8000804:	4b19      	ldr	r3, [pc, #100]	@ (800086c <extract_command+0x70>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f003 fccf 	bl	80041ac <uxQueueMessagesWaiting>
 800080e:	4603      	mov	r3, r0
 8000810:	613b      	str	r3, [r7, #16]
	if(!status) {
 8000812:	693b      	ldr	r3, [r7, #16]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d102      	bne.n	800081e <extract_command+0x22>
		return -1;
 8000818:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800081c:	e022      	b.n	8000864 <extract_command+0x68>
	}

	// If data is available in the data queue, load it to the msg payload
	uint8_t i=0;
 800081e:	2300      	movs	r3, #0
 8000820:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 8000822:	4b12      	ldr	r3, [pc, #72]	@ (800086c <extract_command+0x70>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f107 010f 	add.w	r1, r7, #15
 800082a:	2200      	movs	r2, #0
 800082c:	4618      	mov	r0, r3
 800082e:	f003 fb49 	bl	8003ec4 <xQueueReceive>
 8000832:	6138      	str	r0, [r7, #16]
		if(pdTRUE == status) {
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d106      	bne.n	8000848 <extract_command+0x4c>
			msg->payload[i++] = item;
 800083a:	7dfb      	ldrb	r3, [r7, #23]
 800083c:	1c5a      	adds	r2, r3, #1
 800083e:	75fa      	strb	r2, [r7, #23]
 8000840:	461a      	mov	r2, r3
 8000842:	7bf9      	ldrb	r1, [r7, #15]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\n');
 8000848:	7bfb      	ldrb	r3, [r7, #15]
 800084a:	2b0a      	cmp	r3, #10
 800084c:	d1e9      	bne.n	8000822 <extract_command+0x26>

	// Set final character in message payload to null character
	msg->payload[i-1] = '\0';
 800084e:	7dfb      	ldrb	r3, [r7, #23]
 8000850:	3b01      	subs	r3, #1
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	2100      	movs	r1, #0
 8000856:	54d1      	strb	r1, [r2, r3]
	// Save length of message without null character
	msg->len = i-1;
 8000858:	7dfb      	ldrb	r3, [r7, #23]
 800085a:	3b01      	subs	r3, #1
 800085c:	461a      	mov	r2, r3
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	60da      	str	r2, [r3, #12]

	return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3718      	adds	r7, #24
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	2000009c 	.word	0x2000009c

08000870 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b08a      	sub	sp, #40	@ 0x28
 8000874:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000876:	f000 fca3 	bl	80011c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087a:	f000 f8e3 	bl	8000a44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800087e:	f000 f975 	bl	8000b6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000882:	f000 f949 	bl	8000b18 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Create main menu task and check that it was created successfully
  status = xTaskCreate(main_menu_task, "main_menu_task", 250, NULL, 2, &handle_main_menu_task);
 8000886:	4b5c      	ldr	r3, [pc, #368]	@ (80009f8 <main+0x188>)
 8000888:	9301      	str	r3, [sp, #4]
 800088a:	2302      	movs	r3, #2
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	2300      	movs	r3, #0
 8000890:	22fa      	movs	r2, #250	@ 0xfa
 8000892:	495a      	ldr	r1, [pc, #360]	@ (80009fc <main+0x18c>)
 8000894:	485a      	ldr	r0, [pc, #360]	@ (8000a00 <main+0x190>)
 8000896:	f003 fe3d 	bl	8004514 <xTaskCreate>
 800089a:	61b8      	str	r0, [r7, #24]
  configASSERT(pdPASS == status);
 800089c:	69bb      	ldr	r3, [r7, #24]
 800089e:	2b01      	cmp	r3, #1
 80008a0:	d00b      	beq.n	80008ba <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80008a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a6:	f383 8811 	msr	BASEPRI, r3
 80008aa:	f3bf 8f6f 	isb	sy
 80008ae:	f3bf 8f4f 	dsb	sy
 80008b2:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	e7fd      	b.n	80008b6 <main+0x46>

  // Create message handler task and check that it was created successfully
  status = xTaskCreate(message_handler_task, "msg_task", 250, NULL, 2, &handle_message_handler_task);
 80008ba:	4b52      	ldr	r3, [pc, #328]	@ (8000a04 <main+0x194>)
 80008bc:	9301      	str	r3, [sp, #4]
 80008be:	2302      	movs	r3, #2
 80008c0:	9300      	str	r3, [sp, #0]
 80008c2:	2300      	movs	r3, #0
 80008c4:	22fa      	movs	r2, #250	@ 0xfa
 80008c6:	4950      	ldr	r1, [pc, #320]	@ (8000a08 <main+0x198>)
 80008c8:	4850      	ldr	r0, [pc, #320]	@ (8000a0c <main+0x19c>)
 80008ca:	f003 fe23 	bl	8004514 <xTaskCreate>
 80008ce:	61b8      	str	r0, [r7, #24]
  configASSERT(pdPASS == status);
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d00b      	beq.n	80008ee <main+0x7e>
        __asm volatile
 80008d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008da:	f383 8811 	msr	BASEPRI, r3
 80008de:	f3bf 8f6f 	isb	sy
 80008e2:	f3bf 8f4f 	dsb	sy
 80008e6:	613b      	str	r3, [r7, #16]
    }
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	e7fd      	b.n	80008ea <main+0x7a>

  // Create print task and check that it was created successfully
  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 80008ee:	4b48      	ldr	r3, [pc, #288]	@ (8000a10 <main+0x1a0>)
 80008f0:	9301      	str	r3, [sp, #4]
 80008f2:	2302      	movs	r3, #2
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	2300      	movs	r3, #0
 80008f8:	22fa      	movs	r2, #250	@ 0xfa
 80008fa:	4946      	ldr	r1, [pc, #280]	@ (8000a14 <main+0x1a4>)
 80008fc:	4846      	ldr	r0, [pc, #280]	@ (8000a18 <main+0x1a8>)
 80008fe:	f003 fe09 	bl	8004514 <xTaskCreate>
 8000902:	61b8      	str	r0, [r7, #24]
  configASSERT(pdPASS == status);
 8000904:	69bb      	ldr	r3, [r7, #24]
 8000906:	2b01      	cmp	r3, #1
 8000908:	d00b      	beq.n	8000922 <main+0xb2>
        __asm volatile
 800090a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800090e:	f383 8811 	msr	BASEPRI, r3
 8000912:	f3bf 8f6f 	isb	sy
 8000916:	f3bf 8f4f 	dsb	sy
 800091a:	60fb      	str	r3, [r7, #12]
    }
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	e7fd      	b.n	800091e <main+0xae>

  // Create LED task and check that it was created successfully
  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8000922:	4b3e      	ldr	r3, [pc, #248]	@ (8000a1c <main+0x1ac>)
 8000924:	9301      	str	r3, [sp, #4]
 8000926:	2302      	movs	r3, #2
 8000928:	9300      	str	r3, [sp, #0]
 800092a:	2300      	movs	r3, #0
 800092c:	22fa      	movs	r2, #250	@ 0xfa
 800092e:	493c      	ldr	r1, [pc, #240]	@ (8000a20 <main+0x1b0>)
 8000930:	483c      	ldr	r0, [pc, #240]	@ (8000a24 <main+0x1b4>)
 8000932:	f003 fdef 	bl	8004514 <xTaskCreate>
 8000936:	61b8      	str	r0, [r7, #24]
  configASSERT(pdPASS == status);
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d00b      	beq.n	8000956 <main+0xe6>
        __asm volatile
 800093e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000942:	f383 8811 	msr	BASEPRI, r3
 8000946:	f3bf 8f6f 	isb	sy
 800094a:	f3bf 8f4f 	dsb	sy
 800094e:	60bb      	str	r3, [r7, #8]
    }
 8000950:	bf00      	nop
 8000952:	bf00      	nop
 8000954:	e7fd      	b.n	8000952 <main+0xe2>

  // Create data queue and check that it was created successfully
  q_data = xQueueCreate(10, sizeof(char));
 8000956:	2200      	movs	r2, #0
 8000958:	2101      	movs	r1, #1
 800095a:	200a      	movs	r0, #10
 800095c:	f003 f87c 	bl	8003a58 <xQueueGenericCreate>
 8000960:	4603      	mov	r3, r0
 8000962:	4a31      	ldr	r2, [pc, #196]	@ (8000a28 <main+0x1b8>)
 8000964:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_data);
 8000966:	4b30      	ldr	r3, [pc, #192]	@ (8000a28 <main+0x1b8>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d10b      	bne.n	8000986 <main+0x116>
        __asm volatile
 800096e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000972:	f383 8811 	msr	BASEPRI, r3
 8000976:	f3bf 8f6f 	isb	sy
 800097a:	f3bf 8f4f 	dsb	sy
 800097e:	607b      	str	r3, [r7, #4]
    }
 8000980:	bf00      	nop
 8000982:	bf00      	nop
 8000984:	e7fd      	b.n	8000982 <main+0x112>

  // Create print queue and check that it was created successfully
  q_print = xQueueCreate(10, sizeof(size_t));
 8000986:	2200      	movs	r2, #0
 8000988:	2104      	movs	r1, #4
 800098a:	200a      	movs	r0, #10
 800098c:	f003 f864 	bl	8003a58 <xQueueGenericCreate>
 8000990:	4603      	mov	r3, r0
 8000992:	4a26      	ldr	r2, [pc, #152]	@ (8000a2c <main+0x1bc>)
 8000994:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_print);
 8000996:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <main+0x1bc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d10b      	bne.n	80009b6 <main+0x146>
        __asm volatile
 800099e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009a2:	f383 8811 	msr	BASEPRI, r3
 80009a6:	f3bf 8f6f 	isb	sy
 80009aa:	f3bf 8f4f 	dsb	sy
 80009ae:	603b      	str	r3, [r7, #0]
    }
 80009b0:	bf00      	nop
 80009b2:	bf00      	nop
 80009b4:	e7fd      	b.n	80009b2 <main+0x142>

  // Create software timers for LED effects
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
 80009ba:	e010      	b.n	80009de <main+0x16e>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)i, led_callback);
 80009bc:	69fb      	ldr	r3, [r7, #28]
 80009be:	4a1c      	ldr	r2, [pc, #112]	@ (8000a30 <main+0x1c0>)
 80009c0:	9200      	str	r2, [sp, #0]
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80009c8:	481a      	ldr	r0, [pc, #104]	@ (8000a34 <main+0x1c4>)
 80009ca:	f004 fe9d 	bl	8005708 <xTimerCreate>
 80009ce:	4602      	mov	r2, r0
 80009d0:	4919      	ldr	r1, [pc, #100]	@ (8000a38 <main+0x1c8>)
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 80009d8:	69fb      	ldr	r3, [r7, #28]
 80009da:	3301      	adds	r3, #1
 80009dc:	61fb      	str	r3, [r7, #28]
 80009de:	69fb      	ldr	r3, [r7, #28]
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	ddeb      	ble.n	80009bc <main+0x14c>
  }

  // Prepare UART to receive a message
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80009e4:	2201      	movs	r2, #1
 80009e6:	4915      	ldr	r1, [pc, #84]	@ (8000a3c <main+0x1cc>)
 80009e8:	4815      	ldr	r0, [pc, #84]	@ (8000a40 <main+0x1d0>)
 80009ea:	f001 ff9c 	bl	8002926 <HAL_UART_Receive_IT>

  // Start the kernel
  vTaskStartScheduler();
 80009ee:	f003 fed7 	bl	80047a0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f2:	bf00      	nop
 80009f4:	e7fd      	b.n	80009f2 <main+0x182>
 80009f6:	bf00      	nop
 80009f8:	20000088 	.word	0x20000088
 80009fc:	08006978 	.word	0x08006978
 8000a00:	0800064d 	.word	0x0800064d
 8000a04:	2000008c 	.word	0x2000008c
 8000a08:	08006988 	.word	0x08006988
 8000a0c:	08000735 	.word	0x08000735
 8000a10:	20000090 	.word	0x20000090
 8000a14:	08006994 	.word	0x08006994
 8000a18:	08000765 	.word	0x08000765
 8000a1c:	20000094 	.word	0x20000094
 8000a20:	080069a0 	.word	0x080069a0
 8000a24:	080004e5 	.word	0x080004e5
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	20000098 	.word	0x20000098
 8000a30:	08000621 	.word	0x08000621
 8000a34:	080069ac 	.word	0x080069ac
 8000a38:	200000a0 	.word	0x200000a0
 8000a3c:	200000b0 	.word	0x200000b0
 8000a40:	20000040 	.word	0x20000040

08000a44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b094      	sub	sp, #80	@ 0x50
 8000a48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a4a:	f107 0320 	add.w	r3, r7, #32
 8000a4e:	2230      	movs	r2, #48	@ 0x30
 8000a50:	2100      	movs	r1, #0
 8000a52:	4618      	mov	r0, r3
 8000a54:	f005 fdfe 	bl	8006654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	4b28      	ldr	r3, [pc, #160]	@ (8000b10 <SystemClock_Config+0xcc>)
 8000a6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a70:	4a27      	ldr	r2, [pc, #156]	@ (8000b10 <SystemClock_Config+0xcc>)
 8000a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a76:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a78:	4b25      	ldr	r3, [pc, #148]	@ (8000b10 <SystemClock_Config+0xcc>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a84:	2300      	movs	r3, #0
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	4b22      	ldr	r3, [pc, #136]	@ (8000b14 <SystemClock_Config+0xd0>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a21      	ldr	r2, [pc, #132]	@ (8000b14 <SystemClock_Config+0xd0>)
 8000a8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a92:	6013      	str	r3, [r2, #0]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	@ (8000b14 <SystemClock_Config+0xd0>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9c:	607b      	str	r3, [r7, #4]
 8000a9e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aac:	2302      	movs	r3, #2
 8000aae:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ab4:	2308      	movs	r3, #8
 8000ab6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000ab8:	2332      	movs	r3, #50	@ 0x32
 8000aba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000abc:	2304      	movs	r3, #4
 8000abe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac4:	f107 0320 	add.w	r3, r7, #32
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f000 fee5 	bl	8001898 <HAL_RCC_OscConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ad4:	f000 fa0e 	bl	8000ef4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad8:	230f      	movs	r3, #15
 8000ada:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000adc:	2302      	movs	r3, #2
 8000ade:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ae4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ae8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000aea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aee:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f001 f946 	bl	8001d88 <HAL_RCC_ClockConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b02:	f000 f9f7 	bl	8000ef4 <Error_Handler>
  }
}
 8000b06:	bf00      	nop
 8000b08:	3750      	adds	r7, #80	@ 0x50
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40023800 	.word	0x40023800
 8000b14:	40007000 	.word	0x40007000

08000b18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b1c:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	4a12      	ldr	r2, [pc, #72]	@ (8000b68 <MX_USART2_UART_Init+0x50>)
 8000b20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b22:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b30:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b36:	4b0b      	ldr	r3, [pc, #44]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b3c:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b3e:	220c      	movs	r2, #12
 8000b40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b48:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b4e:	4805      	ldr	r0, [pc, #20]	@ (8000b64 <MX_USART2_UART_Init+0x4c>)
 8000b50:	f001 fe0e 	bl	8002770 <HAL_UART_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b5a:	f000 f9cb 	bl	8000ef4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	20000040 	.word	0x20000040
 8000b68:	40004400 	.word	0x40004400

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08c      	sub	sp, #48	@ 0x30
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	4ba2      	ldr	r3, [pc, #648]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4aa1      	ldr	r2, [pc, #644]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000b8c:	f043 0310 	orr.w	r3, r3, #16
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b9f      	ldr	r3, [pc, #636]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0310 	and.w	r3, r3, #16
 8000b9a:	61bb      	str	r3, [r7, #24]
 8000b9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	4b9b      	ldr	r3, [pc, #620]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a9a      	ldr	r2, [pc, #616]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b98      	ldr	r3, [pc, #608]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b94      	ldr	r3, [pc, #592]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a93      	ldr	r2, [pc, #588]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000bc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b91      	ldr	r3, [pc, #580]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b8d      	ldr	r3, [pc, #564]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a8c      	ldr	r2, [pc, #560]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b8a      	ldr	r3, [pc, #552]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b86      	ldr	r3, [pc, #536]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a85      	ldr	r2, [pc, #532]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000bfc:	f043 0302 	orr.w	r3, r3, #2
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b83      	ldr	r3, [pc, #524]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b7f      	ldr	r3, [pc, #508]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a7e      	ldr	r2, [pc, #504]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000c18:	f043 0308 	orr.w	r3, r3, #8
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8000e10 <MX_GPIO_Init+0x2a4>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0308 	and.w	r3, r3, #8
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	2108      	movs	r1, #8
 8000c2e:	4879      	ldr	r0, [pc, #484]	@ (8000e14 <MX_GPIO_Init+0x2a8>)
 8000c30:	f000 fe18 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c34:	2201      	movs	r2, #1
 8000c36:	2101      	movs	r1, #1
 8000c38:	4877      	ldr	r0, [pc, #476]	@ (8000e18 <MX_GPIO_Init+0x2ac>)
 8000c3a:	f000 fe13 	bl	8001864 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000c44:	4875      	ldr	r0, [pc, #468]	@ (8000e1c <MX_GPIO_Init+0x2b0>)
 8000c46:	f000 fe0d 	bl	8001864 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 031c 	add.w	r3, r7, #28
 8000c5e:	4619      	mov	r1, r3
 8000c60:	486c      	ldr	r0, [pc, #432]	@ (8000e14 <MX_GPIO_Init+0x2a8>)
 8000c62:	f000 fc63 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000c66:	2301      	movs	r3, #1
 8000c68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 031c 	add.w	r3, r7, #28
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4866      	ldr	r0, [pc, #408]	@ (8000e18 <MX_GPIO_Init+0x2ac>)
 8000c7e:	f000 fc55 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000c82:	2308      	movs	r3, #8
 8000c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	2302      	movs	r3, #2
 8000c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c92:	2305      	movs	r3, #5
 8000c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	485e      	ldr	r0, [pc, #376]	@ (8000e18 <MX_GPIO_Init+0x2ac>)
 8000c9e:	f000 fc45 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	485a      	ldr	r0, [pc, #360]	@ (8000e20 <MX_GPIO_Init+0x2b4>)
 8000cb8:	f000 fc38 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000cbc:	2310      	movs	r3, #16
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ccc:	2306      	movs	r3, #6
 8000cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4852      	ldr	r0, [pc, #328]	@ (8000e20 <MX_GPIO_Init+0x2b4>)
 8000cd8:	f000 fc28 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000cdc:	23e0      	movs	r3, #224	@ 0xe0
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cec:	2305      	movs	r3, #5
 8000cee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf0:	f107 031c 	add.w	r3, r7, #28
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	484a      	ldr	r0, [pc, #296]	@ (8000e20 <MX_GPIO_Init+0x2b4>)
 8000cf8:	f000 fc18 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cfc:	2304      	movs	r3, #4
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d00:	2300      	movs	r3, #0
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d08:	f107 031c 	add.w	r3, r7, #28
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	4845      	ldr	r0, [pc, #276]	@ (8000e24 <MX_GPIO_Init+0x2b8>)
 8000d10:	f000 fc0c 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d22:	2300      	movs	r3, #0
 8000d24:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d26:	2305      	movs	r3, #5
 8000d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	4619      	mov	r1, r3
 8000d30:	483c      	ldr	r0, [pc, #240]	@ (8000e24 <MX_GPIO_Init+0x2b8>)
 8000d32:	f000 fbfb 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d36:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000d3a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d44:	2300      	movs	r3, #0
 8000d46:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d48:	f107 031c 	add.w	r3, r7, #28
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	4833      	ldr	r0, [pc, #204]	@ (8000e1c <MX_GPIO_Init+0x2b0>)
 8000d50:	f000 fbec 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d54:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000d58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d66:	2306      	movs	r3, #6
 8000d68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4829      	ldr	r0, [pc, #164]	@ (8000e18 <MX_GPIO_Init+0x2ac>)
 8000d72:	f000 fbdb 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000d76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 031c 	add.w	r3, r7, #28
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4825      	ldr	r0, [pc, #148]	@ (8000e20 <MX_GPIO_Init+0x2b4>)
 8000d8c:	f000 fbce 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000d90:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000da2:	230a      	movs	r3, #10
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	4619      	mov	r1, r3
 8000dac:	481c      	ldr	r0, [pc, #112]	@ (8000e20 <MX_GPIO_Init+0x2b4>)
 8000dae:	f000 fbbd 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000db2:	2320      	movs	r3, #32
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	2300      	movs	r3, #0
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	f107 031c 	add.w	r3, r7, #28
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4815      	ldr	r0, [pc, #84]	@ (8000e1c <MX_GPIO_Init+0x2b0>)
 8000dc6:	f000 fbb1 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000dca:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd0:	2312      	movs	r3, #18
 8000dd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	480f      	ldr	r0, [pc, #60]	@ (8000e24 <MX_GPIO_Init+0x2b8>)
 8000de8:	f000 fba0 	bl	800152c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000df0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000df4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df6:	2300      	movs	r3, #0
 8000df8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000dfa:	f107 031c 	add.w	r3, r7, #28
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4804      	ldr	r0, [pc, #16]	@ (8000e14 <MX_GPIO_Init+0x2a8>)
 8000e02:	f000 fb93 	bl	800152c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e06:	bf00      	nop
 8000e08:	3730      	adds	r7, #48	@ 0x30
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	40023800 	.word	0x40023800
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40020800 	.word	0x40020800
 8000e1c:	40020c00 	.word	0x40020c00
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400

08000e28 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler, so it executes in the interrupt context
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
	// Dummy variable used to replace final character in data queue
	uint8_t dummy;

	// Add a small delay to allow timing for message transmission
	for(uint32_t i=0; i<4000; i++);
 8000e30:	2300      	movs	r3, #0
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	e002      	b.n	8000e3c <HAL_UART_RxCpltCallback+0x14>
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000e42:	d3f8      	bcc.n	8000e36 <HAL_UART_RxCpltCallback+0xe>

	// Check if data is available via UART
	if(!xQueueIsQueueFullFromISR(q_data)) {
 8000e44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x98>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f003 fade 	bl	800440a <xQueueIsQueueFullFromISR>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d107      	bne.n	8000e64 <HAL_UART_RxCpltCallback+0x3c>
		// Enqueue data byte
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000e54:	4b1a      	ldr	r3, [pc, #104]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x98>)
 8000e56:	6818      	ldr	r0, [r3, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	4919      	ldr	r1, [pc, #100]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x9c>)
 8000e5e:	f002 ff83 	bl	8003d68 <xQueueGenericSendFromISR>
 8000e62:	e013      	b.n	8000e8c <HAL_UART_RxCpltCallback+0x64>
	}
	// If no data available, check if last entered character is newline character
	else {
		if(user_data == '\n') {
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x9c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b0a      	cmp	r3, #10
 8000e6c:	d10e      	bne.n	8000e8c <HAL_UART_RxCpltCallback+0x64>
			// Replace last byte of data queue with '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8000e6e:	4b14      	ldr	r3, [pc, #80]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x98>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f107 010b 	add.w	r1, r7, #11
 8000e76:	2200      	movs	r2, #0
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 f905 	bl	8004088 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <HAL_UART_RxCpltCallback+0x98>)
 8000e80:	6818      	ldr	r0, [r3, #0]
 8000e82:	2300      	movs	r3, #0
 8000e84:	2200      	movs	r2, #0
 8000e86:	490f      	ldr	r1, [pc, #60]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x9c>)
 8000e88:	f002 ff6e 	bl	8003d68 <xQueueGenericSendFromISR>
		}
	}

	// Send notification to message handler task if user_data == '\n'
	if(user_data == '\n') {
 8000e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x9c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	2b0a      	cmp	r3, #10
 8000e94:	d10a      	bne.n	8000eac <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_message_handler_task, 0, eNoAction, NULL);
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <HAL_UART_RxCpltCallback+0xa0>)
 8000e98:	6818      	ldr	r0, [r3, #0]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	f004 fa8e 	bl	80053c8 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in interrupt mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000eac:	2201      	movs	r2, #1
 8000eae:	4905      	ldr	r1, [pc, #20]	@ (8000ec4 <HAL_UART_RxCpltCallback+0x9c>)
 8000eb0:	4806      	ldr	r0, [pc, #24]	@ (8000ecc <HAL_UART_RxCpltCallback+0xa4>)
 8000eb2:	f001 fd38 	bl	8002926 <HAL_UART_Receive_IT>

}
 8000eb6:	bf00      	nop
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	2000009c 	.word	0x2000009c
 8000ec4:	200000b0 	.word	0x200000b0
 8000ec8:	2000008c 	.word	0x2000008c
 8000ecc:	20000040 	.word	0x20000040

08000ed0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a04      	ldr	r2, [pc, #16]	@ (8000ef0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d101      	bne.n	8000ee6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ee2:	f000 f98f 	bl	8001204 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	3708      	adds	r7, #8
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40001000 	.word	0x40001000

08000ef4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ef8:	b672      	cpsid	i
}
 8000efa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <Error_Handler+0x8>

08000f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f06:	2300      	movs	r3, #0
 8000f08:	607b      	str	r3, [r7, #4]
 8000f0a:	4b10      	ldr	r3, [pc, #64]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f16:	4b0d      	ldr	r3, [pc, #52]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	2300      	movs	r3, #0
 8000f24:	603b      	str	r3, [r7, #0]
 8000f26:	4b09      	ldr	r3, [pc, #36]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2a:	4a08      	ldr	r2, [pc, #32]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f32:	4b06      	ldr	r3, [pc, #24]	@ (8000f4c <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	603b      	str	r3, [r7, #0]
 8000f3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	40023800 	.word	0x40023800

08000f50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	@ 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe4 <HAL_UART_MspInit+0x94>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d133      	bne.n	8000fda <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000f7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f82:	4b19      	ldr	r3, [pc, #100]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a14      	ldr	r2, [pc, #80]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_UART_MspInit+0x98>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000faa:	230c      	movs	r3, #12
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fba:	2307      	movs	r3, #7
 8000fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4809      	ldr	r0, [pc, #36]	@ (8000fec <HAL_UART_MspInit+0x9c>)
 8000fc6:	f000 fab1 	bl	800152c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2106      	movs	r1, #6
 8000fce:	2026      	movs	r0, #38	@ 0x26
 8000fd0:	f000 f9f0 	bl	80013b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fd4:	2026      	movs	r0, #38	@ 0x26
 8000fd6:	f000 fa09 	bl	80013ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	@ 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40004400 	.word	0x40004400
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	40020000 	.word	0x40020000

08000ff0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08e      	sub	sp, #56	@ 0x38
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4b33      	ldr	r3, [pc, #204]	@ (80010d4 <HAL_InitTick+0xe4>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001008:	4a32      	ldr	r2, [pc, #200]	@ (80010d4 <HAL_InitTick+0xe4>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001010:	4b30      	ldr	r3, [pc, #192]	@ (80010d4 <HAL_InitTick+0xe4>)
 8001012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001014:	f003 0310 	and.w	r3, r3, #16
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800101c:	f107 0210 	add.w	r2, r7, #16
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f001 f8ce 	bl	80021c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001032:	2b00      	cmp	r3, #0
 8001034:	d103      	bne.n	800103e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001036:	f001 f89f 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 800103a:	6378      	str	r0, [r7, #52]	@ 0x34
 800103c:	e004      	b.n	8001048 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800103e:	f001 f89b 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 8001042:	4603      	mov	r3, r0
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800104a:	4a23      	ldr	r2, [pc, #140]	@ (80010d8 <HAL_InitTick+0xe8>)
 800104c:	fba2 2303 	umull	r2, r3, r2, r3
 8001050:	0c9b      	lsrs	r3, r3, #18
 8001052:	3b01      	subs	r3, #1
 8001054:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <HAL_InitTick+0xec>)
 8001058:	4a21      	ldr	r2, [pc, #132]	@ (80010e0 <HAL_InitTick+0xf0>)
 800105a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800105c:	4b1f      	ldr	r3, [pc, #124]	@ (80010dc <HAL_InitTick+0xec>)
 800105e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001062:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001064:	4a1d      	ldr	r2, [pc, #116]	@ (80010dc <HAL_InitTick+0xec>)
 8001066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001068:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800106a:	4b1c      	ldr	r3, [pc, #112]	@ (80010dc <HAL_InitTick+0xec>)
 800106c:	2200      	movs	r2, #0
 800106e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <HAL_InitTick+0xec>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001076:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <HAL_InitTick+0xec>)
 8001078:	2200      	movs	r2, #0
 800107a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800107c:	4817      	ldr	r0, [pc, #92]	@ (80010dc <HAL_InitTick+0xec>)
 800107e:	f001 f8d5 	bl	800222c <HAL_TIM_Base_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001088:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800108c:	2b00      	cmp	r3, #0
 800108e:	d11b      	bne.n	80010c8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001090:	4812      	ldr	r0, [pc, #72]	@ (80010dc <HAL_InitTick+0xec>)
 8001092:	f001 f925 	bl	80022e0 <HAL_TIM_Base_Start_IT>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800109c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d111      	bne.n	80010c8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010a4:	2036      	movs	r0, #54	@ 0x36
 80010a6:	f000 f9a1 	bl	80013ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2b0f      	cmp	r3, #15
 80010ae:	d808      	bhi.n	80010c2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010b0:	2200      	movs	r2, #0
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	2036      	movs	r0, #54	@ 0x36
 80010b6:	f000 f97d 	bl	80013b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <HAL_InitTick+0xf4>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e002      	b.n	80010c8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3738      	adds	r7, #56	@ 0x38
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40023800 	.word	0x40023800
 80010d8:	431bde83 	.word	0x431bde83
 80010dc:	200000b4 	.word	0x200000b4
 80010e0:	40001000 	.word	0x40001000
 80010e4:	20000014 	.word	0x20000014

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <NMI_Handler+0x4>

080010f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MemManage_Handler+0x4>

08001100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <UsageFault_Handler+0x4>

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <USART2_IRQHandler+0x10>)
 8001126:	f001 fc23 	bl	8002970 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000040 	.word	0x20000040

08001134 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <TIM6_DAC_IRQHandler+0x10>)
 800113a:	f001 f941 	bl	80023c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200000b4 	.word	0x200000b4

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800116c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001170:	f7ff ffea 	bl	8001148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001176:	490d      	ldr	r1, [pc, #52]	@ (80011ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001178:	4a0d      	ldr	r2, [pc, #52]	@ (80011b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800117c:	e002      	b.n	8001184 <LoopCopyDataInit>

0800117e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800117e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001180:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001182:	3304      	adds	r3, #4

08001184 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001184:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001186:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001188:	d3f9      	bcc.n	800117e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118a:	4a0a      	ldr	r2, [pc, #40]	@ (80011b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800118c:	4c0a      	ldr	r4, [pc, #40]	@ (80011b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001190:	e001      	b.n	8001196 <LoopFillZerobss>

08001192 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001192:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001194:	3204      	adds	r2, #4

08001196 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001196:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001198:	d3fb      	bcc.n	8001192 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119a:	f005 fa63 	bl	8006664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800119e:	f7ff fb67 	bl	8000870 <main>
  bx  lr    
 80011a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80011a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80011a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ac:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80011b0:	080069f8 	.word	0x080069f8
  ldr r2, =_sbss
 80011b4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80011b8:	200192a8 	.word	0x200192a8

080011bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011bc:	e7fe      	b.n	80011bc <ADC_IRQHandler>
	...

080011c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001200 <HAL_Init+0x40>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001200 <HAL_Init+0x40>)
 80011ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001200 <HAL_Init+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <HAL_Init+0x40>)
 80011d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011dc:	4b08      	ldr	r3, [pc, #32]	@ (8001200 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a07      	ldr	r2, [pc, #28]	@ (8001200 <HAL_Init+0x40>)
 80011e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e8:	2003      	movs	r0, #3
 80011ea:	f000 f8d8 	bl	800139e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ee:	200f      	movs	r0, #15
 80011f0:	f7ff fefe 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011f4:	f7ff fe84 	bl	8000f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	40023c00 	.word	0x40023c00

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	@ (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000018 	.word	0x20000018
 8001228:	200000fc 	.word	0x200000fc

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	@ (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200000fc 	.word	0x200000fc

08001244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800126c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001270:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	@ (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db0b      	blt.n	80012d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	4907      	ldr	r1, [pc, #28]	@ (80012e0 <__NVIC_EnableIRQ+0x38>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2001      	movs	r0, #1
 80012ca:	fa00 f202 	lsl.w	r2, r0, r2
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	@ (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	@ (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	@ 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	@ 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff4c 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013c6:	f7ff ff61 	bl	800128c <__NVIC_GetPriorityGrouping>
 80013ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	6978      	ldr	r0, [r7, #20]
 80013d2:	f7ff ffb1 	bl	8001338 <NVIC_EncodePriority>
 80013d6:	4602      	mov	r2, r0
 80013d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff80 	bl	80012e4 <__NVIC_SetPriority>
}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff54 	bl	80012a8 <__NVIC_EnableIRQ>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001414:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001416:	f7ff ff09 	bl	800122c <HAL_GetTick>
 800141a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001422:	b2db      	uxtb	r3, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d008      	beq.n	800143a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2280      	movs	r2, #128	@ 0x80
 800142c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e052      	b.n	80014e0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f022 0216 	bic.w	r2, r2, #22
 8001448:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001458:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d103      	bne.n	800146a <HAL_DMA_Abort+0x62>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001466:	2b00      	cmp	r3, #0
 8001468:	d007      	beq.n	800147a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0208 	bic.w	r2, r2, #8
 8001478:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0201 	bic.w	r2, r2, #1
 8001488:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800148a:	e013      	b.n	80014b4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800148c:	f7ff fece 	bl	800122c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b05      	cmp	r3, #5
 8001498:	d90c      	bls.n	80014b4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2220      	movs	r2, #32
 800149e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2203      	movs	r2, #3
 80014a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e015      	b.n	80014e0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1e4      	bne.n	800148c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c6:	223f      	movs	r2, #63	@ 0x3f
 80014c8:	409a      	lsls	r2, r3
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2201      	movs	r2, #1
 80014d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3710      	adds	r7, #16
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b02      	cmp	r3, #2
 80014fa:	d004      	beq.n	8001506 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2280      	movs	r2, #128	@ 0x80
 8001500:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001502:	2301      	movs	r3, #1
 8001504:	e00c      	b.n	8001520 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2205      	movs	r2, #5
 800150a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f022 0201 	bic.w	r2, r2, #1
 800151c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800151e:	2300      	movs	r3, #0
}
 8001520:	4618      	mov	r0, r3
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800152c:	b480      	push	{r7}
 800152e:	b089      	sub	sp, #36	@ 0x24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153e:	2300      	movs	r3, #0
 8001540:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001542:	2300      	movs	r3, #0
 8001544:	61fb      	str	r3, [r7, #28]
 8001546:	e16b      	b.n	8001820 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001548:	2201      	movs	r2, #1
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	697a      	ldr	r2, [r7, #20]
 8001558:	4013      	ands	r3, r2
 800155a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	429a      	cmp	r2, r3
 8001562:	f040 815a 	bne.w	800181a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f003 0303 	and.w	r3, r3, #3
 800156e:	2b01      	cmp	r3, #1
 8001570:	d005      	beq.n	800157e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800157a:	2b02      	cmp	r3, #2
 800157c:	d130      	bne.n	80015e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	4013      	ands	r3, r2
 8001594:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	68da      	ldr	r2, [r3, #12]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	fa02 f303 	lsl.w	r3, r2, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b4:	2201      	movs	r2, #1
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	091b      	lsrs	r3, r3, #4
 80015ca:	f003 0201 	and.w	r2, r3, #1
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f003 0303 	and.w	r3, r3, #3
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d017      	beq.n	800161c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	2203      	movs	r2, #3
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f003 0303 	and.w	r3, r3, #3
 8001624:	2b02      	cmp	r3, #2
 8001626:	d123      	bne.n	8001670 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	08da      	lsrs	r2, r3, #3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3208      	adds	r2, #8
 8001630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001634:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	f003 0307 	and.w	r3, r3, #7
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	220f      	movs	r2, #15
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	691a      	ldr	r2, [r3, #16]
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	fa02 f303 	lsl.w	r3, r2, r3
 800165c:	69ba      	ldr	r2, [r7, #24]
 800165e:	4313      	orrs	r3, r2
 8001660:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	08da      	lsrs	r2, r3, #3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3208      	adds	r2, #8
 800166a:	69b9      	ldr	r1, [r7, #24]
 800166c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2203      	movs	r2, #3
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 0203 	and.w	r2, r3, #3
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	fa02 f303 	lsl.w	r3, r2, r3
 8001698:	69ba      	ldr	r2, [r7, #24]
 800169a:	4313      	orrs	r3, r2
 800169c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	f000 80b4 	beq.w	800181a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b60      	ldr	r3, [pc, #384]	@ (8001838 <HAL_GPIO_Init+0x30c>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ba:	4a5f      	ldr	r2, [pc, #380]	@ (8001838 <HAL_GPIO_Init+0x30c>)
 80016bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016c2:	4b5d      	ldr	r3, [pc, #372]	@ (8001838 <HAL_GPIO_Init+0x30c>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ce:	4a5b      	ldr	r2, [pc, #364]	@ (800183c <HAL_GPIO_Init+0x310>)
 80016d0:	69fb      	ldr	r3, [r7, #28]
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	3302      	adds	r3, #2
 80016d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	f003 0303 	and.w	r3, r3, #3
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	220f      	movs	r2, #15
 80016e6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ea:	43db      	mvns	r3, r3
 80016ec:	69ba      	ldr	r2, [r7, #24]
 80016ee:	4013      	ands	r3, r2
 80016f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a52      	ldr	r2, [pc, #328]	@ (8001840 <HAL_GPIO_Init+0x314>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d02b      	beq.n	8001752 <HAL_GPIO_Init+0x226>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a51      	ldr	r2, [pc, #324]	@ (8001844 <HAL_GPIO_Init+0x318>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d025      	beq.n	800174e <HAL_GPIO_Init+0x222>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a50      	ldr	r2, [pc, #320]	@ (8001848 <HAL_GPIO_Init+0x31c>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d01f      	beq.n	800174a <HAL_GPIO_Init+0x21e>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4f      	ldr	r2, [pc, #316]	@ (800184c <HAL_GPIO_Init+0x320>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d019      	beq.n	8001746 <HAL_GPIO_Init+0x21a>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a4e      	ldr	r2, [pc, #312]	@ (8001850 <HAL_GPIO_Init+0x324>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d013      	beq.n	8001742 <HAL_GPIO_Init+0x216>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a4d      	ldr	r2, [pc, #308]	@ (8001854 <HAL_GPIO_Init+0x328>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00d      	beq.n	800173e <HAL_GPIO_Init+0x212>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4c      	ldr	r2, [pc, #304]	@ (8001858 <HAL_GPIO_Init+0x32c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x20e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4b      	ldr	r2, [pc, #300]	@ (800185c <HAL_GPIO_Init+0x330>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d101      	bne.n	8001736 <HAL_GPIO_Init+0x20a>
 8001732:	2307      	movs	r3, #7
 8001734:	e00e      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001736:	2308      	movs	r3, #8
 8001738:	e00c      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800173a:	2306      	movs	r3, #6
 800173c:	e00a      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800173e:	2305      	movs	r3, #5
 8001740:	e008      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001742:	2304      	movs	r3, #4
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001746:	2303      	movs	r3, #3
 8001748:	e004      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800174a:	2302      	movs	r3, #2
 800174c:	e002      	b.n	8001754 <HAL_GPIO_Init+0x228>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x228>
 8001752:	2300      	movs	r3, #0
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f002 0203 	and.w	r2, r2, #3
 800175a:	0092      	lsls	r2, r2, #2
 800175c:	4093      	lsls	r3, r2
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001764:	4935      	ldr	r1, [pc, #212]	@ (800183c <HAL_GPIO_Init+0x310>)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001772:	4b3b      	ldr	r3, [pc, #236]	@ (8001860 <HAL_GPIO_Init+0x334>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001796:	4a32      	ldr	r2, [pc, #200]	@ (8001860 <HAL_GPIO_Init+0x334>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800179c:	4b30      	ldr	r3, [pc, #192]	@ (8001860 <HAL_GPIO_Init+0x334>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c0:	4a27      	ldr	r2, [pc, #156]	@ (8001860 <HAL_GPIO_Init+0x334>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c6:	4b26      	ldr	r3, [pc, #152]	@ (8001860 <HAL_GPIO_Init+0x334>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ea:	4a1d      	ldr	r2, [pc, #116]	@ (8001860 <HAL_GPIO_Init+0x334>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f0:	4b1b      	ldr	r3, [pc, #108]	@ (8001860 <HAL_GPIO_Init+0x334>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001814:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <HAL_GPIO_Init+0x334>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3301      	adds	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	f67f ae90 	bls.w	8001548 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3724      	adds	r7, #36	@ 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	40013800 	.word	0x40013800
 8001840:	40020000 	.word	0x40020000
 8001844:	40020400 	.word	0x40020400
 8001848:	40020800 	.word	0x40020800
 800184c:	40020c00 	.word	0x40020c00
 8001850:	40021000 	.word	0x40021000
 8001854:	40021400 	.word	0x40021400
 8001858:	40021800 	.word	0x40021800
 800185c:	40021c00 	.word	0x40021c00
 8001860:	40013c00 	.word	0x40013c00

08001864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	460b      	mov	r3, r1
 800186e:	807b      	strh	r3, [r7, #2]
 8001870:	4613      	mov	r3, r2
 8001872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001874:	787b      	ldrb	r3, [r7, #1]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d003      	beq.n	8001882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187a:	887a      	ldrh	r2, [r7, #2]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001880:	e003      	b.n	800188a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001882:	887b      	ldrh	r3, [r7, #2]
 8001884:	041a      	lsls	r2, r3, #16
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	619a      	str	r2, [r3, #24]
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
	...

08001898 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e267      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d075      	beq.n	80019a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018b6:	4b88      	ldr	r3, [pc, #544]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f003 030c 	and.w	r3, r3, #12
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d00c      	beq.n	80018dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c2:	4b85      	ldr	r3, [pc, #532]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d112      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ce:	4b82      	ldr	r3, [pc, #520]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018da:	d10b      	bne.n	80018f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018dc:	4b7e      	ldr	r3, [pc, #504]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d05b      	beq.n	80019a0 <HAL_RCC_OscConfig+0x108>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d157      	bne.n	80019a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e242      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018fc:	d106      	bne.n	800190c <HAL_RCC_OscConfig+0x74>
 80018fe:	4b76      	ldr	r3, [pc, #472]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a75      	ldr	r2, [pc, #468]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001908:	6013      	str	r3, [r2, #0]
 800190a:	e01d      	b.n	8001948 <HAL_RCC_OscConfig+0xb0>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x98>
 8001916:	4b70      	ldr	r3, [pc, #448]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a6f      	ldr	r2, [pc, #444]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 800191c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b6d      	ldr	r3, [pc, #436]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a6c      	ldr	r2, [pc, #432]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e00b      	b.n	8001948 <HAL_RCC_OscConfig+0xb0>
 8001930:	4b69      	ldr	r3, [pc, #420]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a68      	ldr	r2, [pc, #416]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001936:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b66      	ldr	r3, [pc, #408]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a65      	ldr	r2, [pc, #404]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001946:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d013      	beq.n	8001978 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff fc6c 	bl	800122c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff fc68 	bl	800122c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	@ 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e207      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800196a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d0f0      	beq.n	8001958 <HAL_RCC_OscConfig+0xc0>
 8001976:	e014      	b.n	80019a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001978:	f7ff fc58 	bl	800122c <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff fc54 	bl	800122c <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	@ 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e1f3      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001992:	4b51      	ldr	r3, [pc, #324]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1f0      	bne.n	8001980 <HAL_RCC_OscConfig+0xe8>
 800199e:	e000      	b.n	80019a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d063      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019ae:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f003 030c 	and.w	r3, r3, #12
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d00b      	beq.n	80019d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ba:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80019c2:	2b08      	cmp	r3, #8
 80019c4:	d11c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019c6:	4b44      	ldr	r3, [pc, #272]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d116      	bne.n	8001a00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d005      	beq.n	80019ea <HAL_RCC_OscConfig+0x152>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d001      	beq.n	80019ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e1c7      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ea:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	691b      	ldr	r3, [r3, #16]
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4937      	ldr	r1, [pc, #220]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	e03a      	b.n	8001a76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d020      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a08:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <HAL_RCC_OscConfig+0x244>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fc0d 	bl	800122c <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a16:	f7ff fc09 	bl	800122c <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e1a8      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a34:	4b28      	ldr	r3, [pc, #160]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	691b      	ldr	r3, [r3, #16]
 8001a40:	00db      	lsls	r3, r3, #3
 8001a42:	4925      	ldr	r1, [pc, #148]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a44:	4313      	orrs	r3, r2
 8001a46:	600b      	str	r3, [r1, #0]
 8001a48:	e015      	b.n	8001a76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a4a:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <HAL_RCC_OscConfig+0x244>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a50:	f7ff fbec 	bl	800122c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a58:	f7ff fbe8 	bl	800122c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e187      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f0      	bne.n	8001a58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 0308 	and.w	r3, r3, #8
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d036      	beq.n	8001af0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	695b      	ldr	r3, [r3, #20]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d016      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8a:	4b15      	ldr	r3, [pc, #84]	@ (8001ae0 <HAL_RCC_OscConfig+0x248>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff fbcc 	bl	800122c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fbc8 	bl	800122c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e167      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aaa:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_RCC_OscConfig+0x240>)
 8001aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0f0      	beq.n	8001a98 <HAL_RCC_OscConfig+0x200>
 8001ab6:	e01b      	b.n	8001af0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab8:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_OscConfig+0x248>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001abe:	f7ff fbb5 	bl	800122c <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	e00e      	b.n	8001ae4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac6:	f7ff fbb1 	bl	800122c <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d907      	bls.n	8001ae4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e150      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	42470000 	.word	0x42470000
 8001ae0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ae4:	4b88      	ldr	r3, [pc, #544]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d1ea      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 8097 	beq.w	8001c2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afe:	2300      	movs	r3, #0
 8001b00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b02:	4b81      	ldr	r3, [pc, #516]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d10f      	bne.n	8001b2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60bb      	str	r3, [r7, #8]
 8001b12:	4b7d      	ldr	r3, [pc, #500]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	4a7c      	ldr	r2, [pc, #496]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b2e:	4b77      	ldr	r3, [pc, #476]	@ (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d118      	bne.n	8001b6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b3a:	4b74      	ldr	r3, [pc, #464]	@ (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a73      	ldr	r2, [pc, #460]	@ (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b46:	f7ff fb71 	bl	800122c <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4c:	e008      	b.n	8001b60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b4e:	f7ff fb6d 	bl	800122c <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d901      	bls.n	8001b60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b5c:	2303      	movs	r3, #3
 8001b5e:	e10c      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b60:	4b6a      	ldr	r3, [pc, #424]	@ (8001d0c <HAL_RCC_OscConfig+0x474>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d0f0      	beq.n	8001b4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d106      	bne.n	8001b82 <HAL_RCC_OscConfig+0x2ea>
 8001b74:	4b64      	ldr	r3, [pc, #400]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b78:	4a63      	ldr	r2, [pc, #396]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b80:	e01c      	b.n	8001bbc <HAL_RCC_OscConfig+0x324>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	2b05      	cmp	r3, #5
 8001b88:	d10c      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x30c>
 8001b8a:	4b5f      	ldr	r3, [pc, #380]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8e:	4a5e      	ldr	r2, [pc, #376]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b96:	4b5c      	ldr	r3, [pc, #368]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001b9c:	f043 0301 	orr.w	r3, r3, #1
 8001ba0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba2:	e00b      	b.n	8001bbc <HAL_RCC_OscConfig+0x324>
 8001ba4:	4b58      	ldr	r3, [pc, #352]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba8:	4a57      	ldr	r2, [pc, #348]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001baa:	f023 0301 	bic.w	r3, r3, #1
 8001bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb0:	4b55      	ldr	r3, [pc, #340]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001bb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb4:	4a54      	ldr	r2, [pc, #336]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001bb6:	f023 0304 	bic.w	r3, r3, #4
 8001bba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d015      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff fb32 	bl	800122c <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bca:	e00a      	b.n	8001be2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bcc:	f7ff fb2e 	bl	800122c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0cb      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be2:	4b49      	ldr	r3, [pc, #292]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d0ee      	beq.n	8001bcc <HAL_RCC_OscConfig+0x334>
 8001bee:	e014      	b.n	8001c1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fb1c 	bl	800122c <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fb18 	bl	800122c <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0b5      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1ee      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c1a:	7dfb      	ldrb	r3, [r7, #23]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d105      	bne.n	8001c2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c20:	4b39      	ldr	r3, [pc, #228]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	4a38      	ldr	r2, [pc, #224]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	699b      	ldr	r3, [r3, #24]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80a1 	beq.w	8001d78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c36:	4b34      	ldr	r3, [pc, #208]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d05c      	beq.n	8001cfc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d141      	bne.n	8001cce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b31      	ldr	r3, [pc, #196]	@ (8001d10 <HAL_RCC_OscConfig+0x478>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c50:	f7ff faec 	bl	800122c <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c58:	f7ff fae8 	bl	800122c <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e087      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c6a:	4b27      	ldr	r3, [pc, #156]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d1f0      	bne.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69da      	ldr	r2, [r3, #28]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a1b      	ldr	r3, [r3, #32]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c84:	019b      	lsls	r3, r3, #6
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8c:	085b      	lsrs	r3, r3, #1
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	041b      	lsls	r3, r3, #16
 8001c92:	431a      	orrs	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c98:	061b      	lsls	r3, r3, #24
 8001c9a:	491b      	ldr	r1, [pc, #108]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d10 <HAL_RCC_OscConfig+0x478>)
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fac1 	bl	800122c <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cae:	f7ff fabd 	bl	800122c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e05c      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc0:	4b11      	ldr	r3, [pc, #68]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0f0      	beq.n	8001cae <HAL_RCC_OscConfig+0x416>
 8001ccc:	e054      	b.n	8001d78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cce:	4b10      	ldr	r3, [pc, #64]	@ (8001d10 <HAL_RCC_OscConfig+0x478>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff faaa 	bl	800122c <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cdc:	f7ff faa6 	bl	800122c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e045      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cee:	4b06      	ldr	r3, [pc, #24]	@ (8001d08 <HAL_RCC_OscConfig+0x470>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0x444>
 8001cfa:	e03d      	b.n	8001d78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e038      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	40007000 	.word	0x40007000
 8001d10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d14:	4b1b      	ldr	r3, [pc, #108]	@ (8001d84 <HAL_RCC_OscConfig+0x4ec>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	699b      	ldr	r3, [r3, #24]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d028      	beq.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d121      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d11a      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d3e:	68fa      	ldr	r2, [r7, #12]
 8001d40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d44:	4013      	ands	r3, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d111      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5a:	085b      	lsrs	r3, r3, #1
 8001d5c:	3b01      	subs	r3, #1
 8001d5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d001      	beq.n	8001d78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e000      	b.n	8001d7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40023800 	.word	0x40023800

08001d88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b084      	sub	sp, #16
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0cc      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d9c:	4b68      	ldr	r3, [pc, #416]	@ (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d90c      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001daa:	4b65      	ldr	r3, [pc, #404]	@ (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b63      	ldr	r3, [pc, #396]	@ (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e0b8      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d020      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0304 	and.w	r3, r3, #4
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ddc:	4b59      	ldr	r3, [pc, #356]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	4a58      	ldr	r2, [pc, #352]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001de2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001de6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0308 	and.w	r3, r3, #8
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001df4:	4b53      	ldr	r3, [pc, #332]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	4a52      	ldr	r2, [pc, #328]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001dfe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e00:	4b50      	ldr	r3, [pc, #320]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	494d      	ldr	r1, [pc, #308]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d044      	beq.n	8001ea8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d107      	bne.n	8001e36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	4b47      	ldr	r3, [pc, #284]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d119      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e07f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d003      	beq.n	8001e46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e46:	4b3f      	ldr	r3, [pc, #252]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d109      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e06f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e56:	4b3b      	ldr	r3, [pc, #236]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e067      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e66:	4b37      	ldr	r3, [pc, #220]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f023 0203 	bic.w	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	4934      	ldr	r1, [pc, #208]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	4313      	orrs	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e78:	f7ff f9d8 	bl	800122c <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	e00a      	b.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e80:	f7ff f9d4 	bl	800122c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e04f      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e96:	4b2b      	ldr	r3, [pc, #172]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 020c 	and.w	r2, r3, #12
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d1eb      	bne.n	8001e80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea8:	4b25      	ldr	r3, [pc, #148]	@ (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d20c      	bcs.n	8001ed0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb6:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001eb8:	683a      	ldr	r2, [r7, #0]
 8001eba:	b2d2      	uxtb	r2, r2
 8001ebc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b20      	ldr	r3, [pc, #128]	@ (8001f40 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e032      	b.n	8001f36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0304 	and.w	r3, r3, #4
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d008      	beq.n	8001eee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001edc:	4b19      	ldr	r3, [pc, #100]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4916      	ldr	r1, [pc, #88]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d009      	beq.n	8001f0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efa:	4b12      	ldr	r3, [pc, #72]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
 8001f06:	00db      	lsls	r3, r3, #3
 8001f08:	490e      	ldr	r1, [pc, #56]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f0e:	f000 f821 	bl	8001f54 <HAL_RCC_GetSysClockFreq>
 8001f12:	4602      	mov	r2, r0
 8001f14:	4b0b      	ldr	r3, [pc, #44]	@ (8001f44 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	091b      	lsrs	r3, r3, #4
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	490a      	ldr	r1, [pc, #40]	@ (8001f48 <HAL_RCC_ClockConfig+0x1c0>)
 8001f20:	5ccb      	ldrb	r3, [r1, r3]
 8001f22:	fa22 f303 	lsr.w	r3, r2, r3
 8001f26:	4a09      	ldr	r2, [pc, #36]	@ (8001f4c <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_RCC_ClockConfig+0x1c8>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff f85e 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023c00 	.word	0x40023c00
 8001f44:	40023800 	.word	0x40023800
 8001f48:	080069d0 	.word	0x080069d0
 8001f4c:	20000010 	.word	0x20000010
 8001f50:	20000014 	.word	0x20000014

08001f54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f58:	b094      	sub	sp, #80	@ 0x50
 8001f5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f60:	2300      	movs	r3, #0
 8001f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001f64:	2300      	movs	r3, #0
 8001f66:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f6c:	4b79      	ldr	r3, [pc, #484]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b08      	cmp	r3, #8
 8001f76:	d00d      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x40>
 8001f78:	2b08      	cmp	r3, #8
 8001f7a:	f200 80e1 	bhi.w	8002140 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d002      	beq.n	8001f88 <HAL_RCC_GetSysClockFreq+0x34>
 8001f82:	2b04      	cmp	r3, #4
 8001f84:	d003      	beq.n	8001f8e <HAL_RCC_GetSysClockFreq+0x3a>
 8001f86:	e0db      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f88:	4b73      	ldr	r3, [pc, #460]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f8a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001f8c:	e0db      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f8e:	4b73      	ldr	r3, [pc, #460]	@ (800215c <HAL_RCC_GetSysClockFreq+0x208>)
 8001f90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f92:	e0d8      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f94:	4b6f      	ldr	r3, [pc, #444]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f9c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d063      	beq.n	8002072 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001faa:	4b6a      	ldr	r3, [pc, #424]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	099b      	lsrs	r3, r3, #6
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fbc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001fc6:	4622      	mov	r2, r4
 8001fc8:	462b      	mov	r3, r5
 8001fca:	f04f 0000 	mov.w	r0, #0
 8001fce:	f04f 0100 	mov.w	r1, #0
 8001fd2:	0159      	lsls	r1, r3, #5
 8001fd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd8:	0150      	lsls	r0, r2, #5
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4621      	mov	r1, r4
 8001fe0:	1a51      	subs	r1, r2, r1
 8001fe2:	6139      	str	r1, [r7, #16]
 8001fe4:	4629      	mov	r1, r5
 8001fe6:	eb63 0301 	sbc.w	r3, r3, r1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	f04f 0300 	mov.w	r3, #0
 8001ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ff8:	4659      	mov	r1, fp
 8001ffa:	018b      	lsls	r3, r1, #6
 8001ffc:	4651      	mov	r1, sl
 8001ffe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002002:	4651      	mov	r1, sl
 8002004:	018a      	lsls	r2, r1, #6
 8002006:	4651      	mov	r1, sl
 8002008:	ebb2 0801 	subs.w	r8, r2, r1
 800200c:	4659      	mov	r1, fp
 800200e:	eb63 0901 	sbc.w	r9, r3, r1
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800201e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002022:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002026:	4690      	mov	r8, r2
 8002028:	4699      	mov	r9, r3
 800202a:	4623      	mov	r3, r4
 800202c:	eb18 0303 	adds.w	r3, r8, r3
 8002030:	60bb      	str	r3, [r7, #8]
 8002032:	462b      	mov	r3, r5
 8002034:	eb49 0303 	adc.w	r3, r9, r3
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	f04f 0300 	mov.w	r3, #0
 8002042:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002046:	4629      	mov	r1, r5
 8002048:	024b      	lsls	r3, r1, #9
 800204a:	4621      	mov	r1, r4
 800204c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002050:	4621      	mov	r1, r4
 8002052:	024a      	lsls	r2, r1, #9
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800205a:	2200      	movs	r2, #0
 800205c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800205e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002060:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002064:	f7fe f8c6 	bl	80001f4 <__aeabi_uldivmod>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4613      	mov	r3, r2
 800206e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002070:	e058      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002072:	4b38      	ldr	r3, [pc, #224]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	099b      	lsrs	r3, r3, #6
 8002078:	2200      	movs	r2, #0
 800207a:	4618      	mov	r0, r3
 800207c:	4611      	mov	r1, r2
 800207e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002082:	623b      	str	r3, [r7, #32]
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
 8002088:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800208c:	4642      	mov	r2, r8
 800208e:	464b      	mov	r3, r9
 8002090:	f04f 0000 	mov.w	r0, #0
 8002094:	f04f 0100 	mov.w	r1, #0
 8002098:	0159      	lsls	r1, r3, #5
 800209a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800209e:	0150      	lsls	r0, r2, #5
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4641      	mov	r1, r8
 80020a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80020aa:	4649      	mov	r1, r9
 80020ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80020b0:	f04f 0200 	mov.w	r2, #0
 80020b4:	f04f 0300 	mov.w	r3, #0
 80020b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020c4:	ebb2 040a 	subs.w	r4, r2, sl
 80020c8:	eb63 050b 	sbc.w	r5, r3, fp
 80020cc:	f04f 0200 	mov.w	r2, #0
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	00eb      	lsls	r3, r5, #3
 80020d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020da:	00e2      	lsls	r2, r4, #3
 80020dc:	4614      	mov	r4, r2
 80020de:	461d      	mov	r5, r3
 80020e0:	4643      	mov	r3, r8
 80020e2:	18e3      	adds	r3, r4, r3
 80020e4:	603b      	str	r3, [r7, #0]
 80020e6:	464b      	mov	r3, r9
 80020e8:	eb45 0303 	adc.w	r3, r5, r3
 80020ec:	607b      	str	r3, [r7, #4]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020fa:	4629      	mov	r1, r5
 80020fc:	028b      	lsls	r3, r1, #10
 80020fe:	4621      	mov	r1, r4
 8002100:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002104:	4621      	mov	r1, r4
 8002106:	028a      	lsls	r2, r1, #10
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800210e:	2200      	movs	r2, #0
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	61fa      	str	r2, [r7, #28]
 8002114:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002118:	f7fe f86c 	bl	80001f4 <__aeabi_uldivmod>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4613      	mov	r3, r2
 8002122:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_RCC_GetSysClockFreq+0x200>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	3301      	adds	r3, #1
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8002134:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002136:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800213e:	e002      	b.n	8002146 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002140:	4b05      	ldr	r3, [pc, #20]	@ (8002158 <HAL_RCC_GetSysClockFreq+0x204>)
 8002142:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002144:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002146:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002148:	4618      	mov	r0, r3
 800214a:	3750      	adds	r7, #80	@ 0x50
 800214c:	46bd      	mov	sp, r7
 800214e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002152:	bf00      	nop
 8002154:	40023800 	.word	0x40023800
 8002158:	00f42400 	.word	0x00f42400
 800215c:	007a1200 	.word	0x007a1200

08002160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002164:	4b03      	ldr	r3, [pc, #12]	@ (8002174 <HAL_RCC_GetHCLKFreq+0x14>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000010 	.word	0x20000010

08002178 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800217c:	f7ff fff0 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 8002180:	4602      	mov	r2, r0
 8002182:	4b05      	ldr	r3, [pc, #20]	@ (8002198 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	0a9b      	lsrs	r3, r3, #10
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	4903      	ldr	r1, [pc, #12]	@ (800219c <HAL_RCC_GetPCLK1Freq+0x24>)
 800218e:	5ccb      	ldrb	r3, [r1, r3]
 8002190:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	bd80      	pop	{r7, pc}
 8002198:	40023800 	.word	0x40023800
 800219c:	080069e0 	.word	0x080069e0

080021a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80021a4:	f7ff ffdc 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 80021a8:	4602      	mov	r2, r0
 80021aa:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	0b5b      	lsrs	r3, r3, #13
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	4903      	ldr	r1, [pc, #12]	@ (80021c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b6:	5ccb      	ldrb	r3, [r1, r3]
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40023800 	.word	0x40023800
 80021c4:	080069e0 	.word	0x080069e0

080021c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	220f      	movs	r2, #15
 80021d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021d8:	4b12      	ldr	r3, [pc, #72]	@ (8002224 <HAL_RCC_GetClockConfig+0x5c>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 0203 	and.w	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002224 <HAL_RCC_GetClockConfig+0x5c>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002224 <HAL_RCC_GetClockConfig+0x5c>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021fc:	4b09      	ldr	r3, [pc, #36]	@ (8002224 <HAL_RCC_GetClockConfig+0x5c>)
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	08db      	lsrs	r3, r3, #3
 8002202:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800220a:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <HAL_RCC_GetClockConfig+0x60>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0207 	and.w	r2, r3, #7
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	601a      	str	r2, [r3, #0]
}
 8002216:	bf00      	nop
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	40023c00 	.word	0x40023c00

0800222c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e041      	b.n	80022c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002244:	b2db      	uxtb	r3, r3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d106      	bne.n	8002258 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f839 	bl	80022ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2202      	movs	r2, #2
 800225c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	4619      	mov	r1, r3
 800226a:	4610      	mov	r0, r2
 800226c:	f000 f9c0 	bl	80025f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80022ca:	b480      	push	{r7}
 80022cc:	b083      	sub	sp, #12
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80022d2:	bf00      	nop
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
	...

080022e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d001      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e04e      	b.n	8002396 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f042 0201 	orr.w	r2, r2, #1
 800230e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a23      	ldr	r2, [pc, #140]	@ (80023a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d022      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x80>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002322:	d01d      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x80>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1f      	ldr	r2, [pc, #124]	@ (80023a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d018      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x80>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1e      	ldr	r2, [pc, #120]	@ (80023ac <HAL_TIM_Base_Start_IT+0xcc>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d013      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x80>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a1c      	ldr	r2, [pc, #112]	@ (80023b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00e      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x80>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a1b      	ldr	r2, [pc, #108]	@ (80023b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d009      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x80>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a19      	ldr	r2, [pc, #100]	@ (80023b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d004      	beq.n	8002360 <HAL_TIM_Base_Start_IT+0x80>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a18      	ldr	r2, [pc, #96]	@ (80023bc <HAL_TIM_Base_Start_IT+0xdc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d111      	bne.n	8002384 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b06      	cmp	r3, #6
 8002370:	d010      	beq.n	8002394 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f042 0201 	orr.w	r2, r2, #1
 8002380:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002382:	e007      	b.n	8002394 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 0201 	orr.w	r2, r2, #1
 8002392:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40000800 	.word	0x40000800
 80023b0:	40000c00 	.word	0x40000c00
 80023b4:	40010400 	.word	0x40010400
 80023b8:	40014000 	.word	0x40014000
 80023bc:	40001800 	.word	0x40001800

080023c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d020      	beq.n	8002424 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01b      	beq.n	8002424 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f06f 0202 	mvn.w	r2, #2
 80023f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2201      	movs	r2, #1
 80023fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d003      	beq.n	8002412 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f000 f8d2 	bl	80025b4 <HAL_TIM_IC_CaptureCallback>
 8002410:	e005      	b.n	800241e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 f8c4 	bl	80025a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f000 f8d5 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d020      	beq.n	8002470 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	d01b      	beq.n	8002470 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f06f 0204 	mvn.w	r2, #4
 8002440:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2202      	movs	r2, #2
 8002446:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f8ac 	bl	80025b4 <HAL_TIM_IC_CaptureCallback>
 800245c:	e005      	b.n	800246a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 f89e 	bl	80025a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f8af 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b00      	cmp	r3, #0
 8002478:	d020      	beq.n	80024bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01b      	beq.n	80024bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f06f 0208 	mvn.w	r2, #8
 800248c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2204      	movs	r2, #4
 8002492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d003      	beq.n	80024aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 f886 	bl	80025b4 <HAL_TIM_IC_CaptureCallback>
 80024a8:	e005      	b.n	80024b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f000 f878 	bl	80025a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f000 f889 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d020      	beq.n	8002508 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d01b      	beq.n	8002508 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f06f 0210 	mvn.w	r2, #16
 80024d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2208      	movs	r2, #8
 80024de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	69db      	ldr	r3, [r3, #28]
 80024e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 f860 	bl	80025b4 <HAL_TIM_IC_CaptureCallback>
 80024f4:	e005      	b.n	8002502 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f852 	bl	80025a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f863 	bl	80025c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2200      	movs	r2, #0
 8002506:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00c      	beq.n	800252c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d007      	beq.n	800252c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0201 	mvn.w	r2, #1
 8002524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002526:	6878      	ldr	r0, [r7, #4]
 8002528:	f7fe fcd2 	bl	8000ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00c      	beq.n	8002550 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800253c:	2b00      	cmp	r3, #0
 800253e:	d007      	beq.n	8002550 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f906 	bl	800275c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00c      	beq.n	8002574 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d007      	beq.n	8002574 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800256c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f834 	bl	80025dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	f003 0320 	and.w	r3, r3, #32
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00c      	beq.n	8002598 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f003 0320 	and.w	r3, r3, #32
 8002584:	2b00      	cmp	r3, #0
 8002586:	d007      	beq.n	8002598 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0220 	mvn.w	r2, #32
 8002590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f000 f8d8 	bl	8002748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002598:	bf00      	nop
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}

080025a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025bc:	bf00      	nop
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr

080025dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	4a46      	ldr	r2, [pc, #280]	@ (800271c <TIM_Base_SetConfig+0x12c>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d013      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800260e:	d00f      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a43      	ldr	r2, [pc, #268]	@ (8002720 <TIM_Base_SetConfig+0x130>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d00b      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a42      	ldr	r2, [pc, #264]	@ (8002724 <TIM_Base_SetConfig+0x134>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d007      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a41      	ldr	r2, [pc, #260]	@ (8002728 <TIM_Base_SetConfig+0x138>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d003      	beq.n	8002630 <TIM_Base_SetConfig+0x40>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a40      	ldr	r2, [pc, #256]	@ (800272c <TIM_Base_SetConfig+0x13c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d108      	bne.n	8002642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	68fa      	ldr	r2, [r7, #12]
 800263e:	4313      	orrs	r3, r2
 8002640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a35      	ldr	r2, [pc, #212]	@ (800271c <TIM_Base_SetConfig+0x12c>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d02b      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002650:	d027      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a32      	ldr	r2, [pc, #200]	@ (8002720 <TIM_Base_SetConfig+0x130>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d023      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a31      	ldr	r2, [pc, #196]	@ (8002724 <TIM_Base_SetConfig+0x134>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d01f      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a30      	ldr	r2, [pc, #192]	@ (8002728 <TIM_Base_SetConfig+0x138>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d01b      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a2f      	ldr	r2, [pc, #188]	@ (800272c <TIM_Base_SetConfig+0x13c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d017      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a2e      	ldr	r2, [pc, #184]	@ (8002730 <TIM_Base_SetConfig+0x140>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a2d      	ldr	r2, [pc, #180]	@ (8002734 <TIM_Base_SetConfig+0x144>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d00f      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a2c      	ldr	r2, [pc, #176]	@ (8002738 <TIM_Base_SetConfig+0x148>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00b      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a2b      	ldr	r2, [pc, #172]	@ (800273c <TIM_Base_SetConfig+0x14c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a2a      	ldr	r2, [pc, #168]	@ (8002740 <TIM_Base_SetConfig+0x150>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d003      	beq.n	80026a2 <TIM_Base_SetConfig+0xb2>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a29      	ldr	r2, [pc, #164]	@ (8002744 <TIM_Base_SetConfig+0x154>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d108      	bne.n	80026b4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4313      	orrs	r3, r2
 80026b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	4313      	orrs	r3, r2
 80026c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	4a10      	ldr	r2, [pc, #64]	@ (800271c <TIM_Base_SetConfig+0x12c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d003      	beq.n	80026e8 <TIM_Base_SetConfig+0xf8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a12      	ldr	r2, [pc, #72]	@ (800272c <TIM_Base_SetConfig+0x13c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d103      	bne.n	80026f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	691a      	ldr	r2, [r3, #16]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2201      	movs	r2, #1
 80026f4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	691b      	ldr	r3, [r3, #16]
 80026fa:	f003 0301 	and.w	r3, r3, #1
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d105      	bne.n	800270e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	f023 0201 	bic.w	r2, r3, #1
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	611a      	str	r2, [r3, #16]
  }
}
 800270e:	bf00      	nop
 8002710:	3714      	adds	r7, #20
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40010000 	.word	0x40010000
 8002720:	40000400 	.word	0x40000400
 8002724:	40000800 	.word	0x40000800
 8002728:	40000c00 	.word	0x40000c00
 800272c:	40010400 	.word	0x40010400
 8002730:	40014000 	.word	0x40014000
 8002734:	40014400 	.word	0x40014400
 8002738:	40014800 	.word	0x40014800
 800273c:	40001800 	.word	0x40001800
 8002740:	40001c00 	.word	0x40001c00
 8002744:	40002000 	.word	0x40002000

08002748 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr

08002770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e042      	b.n	8002808 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fbda 	bl	8000f50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	@ 0x24
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	68da      	ldr	r2, [r3, #12]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fdbd 	bl	8003334 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	695a      	ldr	r2, [r3, #20]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68da      	ldr	r2, [r3, #12]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	4618      	mov	r0, r3
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b08a      	sub	sp, #40	@ 0x28
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800282a:	b2db      	uxtb	r3, r3
 800282c:	2b20      	cmp	r3, #32
 800282e:	d175      	bne.n	800291c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d002      	beq.n	800283c <HAL_UART_Transmit+0x2c>
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d101      	bne.n	8002840 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e06e      	b.n	800291e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2200      	movs	r2, #0
 8002844:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2221      	movs	r2, #33	@ 0x21
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800284e:	f7fe fced 	bl	800122c <HAL_GetTick>
 8002852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	88fa      	ldrh	r2, [r7, #6]
 800285e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002868:	d108      	bne.n	800287c <HAL_UART_Transmit+0x6c>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d104      	bne.n	800287c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	61bb      	str	r3, [r7, #24]
 800287a:	e003      	b.n	8002884 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002884:	e02e      	b.n	80028e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2200      	movs	r2, #0
 800288e:	2180      	movs	r1, #128	@ 0x80
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	f000 fb1f 	bl	8002ed4 <UART_WaitOnFlagUntilTimeout>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2220      	movs	r2, #32
 80028a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e03a      	b.n	800291e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10b      	bne.n	80028c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	881b      	ldrh	r3, [r3, #0]
 80028b2:	461a      	mov	r2, r3
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80028bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	3302      	adds	r3, #2
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	e007      	b.n	80028d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	781a      	ldrb	r2, [r3, #0]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	3301      	adds	r3, #1
 80028d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028da:	b29b      	uxth	r3, r3
 80028dc:	3b01      	subs	r3, #1
 80028de:	b29a      	uxth	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028e8:	b29b      	uxth	r3, r3
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1cb      	bne.n	8002886 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	9300      	str	r3, [sp, #0]
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	2140      	movs	r1, #64	@ 0x40
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f000 faeb 	bl	8002ed4 <UART_WaitOnFlagUntilTimeout>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d005      	beq.n	8002910 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2220      	movs	r2, #32
 8002908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e006      	b.n	800291e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2220      	movs	r2, #32
 8002914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002918:	2300      	movs	r3, #0
 800291a:	e000      	b.n	800291e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800291c:	2302      	movs	r3, #2
  }
}
 800291e:	4618      	mov	r0, r3
 8002920:	3720      	adds	r7, #32
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	4613      	mov	r3, r2
 8002932:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b20      	cmp	r3, #32
 800293e:	d112      	bne.n	8002966 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d002      	beq.n	800294c <HAL_UART_Receive_IT+0x26>
 8002946:	88fb      	ldrh	r3, [r7, #6]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e00b      	b.n	8002968 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2200      	movs	r2, #0
 8002954:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	461a      	mov	r2, r3
 800295a:	68b9      	ldr	r1, [r7, #8]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 fb12 	bl	8002f86 <UART_Start_Receive_IT>
 8002962:	4603      	mov	r3, r0
 8002964:	e000      	b.n	8002968 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b0ba      	sub	sp, #232	@ 0xe8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80029a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80029ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10f      	bne.n	80029d6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d009      	beq.n	80029d6 <HAL_UART_IRQHandler+0x66>
 80029c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d003      	beq.n	80029d6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fbf2 	bl	80031b8 <UART_Receive_IT>
      return;
 80029d4:	e25b      	b.n	8002e8e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80de 	beq.w	8002b9c <HAL_UART_IRQHandler+0x22c>
 80029e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d106      	bne.n	80029fa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f000 80d1 	beq.w	8002b9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <HAL_UART_IRQHandler+0xae>
 8002a06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a22:	f003 0304 	and.w	r3, r3, #4
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_UART_IRQHandler+0xd2>
 8002a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d005      	beq.n	8002a42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a3a:	f043 0202 	orr.w	r2, r3, #2
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_UART_IRQHandler+0xf6>
 8002a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a5e:	f043 0204 	orr.w	r2, r3, #4
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a6a:	f003 0308 	and.w	r3, r3, #8
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d011      	beq.n	8002a96 <HAL_UART_IRQHandler+0x126>
 8002a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a76:	f003 0320 	and.w	r3, r3, #32
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a82:	f003 0301 	and.w	r3, r3, #1
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f043 0208 	orr.w	r2, r3, #8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 81f2 	beq.w	8002e84 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002aa0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002aa4:	f003 0320 	and.w	r3, r3, #32
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d008      	beq.n	8002abe <HAL_UART_IRQHandler+0x14e>
 8002aac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ab0:	f003 0320 	and.w	r3, r3, #32
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fb7d 	bl	80031b8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695b      	ldr	r3, [r3, #20]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac8:	2b40      	cmp	r3, #64	@ 0x40
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d103      	bne.n	8002aea <HAL_UART_IRQHandler+0x17a>
 8002ae2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d04f      	beq.n	8002b8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fa85 	bl	8002ffa <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002afa:	2b40      	cmp	r3, #64	@ 0x40
 8002afc:	d141      	bne.n	8002b82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3314      	adds	r3, #20
 8002b04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3314      	adds	r3, #20
 8002b26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b3a:	e841 2300 	strex	r3, r2, [r1]
 8002b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1d9      	bne.n	8002afe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d013      	beq.n	8002b7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b56:	4a7e      	ldr	r2, [pc, #504]	@ (8002d50 <HAL_UART_IRQHandler+0x3e0>)
 8002b58:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7fe fcc2 	bl	80014e8 <HAL_DMA_Abort_IT>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d016      	beq.n	8002b98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b70:	687a      	ldr	r2, [r7, #4]
 8002b72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b74:	4610      	mov	r0, r2
 8002b76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e00e      	b.n	8002b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f994 	bl	8002ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	e00a      	b.n	8002b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f990 	bl	8002ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b88:	e006      	b.n	8002b98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f98c 	bl	8002ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002b96:	e175      	b.n	8002e84 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b98:	bf00      	nop
    return;
 8002b9a:	e173      	b.n	8002e84 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	f040 814f 	bne.w	8002e44 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002baa:	f003 0310 	and.w	r3, r3, #16
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	f000 8148 	beq.w	8002e44 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bb8:	f003 0310 	and.w	r3, r3, #16
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 8141 	beq.w	8002e44 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	60bb      	str	r3, [r7, #8]
 8002bd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002be2:	2b40      	cmp	r3, #64	@ 0x40
 8002be4:	f040 80b6 	bne.w	8002d54 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 8145 	beq.w	8002e88 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c06:	429a      	cmp	r2, r3
 8002c08:	f080 813e 	bcs.w	8002e88 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c12:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c18:	69db      	ldr	r3, [r3, #28]
 8002c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c1e:	f000 8088 	beq.w	8002d32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	330c      	adds	r3, #12
 8002c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	330c      	adds	r3, #12
 8002c4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c4e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1d9      	bne.n	8002c22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3314      	adds	r3, #20
 8002c74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3314      	adds	r3, #20
 8002c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ca4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e1      	bne.n	8002c6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3314      	adds	r3, #20
 8002cb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3314      	adds	r3, #20
 8002cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cd6:	e841 2300 	strex	r3, r2, [r1]
 8002cda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e3      	bne.n	8002caa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	330c      	adds	r3, #12
 8002cf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cfa:	e853 3f00 	ldrex	r3, [r3]
 8002cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d02:	f023 0310 	bic.w	r3, r3, #16
 8002d06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	330c      	adds	r3, #12
 8002d10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d14:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d16:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d1a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d1c:	e841 2300 	strex	r3, r2, [r1]
 8002d20:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e3      	bne.n	8002cf0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fb6b 	bl	8001408 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d40:	b29b      	uxth	r3, r3
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4619      	mov	r1, r3
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f8b7 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d4e:	e09b      	b.n	8002e88 <HAL_UART_IRQHandler+0x518>
 8002d50:	080030c1 	.word	0x080030c1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	f000 808e 	beq.w	8002e8c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8089 	beq.w	8002e8c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	330c      	adds	r3, #12
 8002d80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d84:	e853 3f00 	ldrex	r3, [r3]
 8002d88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8002da0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002da2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002da4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002da6:	e841 2300 	strex	r3, r2, [r1]
 8002daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002dac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d1e3      	bne.n	8002d7a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3314      	adds	r3, #20
 8002db8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	623b      	str	r3, [r7, #32]
   return(result);
 8002dc2:	6a3b      	ldr	r3, [r7, #32]
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3314      	adds	r3, #20
 8002dd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002dd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8002dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dde:	e841 2300 	strex	r3, r2, [r1]
 8002de2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1e3      	bne.n	8002db2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2220      	movs	r2, #32
 8002dee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	330c      	adds	r3, #12
 8002dfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	e853 3f00 	ldrex	r3, [r3]
 8002e06:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	f023 0310 	bic.w	r3, r3, #16
 8002e0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	330c      	adds	r3, #12
 8002e18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e1c:	61fa      	str	r2, [r7, #28]
 8002e1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e20:	69b9      	ldr	r1, [r7, #24]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	e841 2300 	strex	r3, r2, [r1]
 8002e28:	617b      	str	r3, [r7, #20]
   return(result);
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e3      	bne.n	8002df8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2202      	movs	r2, #2
 8002e34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f000 f83d 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e42:	e023      	b.n	8002e8c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d009      	beq.n	8002e64 <HAL_UART_IRQHandler+0x4f4>
 8002e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f943 	bl	80030e8 <UART_Transmit_IT>
    return;
 8002e62:	e014      	b.n	8002e8e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d00e      	beq.n	8002e8e <HAL_UART_IRQHandler+0x51e>
 8002e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d008      	beq.n	8002e8e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f983 	bl	8003188 <UART_EndTransmit_IT>
    return;
 8002e82:	e004      	b.n	8002e8e <HAL_UART_IRQHandler+0x51e>
    return;
 8002e84:	bf00      	nop
 8002e86:	e002      	b.n	8002e8e <HAL_UART_IRQHandler+0x51e>
      return;
 8002e88:	bf00      	nop
 8002e8a:	e000      	b.n	8002e8e <HAL_UART_IRQHandler+0x51e>
      return;
 8002e8c:	bf00      	nop
  }
}
 8002e8e:	37e8      	adds	r7, #232	@ 0xe8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ec8:	bf00      	nop
 8002eca:	370c      	adds	r7, #12
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr

08002ed4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	60b9      	str	r1, [r7, #8]
 8002ede:	603b      	str	r3, [r7, #0]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee4:	e03b      	b.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eec:	d037      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eee:	f7fe f99d 	bl	800122c <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	6a3a      	ldr	r2, [r7, #32]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d302      	bcc.n	8002f04 <UART_WaitOnFlagUntilTimeout+0x30>
 8002efe:	6a3b      	ldr	r3, [r7, #32]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e03a      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d023      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b80      	cmp	r3, #128	@ 0x80
 8002f1a:	d020      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b40      	cmp	r3, #64	@ 0x40
 8002f20:	d01d      	beq.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b08      	cmp	r3, #8
 8002f2e:	d116      	bne.n	8002f5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f30:	2300      	movs	r3, #0
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	617b      	str	r3, [r7, #20]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f857 	bl	8002ffa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2208      	movs	r2, #8
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e00f      	b.n	8002f7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4013      	ands	r3, r2
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	bf0c      	ite	eq
 8002f6e:	2301      	moveq	r3, #1
 8002f70:	2300      	movne	r3, #0
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	461a      	mov	r2, r3
 8002f76:	79fb      	ldrb	r3, [r7, #7]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d0b4      	beq.n	8002ee6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b085      	sub	sp, #20
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	4613      	mov	r3, r2
 8002f92:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	88fa      	ldrh	r2, [r7, #6]
 8002f9e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	88fa      	ldrh	r2, [r7, #6]
 8002fa4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2222      	movs	r2, #34	@ 0x22
 8002fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d007      	beq.n	8002fcc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fca:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0220 	orr.w	r2, r2, #32
 8002fea:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ffa:	b480      	push	{r7}
 8002ffc:	b095      	sub	sp, #84	@ 0x54
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	330c      	adds	r3, #12
 8003008:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800300c:	e853 3f00 	ldrex	r3, [r3]
 8003010:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003014:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003018:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003022:	643a      	str	r2, [r7, #64]	@ 0x40
 8003024:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003026:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003028:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800302a:	e841 2300 	strex	r3, r2, [r1]
 800302e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003032:	2b00      	cmp	r3, #0
 8003034:	d1e5      	bne.n	8003002 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	3314      	adds	r3, #20
 800303c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	e853 3f00 	ldrex	r3, [r3]
 8003044:	61fb      	str	r3, [r7, #28]
   return(result);
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	f023 0301 	bic.w	r3, r3, #1
 800304c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3314      	adds	r3, #20
 8003054:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003056:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003058:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800305a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800305c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1e5      	bne.n	8003036 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800306e:	2b01      	cmp	r3, #1
 8003070:	d119      	bne.n	80030a6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	330c      	adds	r3, #12
 8003078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	e853 3f00 	ldrex	r3, [r3]
 8003080:	60bb      	str	r3, [r7, #8]
   return(result);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	f023 0310 	bic.w	r3, r3, #16
 8003088:	647b      	str	r3, [r7, #68]	@ 0x44
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	330c      	adds	r3, #12
 8003090:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003092:	61ba      	str	r2, [r7, #24]
 8003094:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003096:	6979      	ldr	r1, [r7, #20]
 8003098:	69ba      	ldr	r2, [r7, #24]
 800309a:	e841 2300 	strex	r3, r2, [r1]
 800309e:	613b      	str	r3, [r7, #16]
   return(result);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1e5      	bne.n	8003072 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2220      	movs	r2, #32
 80030aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80030b4:	bf00      	nop
 80030b6:	3754      	adds	r7, #84	@ 0x54
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030da:	68f8      	ldr	r0, [r7, #12]
 80030dc:	f7ff fee4 	bl	8002ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b085      	sub	sp, #20
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b21      	cmp	r3, #33	@ 0x21
 80030fa:	d13e      	bne.n	800317a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003104:	d114      	bne.n	8003130 <UART_Transmit_IT+0x48>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d110      	bne.n	8003130 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6a1b      	ldr	r3, [r3, #32]
 8003112:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	881b      	ldrh	r3, [r3, #0]
 8003118:	461a      	mov	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003122:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a1b      	ldr	r3, [r3, #32]
 8003128:	1c9a      	adds	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	621a      	str	r2, [r3, #32]
 800312e:	e008      	b.n	8003142 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6a1b      	ldr	r3, [r3, #32]
 8003134:	1c59      	adds	r1, r3, #1
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6211      	str	r1, [r2, #32]
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29b      	uxth	r3, r3
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	4619      	mov	r1, r3
 8003150:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003152:	2b00      	cmp	r3, #0
 8003154:	d10f      	bne.n	8003176 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68da      	ldr	r2, [r3, #12]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003164:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003174:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003176:	2300      	movs	r3, #0
 8003178:	e000      	b.n	800317c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800317a:	2302      	movs	r3, #2
  }
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68da      	ldr	r2, [r3, #12]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800319e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff fe73 	bl	8002e94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3708      	adds	r7, #8
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b08c      	sub	sp, #48	@ 0x30
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b22      	cmp	r3, #34	@ 0x22
 80031ca:	f040 80ae 	bne.w	800332a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031d6:	d117      	bne.n	8003208 <UART_Receive_IT+0x50>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d113      	bne.n	8003208 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80031e0:	2300      	movs	r3, #0
 80031e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031e8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fa:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003200:	1c9a      	adds	r2, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	629a      	str	r2, [r3, #40]	@ 0x28
 8003206:	e026      	b.n	8003256 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800320e:	2300      	movs	r3, #0
 8003210:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800321a:	d007      	beq.n	800322c <UART_Receive_IT+0x74>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10a      	bne.n	800323a <UART_Receive_IT+0x82>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	691b      	ldr	r3, [r3, #16]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	b2da      	uxtb	r2, r3
 8003234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	e008      	b.n	800324c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	b2db      	uxtb	r3, r3
 8003242:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003246:	b2da      	uxtb	r2, r3
 8003248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003250:	1c5a      	adds	r2, r3, #1
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800325a:	b29b      	uxth	r3, r3
 800325c:	3b01      	subs	r3, #1
 800325e:	b29b      	uxth	r3, r3
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	4619      	mov	r1, r3
 8003264:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003266:	2b00      	cmp	r3, #0
 8003268:	d15d      	bne.n	8003326 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68da      	ldr	r2, [r3, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0220 	bic.w	r2, r2, #32
 8003278:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68da      	ldr	r2, [r3, #12]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003288:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	695a      	ldr	r2, [r3, #20]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f022 0201 	bic.w	r2, r2, #1
 8003298:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2220      	movs	r2, #32
 800329e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d135      	bne.n	800331c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	330c      	adds	r3, #12
 80032bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	613b      	str	r3, [r7, #16]
   return(result);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f023 0310 	bic.w	r3, r3, #16
 80032cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	330c      	adds	r3, #12
 80032d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d6:	623a      	str	r2, [r7, #32]
 80032d8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	69f9      	ldr	r1, [r7, #28]
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	61bb      	str	r3, [r7, #24]
   return(result);
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e5      	bne.n	80032b6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d10a      	bne.n	800330e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	60fb      	str	r3, [r7, #12]
 800330c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003312:	4619      	mov	r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fdd1 	bl	8002ebc <HAL_UARTEx_RxEventCallback>
 800331a:	e002      	b.n	8003322 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7fd fd83 	bl	8000e28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e002      	b.n	800332c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	e000      	b.n	800332c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800332a:	2302      	movs	r3, #2
  }
}
 800332c:	4618      	mov	r0, r3
 800332e:	3730      	adds	r7, #48	@ 0x30
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003338:	b0c0      	sub	sp, #256	@ 0x100
 800333a:	af00      	add	r7, sp, #0
 800333c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800334c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003350:	68d9      	ldr	r1, [r3, #12]
 8003352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	ea40 0301 	orr.w	r3, r0, r1
 800335c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800335e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	431a      	orrs	r2, r3
 800336c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	431a      	orrs	r2, r3
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800338c:	f021 010c 	bic.w	r1, r1, #12
 8003390:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800339a:	430b      	orrs	r3, r1
 800339c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80033aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ae:	6999      	ldr	r1, [r3, #24]
 80033b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	ea40 0301 	orr.w	r3, r0, r1
 80033ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	4b8f      	ldr	r3, [pc, #572]	@ (8003600 <UART_SetConfig+0x2cc>)
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d005      	beq.n	80033d4 <UART_SetConfig+0xa0>
 80033c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	4b8d      	ldr	r3, [pc, #564]	@ (8003604 <UART_SetConfig+0x2d0>)
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d104      	bne.n	80033de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80033d4:	f7fe fee4 	bl	80021a0 <HAL_RCC_GetPCLK2Freq>
 80033d8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80033dc:	e003      	b.n	80033e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033de:	f7fe fecb 	bl	8002178 <HAL_RCC_GetPCLK1Freq>
 80033e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f0:	f040 810c 	bne.w	800360c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033fe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003402:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003406:	4622      	mov	r2, r4
 8003408:	462b      	mov	r3, r5
 800340a:	1891      	adds	r1, r2, r2
 800340c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800340e:	415b      	adcs	r3, r3
 8003410:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003412:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003416:	4621      	mov	r1, r4
 8003418:	eb12 0801 	adds.w	r8, r2, r1
 800341c:	4629      	mov	r1, r5
 800341e:	eb43 0901 	adc.w	r9, r3, r1
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800342e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003432:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003436:	4690      	mov	r8, r2
 8003438:	4699      	mov	r9, r3
 800343a:	4623      	mov	r3, r4
 800343c:	eb18 0303 	adds.w	r3, r8, r3
 8003440:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003444:	462b      	mov	r3, r5
 8003446:	eb49 0303 	adc.w	r3, r9, r3
 800344a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800345a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800345e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003462:	460b      	mov	r3, r1
 8003464:	18db      	adds	r3, r3, r3
 8003466:	653b      	str	r3, [r7, #80]	@ 0x50
 8003468:	4613      	mov	r3, r2
 800346a:	eb42 0303 	adc.w	r3, r2, r3
 800346e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003470:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003474:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003478:	f7fc febc 	bl	80001f4 <__aeabi_uldivmod>
 800347c:	4602      	mov	r2, r0
 800347e:	460b      	mov	r3, r1
 8003480:	4b61      	ldr	r3, [pc, #388]	@ (8003608 <UART_SetConfig+0x2d4>)
 8003482:	fba3 2302 	umull	r2, r3, r3, r2
 8003486:	095b      	lsrs	r3, r3, #5
 8003488:	011c      	lsls	r4, r3, #4
 800348a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800348e:	2200      	movs	r2, #0
 8003490:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003494:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003498:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800349c:	4642      	mov	r2, r8
 800349e:	464b      	mov	r3, r9
 80034a0:	1891      	adds	r1, r2, r2
 80034a2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80034a4:	415b      	adcs	r3, r3
 80034a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034ac:	4641      	mov	r1, r8
 80034ae:	eb12 0a01 	adds.w	sl, r2, r1
 80034b2:	4649      	mov	r1, r9
 80034b4:	eb43 0b01 	adc.w	fp, r3, r1
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80034c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80034c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034cc:	4692      	mov	sl, r2
 80034ce:	469b      	mov	fp, r3
 80034d0:	4643      	mov	r3, r8
 80034d2:	eb1a 0303 	adds.w	r3, sl, r3
 80034d6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034da:	464b      	mov	r3, r9
 80034dc:	eb4b 0303 	adc.w	r3, fp, r3
 80034e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034f0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034f8:	460b      	mov	r3, r1
 80034fa:	18db      	adds	r3, r3, r3
 80034fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80034fe:	4613      	mov	r3, r2
 8003500:	eb42 0303 	adc.w	r3, r2, r3
 8003504:	647b      	str	r3, [r7, #68]	@ 0x44
 8003506:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800350a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800350e:	f7fc fe71 	bl	80001f4 <__aeabi_uldivmod>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4611      	mov	r1, r2
 8003518:	4b3b      	ldr	r3, [pc, #236]	@ (8003608 <UART_SetConfig+0x2d4>)
 800351a:	fba3 2301 	umull	r2, r3, r3, r1
 800351e:	095b      	lsrs	r3, r3, #5
 8003520:	2264      	movs	r2, #100	@ 0x64
 8003522:	fb02 f303 	mul.w	r3, r2, r3
 8003526:	1acb      	subs	r3, r1, r3
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800352e:	4b36      	ldr	r3, [pc, #216]	@ (8003608 <UART_SetConfig+0x2d4>)
 8003530:	fba3 2302 	umull	r2, r3, r3, r2
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800353c:	441c      	add	r4, r3
 800353e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003542:	2200      	movs	r2, #0
 8003544:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003548:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800354c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	1891      	adds	r1, r2, r2
 8003556:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003558:	415b      	adcs	r3, r3
 800355a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800355c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003560:	4641      	mov	r1, r8
 8003562:	1851      	adds	r1, r2, r1
 8003564:	6339      	str	r1, [r7, #48]	@ 0x30
 8003566:	4649      	mov	r1, r9
 8003568:	414b      	adcs	r3, r1
 800356a:	637b      	str	r3, [r7, #52]	@ 0x34
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003578:	4659      	mov	r1, fp
 800357a:	00cb      	lsls	r3, r1, #3
 800357c:	4651      	mov	r1, sl
 800357e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003582:	4651      	mov	r1, sl
 8003584:	00ca      	lsls	r2, r1, #3
 8003586:	4610      	mov	r0, r2
 8003588:	4619      	mov	r1, r3
 800358a:	4603      	mov	r3, r0
 800358c:	4642      	mov	r2, r8
 800358e:	189b      	adds	r3, r3, r2
 8003590:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003594:	464b      	mov	r3, r9
 8003596:	460a      	mov	r2, r1
 8003598:	eb42 0303 	adc.w	r3, r2, r3
 800359c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80035a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80035ac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80035b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80035b4:	460b      	mov	r3, r1
 80035b6:	18db      	adds	r3, r3, r3
 80035b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035ba:	4613      	mov	r3, r2
 80035bc:	eb42 0303 	adc.w	r3, r2, r3
 80035c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80035ca:	f7fc fe13 	bl	80001f4 <__aeabi_uldivmod>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003608 <UART_SetConfig+0x2d4>)
 80035d4:	fba3 1302 	umull	r1, r3, r3, r2
 80035d8:	095b      	lsrs	r3, r3, #5
 80035da:	2164      	movs	r1, #100	@ 0x64
 80035dc:	fb01 f303 	mul.w	r3, r1, r3
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	00db      	lsls	r3, r3, #3
 80035e4:	3332      	adds	r3, #50	@ 0x32
 80035e6:	4a08      	ldr	r2, [pc, #32]	@ (8003608 <UART_SetConfig+0x2d4>)
 80035e8:	fba2 2303 	umull	r2, r3, r2, r3
 80035ec:	095b      	lsrs	r3, r3, #5
 80035ee:	f003 0207 	and.w	r2, r3, #7
 80035f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4422      	add	r2, r4
 80035fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035fc:	e106      	b.n	800380c <UART_SetConfig+0x4d8>
 80035fe:	bf00      	nop
 8003600:	40011000 	.word	0x40011000
 8003604:	40011400 	.word	0x40011400
 8003608:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800360c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003610:	2200      	movs	r2, #0
 8003612:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003616:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800361a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800361e:	4642      	mov	r2, r8
 8003620:	464b      	mov	r3, r9
 8003622:	1891      	adds	r1, r2, r2
 8003624:	6239      	str	r1, [r7, #32]
 8003626:	415b      	adcs	r3, r3
 8003628:	627b      	str	r3, [r7, #36]	@ 0x24
 800362a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800362e:	4641      	mov	r1, r8
 8003630:	1854      	adds	r4, r2, r1
 8003632:	4649      	mov	r1, r9
 8003634:	eb43 0501 	adc.w	r5, r3, r1
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	00eb      	lsls	r3, r5, #3
 8003642:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003646:	00e2      	lsls	r2, r4, #3
 8003648:	4614      	mov	r4, r2
 800364a:	461d      	mov	r5, r3
 800364c:	4643      	mov	r3, r8
 800364e:	18e3      	adds	r3, r4, r3
 8003650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003654:	464b      	mov	r3, r9
 8003656:	eb45 0303 	adc.w	r3, r5, r3
 800365a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800366a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	f04f 0300 	mov.w	r3, #0
 8003676:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800367a:	4629      	mov	r1, r5
 800367c:	008b      	lsls	r3, r1, #2
 800367e:	4621      	mov	r1, r4
 8003680:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003684:	4621      	mov	r1, r4
 8003686:	008a      	lsls	r2, r1, #2
 8003688:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800368c:	f7fc fdb2 	bl	80001f4 <__aeabi_uldivmod>
 8003690:	4602      	mov	r2, r0
 8003692:	460b      	mov	r3, r1
 8003694:	4b60      	ldr	r3, [pc, #384]	@ (8003818 <UART_SetConfig+0x4e4>)
 8003696:	fba3 2302 	umull	r2, r3, r3, r2
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	011c      	lsls	r4, r3, #4
 800369e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80036a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80036ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80036b0:	4642      	mov	r2, r8
 80036b2:	464b      	mov	r3, r9
 80036b4:	1891      	adds	r1, r2, r2
 80036b6:	61b9      	str	r1, [r7, #24]
 80036b8:	415b      	adcs	r3, r3
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c0:	4641      	mov	r1, r8
 80036c2:	1851      	adds	r1, r2, r1
 80036c4:	6139      	str	r1, [r7, #16]
 80036c6:	4649      	mov	r1, r9
 80036c8:	414b      	adcs	r3, r1
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	f04f 0200 	mov.w	r2, #0
 80036d0:	f04f 0300 	mov.w	r3, #0
 80036d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036d8:	4659      	mov	r1, fp
 80036da:	00cb      	lsls	r3, r1, #3
 80036dc:	4651      	mov	r1, sl
 80036de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80036e2:	4651      	mov	r1, sl
 80036e4:	00ca      	lsls	r2, r1, #3
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	4603      	mov	r3, r0
 80036ec:	4642      	mov	r2, r8
 80036ee:	189b      	adds	r3, r3, r2
 80036f0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036f4:	464b      	mov	r3, r9
 80036f6:	460a      	mov	r2, r1
 80036f8:	eb42 0303 	adc.w	r3, r2, r3
 80036fc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	67bb      	str	r3, [r7, #120]	@ 0x78
 800370a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	f04f 0300 	mov.w	r3, #0
 8003714:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003718:	4649      	mov	r1, r9
 800371a:	008b      	lsls	r3, r1, #2
 800371c:	4641      	mov	r1, r8
 800371e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003722:	4641      	mov	r1, r8
 8003724:	008a      	lsls	r2, r1, #2
 8003726:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800372a:	f7fc fd63 	bl	80001f4 <__aeabi_uldivmod>
 800372e:	4602      	mov	r2, r0
 8003730:	460b      	mov	r3, r1
 8003732:	4611      	mov	r1, r2
 8003734:	4b38      	ldr	r3, [pc, #224]	@ (8003818 <UART_SetConfig+0x4e4>)
 8003736:	fba3 2301 	umull	r2, r3, r3, r1
 800373a:	095b      	lsrs	r3, r3, #5
 800373c:	2264      	movs	r2, #100	@ 0x64
 800373e:	fb02 f303 	mul.w	r3, r2, r3
 8003742:	1acb      	subs	r3, r1, r3
 8003744:	011b      	lsls	r3, r3, #4
 8003746:	3332      	adds	r3, #50	@ 0x32
 8003748:	4a33      	ldr	r2, [pc, #204]	@ (8003818 <UART_SetConfig+0x4e4>)
 800374a:	fba2 2303 	umull	r2, r3, r2, r3
 800374e:	095b      	lsrs	r3, r3, #5
 8003750:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003754:	441c      	add	r4, r3
 8003756:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800375a:	2200      	movs	r2, #0
 800375c:	673b      	str	r3, [r7, #112]	@ 0x70
 800375e:	677a      	str	r2, [r7, #116]	@ 0x74
 8003760:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003764:	4642      	mov	r2, r8
 8003766:	464b      	mov	r3, r9
 8003768:	1891      	adds	r1, r2, r2
 800376a:	60b9      	str	r1, [r7, #8]
 800376c:	415b      	adcs	r3, r3
 800376e:	60fb      	str	r3, [r7, #12]
 8003770:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003774:	4641      	mov	r1, r8
 8003776:	1851      	adds	r1, r2, r1
 8003778:	6039      	str	r1, [r7, #0]
 800377a:	4649      	mov	r1, r9
 800377c:	414b      	adcs	r3, r1
 800377e:	607b      	str	r3, [r7, #4]
 8003780:	f04f 0200 	mov.w	r2, #0
 8003784:	f04f 0300 	mov.w	r3, #0
 8003788:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800378c:	4659      	mov	r1, fp
 800378e:	00cb      	lsls	r3, r1, #3
 8003790:	4651      	mov	r1, sl
 8003792:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003796:	4651      	mov	r1, sl
 8003798:	00ca      	lsls	r2, r1, #3
 800379a:	4610      	mov	r0, r2
 800379c:	4619      	mov	r1, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	4642      	mov	r2, r8
 80037a2:	189b      	adds	r3, r3, r2
 80037a4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80037a6:	464b      	mov	r3, r9
 80037a8:	460a      	mov	r2, r1
 80037aa:	eb42 0303 	adc.w	r3, r2, r3
 80037ae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80037b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80037ba:	667a      	str	r2, [r7, #100]	@ 0x64
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80037c8:	4649      	mov	r1, r9
 80037ca:	008b      	lsls	r3, r1, #2
 80037cc:	4641      	mov	r1, r8
 80037ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80037d2:	4641      	mov	r1, r8
 80037d4:	008a      	lsls	r2, r1, #2
 80037d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80037da:	f7fc fd0b 	bl	80001f4 <__aeabi_uldivmod>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003818 <UART_SetConfig+0x4e4>)
 80037e4:	fba3 1302 	umull	r1, r3, r3, r2
 80037e8:	095b      	lsrs	r3, r3, #5
 80037ea:	2164      	movs	r1, #100	@ 0x64
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	1ad3      	subs	r3, r2, r3
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	3332      	adds	r3, #50	@ 0x32
 80037f6:	4a08      	ldr	r2, [pc, #32]	@ (8003818 <UART_SetConfig+0x4e4>)
 80037f8:	fba2 2303 	umull	r2, r3, r2, r3
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	f003 020f 	and.w	r2, r3, #15
 8003802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4422      	add	r2, r4
 800380a:	609a      	str	r2, [r3, #8]
}
 800380c:	bf00      	nop
 800380e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003812:	46bd      	mov	sp, r7
 8003814:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003818:	51eb851f 	.word	0x51eb851f

0800381c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f103 0208 	add.w	r2, r3, #8
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003834:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f103 0208 	add.w	r2, r3, #8
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f103 0208 	add.w	r2, r3, #8
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003850:	bf00      	nop
 8003852:	370c      	adds	r7, #12
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr

0800385c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800386a:	bf00      	nop
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003876:	b480      	push	{r7}
 8003878:	b085      	sub	sp, #20
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	68fa      	ldr	r2, [r7, #12]
 800388a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	1c5a      	adds	r2, r3, #1
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	601a      	str	r2, [r3, #0]
}
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr

080038be <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80038be:	b480      	push	{r7}
 80038c0:	b085      	sub	sp, #20
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
 80038c6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80038d4:	d103      	bne.n	80038de <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e00c      	b.n	80038f8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	3308      	adds	r3, #8
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	e002      	b.n	80038ec <vListInsert+0x2e>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d2f6      	bcs.n	80038e6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	683a      	ldr	r2, [r7, #0]
 8003906:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68fa      	ldr	r2, [r7, #12]
 800390c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	1c5a      	adds	r2, r3, #1
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]
}
 8003924:	bf00      	nop
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003930:	b480      	push	{r7}
 8003932:	b085      	sub	sp, #20
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6892      	ldr	r2, [r2, #8]
 8003946:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6852      	ldr	r2, [r2, #4]
 8003950:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	429a      	cmp	r2, r3
 800395a:	d103      	bne.n	8003964 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	1e5a      	subs	r2, r3, #1
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
}
 8003978:	4618      	mov	r0, r3
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10b      	bne.n	80039b0 <xQueueGenericReset+0x2c>
        __asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	60bb      	str	r3, [r7, #8]
    }
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	e7fd      	b.n	80039ac <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80039b0:	f002 fb24 	bl	8005ffc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039bc:	68f9      	ldr	r1, [r7, #12]
 80039be:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039c0:	fb01 f303 	mul.w	r3, r1, r3
 80039c4:	441a      	add	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e0:	3b01      	subs	r3, #1
 80039e2:	68f9      	ldr	r1, [r7, #12]
 80039e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80039e6:	fb01 f303 	mul.w	r3, r1, r3
 80039ea:	441a      	add	r2, r3
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	22ff      	movs	r2, #255	@ 0xff
 80039f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	22ff      	movs	r2, #255	@ 0xff
 80039fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d114      	bne.n	8003a30 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01a      	beq.n	8003a44 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3310      	adds	r3, #16
 8003a12:	4618      	mov	r0, r3
 8003a14:	f001 f93a 	bl	8004c8c <xTaskRemoveFromEventList>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d012      	beq.n	8003a44 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a54 <xQueueGenericReset+0xd0>)
 8003a20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	f3bf 8f4f 	dsb	sy
 8003a2a:	f3bf 8f6f 	isb	sy
 8003a2e:	e009      	b.n	8003a44 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3310      	adds	r3, #16
 8003a34:	4618      	mov	r0, r3
 8003a36:	f7ff fef1 	bl	800381c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3324      	adds	r3, #36	@ 0x24
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff feec 	bl	800381c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003a44:	f002 fb0c 	bl	8006060 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003a48:	2301      	movs	r3, #1
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3710      	adds	r7, #16
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	e000ed04 	.word	0xe000ed04

08003a58 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08c      	sub	sp, #48	@ 0x30
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10b      	bne.n	8003a84 <xQueueGenericCreate+0x2c>
        __asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	61bb      	str	r3, [r7, #24]
    }
 8003a7e:	bf00      	nop
 8003a80:	bf00      	nop
 8003a82:	e7fd      	b.n	8003a80 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	68ba      	ldr	r2, [r7, #8]
 8003a88:	fb02 f303 	mul.w	r3, r2, r3
 8003a8c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d006      	beq.n	8003aa2 <xQueueGenericCreate+0x4a>
 8003a94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d101      	bne.n	8003aa6 <xQueueGenericCreate+0x4e>
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e000      	b.n	8003aa8 <xQueueGenericCreate+0x50>
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d10b      	bne.n	8003ac4 <xQueueGenericCreate+0x6c>
        __asm volatile
 8003aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ab0:	f383 8811 	msr	BASEPRI, r3
 8003ab4:	f3bf 8f6f 	isb	sy
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	617b      	str	r3, [r7, #20]
    }
 8003abe:	bf00      	nop
 8003ac0:	bf00      	nop
 8003ac2:	e7fd      	b.n	8003ac0 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003aca:	d90b      	bls.n	8003ae4 <xQueueGenericCreate+0x8c>
        __asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	613b      	str	r3, [r7, #16]
    }
 8003ade:	bf00      	nop
 8003ae0:	bf00      	nop
 8003ae2:	e7fd      	b.n	8003ae0 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae6:	3350      	adds	r3, #80	@ 0x50
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f002 fbb1 	bl	8006250 <pvPortMalloc>
 8003aee:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00d      	beq.n	8003b12 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3350      	adds	r3, #80	@ 0x50
 8003afe:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003b00:	79fa      	ldrb	r2, [r7, #7]
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	4613      	mov	r3, r2
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	68b9      	ldr	r1, [r7, #8]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f000 f805 	bl	8003b1c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003b12:	6a3b      	ldr	r3, [r7, #32]
    }
 8003b14:	4618      	mov	r0, r3
 8003b16:	3728      	adds	r7, #40	@ 0x28
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}

08003b1c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	60f8      	str	r0, [r7, #12]
 8003b24:	60b9      	str	r1, [r7, #8]
 8003b26:	607a      	str	r2, [r7, #4]
 8003b28:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d103      	bne.n	8003b38 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	e002      	b.n	8003b3e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	68fa      	ldr	r2, [r7, #12]
 8003b42:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	69b8      	ldr	r0, [r7, #24]
 8003b4e:	f7ff ff19 	bl	8003984 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
	...

08003b64 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b08e      	sub	sp, #56	@ 0x38
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b72:	2300      	movs	r3, #0
 8003b74:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8003b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d10b      	bne.n	8003b98 <xQueueGenericSend+0x34>
        __asm volatile
 8003b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b84:	f383 8811 	msr	BASEPRI, r3
 8003b88:	f3bf 8f6f 	isb	sy
 8003b8c:	f3bf 8f4f 	dsb	sy
 8003b90:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003b92:	bf00      	nop
 8003b94:	bf00      	nop
 8003b96:	e7fd      	b.n	8003b94 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <xQueueGenericSend+0x42>
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <xQueueGenericSend+0x46>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <xQueueGenericSend+0x48>
 8003baa:	2300      	movs	r3, #0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10b      	bne.n	8003bc8 <xQueueGenericSend+0x64>
        __asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
 8003bc6:	e7fd      	b.n	8003bc4 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d103      	bne.n	8003bd6 <xQueueGenericSend+0x72>
 8003bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d101      	bne.n	8003bda <xQueueGenericSend+0x76>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <xQueueGenericSend+0x78>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d10b      	bne.n	8003bf8 <xQueueGenericSend+0x94>
        __asm volatile
 8003be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003be4:	f383 8811 	msr	BASEPRI, r3
 8003be8:	f3bf 8f6f 	isb	sy
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	623b      	str	r3, [r7, #32]
    }
 8003bf2:	bf00      	nop
 8003bf4:	bf00      	nop
 8003bf6:	e7fd      	b.n	8003bf4 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bf8:	f001 f9e8 	bl	8004fcc <xTaskGetSchedulerState>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d102      	bne.n	8003c08 <xQueueGenericSend+0xa4>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d101      	bne.n	8003c0c <xQueueGenericSend+0xa8>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <xQueueGenericSend+0xaa>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d10b      	bne.n	8003c2a <xQueueGenericSend+0xc6>
        __asm volatile
 8003c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c16:	f383 8811 	msr	BASEPRI, r3
 8003c1a:	f3bf 8f6f 	isb	sy
 8003c1e:	f3bf 8f4f 	dsb	sy
 8003c22:	61fb      	str	r3, [r7, #28]
    }
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop
 8003c28:	e7fd      	b.n	8003c26 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c2a:	f002 f9e7 	bl	8005ffc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d302      	bcc.n	8003c40 <xQueueGenericSend+0xdc>
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d129      	bne.n	8003c94 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	68b9      	ldr	r1, [r7, #8]
 8003c44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003c46:	f000 fad0 	bl	80041ea <prvCopyDataToQueue>
 8003c4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d010      	beq.n	8003c76 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c56:	3324      	adds	r3, #36	@ 0x24
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f001 f817 	bl	8004c8c <xTaskRemoveFromEventList>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d013      	beq.n	8003c8c <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8003c64:	4b3f      	ldr	r3, [pc, #252]	@ (8003d64 <xQueueGenericSend+0x200>)
 8003c66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	f3bf 8f6f 	isb	sy
 8003c74:	e00a      	b.n	8003c8c <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8003c76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003c7c:	4b39      	ldr	r3, [pc, #228]	@ (8003d64 <xQueueGenericSend+0x200>)
 8003c7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c82:	601a      	str	r2, [r3, #0]
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003c8c:	f002 f9e8 	bl	8006060 <vPortExitCritical>
                return pdPASS;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e063      	b.n	8003d5c <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d103      	bne.n	8003ca2 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003c9a:	f002 f9e1 	bl	8006060 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e05c      	b.n	8003d5c <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003ca2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d106      	bne.n	8003cb6 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003ca8:	f107 0314 	add.w	r3, r7, #20
 8003cac:	4618      	mov	r0, r3
 8003cae:	f001 f851 	bl	8004d54 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003cb6:	f002 f9d3 	bl	8006060 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003cba:	f000 fdc3 	bl	8004844 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003cbe:	f002 f99d 	bl	8005ffc <vPortEnterCritical>
 8003cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003cc8:	b25b      	sxtb	r3, r3
 8003cca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cce:	d103      	bne.n	8003cd8 <xQueueGenericSend+0x174>
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003cde:	b25b      	sxtb	r3, r3
 8003ce0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ce4:	d103      	bne.n	8003cee <xQueueGenericSend+0x18a>
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cee:	f002 f9b7 	bl	8006060 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cf2:	1d3a      	adds	r2, r7, #4
 8003cf4:	f107 0314 	add.w	r3, r7, #20
 8003cf8:	4611      	mov	r1, r2
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 f840 	bl	8004d80 <xTaskCheckForTimeOut>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d124      	bne.n	8003d50 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d08:	f000 fb67 	bl	80043da <prvIsQueueFull>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d018      	beq.n	8003d44 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d14:	3310      	adds	r3, #16
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	4611      	mov	r1, r2
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f000 ff64 	bl	8004be8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d22:	f000 faf2 	bl	800430a <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003d26:	f000 fd9b 	bl	8004860 <xTaskResumeAll>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f47f af7c 	bne.w	8003c2a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8003d32:	4b0c      	ldr	r3, [pc, #48]	@ (8003d64 <xQueueGenericSend+0x200>)
 8003d34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	f3bf 8f6f 	isb	sy
 8003d42:	e772      	b.n	8003c2a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003d44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d46:	f000 fae0 	bl	800430a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d4a:	f000 fd89 	bl	8004860 <xTaskResumeAll>
 8003d4e:	e76c      	b.n	8003c2a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003d50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d52:	f000 fada 	bl	800430a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d56:	f000 fd83 	bl	8004860 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003d5a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3738      	adds	r7, #56	@ 0x38
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	e000ed04 	.word	0xe000ed04

08003d68 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b090      	sub	sp, #64	@ 0x40
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	60f8      	str	r0, [r7, #12]
 8003d70:	60b9      	str	r1, [r7, #8]
 8003d72:	607a      	str	r2, [r7, #4]
 8003d74:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8003d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10b      	bne.n	8003d98 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003d92:	bf00      	nop
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <xQueueGenericSendFromISR+0x3e>
 8003d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <xQueueGenericSendFromISR+0x42>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <xQueueGenericSendFromISR+0x44>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003dc2:	bf00      	nop
 8003dc4:	bf00      	nop
 8003dc6:	e7fd      	b.n	8003dc4 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d103      	bne.n	8003dd6 <xQueueGenericSendFromISR+0x6e>
 8003dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <xQueueGenericSendFromISR+0x72>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <xQueueGenericSendFromISR+0x74>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10b      	bne.n	8003df8 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	623b      	str	r3, [r7, #32]
    }
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
 8003df6:	e7fd      	b.n	8003df4 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003df8:	f002 f9e8 	bl	80061cc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003dfc:	f3ef 8211 	mrs	r2, BASEPRI
 8003e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e04:	f383 8811 	msr	BASEPRI, r3
 8003e08:	f3bf 8f6f 	isb	sy
 8003e0c:	f3bf 8f4f 	dsb	sy
 8003e10:	61fa      	str	r2, [r7, #28]
 8003e12:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003e14:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e16:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d302      	bcc.n	8003e2a <xQueueGenericSendFromISR+0xc2>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d13f      	bne.n	8003eaa <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e38:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e3a:	683a      	ldr	r2, [r7, #0]
 8003e3c:	68b9      	ldr	r1, [r7, #8]
 8003e3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003e40:	f000 f9d3 	bl	80041ea <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003e44:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003e4c:	d112      	bne.n	8003e74 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d026      	beq.n	8003ea4 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e58:	3324      	adds	r3, #36	@ 0x24
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f000 ff16 	bl	8004c8c <xTaskRemoveFromEventList>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d01e      	beq.n	8003ea4 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01b      	beq.n	8003ea4 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e017      	b.n	8003ea4 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003e74:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003e78:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e7a:	d10b      	bne.n	8003e94 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	617b      	str	r3, [r7, #20]
    }
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	e7fd      	b.n	8003e90 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003e98:	3301      	adds	r3, #1
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	b25a      	sxtb	r2, r3
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8003ea8:	e001      	b.n	8003eae <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003eb0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003eb8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3740      	adds	r7, #64	@ 0x40
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b08c      	sub	sp, #48	@ 0x30
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10b      	bne.n	8003ef6 <xQueueReceive+0x32>
        __asm volatile
 8003ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ee2:	f383 8811 	msr	BASEPRI, r3
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	f3bf 8f4f 	dsb	sy
 8003eee:	623b      	str	r3, [r7, #32]
    }
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	e7fd      	b.n	8003ef2 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d103      	bne.n	8003f04 <xQueueReceive+0x40>
 8003efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <xQueueReceive+0x44>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <xQueueReceive+0x46>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <xQueueReceive+0x62>
        __asm volatile
 8003f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f12:	f383 8811 	msr	BASEPRI, r3
 8003f16:	f3bf 8f6f 	isb	sy
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	61fb      	str	r3, [r7, #28]
    }
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	e7fd      	b.n	8003f22 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003f26:	f001 f851 	bl	8004fcc <xTaskGetSchedulerState>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d102      	bne.n	8003f36 <xQueueReceive+0x72>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <xQueueReceive+0x76>
 8003f36:	2301      	movs	r3, #1
 8003f38:	e000      	b.n	8003f3c <xQueueReceive+0x78>
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10b      	bne.n	8003f58 <xQueueReceive+0x94>
        __asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	61bb      	str	r3, [r7, #24]
    }
 8003f52:	bf00      	nop
 8003f54:	bf00      	nop
 8003f56:	e7fd      	b.n	8003f54 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003f58:	f002 f850 	bl	8005ffc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f60:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d01f      	beq.n	8003fa8 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f68:	68b9      	ldr	r1, [r7, #8]
 8003f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003f6c:	f000 f9a7 	bl	80042be <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	1e5a      	subs	r2, r3, #1
 8003f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f76:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00f      	beq.n	8003fa0 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f82:	3310      	adds	r3, #16
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fe81 	bl	8004c8c <xTaskRemoveFromEventList>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003f90:	4b3c      	ldr	r3, [pc, #240]	@ (8004084 <xQueueReceive+0x1c0>)
 8003f92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003fa0:	f002 f85e 	bl	8006060 <vPortExitCritical>
                return pdPASS;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e069      	b.n	800407c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d103      	bne.n	8003fb6 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003fae:	f002 f857 	bl	8006060 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	e062      	b.n	800407c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d106      	bne.n	8003fca <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003fbc:	f107 0310 	add.w	r3, r7, #16
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fec7 	bl	8004d54 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003fca:	f002 f849 	bl	8006060 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003fce:	f000 fc39 	bl	8004844 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003fd2:	f002 f813 	bl	8005ffc <vPortEnterCritical>
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fdc:	b25b      	sxtb	r3, r3
 8003fde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003fe2:	d103      	bne.n	8003fec <xQueueReceive+0x128>
 8003fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ff2:	b25b      	sxtb	r3, r3
 8003ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ff8:	d103      	bne.n	8004002 <xQueueReceive+0x13e>
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004002:	f002 f82d 	bl	8006060 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004006:	1d3a      	adds	r2, r7, #4
 8004008:	f107 0310 	add.w	r3, r7, #16
 800400c:	4611      	mov	r1, r2
 800400e:	4618      	mov	r0, r3
 8004010:	f000 feb6 	bl	8004d80 <xTaskCheckForTimeOut>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d123      	bne.n	8004062 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800401a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800401c:	f000 f9c7 	bl	80043ae <prvIsQueueEmpty>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d017      	beq.n	8004056 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004028:	3324      	adds	r3, #36	@ 0x24
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4611      	mov	r1, r2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fdda 	bl	8004be8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004034:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004036:	f000 f968 	bl	800430a <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800403a:	f000 fc11 	bl	8004860 <xTaskResumeAll>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d189      	bne.n	8003f58 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8004044:	4b0f      	ldr	r3, [pc, #60]	@ (8004084 <xQueueReceive+0x1c0>)
 8004046:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	f3bf 8f4f 	dsb	sy
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	e780      	b.n	8003f58 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004056:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004058:	f000 f957 	bl	800430a <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800405c:	f000 fc00 	bl	8004860 <xTaskResumeAll>
 8004060:	e77a      	b.n	8003f58 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004062:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004064:	f000 f951 	bl	800430a <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004068:	f000 fbfa 	bl	8004860 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800406c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800406e:	f000 f99e 	bl	80043ae <prvIsQueueEmpty>
 8004072:	4603      	mov	r3, r0
 8004074:	2b00      	cmp	r3, #0
 8004076:	f43f af6f 	beq.w	8003f58 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800407a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800407c:	4618      	mov	r0, r3
 800407e:	3730      	adds	r7, #48	@ 0x30
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	e000ed04 	.word	0xe000ed04

08004088 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b090      	sub	sp, #64	@ 0x40
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8004098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10b      	bne.n	80040b6 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	e7fd      	b.n	80040b2 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <xQueueReceiveFromISR+0x3c>
 80040bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <xQueueReceiveFromISR+0x40>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <xQueueReceiveFromISR+0x42>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	e7fd      	b.n	80040e2 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80040e6:	f002 f871 	bl	80061cc <vPortValidateInterruptPriority>
        __asm volatile
 80040ea:	f3ef 8211 	mrs	r2, BASEPRI
 80040ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	623a      	str	r2, [r7, #32]
 8004100:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8004102:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004104:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800410a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410e:	2b00      	cmp	r3, #0
 8004110:	d03f      	beq.n	8004192 <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004114:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004118:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004120:	f000 f8cd 	bl	80042be <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004126:	1e5a      	subs	r2, r3, #1
 8004128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800412a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800412c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004134:	d112      	bne.n	800415c <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d026      	beq.n	800418c <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800413e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004140:	3310      	adds	r3, #16
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fda2 	bl	8004c8c <xTaskRemoveFromEventList>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d01e      	beq.n	800418c <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d01b      	beq.n	800418c <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	601a      	str	r2, [r3, #0]
 800415a:	e017      	b.n	800418c <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 800415c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004160:	2b7f      	cmp	r3, #127	@ 0x7f
 8004162:	d10b      	bne.n	800417c <xQueueReceiveFromISR+0xf4>
        __asm volatile
 8004164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004168:	f383 8811 	msr	BASEPRI, r3
 800416c:	f3bf 8f6f 	isb	sy
 8004170:	f3bf 8f4f 	dsb	sy
 8004174:	61bb      	str	r3, [r7, #24]
    }
 8004176:	bf00      	nop
 8004178:	bf00      	nop
 800417a:	e7fd      	b.n	8004178 <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800417c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004180:	3301      	adds	r3, #1
 8004182:	b2db      	uxtb	r3, r3
 8004184:	b25a      	sxtb	r2, r3
 8004186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004188:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 800418c:	2301      	movs	r3, #1
 800418e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004190:	e001      	b.n	8004196 <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 8004192:	2300      	movs	r3, #0
 8004194:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004198:	617b      	str	r3, [r7, #20]
        __asm volatile
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f383 8811 	msr	BASEPRI, r3
    }
 80041a0:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80041a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3740      	adds	r7, #64	@ 0x40
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10b      	bne.n	80041d2 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	60bb      	str	r3, [r7, #8]
    }
 80041cc:	bf00      	nop
 80041ce:	bf00      	nop
 80041d0:	e7fd      	b.n	80041ce <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80041d2:	f001 ff13 	bl	8005ffc <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041da:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80041dc:	f001 ff40 	bl	8006060 <vPortExitCritical>

    return uxReturn;
 80041e0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80041e2:	4618      	mov	r0, r3
 80041e4:	3710      	adds	r7, #16
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}

080041ea <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b086      	sub	sp, #24
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fe:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d10d      	bne.n	8004224 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d14d      	bne.n	80042ac <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fef7 	bl	8005008 <xTaskPriorityDisinherit>
 800421a:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	609a      	str	r2, [r3, #8]
 8004222:	e043      	b.n	80042ac <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d119      	bne.n	800425e <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6858      	ldr	r0, [r3, #4]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004232:	461a      	mov	r2, r3
 8004234:	68b9      	ldr	r1, [r7, #8]
 8004236:	f002 fa39 	bl	80066ac <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	441a      	add	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	d32b      	bcc.n	80042ac <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	605a      	str	r2, [r3, #4]
 800425c:	e026      	b.n	80042ac <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	68d8      	ldr	r0, [r3, #12]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004266:	461a      	mov	r2, r3
 8004268:	68b9      	ldr	r1, [r7, #8]
 800426a:	f002 fa1f 	bl	80066ac <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	68da      	ldr	r2, [r3, #12]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	425b      	negs	r3, r3
 8004278:	441a      	add	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	68da      	ldr	r2, [r3, #12]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d207      	bcs.n	800429a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689a      	ldr	r2, [r3, #8]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004292:	425b      	negs	r3, r3
 8004294:	441a      	add	r2, r3
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d105      	bne.n	80042ac <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d002      	beq.n	80042ac <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1c5a      	adds	r2, r3, #1
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80042b4:	697b      	ldr	r3, [r7, #20]
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b082      	sub	sp, #8
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d018      	beq.n	8004302 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d8:	441a      	add	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d303      	bcc.n	80042f2 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68d9      	ldr	r1, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042fa:	461a      	mov	r2, r3
 80042fc:	6838      	ldr	r0, [r7, #0]
 80042fe:	f002 f9d5 	bl	80066ac <memcpy>
    }
}
 8004302:	bf00      	nop
 8004304:	3708      	adds	r7, #8
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b084      	sub	sp, #16
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004312:	f001 fe73 	bl	8005ffc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800431c:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800431e:	e011      	b.n	8004344 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d012      	beq.n	800434e <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3324      	adds	r3, #36	@ 0x24
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fcad 	bl	8004c8c <xTaskRemoveFromEventList>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004338:	f000 fd8a 	bl	8004e50 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	3b01      	subs	r3, #1
 8004340:	b2db      	uxtb	r3, r3
 8004342:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004344:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004348:	2b00      	cmp	r3, #0
 800434a:	dce9      	bgt.n	8004320 <prvUnlockQueue+0x16>
 800434c:	e000      	b.n	8004350 <prvUnlockQueue+0x46>
                        break;
 800434e:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	22ff      	movs	r2, #255	@ 0xff
 8004354:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004358:	f001 fe82 	bl	8006060 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800435c:	f001 fe4e 	bl	8005ffc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004366:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004368:	e011      	b.n	800438e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d012      	beq.n	8004398 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	3310      	adds	r3, #16
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fc88 	bl	8004c8c <xTaskRemoveFromEventList>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004382:	f000 fd65 	bl	8004e50 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004386:	7bbb      	ldrb	r3, [r7, #14]
 8004388:	3b01      	subs	r3, #1
 800438a:	b2db      	uxtb	r3, r3
 800438c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800438e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004392:	2b00      	cmp	r3, #0
 8004394:	dce9      	bgt.n	800436a <prvUnlockQueue+0x60>
 8004396:	e000      	b.n	800439a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004398:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	22ff      	movs	r2, #255	@ 0xff
 800439e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80043a2:	f001 fe5d 	bl	8006060 <vPortExitCritical>
}
 80043a6:	bf00      	nop
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80043b6:	f001 fe21 	bl	8005ffc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80043c2:	2301      	movs	r3, #1
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	e001      	b.n	80043cc <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80043c8:	2300      	movs	r3, #0
 80043ca:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043cc:	f001 fe48 	bl	8006060 <vPortExitCritical>

    return xReturn;
 80043d0:	68fb      	ldr	r3, [r7, #12]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b084      	sub	sp, #16
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80043e2:	f001 fe0b 	bl	8005ffc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d102      	bne.n	80043f8 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80043f2:	2301      	movs	r3, #1
 80043f4:	60fb      	str	r3, [r7, #12]
 80043f6:	e001      	b.n	80043fc <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80043f8:	2300      	movs	r3, #0
 80043fa:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80043fc:	f001 fe30 	bl	8006060 <vPortExitCritical>

    return xReturn;
 8004400:	68fb      	ldr	r3, [r7, #12]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3710      	adds	r7, #16
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800440a:	b480      	push	{r7}
 800440c:	b087      	sub	sp, #28
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	60fb      	str	r3, [r7, #12]
    }
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	e7fd      	b.n	8004430 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	429a      	cmp	r2, r3
 800443e:	d102      	bne.n	8004446 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	e001      	b.n	800444a <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8004446:	2300      	movs	r3, #0
 8004448:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800444a:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800444c:	4618      	mov	r0, r3
 800444e:	371c      	adds	r7, #28
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004462:	2300      	movs	r3, #0
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	e014      	b.n	8004492 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004468:	4a0f      	ldr	r2, [pc, #60]	@ (80044a8 <vQueueAddToRegistry+0x50>)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004474:	490c      	ldr	r1, [pc, #48]	@ (80044a8 <vQueueAddToRegistry+0x50>)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800447e:	4a0a      	ldr	r2, [pc, #40]	@ (80044a8 <vQueueAddToRegistry+0x50>)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4413      	add	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800448a:	e006      	b.n	800449a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3301      	adds	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2b07      	cmp	r3, #7
 8004496:	d9e7      	bls.n	8004468 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004498:	bf00      	nop
 800449a:	bf00      	nop
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	20000100 	.word	0x20000100

080044ac <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80044bc:	f001 fd9e 	bl	8005ffc <vPortEnterCritical>
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044c6:	b25b      	sxtb	r3, r3
 80044c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044cc:	d103      	bne.n	80044d6 <vQueueWaitForMessageRestricted+0x2a>
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044dc:	b25b      	sxtb	r3, r3
 80044de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044e2:	d103      	bne.n	80044ec <vQueueWaitForMessageRestricted+0x40>
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044ec:	f001 fdb8 	bl	8006060 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d106      	bne.n	8004506 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	3324      	adds	r3, #36	@ 0x24
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	68b9      	ldr	r1, [r7, #8]
 8004500:	4618      	mov	r0, r3
 8004502:	f000 fb97 	bl	8004c34 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004506:	6978      	ldr	r0, [r7, #20]
 8004508:	f7ff feff 	bl	800430a <prvUnlockQueue>
    }
 800450c:	bf00      	nop
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004514:	b580      	push	{r7, lr}
 8004516:	b08c      	sub	sp, #48	@ 0x30
 8004518:	af04      	add	r7, sp, #16
 800451a:	60f8      	str	r0, [r7, #12]
 800451c:	60b9      	str	r1, [r7, #8]
 800451e:	603b      	str	r3, [r7, #0]
 8004520:	4613      	mov	r3, r2
 8004522:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004524:	88fb      	ldrh	r3, [r7, #6]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4618      	mov	r0, r3
 800452a:	f001 fe91 	bl	8006250 <pvPortMalloc>
 800452e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00e      	beq.n	8004554 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004536:	2058      	movs	r0, #88	@ 0x58
 8004538:	f001 fe8a 	bl	8006250 <pvPortMalloc>
 800453c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d003      	beq.n	800454c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	697a      	ldr	r2, [r7, #20]
 8004548:	631a      	str	r2, [r3, #48]	@ 0x30
 800454a:	e005      	b.n	8004558 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800454c:	6978      	ldr	r0, [r7, #20]
 800454e:	f001 ff61 	bl	8006414 <vPortFree>
 8004552:	e001      	b.n	8004558 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004554:	2300      	movs	r3, #0
 8004556:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d013      	beq.n	8004586 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800455e:	88fa      	ldrh	r2, [r7, #6]
 8004560:	2300      	movs	r3, #0
 8004562:	9303      	str	r3, [sp, #12]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	9302      	str	r3, [sp, #8]
 8004568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800456a:	9301      	str	r3, [sp, #4]
 800456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f000 f80e 	bl	8004596 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800457a:	69f8      	ldr	r0, [r7, #28]
 800457c:	f000 f8a2 	bl	80046c4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004580:	2301      	movs	r3, #1
 8004582:	61bb      	str	r3, [r7, #24]
 8004584:	e002      	b.n	800458c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004586:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800458a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800458c:	69bb      	ldr	r3, [r7, #24]
    }
 800458e:	4618      	mov	r0, r3
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b088      	sub	sp, #32
 800459a:	af00      	add	r7, sp, #0
 800459c:	60f8      	str	r0, [r7, #12]
 800459e:	60b9      	str	r1, [r7, #8]
 80045a0:	607a      	str	r2, [r7, #4]
 80045a2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80045a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	461a      	mov	r2, r3
 80045ae:	21a5      	movs	r1, #165	@ 0xa5
 80045b0:	f002 f850 	bl	8006654 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80045b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045be:	3b01      	subs	r3, #1
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	f023 0307 	bic.w	r3, r3, #7
 80045cc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f003 0307 	and.w	r3, r3, #7
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d00b      	beq.n	80045f0 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	617b      	str	r3, [r7, #20]
    }
 80045ea:	bf00      	nop
 80045ec:	bf00      	nop
 80045ee:	e7fd      	b.n	80045ec <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01f      	beq.n	8004636 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e012      	b.n	8004622 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	4413      	add	r3, r2
 8004602:	7819      	ldrb	r1, [r3, #0]
 8004604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	3334      	adds	r3, #52	@ 0x34
 800460c:	460a      	mov	r2, r1
 800460e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8004610:	68ba      	ldr	r2, [r7, #8]
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	781b      	ldrb	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d006      	beq.n	800462a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	3301      	adds	r3, #1
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	2b09      	cmp	r3, #9
 8004626:	d9e9      	bls.n	80045fc <prvInitialiseNewTask+0x66>
 8004628:	e000      	b.n	800462c <prvInitialiseNewTask+0x96>
            {
                break;
 800462a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800462c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004634:	e003      	b.n	800463e <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800463e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004640:	2b04      	cmp	r3, #4
 8004642:	d901      	bls.n	8004648 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004644:	2304      	movs	r3, #4
 8004646:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800464c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004652:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004656:	2200      	movs	r2, #0
 8004658:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800465a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465c:	3304      	adds	r3, #4
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff f8fc 	bl	800385c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004666:	3318      	adds	r3, #24
 8004668:	4618      	mov	r0, r3
 800466a:	f7ff f8f7 	bl	800385c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004672:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004676:	f1c3 0205 	rsb	r2, r3, #5
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004682:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004686:	3350      	adds	r3, #80	@ 0x50
 8004688:	2204      	movs	r2, #4
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f001 ffe1 	bl	8006654 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8004692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004694:	3354      	adds	r3, #84	@ 0x54
 8004696:	2201      	movs	r2, #1
 8004698:	2100      	movs	r1, #0
 800469a:	4618      	mov	r0, r3
 800469c:	f001 ffda 	bl	8006654 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	69b8      	ldr	r0, [r7, #24]
 80046a6:	f001 fb77 	bl	8005d98 <pxPortInitialiseStack>
 80046aa:	4602      	mov	r2, r0
 80046ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ae:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80046b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80046b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046ba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046bc:	bf00      	nop
 80046be:	3720      	adds	r7, #32
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b082      	sub	sp, #8
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80046cc:	f001 fc96 	bl	8005ffc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80046d0:	4b2c      	ldr	r3, [pc, #176]	@ (8004784 <prvAddNewTaskToReadyList+0xc0>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3301      	adds	r3, #1
 80046d6:	4a2b      	ldr	r2, [pc, #172]	@ (8004784 <prvAddNewTaskToReadyList+0xc0>)
 80046d8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80046da:	4b2b      	ldr	r3, [pc, #172]	@ (8004788 <prvAddNewTaskToReadyList+0xc4>)
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d109      	bne.n	80046f6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80046e2:	4a29      	ldr	r2, [pc, #164]	@ (8004788 <prvAddNewTaskToReadyList+0xc4>)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046e8:	4b26      	ldr	r3, [pc, #152]	@ (8004784 <prvAddNewTaskToReadyList+0xc0>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d110      	bne.n	8004712 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80046f0:	f000 fbd2 	bl	8004e98 <prvInitialiseTaskLists>
 80046f4:	e00d      	b.n	8004712 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80046f6:	4b25      	ldr	r3, [pc, #148]	@ (800478c <prvAddNewTaskToReadyList+0xc8>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d109      	bne.n	8004712 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046fe:	4b22      	ldr	r3, [pc, #136]	@ (8004788 <prvAddNewTaskToReadyList+0xc4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004708:	429a      	cmp	r2, r3
 800470a:	d802      	bhi.n	8004712 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800470c:	4a1e      	ldr	r2, [pc, #120]	@ (8004788 <prvAddNewTaskToReadyList+0xc4>)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8004712:	4b1f      	ldr	r3, [pc, #124]	@ (8004790 <prvAddNewTaskToReadyList+0xcc>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	3301      	adds	r3, #1
 8004718:	4a1d      	ldr	r2, [pc, #116]	@ (8004790 <prvAddNewTaskToReadyList+0xcc>)
 800471a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800471c:	4b1c      	ldr	r3, [pc, #112]	@ (8004790 <prvAddNewTaskToReadyList+0xcc>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004728:	2201      	movs	r2, #1
 800472a:	409a      	lsls	r2, r3
 800472c:	4b19      	ldr	r3, [pc, #100]	@ (8004794 <prvAddNewTaskToReadyList+0xd0>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4313      	orrs	r3, r2
 8004732:	4a18      	ldr	r2, [pc, #96]	@ (8004794 <prvAddNewTaskToReadyList+0xd0>)
 8004734:	6013      	str	r3, [r2, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4a15      	ldr	r2, [pc, #84]	@ (8004798 <prvAddNewTaskToReadyList+0xd4>)
 8004744:	441a      	add	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7ff f892 	bl	8003876 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8004752:	f001 fc85 	bl	8006060 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004756:	4b0d      	ldr	r3, [pc, #52]	@ (800478c <prvAddNewTaskToReadyList+0xc8>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00e      	beq.n	800477c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800475e:	4b0a      	ldr	r3, [pc, #40]	@ (8004788 <prvAddNewTaskToReadyList+0xc4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004768:	429a      	cmp	r2, r3
 800476a:	d207      	bcs.n	800477c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800476c:	4b0b      	ldr	r3, [pc, #44]	@ (800479c <prvAddNewTaskToReadyList+0xd8>)
 800476e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800477c:	bf00      	nop
 800477e:	3708      	adds	r7, #8
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}
 8004784:	20000218 	.word	0x20000218
 8004788:	20000140 	.word	0x20000140
 800478c:	20000224 	.word	0x20000224
 8004790:	20000234 	.word	0x20000234
 8004794:	20000220 	.word	0x20000220
 8004798:	20000144 	.word	0x20000144
 800479c:	e000ed04 	.word	0xe000ed04

080047a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80047a6:	4b20      	ldr	r3, [pc, #128]	@ (8004828 <vTaskStartScheduler+0x88>)
 80047a8:	9301      	str	r3, [sp, #4]
 80047aa:	2300      	movs	r3, #0
 80047ac:	9300      	str	r3, [sp, #0]
 80047ae:	2300      	movs	r3, #0
 80047b0:	2282      	movs	r2, #130	@ 0x82
 80047b2:	491e      	ldr	r1, [pc, #120]	@ (800482c <vTaskStartScheduler+0x8c>)
 80047b4:	481e      	ldr	r0, [pc, #120]	@ (8004830 <vTaskStartScheduler+0x90>)
 80047b6:	f7ff fead 	bl	8004514 <xTaskCreate>
 80047ba:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d102      	bne.n	80047c8 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80047c2:	f000 ff6d 	bl	80056a0 <xTimerCreateTimerTask>
 80047c6:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d116      	bne.n	80047fc <vTaskStartScheduler+0x5c>
        __asm volatile
 80047ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60bb      	str	r3, [r7, #8]
    }
 80047e0:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80047e2:	4b14      	ldr	r3, [pc, #80]	@ (8004834 <vTaskStartScheduler+0x94>)
 80047e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80047e8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80047ea:	4b13      	ldr	r3, [pc, #76]	@ (8004838 <vTaskStartScheduler+0x98>)
 80047ec:	2201      	movs	r2, #1
 80047ee:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047f0:	4b12      	ldr	r3, [pc, #72]	@ (800483c <vTaskStartScheduler+0x9c>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80047f6:	f001 fb5d 	bl	8005eb4 <xPortStartScheduler>
 80047fa:	e00f      	b.n	800481c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004802:	d10b      	bne.n	800481c <vTaskStartScheduler+0x7c>
        __asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	607b      	str	r3, [r7, #4]
    }
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800481c:	4b08      	ldr	r3, [pc, #32]	@ (8004840 <vTaskStartScheduler+0xa0>)
 800481e:	681b      	ldr	r3, [r3, #0]
}
 8004820:	bf00      	nop
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	2000023c 	.word	0x2000023c
 800482c:	080069b8 	.word	0x080069b8
 8004830:	08004e69 	.word	0x08004e69
 8004834:	20000238 	.word	0x20000238
 8004838:	20000224 	.word	0x20000224
 800483c:	2000021c 	.word	0x2000021c
 8004840:	2000001c 	.word	0x2000001c

08004844 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004848:	4b04      	ldr	r3, [pc, #16]	@ (800485c <vTaskSuspendAll+0x18>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	3301      	adds	r3, #1
 800484e:	4a03      	ldr	r2, [pc, #12]	@ (800485c <vTaskSuspendAll+0x18>)
 8004850:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004852:	bf00      	nop
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	20000240 	.word	0x20000240

08004860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800486a:	2300      	movs	r3, #0
 800486c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800486e:	4b42      	ldr	r3, [pc, #264]	@ (8004978 <xTaskResumeAll+0x118>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10b      	bne.n	800488e <xTaskResumeAll+0x2e>
        __asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	603b      	str	r3, [r7, #0]
    }
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	e7fd      	b.n	800488a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800488e:	f001 fbb5 	bl	8005ffc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004892:	4b39      	ldr	r3, [pc, #228]	@ (8004978 <xTaskResumeAll+0x118>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3b01      	subs	r3, #1
 8004898:	4a37      	ldr	r2, [pc, #220]	@ (8004978 <xTaskResumeAll+0x118>)
 800489a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800489c:	4b36      	ldr	r3, [pc, #216]	@ (8004978 <xTaskResumeAll+0x118>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d161      	bne.n	8004968 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048a4:	4b35      	ldr	r3, [pc, #212]	@ (800497c <xTaskResumeAll+0x11c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d05d      	beq.n	8004968 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048ac:	e02e      	b.n	800490c <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048ae:	4b34      	ldr	r3, [pc, #208]	@ (8004980 <xTaskResumeAll+0x120>)
 80048b0:	68db      	ldr	r3, [r3, #12]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	3318      	adds	r3, #24
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff f838 	bl	8003930 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3304      	adds	r3, #4
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff f833 	bl	8003930 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ce:	2201      	movs	r2, #1
 80048d0:	409a      	lsls	r2, r3
 80048d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004984 <xTaskResumeAll+0x124>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	4a2a      	ldr	r2, [pc, #168]	@ (8004984 <xTaskResumeAll+0x124>)
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048e0:	4613      	mov	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	4a27      	ldr	r2, [pc, #156]	@ (8004988 <xTaskResumeAll+0x128>)
 80048ea:	441a      	add	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3304      	adds	r3, #4
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7fe ffbf 	bl	8003876 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048fc:	4b23      	ldr	r3, [pc, #140]	@ (800498c <xTaskResumeAll+0x12c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004902:	429a      	cmp	r2, r3
 8004904:	d302      	bcc.n	800490c <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8004906:	4b22      	ldr	r3, [pc, #136]	@ (8004990 <xTaskResumeAll+0x130>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800490c:	4b1c      	ldr	r3, [pc, #112]	@ (8004980 <xTaskResumeAll+0x120>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1cc      	bne.n	80048ae <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800491a:	f000 fb3b 	bl	8004f94 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800491e:	4b1d      	ldr	r3, [pc, #116]	@ (8004994 <xTaskResumeAll+0x134>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d010      	beq.n	800494c <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800492a:	f000 f847 	bl	80049bc <xTaskIncrementTick>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d002      	beq.n	800493a <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8004934:	4b16      	ldr	r3, [pc, #88]	@ (8004990 <xTaskResumeAll+0x130>)
 8004936:	2201      	movs	r2, #1
 8004938:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	3b01      	subs	r3, #1
 800493e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f1      	bne.n	800492a <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8004946:	4b13      	ldr	r3, [pc, #76]	@ (8004994 <xTaskResumeAll+0x134>)
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800494c:	4b10      	ldr	r3, [pc, #64]	@ (8004990 <xTaskResumeAll+0x130>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d009      	beq.n	8004968 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004954:	2301      	movs	r3, #1
 8004956:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004958:	4b0f      	ldr	r3, [pc, #60]	@ (8004998 <xTaskResumeAll+0x138>)
 800495a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	f3bf 8f4f 	dsb	sy
 8004964:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004968:	f001 fb7a 	bl	8006060 <vPortExitCritical>

    return xAlreadyYielded;
 800496c:	68bb      	ldr	r3, [r7, #8]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	20000240 	.word	0x20000240
 800497c:	20000218 	.word	0x20000218
 8004980:	200001d8 	.word	0x200001d8
 8004984:	20000220 	.word	0x20000220
 8004988:	20000144 	.word	0x20000144
 800498c:	20000140 	.word	0x20000140
 8004990:	2000022c 	.word	0x2000022c
 8004994:	20000228 	.word	0x20000228
 8004998:	e000ed04 	.word	0xe000ed04

0800499c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80049a2:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <xTaskGetTickCount+0x1c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80049a8:	687b      	ldr	r3, [r7, #4]
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	2000021c 	.word	0x2000021c

080049bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004b04 <xTaskIncrementTick+0x148>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f040 808f 	bne.w	8004aee <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004b08 <xTaskIncrementTick+0x14c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	3301      	adds	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80049d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004b08 <xTaskIncrementTick+0x14c>)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d121      	bne.n	8004a28 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80049e4:	4b49      	ldr	r3, [pc, #292]	@ (8004b0c <xTaskIncrementTick+0x150>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00b      	beq.n	8004a06 <xTaskIncrementTick+0x4a>
        __asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	603b      	str	r3, [r7, #0]
    }
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	e7fd      	b.n	8004a02 <xTaskIncrementTick+0x46>
 8004a06:	4b41      	ldr	r3, [pc, #260]	@ (8004b0c <xTaskIncrementTick+0x150>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	60fb      	str	r3, [r7, #12]
 8004a0c:	4b40      	ldr	r3, [pc, #256]	@ (8004b10 <xTaskIncrementTick+0x154>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a3e      	ldr	r2, [pc, #248]	@ (8004b0c <xTaskIncrementTick+0x150>)
 8004a12:	6013      	str	r3, [r2, #0]
 8004a14:	4a3e      	ldr	r2, [pc, #248]	@ (8004b10 <xTaskIncrementTick+0x154>)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b14 <xTaskIncrementTick+0x158>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	4a3c      	ldr	r2, [pc, #240]	@ (8004b14 <xTaskIncrementTick+0x158>)
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	f000 fab6 	bl	8004f94 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004a28:	4b3b      	ldr	r3, [pc, #236]	@ (8004b18 <xTaskIncrementTick+0x15c>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d348      	bcc.n	8004ac4 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a32:	4b36      	ldr	r3, [pc, #216]	@ (8004b0c <xTaskIncrementTick+0x150>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d104      	bne.n	8004a46 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a3c:	4b36      	ldr	r3, [pc, #216]	@ (8004b18 <xTaskIncrementTick+0x15c>)
 8004a3e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a42:	601a      	str	r2, [r3, #0]
                    break;
 8004a44:	e03e      	b.n	8004ac4 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a46:	4b31      	ldr	r3, [pc, #196]	@ (8004b0c <xTaskIncrementTick+0x150>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	68db      	ldr	r3, [r3, #12]
 8004a4e:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d203      	bcs.n	8004a66 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8004b18 <xTaskIncrementTick+0x15c>)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a64:	e02e      	b.n	8004ac4 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe ff60 	bl	8003930 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d004      	beq.n	8004a82 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	3318      	adds	r3, #24
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fe ff57 	bl	8003930 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a86:	2201      	movs	r2, #1
 8004a88:	409a      	lsls	r2, r3
 8004a8a:	4b24      	ldr	r3, [pc, #144]	@ (8004b1c <xTaskIncrementTick+0x160>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	4a22      	ldr	r2, [pc, #136]	@ (8004b1c <xTaskIncrementTick+0x160>)
 8004a92:	6013      	str	r3, [r2, #0]
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	009b      	lsls	r3, r3, #2
 8004aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8004b20 <xTaskIncrementTick+0x164>)
 8004aa2:	441a      	add	r2, r3
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3304      	adds	r3, #4
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	f7fe fee3 	bl	8003876 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8004b24 <xTaskIncrementTick+0x168>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aba:	429a      	cmp	r2, r3
 8004abc:	d3b9      	bcc.n	8004a32 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8004abe:	2301      	movs	r3, #1
 8004ac0:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ac2:	e7b6      	b.n	8004a32 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004ac4:	4b17      	ldr	r3, [pc, #92]	@ (8004b24 <xTaskIncrementTick+0x168>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aca:	4915      	ldr	r1, [pc, #84]	@ (8004b20 <xTaskIncrementTick+0x164>)
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d901      	bls.n	8004ae0 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8004adc:	2301      	movs	r3, #1
 8004ade:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004ae0:	4b11      	ldr	r3, [pc, #68]	@ (8004b28 <xTaskIncrementTick+0x16c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	617b      	str	r3, [r7, #20]
 8004aec:	e004      	b.n	8004af8 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004aee:	4b0f      	ldr	r3, [pc, #60]	@ (8004b2c <xTaskIncrementTick+0x170>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	3301      	adds	r3, #1
 8004af4:	4a0d      	ldr	r2, [pc, #52]	@ (8004b2c <xTaskIncrementTick+0x170>)
 8004af6:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004af8:	697b      	ldr	r3, [r7, #20]
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3718      	adds	r7, #24
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
 8004b02:	bf00      	nop
 8004b04:	20000240 	.word	0x20000240
 8004b08:	2000021c 	.word	0x2000021c
 8004b0c:	200001d0 	.word	0x200001d0
 8004b10:	200001d4 	.word	0x200001d4
 8004b14:	20000230 	.word	0x20000230
 8004b18:	20000238 	.word	0x20000238
 8004b1c:	20000220 	.word	0x20000220
 8004b20:	20000144 	.word	0x20000144
 8004b24:	20000140 	.word	0x20000140
 8004b28:	2000022c 	.word	0x2000022c
 8004b2c:	20000228 	.word	0x20000228

08004b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b36:	4b27      	ldr	r3, [pc, #156]	@ (8004bd4 <vTaskSwitchContext+0xa4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004b3e:	4b26      	ldr	r3, [pc, #152]	@ (8004bd8 <vTaskSwitchContext+0xa8>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004b44:	e040      	b.n	8004bc8 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8004b46:	4b24      	ldr	r3, [pc, #144]	@ (8004bd8 <vTaskSwitchContext+0xa8>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b4c:	4b23      	ldr	r3, [pc, #140]	@ (8004bdc <vTaskSwitchContext+0xac>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	fab3 f383 	clz	r3, r3
 8004b58:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004b5a:	7afb      	ldrb	r3, [r7, #11]
 8004b5c:	f1c3 031f 	rsb	r3, r3, #31
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	491f      	ldr	r1, [pc, #124]	@ (8004be0 <vTaskSwitchContext+0xb0>)
 8004b64:	697a      	ldr	r2, [r7, #20]
 8004b66:	4613      	mov	r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	440b      	add	r3, r1
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10b      	bne.n	8004b8e <vTaskSwitchContext+0x5e>
        __asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b7a:	f383 8811 	msr	BASEPRI, r3
 8004b7e:	f3bf 8f6f 	isb	sy
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	607b      	str	r3, [r7, #4]
    }
 8004b88:	bf00      	nop
 8004b8a:	bf00      	nop
 8004b8c:	e7fd      	b.n	8004b8a <vTaskSwitchContext+0x5a>
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4a11      	ldr	r2, [pc, #68]	@ (8004be0 <vTaskSwitchContext+0xb0>)
 8004b9a:	4413      	add	r3, r2
 8004b9c:	613b      	str	r3, [r7, #16]
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	605a      	str	r2, [r3, #4]
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	685a      	ldr	r2, [r3, #4]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	3308      	adds	r3, #8
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d104      	bne.n	8004bbe <vTaskSwitchContext+0x8e>
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	605a      	str	r2, [r3, #4]
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	4a07      	ldr	r2, [pc, #28]	@ (8004be4 <vTaskSwitchContext+0xb4>)
 8004bc6:	6013      	str	r3, [r2, #0]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr
 8004bd4:	20000240 	.word	0x20000240
 8004bd8:	2000022c 	.word	0x2000022c
 8004bdc:	20000220 	.word	0x20000220
 8004be0:	20000144 	.word	0x20000144
 8004be4:	20000140 	.word	0x20000140

08004be8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10b      	bne.n	8004c10 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8004bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bfc:	f383 8811 	msr	BASEPRI, r3
 8004c00:	f3bf 8f6f 	isb	sy
 8004c04:	f3bf 8f4f 	dsb	sy
 8004c08:	60fb      	str	r3, [r7, #12]
    }
 8004c0a:	bf00      	nop
 8004c0c:	bf00      	nop
 8004c0e:	e7fd      	b.n	8004c0c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c10:	4b07      	ldr	r3, [pc, #28]	@ (8004c30 <vTaskPlaceOnEventList+0x48>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	3318      	adds	r3, #24
 8004c16:	4619      	mov	r1, r3
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fe fe50 	bl	80038be <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c1e:	2101      	movs	r1, #1
 8004c20:	6838      	ldr	r0, [r7, #0]
 8004c22:	f000 fcd7 	bl	80055d4 <prvAddCurrentTaskToDelayedList>
}
 8004c26:	bf00      	nop
 8004c28:	3710      	adds	r7, #16
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000140 	.word	0x20000140

08004c34 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b086      	sub	sp, #24
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	60f8      	str	r0, [r7, #12]
 8004c3c:	60b9      	str	r1, [r7, #8]
 8004c3e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d10b      	bne.n	8004c5e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8004c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4a:	f383 8811 	msr	BASEPRI, r3
 8004c4e:	f3bf 8f6f 	isb	sy
 8004c52:	f3bf 8f4f 	dsb	sy
 8004c56:	617b      	str	r3, [r7, #20]
    }
 8004c58:	bf00      	nop
 8004c5a:	bf00      	nop
 8004c5c:	e7fd      	b.n	8004c5a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004c88 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	3318      	adds	r3, #24
 8004c64:	4619      	mov	r1, r3
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f7fe fe05 	bl	8003876 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8004c72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c76:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	68b8      	ldr	r0, [r7, #8]
 8004c7c:	f000 fcaa 	bl	80055d4 <prvAddCurrentTaskToDelayedList>
    }
 8004c80:	bf00      	nop
 8004c82:	3718      	adds	r7, #24
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	20000140 	.word	0x20000140

08004c8c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b086      	sub	sp, #24
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d10b      	bne.n	8004cba <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8004ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ca6:	f383 8811 	msr	BASEPRI, r3
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	f3bf 8f4f 	dsb	sy
 8004cb2:	60fb      	str	r3, [r7, #12]
    }
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop
 8004cb8:	e7fd      	b.n	8004cb6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	3318      	adds	r3, #24
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fe fe36 	bl	8003930 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004cc4:	4b1d      	ldr	r3, [pc, #116]	@ (8004d3c <xTaskRemoveFromEventList+0xb0>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d11c      	bne.n	8004d06 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	3304      	adds	r3, #4
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe fe2d 	bl	8003930 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cda:	2201      	movs	r2, #1
 8004cdc:	409a      	lsls	r2, r3
 8004cde:	4b18      	ldr	r3, [pc, #96]	@ (8004d40 <xTaskRemoveFromEventList+0xb4>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	4a16      	ldr	r2, [pc, #88]	@ (8004d40 <xTaskRemoveFromEventList+0xb4>)
 8004ce6:	6013      	str	r3, [r2, #0]
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	4a13      	ldr	r2, [pc, #76]	@ (8004d44 <xTaskRemoveFromEventList+0xb8>)
 8004cf6:	441a      	add	r2, r3
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	3304      	adds	r3, #4
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4610      	mov	r0, r2
 8004d00:	f7fe fdb9 	bl	8003876 <vListInsertEnd>
 8004d04:	e005      	b.n	8004d12 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	3318      	adds	r3, #24
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	480e      	ldr	r0, [pc, #56]	@ (8004d48 <xTaskRemoveFromEventList+0xbc>)
 8004d0e:	f7fe fdb2 	bl	8003876 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d16:	4b0d      	ldr	r3, [pc, #52]	@ (8004d4c <xTaskRemoveFromEventList+0xc0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d905      	bls.n	8004d2c <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004d20:	2301      	movs	r3, #1
 8004d22:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004d24:	4b0a      	ldr	r3, [pc, #40]	@ (8004d50 <xTaskRemoveFromEventList+0xc4>)
 8004d26:	2201      	movs	r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e001      	b.n	8004d30 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004d30:	697b      	ldr	r3, [r7, #20]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3718      	adds	r7, #24
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	20000240 	.word	0x20000240
 8004d40:	20000220 	.word	0x20000220
 8004d44:	20000144 	.word	0x20000144
 8004d48:	200001d8 	.word	0x200001d8
 8004d4c:	20000140 	.word	0x20000140
 8004d50:	2000022c 	.word	0x2000022c

08004d54 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	@ (8004d78 <vTaskInternalSetTimeOutState+0x24>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004d64:	4b05      	ldr	r3, [pc, #20]	@ (8004d7c <vTaskInternalSetTimeOutState+0x28>)
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	605a      	str	r2, [r3, #4]
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	20000230 	.word	0x20000230
 8004d7c:	2000021c 	.word	0x2000021c

08004d80 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	613b      	str	r3, [r7, #16]
    }
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10b      	bne.n	8004dc6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	60fb      	str	r3, [r7, #12]
    }
 8004dc0:	bf00      	nop
 8004dc2:	bf00      	nop
 8004dc4:	e7fd      	b.n	8004dc2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004dc6:	f001 f919 	bl	8005ffc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004dca:	4b1f      	ldr	r3, [pc, #124]	@ (8004e48 <xTaskCheckForTimeOut+0xc8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	69ba      	ldr	r2, [r7, #24]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004de2:	d102      	bne.n	8004dea <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004de4:	2300      	movs	r3, #0
 8004de6:	61fb      	str	r3, [r7, #28]
 8004de8:	e026      	b.n	8004e38 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	4b17      	ldr	r3, [pc, #92]	@ (8004e4c <xTaskCheckForTimeOut+0xcc>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d00a      	beq.n	8004e0c <xTaskCheckForTimeOut+0x8c>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d305      	bcc.n	8004e0c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004e00:	2301      	movs	r3, #1
 8004e02:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e015      	b.n	8004e38 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d20b      	bcs.n	8004e2e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	1ad2      	subs	r2, r2, r3
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7ff ff96 	bl	8004d54 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61fb      	str	r3, [r7, #28]
 8004e2c:	e004      	b.n	8004e38 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2200      	movs	r2, #0
 8004e32:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004e34:	2301      	movs	r3, #1
 8004e36:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004e38:	f001 f912 	bl	8006060 <vPortExitCritical>

    return xReturn;
 8004e3c:	69fb      	ldr	r3, [r7, #28]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	2000021c 	.word	0x2000021c
 8004e4c:	20000230 	.word	0x20000230

08004e50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004e54:	4b03      	ldr	r3, [pc, #12]	@ (8004e64 <vTaskMissedYield+0x14>)
 8004e56:	2201      	movs	r2, #1
 8004e58:	601a      	str	r2, [r3, #0]
}
 8004e5a:	bf00      	nop
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr
 8004e64:	2000022c 	.word	0x2000022c

08004e68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004e70:	f000 f852 	bl	8004f18 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e74:	4b06      	ldr	r3, [pc, #24]	@ (8004e90 <prvIdleTask+0x28>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d9f9      	bls.n	8004e70 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004e7c:	4b05      	ldr	r3, [pc, #20]	@ (8004e94 <prvIdleTask+0x2c>)
 8004e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	f3bf 8f4f 	dsb	sy
 8004e88:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004e8c:	e7f0      	b.n	8004e70 <prvIdleTask+0x8>
 8004e8e:	bf00      	nop
 8004e90:	20000144 	.word	0x20000144
 8004e94:	e000ed04 	.word	0xe000ed04

08004e98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	607b      	str	r3, [r7, #4]
 8004ea2:	e00c      	b.n	8004ebe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	4613      	mov	r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	4413      	add	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4a12      	ldr	r2, [pc, #72]	@ (8004ef8 <prvInitialiseTaskLists+0x60>)
 8004eb0:	4413      	add	r3, r2
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f7fe fcb2 	bl	800381c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	3301      	adds	r3, #1
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2b04      	cmp	r3, #4
 8004ec2:	d9ef      	bls.n	8004ea4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004ec4:	480d      	ldr	r0, [pc, #52]	@ (8004efc <prvInitialiseTaskLists+0x64>)
 8004ec6:	f7fe fca9 	bl	800381c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004eca:	480d      	ldr	r0, [pc, #52]	@ (8004f00 <prvInitialiseTaskLists+0x68>)
 8004ecc:	f7fe fca6 	bl	800381c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004ed0:	480c      	ldr	r0, [pc, #48]	@ (8004f04 <prvInitialiseTaskLists+0x6c>)
 8004ed2:	f7fe fca3 	bl	800381c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004ed6:	480c      	ldr	r0, [pc, #48]	@ (8004f08 <prvInitialiseTaskLists+0x70>)
 8004ed8:	f7fe fca0 	bl	800381c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004edc:	480b      	ldr	r0, [pc, #44]	@ (8004f0c <prvInitialiseTaskLists+0x74>)
 8004ede:	f7fe fc9d 	bl	800381c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8004f10 <prvInitialiseTaskLists+0x78>)
 8004ee4:	4a05      	ldr	r2, [pc, #20]	@ (8004efc <prvInitialiseTaskLists+0x64>)
 8004ee6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ee8:	4b0a      	ldr	r3, [pc, #40]	@ (8004f14 <prvInitialiseTaskLists+0x7c>)
 8004eea:	4a05      	ldr	r2, [pc, #20]	@ (8004f00 <prvInitialiseTaskLists+0x68>)
 8004eec:	601a      	str	r2, [r3, #0]
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000144 	.word	0x20000144
 8004efc:	200001a8 	.word	0x200001a8
 8004f00:	200001bc 	.word	0x200001bc
 8004f04:	200001d8 	.word	0x200001d8
 8004f08:	200001ec 	.word	0x200001ec
 8004f0c:	20000204 	.word	0x20000204
 8004f10:	200001d0 	.word	0x200001d0
 8004f14:	200001d4 	.word	0x200001d4

08004f18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f1e:	e019      	b.n	8004f54 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004f20:	f001 f86c 	bl	8005ffc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f24:	4b10      	ldr	r3, [pc, #64]	@ (8004f68 <prvCheckTasksWaitingTermination+0x50>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3304      	adds	r3, #4
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fe fcfd 	bl	8003930 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004f36:	4b0d      	ldr	r3, [pc, #52]	@ (8004f6c <prvCheckTasksWaitingTermination+0x54>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8004f6c <prvCheckTasksWaitingTermination+0x54>)
 8004f3e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004f40:	4b0b      	ldr	r3, [pc, #44]	@ (8004f70 <prvCheckTasksWaitingTermination+0x58>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3b01      	subs	r3, #1
 8004f46:	4a0a      	ldr	r2, [pc, #40]	@ (8004f70 <prvCheckTasksWaitingTermination+0x58>)
 8004f48:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004f4a:	f001 f889 	bl	8006060 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 f810 	bl	8004f74 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f54:	4b06      	ldr	r3, [pc, #24]	@ (8004f70 <prvCheckTasksWaitingTermination+0x58>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1e1      	bne.n	8004f20 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	200001ec 	.word	0x200001ec
 8004f6c:	20000218 	.word	0x20000218
 8004f70:	20000200 	.word	0x20000200

08004f74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f80:	4618      	mov	r0, r3
 8004f82:	f001 fa47 	bl	8006414 <vPortFree>
                vPortFree( pxTCB );
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f001 fa44 	bl	8006414 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f98:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc4 <prvResetNextTaskUnblockTime+0x30>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d104      	bne.n	8004fac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004fa2:	4b09      	ldr	r3, [pc, #36]	@ (8004fc8 <prvResetNextTaskUnblockTime+0x34>)
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004fa8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004faa:	e005      	b.n	8004fb8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004fac:	4b05      	ldr	r3, [pc, #20]	@ (8004fc4 <prvResetNextTaskUnblockTime+0x30>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a04      	ldr	r2, [pc, #16]	@ (8004fc8 <prvResetNextTaskUnblockTime+0x34>)
 8004fb6:	6013      	str	r3, [r2, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	200001d0 	.word	0x200001d0
 8004fc8:	20000238 	.word	0x20000238

08004fcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004fcc:	b480      	push	{r7}
 8004fce:	b083      	sub	sp, #12
 8004fd0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8005000 <xTaskGetSchedulerState+0x34>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	607b      	str	r3, [r7, #4]
 8004fde:	e008      	b.n	8004ff2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fe0:	4b08      	ldr	r3, [pc, #32]	@ (8005004 <xTaskGetSchedulerState+0x38>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d102      	bne.n	8004fee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	607b      	str	r3, [r7, #4]
 8004fec:	e001      	b.n	8004ff2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004ff2:	687b      	ldr	r3, [r7, #4]
    }
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	370c      	adds	r7, #12
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffe:	4770      	bx	lr
 8005000:	20000224 	.word	0x20000224
 8005004:	20000240 	.word	0x20000240

08005008 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005014:	2300      	movs	r3, #0
 8005016:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d065      	beq.n	80050ea <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800501e:	4b35      	ldr	r3, [pc, #212]	@ (80050f4 <xTaskPriorityDisinherit+0xec>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	429a      	cmp	r2, r3
 8005026:	d00b      	beq.n	8005040 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	60fb      	str	r3, [r7, #12]
    }
 800503a:	bf00      	nop
 800503c:	bf00      	nop
 800503e:	e7fd      	b.n	800503c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005044:	2b00      	cmp	r3, #0
 8005046:	d10b      	bne.n	8005060 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	60bb      	str	r3, [r7, #8]
    }
 800505a:	bf00      	nop
 800505c:	bf00      	nop
 800505e:	e7fd      	b.n	800505c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005064:	1e5a      	subs	r2, r3, #1
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005072:	429a      	cmp	r2, r3
 8005074:	d039      	beq.n	80050ea <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d135      	bne.n	80050ea <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	3304      	adds	r3, #4
 8005082:	4618      	mov	r0, r3
 8005084:	f7fe fc54 	bl	8003930 <uxListRemove>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d10a      	bne.n	80050a4 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005092:	2201      	movs	r2, #1
 8005094:	fa02 f303 	lsl.w	r3, r2, r3
 8005098:	43da      	mvns	r2, r3
 800509a:	4b17      	ldr	r3, [pc, #92]	@ (80050f8 <xTaskPriorityDisinherit+0xf0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4013      	ands	r3, r2
 80050a0:	4a15      	ldr	r2, [pc, #84]	@ (80050f8 <xTaskPriorityDisinherit+0xf0>)
 80050a2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050b0:	f1c3 0205 	rsb	r2, r3, #5
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050bc:	2201      	movs	r2, #1
 80050be:	409a      	lsls	r2, r3
 80050c0:	4b0d      	ldr	r3, [pc, #52]	@ (80050f8 <xTaskPriorityDisinherit+0xf0>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	4a0c      	ldr	r2, [pc, #48]	@ (80050f8 <xTaskPriorityDisinherit+0xf0>)
 80050c8:	6013      	str	r3, [r2, #0]
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050ce:	4613      	mov	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4413      	add	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4a09      	ldr	r2, [pc, #36]	@ (80050fc <xTaskPriorityDisinherit+0xf4>)
 80050d8:	441a      	add	r2, r3
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	3304      	adds	r3, #4
 80050de:	4619      	mov	r1, r3
 80050e0:	4610      	mov	r0, r2
 80050e2:	f7fe fbc8 	bl	8003876 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80050e6:	2301      	movs	r3, #1
 80050e8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80050ea:	697b      	ldr	r3, [r7, #20]
    }
 80050ec:	4618      	mov	r0, r3
 80050ee:	3718      	adds	r7, #24
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	20000140 	.word	0x20000140
 80050f8:	20000220 	.word	0x20000220
 80050fc:	20000144 	.word	0x20000144

08005100 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
 800510c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00b      	beq.n	800512c <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8005114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005118:	f383 8811 	msr	BASEPRI, r3
 800511c:	f3bf 8f6f 	isb	sy
 8005120:	f3bf 8f4f 	dsb	sy
 8005124:	613b      	str	r3, [r7, #16]
    }
 8005126:	bf00      	nop
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800512c:	f000 ff66 	bl	8005ffc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005130:	4b31      	ldr	r3, [pc, #196]	@ (80051f8 <xTaskGenericNotifyWait+0xf8>)
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	3354      	adds	r3, #84	@ 0x54
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b02      	cmp	r3, #2
 8005140:	d022      	beq.n	8005188 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005142:	4b2d      	ldr	r3, [pc, #180]	@ (80051f8 <xTaskGenericNotifyWait+0xf8>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	3214      	adds	r2, #20
 800514a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800514e:	68ba      	ldr	r2, [r7, #8]
 8005150:	43d2      	mvns	r2, r2
 8005152:	4011      	ands	r1, r2
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	3214      	adds	r2, #20
 8005158:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800515c:	4b26      	ldr	r3, [pc, #152]	@ (80051f8 <xTaskGenericNotifyWait+0xf8>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	4413      	add	r3, r2
 8005164:	3354      	adds	r3, #84	@ 0x54
 8005166:	2201      	movs	r2, #1
 8005168:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00b      	beq.n	8005188 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005170:	2101      	movs	r1, #1
 8005172:	6a38      	ldr	r0, [r7, #32]
 8005174:	f000 fa2e 	bl	80055d4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005178:	4b20      	ldr	r3, [pc, #128]	@ (80051fc <xTaskGenericNotifyWait+0xfc>)
 800517a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	f3bf 8f4f 	dsb	sy
 8005184:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005188:	f000 ff6a 	bl	8006060 <vPortExitCritical>

        taskENTER_CRITICAL();
 800518c:	f000 ff36 	bl	8005ffc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d007      	beq.n	80051a6 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005196:	4b18      	ldr	r3, [pc, #96]	@ (80051f8 <xTaskGenericNotifyWait+0xf8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	3214      	adds	r2, #20
 800519e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80051a6:	4b14      	ldr	r3, [pc, #80]	@ (80051f8 <xTaskGenericNotifyWait+0xf8>)
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4413      	add	r3, r2
 80051ae:	3354      	adds	r3, #84	@ 0x54
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	b2db      	uxtb	r3, r3
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d002      	beq.n	80051be <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80051b8:	2300      	movs	r3, #0
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e00e      	b.n	80051dc <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80051be:	4b0e      	ldr	r3, [pc, #56]	@ (80051f8 <xTaskGenericNotifyWait+0xf8>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	3214      	adds	r2, #20
 80051c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	43d2      	mvns	r2, r2
 80051ce:	4011      	ands	r1, r2
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	3214      	adds	r2, #20
 80051d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80051d8:	2301      	movs	r3, #1
 80051da:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80051dc:	4b06      	ldr	r3, [pc, #24]	@ (80051f8 <xTaskGenericNotifyWait+0xf8>)
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4413      	add	r3, r2
 80051e4:	3354      	adds	r3, #84	@ 0x54
 80051e6:	2200      	movs	r2, #0
 80051e8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80051ea:	f000 ff39 	bl	8006060 <vPortExitCritical>

        return xReturn;
 80051ee:	697b      	ldr	r3, [r7, #20]
    }
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	20000140 	.word	0x20000140
 80051fc:	e000ed04 	.word	0xe000ed04

08005200 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005200:	b580      	push	{r7, lr}
 8005202:	b08c      	sub	sp, #48	@ 0x30
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	607a      	str	r2, [r7, #4]
 800520c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800520e:	2301      	movs	r3, #1
 8005210:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d00b      	beq.n	8005230 <xTaskGenericNotify+0x30>
        __asm volatile
 8005218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800521c:	f383 8811 	msr	BASEPRI, r3
 8005220:	f3bf 8f6f 	isb	sy
 8005224:	f3bf 8f4f 	dsb	sy
 8005228:	623b      	str	r3, [r7, #32]
    }
 800522a:	bf00      	nop
 800522c:	bf00      	nop
 800522e:	e7fd      	b.n	800522c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d10b      	bne.n	800524e <xTaskGenericNotify+0x4e>
        __asm volatile
 8005236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800523a:	f383 8811 	msr	BASEPRI, r3
 800523e:	f3bf 8f6f 	isb	sy
 8005242:	f3bf 8f4f 	dsb	sy
 8005246:	61fb      	str	r3, [r7, #28]
    }
 8005248:	bf00      	nop
 800524a:	bf00      	nop
 800524c:	e7fd      	b.n	800524a <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 8005252:	f000 fed3 	bl	8005ffc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005256:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005258:	2b00      	cmp	r3, #0
 800525a:	d006      	beq.n	800526a <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	3214      	adds	r2, #20
 8005262:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005268:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800526a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	4413      	add	r3, r2
 8005270:	3354      	adds	r3, #84	@ 0x54
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005278:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	3354      	adds	r3, #84	@ 0x54
 8005280:	2202      	movs	r2, #2
 8005282:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005284:	78fb      	ldrb	r3, [r7, #3]
 8005286:	2b04      	cmp	r3, #4
 8005288:	d83b      	bhi.n	8005302 <xTaskGenericNotify+0x102>
 800528a:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <xTaskGenericNotify+0x90>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	08005323 	.word	0x08005323
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052c1 	.word	0x080052c1
 800529c:	080052d9 	.word	0x080052d9
 80052a0:	080052e7 	.word	0x080052e7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80052a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a6:	68ba      	ldr	r2, [r7, #8]
 80052a8:	3214      	adds	r2, #20
 80052aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	ea42 0103 	orr.w	r1, r2, r3
 80052b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b6:	68ba      	ldr	r2, [r7, #8]
 80052b8:	3214      	adds	r2, #20
 80052ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80052be:	e033      	b.n	8005328 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80052c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	3214      	adds	r2, #20
 80052c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052ca:	1c59      	adds	r1, r3, #1
 80052cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	3214      	adds	r2, #20
 80052d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80052d6:	e027      	b.n	8005328 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	68ba      	ldr	r2, [r7, #8]
 80052dc:	3214      	adds	r2, #20
 80052de:	6879      	ldr	r1, [r7, #4]
 80052e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80052e4:	e020      	b.n	8005328 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80052e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d006      	beq.n	80052fc <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80052ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f0:	68ba      	ldr	r2, [r7, #8]
 80052f2:	3214      	adds	r2, #20
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80052fa:	e015      	b.n	8005328 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 80052fc:	2300      	movs	r3, #0
 80052fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8005300:	e012      	b.n	8005328 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005302:	4b2c      	ldr	r3, [pc, #176]	@ (80053b4 <xTaskGenericNotify+0x1b4>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00d      	beq.n	8005326 <xTaskGenericNotify+0x126>
        __asm volatile
 800530a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800530e:	f383 8811 	msr	BASEPRI, r3
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	f3bf 8f4f 	dsb	sy
 800531a:	61bb      	str	r3, [r7, #24]
    }
 800531c:	bf00      	nop
 800531e:	bf00      	nop
 8005320:	e7fd      	b.n	800531e <xTaskGenericNotify+0x11e>
                    break;
 8005322:	bf00      	nop
 8005324:	e000      	b.n	8005328 <xTaskGenericNotify+0x128>

                    break;
 8005326:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005328:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800532c:	2b01      	cmp	r3, #1
 800532e:	d13a      	bne.n	80053a6 <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005332:	3304      	adds	r3, #4
 8005334:	4618      	mov	r0, r3
 8005336:	f7fe fafb 	bl	8003930 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800533a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800533e:	2201      	movs	r2, #1
 8005340:	409a      	lsls	r2, r3
 8005342:	4b1d      	ldr	r3, [pc, #116]	@ (80053b8 <xTaskGenericNotify+0x1b8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4313      	orrs	r3, r2
 8005348:	4a1b      	ldr	r2, [pc, #108]	@ (80053b8 <xTaskGenericNotify+0x1b8>)
 800534a:	6013      	str	r3, [r2, #0]
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005350:	4613      	mov	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	4a18      	ldr	r2, [pc, #96]	@ (80053bc <xTaskGenericNotify+0x1bc>)
 800535a:	441a      	add	r2, r3
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	3304      	adds	r3, #4
 8005360:	4619      	mov	r1, r3
 8005362:	4610      	mov	r0, r2
 8005364:	f7fe fa87 	bl	8003876 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00b      	beq.n	8005388 <xTaskGenericNotify+0x188>
        __asm volatile
 8005370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005374:	f383 8811 	msr	BASEPRI, r3
 8005378:	f3bf 8f6f 	isb	sy
 800537c:	f3bf 8f4f 	dsb	sy
 8005380:	617b      	str	r3, [r7, #20]
    }
 8005382:	bf00      	nop
 8005384:	bf00      	nop
 8005386:	e7fd      	b.n	8005384 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800538a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538c:	4b0c      	ldr	r3, [pc, #48]	@ (80053c0 <xTaskGenericNotify+0x1c0>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005392:	429a      	cmp	r2, r3
 8005394:	d907      	bls.n	80053a6 <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8005396:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <xTaskGenericNotify+0x1c4>)
 8005398:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800539c:	601a      	str	r2, [r3, #0]
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80053a6:	f000 fe5b 	bl	8006060 <vPortExitCritical>

        return xReturn;
 80053aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80053ac:	4618      	mov	r0, r3
 80053ae:	3730      	adds	r7, #48	@ 0x30
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}
 80053b4:	2000021c 	.word	0x2000021c
 80053b8:	20000220 	.word	0x20000220
 80053bc:	20000144 	.word	0x20000144
 80053c0:	20000140 	.word	0x20000140
 80053c4:	e000ed04 	.word	0xe000ed04

080053c8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b090      	sub	sp, #64	@ 0x40
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	60f8      	str	r0, [r7, #12]
 80053d0:	60b9      	str	r1, [r7, #8]
 80053d2:	607a      	str	r2, [r7, #4]
 80053d4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80053d6:	2301      	movs	r3, #1
 80053d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10b      	bne.n	80053f8 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 80053f2:	bf00      	nop
 80053f4:	bf00      	nop
 80053f6:	e7fd      	b.n	80053f4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005416:	f000 fed9 	bl	80061cc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 800541e:	f3ef 8211 	mrs	r2, BASEPRI
 8005422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	627a      	str	r2, [r7, #36]	@ 0x24
 8005434:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8005436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005438:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800543a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800543c:	2b00      	cmp	r3, #0
 800543e:	d006      	beq.n	800544e <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005442:	68ba      	ldr	r2, [r7, #8]
 8005444:	3214      	adds	r2, #20
 8005446:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800544a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800544c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800544e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4413      	add	r3, r2
 8005454:	3354      	adds	r3, #84	@ 0x54
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800545c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	4413      	add	r3, r2
 8005462:	3354      	adds	r3, #84	@ 0x54
 8005464:	2202      	movs	r2, #2
 8005466:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005468:	78fb      	ldrb	r3, [r7, #3]
 800546a:	2b04      	cmp	r3, #4
 800546c:	d83b      	bhi.n	80054e6 <xTaskGenericNotifyFromISR+0x11e>
 800546e:	a201      	add	r2, pc, #4	@ (adr r2, 8005474 <xTaskGenericNotifyFromISR+0xac>)
 8005470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005474:	08005507 	.word	0x08005507
 8005478:	08005489 	.word	0x08005489
 800547c:	080054a5 	.word	0x080054a5
 8005480:	080054bd 	.word	0x080054bd
 8005484:	080054cb 	.word	0x080054cb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	3214      	adds	r2, #20
 800548e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	ea42 0103 	orr.w	r1, r2, r3
 8005498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	3214      	adds	r2, #20
 800549e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80054a2:	e033      	b.n	800550c <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80054a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	3214      	adds	r2, #20
 80054aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054ae:	1c59      	adds	r1, r3, #1
 80054b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	3214      	adds	r2, #20
 80054b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80054ba:	e027      	b.n	800550c <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80054bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	3214      	adds	r2, #20
 80054c2:	6879      	ldr	r1, [r7, #4]
 80054c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80054c8:	e020      	b.n	800550c <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80054ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d006      	beq.n	80054e0 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80054d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	3214      	adds	r2, #20
 80054d8:	6879      	ldr	r1, [r7, #4]
 80054da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80054de:	e015      	b.n	800550c <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80054e0:	2300      	movs	r3, #0
 80054e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 80054e4:	e012      	b.n	800550c <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80054e6:	4b34      	ldr	r3, [pc, #208]	@ (80055b8 <xTaskGenericNotifyFromISR+0x1f0>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00d      	beq.n	800550a <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 80054ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	61fb      	str	r3, [r7, #28]
    }
 8005500:	bf00      	nop
 8005502:	bf00      	nop
 8005504:	e7fd      	b.n	8005502 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <xTaskGenericNotifyFromISR+0x144>
                    break;
 800550a:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800550c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005510:	2b01      	cmp	r3, #1
 8005512:	d146      	bne.n	80055a2 <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005516:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00b      	beq.n	8005534 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	61bb      	str	r3, [r7, #24]
    }
 800552e:	bf00      	nop
 8005530:	bf00      	nop
 8005532:	e7fd      	b.n	8005530 <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005534:	4b21      	ldr	r3, [pc, #132]	@ (80055bc <xTaskGenericNotifyFromISR+0x1f4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d11c      	bne.n	8005576 <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800553c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553e:	3304      	adds	r3, #4
 8005540:	4618      	mov	r0, r3
 8005542:	f7fe f9f5 	bl	8003930 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800554a:	2201      	movs	r2, #1
 800554c:	409a      	lsls	r2, r3
 800554e:	4b1c      	ldr	r3, [pc, #112]	@ (80055c0 <xTaskGenericNotifyFromISR+0x1f8>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4313      	orrs	r3, r2
 8005554:	4a1a      	ldr	r2, [pc, #104]	@ (80055c0 <xTaskGenericNotifyFromISR+0x1f8>)
 8005556:	6013      	str	r3, [r2, #0]
 8005558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800555c:	4613      	mov	r3, r2
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	4a17      	ldr	r2, [pc, #92]	@ (80055c4 <xTaskGenericNotifyFromISR+0x1fc>)
 8005566:	441a      	add	r2, r3
 8005568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556a:	3304      	adds	r3, #4
 800556c:	4619      	mov	r1, r3
 800556e:	4610      	mov	r0, r2
 8005570:	f7fe f981 	bl	8003876 <vListInsertEnd>
 8005574:	e005      	b.n	8005582 <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	3318      	adds	r3, #24
 800557a:	4619      	mov	r1, r3
 800557c:	4812      	ldr	r0, [pc, #72]	@ (80055c8 <xTaskGenericNotifyFromISR+0x200>)
 800557e:	f7fe f97a 	bl	8003876 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005586:	4b11      	ldr	r3, [pc, #68]	@ (80055cc <xTaskGenericNotifyFromISR+0x204>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558c:	429a      	cmp	r2, r3
 800558e:	d908      	bls.n	80055a2 <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005590:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005592:	2b00      	cmp	r3, #0
 8005594:	d002      	beq.n	800559c <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005596:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005598:	2201      	movs	r2, #1
 800559a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800559c:	4b0c      	ldr	r3, [pc, #48]	@ (80055d0 <xTaskGenericNotifyFromISR+0x208>)
 800559e:	2201      	movs	r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055a4:	617b      	str	r3, [r7, #20]
        __asm volatile
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f383 8811 	msr	BASEPRI, r3
    }
 80055ac:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80055ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 80055b0:	4618      	mov	r0, r3
 80055b2:	3740      	adds	r7, #64	@ 0x40
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	2000021c 	.word	0x2000021c
 80055bc:	20000240 	.word	0x20000240
 80055c0:	20000220 	.word	0x20000220
 80055c4:	20000144 	.word	0x20000144
 80055c8:	200001d8 	.word	0x200001d8
 80055cc:	20000140 	.word	0x20000140
 80055d0:	2000022c 	.word	0x2000022c

080055d4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80055de:	4b29      	ldr	r3, [pc, #164]	@ (8005684 <prvAddCurrentTaskToDelayedList+0xb0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055e4:	4b28      	ldr	r3, [pc, #160]	@ (8005688 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3304      	adds	r3, #4
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fe f9a0 	bl	8003930 <uxListRemove>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10b      	bne.n	800560e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80055f6:	4b24      	ldr	r3, [pc, #144]	@ (8005688 <prvAddCurrentTaskToDelayedList+0xb4>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055fc:	2201      	movs	r2, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	43da      	mvns	r2, r3
 8005604:	4b21      	ldr	r3, [pc, #132]	@ (800568c <prvAddCurrentTaskToDelayedList+0xb8>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4013      	ands	r3, r2
 800560a:	4a20      	ldr	r2, [pc, #128]	@ (800568c <prvAddCurrentTaskToDelayedList+0xb8>)
 800560c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005614:	d10a      	bne.n	800562c <prvAddCurrentTaskToDelayedList+0x58>
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d007      	beq.n	800562c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800561c:	4b1a      	ldr	r3, [pc, #104]	@ (8005688 <prvAddCurrentTaskToDelayedList+0xb4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3304      	adds	r3, #4
 8005622:	4619      	mov	r1, r3
 8005624:	481a      	ldr	r0, [pc, #104]	@ (8005690 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005626:	f7fe f926 	bl	8003876 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800562a:	e026      	b.n	800567a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005634:	4b14      	ldr	r3, [pc, #80]	@ (8005688 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	429a      	cmp	r2, r3
 8005642:	d209      	bcs.n	8005658 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005644:	4b13      	ldr	r3, [pc, #76]	@ (8005694 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	4b0f      	ldr	r3, [pc, #60]	@ (8005688 <prvAddCurrentTaskToDelayedList+0xb4>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3304      	adds	r3, #4
 800564e:	4619      	mov	r1, r3
 8005650:	4610      	mov	r0, r2
 8005652:	f7fe f934 	bl	80038be <vListInsert>
}
 8005656:	e010      	b.n	800567a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005658:	4b0f      	ldr	r3, [pc, #60]	@ (8005698 <prvAddCurrentTaskToDelayedList+0xc4>)
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	4b0a      	ldr	r3, [pc, #40]	@ (8005688 <prvAddCurrentTaskToDelayedList+0xb4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	3304      	adds	r3, #4
 8005662:	4619      	mov	r1, r3
 8005664:	4610      	mov	r0, r2
 8005666:	f7fe f92a 	bl	80038be <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800566a:	4b0c      	ldr	r3, [pc, #48]	@ (800569c <prvAddCurrentTaskToDelayedList+0xc8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	d202      	bcs.n	800567a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005674:	4a09      	ldr	r2, [pc, #36]	@ (800569c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	6013      	str	r3, [r2, #0]
}
 800567a:	bf00      	nop
 800567c:	3710      	adds	r7, #16
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	2000021c 	.word	0x2000021c
 8005688:	20000140 	.word	0x20000140
 800568c:	20000220 	.word	0x20000220
 8005690:	20000204 	.word	0x20000204
 8005694:	200001d4 	.word	0x200001d4
 8005698:	200001d0 	.word	0x200001d0
 800569c:	20000238 	.word	0x20000238

080056a0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80056a6:	2300      	movs	r3, #0
 80056a8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80056aa:	f000 fb3f 	bl	8005d2c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80056ae:	4b12      	ldr	r3, [pc, #72]	@ (80056f8 <xTimerCreateTimerTask+0x58>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00b      	beq.n	80056ce <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80056b6:	4b11      	ldr	r3, [pc, #68]	@ (80056fc <xTimerCreateTimerTask+0x5c>)
 80056b8:	9301      	str	r3, [sp, #4]
 80056ba:	2302      	movs	r3, #2
 80056bc:	9300      	str	r3, [sp, #0]
 80056be:	2300      	movs	r3, #0
 80056c0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80056c4:	490e      	ldr	r1, [pc, #56]	@ (8005700 <xTimerCreateTimerTask+0x60>)
 80056c6:	480f      	ldr	r0, [pc, #60]	@ (8005704 <xTimerCreateTimerTask+0x64>)
 80056c8:	f7fe ff24 	bl	8004514 <xTaskCreate>
 80056cc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d10b      	bne.n	80056ec <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80056d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	603b      	str	r3, [r7, #0]
    }
 80056e6:	bf00      	nop
 80056e8:	bf00      	nop
 80056ea:	e7fd      	b.n	80056e8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80056ec:	687b      	ldr	r3, [r7, #4]
    }
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000274 	.word	0x20000274
 80056fc:	20000278 	.word	0x20000278
 8005700:	080069c0 	.word	0x080069c0
 8005704:	080058fd 	.word	0x080058fd

08005708 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8005708:	b580      	push	{r7, lr}
 800570a:	b088      	sub	sp, #32
 800570c:	af02      	add	r7, sp, #8
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8005716:	202c      	movs	r0, #44	@ 0x2c
 8005718:	f000 fd9a 	bl	8006250 <pvPortMalloc>
 800571c:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d00d      	beq.n	8005740 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	9301      	str	r3, [sp, #4]
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	9300      	str	r3, [sp, #0]
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	68b9      	ldr	r1, [r7, #8]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f805 	bl	800574a <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005740:	697b      	ldr	r3, [r7, #20]
        }
 8005742:	4618      	mov	r0, r3
 8005744:	3718      	adds	r7, #24
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af00      	add	r7, sp, #0
 8005750:	60f8      	str	r0, [r7, #12]
 8005752:	60b9      	str	r1, [r7, #8]
 8005754:	607a      	str	r2, [r7, #4]
 8005756:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d10b      	bne.n	8005776 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	617b      	str	r3, [r7, #20]
    }
 8005770:	bf00      	nop
 8005772:	bf00      	nop
 8005774:	e7fd      	b.n	8005772 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	d01e      	beq.n	80057ba <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800577c:	f000 fad6 	bl	8005d2c <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8005780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	683a      	ldr	r2, [r7, #0]
 8005790:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	6a3a      	ldr	r2, [r7, #32]
 8005796:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	3304      	adds	r3, #4
 800579c:	4618      	mov	r0, r3
 800579e:	f7fe f85d 	bl	800385c <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d008      	beq.n	80057ba <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057ae:	f043 0304 	orr.w	r3, r3, #4
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80057ba:	bf00      	nop
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b08a      	sub	sp, #40	@ 0x28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d10b      	bne.n	80057f4 <xTimerGenericCommand+0x30>
        __asm volatile
 80057dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057e0:	f383 8811 	msr	BASEPRI, r3
 80057e4:	f3bf 8f6f 	isb	sy
 80057e8:	f3bf 8f4f 	dsb	sy
 80057ec:	623b      	str	r3, [r7, #32]
    }
 80057ee:	bf00      	nop
 80057f0:	bf00      	nop
 80057f2:	e7fd      	b.n	80057f0 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80057f4:	4b19      	ldr	r3, [pc, #100]	@ (800585c <xTimerGenericCommand+0x98>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d02a      	beq.n	8005852 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	2b05      	cmp	r3, #5
 800580c:	dc18      	bgt.n	8005840 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800580e:	f7ff fbdd 	bl	8004fcc <xTaskGetSchedulerState>
 8005812:	4603      	mov	r3, r0
 8005814:	2b02      	cmp	r3, #2
 8005816:	d109      	bne.n	800582c <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005818:	4b10      	ldr	r3, [pc, #64]	@ (800585c <xTimerGenericCommand+0x98>)
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	f107 0114 	add.w	r1, r7, #20
 8005820:	2300      	movs	r3, #0
 8005822:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005824:	f7fe f99e 	bl	8003b64 <xQueueGenericSend>
 8005828:	6278      	str	r0, [r7, #36]	@ 0x24
 800582a:	e012      	b.n	8005852 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800582c:	4b0b      	ldr	r3, [pc, #44]	@ (800585c <xTimerGenericCommand+0x98>)
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	f107 0114 	add.w	r1, r7, #20
 8005834:	2300      	movs	r3, #0
 8005836:	2200      	movs	r2, #0
 8005838:	f7fe f994 	bl	8003b64 <xQueueGenericSend>
 800583c:	6278      	str	r0, [r7, #36]	@ 0x24
 800583e:	e008      	b.n	8005852 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005840:	4b06      	ldr	r3, [pc, #24]	@ (800585c <xTimerGenericCommand+0x98>)
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	f107 0114 	add.w	r1, r7, #20
 8005848:	2300      	movs	r3, #0
 800584a:	683a      	ldr	r2, [r7, #0]
 800584c:	f7fe fa8c 	bl	8003d68 <xQueueGenericSendFromISR>
 8005850:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005854:	4618      	mov	r0, r3
 8005856:	3728      	adds	r7, #40	@ 0x28
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000274 	.word	0x20000274

08005860 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005860:	b580      	push	{r7, lr}
 8005862:	b088      	sub	sp, #32
 8005864:	af02      	add	r7, sp, #8
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800586a:	4b23      	ldr	r3, [pc, #140]	@ (80058f8 <prvProcessExpiredTimer+0x98>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	3304      	adds	r3, #4
 8005878:	4618      	mov	r0, r3
 800587a:	f7fe f859 	bl	8003930 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d023      	beq.n	80058d4 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	699a      	ldr	r2, [r3, #24]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	18d1      	adds	r1, r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	6978      	ldr	r0, [r7, #20]
 800589a:	f000 f8d5 	bl	8005a48 <prvInsertTimerInActiveList>
 800589e:	4603      	mov	r3, r0
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d020      	beq.n	80058e6 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058a4:	2300      	movs	r3, #0
 80058a6:	9300      	str	r3, [sp, #0]
 80058a8:	2300      	movs	r3, #0
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	2100      	movs	r1, #0
 80058ae:	6978      	ldr	r0, [r7, #20]
 80058b0:	f7ff ff88 	bl	80057c4 <xTimerGenericCommand>
 80058b4:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d114      	bne.n	80058e6 <prvProcessExpiredTimer+0x86>
        __asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	60fb      	str	r3, [r7, #12]
    }
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	e7fd      	b.n	80058d0 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058da:	f023 0301 	bic.w	r3, r3, #1
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	6978      	ldr	r0, [r7, #20]
 80058ec:	4798      	blx	r3
    }
 80058ee:	bf00      	nop
 80058f0:	3718      	adds	r7, #24
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	2000026c 	.word	0x2000026c

080058fc <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005904:	f107 0308 	add.w	r3, r7, #8
 8005908:	4618      	mov	r0, r3
 800590a:	f000 f859 	bl	80059c0 <prvGetNextExpireTime>
 800590e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4619      	mov	r1, r3
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f805 	bl	8005924 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800591a:	f000 f8d7 	bl	8005acc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800591e:	bf00      	nop
 8005920:	e7f0      	b.n	8005904 <prvTimerTask+0x8>
	...

08005924 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800592e:	f7fe ff89 	bl	8004844 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005932:	f107 0308 	add.w	r3, r7, #8
 8005936:	4618      	mov	r0, r3
 8005938:	f000 f866 	bl	8005a08 <prvSampleTimeNow>
 800593c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d130      	bne.n	80059a6 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10a      	bne.n	8005960 <prvProcessTimerOrBlockTask+0x3c>
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	429a      	cmp	r2, r3
 8005950:	d806      	bhi.n	8005960 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005952:	f7fe ff85 	bl	8004860 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005956:	68f9      	ldr	r1, [r7, #12]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	f7ff ff81 	bl	8005860 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800595e:	e024      	b.n	80059aa <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005966:	4b13      	ldr	r3, [pc, #76]	@ (80059b4 <prvProcessTimerOrBlockTask+0x90>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d101      	bne.n	8005974 <prvProcessTimerOrBlockTask+0x50>
 8005970:	2301      	movs	r3, #1
 8005972:	e000      	b.n	8005976 <prvProcessTimerOrBlockTask+0x52>
 8005974:	2300      	movs	r3, #0
 8005976:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005978:	4b0f      	ldr	r3, [pc, #60]	@ (80059b8 <prvProcessTimerOrBlockTask+0x94>)
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	687a      	ldr	r2, [r7, #4]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	4619      	mov	r1, r3
 8005986:	f7fe fd91 	bl	80044ac <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800598a:	f7fe ff69 	bl	8004860 <xTaskResumeAll>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10a      	bne.n	80059aa <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8005994:	4b09      	ldr	r3, [pc, #36]	@ (80059bc <prvProcessTimerOrBlockTask+0x98>)
 8005996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800599a:	601a      	str	r2, [r3, #0]
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	f3bf 8f6f 	isb	sy
    }
 80059a4:	e001      	b.n	80059aa <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80059a6:	f7fe ff5b 	bl	8004860 <xTaskResumeAll>
    }
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000270 	.word	0x20000270
 80059b8:	20000274 	.word	0x20000274
 80059bc:	e000ed04 	.word	0xe000ed04

080059c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80059c0:	b480      	push	{r7}
 80059c2:	b085      	sub	sp, #20
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005a04 <prvGetNextExpireTime+0x44>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <prvGetNextExpireTime+0x16>
 80059d2:	2201      	movs	r2, #1
 80059d4:	e000      	b.n	80059d8 <prvGetNextExpireTime+0x18>
 80059d6:	2200      	movs	r2, #0
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d105      	bne.n	80059f0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059e4:	4b07      	ldr	r3, [pc, #28]	@ (8005a04 <prvGetNextExpireTime+0x44>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	60fb      	str	r3, [r7, #12]
 80059ee:	e001      	b.n	80059f4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80059f0:	2300      	movs	r3, #0
 80059f2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80059f4:	68fb      	ldr	r3, [r7, #12]
    }
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	2000026c 	.word	0x2000026c

08005a08 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005a10:	f7fe ffc4 	bl	800499c <xTaskGetTickCount>
 8005a14:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005a16:	4b0b      	ldr	r3, [pc, #44]	@ (8005a44 <prvSampleTimeNow+0x3c>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d205      	bcs.n	8005a2c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005a20:	f000 f91e 	bl	8005c60 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	601a      	str	r2, [r3, #0]
 8005a2a:	e002      	b.n	8005a32 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005a32:	4a04      	ldr	r2, [pc, #16]	@ (8005a44 <prvSampleTimeNow+0x3c>)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005a38:	68fb      	ldr	r3, [r7, #12]
    }
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3710      	adds	r7, #16
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	2000027c 	.word	0x2000027c

08005a48 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005a66:	68ba      	ldr	r2, [r7, #8]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d812      	bhi.n	8005a94 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	1ad2      	subs	r2, r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d302      	bcc.n	8005a82 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	617b      	str	r3, [r7, #20]
 8005a80:	e01b      	b.n	8005aba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a82:	4b10      	ldr	r3, [pc, #64]	@ (8005ac4 <prvInsertTimerInActiveList+0x7c>)
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3304      	adds	r3, #4
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	4610      	mov	r0, r2
 8005a8e:	f7fd ff16 	bl	80038be <vListInsert>
 8005a92:	e012      	b.n	8005aba <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d206      	bcs.n	8005aaa <prvInsertTimerInActiveList+0x62>
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d302      	bcc.n	8005aaa <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	e007      	b.n	8005aba <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005aaa:	4b07      	ldr	r3, [pc, #28]	@ (8005ac8 <prvInsertTimerInActiveList+0x80>)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	f7fd ff02 	bl	80038be <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005aba:	697b      	ldr	r3, [r7, #20]
    }
 8005abc:	4618      	mov	r0, r3
 8005abe:	3718      	adds	r7, #24
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	20000270 	.word	0x20000270
 8005ac8:	2000026c 	.word	0x2000026c

08005acc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b08c      	sub	sp, #48	@ 0x30
 8005ad0:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ad2:	e0b2      	b.n	8005c3a <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f2c0 80af 	blt.w	8005c3a <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d004      	beq.n	8005af2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	3304      	adds	r3, #4
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7fd ff1f 	bl	8003930 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005af2:	1d3b      	adds	r3, r7, #4
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff ff87 	bl	8005a08 <prvSampleTimeNow>
 8005afa:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b09      	cmp	r3, #9
 8005b00:	f200 8098 	bhi.w	8005c34 <prvProcessReceivedCommands+0x168>
 8005b04:	a201      	add	r2, pc, #4	@ (adr r2, 8005b0c <prvProcessReceivedCommands+0x40>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b35 	.word	0x08005b35
 8005b10:	08005b35 	.word	0x08005b35
 8005b14:	08005b35 	.word	0x08005b35
 8005b18:	08005bab 	.word	0x08005bab
 8005b1c:	08005bbf 	.word	0x08005bbf
 8005b20:	08005c0b 	.word	0x08005c0b
 8005b24:	08005b35 	.word	0x08005b35
 8005b28:	08005b35 	.word	0x08005b35
 8005b2c:	08005bab 	.word	0x08005bab
 8005b30:	08005bbf 	.word	0x08005bbf
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b3a:	f043 0301 	orr.w	r3, r3, #1
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	18d1      	adds	r1, r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a3a      	ldr	r2, [r7, #32]
 8005b52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b54:	f7ff ff78 	bl	8005a48 <prvInsertTimerInActiveList>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d06c      	beq.n	8005c38 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b64:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b6c:	f003 0304 	and.w	r3, r3, #4
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d061      	beq.n	8005c38 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	441a      	add	r2, r3
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	2300      	movs	r3, #0
 8005b82:	2100      	movs	r1, #0
 8005b84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b86:	f7ff fe1d 	bl	80057c4 <xTimerGenericCommand>
 8005b8a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d152      	bne.n	8005c38 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8005b92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b96:	f383 8811 	msr	BASEPRI, r3
 8005b9a:	f3bf 8f6f 	isb	sy
 8005b9e:	f3bf 8f4f 	dsb	sy
 8005ba2:	61bb      	str	r3, [r7, #24]
    }
 8005ba4:	bf00      	nop
 8005ba6:	bf00      	nop
 8005ba8:	e7fd      	b.n	8005ba6 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bb0:	f023 0301 	bic.w	r3, r3, #1
 8005bb4:	b2da      	uxtb	r2, r3
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005bbc:	e03d      	b.n	8005c3a <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10b      	bne.n	8005bf6 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	617b      	str	r3, [r7, #20]
    }
 8005bf0:	bf00      	nop
 8005bf2:	bf00      	nop
 8005bf4:	e7fd      	b.n	8005bf2 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	18d1      	adds	r1, r2, r3
 8005bfe:	6a3b      	ldr	r3, [r7, #32]
 8005c00:	6a3a      	ldr	r2, [r7, #32]
 8005c02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c04:	f7ff ff20 	bl	8005a48 <prvInsertTimerInActiveList>
                        break;
 8005c08:	e017      	b.n	8005c3a <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c10:	f003 0302 	and.w	r3, r3, #2
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d103      	bne.n	8005c20 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8005c18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c1a:	f000 fbfb 	bl	8006414 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005c1e:	e00c      	b.n	8005c3a <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c26:	f023 0301 	bic.w	r3, r3, #1
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005c32:	e002      	b.n	8005c3a <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005c34:	bf00      	nop
 8005c36:	e000      	b.n	8005c3a <prvProcessReceivedCommands+0x16e>
                        break;
 8005c38:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c3a:	4b08      	ldr	r3, [pc, #32]	@ (8005c5c <prvProcessReceivedCommands+0x190>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f107 0108 	add.w	r1, r7, #8
 8005c42:	2200      	movs	r2, #0
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7fe f93d 	bl	8003ec4 <xQueueReceive>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f47f af41 	bne.w	8005ad4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005c52:	bf00      	nop
 8005c54:	bf00      	nop
 8005c56:	3728      	adds	r7, #40	@ 0x28
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	20000274 	.word	0x20000274

08005c60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b088      	sub	sp, #32
 8005c64:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c66:	e049      	b.n	8005cfc <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c68:	4b2e      	ldr	r3, [pc, #184]	@ (8005d24 <prvSwitchTimerLists+0xc4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68db      	ldr	r3, [r3, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c72:	4b2c      	ldr	r3, [pc, #176]	@ (8005d24 <prvSwitchTimerLists+0xc4>)
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	68db      	ldr	r3, [r3, #12]
 8005c7a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fd fe55 	bl	8003930 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a1b      	ldr	r3, [r3, #32]
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d02f      	beq.n	8005cfc <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d90e      	bls.n	8005ccc <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cba:	4b1a      	ldr	r3, [pc, #104]	@ (8005d24 <prvSwitchTimerLists+0xc4>)
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f7fd fdfa 	bl	80038be <vListInsert>
 8005cca:	e017      	b.n	8005cfc <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ccc:	2300      	movs	r3, #0
 8005cce:	9300      	str	r3, [sp, #0]
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f7ff fd74 	bl	80057c4 <xTimerGenericCommand>
 8005cdc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d10b      	bne.n	8005cfc <prvSwitchTimerLists+0x9c>
        __asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	603b      	str	r3, [r7, #0]
    }
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
 8005cfa:	e7fd      	b.n	8005cf8 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005cfc:	4b09      	ldr	r3, [pc, #36]	@ (8005d24 <prvSwitchTimerLists+0xc4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1b0      	bne.n	8005c68 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005d06:	4b07      	ldr	r3, [pc, #28]	@ (8005d24 <prvSwitchTimerLists+0xc4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005d0c:	4b06      	ldr	r3, [pc, #24]	@ (8005d28 <prvSwitchTimerLists+0xc8>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a04      	ldr	r2, [pc, #16]	@ (8005d24 <prvSwitchTimerLists+0xc4>)
 8005d12:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005d14:	4a04      	ldr	r2, [pc, #16]	@ (8005d28 <prvSwitchTimerLists+0xc8>)
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	6013      	str	r3, [r2, #0]
    }
 8005d1a:	bf00      	nop
 8005d1c:	3718      	adds	r7, #24
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	2000026c 	.word	0x2000026c
 8005d28:	20000270 	.word	0x20000270

08005d2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005d30:	f000 f964 	bl	8005ffc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005d34:	4b12      	ldr	r3, [pc, #72]	@ (8005d80 <prvCheckForValidListAndQueue+0x54>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d11d      	bne.n	8005d78 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005d3c:	4811      	ldr	r0, [pc, #68]	@ (8005d84 <prvCheckForValidListAndQueue+0x58>)
 8005d3e:	f7fd fd6d 	bl	800381c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005d42:	4811      	ldr	r0, [pc, #68]	@ (8005d88 <prvCheckForValidListAndQueue+0x5c>)
 8005d44:	f7fd fd6a 	bl	800381c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005d48:	4b10      	ldr	r3, [pc, #64]	@ (8005d8c <prvCheckForValidListAndQueue+0x60>)
 8005d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8005d84 <prvCheckForValidListAndQueue+0x58>)
 8005d4c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005d4e:	4b10      	ldr	r3, [pc, #64]	@ (8005d90 <prvCheckForValidListAndQueue+0x64>)
 8005d50:	4a0d      	ldr	r2, [pc, #52]	@ (8005d88 <prvCheckForValidListAndQueue+0x5c>)
 8005d52:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005d54:	2200      	movs	r2, #0
 8005d56:	210c      	movs	r1, #12
 8005d58:	200a      	movs	r0, #10
 8005d5a:	f7fd fe7d 	bl	8003a58 <xQueueGenericCreate>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	4a07      	ldr	r2, [pc, #28]	@ (8005d80 <prvCheckForValidListAndQueue+0x54>)
 8005d62:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005d64:	4b06      	ldr	r3, [pc, #24]	@ (8005d80 <prvCheckForValidListAndQueue+0x54>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d005      	beq.n	8005d78 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d6c:	4b04      	ldr	r3, [pc, #16]	@ (8005d80 <prvCheckForValidListAndQueue+0x54>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4908      	ldr	r1, [pc, #32]	@ (8005d94 <prvCheckForValidListAndQueue+0x68>)
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7fe fb70 	bl	8004458 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005d78:	f000 f972 	bl	8006060 <vPortExitCritical>
    }
 8005d7c:	bf00      	nop
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	20000274 	.word	0x20000274
 8005d84:	20000244 	.word	0x20000244
 8005d88:	20000258 	.word	0x20000258
 8005d8c:	2000026c 	.word	0x2000026c
 8005d90:	20000270 	.word	0x20000270
 8005d94:	080069c8 	.word	0x080069c8

08005d98 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	3b04      	subs	r3, #4
 8005da8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005db0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	3b04      	subs	r3, #4
 8005db6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f023 0201 	bic.w	r2, r3, #1
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3b04      	subs	r3, #4
 8005dc6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005dc8:	4a0c      	ldr	r2, [pc, #48]	@ (8005dfc <pxPortInitialiseStack+0x64>)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3b14      	subs	r3, #20
 8005dd2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3b04      	subs	r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f06f 0202 	mvn.w	r2, #2
 8005de6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3b20      	subs	r3, #32
 8005dec:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005dee:	68fb      	ldr	r3, [r7, #12]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3714      	adds	r7, #20
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	08005e01 	.word	0x08005e01

08005e00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005e0a:	4b13      	ldr	r3, [pc, #76]	@ (8005e58 <prvTaskExitError+0x58>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e12:	d00b      	beq.n	8005e2c <prvTaskExitError+0x2c>
        __asm volatile
 8005e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e18:	f383 8811 	msr	BASEPRI, r3
 8005e1c:	f3bf 8f6f 	isb	sy
 8005e20:	f3bf 8f4f 	dsb	sy
 8005e24:	60fb      	str	r3, [r7, #12]
    }
 8005e26:	bf00      	nop
 8005e28:	bf00      	nop
 8005e2a:	e7fd      	b.n	8005e28 <prvTaskExitError+0x28>
        __asm volatile
 8005e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e30:	f383 8811 	msr	BASEPRI, r3
 8005e34:	f3bf 8f6f 	isb	sy
 8005e38:	f3bf 8f4f 	dsb	sy
 8005e3c:	60bb      	str	r3, [r7, #8]
    }
 8005e3e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005e40:	bf00      	nop
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0fc      	beq.n	8005e42 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005e48:	bf00      	nop
 8005e4a:	bf00      	nop
 8005e4c:	3714      	adds	r7, #20
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	20000020 	.word	0x20000020
 8005e5c:	00000000 	.word	0x00000000

08005e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005e60:	4b07      	ldr	r3, [pc, #28]	@ (8005e80 <pxCurrentTCBConst2>)
 8005e62:	6819      	ldr	r1, [r3, #0]
 8005e64:	6808      	ldr	r0, [r1, #0]
 8005e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e6a:	f380 8809 	msr	PSP, r0
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f04f 0000 	mov.w	r0, #0
 8005e76:	f380 8811 	msr	BASEPRI, r0
 8005e7a:	4770      	bx	lr
 8005e7c:	f3af 8000 	nop.w

08005e80 <pxCurrentTCBConst2>:
 8005e80:	20000140 	.word	0x20000140
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop

08005e88 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005e88:	4808      	ldr	r0, [pc, #32]	@ (8005eac <prvPortStartFirstTask+0x24>)
 8005e8a:	6800      	ldr	r0, [r0, #0]
 8005e8c:	6800      	ldr	r0, [r0, #0]
 8005e8e:	f380 8808 	msr	MSP, r0
 8005e92:	f04f 0000 	mov.w	r0, #0
 8005e96:	f380 8814 	msr	CONTROL, r0
 8005e9a:	b662      	cpsie	i
 8005e9c:	b661      	cpsie	f
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	df00      	svc	0
 8005ea8:	bf00      	nop
 8005eaa:	0000      	.short	0x0000
 8005eac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005eb0:	bf00      	nop
 8005eb2:	bf00      	nop

08005eb4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005eba:	4b47      	ldr	r3, [pc, #284]	@ (8005fd8 <xPortStartScheduler+0x124>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a47      	ldr	r2, [pc, #284]	@ (8005fdc <xPortStartScheduler+0x128>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d10b      	bne.n	8005edc <xPortStartScheduler+0x28>
        __asm volatile
 8005ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec8:	f383 8811 	msr	BASEPRI, r3
 8005ecc:	f3bf 8f6f 	isb	sy
 8005ed0:	f3bf 8f4f 	dsb	sy
 8005ed4:	613b      	str	r3, [r7, #16]
    }
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	e7fd      	b.n	8005ed8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005edc:	4b3e      	ldr	r3, [pc, #248]	@ (8005fd8 <xPortStartScheduler+0x124>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a3f      	ldr	r2, [pc, #252]	@ (8005fe0 <xPortStartScheduler+0x12c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d10b      	bne.n	8005efe <xPortStartScheduler+0x4a>
        __asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	60fb      	str	r3, [r7, #12]
    }
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	e7fd      	b.n	8005efa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005efe:	4b39      	ldr	r3, [pc, #228]	@ (8005fe4 <xPortStartScheduler+0x130>)
 8005f00:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	22ff      	movs	r2, #255	@ 0xff
 8005f0e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f18:	78fb      	ldrb	r3, [r7, #3]
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	4b31      	ldr	r3, [pc, #196]	@ (8005fe8 <xPortStartScheduler+0x134>)
 8005f24:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f26:	4b31      	ldr	r3, [pc, #196]	@ (8005fec <xPortStartScheduler+0x138>)
 8005f28:	2207      	movs	r2, #7
 8005f2a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f2c:	e009      	b.n	8005f42 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8005f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8005fec <xPortStartScheduler+0x138>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	4a2d      	ldr	r2, [pc, #180]	@ (8005fec <xPortStartScheduler+0x138>)
 8005f36:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f38:	78fb      	ldrb	r3, [r7, #3]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4a:	2b80      	cmp	r3, #128	@ 0x80
 8005f4c:	d0ef      	beq.n	8005f2e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f4e:	4b27      	ldr	r3, [pc, #156]	@ (8005fec <xPortStartScheduler+0x138>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f1c3 0307 	rsb	r3, r3, #7
 8005f56:	2b04      	cmp	r3, #4
 8005f58:	d00b      	beq.n	8005f72 <xPortStartScheduler+0xbe>
        __asm volatile
 8005f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5e:	f383 8811 	msr	BASEPRI, r3
 8005f62:	f3bf 8f6f 	isb	sy
 8005f66:	f3bf 8f4f 	dsb	sy
 8005f6a:	60bb      	str	r3, [r7, #8]
    }
 8005f6c:	bf00      	nop
 8005f6e:	bf00      	nop
 8005f70:	e7fd      	b.n	8005f6e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f72:	4b1e      	ldr	r3, [pc, #120]	@ (8005fec <xPortStartScheduler+0x138>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	021b      	lsls	r3, r3, #8
 8005f78:	4a1c      	ldr	r2, [pc, #112]	@ (8005fec <xPortStartScheduler+0x138>)
 8005f7a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8005fec <xPortStartScheduler+0x138>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f84:	4a19      	ldr	r2, [pc, #100]	@ (8005fec <xPortStartScheduler+0x138>)
 8005f86:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005f90:	4b17      	ldr	r3, [pc, #92]	@ (8005ff0 <xPortStartScheduler+0x13c>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a16      	ldr	r2, [pc, #88]	@ (8005ff0 <xPortStartScheduler+0x13c>)
 8005f96:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005f9a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005f9c:	4b14      	ldr	r3, [pc, #80]	@ (8005ff0 <xPortStartScheduler+0x13c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a13      	ldr	r2, [pc, #76]	@ (8005ff0 <xPortStartScheduler+0x13c>)
 8005fa2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005fa6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005fa8:	f000 f8e0 	bl	800616c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005fac:	4b11      	ldr	r3, [pc, #68]	@ (8005ff4 <xPortStartScheduler+0x140>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005fb2:	f000 f8ff 	bl	80061b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fb6:	4b10      	ldr	r3, [pc, #64]	@ (8005ff8 <xPortStartScheduler+0x144>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a0f      	ldr	r2, [pc, #60]	@ (8005ff8 <xPortStartScheduler+0x144>)
 8005fbc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005fc0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005fc2:	f7ff ff61 	bl	8005e88 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005fc6:	f7fe fdb3 	bl	8004b30 <vTaskSwitchContext>
    prvTaskExitError();
 8005fca:	f7ff ff19 	bl	8005e00 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	e000ed00 	.word	0xe000ed00
 8005fdc:	410fc271 	.word	0x410fc271
 8005fe0:	410fc270 	.word	0x410fc270
 8005fe4:	e000e400 	.word	0xe000e400
 8005fe8:	20000280 	.word	0x20000280
 8005fec:	20000284 	.word	0x20000284
 8005ff0:	e000ed20 	.word	0xe000ed20
 8005ff4:	20000020 	.word	0x20000020
 8005ff8:	e000ef34 	.word	0xe000ef34

08005ffc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
        __asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006006:	f383 8811 	msr	BASEPRI, r3
 800600a:	f3bf 8f6f 	isb	sy
 800600e:	f3bf 8f4f 	dsb	sy
 8006012:	607b      	str	r3, [r7, #4]
    }
 8006014:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006016:	4b10      	ldr	r3, [pc, #64]	@ (8006058 <vPortEnterCritical+0x5c>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3301      	adds	r3, #1
 800601c:	4a0e      	ldr	r2, [pc, #56]	@ (8006058 <vPortEnterCritical+0x5c>)
 800601e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006020:	4b0d      	ldr	r3, [pc, #52]	@ (8006058 <vPortEnterCritical+0x5c>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d110      	bne.n	800604a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006028:	4b0c      	ldr	r3, [pc, #48]	@ (800605c <vPortEnterCritical+0x60>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	b2db      	uxtb	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <vPortEnterCritical+0x4e>
        __asm volatile
 8006032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006036:	f383 8811 	msr	BASEPRI, r3
 800603a:	f3bf 8f6f 	isb	sy
 800603e:	f3bf 8f4f 	dsb	sy
 8006042:	603b      	str	r3, [r7, #0]
    }
 8006044:	bf00      	nop
 8006046:	bf00      	nop
 8006048:	e7fd      	b.n	8006046 <vPortEnterCritical+0x4a>
    }
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	20000020 	.word	0x20000020
 800605c:	e000ed04 	.word	0xe000ed04

08006060 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006060:	b480      	push	{r7}
 8006062:	b083      	sub	sp, #12
 8006064:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006066:	4b12      	ldr	r3, [pc, #72]	@ (80060b0 <vPortExitCritical+0x50>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d10b      	bne.n	8006086 <vPortExitCritical+0x26>
        __asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	607b      	str	r3, [r7, #4]
    }
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	e7fd      	b.n	8006082 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006086:	4b0a      	ldr	r3, [pc, #40]	@ (80060b0 <vPortExitCritical+0x50>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	3b01      	subs	r3, #1
 800608c:	4a08      	ldr	r2, [pc, #32]	@ (80060b0 <vPortExitCritical+0x50>)
 800608e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006090:	4b07      	ldr	r3, [pc, #28]	@ (80060b0 <vPortExitCritical+0x50>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d105      	bne.n	80060a4 <vPortExitCritical+0x44>
 8006098:	2300      	movs	r3, #0
 800609a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	f383 8811 	msr	BASEPRI, r3
    }
 80060a2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr
 80060b0:	20000020 	.word	0x20000020
	...

080060c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80060c0:	f3ef 8009 	mrs	r0, PSP
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	4b15      	ldr	r3, [pc, #84]	@ (8006120 <pxCurrentTCBConst>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	f01e 0f10 	tst.w	lr, #16
 80060d0:	bf08      	it	eq
 80060d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060da:	6010      	str	r0, [r2, #0]
 80060dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80060e4:	f380 8811 	msr	BASEPRI, r0
 80060e8:	f3bf 8f4f 	dsb	sy
 80060ec:	f3bf 8f6f 	isb	sy
 80060f0:	f7fe fd1e 	bl	8004b30 <vTaskSwitchContext>
 80060f4:	f04f 0000 	mov.w	r0, #0
 80060f8:	f380 8811 	msr	BASEPRI, r0
 80060fc:	bc09      	pop	{r0, r3}
 80060fe:	6819      	ldr	r1, [r3, #0]
 8006100:	6808      	ldr	r0, [r1, #0]
 8006102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006106:	f01e 0f10 	tst.w	lr, #16
 800610a:	bf08      	it	eq
 800610c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006110:	f380 8809 	msr	PSP, r0
 8006114:	f3bf 8f6f 	isb	sy
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	f3af 8000 	nop.w

08006120 <pxCurrentTCBConst>:
 8006120:	20000140 	.word	0x20000140
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop

08006128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
        __asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006132:	f383 8811 	msr	BASEPRI, r3
 8006136:	f3bf 8f6f 	isb	sy
 800613a:	f3bf 8f4f 	dsb	sy
 800613e:	607b      	str	r3, [r7, #4]
    }
 8006140:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006142:	f7fe fc3b 	bl	80049bc <xTaskIncrementTick>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800614c:	4b06      	ldr	r3, [pc, #24]	@ (8006168 <SysTick_Handler+0x40>)
 800614e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	2300      	movs	r3, #0
 8006156:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	f383 8811 	msr	BASEPRI, r3
    }
 800615e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006160:	bf00      	nop
 8006162:	3708      	adds	r7, #8
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	e000ed04 	.word	0xe000ed04

0800616c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800616c:	b480      	push	{r7}
 800616e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006170:	4b0b      	ldr	r3, [pc, #44]	@ (80061a0 <vPortSetupTimerInterrupt+0x34>)
 8006172:	2200      	movs	r2, #0
 8006174:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006176:	4b0b      	ldr	r3, [pc, #44]	@ (80061a4 <vPortSetupTimerInterrupt+0x38>)
 8006178:	2200      	movs	r2, #0
 800617a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800617c:	4b0a      	ldr	r3, [pc, #40]	@ (80061a8 <vPortSetupTimerInterrupt+0x3c>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a0a      	ldr	r2, [pc, #40]	@ (80061ac <vPortSetupTimerInterrupt+0x40>)
 8006182:	fba2 2303 	umull	r2, r3, r2, r3
 8006186:	099b      	lsrs	r3, r3, #6
 8006188:	4a09      	ldr	r2, [pc, #36]	@ (80061b0 <vPortSetupTimerInterrupt+0x44>)
 800618a:	3b01      	subs	r3, #1
 800618c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800618e:	4b04      	ldr	r3, [pc, #16]	@ (80061a0 <vPortSetupTimerInterrupt+0x34>)
 8006190:	2207      	movs	r2, #7
 8006192:	601a      	str	r2, [r3, #0]
}
 8006194:	bf00      	nop
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	e000e010 	.word	0xe000e010
 80061a4:	e000e018 	.word	0xe000e018
 80061a8:	20000010 	.word	0x20000010
 80061ac:	10624dd3 	.word	0x10624dd3
 80061b0:	e000e014 	.word	0xe000e014

080061b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80061b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80061c4 <vPortEnableVFP+0x10>
 80061b8:	6801      	ldr	r1, [r0, #0]
 80061ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80061be:	6001      	str	r1, [r0, #0]
 80061c0:	4770      	bx	lr
 80061c2:	0000      	.short	0x0000
 80061c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80061c8:	bf00      	nop
 80061ca:	bf00      	nop

080061cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80061d2:	f3ef 8305 	mrs	r3, IPSR
 80061d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b0f      	cmp	r3, #15
 80061dc:	d915      	bls.n	800620a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061de:	4a18      	ldr	r2, [pc, #96]	@ (8006240 <vPortValidateInterruptPriority+0x74>)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061e8:	4b16      	ldr	r3, [pc, #88]	@ (8006244 <vPortValidateInterruptPriority+0x78>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	7afa      	ldrb	r2, [r7, #11]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d20b      	bcs.n	800620a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f6:	f383 8811 	msr	BASEPRI, r3
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	607b      	str	r3, [r7, #4]
    }
 8006204:	bf00      	nop
 8006206:	bf00      	nop
 8006208:	e7fd      	b.n	8006206 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800620a:	4b0f      	ldr	r3, [pc, #60]	@ (8006248 <vPortValidateInterruptPriority+0x7c>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006212:	4b0e      	ldr	r3, [pc, #56]	@ (800624c <vPortValidateInterruptPriority+0x80>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	d90b      	bls.n	8006232 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800621a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621e:	f383 8811 	msr	BASEPRI, r3
 8006222:	f3bf 8f6f 	isb	sy
 8006226:	f3bf 8f4f 	dsb	sy
 800622a:	603b      	str	r3, [r7, #0]
    }
 800622c:	bf00      	nop
 800622e:	bf00      	nop
 8006230:	e7fd      	b.n	800622e <vPortValidateInterruptPriority+0x62>
    }
 8006232:	bf00      	nop
 8006234:	3714      	adds	r7, #20
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	e000e3f0 	.word	0xe000e3f0
 8006244:	20000280 	.word	0x20000280
 8006248:	e000ed0c 	.word	0xe000ed0c
 800624c:	20000284 	.word	0x20000284

08006250 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	@ 0x28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006258:	2300      	movs	r3, #0
 800625a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800625c:	f7fe faf2 	bl	8004844 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006260:	4b66      	ldr	r3, [pc, #408]	@ (80063fc <pvPortMalloc+0x1ac>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d101      	bne.n	800626c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006268:	f000 f938 	bl	80064dc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800626c:	4b64      	ldr	r3, [pc, #400]	@ (8006400 <pvPortMalloc+0x1b0>)
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4013      	ands	r3, r2
 8006274:	2b00      	cmp	r3, #0
 8006276:	f040 80a9 	bne.w	80063cc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d02e      	beq.n	80062de <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006280:	2208      	movs	r2, #8
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006286:	687a      	ldr	r2, [r7, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	d228      	bcs.n	80062de <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800628c:	2208      	movs	r2, #8
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4413      	add	r3, r2
 8006292:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f003 0307 	and.w	r3, r3, #7
 800629a:	2b00      	cmp	r3, #0
 800629c:	d022      	beq.n	80062e4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f023 0307 	bic.w	r3, r3, #7
 80062a4:	3308      	adds	r3, #8
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d215      	bcs.n	80062d8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f023 0307 	bic.w	r3, r3, #7
 80062b2:	3308      	adds	r3, #8
 80062b4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d011      	beq.n	80062e4 <pvPortMalloc+0x94>
        __asm volatile
 80062c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c4:	f383 8811 	msr	BASEPRI, r3
 80062c8:	f3bf 8f6f 	isb	sy
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	617b      	str	r3, [r7, #20]
    }
 80062d2:	bf00      	nop
 80062d4:	bf00      	nop
 80062d6:	e7fd      	b.n	80062d4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80062d8:	2300      	movs	r3, #0
 80062da:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062dc:	e002      	b.n	80062e4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80062de:	2300      	movs	r3, #0
 80062e0:	607b      	str	r3, [r7, #4]
 80062e2:	e000      	b.n	80062e6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062e4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d06f      	beq.n	80063cc <pvPortMalloc+0x17c>
 80062ec:	4b45      	ldr	r3, [pc, #276]	@ (8006404 <pvPortMalloc+0x1b4>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d86a      	bhi.n	80063cc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80062f6:	4b44      	ldr	r3, [pc, #272]	@ (8006408 <pvPortMalloc+0x1b8>)
 80062f8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80062fa:	4b43      	ldr	r3, [pc, #268]	@ (8006408 <pvPortMalloc+0x1b8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006300:	e004      	b.n	800630c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8006302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006304:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	429a      	cmp	r2, r3
 8006314:	d903      	bls.n	800631e <pvPortMalloc+0xce>
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d1f1      	bne.n	8006302 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800631e:	4b37      	ldr	r3, [pc, #220]	@ (80063fc <pvPortMalloc+0x1ac>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006324:	429a      	cmp	r2, r3
 8006326:	d051      	beq.n	80063cc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2208      	movs	r2, #8
 800632e:	4413      	add	r3, r2
 8006330:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	6a3b      	ldr	r3, [r7, #32]
 8006338:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800633a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	1ad2      	subs	r2, r2, r3
 8006342:	2308      	movs	r3, #8
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	429a      	cmp	r2, r3
 8006348:	d920      	bls.n	800638c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800634a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4413      	add	r3, r2
 8006350:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	f003 0307 	and.w	r3, r3, #7
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00b      	beq.n	8006374 <pvPortMalloc+0x124>
        __asm volatile
 800635c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006360:	f383 8811 	msr	BASEPRI, r3
 8006364:	f3bf 8f6f 	isb	sy
 8006368:	f3bf 8f4f 	dsb	sy
 800636c:	613b      	str	r3, [r7, #16]
    }
 800636e:	bf00      	nop
 8006370:	bf00      	nop
 8006372:	e7fd      	b.n	8006370 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	1ad2      	subs	r2, r2, r3
 800637c:	69bb      	ldr	r3, [r7, #24]
 800637e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006386:	69b8      	ldr	r0, [r7, #24]
 8006388:	f000 f90a 	bl	80065a0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800638c:	4b1d      	ldr	r3, [pc, #116]	@ (8006404 <pvPortMalloc+0x1b4>)
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	4a1b      	ldr	r2, [pc, #108]	@ (8006404 <pvPortMalloc+0x1b4>)
 8006398:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800639a:	4b1a      	ldr	r3, [pc, #104]	@ (8006404 <pvPortMalloc+0x1b4>)
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b1b      	ldr	r3, [pc, #108]	@ (800640c <pvPortMalloc+0x1bc>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d203      	bcs.n	80063ae <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063a6:	4b17      	ldr	r3, [pc, #92]	@ (8006404 <pvPortMalloc+0x1b4>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a18      	ldr	r2, [pc, #96]	@ (800640c <pvPortMalloc+0x1bc>)
 80063ac:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	4b13      	ldr	r3, [pc, #76]	@ (8006400 <pvPortMalloc+0x1b0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ba:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80063bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80063c2:	4b13      	ldr	r3, [pc, #76]	@ (8006410 <pvPortMalloc+0x1c0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3301      	adds	r3, #1
 80063c8:	4a11      	ldr	r2, [pc, #68]	@ (8006410 <pvPortMalloc+0x1c0>)
 80063ca:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80063cc:	f7fe fa48 	bl	8004860 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063d0:	69fb      	ldr	r3, [r7, #28]
 80063d2:	f003 0307 	and.w	r3, r3, #7
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d00b      	beq.n	80063f2 <pvPortMalloc+0x1a2>
        __asm volatile
 80063da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
 80063e6:	f3bf 8f4f 	dsb	sy
 80063ea:	60fb      	str	r3, [r7, #12]
    }
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	e7fd      	b.n	80063ee <pvPortMalloc+0x19e>
    return pvReturn;
 80063f2:	69fb      	ldr	r3, [r7, #28]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3728      	adds	r7, #40	@ 0x28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20019290 	.word	0x20019290
 8006400:	200192a4 	.word	0x200192a4
 8006404:	20019294 	.word	0x20019294
 8006408:	20019288 	.word	0x20019288
 800640c:	20019298 	.word	0x20019298
 8006410:	2001929c 	.word	0x2001929c

08006414 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d04f      	beq.n	80064c6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006426:	2308      	movs	r3, #8
 8006428:	425b      	negs	r3, r3
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4413      	add	r3, r2
 800642e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	685a      	ldr	r2, [r3, #4]
 8006438:	4b25      	ldr	r3, [pc, #148]	@ (80064d0 <vPortFree+0xbc>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	4013      	ands	r3, r2
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <vPortFree+0x46>
        __asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	60fb      	str	r3, [r7, #12]
    }
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <vPortFree+0x66>
        __asm volatile
 8006462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006466:	f383 8811 	msr	BASEPRI, r3
 800646a:	f3bf 8f6f 	isb	sy
 800646e:	f3bf 8f4f 	dsb	sy
 8006472:	60bb      	str	r3, [r7, #8]
    }
 8006474:	bf00      	nop
 8006476:	bf00      	nop
 8006478:	e7fd      	b.n	8006476 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	685a      	ldr	r2, [r3, #4]
 800647e:	4b14      	ldr	r3, [pc, #80]	@ (80064d0 <vPortFree+0xbc>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4013      	ands	r3, r2
 8006484:	2b00      	cmp	r3, #0
 8006486:	d01e      	beq.n	80064c6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d11a      	bne.n	80064c6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	4b0e      	ldr	r3, [pc, #56]	@ (80064d0 <vPortFree+0xbc>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	43db      	mvns	r3, r3
 800649a:	401a      	ands	r2, r3
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80064a0:	f7fe f9d0 	bl	8004844 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	4b0a      	ldr	r3, [pc, #40]	@ (80064d4 <vPortFree+0xc0>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4413      	add	r3, r2
 80064ae:	4a09      	ldr	r2, [pc, #36]	@ (80064d4 <vPortFree+0xc0>)
 80064b0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064b2:	6938      	ldr	r0, [r7, #16]
 80064b4:	f000 f874 	bl	80065a0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80064b8:	4b07      	ldr	r3, [pc, #28]	@ (80064d8 <vPortFree+0xc4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	3301      	adds	r3, #1
 80064be:	4a06      	ldr	r2, [pc, #24]	@ (80064d8 <vPortFree+0xc4>)
 80064c0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80064c2:	f7fe f9cd 	bl	8004860 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80064c6:	bf00      	nop
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	200192a4 	.word	0x200192a4
 80064d4:	20019294 	.word	0x20019294
 80064d8:	200192a0 	.word	0x200192a0

080064dc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064e2:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80064e6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80064e8:	4b27      	ldr	r3, [pc, #156]	@ (8006588 <prvHeapInit+0xac>)
 80064ea:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00c      	beq.n	8006510 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3307      	adds	r3, #7
 80064fa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0307 	bic.w	r3, r3, #7
 8006502:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	4a1f      	ldr	r2, [pc, #124]	@ (8006588 <prvHeapInit+0xac>)
 800650c:	4413      	add	r3, r2
 800650e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006514:	4a1d      	ldr	r2, [pc, #116]	@ (800658c <prvHeapInit+0xb0>)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800651a:	4b1c      	ldr	r3, [pc, #112]	@ (800658c <prvHeapInit+0xb0>)
 800651c:	2200      	movs	r2, #0
 800651e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68ba      	ldr	r2, [r7, #8]
 8006524:	4413      	add	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006528:	2208      	movs	r2, #8
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	1a9b      	subs	r3, r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0307 	bic.w	r3, r3, #7
 8006536:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4a15      	ldr	r2, [pc, #84]	@ (8006590 <prvHeapInit+0xb4>)
 800653c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800653e:	4b14      	ldr	r3, [pc, #80]	@ (8006590 <prvHeapInit+0xb4>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2200      	movs	r2, #0
 8006544:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006546:	4b12      	ldr	r3, [pc, #72]	@ (8006590 <prvHeapInit+0xb4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	1ad2      	subs	r2, r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800655c:	4b0c      	ldr	r3, [pc, #48]	@ (8006590 <prvHeapInit+0xb4>)
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	4a0a      	ldr	r2, [pc, #40]	@ (8006594 <prvHeapInit+0xb8>)
 800656a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	4a09      	ldr	r2, [pc, #36]	@ (8006598 <prvHeapInit+0xbc>)
 8006572:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006574:	4b09      	ldr	r3, [pc, #36]	@ (800659c <prvHeapInit+0xc0>)
 8006576:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800657a:	601a      	str	r2, [r3, #0]
}
 800657c:	bf00      	nop
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	20000288 	.word	0x20000288
 800658c:	20019288 	.word	0x20019288
 8006590:	20019290 	.word	0x20019290
 8006594:	20019298 	.word	0x20019298
 8006598:	20019294 	.word	0x20019294
 800659c:	200192a4 	.word	0x200192a4

080065a0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80065a0:	b480      	push	{r7}
 80065a2:	b085      	sub	sp, #20
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065a8:	4b28      	ldr	r3, [pc, #160]	@ (800664c <prvInsertBlockIntoFreeList+0xac>)
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	e002      	b.n	80065b4 <prvInsertBlockIntoFreeList+0x14>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60fb      	str	r3, [r7, #12]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d8f7      	bhi.n	80065ae <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	4413      	add	r3, r2
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d108      	bne.n	80065e2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	685a      	ldr	r2, [r3, #4]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	441a      	add	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	68ba      	ldr	r2, [r7, #8]
 80065ec:	441a      	add	r2, r3
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d118      	bne.n	8006628 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681a      	ldr	r2, [r3, #0]
 80065fa:	4b15      	ldr	r3, [pc, #84]	@ (8006650 <prvInsertBlockIntoFreeList+0xb0>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d00d      	beq.n	800661e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685a      	ldr	r2, [r3, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	441a      	add	r2, r3
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	681a      	ldr	r2, [r3, #0]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	601a      	str	r2, [r3, #0]
 800661c:	e008      	b.n	8006630 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800661e:	4b0c      	ldr	r3, [pc, #48]	@ (8006650 <prvInsertBlockIntoFreeList+0xb0>)
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
 8006626:	e003      	b.n	8006630 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	429a      	cmp	r2, r3
 8006636:	d002      	beq.n	800663e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800663e:	bf00      	nop
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	20019288 	.word	0x20019288
 8006650:	20019290 	.word	0x20019290

08006654 <memset>:
 8006654:	4402      	add	r2, r0
 8006656:	4603      	mov	r3, r0
 8006658:	4293      	cmp	r3, r2
 800665a:	d100      	bne.n	800665e <memset+0xa>
 800665c:	4770      	bx	lr
 800665e:	f803 1b01 	strb.w	r1, [r3], #1
 8006662:	e7f9      	b.n	8006658 <memset+0x4>

08006664 <__libc_init_array>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	4d0d      	ldr	r5, [pc, #52]	@ (800669c <__libc_init_array+0x38>)
 8006668:	4c0d      	ldr	r4, [pc, #52]	@ (80066a0 <__libc_init_array+0x3c>)
 800666a:	1b64      	subs	r4, r4, r5
 800666c:	10a4      	asrs	r4, r4, #2
 800666e:	2600      	movs	r6, #0
 8006670:	42a6      	cmp	r6, r4
 8006672:	d109      	bne.n	8006688 <__libc_init_array+0x24>
 8006674:	4d0b      	ldr	r5, [pc, #44]	@ (80066a4 <__libc_init_array+0x40>)
 8006676:	4c0c      	ldr	r4, [pc, #48]	@ (80066a8 <__libc_init_array+0x44>)
 8006678:	f000 f826 	bl	80066c8 <_init>
 800667c:	1b64      	subs	r4, r4, r5
 800667e:	10a4      	asrs	r4, r4, #2
 8006680:	2600      	movs	r6, #0
 8006682:	42a6      	cmp	r6, r4
 8006684:	d105      	bne.n	8006692 <__libc_init_array+0x2e>
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	f855 3b04 	ldr.w	r3, [r5], #4
 800668c:	4798      	blx	r3
 800668e:	3601      	adds	r6, #1
 8006690:	e7ee      	b.n	8006670 <__libc_init_array+0xc>
 8006692:	f855 3b04 	ldr.w	r3, [r5], #4
 8006696:	4798      	blx	r3
 8006698:	3601      	adds	r6, #1
 800669a:	e7f2      	b.n	8006682 <__libc_init_array+0x1e>
 800669c:	080069f0 	.word	0x080069f0
 80066a0:	080069f0 	.word	0x080069f0
 80066a4:	080069f0 	.word	0x080069f0
 80066a8:	080069f4 	.word	0x080069f4

080066ac <memcpy>:
 80066ac:	440a      	add	r2, r1
 80066ae:	4291      	cmp	r1, r2
 80066b0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80066b4:	d100      	bne.n	80066b8 <memcpy+0xc>
 80066b6:	4770      	bx	lr
 80066b8:	b510      	push	{r4, lr}
 80066ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c2:	4291      	cmp	r1, r2
 80066c4:	d1f9      	bne.n	80066ba <memcpy+0xe>
 80066c6:	bd10      	pop	{r4, pc}

080066c8 <_init>:
 80066c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ca:	bf00      	nop
 80066cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ce:	bc08      	pop	{r3}
 80066d0:	469e      	mov	lr, r3
 80066d2:	4770      	bx	lr

080066d4 <_fini>:
 80066d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d6:	bf00      	nop
 80066d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066da:	bc08      	pop	{r3}
 80066dc:	469e      	mov	lr, r3
 80066de:	4770      	bx	lr
