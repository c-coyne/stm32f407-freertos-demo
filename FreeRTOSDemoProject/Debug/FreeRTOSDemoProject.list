
FreeRTOSDemoProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089fc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000764  08008b8c  08008b8c  00009b8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f0  080092f0  0000b0bc  2**0
                  CONTENTS
  4 .ARM          00000008  080092f0  080092f0  0000a2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080092f8  080092f8  0000b0bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080092f8  080092f8  0000a2f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080092fc  080092fc  0000a2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  08009300  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0bc  2**0
                  CONTENTS
 10 .bss          00019464  200000bc  200000bc  0000b0bc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20019520  20019520  0000b0bc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001634e  00000000  00000000  0000b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038d5  00000000  00000000  0002143a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00024d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3d  00000000  00000000  000260b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246bb  00000000  00000000  00026ff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000183d5  00000000  00000000  0004b6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db2c6  00000000  00000000  00063a85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ed4b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005798  00000000  00000000  0013ed90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00144528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000bc 	.word	0x200000bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b74 	.word	0x08008b74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c0 	.word	0x200000c0
 80001cc:	08008b74 	.word	0x08008b74

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <led_task>:
 * @note The task must be notified when a new command is available.									   *
 * @note The function utilizes software timers to control LED effects.								   *
 ******************************************************************************************************/

void led_task(void *param)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;
	int freq = 2; // Frequency in Hz
 8000d84:	2302      	movs	r3, #2
 8000d86:	60bb      	str	r3, [r7, #8]
	int period = 500; // Period in ms
 8000d88:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d8c:	617b      	str	r3, [r7, #20]

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2300      	movs	r3, #0
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f005 ff80 	bl	8006ca0 <xTaskGenericNotifyWait>

		// Display LED menu for the user
		xQueueSend(q_print, &msg_led_menu, portMAX_DELAY);
 8000da0:	4b7d      	ldr	r3, [pc, #500]	@ (8000f98 <led_task+0x21c>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	2300      	movs	r3, #0
 8000da6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000daa:	497c      	ldr	r1, [pc, #496]	@ (8000f9c <led_task+0x220>)
 8000dac:	f004 fcaa 	bl	8005704 <xQueueGenericSend>

		// Wait for the user to select their desired LED effect
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db8:	9200      	str	r2, [sp, #0]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f005 ff6e 	bl	8006ca0 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	613b      	str	r3, [r7, #16]

		// Process command, adjust LED state, and set software timers accordingly
		if(msg->len <= 4) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	f200 80cb 	bhi.w	8000f68 <led_task+0x1ec>
			if(!strcmp((char*)msg->payload, "None"))			// No effect
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4972      	ldr	r1, [pc, #456]	@ (8000fa0 <led_task+0x224>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff f9fa 	bl	80001d0 <strcmp>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d109      	bne.n	8000df6 <led_task+0x7a>
			{
				set_led_timer(effectNone);
 8000de2:	2004      	movs	r0, #4
 8000de4:	f000 f912 	bl	800100c <set_led_timer>
				curr_led_state = sNone;
 8000de8:	4b6e      	ldr	r3, [pc, #440]	@ (8000fa4 <led_task+0x228>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	701a      	strb	r2, [r3, #0]
				control_all_leds(LED_OFF);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f93e 	bl	8001070 <control_all_leds>
 8000df4:	e0c0      	b.n	8000f78 <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E1")) {		// E1 effect
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	496b      	ldr	r1, [pc, #428]	@ (8000fa8 <led_task+0x22c>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff f9e8 	bl	80001d0 <strcmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d106      	bne.n	8000e14 <led_task+0x98>
				curr_led_state = sEffectE1;
 8000e06:	4b67      	ldr	r3, [pc, #412]	@ (8000fa4 <led_task+0x228>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE1);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 f8fd 	bl	800100c <set_led_timer>
 8000e12:	e0b1      	b.n	8000f78 <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E2")) {		// E2 effect
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4965      	ldr	r1, [pc, #404]	@ (8000fac <led_task+0x230>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff f9d9 	bl	80001d0 <strcmp>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d106      	bne.n	8000e32 <led_task+0xb6>
				curr_led_state = sEffectE2;
 8000e24:	4b5f      	ldr	r3, [pc, #380]	@ (8000fa4 <led_task+0x228>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE2);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f000 f8ee 	bl	800100c <set_led_timer>
 8000e30:	e0a2      	b.n	8000f78 <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E3")) {		// E3 effect
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	495e      	ldr	r1, [pc, #376]	@ (8000fb0 <led_task+0x234>)
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff f9ca 	bl	80001d0 <strcmp>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d106      	bne.n	8000e50 <led_task+0xd4>
				curr_led_state = sEffectE3;
 8000e42:	4b58      	ldr	r3, [pc, #352]	@ (8000fa4 <led_task+0x228>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE3);
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f000 f8df 	bl	800100c <set_led_timer>
 8000e4e:	e093      	b.n	8000f78 <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E4")) {		// E4 effect
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4958      	ldr	r1, [pc, #352]	@ (8000fb4 <led_task+0x238>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff f9bb 	bl	80001d0 <strcmp>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d106      	bne.n	8000e6e <led_task+0xf2>
				curr_led_state = sEffectE4;
 8000e60:	4b50      	ldr	r3, [pc, #320]	@ (8000fa4 <led_task+0x228>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE4);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 f8d0 	bl	800100c <set_led_timer>
 8000e6c:	e084      	b.n	8000f78 <led_task+0x1fc>
			}
			else if (parse_freq_string(msg, &freq)) {			// Frequency adjustment
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	4619      	mov	r1, r3
 8000e74:	6938      	ldr	r0, [r7, #16]
 8000e76:	f000 f9ef 	bl	8001258 <parse_freq_string>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d055      	beq.n	8000f2c <led_task+0x1b0>
				// Check that there is an active effect
				if(sNone == curr_led_state) {
 8000e80:	4b48      	ldr	r3, [pc, #288]	@ (8000fa4 <led_task+0x228>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d108      	bne.n	8000e9a <led_task+0x11e>
					xQueueSend(q_print, &msg_no_active_effect, portMAX_DELAY);
 8000e88:	4b43      	ldr	r3, [pc, #268]	@ (8000f98 <led_task+0x21c>)
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e92:	4949      	ldr	r1, [pc, #292]	@ (8000fb8 <led_task+0x23c>)
 8000e94:	f004 fc36 	bl	8005704 <xQueueGenericSend>
 8000e98:	e06e      	b.n	8000f78 <led_task+0x1fc>
				}
				// Check that frequency is between 1 and 10 Hz
				else if(freq > 10) {
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2b0a      	cmp	r3, #10
 8000e9e:	dd08      	ble.n	8000eb2 <led_task+0x136>
					xQueueSend(q_print, &msg_inv_freq, portMAX_DELAY);
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8000f98 <led_task+0x21c>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eaa:	4944      	ldr	r1, [pc, #272]	@ (8000fbc <led_task+0x240>)
 8000eac:	f004 fc2a 	bl	8005704 <xQueueGenericSend>
 8000eb0:	e062      	b.n	8000f78 <led_task+0x1fc>
				}
				// Change timer frequency
				else {
					period = (1.0 / freq) * 1000;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fb45 	bl	8000544 <__aeabi_i2d>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	f04f 0000 	mov.w	r0, #0
 8000ec2:	493f      	ldr	r1, [pc, #252]	@ (8000fc0 <led_task+0x244>)
 8000ec4:	f7ff fcd2 	bl	800086c <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc4 <led_task+0x248>)
 8000ed6:	f7ff fb9f 	bl	8000618 <__aeabi_dmul>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff fdab 	bl	8000a3c <__aeabi_d2iz>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	617b      	str	r3, [r7, #20]
					if (xTimerChangePeriod(handle_led_timer[curr_led_state], pdMS_TO_TICKS(period), 0) != pdPASS) {
 8000eea:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <led_task+0x228>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <led_task+0x24c>)
 8000ef2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000efc:	fb02 f303 	mul.w	r3, r2, r3
 8000f00:	4a32      	ldr	r2, [pc, #200]	@ (8000fcc <led_task+0x250>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	099a      	lsrs	r2, r3, #6
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	2104      	movs	r1, #4
 8000f10:	f006 fa28 	bl	8007364 <xTimerGenericCommand>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d02e      	beq.n	8000f78 <led_task+0x1fc>
						// If frequency update was not successful, notify the user
						xQueueSend(q_print, &msg_err_freq, portMAX_DELAY);
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <led_task+0x21c>)
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f24:	492a      	ldr	r1, [pc, #168]	@ (8000fd0 <led_task+0x254>)
 8000f26:	f004 fbed 	bl	8005704 <xQueueGenericSend>
 8000f2a:	e025      	b.n	8000f78 <led_task+0x1fc>
					}
				}
			}
			else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4929      	ldr	r1, [pc, #164]	@ (8000fd4 <led_task+0x258>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f94d 	bl	80001d0 <strcmp>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10c      	bne.n	8000f56 <led_task+0x1da>
				// Update the system state
				curr_sys_state = sMainMenu;
 8000f3c:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <led_task+0x25c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <led_task+0x260>)
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	2300      	movs	r3, #0
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f005 ff26 	bl	8006da0 <xTaskGenericNotify>
 8000f54:	e010      	b.n	8000f78 <led_task+0x1fc>
			}
			else												// Invalid response
				xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <led_task+0x21c>)
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f60:	491f      	ldr	r1, [pc, #124]	@ (8000fe0 <led_task+0x264>)
 8000f62:	f004 fbcf 	bl	8005704 <xQueueGenericSend>
 8000f66:	e007      	b.n	8000f78 <led_task+0x1fc>
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <led_task+0x21c>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f72:	491b      	ldr	r1, [pc, #108]	@ (8000fe0 <led_task+0x264>)
 8000f74:	f004 fbc6 	bl	8005704 <xQueueGenericSend>
		}

		// Notify self / led task if not returning to the main menu
		if (sLedMenu == curr_sys_state)
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <led_task+0x25c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	f47f af06 	bne.w	8000d8e <led_task+0x12>
			xTaskNotify(handle_led_task, 0, eNoAction);
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <led_task+0x268>)
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	2300      	movs	r3, #0
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f005 ff06 	bl	8006da0 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000f94:	e6fb      	b.n	8000d8e <led_task+0x12>
 8000f96:	bf00      	nop
 8000f98:	200001c4 	.word	0x200001c4
 8000f9c:	20000010 	.word	0x20000010
 8000fa0:	08008dd4 	.word	0x08008dd4
 8000fa4:	20000014 	.word	0x20000014
 8000fa8:	08008ddc 	.word	0x08008ddc
 8000fac:	08008de0 	.word	0x08008de0
 8000fb0:	08008de4 	.word	0x08008de4
 8000fb4:	08008de8 	.word	0x08008de8
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	2000000c 	.word	0x2000000c
 8000fc0:	3ff00000 	.word	0x3ff00000
 8000fc4:	408f4000 	.word	0x408f4000
 8000fc8:	200001cc 	.word	0x200001cc
 8000fcc:	10624dd3 	.word	0x10624dd3
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	08008dec 	.word	0x08008dec
 8000fd8:	200001dd 	.word	0x200001dd
 8000fdc:	200001b0 	.word	0x200001b0
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	200001bc 	.word	0x200001bc

08000fe8 <led_callback>:
 * @note The function assumes that the timer IDs correspond directly to the LED effects to be executed *
 *       and relies on proper timer setup and management by the calling code.						   *
 ******************************************************************************************************/

void led_callback(TimerHandle_t xTimer)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	// Get timer ID
	int id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f006 fca1 	bl	8007938 <pvTimerGetTimerID>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	60fb      	str	r3, [r7, #12]

	// LED effects correspond to timer ID's
	int effect = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
	execute_led_effect(effect);
 8000ffe:	68b8      	ldr	r0, [r7, #8]
 8001000:	f000 f8c4 	bl	800118c <execute_led_effect>
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <set_led_timer>:
 * @note This function assumes that `handle_led_timer[]` array is properly initialized and contains    *
 *       valid FreeRTOS software timer handles for each LED effect.									   *
 ******************************************************************************************************/

void set_led_timer(led_effect_t effect)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af02      	add	r7, sp, #8
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	// Turn off all timers
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e00e      	b.n	800103a <set_led_timer+0x2e>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 800101c:	4a13      	ldr	r2, [pc, #76]	@ (800106c <set_led_timer+0x60>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	2200      	movs	r2, #0
 800102e:	2103      	movs	r1, #3
 8001030:	f006 f998 	bl	8007364 <xTimerGenericCommand>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b03      	cmp	r3, #3
 800103e:	dded      	ble.n	800101c <set_led_timer+0x10>
	}

	// Start the selected timer
	if(effectNone != effect) {
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d00e      	beq.n	8001064 <set_led_timer+0x58>
		xTimerStart(handle_led_timer[effect], portMAX_DELAY);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4a08      	ldr	r2, [pc, #32]	@ (800106c <set_led_timer+0x60>)
 800104a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800104e:	f005 fa75 	bl	800653c <xTaskGetTickCount>
 8001052:	4602      	mov	r2, r0
 8001054:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2300      	movs	r3, #0
 800105c:	2101      	movs	r1, #1
 800105e:	4620      	mov	r0, r4
 8001060:	f006 f980 	bl	8007364 <xTimerGenericCommand>
	}
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	200001cc 	.word	0x200001cc

08001070 <control_all_leds>:
 * 																									   *
 * @note This function assumes that the macros for each on-board LED are configured correctly.	       *
 ******************************************************************************************************/

void control_all_leds(int state)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, state);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001082:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <control_all_leds+0x50>)
 8001084:	f001 fdd0 	bl	8002c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, state);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001092:	480b      	ldr	r0, [pc, #44]	@ (80010c0 <control_all_leds+0x50>)
 8001094:	f001 fdc8 	bl	8002c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, state);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010a2:	4807      	ldr	r0, [pc, #28]	@ (80010c0 <control_all_leds+0x50>)
 80010a4:	f001 fdc0 	bl	8002c28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, state);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010b2:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <control_all_leds+0x50>)
 80010b4:	f001 fdb8 	bl	8002c28 <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40020c00 	.word	0x40020c00

080010c4 <control_led_group>:
 * @note The provided `led_mode` specifies which LED group should be turned on (ex. LED_EVEN). The	   *
 *       other LED group (ex. LED_ODD) will be turned off.											   *
 ******************************************************************************************************/

void control_led_group(int led_mode)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	// Turn on even LEDs
	if(LED_EVEN == led_mode) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d118      	bne.n	8001104 <control_led_group+0x40>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d8:	4818      	ldr	r0, [pc, #96]	@ (800113c <control_led_group+0x78>)
 80010da:	f001 fda5 	bl	8002c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e4:	4815      	ldr	r0, [pc, #84]	@ (800113c <control_led_group+0x78>)
 80010e6:	f001 fd9f 	bl	8002c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f0:	4812      	ldr	r0, [pc, #72]	@ (800113c <control_led_group+0x78>)
 80010f2:	f001 fd99 	bl	8002c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010fc:	480f      	ldr	r0, [pc, #60]	@ (800113c <control_led_group+0x78>)
 80010fe:	f001 fd93 	bl	8002c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
	}
}
 8001102:	e017      	b.n	8001134 <control_led_group+0x70>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110a:	480c      	ldr	r0, [pc, #48]	@ (800113c <control_led_group+0x78>)
 800110c:	f001 fd8c 	bl	8002c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <control_led_group+0x78>)
 8001118:	f001 fd86 	bl	8002c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <control_led_group+0x78>)
 8001124:	f001 fd80 	bl	8002c28 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800112e:	4803      	ldr	r0, [pc, #12]	@ (800113c <control_led_group+0x78>)
 8001130:	f001 fd7a 	bl	8002c28 <HAL_GPIO_WritePin>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40020c00 	.word	0x40020c00

08001140 <control_single_led>:
 * @note `config` dictates the LED states, ex. 0x05 = 0101 = Green and Red LEDs on, Orange and Blue    *
 *       LEDs off.																					   *
 ******************************************************************************************************/

void control_single_led(int config)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	// Orange		LD3			GPIO_PIN_13		0x2000  //
	// Red			LD5			GPIO_PIN_14		0x4000  //
	// Blue			LD6			GPIO_PIN_15		0x8000  //
	//////////////////////////////////////////////////////

	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e014      	b.n	8001178 <control_single_led+0x38>
		HAL_GPIO_WritePin(GREEN_LED_PORT, (GREEN_LED_PIN << i), ((config >> i) & 0x1));
 800114e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	b299      	uxth	r1, r3
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	fa42 f303 	asr.w	r3, r2, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	4806      	ldr	r0, [pc, #24]	@ (8001188 <control_single_led+0x48>)
 800116e:	f001 fd5b 	bl	8002c28 <HAL_GPIO_WritePin>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3301      	adds	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b03      	cmp	r3, #3
 800117c:	dde7      	ble.n	800114e <control_single_led+0xe>
	}
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40020c00 	.word	0x40020c00

0800118c <execute_led_effect>:
 * @note This function assumes that functions `control_all_leds()`, `control_led_group()`, and 		   *
 *       `control_single_led()` are implemented to control the LEDs accordingly.			 		   *
 ******************************************************************************************************/

void execute_led_effect(int effect)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	// Flag used for effects E1 and E2
	static int flag = 1;
	// i and used for effects E3 and E4
	static int i = 0;

	switch(effect) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d854      	bhi.n	8001244 <execute_led_effect+0xb8>
 800119a:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <execute_led_effect+0x14>)
 800119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a0:	080011b1 	.word	0x080011b1
 80011a4:	080011d5 	.word	0x080011d5
 80011a8:	080011f9 	.word	0x080011f9
 80011ac:	0800121f 	.word	0x0800121f
		case effectE1:
			// Flash all LEDs in unison
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 80011b0:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <execute_led_effect+0xc4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	4a25      	ldr	r2, [pc, #148]	@ (8001250 <execute_led_effect+0xc4>)
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <execute_led_effect+0xc4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <execute_led_effect+0x40>
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ff53 	bl	8001070 <control_all_leds>
			break;
 80011ca:	e03c      	b.n	8001246 <execute_led_effect+0xba>
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f7ff ff4f 	bl	8001070 <control_all_leds>
			break;
 80011d2:	e038      	b.n	8001246 <execute_led_effect+0xba>
		case effectE2:
			// Flash even and odd LEDs back and forth
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <execute_led_effect+0xc4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f083 0301 	eor.w	r3, r3, #1
 80011dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001250 <execute_led_effect+0xc4>)
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <execute_led_effect+0xc4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <execute_led_effect+0x64>
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff ff6b 	bl	80010c4 <control_led_group>
			break;
 80011ee:	e02a      	b.n	8001246 <execute_led_effect+0xba>
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff ff67 	bl	80010c4 <control_led_group>
			break;
 80011f6:	e026      	b.n	8001246 <execute_led_effect+0xba>
		case effectE3:
			// Move the illuminated LED around the circle of on-board LEDs
			control_single_led(0x1 << (i++ % 4));
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <execute_led_effect+0xc8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	4915      	ldr	r1, [pc, #84]	@ (8001254 <execute_led_effect+0xc8>)
 8001200:	600a      	str	r2, [r1, #0]
 8001202:	425a      	negs	r2, r3
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	f002 0203 	and.w	r2, r2, #3
 800120c:	bf58      	it	pl
 800120e:	4253      	negpl	r3, r2
 8001210:	2201      	movs	r2, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff92 	bl	8001140 <control_single_led>
			break;
 800121c:	e013      	b.n	8001246 <execute_led_effect+0xba>
		case effectE4:
			// Move the illuminated LED around the circle of on-board LEDs in opposite direction of effect E3
			control_single_led(0x08 >> (i++ % 4));
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <execute_led_effect+0xc8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	490b      	ldr	r1, [pc, #44]	@ (8001254 <execute_led_effect+0xc8>)
 8001226:	600a      	str	r2, [r1, #0]
 8001228:	425a      	negs	r2, r3
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	bf58      	it	pl
 8001234:	4253      	negpl	r3, r2
 8001236:	2208      	movs	r2, #8
 8001238:	fa42 f303 	asr.w	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff7f 	bl	8001140 <control_single_led>
			break;
 8001242:	e000      	b.n	8001246 <execute_led_effect+0xba>
		default:
			break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000018 	.word	0x20000018
 8001254:	200000d8 	.word	0x200000d8

08001258 <parse_freq_string>:
 *       validate the value range explicitly. It relies on other components to handle invalid values.  *
 ******************************************************************************************************/


int parse_freq_string(message_t *msg, int *freq_Hz)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    // Check if the input string is at least 2 characters long (F and one digit)
    int len = strlen((char *)msg->payload);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ffbd 	bl	80001e4 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	60bb      	str	r3, [r7, #8]
    if (len < 2 || len > 4) return 0;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b01      	cmp	r3, #1
 8001272:	dd02      	ble.n	800127a <parse_freq_string+0x22>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b04      	cmp	r3, #4
 8001278:	dd01      	ble.n	800127e <parse_freq_string+0x26>
 800127a:	2300      	movs	r3, #0
 800127c:	e025      	b.n	80012ca <parse_freq_string+0x72>

    // Check if the first character is 'F'
    if (msg->payload[0] != 'F') return 0;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b46      	cmp	r3, #70	@ 0x46
 8001284:	d001      	beq.n	800128a <parse_freq_string+0x32>
 8001286:	2300      	movs	r3, #0
 8001288:	e01f      	b.n	80012ca <parse_freq_string+0x72>

    // Check if the remaining characters are digits
    for (int i = 1; i < len; i++)
 800128a:	2301      	movs	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	e010      	b.n	80012b2 <parse_freq_string+0x5a>
    {
        if (!isdigit(msg->payload[i])) return 0;
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4413      	add	r3, r2
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <parse_freq_string+0x7c>)
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <parse_freq_string+0x54>
 80012a8:	2300      	movs	r3, #0
 80012aa:	e00e      	b.n	80012ca <parse_freq_string+0x72>
    for (int i = 1; i < len; i++)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3301      	adds	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbea      	blt.n	8001290 <parse_freq_string+0x38>
    }

    // Convert the numeric part to an integer
    *freq_Hz = freq_str_to_int(msg, len);
 80012ba:	68b9      	ldr	r1, [r7, #8]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f80b 	bl	80012d8 <freq_str_to_int>
 80012c2:	4602      	mov	r2, r0
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	601a      	str	r2, [r3, #0]
    return 1;
 80012c8:	2301      	movs	r3, #1
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	080091bc 	.word	0x080091bc

080012d8 <freq_str_to_int>:
 *       invalid formats or edge cases (e.g., non-numeric characters). It relies on proper validation  *
 *       by the calling function.																	   *
 ******************************************************************************************************/

int freq_str_to_int(message_t *msg, int len)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	int ret = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<len; i++) {
 80012e6:	2301      	movs	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	e00f      	b.n	800130c <freq_str_to_int+0x34>
		ret = ret * 10 + (msg->payload[i] - '0'); // Convert from ASCII to an integer
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	3b30      	subs	r3, #48	@ 0x30
 8001302:	440b      	add	r3, r1
 8001304:	60fb      	str	r3, [r7, #12]
	for(int i=1; i<len; i++) {
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	3301      	adds	r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbeb      	blt.n	80012ec <freq_str_to_int+0x14>
	}

	return ret;
 8001314:	68fb      	ldr	r3, [r7, #12]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <rtc_task>:
/****************************************************
 *  Public functions                                *
 ****************************************************/

void rtc_task(void *param)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af02      	add	r7, sp, #8
 800132a:	6078      	str	r0, [r7, #4]
	message_t *msg;

	while(1) {

		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800132c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f005 fcb1 	bl	8006ca0 <xTaskGenericNotifyWait>

		// Display RTC menu for the user
		xQueueSend(q_print, &msg_rtc_menu_1, portMAX_DELAY);
 800133e:	4bb1      	ldr	r3, [pc, #708]	@ (8001604 <rtc_task+0x2e0>)
 8001340:	6818      	ldr	r0, [r3, #0]
 8001342:	2300      	movs	r3, #0
 8001344:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001348:	49af      	ldr	r1, [pc, #700]	@ (8001608 <rtc_task+0x2e4>)
 800134a:	f004 f9db 	bl	8005704 <xQueueGenericSend>
		show_time_date();
 800134e:	f000 fa33 	bl	80017b8 <show_time_date>
		xQueueSend(q_print, &msg_rtc_menu_2, portMAX_DELAY);
 8001352:	4bac      	ldr	r3, [pc, #688]	@ (8001604 <rtc_task+0x2e0>)
 8001354:	6818      	ldr	r0, [r3, #0]
 8001356:	2300      	movs	r3, #0
 8001358:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800135c:	49ab      	ldr	r1, [pc, #684]	@ (800160c <rtc_task+0x2e8>)
 800135e:	f004 f9d1 	bl	8005704 <xQueueGenericSend>

		while(curr_sys_state != sMainMenu) {
 8001362:	e194      	b.n	800168e <rtc_task+0x36a>
			// Wait for the user to select their desired LED effect
			xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001364:	f107 0308 	add.w	r3, r7, #8
 8001368:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800136c:	9200      	str	r2, [sp, #0]
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	2000      	movs	r0, #0
 8001374:	f005 fc94 	bl	8006ca0 <xTaskGenericNotifyWait>
			msg = (message_t*)msg_addr;
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	617b      	str	r3, [r7, #20]

			switch(curr_sys_state) {
 800137c:	4ba4      	ldr	r3, [pc, #656]	@ (8001610 <rtc_task+0x2ec>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	2b04      	cmp	r3, #4
 8001382:	f000 80e2 	beq.w	800154a <rtc_task+0x226>
 8001386:	2b04      	cmp	r3, #4
 8001388:	f300 8172 	bgt.w	8001670 <rtc_task+0x34c>
 800138c:	2b02      	cmp	r3, #2
 800138e:	d002      	beq.n	8001396 <rtc_task+0x72>
 8001390:	2b03      	cmp	r3, #3
 8001392:	d050      	beq.n	8001436 <rtc_task+0x112>
 8001394:	e16c      	b.n	8001670 <rtc_task+0x34c>
				case sRtcMenu:
					// Process command, update date / time accordingly
					if(msg->len <= 4) {
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b04      	cmp	r3, #4
 800139c:	d83f      	bhi.n	800141e <rtc_task+0xfa>
						if(!strcmp((char*)msg->payload, "Date")) {			// Configure date
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	499c      	ldr	r1, [pc, #624]	@ (8001614 <rtc_task+0x2f0>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe ff14 	bl	80001d0 <strcmp>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10b      	bne.n	80013c6 <rtc_task+0xa2>
							curr_sys_state = sRtcDateConfig;
 80013ae:	4b98      	ldr	r3, [pc, #608]	@ (8001610 <rtc_task+0x2ec>)
 80013b0:	2203      	movs	r2, #3
 80013b2:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 80013b4:	4b93      	ldr	r3, [pc, #588]	@ (8001604 <rtc_task+0x2e0>)
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	2300      	movs	r3, #0
 80013ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013be:	4996      	ldr	r1, [pc, #600]	@ (8001618 <rtc_task+0x2f4>)
 80013c0:	f004 f9a0 	bl	8005704 <xQueueGenericSend>
					else {
						// If user input is longer than 4 characters, notify user of invalid response
						curr_sys_state = sMainMenu;
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
					}
					break;
 80013c4:	e163      	b.n	800168e <rtc_task+0x36a>
						else if (!strcmp((char*)msg->payload, "Time")) {	// Configure time
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	4994      	ldr	r1, [pc, #592]	@ (800161c <rtc_task+0x2f8>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe ff00 	bl	80001d0 <strcmp>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10b      	bne.n	80013ee <rtc_task+0xca>
							curr_sys_state = sRtcTimeConfig;
 80013d6:	4b8e      	ldr	r3, [pc, #568]	@ (8001610 <rtc_task+0x2ec>)
 80013d8:	2204      	movs	r2, #4
 80013da:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 80013dc:	4b89      	ldr	r3, [pc, #548]	@ (8001604 <rtc_task+0x2e0>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	2300      	movs	r3, #0
 80013e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013e6:	498e      	ldr	r1, [pc, #568]	@ (8001620 <rtc_task+0x2fc>)
 80013e8:	f004 f98c 	bl	8005704 <xQueueGenericSend>
					break;
 80013ec:	e14f      	b.n	800168e <rtc_task+0x36a>
						else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	498c      	ldr	r1, [pc, #560]	@ (8001624 <rtc_task+0x300>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe feec 	bl	80001d0 <strcmp>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <rtc_task+0xe2>
							curr_sys_state = sMainMenu;
 80013fe:	4b84      	ldr	r3, [pc, #528]	@ (8001610 <rtc_task+0x2ec>)
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
					break;
 8001404:	e143      	b.n	800168e <rtc_task+0x36a>
							curr_sys_state = sMainMenu;
 8001406:	4b82      	ldr	r3, [pc, #520]	@ (8001610 <rtc_task+0x2ec>)
 8001408:	2200      	movs	r2, #0
 800140a:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 800140c:	4b7d      	ldr	r3, [pc, #500]	@ (8001604 <rtc_task+0x2e0>)
 800140e:	6818      	ldr	r0, [r3, #0]
 8001410:	2300      	movs	r3, #0
 8001412:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001416:	4984      	ldr	r1, [pc, #528]	@ (8001628 <rtc_task+0x304>)
 8001418:	f004 f974 	bl	8005704 <xQueueGenericSend>
					break;
 800141c:	e137      	b.n	800168e <rtc_task+0x36a>
						curr_sys_state = sMainMenu;
 800141e:	4b7c      	ldr	r3, [pc, #496]	@ (8001610 <rtc_task+0x2ec>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001424:	4b77      	ldr	r3, [pc, #476]	@ (8001604 <rtc_task+0x2e0>)
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800142e:	497e      	ldr	r1, [pc, #504]	@ (8001628 <rtc_task+0x304>)
 8001430:	f004 f968 	bl	8005704 <xQueueGenericSend>
					break;
 8001434:	e12b      	b.n	800168e <rtc_task+0x36a>
				case sRtcDateConfig:
					switch(curr_rtc_state) {
 8001436:	4b7d      	ldr	r3, [pc, #500]	@ (800162c <rtc_task+0x308>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b03      	cmp	r3, #3
 800143c:	f200 8124 	bhi.w	8001688 <rtc_task+0x364>
 8001440:	a201      	add	r2, pc, #4	@ (adr r2, 8001448 <rtc_task+0x124>)
 8001442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001446:	bf00      	nop
 8001448:	08001459 	.word	0x08001459
 800144c:	08001489 	.word	0x08001489
 8001450:	080014b9 	.word	0x080014b9
 8001454:	080014e9 	.word	0x080014e9
						case MONTH_CONFIG:
							uint8_t m = getnumber(msg->payload, msg->len);
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	68db      	ldr	r3, [r3, #12]
 800145e:	4619      	mov	r1, r3
 8001460:	4610      	mov	r0, r2
 8001462:	f000 f92d 	bl	80016c0 <getnumber>
 8001466:	4603      	mov	r3, r0
 8001468:	737b      	strb	r3, [r7, #13]
							date.Month = m;
 800146a:	4a71      	ldr	r2, [pc, #452]	@ (8001630 <rtc_task+0x30c>)
 800146c:	7b7b      	ldrb	r3, [r7, #13]
 800146e:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = DATE_CONFIG;
 8001470:	4b6e      	ldr	r3, [pc, #440]	@ (800162c <rtc_task+0x308>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 8001476:	4b63      	ldr	r3, [pc, #396]	@ (8001604 <rtc_task+0x2e0>)
 8001478:	6818      	ldr	r0, [r3, #0]
 800147a:	2300      	movs	r3, #0
 800147c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001480:	496c      	ldr	r1, [pc, #432]	@ (8001634 <rtc_task+0x310>)
 8001482:	f004 f93f 	bl	8005704 <xQueueGenericSend>
							break;
 8001486:	e05f      	b.n	8001548 <rtc_task+0x224>
						case DATE_CONFIG:
							uint8_t d = getnumber(msg->payload, msg->len);
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	4619      	mov	r1, r3
 8001490:	4610      	mov	r0, r2
 8001492:	f000 f915 	bl	80016c0 <getnumber>
 8001496:	4603      	mov	r3, r0
 8001498:	73bb      	strb	r3, [r7, #14]
							date.Date = d;
 800149a:	4a65      	ldr	r2, [pc, #404]	@ (8001630 <rtc_task+0x30c>)
 800149c:	7bbb      	ldrb	r3, [r7, #14]
 800149e:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = YEAR_CONFIG;
 80014a0:	4b62      	ldr	r3, [pc, #392]	@ (800162c <rtc_task+0x308>)
 80014a2:	2202      	movs	r2, #2
 80014a4:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 80014a6:	4b57      	ldr	r3, [pc, #348]	@ (8001604 <rtc_task+0x2e0>)
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	2300      	movs	r3, #0
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014b0:	4961      	ldr	r1, [pc, #388]	@ (8001638 <rtc_task+0x314>)
 80014b2:	f004 f927 	bl	8005704 <xQueueGenericSend>
							break;
 80014b6:	e047      	b.n	8001548 <rtc_task+0x224>
						case YEAR_CONFIG:
							uint8_t y = getnumber(msg->payload, msg->len);
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	4619      	mov	r1, r3
 80014c0:	4610      	mov	r0, r2
 80014c2:	f000 f8fd 	bl	80016c0 <getnumber>
 80014c6:	4603      	mov	r3, r0
 80014c8:	73fb      	strb	r3, [r7, #15]
							date.Year = y;
 80014ca:	4a59      	ldr	r2, [pc, #356]	@ (8001630 <rtc_task+0x30c>)
 80014cc:	7bfb      	ldrb	r3, [r7, #15]
 80014ce:	70d3      	strb	r3, [r2, #3]
							curr_rtc_state = DAY_CONFIG;
 80014d0:	4b56      	ldr	r3, [pc, #344]	@ (800162c <rtc_task+0x308>)
 80014d2:	2203      	movs	r2, #3
 80014d4:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 80014d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001604 <rtc_task+0x2e0>)
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	2300      	movs	r3, #0
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014e0:	4956      	ldr	r1, [pc, #344]	@ (800163c <rtc_task+0x318>)
 80014e2:	f004 f90f 	bl	8005704 <xQueueGenericSend>
							break;
 80014e6:	e02f      	b.n	8001548 <rtc_task+0x224>
						case DAY_CONFIG:
							uint8_t day = getnumber(msg->payload, msg->len);
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f000 f8e5 	bl	80016c0 <getnumber>
 80014f6:	4603      	mov	r3, r0
 80014f8:	743b      	strb	r3, [r7, #16]
							date.WeekDay = day;
 80014fa:	4a4d      	ldr	r2, [pc, #308]	@ (8001630 <rtc_task+0x30c>)
 80014fc:	7c3b      	ldrb	r3, [r7, #16]
 80014fe:	7013      	strb	r3, [r2, #0]

							if(!validate_rtc_information(NULL, &date)) {
 8001500:	494b      	ldr	r1, [pc, #300]	@ (8001630 <rtc_task+0x30c>)
 8001502:	2000      	movs	r0, #0
 8001504:	f000 f8fd 	bl	8001702 <validate_rtc_information>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d10d      	bne.n	800152a <rtc_task+0x206>
								rtc_configure_date(&date);
 800150e:	4848      	ldr	r0, [pc, #288]	@ (8001630 <rtc_task+0x30c>)
 8001510:	f000 f942 	bl	8001798 <rtc_configure_date>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001514:	4b3b      	ldr	r3, [pc, #236]	@ (8001604 <rtc_task+0x2e0>)
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	2300      	movs	r3, #0
 800151a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800151e:	4948      	ldr	r1, [pc, #288]	@ (8001640 <rtc_task+0x31c>)
 8001520:	f004 f8f0 	bl	8005704 <xQueueGenericSend>
								show_time_date();
 8001524:	f000 f948 	bl	80017b8 <show_time_date>
 8001528:	e007      	b.n	800153a <rtc_task+0x216>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 800152a:	4b36      	ldr	r3, [pc, #216]	@ (8001604 <rtc_task+0x2e0>)
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	2300      	movs	r3, #0
 8001530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001534:	493c      	ldr	r1, [pc, #240]	@ (8001628 <rtc_task+0x304>)
 8001536:	f004 f8e5 	bl	8005704 <xQueueGenericSend>
							}

							// Update system state
							curr_sys_state = sMainMenu;
 800153a:	4b35      	ldr	r3, [pc, #212]	@ (8001610 <rtc_task+0x2ec>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 8001540:	4b3a      	ldr	r3, [pc, #232]	@ (800162c <rtc_task+0x308>)
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
							break;
 8001546:	bf00      	nop
					}
					break;
 8001548:	e09e      	b.n	8001688 <rtc_task+0x364>
				case sRtcTimeConfig:
					switch(curr_rtc_state) {
 800154a:	4b38      	ldr	r3, [pc, #224]	@ (800162c <rtc_task+0x308>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d037      	beq.n	80015c2 <rtc_task+0x29e>
 8001552:	2b02      	cmp	r3, #2
 8001554:	f300 809a 	bgt.w	800168c <rtc_task+0x368>
 8001558:	2b00      	cmp	r3, #0
 800155a:	d002      	beq.n	8001562 <rtc_task+0x23e>
 800155c:	2b01      	cmp	r3, #1
 800155e:	d018      	beq.n	8001592 <rtc_task+0x26e>
							// Update system state
							curr_sys_state = sMainMenu;
							curr_rtc_state = 0;
							break;
					}
					break;
 8001560:	e094      	b.n	800168c <rtc_task+0x368>
							uint8_t hour = getnumber(msg->payload, msg->len);
 8001562:	697a      	ldr	r2, [r7, #20]
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	4619      	mov	r1, r3
 800156a:	4610      	mov	r0, r2
 800156c:	f000 f8a8 	bl	80016c0 <getnumber>
 8001570:	4603      	mov	r3, r0
 8001572:	747b      	strb	r3, [r7, #17]
							time.Hours = hour;
 8001574:	4a33      	ldr	r2, [pc, #204]	@ (8001644 <rtc_task+0x320>)
 8001576:	7c7b      	ldrb	r3, [r7, #17]
 8001578:	7013      	strb	r3, [r2, #0]
							curr_rtc_state = MM_CONFIG;
 800157a:	4b2c      	ldr	r3, [pc, #176]	@ (800162c <rtc_task+0x308>)
 800157c:	2201      	movs	r2, #1
 800157e:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 8001580:	4b20      	ldr	r3, [pc, #128]	@ (8001604 <rtc_task+0x2e0>)
 8001582:	6818      	ldr	r0, [r3, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800158a:	492f      	ldr	r1, [pc, #188]	@ (8001648 <rtc_task+0x324>)
 800158c:	f004 f8ba 	bl	8005704 <xQueueGenericSend>
							break;
 8001590:	e06d      	b.n	800166e <rtc_task+0x34a>
							uint8_t min = getnumber(msg->payload, msg->len);
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	4619      	mov	r1, r3
 800159a:	4610      	mov	r0, r2
 800159c:	f000 f890 	bl	80016c0 <getnumber>
 80015a0:	4603      	mov	r3, r0
 80015a2:	74bb      	strb	r3, [r7, #18]
							time.Minutes = min;
 80015a4:	4a27      	ldr	r2, [pc, #156]	@ (8001644 <rtc_task+0x320>)
 80015a6:	7cbb      	ldrb	r3, [r7, #18]
 80015a8:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = SS_CONFIG;
 80015aa:	4b20      	ldr	r3, [pc, #128]	@ (800162c <rtc_task+0x308>)
 80015ac:	2202      	movs	r2, #2
 80015ae:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 80015b0:	4b14      	ldr	r3, [pc, #80]	@ (8001604 <rtc_task+0x2e0>)
 80015b2:	6818      	ldr	r0, [r3, #0]
 80015b4:	2300      	movs	r3, #0
 80015b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015ba:	4924      	ldr	r1, [pc, #144]	@ (800164c <rtc_task+0x328>)
 80015bc:	f004 f8a2 	bl	8005704 <xQueueGenericSend>
							break;
 80015c0:	e055      	b.n	800166e <rtc_task+0x34a>
							uint8_t sec = getnumber(msg->payload, msg->len);
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	4619      	mov	r1, r3
 80015ca:	4610      	mov	r0, r2
 80015cc:	f000 f878 	bl	80016c0 <getnumber>
 80015d0:	4603      	mov	r3, r0
 80015d2:	74fb      	strb	r3, [r7, #19]
							time.Seconds = sec;
 80015d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001644 <rtc_task+0x320>)
 80015d6:	7cfb      	ldrb	r3, [r7, #19]
 80015d8:	7093      	strb	r3, [r2, #2]
							if(!validate_rtc_information(&time, NULL)) {
 80015da:	2100      	movs	r1, #0
 80015dc:	4819      	ldr	r0, [pc, #100]	@ (8001644 <rtc_task+0x320>)
 80015de:	f000 f890 	bl	8001702 <validate_rtc_information>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d133      	bne.n	8001650 <rtc_task+0x32c>
								rtc_configure_time(&time);
 80015e8:	4816      	ldr	r0, [pc, #88]	@ (8001644 <rtc_task+0x320>)
 80015ea:	f000 f8bd 	bl	8001768 <rtc_configure_time>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 80015ee:	4b05      	ldr	r3, [pc, #20]	@ (8001604 <rtc_task+0x2e0>)
 80015f0:	6818      	ldr	r0, [r3, #0]
 80015f2:	2300      	movs	r3, #0
 80015f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015f8:	4911      	ldr	r1, [pc, #68]	@ (8001640 <rtc_task+0x31c>)
 80015fa:	f004 f883 	bl	8005704 <xQueueGenericSend>
								show_time_date();
 80015fe:	f000 f8db 	bl	80017b8 <show_time_date>
 8001602:	e02d      	b.n	8001660 <rtc_task+0x33c>
 8001604:	200001c4 	.word	0x200001c4
 8001608:	20000040 	.word	0x20000040
 800160c:	20000044 	.word	0x20000044
 8001610:	200001dd 	.word	0x200001dd
 8001614:	08008fd4 	.word	0x08008fd4
 8001618:	20000034 	.word	0x20000034
 800161c:	08008fdc 	.word	0x08008fdc
 8001620:	20000024 	.word	0x20000024
 8001624:	08008fe4 	.word	0x08008fe4
 8001628:	2000001c 	.word	0x2000001c
 800162c:	200000dc 	.word	0x200000dc
 8001630:	200000f4 	.word	0x200000f4
 8001634:	20000030 	.word	0x20000030
 8001638:	20000038 	.word	0x20000038
 800163c:	2000003c 	.word	0x2000003c
 8001640:	20000020 	.word	0x20000020
 8001644:	200000e0 	.word	0x200000e0
 8001648:	20000028 	.word	0x20000028
 800164c:	2000002c 	.word	0x2000002c
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001650:	4b16      	ldr	r3, [pc, #88]	@ (80016ac <rtc_task+0x388>)
 8001652:	6818      	ldr	r0, [r3, #0]
 8001654:	2300      	movs	r3, #0
 8001656:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800165a:	4915      	ldr	r1, [pc, #84]	@ (80016b0 <rtc_task+0x38c>)
 800165c:	f004 f852 	bl	8005704 <xQueueGenericSend>
							curr_sys_state = sMainMenu;
 8001660:	4b14      	ldr	r3, [pc, #80]	@ (80016b4 <rtc_task+0x390>)
 8001662:	2200      	movs	r2, #0
 8001664:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <rtc_task+0x394>)
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
							break;
 800166c:	bf00      	nop
					break;
 800166e:	e00d      	b.n	800168c <rtc_task+0x368>
				default:
					curr_sys_state = sMainMenu;
 8001670:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <rtc_task+0x390>)
 8001672:	2200      	movs	r2, #0
 8001674:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <rtc_task+0x388>)
 8001678:	6818      	ldr	r0, [r3, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001680:	490b      	ldr	r1, [pc, #44]	@ (80016b0 <rtc_task+0x38c>)
 8001682:	f004 f83f 	bl	8005704 <xQueueGenericSend>
					break;
 8001686:	e002      	b.n	800168e <rtc_task+0x36a>
					break;
 8001688:	bf00      	nop
 800168a:	e000      	b.n	800168e <rtc_task+0x36a>
					break;
 800168c:	bf00      	nop
		while(curr_sys_state != sMainMenu) {
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <rtc_task+0x390>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f47f ae66 	bne.w	8001364 <rtc_task+0x40>
			}

		} // while end

		// Notify the main menu task
		xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8001698:	4b08      	ldr	r3, [pc, #32]	@ (80016bc <rtc_task+0x398>)
 800169a:	6818      	ldr	r0, [r3, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	9300      	str	r3, [sp, #0]
 80016a0:	2300      	movs	r3, #0
 80016a2:	2200      	movs	r2, #0
 80016a4:	2100      	movs	r1, #0
 80016a6:	f005 fb7b 	bl	8006da0 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80016aa:	e63f      	b.n	800132c <rtc_task+0x8>
 80016ac:	200001c4 	.word	0x200001c4
 80016b0:	2000001c 	.word	0x2000001c
 80016b4:	200001dd 	.word	0x200001dd
 80016b8:	200000dc 	.word	0x200000dc
 80016bc:	200001b0 	.word	0x200001b0

080016c0 <getnumber>:
/****************************************************
 *  Private functions                               *
 ****************************************************/

uint8_t getnumber(uint8_t *p, int len)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
	return (len > 1) ? ( ((p[0]-48) * 10) + (p[1]-48) ) : (p[0]-48);
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	dd0e      	ble.n	80016ee <getnumber+0x2e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	461a      	mov	r2, r3
 80016d6:	0092      	lsls	r2, r2, #2
 80016d8:	4413      	add	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	b2da      	uxtb	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	3301      	adds	r3, #1
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	4413      	add	r3, r2
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	3b10      	subs	r3, #16
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	e003      	b.n	80016f6 <getnumber+0x36>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	3b30      	subs	r3, #48	@ 0x30
 80016f4:	b2db      	uxtb	r3, r3
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <validate_rtc_information>:

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
 800170a:	6039      	str	r1, [r7, #0]
	if(time) {
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00d      	beq.n	800172e <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b0c      	cmp	r3, #12
 8001718:	d807      	bhi.n	800172a <validate_rtc_information+0x28>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	785b      	ldrb	r3, [r3, #1]
 800171e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001720:	d803      	bhi.n	800172a <validate_rtc_information+0x28>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	789b      	ldrb	r3, [r3, #2]
 8001726:	2b3b      	cmp	r3, #59	@ 0x3b
 8001728:	d901      	bls.n	800172e <validate_rtc_information+0x2c>
			return 1;
 800172a:	2301      	movs	r3, #1
 800172c:	e015      	b.n	800175a <validate_rtc_information+0x58>
	}
	if(date) {
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d011      	beq.n	8001758 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	789b      	ldrb	r3, [r3, #2]
 8001738:	2b1f      	cmp	r3, #31
 800173a:	d80b      	bhi.n	8001754 <validate_rtc_information+0x52>
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b07      	cmp	r3, #7
 8001742:	d807      	bhi.n	8001754 <validate_rtc_information+0x52>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	78db      	ldrb	r3, [r3, #3]
 8001748:	2b63      	cmp	r3, #99	@ 0x63
 800174a:	d803      	bhi.n	8001754 <validate_rtc_information+0x52>
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	785b      	ldrb	r3, [r3, #1]
 8001750:	2b0c      	cmp	r3, #12
 8001752:	d901      	bls.n	8001758 <validate_rtc_information+0x56>
			return 1;
 8001754:	2301      	movs	r3, #1
 8001756:	e000      	b.n	800175a <validate_rtc_information+0x58>
	}

	return 0;
 8001758:	2300      	movs	r3, #0
}
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
	...

08001768 <rtc_configure_time>:

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8001782:	2200      	movs	r2, #0
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	4803      	ldr	r0, [pc, #12]	@ (8001794 <rtc_configure_time+0x2c>)
 8001788:	f002 f897 	bl	80038ba <HAL_RTC_SetTime>
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20000148 	.word	0x20000148

08001798 <rtc_configure_date>:

void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	4803      	ldr	r0, [pc, #12]	@ (80017b4 <rtc_configure_date+0x1c>)
 80017a6:	f002 f980 	bl	8003aaa <HAL_RTC_SetDate>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000148 	.word	0x20000148

080017b8 <show_time_date>:

void show_time_date(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	@ 0x30
 80017bc:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 80017be:	f107 0318 	add.w	r3, r7, #24
 80017c2:	2204      	movs	r2, #4
 80017c4:	2100      	movs	r1, #0
 80017c6:	4618      	mov	r0, r3
 80017c8:	f006 fd54 	bl	8008274 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2214      	movs	r2, #20
 80017d0:	2100      	movs	r1, #0
 80017d2:	4618      	mov	r0, r3
 80017d4:	f006 fd4e 	bl	8008274 <memset>

	// Get the RTC current time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	2200      	movs	r2, #0
 80017dc:	4619      	mov	r1, r3
 80017de:	4821      	ldr	r0, [pc, #132]	@ (8001864 <show_time_date+0xac>)
 80017e0:	f002 f905 	bl	80039ee <HAL_RTC_GetTime>
	// Get the RTC current date
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 80017e4:	f107 0318 	add.w	r3, r7, #24
 80017e8:	2200      	movs	r2, #0
 80017ea:	4619      	mov	r1, r3
 80017ec:	481d      	ldr	r0, [pc, #116]	@ (8001864 <show_time_date+0xac>)
 80017ee:	f002 f9e0 	bl	8003bb2 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <show_time_date+0x44>
 80017f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <show_time_date+0xb0>)
 80017fa:	e000      	b.n	80017fe <show_time_date+0x46>
 80017fc:	4b1b      	ldr	r3, [pc, #108]	@ (800186c <show_time_date+0xb4>)
 80017fe:	61fb      	str	r3, [r7, #28]

	// Display time format: hh:mm:ss [AM/PM]
	sprintf((char*)showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time & Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8001800:	793b      	ldrb	r3, [r7, #4]
 8001802:	4618      	mov	r0, r3
 8001804:	797b      	ldrb	r3, [r7, #5]
 8001806:	461a      	mov	r2, r3
 8001808:	79bb      	ldrb	r3, [r7, #6]
 800180a:	4619      	mov	r1, r3
 800180c:	69fb      	ldr	r3, [r7, #28]
 800180e:	9302      	str	r3, [sp, #8]
 8001810:	9101      	str	r1, [sp, #4]
 8001812:	9200      	str	r2, [sp, #0]
 8001814:	4603      	mov	r3, r0
 8001816:	4a16      	ldr	r2, [pc, #88]	@ (8001870 <show_time_date+0xb8>)
 8001818:	4916      	ldr	r1, [pc, #88]	@ (8001874 <show_time_date+0xbc>)
 800181a:	4817      	ldr	r0, [pc, #92]	@ (8001878 <show_time_date+0xc0>)
 800181c:	f006 fd0a 	bl	8008234 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 8001820:	4b16      	ldr	r3, [pc, #88]	@ (800187c <show_time_date+0xc4>)
 8001822:	6818      	ldr	r0, [r3, #0]
 8001824:	2300      	movs	r3, #0
 8001826:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800182a:	4915      	ldr	r1, [pc, #84]	@ (8001880 <show_time_date+0xc8>)
 800182c:	f003 ff6a 	bl	8005704 <xQueueGenericSend>

	// Display date format: date-month-year
	sprintf((char*)showdate, "\t%02d-%02d-%02d\n", rtc_date.Month, rtc_date.Date, rtc_date.Year + 2000);
 8001830:	7e7b      	ldrb	r3, [r7, #25]
 8001832:	461a      	mov	r2, r3
 8001834:	7ebb      	ldrb	r3, [r7, #26]
 8001836:	4619      	mov	r1, r3
 8001838:	7efb      	ldrb	r3, [r7, #27]
 800183a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	460b      	mov	r3, r1
 8001842:	4910      	ldr	r1, [pc, #64]	@ (8001884 <show_time_date+0xcc>)
 8001844:	4810      	ldr	r0, [pc, #64]	@ (8001888 <show_time_date+0xd0>)
 8001846:	f006 fcf5 	bl	8008234 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 800184a:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <show_time_date+0xc4>)
 800184c:	6818      	ldr	r0, [r3, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001854:	490d      	ldr	r1, [pc, #52]	@ (800188c <show_time_date+0xd4>)
 8001856:	f003 ff55 	bl	8005704 <xQueueGenericSend>
}
 800185a:	bf00      	nop
 800185c:	3720      	adds	r7, #32
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000148 	.word	0x20000148
 8001868:	08008fec 	.word	0x08008fec
 800186c:	08008ff0 	.word	0x08008ff0
 8001870:	08008ff4 	.word	0x08008ff4
 8001874:	0800900c 	.word	0x0800900c
 8001878:	200000f8 	.word	0x200000f8
 800187c:	200001c4 	.word	0x200001c4
 8001880:	20000048 	.word	0x20000048
 8001884:	08009024 	.word	0x08009024
 8001888:	20000120 	.word	0x20000120
 800188c:	2000004c 	.word	0x2000004c

08001890 <main_menu_task>:
 *       command is available.                                                                         *
 * @note The main menu is displayed, and the user input is processed. Invalid inputs are handled and   *
 * an error message is sent to the print queue.                                                        *
 ******************************************************************************************************/
void main_menu_task(void *param)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b088      	sub	sp, #32
 8001894:	af02      	add	r7, sp, #8
 8001896:	6078      	str	r0, [r7, #4]
	int option;

	while(1) {

		// Present the main menu to the user
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 8001898:	4b33      	ldr	r3, [pc, #204]	@ (8001968 <main_menu_task+0xd8>)
 800189a:	6818      	ldr	r0, [r3, #0]
 800189c:	2300      	movs	r3, #0
 800189e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018a2:	4932      	ldr	r1, [pc, #200]	@ (800196c <main_menu_task+0xdc>)
 80018a4:	f003 ff2e 	bl	8005704 <xQueueGenericSend>

		// Wait for user to select a menu option
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 80018a8:	f107 030c 	add.w	r3, r7, #12
 80018ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018b0:	9200      	str	r2, [sp, #0]
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2000      	movs	r0, #0
 80018b8:	f005 f9f2 	bl	8006ca0 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	617b      	str	r3, [r7, #20]

		if(msg->len == 1) {
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d13c      	bne.n	8001942 <main_menu_task+0xb2>
			// Get user option, convert from ASCII to number
			option = msg->payload[0] - 48;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	3b30      	subs	r3, #48	@ 0x30
 80018ce:	613b      	str	r3, [r7, #16]
			switch(option) {
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d023      	beq.n	800191e <main_menu_task+0x8e>
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	dc29      	bgt.n	8001930 <main_menu_task+0xa0>
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <main_menu_task+0x5a>
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d00d      	beq.n	8001904 <main_menu_task+0x74>
 80018e8:	e022      	b.n	8001930 <main_menu_task+0xa0>
				case 0:
					// User selection: LED menu
					curr_sys_state = sLedMenu;
 80018ea:	4b21      	ldr	r3, [pc, #132]	@ (8001970 <main_menu_task+0xe0>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 80018f0:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <main_menu_task+0xe4>)
 80018f2:	6818      	ldr	r0, [r3, #0]
 80018f4:	2300      	movs	r3, #0
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	2300      	movs	r3, #0
 80018fa:	2200      	movs	r2, #0
 80018fc:	2100      	movs	r1, #0
 80018fe:	f005 fa4f 	bl	8006da0 <xTaskGenericNotify>
					break;
 8001902:	e027      	b.n	8001954 <main_menu_task+0xc4>
				case 1:
					curr_sys_state = sRtcMenu;
 8001904:	4b1a      	ldr	r3, [pc, #104]	@ (8001970 <main_menu_task+0xe0>)
 8001906:	2202      	movs	r2, #2
 8001908:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 800190a:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <main_menu_task+0xe8>)
 800190c:	6818      	ldr	r0, [r3, #0]
 800190e:	2300      	movs	r3, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	2200      	movs	r2, #0
 8001916:	2100      	movs	r1, #0
 8001918:	f005 fa42 	bl	8006da0 <xTaskGenericNotify>
					break;
 800191c:	e01a      	b.n	8001954 <main_menu_task+0xc4>
				case 2:
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <main_menu_task+0xd8>)
 8001920:	6818      	ldr	r0, [r3, #0]
 8001922:	2300      	movs	r3, #0
 8001924:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001928:	4914      	ldr	r1, [pc, #80]	@ (800197c <main_menu_task+0xec>)
 800192a:	f003 feeb 	bl	8005704 <xQueueGenericSend>
					continue;
 800192e:	e01a      	b.n	8001966 <main_menu_task+0xd6>
				default:
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8001930:	4b0d      	ldr	r3, [pc, #52]	@ (8001968 <main_menu_task+0xd8>)
 8001932:	6818      	ldr	r0, [r3, #0]
 8001934:	2300      	movs	r3, #0
 8001936:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800193a:	4910      	ldr	r1, [pc, #64]	@ (800197c <main_menu_task+0xec>)
 800193c:	f003 fee2 	bl	8005704 <xQueueGenericSend>
					continue;
 8001940:	e011      	b.n	8001966 <main_menu_task+0xd6>
			}
		}
		// Handle invalid entry
		else {
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8001942:	4b09      	ldr	r3, [pc, #36]	@ (8001968 <main_menu_task+0xd8>)
 8001944:	6818      	ldr	r0, [r3, #0]
 8001946:	2300      	movs	r3, #0
 8001948:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800194c:	490b      	ldr	r1, [pc, #44]	@ (800197c <main_menu_task+0xec>)
 800194e:	f003 fed9 	bl	8005704 <xQueueGenericSend>
			continue;
 8001952:	e008      	b.n	8001966 <main_menu_task+0xd6>
		}

		// Wait for notification from another task before running again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001954:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2300      	movs	r3, #0
 800195c:	2200      	movs	r2, #0
 800195e:	2100      	movs	r1, #0
 8001960:	2000      	movs	r0, #0
 8001962:	f005 f99d 	bl	8006ca0 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 8001966:	e797      	b.n	8001898 <main_menu_task+0x8>
 8001968:	200001c4 	.word	0x200001c4
 800196c:	20000054 	.word	0x20000054
 8001970:	200001dd 	.word	0x200001dd
 8001974:	200001bc 	.word	0x200001bc
 8001978:	200001c0 	.word	0x200001c0
 800197c:	20000050 	.word	0x20000050

08001980 <message_handler_task>:
 * @note The data queue (`q_data`) and print queue (`q_print`) must be initialized. The task must be   *
 *       notified when a new message is available.                                                     *
 * @note The processed message is sent to the print queue (`q_print`).                                 *
 ******************************************************************************************************/
void message_handler_task(void *param)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	@ 0x28
 8001984:	af02      	add	r7, sp, #8
 8001986:	6078      	str	r0, [r7, #4]
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001988:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800198c:	9300      	str	r3, [sp, #0]
 800198e:	2300      	movs	r3, #0
 8001990:	2200      	movs	r2, #0
 8001992:	2100      	movs	r1, #0
 8001994:	2000      	movs	r0, #0
 8001996:	f005 f983 	bl	8006ca0 <xTaskGenericNotifyWait>
 800199a:	61f8      	str	r0, [r7, #28]

		if(pdTRUE == ret) {
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d1f2      	bne.n	8001988 <message_handler_task+0x8>
			// Process the message stored in the input data queue
			process_message(&msg);
 80019a2:	f107 030c 	add.w	r3, r7, #12
 80019a6:	4618      	mov	r0, r3
 80019a8:	f000 f822 	bl	80019f0 <process_message>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80019ac:	e7ec      	b.n	8001988 <message_handler_task+0x8>
	...

080019b0 <print_task>:
 * @note This function is intended to run as a FreeRTOS task.                                          *
 * @note The print queue (`q_print`) must be initialized and contain messages to print.                *
 * @note The received message is transmitted via UART.                                                 *
 ******************************************************************************************************/
void print_task(void *param)
{
 80019b0:	b590      	push	{r4, r7, lr}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80019b8:	4b0b      	ldr	r3, [pc, #44]	@ (80019e8 <print_task+0x38>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f107 010c 	add.w	r1, r7, #12
 80019c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019c4:	4618      	mov	r0, r3
 80019c6:	f004 f84d 	bl	8005a64 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 80019ca:	68fc      	ldr	r4, [r7, #12]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fc08 	bl	80001e4 <strlen>
 80019d4:	4603      	mov	r3, r0
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80019dc:	4621      	mov	r1, r4
 80019de:	4803      	ldr	r0, [pc, #12]	@ (80019ec <print_task+0x3c>)
 80019e0:	f002 fce6 	bl	80043b0 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80019e4:	bf00      	nop
 80019e6:	e7e7      	b.n	80019b8 <print_task+0x8>
 80019e8:	200001c4 	.word	0x200001c4
 80019ec:	20000168 	.word	0x20000168

080019f0 <process_message>:
 * @return void                                                                                        *
 *                                                                                                     *
 * @note This function is called by the `message_handler_task` when a notification is received.        *
 * @note The data queue (`q_data`) must be initialized and contain a message to process.               *
 ******************************************************************************************************/
void process_message(message_t *msg) {
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af02      	add	r7, sp, #8
 80019f6:	6078      	str	r0, [r7, #4]

	extract_command(msg);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f837 	bl	8001a6c <extract_command>

	switch(curr_sys_state) {
 80019fe:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <process_message+0x6c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	dc24      	bgt.n	8001a50 <process_message+0x60>
 8001a06:	2b02      	cmp	r3, #2
 8001a08:	da18      	bge.n	8001a3c <process_message+0x4c>
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d002      	beq.n	8001a14 <process_message+0x24>
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d00a      	beq.n	8001a28 <process_message+0x38>
		case sRtcDateConfig:
			// Notify the RTC task and pass the message
			xTaskNotify(handle_rtc_task, (uint32_t)msg, eSetValueWithOverwrite);
			break;
		default:
			break;
 8001a12:	e01d      	b.n	8001a50 <process_message+0x60>
			xTaskNotify(handle_main_menu_task, (uint32_t)msg, eSetValueWithOverwrite);
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <process_message+0x70>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2303      	movs	r3, #3
 8001a20:	2100      	movs	r1, #0
 8001a22:	f005 f9bd 	bl	8006da0 <xTaskGenericNotify>
			break;
 8001a26:	e014      	b.n	8001a52 <process_message+0x62>
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
 8001a28:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <process_message+0x74>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	2300      	movs	r3, #0
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2303      	movs	r3, #3
 8001a34:	2100      	movs	r1, #0
 8001a36:	f005 f9b3 	bl	8006da0 <xTaskGenericNotify>
			break;
 8001a3a:	e00a      	b.n	8001a52 <process_message+0x62>
			xTaskNotify(handle_rtc_task, (uint32_t)msg, eSetValueWithOverwrite);
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a68 <process_message+0x78>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	2300      	movs	r3, #0
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	2303      	movs	r3, #3
 8001a48:	2100      	movs	r1, #0
 8001a4a:	f005 f9a9 	bl	8006da0 <xTaskGenericNotify>
			break;
 8001a4e:	e000      	b.n	8001a52 <process_message+0x62>
			break;
 8001a50:	bf00      	nop
	}
}
 8001a52:	bf00      	nop
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	200001dd 	.word	0x200001dd
 8001a60:	200001b0 	.word	0x200001b0
 8001a64:	200001bc 	.word	0x200001bc
 8001a68:	200001c0 	.word	0x200001c0

08001a6c <extract_command>:
 * @note This function is called by `process_message` to parse the incoming command message.           *
 * @note The data queue (`q_data`) must be initialized and contain a message to extract.               *
 * @note The extracted command is stored in the `msg` structure, with its payload and length fields    *
 *       populated.                                                                                    *
 ******************************************************************************************************/
int extract_command(message_t *msg) {
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	// Check if there is data in the data queue
	status = uxQueueMessagesWaiting(q_data);
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <extract_command+0x70>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f004 f967 	bl	8005d4c <uxQueueMessagesWaiting>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	613b      	str	r3, [r7, #16]
	if(!status) {
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <extract_command+0x22>
		return -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a8c:	e022      	b.n	8001ad4 <extract_command+0x68>
	}

	// If data is available in the data queue, load it to the msg payload
	uint8_t i=0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 8001a92:	4b12      	ldr	r3, [pc, #72]	@ (8001adc <extract_command+0x70>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f107 010f 	add.w	r1, r7, #15
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f003 ffe1 	bl	8005a64 <xQueueReceive>
 8001aa2:	6138      	str	r0, [r7, #16]
		if(pdTRUE == status) {
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d106      	bne.n	8001ab8 <extract_command+0x4c>
			msg->payload[i++] = item;
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	75fa      	strb	r2, [r7, #23]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	7bf9      	ldrb	r1, [r7, #15]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\n');
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	2b0a      	cmp	r3, #10
 8001abc:	d1e9      	bne.n	8001a92 <extract_command+0x26>

	// Set final character in message payload to null character
	msg->payload[i-1] = '\0';
 8001abe:	7dfb      	ldrb	r3, [r7, #23]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	54d1      	strb	r1, [r2, r3]
	// Save length of message without null character
	msg->len = i-1;
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	461a      	mov	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	60da      	str	r2, [r3, #12]

	return 0;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	200001c8 	.word	0x200001c8

08001ae0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	@ 0x30
 8001ae4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ae6:	f000 fd4d 	bl	8002584 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aea:	f000 f905 	bl	8001cf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001aee:	f000 f9bf 	bl	8001e70 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001af2:	f000 f993 	bl	8001e1c <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001af6:	f000 f96b 	bl	8001dd0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Create main menu task and check that it was created successfully
  status = xTaskCreate(main_menu_task, "main_menu_task", 250, NULL, 2, &handle_main_menu_task);
 8001afa:	4b69      	ldr	r3, [pc, #420]	@ (8001ca0 <main+0x1c0>)
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	2302      	movs	r3, #2
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	2300      	movs	r3, #0
 8001b04:	22fa      	movs	r2, #250	@ 0xfa
 8001b06:	4967      	ldr	r1, [pc, #412]	@ (8001ca4 <main+0x1c4>)
 8001b08:	4867      	ldr	r0, [pc, #412]	@ (8001ca8 <main+0x1c8>)
 8001b0a:	f004 fad3 	bl	80060b4 <xTaskCreate>
 8001b0e:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001b10:	6a3b      	ldr	r3, [r7, #32]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d00b      	beq.n	8001b2e <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b1a:	f383 8811 	msr	BASEPRI, r3
 8001b1e:	f3bf 8f6f 	isb	sy
 8001b22:	f3bf 8f4f 	dsb	sy
 8001b26:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	e7fd      	b.n	8001b2a <main+0x4a>

  // Create message handler task and check that it was created successfully
  status = xTaskCreate(message_handler_task, "msg_task", 250, NULL, 2, &handle_message_handler_task);
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	@ (8001cac <main+0x1cc>)
 8001b30:	9301      	str	r3, [sp, #4]
 8001b32:	2302      	movs	r3, #2
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2300      	movs	r3, #0
 8001b38:	22fa      	movs	r2, #250	@ 0xfa
 8001b3a:	495d      	ldr	r1, [pc, #372]	@ (8001cb0 <main+0x1d0>)
 8001b3c:	485d      	ldr	r0, [pc, #372]	@ (8001cb4 <main+0x1d4>)
 8001b3e:	f004 fab9 	bl	80060b4 <xTaskCreate>
 8001b42:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001b44:	6a3b      	ldr	r3, [r7, #32]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d00b      	beq.n	8001b62 <main+0x82>
        __asm volatile
 8001b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b4e:	f383 8811 	msr	BASEPRI, r3
 8001b52:	f3bf 8f6f 	isb	sy
 8001b56:	f3bf 8f4f 	dsb	sy
 8001b5a:	61bb      	str	r3, [r7, #24]
    }
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	e7fd      	b.n	8001b5e <main+0x7e>

  // Create print task and check that it was created successfully
  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8001b62:	4b55      	ldr	r3, [pc, #340]	@ (8001cb8 <main+0x1d8>)
 8001b64:	9301      	str	r3, [sp, #4]
 8001b66:	2302      	movs	r3, #2
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	22fa      	movs	r2, #250	@ 0xfa
 8001b6e:	4953      	ldr	r1, [pc, #332]	@ (8001cbc <main+0x1dc>)
 8001b70:	4853      	ldr	r0, [pc, #332]	@ (8001cc0 <main+0x1e0>)
 8001b72:	f004 fa9f 	bl	80060b4 <xTaskCreate>
 8001b76:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001b78:	6a3b      	ldr	r3, [r7, #32]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d00b      	beq.n	8001b96 <main+0xb6>
        __asm volatile
 8001b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001b82:	f383 8811 	msr	BASEPRI, r3
 8001b86:	f3bf 8f6f 	isb	sy
 8001b8a:	f3bf 8f4f 	dsb	sy
 8001b8e:	617b      	str	r3, [r7, #20]
    }
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	e7fd      	b.n	8001b92 <main+0xb2>

  // Create LED task and check that it was created successfully
  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8001b96:	4b4b      	ldr	r3, [pc, #300]	@ (8001cc4 <main+0x1e4>)
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	22fa      	movs	r2, #250	@ 0xfa
 8001ba2:	4949      	ldr	r1, [pc, #292]	@ (8001cc8 <main+0x1e8>)
 8001ba4:	4849      	ldr	r0, [pc, #292]	@ (8001ccc <main+0x1ec>)
 8001ba6:	f004 fa85 	bl	80060b4 <xTaskCreate>
 8001baa:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d00b      	beq.n	8001bca <main+0xea>
        __asm volatile
 8001bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bb6:	f383 8811 	msr	BASEPRI, r3
 8001bba:	f3bf 8f6f 	isb	sy
 8001bbe:	f3bf 8f4f 	dsb	sy
 8001bc2:	613b      	str	r3, [r7, #16]
    }
 8001bc4:	bf00      	nop
 8001bc6:	bf00      	nop
 8001bc8:	e7fd      	b.n	8001bc6 <main+0xe6>

  // Create RTC task and check that it was created successfully
  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8001bca:	4b41      	ldr	r3, [pc, #260]	@ (8001cd0 <main+0x1f0>)
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2302      	movs	r3, #2
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	22fa      	movs	r2, #250	@ 0xfa
 8001bd6:	493f      	ldr	r1, [pc, #252]	@ (8001cd4 <main+0x1f4>)
 8001bd8:	483f      	ldr	r0, [pc, #252]	@ (8001cd8 <main+0x1f8>)
 8001bda:	f004 fa6b 	bl	80060b4 <xTaskCreate>
 8001bde:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001be0:	6a3b      	ldr	r3, [r7, #32]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d00b      	beq.n	8001bfe <main+0x11e>
        __asm volatile
 8001be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bea:	f383 8811 	msr	BASEPRI, r3
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	60fb      	str	r3, [r7, #12]
    }
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	e7fd      	b.n	8001bfa <main+0x11a>

  // Create data queue and check that it was created successfully
  q_data = xQueueCreate(10, sizeof(char));
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2101      	movs	r1, #1
 8001c02:	200a      	movs	r0, #10
 8001c04:	f003 fcf8 	bl	80055f8 <xQueueGenericCreate>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4a34      	ldr	r2, [pc, #208]	@ (8001cdc <main+0x1fc>)
 8001c0c:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_data);
 8001c0e:	4b33      	ldr	r3, [pc, #204]	@ (8001cdc <main+0x1fc>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d10b      	bne.n	8001c2e <main+0x14e>
        __asm volatile
 8001c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c1a:	f383 8811 	msr	BASEPRI, r3
 8001c1e:	f3bf 8f6f 	isb	sy
 8001c22:	f3bf 8f4f 	dsb	sy
 8001c26:	60bb      	str	r3, [r7, #8]
    }
 8001c28:	bf00      	nop
 8001c2a:	bf00      	nop
 8001c2c:	e7fd      	b.n	8001c2a <main+0x14a>

  // Create print queue and check that it was created successfully
  q_print = xQueueCreate(10, sizeof(size_t));
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2104      	movs	r1, #4
 8001c32:	200a      	movs	r0, #10
 8001c34:	f003 fce0 	bl	80055f8 <xQueueGenericCreate>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	4a29      	ldr	r2, [pc, #164]	@ (8001ce0 <main+0x200>)
 8001c3c:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_print);
 8001c3e:	4b28      	ldr	r3, [pc, #160]	@ (8001ce0 <main+0x200>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10b      	bne.n	8001c5e <main+0x17e>
        __asm volatile
 8001c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c4a:	f383 8811 	msr	BASEPRI, r3
 8001c4e:	f3bf 8f6f 	isb	sy
 8001c52:	f3bf 8f4f 	dsb	sy
 8001c56:	607b      	str	r3, [r7, #4]
    }
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	e7fd      	b.n	8001c5a <main+0x17a>

  // Create software timers for LED effects
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c62:	e010      	b.n	8001c86 <main+0x1a6>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)i, led_callback);
 8001c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c66:	4a1f      	ldr	r2, [pc, #124]	@ (8001ce4 <main+0x204>)
 8001c68:	9200      	str	r2, [sp, #0]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001c70:	481d      	ldr	r0, [pc, #116]	@ (8001ce8 <main+0x208>)
 8001c72:	f005 fb19 	bl	80072a8 <xTimerCreate>
 8001c76:	4602      	mov	r2, r0
 8001c78:	491c      	ldr	r1, [pc, #112]	@ (8001cec <main+0x20c>)
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c82:	3301      	adds	r3, #1
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	ddeb      	ble.n	8001c64 <main+0x184>
  }

  // Prepare UART to receive a message
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	4918      	ldr	r1, [pc, #96]	@ (8001cf0 <main+0x210>)
 8001c90:	4818      	ldr	r0, [pc, #96]	@ (8001cf4 <main+0x214>)
 8001c92:	f002 fc18 	bl	80044c6 <HAL_UART_Receive_IT>

  // Start the kernel
  vTaskStartScheduler();
 8001c96:	f004 fb53 	bl	8006340 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001c9a:	bf00      	nop
 8001c9c:	e7fd      	b.n	8001c9a <main+0x1ba>
 8001c9e:	bf00      	nop
 8001ca0:	200001b0 	.word	0x200001b0
 8001ca4:	08009140 	.word	0x08009140
 8001ca8:	08001891 	.word	0x08001891
 8001cac:	200001b4 	.word	0x200001b4
 8001cb0:	08009150 	.word	0x08009150
 8001cb4:	08001981 	.word	0x08001981
 8001cb8:	200001b8 	.word	0x200001b8
 8001cbc:	0800915c 	.word	0x0800915c
 8001cc0:	080019b1 	.word	0x080019b1
 8001cc4:	200001bc 	.word	0x200001bc
 8001cc8:	08009168 	.word	0x08009168
 8001ccc:	08000d7d 	.word	0x08000d7d
 8001cd0:	200001c0 	.word	0x200001c0
 8001cd4:	08009174 	.word	0x08009174
 8001cd8:	08001325 	.word	0x08001325
 8001cdc:	200001c8 	.word	0x200001c8
 8001ce0:	200001c4 	.word	0x200001c4
 8001ce4:	08000fe9 	.word	0x08000fe9
 8001ce8:	08009180 	.word	0x08009180
 8001cec:	200001cc 	.word	0x200001cc
 8001cf0:	200001dc 	.word	0x200001dc
 8001cf4:	20000168 	.word	0x20000168

08001cf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b094      	sub	sp, #80	@ 0x50
 8001cfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001cfe:	f107 0320 	add.w	r3, r7, #32
 8001d02:	2230      	movs	r2, #48	@ 0x30
 8001d04:	2100      	movs	r1, #0
 8001d06:	4618      	mov	r0, r3
 8001d08:	f006 fab4 	bl	8008274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
 8001d14:	605a      	str	r2, [r3, #4]
 8001d16:	609a      	str	r2, [r3, #8]
 8001d18:	60da      	str	r2, [r3, #12]
 8001d1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	4b29      	ldr	r3, [pc, #164]	@ (8001dc8 <SystemClock_Config+0xd0>)
 8001d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d24:	4a28      	ldr	r2, [pc, #160]	@ (8001dc8 <SystemClock_Config+0xd0>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d2c:	4b26      	ldr	r3, [pc, #152]	@ (8001dc8 <SystemClock_Config+0xd0>)
 8001d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	60bb      	str	r3, [r7, #8]
 8001d36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d38:	2300      	movs	r3, #0
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	4b23      	ldr	r3, [pc, #140]	@ (8001dcc <SystemClock_Config+0xd4>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a22      	ldr	r2, [pc, #136]	@ (8001dcc <SystemClock_Config+0xd4>)
 8001d42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b20      	ldr	r3, [pc, #128]	@ (8001dcc <SystemClock_Config+0xd4>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d50:	607b      	str	r3, [r7, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d54:	230a      	movs	r3, #10
 8001d56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d5c:	2310      	movs	r3, #16
 8001d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d60:	2301      	movs	r3, #1
 8001d62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d64:	2302      	movs	r3, #2
 8001d66:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d6c:	2308      	movs	r3, #8
 8001d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001d70:	2332      	movs	r3, #50	@ 0x32
 8001d72:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001d74:	2304      	movs	r3, #4
 8001d76:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d78:	2307      	movs	r3, #7
 8001d7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d7c:	f107 0320 	add.w	r3, r7, #32
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 ff6b 	bl	8002c5c <HAL_RCC_OscConfig>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001d8c:	f000 fa34 	bl	80021f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d90:	230f      	movs	r3, #15
 8001d92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d94:	2302      	movs	r3, #2
 8001d96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d9c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001da0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001da2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001da6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2100      	movs	r1, #0
 8001dae:	4618      	mov	r0, r3
 8001db0:	f001 f9cc 	bl	800314c <HAL_RCC_ClockConfig>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001dba:	f000 fa1d 	bl	80021f8 <Error_Handler>
  }
}
 8001dbe:	bf00      	nop
 8001dc0:	3750      	adds	r7, #80	@ 0x50
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40007000 	.word	0x40007000

08001dd0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001dd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e14 <MX_RTC_Init+0x44>)
 8001dd6:	4a10      	ldr	r2, [pc, #64]	@ (8001e18 <MX_RTC_Init+0x48>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001dda:	4b0e      	ldr	r3, [pc, #56]	@ (8001e14 <MX_RTC_Init+0x44>)
 8001ddc:	2240      	movs	r2, #64	@ 0x40
 8001dde:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001de0:	4b0c      	ldr	r3, [pc, #48]	@ (8001e14 <MX_RTC_Init+0x44>)
 8001de2:	227f      	movs	r2, #127	@ 0x7f
 8001de4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001de6:	4b0b      	ldr	r3, [pc, #44]	@ (8001e14 <MX_RTC_Init+0x44>)
 8001de8:	22ff      	movs	r2, #255	@ 0xff
 8001dea:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <MX_RTC_Init+0x44>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001df2:	4b08      	ldr	r3, [pc, #32]	@ (8001e14 <MX_RTC_Init+0x44>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001df8:	4b06      	ldr	r3, [pc, #24]	@ (8001e14 <MX_RTC_Init+0x44>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001dfe:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <MX_RTC_Init+0x44>)
 8001e00:	f001 fcd8 	bl	80037b4 <HAL_RTC_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001e0a:	f000 f9f5 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000148 	.word	0x20000148
 8001e18:	40002800 	.word	0x40002800

08001e1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e20:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e22:	4a12      	ldr	r2, [pc, #72]	@ (8001e6c <MX_USART2_UART_Init+0x50>)
 8001e24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e26:	4b10      	ldr	r3, [pc, #64]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e28:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e40:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e42:	220c      	movs	r2, #12
 8001e44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e52:	4805      	ldr	r0, [pc, #20]	@ (8001e68 <MX_USART2_UART_Init+0x4c>)
 8001e54:	f002 fa5c 	bl	8004310 <HAL_UART_Init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e5e:	f000 f9cb 	bl	80021f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e62:	bf00      	nop
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000168 	.word	0x20000168
 8001e6c:	40004400 	.word	0x40004400

08001e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	@ 0x30
 8001e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	4ba2      	ldr	r3, [pc, #648]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e8e:	4aa1      	ldr	r2, [pc, #644]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e96:	4b9f      	ldr	r3, [pc, #636]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b9b      	ldr	r3, [pc, #620]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a9a      	ldr	r2, [pc, #616]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	4b98      	ldr	r3, [pc, #608]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b94      	ldr	r3, [pc, #592]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a93      	ldr	r2, [pc, #588]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b91      	ldr	r3, [pc, #580]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b8d      	ldr	r3, [pc, #564]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a8c      	ldr	r2, [pc, #560]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b8a      	ldr	r3, [pc, #552]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b86      	ldr	r3, [pc, #536]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4a85      	ldr	r2, [pc, #532]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4b83      	ldr	r3, [pc, #524]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b7f      	ldr	r3, [pc, #508]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	4a7e      	ldr	r2, [pc, #504]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001f1c:	f043 0308 	orr.w	r3, r3, #8
 8001f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f22:	4b7c      	ldr	r3, [pc, #496]	@ (8002114 <MX_GPIO_Init+0x2a4>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2108      	movs	r1, #8
 8001f32:	4879      	ldr	r0, [pc, #484]	@ (8002118 <MX_GPIO_Init+0x2a8>)
 8001f34:	f000 fe78 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001f38:	2201      	movs	r2, #1
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4877      	ldr	r0, [pc, #476]	@ (800211c <MX_GPIO_Init+0x2ac>)
 8001f3e:	f000 fe73 	bl	8002c28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f42:	2200      	movs	r2, #0
 8001f44:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001f48:	4875      	ldr	r0, [pc, #468]	@ (8002120 <MX_GPIO_Init+0x2b0>)
 8001f4a:	f000 fe6d 	bl	8002c28 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001f4e:	2308      	movs	r3, #8
 8001f50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f52:	2301      	movs	r3, #1
 8001f54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001f5e:	f107 031c 	add.w	r3, r7, #28
 8001f62:	4619      	mov	r1, r3
 8001f64:	486c      	ldr	r0, [pc, #432]	@ (8002118 <MX_GPIO_Init+0x2a8>)
 8001f66:	f000 fcc3 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f76:	2300      	movs	r3, #0
 8001f78:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4619      	mov	r1, r3
 8001f80:	4866      	ldr	r0, [pc, #408]	@ (800211c <MX_GPIO_Init+0x2ac>)
 8001f82:	f000 fcb5 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001f86:	2308      	movs	r3, #8
 8001f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f92:	2300      	movs	r3, #0
 8001f94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f96:	2305      	movs	r3, #5
 8001f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f9a:	f107 031c 	add.w	r3, r7, #28
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	485e      	ldr	r0, [pc, #376]	@ (800211c <MX_GPIO_Init+0x2ac>)
 8001fa2:	f000 fca5 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001faa:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fb4:	f107 031c 	add.w	r3, r7, #28
 8001fb8:	4619      	mov	r1, r3
 8001fba:	485a      	ldr	r0, [pc, #360]	@ (8002124 <MX_GPIO_Init+0x2b4>)
 8001fbc:	f000 fc98 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001fc0:	2310      	movs	r3, #16
 8001fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fd0:	2306      	movs	r3, #6
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001fd4:	f107 031c 	add.w	r3, r7, #28
 8001fd8:	4619      	mov	r1, r3
 8001fda:	4852      	ldr	r0, [pc, #328]	@ (8002124 <MX_GPIO_Init+0x2b4>)
 8001fdc:	f000 fc88 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001fe0:	23e0      	movs	r3, #224	@ 0xe0
 8001fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fec:	2300      	movs	r3, #0
 8001fee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ff0:	2305      	movs	r3, #5
 8001ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 031c 	add.w	r3, r7, #28
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	484a      	ldr	r0, [pc, #296]	@ (8002124 <MX_GPIO_Init+0x2b4>)
 8001ffc:	f000 fc78 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002000:	2304      	movs	r3, #4
 8002002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800200c:	f107 031c 	add.w	r3, r7, #28
 8002010:	4619      	mov	r1, r3
 8002012:	4845      	ldr	r0, [pc, #276]	@ (8002128 <MX_GPIO_Init+0x2b8>)
 8002014:	f000 fc6c 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002018:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800201c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800201e:	2302      	movs	r3, #2
 8002020:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002022:	2300      	movs	r3, #0
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002026:	2300      	movs	r3, #0
 8002028:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800202a:	2305      	movs	r3, #5
 800202c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800202e:	f107 031c 	add.w	r3, r7, #28
 8002032:	4619      	mov	r1, r3
 8002034:	483c      	ldr	r0, [pc, #240]	@ (8002128 <MX_GPIO_Init+0x2b8>)
 8002036:	f000 fc5b 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800203a:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800203e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002040:	2301      	movs	r3, #1
 8002042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002044:	2300      	movs	r3, #0
 8002046:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002048:	2300      	movs	r3, #0
 800204a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	4619      	mov	r1, r3
 8002052:	4833      	ldr	r0, [pc, #204]	@ (8002120 <MX_GPIO_Init+0x2b0>)
 8002054:	f000 fc4c 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002058:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800205c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800206a:	2306      	movs	r3, #6
 800206c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800206e:	f107 031c 	add.w	r3, r7, #28
 8002072:	4619      	mov	r1, r3
 8002074:	4829      	ldr	r0, [pc, #164]	@ (800211c <MX_GPIO_Init+0x2ac>)
 8002076:	f000 fc3b 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800207a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800207e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002080:	2300      	movs	r3, #0
 8002082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002084:	2300      	movs	r3, #0
 8002086:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	4619      	mov	r1, r3
 800208e:	4825      	ldr	r0, [pc, #148]	@ (8002124 <MX_GPIO_Init+0x2b4>)
 8002090:	f000 fc2e 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002094:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a2:	2300      	movs	r3, #0
 80020a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020a6:	230a      	movs	r3, #10
 80020a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 031c 	add.w	r3, r7, #28
 80020ae:	4619      	mov	r1, r3
 80020b0:	481c      	ldr	r0, [pc, #112]	@ (8002124 <MX_GPIO_Init+0x2b4>)
 80020b2:	f000 fc1d 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80020b6:	2320      	movs	r3, #32
 80020b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	4815      	ldr	r0, [pc, #84]	@ (8002120 <MX_GPIO_Init+0x2b0>)
 80020ca:	f000 fc11 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80020ce:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80020d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020d4:	2312      	movs	r3, #18
 80020d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020e0:	2304      	movs	r3, #4
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	480f      	ldr	r0, [pc, #60]	@ (8002128 <MX_GPIO_Init+0x2b8>)
 80020ec:	f000 fc00 	bl	80028f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020f4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80020f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80020fe:	f107 031c 	add.w	r3, r7, #28
 8002102:	4619      	mov	r1, r3
 8002104:	4804      	ldr	r0, [pc, #16]	@ (8002118 <MX_GPIO_Init+0x2a8>)
 8002106:	f000 fbf3 	bl	80028f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800210a:	bf00      	nop
 800210c:	3730      	adds	r7, #48	@ 0x30
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40023800 	.word	0x40023800
 8002118:	40021000 	.word	0x40021000
 800211c:	40020800 	.word	0x40020800
 8002120:	40020c00 	.word	0x40020c00
 8002124:	40020000 	.word	0x40020000
 8002128:	40020400 	.word	0x40020400

0800212c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler, so it executes in the interrupt context
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af02      	add	r7, sp, #8
 8002132:	6078      	str	r0, [r7, #4]
	// Dummy variable used to replace final character in data queue
	uint8_t dummy;

	// Add a small delay to allow timing for message transmission
	for(uint32_t i=0; i<4000; i++);
 8002134:	2300      	movs	r3, #0
 8002136:	60fb      	str	r3, [r7, #12]
 8002138:	e002      	b.n	8002140 <HAL_UART_RxCpltCallback+0x14>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	3301      	adds	r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002146:	d3f8      	bcc.n	800213a <HAL_UART_RxCpltCallback+0xe>

	// Check if data is available via UART
	if(!xQueueIsQueueFullFromISR(q_data)) {
 8002148:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <HAL_UART_RxCpltCallback+0x98>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4618      	mov	r0, r3
 800214e:	f003 ff2c 	bl	8005faa <xQueueIsQueueFullFromISR>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d107      	bne.n	8002168 <HAL_UART_RxCpltCallback+0x3c>
		// Enqueue data byte
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8002158:	4b1a      	ldr	r3, [pc, #104]	@ (80021c4 <HAL_UART_RxCpltCallback+0x98>)
 800215a:	6818      	ldr	r0, [r3, #0]
 800215c:	2300      	movs	r3, #0
 800215e:	2200      	movs	r2, #0
 8002160:	4919      	ldr	r1, [pc, #100]	@ (80021c8 <HAL_UART_RxCpltCallback+0x9c>)
 8002162:	f003 fbd1 	bl	8005908 <xQueueGenericSendFromISR>
 8002166:	e013      	b.n	8002190 <HAL_UART_RxCpltCallback+0x64>
	}
	// If no data available, check if last entered character is newline character
	else {
		if(user_data == '\n') {
 8002168:	4b17      	ldr	r3, [pc, #92]	@ (80021c8 <HAL_UART_RxCpltCallback+0x9c>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b0a      	cmp	r3, #10
 8002170:	d10e      	bne.n	8002190 <HAL_UART_RxCpltCallback+0x64>
			// Replace last byte of data queue with '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8002172:	4b14      	ldr	r3, [pc, #80]	@ (80021c4 <HAL_UART_RxCpltCallback+0x98>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f107 010b 	add.w	r1, r7, #11
 800217a:	2200      	movs	r2, #0
 800217c:	4618      	mov	r0, r3
 800217e:	f003 fd53 	bl	8005c28 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_UART_RxCpltCallback+0x98>)
 8002184:	6818      	ldr	r0, [r3, #0]
 8002186:	2300      	movs	r3, #0
 8002188:	2200      	movs	r2, #0
 800218a:	490f      	ldr	r1, [pc, #60]	@ (80021c8 <HAL_UART_RxCpltCallback+0x9c>)
 800218c:	f003 fbbc 	bl	8005908 <xQueueGenericSendFromISR>
		}
	}

	// Send notification to message handler task if user_data == '\n'
	if(user_data == '\n') {
 8002190:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <HAL_UART_RxCpltCallback+0x9c>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b0a      	cmp	r3, #10
 8002198:	d10a      	bne.n	80021b0 <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_message_handler_task, 0, eNoAction, NULL);
 800219a:	4b0c      	ldr	r3, [pc, #48]	@ (80021cc <HAL_UART_RxCpltCallback+0xa0>)
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	2300      	movs	r3, #0
 80021a0:	9301      	str	r3, [sp, #4]
 80021a2:	2300      	movs	r3, #0
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2300      	movs	r3, #0
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	f004 fedc 	bl	8006f68 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in interrupt mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80021b0:	2201      	movs	r2, #1
 80021b2:	4905      	ldr	r1, [pc, #20]	@ (80021c8 <HAL_UART_RxCpltCallback+0x9c>)
 80021b4:	4806      	ldr	r0, [pc, #24]	@ (80021d0 <HAL_UART_RxCpltCallback+0xa4>)
 80021b6:	f002 f986 	bl	80044c6 <HAL_UART_Receive_IT>

}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	200001c8 	.word	0x200001c8
 80021c8:	200001dc 	.word	0x200001dc
 80021cc:	200001b4 	.word	0x200001b4
 80021d0:	20000168 	.word	0x20000168

080021d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a04      	ldr	r2, [pc, #16]	@ (80021f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d101      	bne.n	80021ea <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021e6:	f000 f9ef 	bl	80025c8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	bf00      	nop
 80021f4:	40001000 	.word	0x40001000

080021f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021fc:	b672      	cpsid	i
}
 80021fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002200:	bf00      	nop
 8002202:	e7fd      	b.n	8002200 <Error_Handler+0x8>

08002204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	607b      	str	r3, [r7, #4]
 800220e:	4b10      	ldr	r3, [pc, #64]	@ (8002250 <HAL_MspInit+0x4c>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	4a0f      	ldr	r2, [pc, #60]	@ (8002250 <HAL_MspInit+0x4c>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002218:	6453      	str	r3, [r2, #68]	@ 0x44
 800221a:	4b0d      	ldr	r3, [pc, #52]	@ (8002250 <HAL_MspInit+0x4c>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002222:	607b      	str	r3, [r7, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	603b      	str	r3, [r7, #0]
 800222a:	4b09      	ldr	r3, [pc, #36]	@ (8002250 <HAL_MspInit+0x4c>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	4a08      	ldr	r2, [pc, #32]	@ (8002250 <HAL_MspInit+0x4c>)
 8002230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002234:	6413      	str	r3, [r2, #64]	@ 0x40
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <HAL_MspInit+0x4c>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800223e:	603b      	str	r3, [r7, #0]
 8002240:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002242:	bf00      	nop
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	40023800 	.word	0x40023800

08002254 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800225c:	f107 0308 	add.w	r3, r7, #8
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]
 8002266:	609a      	str	r2, [r3, #8]
 8002268:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a0c      	ldr	r2, [pc, #48]	@ (80022a0 <HAL_RTC_MspInit+0x4c>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d111      	bne.n	8002298 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002274:	2302      	movs	r3, #2
 8002276:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002278:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800227c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800227e:	f107 0308 	add.w	r3, r7, #8
 8002282:	4618      	mov	r0, r3
 8002284:	f001 f9b4 	bl	80035f0 <HAL_RCCEx_PeriphCLKConfig>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800228e:	f7ff ffb3 	bl	80021f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002292:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <HAL_RTC_MspInit+0x50>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002298:	bf00      	nop
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40002800 	.word	0x40002800
 80022a4:	42470e3c 	.word	0x42470e3c

080022a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	@ 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022b0:	f107 0314 	add.w	r3, r7, #20
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
 80022bc:	60da      	str	r2, [r3, #12]
 80022be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	@ (800233c <HAL_UART_MspInit+0x94>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d133      	bne.n	8002332 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e2:	613b      	str	r3, [r7, #16]
 80022e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
 80022ea:	4b15      	ldr	r3, [pc, #84]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ee:	4a14      	ldr	r2, [pc, #80]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022f0:	f043 0301 	orr.w	r3, r3, #1
 80022f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f6:	4b12      	ldr	r3, [pc, #72]	@ (8002340 <HAL_UART_MspInit+0x98>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002302:	230c      	movs	r3, #12
 8002304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002312:	2307      	movs	r3, #7
 8002314:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	4619      	mov	r1, r3
 800231c:	4809      	ldr	r0, [pc, #36]	@ (8002344 <HAL_UART_MspInit+0x9c>)
 800231e:	f000 fae7 	bl	80028f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8002322:	2200      	movs	r2, #0
 8002324:	2106      	movs	r1, #6
 8002326:	2026      	movs	r0, #38	@ 0x26
 8002328:	f000 fa26 	bl	8002778 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800232c:	2026      	movs	r0, #38	@ 0x26
 800232e:	f000 fa3f 	bl	80027b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	@ 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40004400 	.word	0x40004400
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000

08002348 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b08e      	sub	sp, #56	@ 0x38
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002354:	2300      	movs	r3, #0
 8002356:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	4b33      	ldr	r3, [pc, #204]	@ (800242c <HAL_InitTick+0xe4>)
 800235e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002360:	4a32      	ldr	r2, [pc, #200]	@ (800242c <HAL_InitTick+0xe4>)
 8002362:	f043 0310 	orr.w	r3, r3, #16
 8002366:	6413      	str	r3, [r2, #64]	@ 0x40
 8002368:	4b30      	ldr	r3, [pc, #192]	@ (800242c <HAL_InitTick+0xe4>)
 800236a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236c:	f003 0310 	and.w	r3, r3, #16
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002374:	f107 0210 	add.w	r2, r7, #16
 8002378:	f107 0314 	add.w	r3, r7, #20
 800237c:	4611      	mov	r1, r2
 800237e:	4618      	mov	r0, r3
 8002380:	f001 f904 	bl	800358c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800238e:	f001 f8d5 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8002392:	6378      	str	r0, [r7, #52]	@ 0x34
 8002394:	e004      	b.n	80023a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002396:	f001 f8d1 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 800239a:	4603      	mov	r3, r0
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80023a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023a2:	4a23      	ldr	r2, [pc, #140]	@ (8002430 <HAL_InitTick+0xe8>)
 80023a4:	fba2 2303 	umull	r2, r3, r2, r3
 80023a8:	0c9b      	lsrs	r3, r3, #18
 80023aa:	3b01      	subs	r3, #1
 80023ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80023ae:	4b21      	ldr	r3, [pc, #132]	@ (8002434 <HAL_InitTick+0xec>)
 80023b0:	4a21      	ldr	r2, [pc, #132]	@ (8002438 <HAL_InitTick+0xf0>)
 80023b2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80023b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002434 <HAL_InitTick+0xec>)
 80023b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80023bc:	4a1d      	ldr	r2, [pc, #116]	@ (8002434 <HAL_InitTick+0xec>)
 80023be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80023c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002434 <HAL_InitTick+0xec>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002434 <HAL_InitTick+0xec>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ce:	4b19      	ldr	r3, [pc, #100]	@ (8002434 <HAL_InitTick+0xec>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80023d4:	4817      	ldr	r0, [pc, #92]	@ (8002434 <HAL_InitTick+0xec>)
 80023d6:	f001 fcf9 	bl	8003dcc <HAL_TIM_Base_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80023e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d11b      	bne.n	8002420 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80023e8:	4812      	ldr	r0, [pc, #72]	@ (8002434 <HAL_InitTick+0xec>)
 80023ea:	f001 fd49 	bl	8003e80 <HAL_TIM_Base_Start_IT>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80023f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d111      	bne.n	8002420 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023fc:	2036      	movs	r0, #54	@ 0x36
 80023fe:	f000 f9d7 	bl	80027b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b0f      	cmp	r3, #15
 8002406:	d808      	bhi.n	800241a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002408:	2200      	movs	r2, #0
 800240a:	6879      	ldr	r1, [r7, #4]
 800240c:	2036      	movs	r0, #54	@ 0x36
 800240e:	f000 f9b3 	bl	8002778 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002412:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <HAL_InitTick+0xf4>)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6013      	str	r3, [r2, #0]
 8002418:	e002      	b.n	8002420 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002420:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002424:	4618      	mov	r0, r3
 8002426:	3738      	adds	r7, #56	@ 0x38
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40023800 	.word	0x40023800
 8002430:	431bde83 	.word	0x431bde83
 8002434:	200001e0 	.word	0x200001e0
 8002438:	40001000 	.word	0x40001000
 800243c:	2000005c 	.word	0x2000005c

08002440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <NMI_Handler+0x4>

08002448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800244c:	bf00      	nop
 800244e:	e7fd      	b.n	800244c <HardFault_Handler+0x4>

08002450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002454:	bf00      	nop
 8002456:	e7fd      	b.n	8002454 <MemManage_Handler+0x4>

08002458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <BusFault_Handler+0x4>

08002460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002460:	b480      	push	{r7}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002464:	bf00      	nop
 8002466:	e7fd      	b.n	8002464 <UsageFault_Handler+0x4>

08002468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800247c:	4802      	ldr	r0, [pc, #8]	@ (8002488 <USART2_IRQHandler+0x10>)
 800247e:	f002 f847 	bl	8004510 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002482:	bf00      	nop
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000168 	.word	0x20000168

0800248c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002490:	4802      	ldr	r0, [pc, #8]	@ (800249c <TIM6_DAC_IRQHandler+0x10>)
 8002492:	f001 fd65 	bl	8003f60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	200001e0 	.word	0x200001e0

080024a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024a8:	4a14      	ldr	r2, [pc, #80]	@ (80024fc <_sbrk+0x5c>)
 80024aa:	4b15      	ldr	r3, [pc, #84]	@ (8002500 <_sbrk+0x60>)
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024b4:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <_sbrk+0x64>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d102      	bne.n	80024c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <_sbrk+0x64>)
 80024be:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <_sbrk+0x68>)
 80024c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d207      	bcs.n	80024e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024d0:	f005 fed8 	bl	8008284 <__errno>
 80024d4:	4603      	mov	r3, r0
 80024d6:	220c      	movs	r2, #12
 80024d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024de:	e009      	b.n	80024f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024e0:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <_sbrk+0x64>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024e6:	4b07      	ldr	r3, [pc, #28]	@ (8002504 <_sbrk+0x64>)
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4413      	add	r3, r2
 80024ee:	4a05      	ldr	r2, [pc, #20]	@ (8002504 <_sbrk+0x64>)
 80024f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024f2:	68fb      	ldr	r3, [r7, #12]
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20020000 	.word	0x20020000
 8002500:	00000400 	.word	0x00000400
 8002504:	20000228 	.word	0x20000228
 8002508:	20019520 	.word	0x20019520

0800250c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800250c:	b480      	push	{r7}
 800250e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002510:	4b06      	ldr	r3, [pc, #24]	@ (800252c <SystemInit+0x20>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002516:	4a05      	ldr	r2, [pc, #20]	@ (800252c <SystemInit+0x20>)
 8002518:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800251c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	e000ed00 	.word	0xe000ed00

08002530 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002530:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002568 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002534:	f7ff ffea 	bl	800250c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002538:	480c      	ldr	r0, [pc, #48]	@ (800256c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800253a:	490d      	ldr	r1, [pc, #52]	@ (8002570 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800253c:	4a0d      	ldr	r2, [pc, #52]	@ (8002574 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800253e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002540:	e002      	b.n	8002548 <LoopCopyDataInit>

08002542 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002542:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002544:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002546:	3304      	adds	r3, #4

08002548 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002548:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800254c:	d3f9      	bcc.n	8002542 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002550:	4c0a      	ldr	r4, [pc, #40]	@ (800257c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002552:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002554:	e001      	b.n	800255a <LoopFillZerobss>

08002556 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002556:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002558:	3204      	adds	r2, #4

0800255a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800255c:	d3fb      	bcc.n	8002556 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800255e:	f005 fe97 	bl	8008290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002562:	f7ff fabd 	bl	8001ae0 <main>
  bx  lr    
 8002566:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002568:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800256c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002570:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 8002574:	08009300 	.word	0x08009300
  ldr r2, =_sbss
 8002578:	200000bc 	.word	0x200000bc
  ldr r4, =_ebss
 800257c:	20019520 	.word	0x20019520

08002580 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002580:	e7fe      	b.n	8002580 <ADC_IRQHandler>
	...

08002584 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002588:	4b0e      	ldr	r3, [pc, #56]	@ (80025c4 <HAL_Init+0x40>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <HAL_Init+0x40>)
 800258e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002592:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <HAL_Init+0x40>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a0a      	ldr	r2, [pc, #40]	@ (80025c4 <HAL_Init+0x40>)
 800259a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800259e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025a0:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <HAL_Init+0x40>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a07      	ldr	r2, [pc, #28]	@ (80025c4 <HAL_Init+0x40>)
 80025a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 f8d8 	bl	8002762 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025b2:	200f      	movs	r0, #15
 80025b4:	f7ff fec8 	bl	8002348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025b8:	f7ff fe24 	bl	8002204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025bc:	2300      	movs	r3, #0
}
 80025be:	4618      	mov	r0, r3
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	40023c00 	.word	0x40023c00

080025c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025cc:	4b06      	ldr	r3, [pc, #24]	@ (80025e8 <HAL_IncTick+0x20>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <HAL_IncTick+0x24>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a04      	ldr	r2, [pc, #16]	@ (80025ec <HAL_IncTick+0x24>)
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	20000060 	.word	0x20000060
 80025ec:	2000022c 	.word	0x2000022c

080025f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b03      	ldr	r3, [pc, #12]	@ (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	2000022c 	.word	0x2000022c

08002608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002618:	4b0c      	ldr	r3, [pc, #48]	@ (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800261e:	68ba      	ldr	r2, [r7, #8]
 8002620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002624:	4013      	ands	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800263a:	4a04      	ldr	r2, [pc, #16]	@ (800264c <__NVIC_SetPriorityGrouping+0x44>)
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	60d3      	str	r3, [r2, #12]
}
 8002640:	bf00      	nop
 8002642:	3714      	adds	r7, #20
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002654:	4b04      	ldr	r3, [pc, #16]	@ (8002668 <__NVIC_GetPriorityGrouping+0x18>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	f003 0307 	and.w	r3, r3, #7
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	e000ed00 	.word	0xe000ed00

0800266c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800267a:	2b00      	cmp	r3, #0
 800267c:	db0b      	blt.n	8002696 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	f003 021f 	and.w	r2, r3, #31
 8002684:	4907      	ldr	r1, [pc, #28]	@ (80026a4 <__NVIC_EnableIRQ+0x38>)
 8002686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800268a:	095b      	lsrs	r3, r3, #5
 800268c:	2001      	movs	r0, #1
 800268e:	fa00 f202 	lsl.w	r2, r0, r2
 8002692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
 80026a2:	bf00      	nop
 80026a4:	e000e100 	.word	0xe000e100

080026a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	db0a      	blt.n	80026d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	490c      	ldr	r1, [pc, #48]	@ (80026f4 <__NVIC_SetPriority+0x4c>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	0112      	lsls	r2, r2, #4
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	440b      	add	r3, r1
 80026cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026d0:	e00a      	b.n	80026e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	b2da      	uxtb	r2, r3
 80026d6:	4908      	ldr	r1, [pc, #32]	@ (80026f8 <__NVIC_SetPriority+0x50>)
 80026d8:	79fb      	ldrb	r3, [r7, #7]
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	3b04      	subs	r3, #4
 80026e0:	0112      	lsls	r2, r2, #4
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	440b      	add	r3, r1
 80026e6:	761a      	strb	r2, [r3, #24]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr
 80026f4:	e000e100 	.word	0xe000e100
 80026f8:	e000ed00 	.word	0xe000ed00

080026fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b089      	sub	sp, #36	@ 0x24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f003 0307 	and.w	r3, r3, #7
 800270e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	f1c3 0307 	rsb	r3, r3, #7
 8002716:	2b04      	cmp	r3, #4
 8002718:	bf28      	it	cs
 800271a:	2304      	movcs	r3, #4
 800271c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	3304      	adds	r3, #4
 8002722:	2b06      	cmp	r3, #6
 8002724:	d902      	bls.n	800272c <NVIC_EncodePriority+0x30>
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	3b03      	subs	r3, #3
 800272a:	e000      	b.n	800272e <NVIC_EncodePriority+0x32>
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002730:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	43da      	mvns	r2, r3
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	401a      	ands	r2, r3
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002744:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	fa01 f303 	lsl.w	r3, r1, r3
 800274e:	43d9      	mvns	r1, r3
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002754:	4313      	orrs	r3, r2
         );
}
 8002756:	4618      	mov	r0, r3
 8002758:	3724      	adds	r7, #36	@ 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ff4c 	bl	8002608 <__NVIC_SetPriorityGrouping>
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002778:	b580      	push	{r7, lr}
 800277a:	b086      	sub	sp, #24
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
 8002784:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002786:	2300      	movs	r3, #0
 8002788:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278a:	f7ff ff61 	bl	8002650 <__NVIC_GetPriorityGrouping>
 800278e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	68b9      	ldr	r1, [r7, #8]
 8002794:	6978      	ldr	r0, [r7, #20]
 8002796:	f7ff ffb1 	bl	80026fc <NVIC_EncodePriority>
 800279a:	4602      	mov	r2, r0
 800279c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a0:	4611      	mov	r1, r2
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff80 	bl	80026a8 <__NVIC_SetPriority>
}
 80027a8:	bf00      	nop
 80027aa:	3718      	adds	r7, #24
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027be:	4618      	mov	r0, r3
 80027c0:	f7ff ff54 	bl	800266c <__NVIC_EnableIRQ>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027da:	f7ff ff09 	bl	80025f0 <HAL_GetTick>
 80027de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d008      	beq.n	80027fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2280      	movs	r2, #128	@ 0x80
 80027f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e052      	b.n	80028a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0216 	bic.w	r2, r2, #22
 800280c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800281c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <HAL_DMA_Abort+0x62>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0208 	bic.w	r2, r2, #8
 800283c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 0201 	bic.w	r2, r2, #1
 800284c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800284e:	e013      	b.n	8002878 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002850:	f7ff fece 	bl	80025f0 <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b05      	cmp	r3, #5
 800285c:	d90c      	bls.n	8002878 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2203      	movs	r2, #3
 8002868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2200      	movs	r2, #0
 8002870:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e015      	b.n	80028a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1e4      	bne.n	8002850 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288a:	223f      	movs	r2, #63	@ 0x3f
 800288c:	409a      	lsls	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d004      	beq.n	80028ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2280      	movs	r2, #128	@ 0x80
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e00c      	b.n	80028e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2205      	movs	r2, #5
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0201 	bic.w	r2, r2, #1
 80028e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr

080028f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	@ 0x24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002906:	2300      	movs	r3, #0
 8002908:	61fb      	str	r3, [r7, #28]
 800290a:	e16b      	b.n	8002be4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800290c:	2201      	movs	r2, #1
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	fa02 f303 	lsl.w	r3, r2, r3
 8002914:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4013      	ands	r3, r2
 800291e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	429a      	cmp	r2, r3
 8002926:	f040 815a 	bne.w	8002bde <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	2b01      	cmp	r3, #1
 8002934:	d005      	beq.n	8002942 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800293e:	2b02      	cmp	r3, #2
 8002940:	d130      	bne.n	80029a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	2203      	movs	r2, #3
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68da      	ldr	r2, [r3, #12]
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	fa02 f303 	lsl.w	r3, r2, r3
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002978:	2201      	movs	r2, #1
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	43db      	mvns	r3, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4013      	ands	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	091b      	lsrs	r3, r3, #4
 800298e:	f003 0201 	and.w	r2, r3, #1
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b03      	cmp	r3, #3
 80029ae:	d017      	beq.n	80029e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	005b      	lsls	r3, r3, #1
 80029ba:	2203      	movs	r2, #3
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689a      	ldr	r2, [r3, #8]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d123      	bne.n	8002a34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029ec:	69fb      	ldr	r3, [r7, #28]
 80029ee:	08da      	lsrs	r2, r3, #3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3208      	adds	r2, #8
 80029f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	f003 0307 	and.w	r3, r3, #7
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	220f      	movs	r2, #15
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	08da      	lsrs	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	3208      	adds	r2, #8
 8002a2e:	69b9      	ldr	r1, [r7, #24]
 8002a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	2203      	movs	r2, #3
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	43db      	mvns	r3, r3
 8002a46:	69ba      	ldr	r2, [r7, #24]
 8002a48:	4013      	ands	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	f003 0203 	and.w	r2, r3, #3
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f000 80b4 	beq.w	8002bde <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	4b60      	ldr	r3, [pc, #384]	@ (8002bfc <HAL_GPIO_Init+0x30c>)
 8002a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a7e:	4a5f      	ldr	r2, [pc, #380]	@ (8002bfc <HAL_GPIO_Init+0x30c>)
 8002a80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a86:	4b5d      	ldr	r3, [pc, #372]	@ (8002bfc <HAL_GPIO_Init+0x30c>)
 8002a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a8e:	60fb      	str	r3, [r7, #12]
 8002a90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a92:	4a5b      	ldr	r2, [pc, #364]	@ (8002c00 <HAL_GPIO_Init+0x310>)
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	220f      	movs	r2, #15
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	69ba      	ldr	r2, [r7, #24]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a52      	ldr	r2, [pc, #328]	@ (8002c04 <HAL_GPIO_Init+0x314>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d02b      	beq.n	8002b16 <HAL_GPIO_Init+0x226>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a51      	ldr	r2, [pc, #324]	@ (8002c08 <HAL_GPIO_Init+0x318>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d025      	beq.n	8002b12 <HAL_GPIO_Init+0x222>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a50      	ldr	r2, [pc, #320]	@ (8002c0c <HAL_GPIO_Init+0x31c>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d01f      	beq.n	8002b0e <HAL_GPIO_Init+0x21e>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a4f      	ldr	r2, [pc, #316]	@ (8002c10 <HAL_GPIO_Init+0x320>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d019      	beq.n	8002b0a <HAL_GPIO_Init+0x21a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a4e      	ldr	r2, [pc, #312]	@ (8002c14 <HAL_GPIO_Init+0x324>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d013      	beq.n	8002b06 <HAL_GPIO_Init+0x216>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a4d      	ldr	r2, [pc, #308]	@ (8002c18 <HAL_GPIO_Init+0x328>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00d      	beq.n	8002b02 <HAL_GPIO_Init+0x212>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a4c      	ldr	r2, [pc, #304]	@ (8002c1c <HAL_GPIO_Init+0x32c>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <HAL_GPIO_Init+0x20e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a4b      	ldr	r2, [pc, #300]	@ (8002c20 <HAL_GPIO_Init+0x330>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d101      	bne.n	8002afa <HAL_GPIO_Init+0x20a>
 8002af6:	2307      	movs	r3, #7
 8002af8:	e00e      	b.n	8002b18 <HAL_GPIO_Init+0x228>
 8002afa:	2308      	movs	r3, #8
 8002afc:	e00c      	b.n	8002b18 <HAL_GPIO_Init+0x228>
 8002afe:	2306      	movs	r3, #6
 8002b00:	e00a      	b.n	8002b18 <HAL_GPIO_Init+0x228>
 8002b02:	2305      	movs	r3, #5
 8002b04:	e008      	b.n	8002b18 <HAL_GPIO_Init+0x228>
 8002b06:	2304      	movs	r3, #4
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x228>
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e004      	b.n	8002b18 <HAL_GPIO_Init+0x228>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	e002      	b.n	8002b18 <HAL_GPIO_Init+0x228>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <HAL_GPIO_Init+0x228>
 8002b16:	2300      	movs	r3, #0
 8002b18:	69fa      	ldr	r2, [r7, #28]
 8002b1a:	f002 0203 	and.w	r2, r2, #3
 8002b1e:	0092      	lsls	r2, r2, #2
 8002b20:	4093      	lsls	r3, r2
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b28:	4935      	ldr	r1, [pc, #212]	@ (8002c00 <HAL_GPIO_Init+0x310>)
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	089b      	lsrs	r3, r3, #2
 8002b2e:	3302      	adds	r3, #2
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b36:	4b3b      	ldr	r3, [pc, #236]	@ (8002c24 <HAL_GPIO_Init+0x334>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5a:	4a32      	ldr	r2, [pc, #200]	@ (8002c24 <HAL_GPIO_Init+0x334>)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b60:	4b30      	ldr	r3, [pc, #192]	@ (8002c24 <HAL_GPIO_Init+0x334>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b84:	4a27      	ldr	r2, [pc, #156]	@ (8002c24 <HAL_GPIO_Init+0x334>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b8a:	4b26      	ldr	r3, [pc, #152]	@ (8002c24 <HAL_GPIO_Init+0x334>)
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	43db      	mvns	r3, r3
 8002b94:	69ba      	ldr	r2, [r7, #24]
 8002b96:	4013      	ands	r3, r2
 8002b98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002bae:	4a1d      	ldr	r2, [pc, #116]	@ (8002c24 <HAL_GPIO_Init+0x334>)
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002c24 <HAL_GPIO_Init+0x334>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	69ba      	ldr	r2, [r7, #24]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd8:	4a12      	ldr	r2, [pc, #72]	@ (8002c24 <HAL_GPIO_Init+0x334>)
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	3301      	adds	r3, #1
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b0f      	cmp	r3, #15
 8002be8:	f67f ae90 	bls.w	800290c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	bf00      	nop
 8002bf0:	3724      	adds	r7, #36	@ 0x24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	40023800 	.word	0x40023800
 8002c00:	40013800 	.word	0x40013800
 8002c04:	40020000 	.word	0x40020000
 8002c08:	40020400 	.word	0x40020400
 8002c0c:	40020800 	.word	0x40020800
 8002c10:	40020c00 	.word	0x40020c00
 8002c14:	40021000 	.word	0x40021000
 8002c18:	40021400 	.word	0x40021400
 8002c1c:	40021800 	.word	0x40021800
 8002c20:	40021c00 	.word	0x40021c00
 8002c24:	40013c00 	.word	0x40013c00

08002c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
 8002c30:	460b      	mov	r3, r1
 8002c32:	807b      	strh	r3, [r7, #2]
 8002c34:	4613      	mov	r3, r2
 8002c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c38:	787b      	ldrb	r3, [r7, #1]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d003      	beq.n	8002c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c3e:	887a      	ldrh	r2, [r7, #2]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c44:	e003      	b.n	8002c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c46:	887b      	ldrh	r3, [r7, #2]
 8002c48:	041a      	lsls	r2, r3, #16
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	619a      	str	r2, [r3, #24]
}
 8002c4e:	bf00      	nop
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e267      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d075      	beq.n	8002d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7a:	4b88      	ldr	r3, [pc, #544]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f003 030c 	and.w	r3, r3, #12
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d00c      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c86:	4b85      	ldr	r3, [pc, #532]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d112      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c92:	4b82      	ldr	r3, [pc, #520]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c9a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c9e:	d10b      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ca0:	4b7e      	ldr	r3, [pc, #504]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d05b      	beq.n	8002d64 <HAL_RCC_OscConfig+0x108>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d157      	bne.n	8002d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e242      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cc0:	d106      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x74>
 8002cc2:	4b76      	ldr	r3, [pc, #472]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a75      	ldr	r2, [pc, #468]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ccc:	6013      	str	r3, [r2, #0]
 8002cce:	e01d      	b.n	8002d0c <HAL_RCC_OscConfig+0xb0>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cd8:	d10c      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x98>
 8002cda:	4b70      	ldr	r3, [pc, #448]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a6f      	ldr	r2, [pc, #444]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002ce0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ce4:	6013      	str	r3, [r2, #0]
 8002ce6:	4b6d      	ldr	r3, [pc, #436]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a6c      	ldr	r2, [pc, #432]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	e00b      	b.n	8002d0c <HAL_RCC_OscConfig+0xb0>
 8002cf4:	4b69      	ldr	r3, [pc, #420]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a68      	ldr	r2, [pc, #416]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfe:	6013      	str	r3, [r2, #0]
 8002d00:	4b66      	ldr	r3, [pc, #408]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a65      	ldr	r2, [pc, #404]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d013      	beq.n	8002d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7ff fc6c 	bl	80025f0 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d1c:	f7ff fc68 	bl	80025f0 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b64      	cmp	r3, #100	@ 0x64
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e207      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0xc0>
 8002d3a:	e014      	b.n	8002d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d3c:	f7ff fc58 	bl	80025f0 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d44:	f7ff fc54 	bl	80025f0 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b64      	cmp	r3, #100	@ 0x64
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e1f3      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d56:	4b51      	ldr	r3, [pc, #324]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f0      	bne.n	8002d44 <HAL_RCC_OscConfig+0xe8>
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d063      	beq.n	8002e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d72:	4b4a      	ldr	r3, [pc, #296]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d7e:	4b47      	ldr	r3, [pc, #284]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d86:	2b08      	cmp	r3, #8
 8002d88:	d11c      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8a:	4b44      	ldr	r3, [pc, #272]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d116      	bne.n	8002dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d96:	4b41      	ldr	r3, [pc, #260]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d005      	beq.n	8002dae <HAL_RCC_OscConfig+0x152>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d001      	beq.n	8002dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e1c7      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dae:	4b3b      	ldr	r3, [pc, #236]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4937      	ldr	r1, [pc, #220]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	e03a      	b.n	8002e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d020      	beq.n	8002e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dcc:	4b34      	ldr	r3, [pc, #208]	@ (8002ea0 <HAL_RCC_OscConfig+0x244>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dd2:	f7ff fc0d 	bl	80025f0 <HAL_GetTick>
 8002dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dda:	f7ff fc09 	bl	80025f0 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e1a8      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dec:	4b2b      	ldr	r3, [pc, #172]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df8:	4b28      	ldr	r3, [pc, #160]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	4925      	ldr	r1, [pc, #148]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	600b      	str	r3, [r1, #0]
 8002e0c:	e015      	b.n	8002e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ea0 <HAL_RCC_OscConfig+0x244>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e14:	f7ff fbec 	bl	80025f0 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e1c:	f7ff fbe8 	bl	80025f0 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e187      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f0      	bne.n	8002e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d036      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e4e:	4b15      	ldr	r3, [pc, #84]	@ (8002ea4 <HAL_RCC_OscConfig+0x248>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e54:	f7ff fbcc 	bl	80025f0 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e5c:	f7ff fbc8 	bl	80025f0 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e167      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e9c <HAL_RCC_OscConfig+0x240>)
 8002e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x200>
 8002e7a:	e01b      	b.n	8002eb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e7c:	4b09      	ldr	r3, [pc, #36]	@ (8002ea4 <HAL_RCC_OscConfig+0x248>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e82:	f7ff fbb5 	bl	80025f0 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e88:	e00e      	b.n	8002ea8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e8a:	f7ff fbb1 	bl	80025f0 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d907      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e150      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	42470000 	.word	0x42470000
 8002ea4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea8:	4b88      	ldr	r3, [pc, #544]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ea      	bne.n	8002e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 8097 	beq.w	8002ff0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec6:	4b81      	ldr	r3, [pc, #516]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4b7d      	ldr	r3, [pc, #500]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	4a7c      	ldr	r2, [pc, #496]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ee0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ee2:	4b7a      	ldr	r3, [pc, #488]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b77      	ldr	r3, [pc, #476]	@ (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d118      	bne.n	8002f30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efe:	4b74      	ldr	r3, [pc, #464]	@ (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a73      	ldr	r2, [pc, #460]	@ (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0a:	f7ff fb71 	bl	80025f0 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f12:	f7ff fb6d 	bl	80025f0 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e10c      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f24:	4b6a      	ldr	r3, [pc, #424]	@ (80030d0 <HAL_RCC_OscConfig+0x474>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0f0      	beq.n	8002f12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d106      	bne.n	8002f46 <HAL_RCC_OscConfig+0x2ea>
 8002f38:	4b64      	ldr	r3, [pc, #400]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3c:	4a63      	ldr	r2, [pc, #396]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f3e:	f043 0301 	orr.w	r3, r3, #1
 8002f42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f44:	e01c      	b.n	8002f80 <HAL_RCC_OscConfig+0x324>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b05      	cmp	r3, #5
 8002f4c:	d10c      	bne.n	8002f68 <HAL_RCC_OscConfig+0x30c>
 8002f4e:	4b5f      	ldr	r3, [pc, #380]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f52:	4a5e      	ldr	r2, [pc, #376]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f5a:	4b5c      	ldr	r3, [pc, #368]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f5e:	4a5b      	ldr	r2, [pc, #364]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f60:	f043 0301 	orr.w	r3, r3, #1
 8002f64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f66:	e00b      	b.n	8002f80 <HAL_RCC_OscConfig+0x324>
 8002f68:	4b58      	ldr	r3, [pc, #352]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6c:	4a57      	ldr	r2, [pc, #348]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f023 0301 	bic.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f74:	4b55      	ldr	r3, [pc, #340]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f78:	4a54      	ldr	r2, [pc, #336]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002f7a:	f023 0304 	bic.w	r3, r3, #4
 8002f7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d015      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f88:	f7ff fb32 	bl	80025f0 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f8e:	e00a      	b.n	8002fa6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f90:	f7ff fb2e 	bl	80025f0 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e0cb      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa6:	4b49      	ldr	r3, [pc, #292]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0ee      	beq.n	8002f90 <HAL_RCC_OscConfig+0x334>
 8002fb2:	e014      	b.n	8002fde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb4:	f7ff fb1c 	bl	80025f0 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7ff fb18 	bl	80025f0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e0b5      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fd2:	4b3e      	ldr	r3, [pc, #248]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d1ee      	bne.n	8002fbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fde:	7dfb      	ldrb	r3, [r7, #23]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fe4:	4b39      	ldr	r3, [pc, #228]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	4a38      	ldr	r2, [pc, #224]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002fea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	699b      	ldr	r3, [r3, #24]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	f000 80a1 	beq.w	800313c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ffa:	4b34      	ldr	r3, [pc, #208]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 030c 	and.w	r3, r3, #12
 8003002:	2b08      	cmp	r3, #8
 8003004:	d05c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d141      	bne.n	8003092 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b31      	ldr	r3, [pc, #196]	@ (80030d4 <HAL_RCC_OscConfig+0x478>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003014:	f7ff faec 	bl	80025f0 <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301c:	f7ff fae8 	bl	80025f0 <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e087      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	4b27      	ldr	r3, [pc, #156]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	69da      	ldr	r2, [r3, #28]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	3b01      	subs	r3, #1
 8003054:	041b      	lsls	r3, r3, #16
 8003056:	431a      	orrs	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305c:	061b      	lsls	r3, r3, #24
 800305e:	491b      	ldr	r1, [pc, #108]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003064:	4b1b      	ldr	r3, [pc, #108]	@ (80030d4 <HAL_RCC_OscConfig+0x478>)
 8003066:	2201      	movs	r2, #1
 8003068:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306a:	f7ff fac1 	bl	80025f0 <HAL_GetTick>
 800306e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003070:	e008      	b.n	8003084 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003072:	f7ff fabd 	bl	80025f0 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d901      	bls.n	8003084 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	e05c      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003084:	4b11      	ldr	r3, [pc, #68]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d0f0      	beq.n	8003072 <HAL_RCC_OscConfig+0x416>
 8003090:	e054      	b.n	800313c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003092:	4b10      	ldr	r3, [pc, #64]	@ (80030d4 <HAL_RCC_OscConfig+0x478>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003098:	f7ff faaa 	bl	80025f0 <HAL_GetTick>
 800309c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030a0:	f7ff faa6 	bl	80025f0 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b02      	cmp	r3, #2
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e045      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b2:	4b06      	ldr	r3, [pc, #24]	@ (80030cc <HAL_RCC_OscConfig+0x470>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x444>
 80030be:	e03d      	b.n	800313c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d107      	bne.n	80030d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e038      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
 80030cc:	40023800 	.word	0x40023800
 80030d0:	40007000 	.word	0x40007000
 80030d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003148 <HAL_RCC_OscConfig+0x4ec>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d028      	beq.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d121      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	429a      	cmp	r2, r3
 8003100:	d11a      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003102:	68fa      	ldr	r2, [r7, #12]
 8003104:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003108:	4013      	ands	r3, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800310e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003110:	4293      	cmp	r3, r2
 8003112:	d111      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800311e:	085b      	lsrs	r3, r3, #1
 8003120:	3b01      	subs	r3, #1
 8003122:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003124:	429a      	cmp	r2, r3
 8003126:	d107      	bne.n	8003138 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003132:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023800 	.word	0x40023800

0800314c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d101      	bne.n	8003160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e0cc      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003160:	4b68      	ldr	r3, [pc, #416]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d90c      	bls.n	8003188 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b65      	ldr	r3, [pc, #404]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b63      	ldr	r3, [pc, #396]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0b8      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a0:	4b59      	ldr	r3, [pc, #356]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	4a58      	ldr	r2, [pc, #352]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b8:	4b53      	ldr	r3, [pc, #332]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	4a52      	ldr	r2, [pc, #328]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c4:	4b50      	ldr	r3, [pc, #320]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	494d      	ldr	r1, [pc, #308]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d044      	beq.n	800326c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	4b47      	ldr	r3, [pc, #284]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d119      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e07f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d003      	beq.n	800320a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003206:	2b03      	cmp	r3, #3
 8003208:	d107      	bne.n	800321a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320a:	4b3f      	ldr	r3, [pc, #252]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d109      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e06f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800321a:	4b3b      	ldr	r3, [pc, #236]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e067      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800322a:	4b37      	ldr	r3, [pc, #220]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f023 0203 	bic.w	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	4934      	ldr	r1, [pc, #208]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	4313      	orrs	r3, r2
 800323a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800323c:	f7ff f9d8 	bl	80025f0 <HAL_GetTick>
 8003240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003242:	e00a      	b.n	800325a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003244:	f7ff f9d4 	bl	80025f0 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e04f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800325a:	4b2b      	ldr	r3, [pc, #172]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 020c 	and.w	r2, r3, #12
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	429a      	cmp	r2, r3
 800326a:	d1eb      	bne.n	8003244 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800326c:	4b25      	ldr	r3, [pc, #148]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	429a      	cmp	r2, r3
 8003278:	d20c      	bcs.n	8003294 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800327a:	4b22      	ldr	r3, [pc, #136]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b20      	ldr	r3, [pc, #128]	@ (8003304 <HAL_RCC_ClockConfig+0x1b8>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e032      	b.n	80032fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a0:	4b19      	ldr	r3, [pc, #100]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4916      	ldr	r1, [pc, #88]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032be:	4b12      	ldr	r3, [pc, #72]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	490e      	ldr	r1, [pc, #56]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032d2:	f000 f821 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 80032d6:	4602      	mov	r2, r0
 80032d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003308 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	490a      	ldr	r1, [pc, #40]	@ (800330c <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	5ccb      	ldrb	r3, [r1, r3]
 80032e6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ea:	4a09      	ldr	r2, [pc, #36]	@ (8003310 <HAL_RCC_ClockConfig+0x1c4>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ee:	4b09      	ldr	r3, [pc, #36]	@ (8003314 <HAL_RCC_ClockConfig+0x1c8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f828 	bl	8002348 <HAL_InitTick>

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40023c00 	.word	0x40023c00
 8003308:	40023800 	.word	0x40023800
 800330c:	080091a4 	.word	0x080091a4
 8003310:	20000058 	.word	0x20000058
 8003314:	2000005c 	.word	0x2000005c

08003318 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800331c:	b094      	sub	sp, #80	@ 0x50
 800331e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	647b      	str	r3, [r7, #68]	@ 0x44
 8003324:	2300      	movs	r3, #0
 8003326:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003328:	2300      	movs	r3, #0
 800332a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003330:	4b79      	ldr	r3, [pc, #484]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d00d      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x40>
 800333c:	2b08      	cmp	r3, #8
 800333e:	f200 80e1 	bhi.w	8003504 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003342:	2b00      	cmp	r3, #0
 8003344:	d002      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x34>
 8003346:	2b04      	cmp	r3, #4
 8003348:	d003      	beq.n	8003352 <HAL_RCC_GetSysClockFreq+0x3a>
 800334a:	e0db      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800334c:	4b73      	ldr	r3, [pc, #460]	@ (800351c <HAL_RCC_GetSysClockFreq+0x204>)
 800334e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003350:	e0db      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003352:	4b73      	ldr	r3, [pc, #460]	@ (8003520 <HAL_RCC_GetSysClockFreq+0x208>)
 8003354:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003356:	e0d8      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003358:	4b6f      	ldr	r3, [pc, #444]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003360:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003362:	4b6d      	ldr	r3, [pc, #436]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800336e:	4b6a      	ldr	r3, [pc, #424]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	099b      	lsrs	r3, r3, #6
 8003374:	2200      	movs	r2, #0
 8003376:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003378:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800337a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003380:	633b      	str	r3, [r7, #48]	@ 0x30
 8003382:	2300      	movs	r3, #0
 8003384:	637b      	str	r3, [r7, #52]	@ 0x34
 8003386:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800338a:	4622      	mov	r2, r4
 800338c:	462b      	mov	r3, r5
 800338e:	f04f 0000 	mov.w	r0, #0
 8003392:	f04f 0100 	mov.w	r1, #0
 8003396:	0159      	lsls	r1, r3, #5
 8003398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800339c:	0150      	lsls	r0, r2, #5
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4621      	mov	r1, r4
 80033a4:	1a51      	subs	r1, r2, r1
 80033a6:	6139      	str	r1, [r7, #16]
 80033a8:	4629      	mov	r1, r5
 80033aa:	eb63 0301 	sbc.w	r3, r3, r1
 80033ae:	617b      	str	r3, [r7, #20]
 80033b0:	f04f 0200 	mov.w	r2, #0
 80033b4:	f04f 0300 	mov.w	r3, #0
 80033b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033bc:	4659      	mov	r1, fp
 80033be:	018b      	lsls	r3, r1, #6
 80033c0:	4651      	mov	r1, sl
 80033c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033c6:	4651      	mov	r1, sl
 80033c8:	018a      	lsls	r2, r1, #6
 80033ca:	4651      	mov	r1, sl
 80033cc:	ebb2 0801 	subs.w	r8, r2, r1
 80033d0:	4659      	mov	r1, fp
 80033d2:	eb63 0901 	sbc.w	r9, r3, r1
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	f04f 0300 	mov.w	r3, #0
 80033de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ea:	4690      	mov	r8, r2
 80033ec:	4699      	mov	r9, r3
 80033ee:	4623      	mov	r3, r4
 80033f0:	eb18 0303 	adds.w	r3, r8, r3
 80033f4:	60bb      	str	r3, [r7, #8]
 80033f6:	462b      	mov	r3, r5
 80033f8:	eb49 0303 	adc.w	r3, r9, r3
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800340a:	4629      	mov	r1, r5
 800340c:	024b      	lsls	r3, r1, #9
 800340e:	4621      	mov	r1, r4
 8003410:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003414:	4621      	mov	r1, r4
 8003416:	024a      	lsls	r2, r1, #9
 8003418:	4610      	mov	r0, r2
 800341a:	4619      	mov	r1, r3
 800341c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800341e:	2200      	movs	r2, #0
 8003420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003422:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003424:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003428:	f7fd fb30 	bl	8000a8c <__aeabi_uldivmod>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4613      	mov	r3, r2
 8003432:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003434:	e058      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003436:	4b38      	ldr	r3, [pc, #224]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	099b      	lsrs	r3, r3, #6
 800343c:	2200      	movs	r2, #0
 800343e:	4618      	mov	r0, r3
 8003440:	4611      	mov	r1, r2
 8003442:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003446:	623b      	str	r3, [r7, #32]
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	@ 0x24
 800344c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003450:	4642      	mov	r2, r8
 8003452:	464b      	mov	r3, r9
 8003454:	f04f 0000 	mov.w	r0, #0
 8003458:	f04f 0100 	mov.w	r1, #0
 800345c:	0159      	lsls	r1, r3, #5
 800345e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003462:	0150      	lsls	r0, r2, #5
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4641      	mov	r1, r8
 800346a:	ebb2 0a01 	subs.w	sl, r2, r1
 800346e:	4649      	mov	r1, r9
 8003470:	eb63 0b01 	sbc.w	fp, r3, r1
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003480:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003484:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003488:	ebb2 040a 	subs.w	r4, r2, sl
 800348c:	eb63 050b 	sbc.w	r5, r3, fp
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	f04f 0300 	mov.w	r3, #0
 8003498:	00eb      	lsls	r3, r5, #3
 800349a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800349e:	00e2      	lsls	r2, r4, #3
 80034a0:	4614      	mov	r4, r2
 80034a2:	461d      	mov	r5, r3
 80034a4:	4643      	mov	r3, r8
 80034a6:	18e3      	adds	r3, r4, r3
 80034a8:	603b      	str	r3, [r7, #0]
 80034aa:	464b      	mov	r3, r9
 80034ac:	eb45 0303 	adc.w	r3, r5, r3
 80034b0:	607b      	str	r3, [r7, #4]
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	f04f 0300 	mov.w	r3, #0
 80034ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034be:	4629      	mov	r1, r5
 80034c0:	028b      	lsls	r3, r1, #10
 80034c2:	4621      	mov	r1, r4
 80034c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034c8:	4621      	mov	r1, r4
 80034ca:	028a      	lsls	r2, r1, #10
 80034cc:	4610      	mov	r0, r2
 80034ce:	4619      	mov	r1, r3
 80034d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80034d2:	2200      	movs	r2, #0
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	61fa      	str	r2, [r7, #28]
 80034d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034dc:	f7fd fad6 	bl	8000a8c <__aeabi_uldivmod>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4613      	mov	r3, r2
 80034e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x200>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	3301      	adds	r3, #1
 80034f4:	005b      	lsls	r3, r3, #1
 80034f6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80034f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80034fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003500:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003502:	e002      	b.n	800350a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003504:	4b05      	ldr	r3, [pc, #20]	@ (800351c <HAL_RCC_GetSysClockFreq+0x204>)
 8003506:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800350a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800350c:	4618      	mov	r0, r3
 800350e:	3750      	adds	r7, #80	@ 0x50
 8003510:	46bd      	mov	sp, r7
 8003512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	00f42400 	.word	0x00f42400
 8003520:	007a1200 	.word	0x007a1200

08003524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b03      	ldr	r3, [pc, #12]	@ (8003538 <HAL_RCC_GetHCLKFreq+0x14>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
 8003536:	bf00      	nop
 8003538:	20000058 	.word	0x20000058

0800353c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003540:	f7ff fff0 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003544:	4602      	mov	r2, r0
 8003546:	4b05      	ldr	r3, [pc, #20]	@ (800355c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	0a9b      	lsrs	r3, r3, #10
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	4903      	ldr	r1, [pc, #12]	@ (8003560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003552:	5ccb      	ldrb	r3, [r1, r3]
 8003554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003558:	4618      	mov	r0, r3
 800355a:	bd80      	pop	{r7, pc}
 800355c:	40023800 	.word	0x40023800
 8003560:	080091b4 	.word	0x080091b4

08003564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003568:	f7ff ffdc 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 800356c:	4602      	mov	r2, r0
 800356e:	4b05      	ldr	r3, [pc, #20]	@ (8003584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	0b5b      	lsrs	r3, r3, #13
 8003574:	f003 0307 	and.w	r3, r3, #7
 8003578:	4903      	ldr	r1, [pc, #12]	@ (8003588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800357a:	5ccb      	ldrb	r3, [r1, r3]
 800357c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003580:	4618      	mov	r0, r3
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40023800 	.word	0x40023800
 8003588:	080091b4 	.word	0x080091b4

0800358c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	220f      	movs	r2, #15
 800359a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800359c:	4b12      	ldr	r3, [pc, #72]	@ (80035e8 <HAL_RCC_GetClockConfig+0x5c>)
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0203 	and.w	r2, r3, #3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035a8:	4b0f      	ldr	r3, [pc, #60]	@ (80035e8 <HAL_RCC_GetClockConfig+0x5c>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035b4:	4b0c      	ldr	r3, [pc, #48]	@ (80035e8 <HAL_RCC_GetClockConfig+0x5c>)
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035c0:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <HAL_RCC_GetClockConfig+0x5c>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	08db      	lsrs	r3, r3, #3
 80035c6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035ce:	4b07      	ldr	r3, [pc, #28]	@ (80035ec <HAL_RCC_GetClockConfig+0x60>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0207 	and.w	r2, r3, #7
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	601a      	str	r2, [r3, #0]
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40023c00 	.word	0x40023c00

080035f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d105      	bne.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003614:	2b00      	cmp	r3, #0
 8003616:	d035      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003618:	4b62      	ldr	r3, [pc, #392]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800361e:	f7fe ffe7 	bl	80025f0 <HAL_GetTick>
 8003622:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003626:	f7fe ffe3 	bl	80025f0 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e0b0      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003638:	4b5b      	ldr	r3, [pc, #364]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	019a      	lsls	r2, r3, #6
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	071b      	lsls	r3, r3, #28
 8003650:	4955      	ldr	r1, [pc, #340]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003652:	4313      	orrs	r3, r2
 8003654:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003658:	4b52      	ldr	r3, [pc, #328]	@ (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800365a:	2201      	movs	r2, #1
 800365c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800365e:	f7fe ffc7 	bl	80025f0 <HAL_GetTick>
 8003662:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003664:	e008      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003666:	f7fe ffc3 	bl	80025f0 <HAL_GetTick>
 800366a:	4602      	mov	r2, r0
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	1ad3      	subs	r3, r2, r3
 8003670:	2b02      	cmp	r3, #2
 8003672:	d901      	bls.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e090      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003678:	4b4b      	ldr	r3, [pc, #300]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0f0      	beq.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8083 	beq.w	8003798 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b44      	ldr	r3, [pc, #272]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369a:	4a43      	ldr	r2, [pc, #268]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800369c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036a2:	4b41      	ldr	r3, [pc, #260]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036ae:	4b3f      	ldr	r3, [pc, #252]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a3e      	ldr	r2, [pc, #248]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036ba:	f7fe ff99 	bl	80025f0 <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036c0:	e008      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80036c2:	f7fe ff95 	bl	80025f0 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e062      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80036d4:	4b35      	ldr	r3, [pc, #212]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0f0      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036e0:	4b31      	ldr	r3, [pc, #196]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036e8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d02f      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d028      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036fe:	4b2a      	ldr	r3, [pc, #168]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003702:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003706:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003708:	4b29      	ldr	r3, [pc, #164]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800370a:	2201      	movs	r2, #1
 800370c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800370e:	4b28      	ldr	r3, [pc, #160]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003714:	4a24      	ldr	r2, [pc, #144]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800371a:	4b23      	ldr	r3, [pc, #140]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b01      	cmp	r3, #1
 8003724:	d114      	bne.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003726:	f7fe ff63 	bl	80025f0 <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800372c:	e00a      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800372e:	f7fe ff5f 	bl	80025f0 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800373c:	4293      	cmp	r3, r2
 800373e:	d901      	bls.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e02a      	b.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003744:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003746:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003748:	f003 0302 	and.w	r3, r3, #2
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0ee      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003758:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800375c:	d10d      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800375e:	4b12      	ldr	r3, [pc, #72]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800376e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003772:	490d      	ldr	r1, [pc, #52]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003774:	4313      	orrs	r3, r2
 8003776:	608b      	str	r3, [r1, #8]
 8003778:	e005      	b.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800377a:	4b0b      	ldr	r3, [pc, #44]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003780:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003784:	6093      	str	r3, [r2, #8]
 8003786:	4b08      	ldr	r3, [pc, #32]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003788:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003792:	4905      	ldr	r1, [pc, #20]	@ (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003794:	4313      	orrs	r3, r2
 8003796:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	42470068 	.word	0x42470068
 80037a8:	40023800 	.word	0x40023800
 80037ac:	40007000 	.word	0x40007000
 80037b0:	42470e40 	.word	0x42470e40

080037b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e073      	b.n	80038b2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	7f5b      	ldrb	r3, [r3, #29]
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d105      	bne.n	80037e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7fe fd3a 	bl	8002254 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	f003 0310 	and.w	r3, r3, #16
 80037f0:	2b10      	cmp	r3, #16
 80037f2:	d055      	beq.n	80038a0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	22ca      	movs	r2, #202	@ 0xca
 80037fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2253      	movs	r2, #83	@ 0x53
 8003802:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fa49 	bl	8003c9c <RTC_EnterInitMode>
 800380a:	4603      	mov	r3, r0
 800380c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d12c      	bne.n	800386e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003822:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003826:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6899      	ldr	r1, [r3, #8]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	431a      	orrs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	695b      	ldr	r3, [r3, #20]
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	430a      	orrs	r2, r1
 8003844:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68d2      	ldr	r2, [r2, #12]
 800384e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6919      	ldr	r1, [r3, #16]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	041a      	lsls	r2, r3, #16
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fa50 	bl	8003d0a <RTC_ExitInitMode>
 800386a:	4603      	mov	r3, r0
 800386c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800386e:	7bfb      	ldrb	r3, [r7, #15]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d110      	bne.n	8003896 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003882:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699a      	ldr	r2, [r3, #24]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	22ff      	movs	r2, #255	@ 0xff
 800389c:	625a      	str	r2, [r3, #36]	@ 0x24
 800389e:	e001      	b.n	80038a4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80038a0:	2300      	movs	r3, #0
 80038a2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80038a4:	7bfb      	ldrb	r3, [r7, #15]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d102      	bne.n	80038b0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80038b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80038ba:	b590      	push	{r4, r7, lr}
 80038bc:	b087      	sub	sp, #28
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	7f1b      	ldrb	r3, [r3, #28]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d101      	bne.n	80038d6 <HAL_RTC_SetTime+0x1c>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e087      	b.n	80039e6 <HAL_RTC_SetTime+0x12c>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2202      	movs	r2, #2
 80038e0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d126      	bne.n	8003936 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d102      	bne.n	80038fc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	2200      	movs	r2, #0
 80038fa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f000 fa27 	bl	8003d54 <RTC_ByteToBcd2>
 8003906:	4603      	mov	r3, r0
 8003908:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	785b      	ldrb	r3, [r3, #1]
 800390e:	4618      	mov	r0, r3
 8003910:	f000 fa20 	bl	8003d54 <RTC_ByteToBcd2>
 8003914:	4603      	mov	r3, r0
 8003916:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003918:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	789b      	ldrb	r3, [r3, #2]
 800391e:	4618      	mov	r0, r3
 8003920:	f000 fa18 	bl	8003d54 <RTC_ByteToBcd2>
 8003924:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003926:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	78db      	ldrb	r3, [r3, #3]
 800392e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003930:	4313      	orrs	r3, r2
 8003932:	617b      	str	r3, [r7, #20]
 8003934:	e018      	b.n	8003968 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2200      	movs	r2, #0
 8003948:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	785b      	ldrb	r3, [r3, #1]
 8003954:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003956:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003958:	68ba      	ldr	r2, [r7, #8]
 800395a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800395c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	78db      	ldrb	r3, [r3, #3]
 8003962:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003964:	4313      	orrs	r3, r2
 8003966:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	22ca      	movs	r2, #202	@ 0xca
 800396e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2253      	movs	r2, #83	@ 0x53
 8003976:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f98f 	bl	8003c9c <RTC_EnterInitMode>
 800397e:	4603      	mov	r3, r0
 8003980:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003982:	7cfb      	ldrb	r3, [r7, #19]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d120      	bne.n	80039ca <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003992:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003996:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689a      	ldr	r2, [r3, #8]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80039a6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6899      	ldr	r1, [r3, #8]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	68da      	ldr	r2, [r3, #12]
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	430a      	orrs	r2, r1
 80039be:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f000 f9a2 	bl	8003d0a <RTC_ExitInitMode>
 80039c6:	4603      	mov	r3, r0
 80039c8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	22ff      	movs	r2, #255	@ 0xff
 80039dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]

  return status;
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd90      	pop	{r4, r7, pc}

080039ee <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b086      	sub	sp, #24
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	691b      	ldr	r3, [r3, #16]
 8003a0e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003a20:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003a24:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	0c1b      	lsrs	r3, r3, #16
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a4e:	b2da      	uxtb	r2, r3
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	0d9b      	lsrs	r3, r3, #22
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	f003 0301 	and.w	r3, r3, #1
 8003a5e:	b2da      	uxtb	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d11a      	bne.n	8003aa0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 f98e 	bl	8003d90 <RTC_Bcd2ToByte>
 8003a74:	4603      	mov	r3, r0
 8003a76:	461a      	mov	r2, r3
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	785b      	ldrb	r3, [r3, #1]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 f985 	bl	8003d90 <RTC_Bcd2ToByte>
 8003a86:	4603      	mov	r3, r0
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	789b      	ldrb	r3, [r3, #2]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 f97c 	bl	8003d90 <RTC_Bcd2ToByte>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003aaa:	b590      	push	{r4, r7, lr}
 8003aac:	b087      	sub	sp, #28
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	60f8      	str	r0, [r7, #12]
 8003ab2:	60b9      	str	r1, [r7, #8]
 8003ab4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	7f1b      	ldrb	r3, [r3, #28]
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_RTC_SetDate+0x1c>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	e071      	b.n	8003baa <HAL_RTC_SetDate+0x100>
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d10e      	bne.n	8003af6 <HAL_RTC_SetDate+0x4c>
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	785b      	ldrb	r3, [r3, #1]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d008      	beq.n	8003af6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	f023 0310 	bic.w	r3, r3, #16
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	330a      	adds	r3, #10
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d11c      	bne.n	8003b36 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	78db      	ldrb	r3, [r3, #3]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f000 f927 	bl	8003d54 <RTC_ByteToBcd2>
 8003b06:	4603      	mov	r3, r0
 8003b08:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	785b      	ldrb	r3, [r3, #1]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 f920 	bl	8003d54 <RTC_ByteToBcd2>
 8003b14:	4603      	mov	r3, r0
 8003b16:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003b18:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	789b      	ldrb	r3, [r3, #2]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 f918 	bl	8003d54 <RTC_ByteToBcd2>
 8003b24:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003b26:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003b30:	4313      	orrs	r3, r2
 8003b32:	617b      	str	r3, [r7, #20]
 8003b34:	e00e      	b.n	8003b54 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	78db      	ldrb	r3, [r3, #3]
 8003b3a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	785b      	ldrb	r3, [r3, #1]
 8003b40:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003b42:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003b48:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003b50:	4313      	orrs	r3, r2
 8003b52:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	22ca      	movs	r2, #202	@ 0xca
 8003b5a:	625a      	str	r2, [r3, #36]	@ 0x24
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2253      	movs	r2, #83	@ 0x53
 8003b62:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003b64:	68f8      	ldr	r0, [r7, #12]
 8003b66:	f000 f899 	bl	8003c9c <RTC_EnterInitMode>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003b6e:	7cfb      	ldrb	r3, [r7, #19]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10c      	bne.n	8003b8e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003b7e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003b82:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f8c0 	bl	8003d0a <RTC_ExitInitMode>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003b8e:	7cfb      	ldrb	r3, [r7, #19]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d102      	bne.n	8003b9a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	22ff      	movs	r2, #255	@ 0xff
 8003ba0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	771a      	strb	r2, [r3, #28]

  return status;
 8003ba8:	7cfb      	ldrb	r3, [r7, #19]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	371c      	adds	r7, #28
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd90      	pop	{r4, r7, pc}

08003bb2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b086      	sub	sp, #24
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	60f8      	str	r0, [r7, #12]
 8003bba:	60b9      	str	r1, [r7, #8]
 8003bbc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003bcc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003bd0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	b2da      	uxtb	r2, r3
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	b2da      	uxtb	r2, r3
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	0b5b      	lsrs	r3, r3, #13
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d11a      	bne.n	8003c46 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	78db      	ldrb	r3, [r3, #3]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 f8bb 	bl	8003d90 <RTC_Bcd2ToByte>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	785b      	ldrb	r3, [r3, #1]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 f8b2 	bl	8003d90 <RTC_Bcd2ToByte>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	789b      	ldrb	r3, [r3, #2]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 f8a9 	bl	8003d90 <RTC_Bcd2ToByte>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	461a      	mov	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003c46:	2300      	movs	r3, #0
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a0d      	ldr	r2, [pc, #52]	@ (8003c98 <HAL_RTC_WaitForSynchro+0x48>)
 8003c62:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c64:	f7fe fcc4 	bl	80025f0 <HAL_GetTick>
 8003c68:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c6a:	e009      	b.n	8003c80 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003c6c:	f7fe fcc0 	bl	80025f0 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003c7a:	d901      	bls.n	8003c80 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e007      	b.n	8003c90 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0ee      	beq.n	8003c6c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	00017f5f 	.word	0x00017f5f

08003c9c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d122      	bne.n	8003d00 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68da      	ldr	r2, [r3, #12]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003cc8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003cca:	f7fe fc91 	bl	80025f0 <HAL_GetTick>
 8003cce:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003cd0:	e00c      	b.n	8003cec <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003cd2:	f7fe fc8d 	bl	80025f0 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ce0:	d904      	bls.n	8003cec <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2204      	movs	r2, #4
 8003ce6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d102      	bne.n	8003d00 <RTC_EnterInitMode+0x64>
 8003cfa:	7bfb      	ldrb	r3, [r7, #15]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d1e8      	bne.n	8003cd2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003d24:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0320 	and.w	r3, r3, #32
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10a      	bne.n	8003d4a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f7ff ff8b 	bl	8003c50 <HAL_RTC_WaitForSynchro>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d004      	beq.n	8003d4a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2204      	movs	r2, #4
 8003d44:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003d62:	e005      	b.n	8003d70 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3301      	adds	r3, #1
 8003d68:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003d6a:	79fb      	ldrb	r3, [r7, #7]
 8003d6c:	3b0a      	subs	r3, #10
 8003d6e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	2b09      	cmp	r3, #9
 8003d74:	d8f6      	bhi.n	8003d64 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	b2da      	uxtb	r2, r3
 8003d7e:	79fb      	ldrb	r3, [r7, #7]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b2db      	uxtb	r3, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	4603      	mov	r3, r0
 8003d98:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	461a      	mov	r2, r3
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	79fb      	ldrb	r3, [r7, #7]
 8003db6:	f003 030f 	and.w	r3, r3, #15
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	b2db      	uxtb	r3, r3
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3714      	adds	r7, #20
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e041      	b.n	8003e62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d106      	bne.n	8003df8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f839 	bl	8003e6a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3304      	adds	r3, #4
 8003e08:	4619      	mov	r1, r3
 8003e0a:	4610      	mov	r0, r2
 8003e0c:	f000 f9c0 	bl	8004190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3708      	adds	r7, #8
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
	...

08003e80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d001      	beq.n	8003e98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e04e      	b.n	8003f36 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2202      	movs	r2, #2
 8003e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68da      	ldr	r2, [r3, #12]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0201 	orr.w	r2, r2, #1
 8003eae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a23      	ldr	r2, [pc, #140]	@ (8003f44 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d022      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec2:	d01d      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f48 <HAL_TIM_Base_Start_IT+0xc8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d018      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f4c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a1c      	ldr	r2, [pc, #112]	@ (8003f50 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00e      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f54 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d009      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a19      	ldr	r2, [pc, #100]	@ (8003f58 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d004      	beq.n	8003f00 <HAL_TIM_Base_Start_IT+0x80>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a18      	ldr	r2, [pc, #96]	@ (8003f5c <HAL_TIM_Base_Start_IT+0xdc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d111      	bne.n	8003f24 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b06      	cmp	r3, #6
 8003f10:	d010      	beq.n	8003f34 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f22:	e007      	b.n	8003f34 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0201 	orr.w	r2, r2, #1
 8003f32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40010000 	.word	0x40010000
 8003f48:	40000400 	.word	0x40000400
 8003f4c:	40000800 	.word	0x40000800
 8003f50:	40000c00 	.word	0x40000c00
 8003f54:	40010400 	.word	0x40010400
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40001800 	.word	0x40001800

08003f60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d020      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f003 0302 	and.w	r3, r3, #2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d01b      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0202 	mvn.w	r2, #2
 8003f94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f003 0303 	and.w	r3, r3, #3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 f8d2 	bl	8004154 <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 f8c4 	bl	8004140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 f8d5 	bl	8004168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d020      	beq.n	8004010 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d01b      	beq.n	8004010 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0204 	mvn.w	r2, #4
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f8ac 	bl	8004154 <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f89e 	bl	8004140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f8af 	bl	8004168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	f003 0308 	and.w	r3, r3, #8
 8004016:	2b00      	cmp	r3, #0
 8004018:	d020      	beq.n	800405c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f003 0308 	and.w	r3, r3, #8
 8004020:	2b00      	cmp	r3, #0
 8004022:	d01b      	beq.n	800405c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f06f 0208 	mvn.w	r2, #8
 800402c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2204      	movs	r2, #4
 8004032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	69db      	ldr	r3, [r3, #28]
 800403a:	f003 0303 	and.w	r3, r3, #3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 f886 	bl	8004154 <HAL_TIM_IC_CaptureCallback>
 8004048:	e005      	b.n	8004056 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f878 	bl	8004140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f889 	bl	8004168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f003 0310 	and.w	r3, r3, #16
 8004062:	2b00      	cmp	r3, #0
 8004064:	d020      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	d01b      	beq.n	80040a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f06f 0210 	mvn.w	r2, #16
 8004078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2208      	movs	r2, #8
 800407e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800408a:	2b00      	cmp	r3, #0
 800408c:	d003      	beq.n	8004096 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f860 	bl	8004154 <HAL_TIM_IC_CaptureCallback>
 8004094:	e005      	b.n	80040a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f852 	bl	8004140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f000 f863 	bl	8004168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00c      	beq.n	80040cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d007      	beq.n	80040cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f06f 0201 	mvn.w	r2, #1
 80040c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fe f884 	bl	80021d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d007      	beq.n	80040f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f906 	bl	80042fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00c      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004100:	2b00      	cmp	r3, #0
 8004102:	d007      	beq.n	8004114 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800410c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f834 	bl	800417c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0320 	and.w	r3, r3, #32
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00c      	beq.n	8004138 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d007      	beq.n	8004138 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0220 	mvn.w	r2, #32
 8004130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f8d8 	bl	80042e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004138:	bf00      	nop
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a46      	ldr	r2, [pc, #280]	@ (80042bc <TIM_Base_SetConfig+0x12c>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d013      	beq.n	80041d0 <TIM_Base_SetConfig+0x40>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ae:	d00f      	beq.n	80041d0 <TIM_Base_SetConfig+0x40>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a43      	ldr	r2, [pc, #268]	@ (80042c0 <TIM_Base_SetConfig+0x130>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d00b      	beq.n	80041d0 <TIM_Base_SetConfig+0x40>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a42      	ldr	r2, [pc, #264]	@ (80042c4 <TIM_Base_SetConfig+0x134>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d007      	beq.n	80041d0 <TIM_Base_SetConfig+0x40>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a41      	ldr	r2, [pc, #260]	@ (80042c8 <TIM_Base_SetConfig+0x138>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d003      	beq.n	80041d0 <TIM_Base_SetConfig+0x40>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	4a40      	ldr	r2, [pc, #256]	@ (80042cc <TIM_Base_SetConfig+0x13c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d108      	bne.n	80041e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	68fa      	ldr	r2, [r7, #12]
 80041de:	4313      	orrs	r3, r2
 80041e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a35      	ldr	r2, [pc, #212]	@ (80042bc <TIM_Base_SetConfig+0x12c>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d02b      	beq.n	8004242 <TIM_Base_SetConfig+0xb2>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f0:	d027      	beq.n	8004242 <TIM_Base_SetConfig+0xb2>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a32      	ldr	r2, [pc, #200]	@ (80042c0 <TIM_Base_SetConfig+0x130>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d023      	beq.n	8004242 <TIM_Base_SetConfig+0xb2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a31      	ldr	r2, [pc, #196]	@ (80042c4 <TIM_Base_SetConfig+0x134>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d01f      	beq.n	8004242 <TIM_Base_SetConfig+0xb2>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a30      	ldr	r2, [pc, #192]	@ (80042c8 <TIM_Base_SetConfig+0x138>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d01b      	beq.n	8004242 <TIM_Base_SetConfig+0xb2>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a2f      	ldr	r2, [pc, #188]	@ (80042cc <TIM_Base_SetConfig+0x13c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d017      	beq.n	8004242 <TIM_Base_SetConfig+0xb2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a2e      	ldr	r2, [pc, #184]	@ (80042d0 <TIM_Base_SetConfig+0x140>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d013      	beq.n	8004242 <TIM_Base_SetConfig+0xb2>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a2d      	ldr	r2, [pc, #180]	@ (80042d4 <TIM_Base_SetConfig+0x144>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d00f      	beq.n	8004242 <TIM_Base_SetConfig+0xb2>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a2c      	ldr	r2, [pc, #176]	@ (80042d8 <TIM_Base_SetConfig+0x148>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00b      	beq.n	8004242 <TIM_Base_SetConfig+0xb2>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a2b      	ldr	r2, [pc, #172]	@ (80042dc <TIM_Base_SetConfig+0x14c>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d007      	beq.n	8004242 <TIM_Base_SetConfig+0xb2>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a2a      	ldr	r2, [pc, #168]	@ (80042e0 <TIM_Base_SetConfig+0x150>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d003      	beq.n	8004242 <TIM_Base_SetConfig+0xb2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	4a29      	ldr	r2, [pc, #164]	@ (80042e4 <TIM_Base_SetConfig+0x154>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d108      	bne.n	8004254 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	4313      	orrs	r3, r2
 8004252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	695b      	ldr	r3, [r3, #20]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689a      	ldr	r2, [r3, #8]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a10      	ldr	r2, [pc, #64]	@ (80042bc <TIM_Base_SetConfig+0x12c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d003      	beq.n	8004288 <TIM_Base_SetConfig+0xf8>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a12      	ldr	r2, [pc, #72]	@ (80042cc <TIM_Base_SetConfig+0x13c>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d103      	bne.n	8004290 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	691a      	ldr	r2, [r3, #16]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d105      	bne.n	80042ae <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f023 0201 	bic.w	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	611a      	str	r2, [r3, #16]
  }
}
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	40010000 	.word	0x40010000
 80042c0:	40000400 	.word	0x40000400
 80042c4:	40000800 	.word	0x40000800
 80042c8:	40000c00 	.word	0x40000c00
 80042cc:	40010400 	.word	0x40010400
 80042d0:	40014000 	.word	0x40014000
 80042d4:	40014400 	.word	0x40014400
 80042d8:	40014800 	.word	0x40014800
 80042dc:	40001800 	.word	0x40001800
 80042e0:	40001c00 	.word	0x40001c00
 80042e4:	40002000 	.word	0x40002000

080042e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004304:	bf00      	nop
 8004306:	370c      	adds	r7, #12
 8004308:	46bd      	mov	sp, r7
 800430a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430e:	4770      	bx	lr

08004310 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e042      	b.n	80043a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004328:	b2db      	uxtb	r3, r3
 800432a:	2b00      	cmp	r3, #0
 800432c:	d106      	bne.n	800433c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7fd ffb6 	bl	80022a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2224      	movs	r2, #36	@ 0x24
 8004340:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004352:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f000 fdbd 	bl	8004ed4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004368:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004378:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68da      	ldr	r2, [r3, #12]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004388:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2220      	movs	r2, #32
 800439c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3708      	adds	r7, #8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	@ 0x28
 80043b4:	af02      	add	r7, sp, #8
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043c0:	2300      	movs	r3, #0
 80043c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d175      	bne.n	80044bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <HAL_UART_Transmit+0x2c>
 80043d6:	88fb      	ldrh	r3, [r7, #6]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e06e      	b.n	80044be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2221      	movs	r2, #33	@ 0x21
 80043ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043ee:	f7fe f8ff 	bl	80025f0 <HAL_GetTick>
 80043f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	88fa      	ldrh	r2, [r7, #6]
 80043f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	88fa      	ldrh	r2, [r7, #6]
 80043fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004408:	d108      	bne.n	800441c <HAL_UART_Transmit+0x6c>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d104      	bne.n	800441c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004412:	2300      	movs	r3, #0
 8004414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	61bb      	str	r3, [r7, #24]
 800441a:	e003      	b.n	8004424 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004420:	2300      	movs	r3, #0
 8004422:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004424:	e02e      	b.n	8004484 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	9300      	str	r3, [sp, #0]
 800442a:	697b      	ldr	r3, [r7, #20]
 800442c:	2200      	movs	r2, #0
 800442e:	2180      	movs	r1, #128	@ 0x80
 8004430:	68f8      	ldr	r0, [r7, #12]
 8004432:	f000 fb1f 	bl	8004a74 <UART_WaitOnFlagUntilTimeout>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2220      	movs	r2, #32
 8004440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e03a      	b.n	80044be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10b      	bne.n	8004466 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800445c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	3302      	adds	r3, #2
 8004462:	61bb      	str	r3, [r7, #24]
 8004464:	e007      	b.n	8004476 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	781a      	ldrb	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	3301      	adds	r3, #1
 8004474:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800447a:	b29b      	uxth	r3, r3
 800447c:	3b01      	subs	r3, #1
 800447e:	b29a      	uxth	r2, r3
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d1cb      	bne.n	8004426 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	2140      	movs	r1, #64	@ 0x40
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 faeb 	bl	8004a74 <UART_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e006      	b.n	80044be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2220      	movs	r2, #32
 80044b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	e000      	b.n	80044be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044bc:	2302      	movs	r3, #2
  }
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3720      	adds	r7, #32
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	4613      	mov	r3, r2
 80044d2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b20      	cmp	r3, #32
 80044de:	d112      	bne.n	8004506 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_UART_Receive_IT+0x26>
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d101      	bne.n	80044f0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e00b      	b.n	8004508 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	2200      	movs	r2, #0
 80044f4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044f6:	88fb      	ldrh	r3, [r7, #6]
 80044f8:	461a      	mov	r2, r3
 80044fa:	68b9      	ldr	r1, [r7, #8]
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fb12 	bl	8004b26 <UART_Start_Receive_IT>
 8004502:	4603      	mov	r3, r0
 8004504:	e000      	b.n	8004508 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004506:	2302      	movs	r3, #2
  }
}
 8004508:	4618      	mov	r0, r3
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b0ba      	sub	sp, #232	@ 0xe8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004536:	2300      	movs	r3, #0
 8004538:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800453c:	2300      	movs	r3, #0
 800453e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004542:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800454e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10f      	bne.n	8004576 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800455a:	f003 0320 	and.w	r3, r3, #32
 800455e:	2b00      	cmp	r3, #0
 8004560:	d009      	beq.n	8004576 <HAL_UART_IRQHandler+0x66>
 8004562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 fbf2 	bl	8004d58 <UART_Receive_IT>
      return;
 8004574:	e25b      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004576:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 80de 	beq.w	800473c <HAL_UART_IRQHandler+0x22c>
 8004580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800458c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004590:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004594:	2b00      	cmp	r3, #0
 8004596:	f000 80d1 	beq.w	800473c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800459a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00b      	beq.n	80045be <HAL_UART_IRQHandler+0xae>
 80045a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d005      	beq.n	80045be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b6:	f043 0201 	orr.w	r2, r3, #1
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00b      	beq.n	80045e2 <HAL_UART_IRQHandler+0xd2>
 80045ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d005      	beq.n	80045e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <HAL_UART_IRQHandler+0xf6>
 80045ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f043 0204 	orr.w	r2, r3, #4
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004606:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800460a:	f003 0308 	and.w	r3, r3, #8
 800460e:	2b00      	cmp	r3, #0
 8004610:	d011      	beq.n	8004636 <HAL_UART_IRQHandler+0x126>
 8004612:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004616:	f003 0320 	and.w	r3, r3, #32
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800461e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d005      	beq.n	8004636 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800462e:	f043 0208 	orr.w	r2, r3, #8
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463a:	2b00      	cmp	r3, #0
 800463c:	f000 81f2 	beq.w	8004a24 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d008      	beq.n	800465e <HAL_UART_IRQHandler+0x14e>
 800464c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fb7d 	bl	8004d58 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004668:	2b40      	cmp	r3, #64	@ 0x40
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d103      	bne.n	800468a <HAL_UART_IRQHandler+0x17a>
 8004682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004686:	2b00      	cmp	r3, #0
 8004688:	d04f      	beq.n	800472a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa85 	bl	8004b9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	695b      	ldr	r3, [r3, #20]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b40      	cmp	r3, #64	@ 0x40
 800469c:	d141      	bne.n	8004722 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	3314      	adds	r3, #20
 80046a4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046ac:	e853 3f00 	ldrex	r3, [r3]
 80046b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	3314      	adds	r3, #20
 80046c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80046ca:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80046ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80046d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80046da:	e841 2300 	strex	r3, r2, [r1]
 80046de:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80046e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1d9      	bne.n	800469e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d013      	beq.n	800471a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f6:	4a7e      	ldr	r2, [pc, #504]	@ (80048f0 <HAL_UART_IRQHandler+0x3e0>)
 80046f8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fe f8d4 	bl	80028ac <HAL_DMA_Abort_IT>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d016      	beq.n	8004738 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004714:	4610      	mov	r0, r2
 8004716:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004718:	e00e      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f994 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004720:	e00a      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f990 	bl	8004a48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	e006      	b.n	8004738 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f98c 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004736:	e175      	b.n	8004a24 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	bf00      	nop
    return;
 800473a:	e173      	b.n	8004a24 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004740:	2b01      	cmp	r3, #1
 8004742:	f040 814f 	bne.w	80049e4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474a:	f003 0310 	and.w	r3, r3, #16
 800474e:	2b00      	cmp	r3, #0
 8004750:	f000 8148 	beq.w	80049e4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8141 	beq.w	80049e4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004762:	2300      	movs	r3, #0
 8004764:	60bb      	str	r3, [r7, #8]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	60bb      	str	r3, [r7, #8]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	695b      	ldr	r3, [r3, #20]
 800477e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004782:	2b40      	cmp	r3, #64	@ 0x40
 8004784:	f040 80b6 	bne.w	80048f4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004794:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8145 	beq.w	8004a28 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047a6:	429a      	cmp	r2, r3
 80047a8:	f080 813e 	bcs.w	8004a28 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047b2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b8:	69db      	ldr	r3, [r3, #28]
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047be:	f000 8088 	beq.w	80048d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	330c      	adds	r3, #12
 80047c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80047d0:	e853 3f00 	ldrex	r3, [r3]
 80047d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80047d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80047dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80047ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80047fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004806:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1d9      	bne.n	80047c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3314      	adds	r3, #20
 8004814:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004816:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800481e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004820:	f023 0301 	bic.w	r3, r3, #1
 8004824:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	3314      	adds	r3, #20
 800482e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004832:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004836:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800483a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004844:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e1      	bne.n	800480e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3314      	adds	r3, #20
 8004850:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800485a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800485c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004860:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3314      	adds	r3, #20
 800486a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800486e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004870:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004872:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004874:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004876:	e841 2300 	strex	r3, r2, [r1]
 800487a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800487c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1e3      	bne.n	800484a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	330c      	adds	r3, #12
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048a2:	f023 0310 	bic.w	r3, r3, #16
 80048a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	330c      	adds	r3, #12
 80048b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048bc:	e841 2300 	strex	r3, r2, [r1]
 80048c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d1e3      	bne.n	8004890 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048cc:	4618      	mov	r0, r3
 80048ce:	f7fd ff7d 	bl	80027cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2202      	movs	r2, #2
 80048d6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	4619      	mov	r1, r3
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f8b7 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048ee:	e09b      	b.n	8004a28 <HAL_UART_IRQHandler+0x518>
 80048f0:	08004c61 	.word	0x08004c61
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	f000 808e 	beq.w	8004a2c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004910:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004914:	2b00      	cmp	r3, #0
 8004916:	f000 8089 	beq.w	8004a2c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	330c      	adds	r3, #12
 8004920:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004924:	e853 3f00 	ldrex	r3, [r3]
 8004928:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800492a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004930:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	330c      	adds	r3, #12
 800493a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800493e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004940:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004942:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004944:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800494c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1e3      	bne.n	800491a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	3314      	adds	r3, #20
 8004958:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	623b      	str	r3, [r7, #32]
   return(result);
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	f023 0301 	bic.w	r3, r3, #1
 8004968:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	3314      	adds	r3, #20
 8004972:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004976:	633a      	str	r2, [r7, #48]	@ 0x30
 8004978:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800497a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800497c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800497e:	e841 2300 	strex	r3, r2, [r1]
 8004982:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1e3      	bne.n	8004952 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	330c      	adds	r3, #12
 800499e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	e853 3f00 	ldrex	r3, [r3]
 80049a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0310 	bic.w	r3, r3, #16
 80049ae:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80049bc:	61fa      	str	r2, [r7, #28]
 80049be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c0:	69b9      	ldr	r1, [r7, #24]
 80049c2:	69fa      	ldr	r2, [r7, #28]
 80049c4:	e841 2300 	strex	r3, r2, [r1]
 80049c8:	617b      	str	r3, [r7, #20]
   return(result);
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1e3      	bne.n	8004998 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2202      	movs	r2, #2
 80049d4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049da:	4619      	mov	r1, r3
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f83d 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049e2:	e023      	b.n	8004a2c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d009      	beq.n	8004a04 <HAL_UART_IRQHandler+0x4f4>
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f943 	bl	8004c88 <UART_Transmit_IT>
    return;
 8004a02:	e014      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <HAL_UART_IRQHandler+0x51e>
 8004a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d008      	beq.n	8004a2e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 f983 	bl	8004d28 <UART_EndTransmit_IT>
    return;
 8004a22:	e004      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
    return;
 8004a24:	bf00      	nop
 8004a26:	e002      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a28:	bf00      	nop
 8004a2a:	e000      	b.n	8004a2e <HAL_UART_IRQHandler+0x51e>
      return;
 8004a2c:	bf00      	nop
  }
}
 8004a2e:	37e8      	adds	r7, #232	@ 0xe8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b083      	sub	sp, #12
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a50:	bf00      	nop
 8004a52:	370c      	adds	r7, #12
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	460b      	mov	r3, r1
 8004a66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	60f8      	str	r0, [r7, #12]
 8004a7c:	60b9      	str	r1, [r7, #8]
 8004a7e:	603b      	str	r3, [r7, #0]
 8004a80:	4613      	mov	r3, r2
 8004a82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a84:	e03b      	b.n	8004afe <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a8c:	d037      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a8e:	f7fd fdaf 	bl	80025f0 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	6a3a      	ldr	r2, [r7, #32]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d302      	bcc.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a9e:	6a3b      	ldr	r3, [r7, #32]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e03a      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d023      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b80      	cmp	r3, #128	@ 0x80
 8004aba:	d020      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0x8a>
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	2b40      	cmp	r3, #64	@ 0x40
 8004ac0:	d01d      	beq.n	8004afe <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0308 	and.w	r3, r3, #8
 8004acc:	2b08      	cmp	r3, #8
 8004ace:	d116      	bne.n	8004afe <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	617b      	str	r3, [r7, #20]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	617b      	str	r3, [r7, #20]
 8004ae4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004ae6:	68f8      	ldr	r0, [r7, #12]
 8004ae8:	f000 f857 	bl	8004b9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2208      	movs	r2, #8
 8004af0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e00f      	b.n	8004b1e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	4013      	ands	r3, r2
 8004b08:	68ba      	ldr	r2, [r7, #8]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	bf0c      	ite	eq
 8004b0e:	2301      	moveq	r3, #1
 8004b10:	2300      	movne	r3, #0
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	79fb      	ldrb	r3, [r7, #7]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d0b4      	beq.n	8004a86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b085      	sub	sp, #20
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	4613      	mov	r3, r2
 8004b32:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68ba      	ldr	r2, [r7, #8]
 8004b38:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	88fa      	ldrh	r2, [r7, #6]
 8004b3e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	88fa      	ldrh	r2, [r7, #6]
 8004b44:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2222      	movs	r2, #34	@ 0x22
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d007      	beq.n	8004b6c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68da      	ldr	r2, [r3, #12]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b6a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	695a      	ldr	r2, [r3, #20]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0220 	orr.w	r2, r2, #32
 8004b8a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b9a:	b480      	push	{r7}
 8004b9c:	b095      	sub	sp, #84	@ 0x54
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	330c      	adds	r3, #12
 8004ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bac:	e853 3f00 	ldrex	r3, [r3]
 8004bb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004bc2:	643a      	str	r2, [r7, #64]	@ 0x40
 8004bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bca:	e841 2300 	strex	r3, r2, [r1]
 8004bce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d1e5      	bne.n	8004ba2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	3314      	adds	r3, #20
 8004bdc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	e853 3f00 	ldrex	r3, [r3]
 8004be4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	f023 0301 	bic.w	r3, r3, #1
 8004bec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3314      	adds	r3, #20
 8004bf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bfc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bfe:	e841 2300 	strex	r3, r2, [r1]
 8004c02:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1e5      	bne.n	8004bd6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d119      	bne.n	8004c46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	330c      	adds	r3, #12
 8004c18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	e853 3f00 	ldrex	r3, [r3]
 8004c20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f023 0310 	bic.w	r3, r3, #16
 8004c28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	330c      	adds	r3, #12
 8004c30:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c32:	61ba      	str	r2, [r7, #24]
 8004c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c36:	6979      	ldr	r1, [r7, #20]
 8004c38:	69ba      	ldr	r2, [r7, #24]
 8004c3a:	e841 2300 	strex	r3, r2, [r1]
 8004c3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1e5      	bne.n	8004c12 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2220      	movs	r2, #32
 8004c4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c54:	bf00      	nop
 8004c56:	3754      	adds	r7, #84	@ 0x54
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7ff fee4 	bl	8004a48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c80:	bf00      	nop
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}

08004c88 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	2b21      	cmp	r3, #33	@ 0x21
 8004c9a:	d13e      	bne.n	8004d1a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ca4:	d114      	bne.n	8004cd0 <UART_Transmit_IT+0x48>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d110      	bne.n	8004cd0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	881b      	ldrh	r3, [r3, #0]
 8004cb8:	461a      	mov	r2, r3
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cc2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6a1b      	ldr	r3, [r3, #32]
 8004cc8:	1c9a      	adds	r2, r3, #2
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	621a      	str	r2, [r3, #32]
 8004cce:	e008      	b.n	8004ce2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a1b      	ldr	r3, [r3, #32]
 8004cd4:	1c59      	adds	r1, r3, #1
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6211      	str	r1, [r2, #32]
 8004cda:	781a      	ldrb	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	4619      	mov	r1, r3
 8004cf0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10f      	bne.n	8004d16 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68da      	ldr	r2, [r3, #12]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d04:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d14:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d16:	2300      	movs	r3, #0
 8004d18:	e000      	b.n	8004d1c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d1a:	2302      	movs	r3, #2
  }
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3714      	adds	r7, #20
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr

08004d28 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004d3e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2220      	movs	r2, #32
 8004d44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f7ff fe73 	bl	8004a34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3708      	adds	r7, #8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b08c      	sub	sp, #48	@ 0x30
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b22      	cmp	r3, #34	@ 0x22
 8004d6a:	f040 80ae 	bne.w	8004eca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d76:	d117      	bne.n	8004da8 <UART_Receive_IT+0x50>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d113      	bne.n	8004da8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d80:	2300      	movs	r3, #0
 8004d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d96:	b29a      	uxth	r2, r3
 8004d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	1c9a      	adds	r2, r3, #2
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	629a      	str	r2, [r3, #40]	@ 0x28
 8004da6:	e026      	b.n	8004df6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004dae:	2300      	movs	r3, #0
 8004db0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dba:	d007      	beq.n	8004dcc <UART_Receive_IT+0x74>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10a      	bne.n	8004dda <UART_Receive_IT+0x82>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	691b      	ldr	r3, [r3, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	b2da      	uxtb	r2, r3
 8004dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e008      	b.n	8004dec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df0:	1c5a      	adds	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29b      	uxth	r3, r3
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	4619      	mov	r1, r3
 8004e04:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d15d      	bne.n	8004ec6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0220 	bic.w	r2, r2, #32
 8004e18:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e28:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	695a      	ldr	r2, [r3, #20]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0201 	bic.w	r2, r2, #1
 8004e38:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2220      	movs	r2, #32
 8004e3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d135      	bne.n	8004ebc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	330c      	adds	r3, #12
 8004e5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	e853 3f00 	ldrex	r3, [r3]
 8004e64:	613b      	str	r3, [r7, #16]
   return(result);
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f023 0310 	bic.w	r3, r3, #16
 8004e6c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e76:	623a      	str	r2, [r7, #32]
 8004e78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e7a:	69f9      	ldr	r1, [r7, #28]
 8004e7c:	6a3a      	ldr	r2, [r7, #32]
 8004e7e:	e841 2300 	strex	r3, r2, [r1]
 8004e82:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1e5      	bne.n	8004e56 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0310 	and.w	r3, r3, #16
 8004e94:	2b10      	cmp	r3, #16
 8004e96:	d10a      	bne.n	8004eae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60fb      	str	r3, [r7, #12]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff fdd1 	bl	8004a5c <HAL_UARTEx_RxEventCallback>
 8004eba:	e002      	b.n	8004ec2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f7fd f935 	bl	800212c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	e002      	b.n	8004ecc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e000      	b.n	8004ecc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004eca:	2302      	movs	r3, #2
  }
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3730      	adds	r7, #48	@ 0x30
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed8:	b0c0      	sub	sp, #256	@ 0x100
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef0:	68d9      	ldr	r1, [r3, #12]
 8004ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	ea40 0301 	orr.w	r3, r0, r1
 8004efc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f02:	689a      	ldr	r2, [r3, #8]
 8004f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f2c:	f021 010c 	bic.w	r1, r1, #12
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004f3a:	430b      	orrs	r3, r1
 8004f3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4e:	6999      	ldr	r1, [r3, #24]
 8004f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	ea40 0301 	orr.w	r3, r0, r1
 8004f5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	4b8f      	ldr	r3, [pc, #572]	@ (80051a0 <UART_SetConfig+0x2cc>)
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d005      	beq.n	8004f74 <UART_SetConfig+0xa0>
 8004f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4b8d      	ldr	r3, [pc, #564]	@ (80051a4 <UART_SetConfig+0x2d0>)
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d104      	bne.n	8004f7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f74:	f7fe faf6 	bl	8003564 <HAL_RCC_GetPCLK2Freq>
 8004f78:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004f7c:	e003      	b.n	8004f86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f7e:	f7fe fadd 	bl	800353c <HAL_RCC_GetPCLK1Freq>
 8004f82:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f90:	f040 810c 	bne.w	80051ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004f9e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004fa2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004fa6:	4622      	mov	r2, r4
 8004fa8:	462b      	mov	r3, r5
 8004faa:	1891      	adds	r1, r2, r2
 8004fac:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004fae:	415b      	adcs	r3, r3
 8004fb0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004fb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004fb6:	4621      	mov	r1, r4
 8004fb8:	eb12 0801 	adds.w	r8, r2, r1
 8004fbc:	4629      	mov	r1, r5
 8004fbe:	eb43 0901 	adc.w	r9, r3, r1
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fd6:	4690      	mov	r8, r2
 8004fd8:	4699      	mov	r9, r3
 8004fda:	4623      	mov	r3, r4
 8004fdc:	eb18 0303 	adds.w	r3, r8, r3
 8004fe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	eb49 0303 	adc.w	r3, r9, r3
 8004fea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ffa:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004ffe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005002:	460b      	mov	r3, r1
 8005004:	18db      	adds	r3, r3, r3
 8005006:	653b      	str	r3, [r7, #80]	@ 0x50
 8005008:	4613      	mov	r3, r2
 800500a:	eb42 0303 	adc.w	r3, r2, r3
 800500e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005010:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005014:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005018:	f7fb fd38 	bl	8000a8c <__aeabi_uldivmod>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4b61      	ldr	r3, [pc, #388]	@ (80051a8 <UART_SetConfig+0x2d4>)
 8005022:	fba3 2302 	umull	r2, r3, r3, r2
 8005026:	095b      	lsrs	r3, r3, #5
 8005028:	011c      	lsls	r4, r3, #4
 800502a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800502e:	2200      	movs	r2, #0
 8005030:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005034:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005038:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800503c:	4642      	mov	r2, r8
 800503e:	464b      	mov	r3, r9
 8005040:	1891      	adds	r1, r2, r2
 8005042:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005044:	415b      	adcs	r3, r3
 8005046:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005048:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800504c:	4641      	mov	r1, r8
 800504e:	eb12 0a01 	adds.w	sl, r2, r1
 8005052:	4649      	mov	r1, r9
 8005054:	eb43 0b01 	adc.w	fp, r3, r1
 8005058:	f04f 0200 	mov.w	r2, #0
 800505c:	f04f 0300 	mov.w	r3, #0
 8005060:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005064:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005068:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800506c:	4692      	mov	sl, r2
 800506e:	469b      	mov	fp, r3
 8005070:	4643      	mov	r3, r8
 8005072:	eb1a 0303 	adds.w	r3, sl, r3
 8005076:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800507a:	464b      	mov	r3, r9
 800507c:	eb4b 0303 	adc.w	r3, fp, r3
 8005080:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005090:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005094:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005098:	460b      	mov	r3, r1
 800509a:	18db      	adds	r3, r3, r3
 800509c:	643b      	str	r3, [r7, #64]	@ 0x40
 800509e:	4613      	mov	r3, r2
 80050a0:	eb42 0303 	adc.w	r3, r2, r3
 80050a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80050aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80050ae:	f7fb fced 	bl	8000a8c <__aeabi_uldivmod>
 80050b2:	4602      	mov	r2, r0
 80050b4:	460b      	mov	r3, r1
 80050b6:	4611      	mov	r1, r2
 80050b8:	4b3b      	ldr	r3, [pc, #236]	@ (80051a8 <UART_SetConfig+0x2d4>)
 80050ba:	fba3 2301 	umull	r2, r3, r3, r1
 80050be:	095b      	lsrs	r3, r3, #5
 80050c0:	2264      	movs	r2, #100	@ 0x64
 80050c2:	fb02 f303 	mul.w	r3, r2, r3
 80050c6:	1acb      	subs	r3, r1, r3
 80050c8:	00db      	lsls	r3, r3, #3
 80050ca:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80050ce:	4b36      	ldr	r3, [pc, #216]	@ (80051a8 <UART_SetConfig+0x2d4>)
 80050d0:	fba3 2302 	umull	r2, r3, r3, r2
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80050dc:	441c      	add	r4, r3
 80050de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80050e8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80050ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80050f0:	4642      	mov	r2, r8
 80050f2:	464b      	mov	r3, r9
 80050f4:	1891      	adds	r1, r2, r2
 80050f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80050f8:	415b      	adcs	r3, r3
 80050fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005100:	4641      	mov	r1, r8
 8005102:	1851      	adds	r1, r2, r1
 8005104:	6339      	str	r1, [r7, #48]	@ 0x30
 8005106:	4649      	mov	r1, r9
 8005108:	414b      	adcs	r3, r1
 800510a:	637b      	str	r3, [r7, #52]	@ 0x34
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	f04f 0300 	mov.w	r3, #0
 8005114:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005118:	4659      	mov	r1, fp
 800511a:	00cb      	lsls	r3, r1, #3
 800511c:	4651      	mov	r1, sl
 800511e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005122:	4651      	mov	r1, sl
 8005124:	00ca      	lsls	r2, r1, #3
 8005126:	4610      	mov	r0, r2
 8005128:	4619      	mov	r1, r3
 800512a:	4603      	mov	r3, r0
 800512c:	4642      	mov	r2, r8
 800512e:	189b      	adds	r3, r3, r2
 8005130:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005134:	464b      	mov	r3, r9
 8005136:	460a      	mov	r2, r1
 8005138:	eb42 0303 	adc.w	r3, r2, r3
 800513c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800514c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005150:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005154:	460b      	mov	r3, r1
 8005156:	18db      	adds	r3, r3, r3
 8005158:	62bb      	str	r3, [r7, #40]	@ 0x28
 800515a:	4613      	mov	r3, r2
 800515c:	eb42 0303 	adc.w	r3, r2, r3
 8005160:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005162:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005166:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800516a:	f7fb fc8f 	bl	8000a8c <__aeabi_uldivmod>
 800516e:	4602      	mov	r2, r0
 8005170:	460b      	mov	r3, r1
 8005172:	4b0d      	ldr	r3, [pc, #52]	@ (80051a8 <UART_SetConfig+0x2d4>)
 8005174:	fba3 1302 	umull	r1, r3, r3, r2
 8005178:	095b      	lsrs	r3, r3, #5
 800517a:	2164      	movs	r1, #100	@ 0x64
 800517c:	fb01 f303 	mul.w	r3, r1, r3
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	00db      	lsls	r3, r3, #3
 8005184:	3332      	adds	r3, #50	@ 0x32
 8005186:	4a08      	ldr	r2, [pc, #32]	@ (80051a8 <UART_SetConfig+0x2d4>)
 8005188:	fba2 2303 	umull	r2, r3, r2, r3
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	f003 0207 	and.w	r2, r3, #7
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	4422      	add	r2, r4
 800519a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800519c:	e106      	b.n	80053ac <UART_SetConfig+0x4d8>
 800519e:	bf00      	nop
 80051a0:	40011000 	.word	0x40011000
 80051a4:	40011400 	.word	0x40011400
 80051a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80051b6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80051ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80051be:	4642      	mov	r2, r8
 80051c0:	464b      	mov	r3, r9
 80051c2:	1891      	adds	r1, r2, r2
 80051c4:	6239      	str	r1, [r7, #32]
 80051c6:	415b      	adcs	r3, r3
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80051ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051ce:	4641      	mov	r1, r8
 80051d0:	1854      	adds	r4, r2, r1
 80051d2:	4649      	mov	r1, r9
 80051d4:	eb43 0501 	adc.w	r5, r3, r1
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	00eb      	lsls	r3, r5, #3
 80051e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051e6:	00e2      	lsls	r2, r4, #3
 80051e8:	4614      	mov	r4, r2
 80051ea:	461d      	mov	r5, r3
 80051ec:	4643      	mov	r3, r8
 80051ee:	18e3      	adds	r3, r4, r3
 80051f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80051f4:	464b      	mov	r3, r9
 80051f6:	eb45 0303 	adc.w	r3, r5, r3
 80051fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800520a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800521a:	4629      	mov	r1, r5
 800521c:	008b      	lsls	r3, r1, #2
 800521e:	4621      	mov	r1, r4
 8005220:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005224:	4621      	mov	r1, r4
 8005226:	008a      	lsls	r2, r1, #2
 8005228:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800522c:	f7fb fc2e 	bl	8000a8c <__aeabi_uldivmod>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4b60      	ldr	r3, [pc, #384]	@ (80053b8 <UART_SetConfig+0x4e4>)
 8005236:	fba3 2302 	umull	r2, r3, r3, r2
 800523a:	095b      	lsrs	r3, r3, #5
 800523c:	011c      	lsls	r4, r3, #4
 800523e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005242:	2200      	movs	r2, #0
 8005244:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005248:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800524c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005250:	4642      	mov	r2, r8
 8005252:	464b      	mov	r3, r9
 8005254:	1891      	adds	r1, r2, r2
 8005256:	61b9      	str	r1, [r7, #24]
 8005258:	415b      	adcs	r3, r3
 800525a:	61fb      	str	r3, [r7, #28]
 800525c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005260:	4641      	mov	r1, r8
 8005262:	1851      	adds	r1, r2, r1
 8005264:	6139      	str	r1, [r7, #16]
 8005266:	4649      	mov	r1, r9
 8005268:	414b      	adcs	r3, r1
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005278:	4659      	mov	r1, fp
 800527a:	00cb      	lsls	r3, r1, #3
 800527c:	4651      	mov	r1, sl
 800527e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005282:	4651      	mov	r1, sl
 8005284:	00ca      	lsls	r2, r1, #3
 8005286:	4610      	mov	r0, r2
 8005288:	4619      	mov	r1, r3
 800528a:	4603      	mov	r3, r0
 800528c:	4642      	mov	r2, r8
 800528e:	189b      	adds	r3, r3, r2
 8005290:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005294:	464b      	mov	r3, r9
 8005296:	460a      	mov	r2, r1
 8005298:	eb42 0303 	adc.w	r3, r2, r3
 800529c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80052a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	2200      	movs	r2, #0
 80052a8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80052aa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80052b8:	4649      	mov	r1, r9
 80052ba:	008b      	lsls	r3, r1, #2
 80052bc:	4641      	mov	r1, r8
 80052be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052c2:	4641      	mov	r1, r8
 80052c4:	008a      	lsls	r2, r1, #2
 80052c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80052ca:	f7fb fbdf 	bl	8000a8c <__aeabi_uldivmod>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4611      	mov	r1, r2
 80052d4:	4b38      	ldr	r3, [pc, #224]	@ (80053b8 <UART_SetConfig+0x4e4>)
 80052d6:	fba3 2301 	umull	r2, r3, r3, r1
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	2264      	movs	r2, #100	@ 0x64
 80052de:	fb02 f303 	mul.w	r3, r2, r3
 80052e2:	1acb      	subs	r3, r1, r3
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	3332      	adds	r3, #50	@ 0x32
 80052e8:	4a33      	ldr	r2, [pc, #204]	@ (80053b8 <UART_SetConfig+0x4e4>)
 80052ea:	fba2 2303 	umull	r2, r3, r2, r3
 80052ee:	095b      	lsrs	r3, r3, #5
 80052f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052f4:	441c      	add	r4, r3
 80052f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052fa:	2200      	movs	r2, #0
 80052fc:	673b      	str	r3, [r7, #112]	@ 0x70
 80052fe:	677a      	str	r2, [r7, #116]	@ 0x74
 8005300:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005304:	4642      	mov	r2, r8
 8005306:	464b      	mov	r3, r9
 8005308:	1891      	adds	r1, r2, r2
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	415b      	adcs	r3, r3
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005314:	4641      	mov	r1, r8
 8005316:	1851      	adds	r1, r2, r1
 8005318:	6039      	str	r1, [r7, #0]
 800531a:	4649      	mov	r1, r9
 800531c:	414b      	adcs	r3, r1
 800531e:	607b      	str	r3, [r7, #4]
 8005320:	f04f 0200 	mov.w	r2, #0
 8005324:	f04f 0300 	mov.w	r3, #0
 8005328:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800532c:	4659      	mov	r1, fp
 800532e:	00cb      	lsls	r3, r1, #3
 8005330:	4651      	mov	r1, sl
 8005332:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005336:	4651      	mov	r1, sl
 8005338:	00ca      	lsls	r2, r1, #3
 800533a:	4610      	mov	r0, r2
 800533c:	4619      	mov	r1, r3
 800533e:	4603      	mov	r3, r0
 8005340:	4642      	mov	r2, r8
 8005342:	189b      	adds	r3, r3, r2
 8005344:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005346:	464b      	mov	r3, r9
 8005348:	460a      	mov	r2, r1
 800534a:	eb42 0303 	adc.w	r3, r2, r3
 800534e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	663b      	str	r3, [r7, #96]	@ 0x60
 800535a:	667a      	str	r2, [r7, #100]	@ 0x64
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	f04f 0300 	mov.w	r3, #0
 8005364:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005368:	4649      	mov	r1, r9
 800536a:	008b      	lsls	r3, r1, #2
 800536c:	4641      	mov	r1, r8
 800536e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005372:	4641      	mov	r1, r8
 8005374:	008a      	lsls	r2, r1, #2
 8005376:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800537a:	f7fb fb87 	bl	8000a8c <__aeabi_uldivmod>
 800537e:	4602      	mov	r2, r0
 8005380:	460b      	mov	r3, r1
 8005382:	4b0d      	ldr	r3, [pc, #52]	@ (80053b8 <UART_SetConfig+0x4e4>)
 8005384:	fba3 1302 	umull	r1, r3, r3, r2
 8005388:	095b      	lsrs	r3, r3, #5
 800538a:	2164      	movs	r1, #100	@ 0x64
 800538c:	fb01 f303 	mul.w	r3, r1, r3
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	3332      	adds	r3, #50	@ 0x32
 8005396:	4a08      	ldr	r2, [pc, #32]	@ (80053b8 <UART_SetConfig+0x4e4>)
 8005398:	fba2 2303 	umull	r2, r3, r2, r3
 800539c:	095b      	lsrs	r3, r3, #5
 800539e:	f003 020f 	and.w	r2, r3, #15
 80053a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4422      	add	r2, r4
 80053aa:	609a      	str	r2, [r3, #8]
}
 80053ac:	bf00      	nop
 80053ae:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80053b2:	46bd      	mov	sp, r7
 80053b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053b8:	51eb851f 	.word	0x51eb851f

080053bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f103 0208 	add.w	r2, r3, #8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80053d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	f103 0208 	add.w	r2, r3, #8
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	f103 0208 	add.w	r2, r3, #8
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800540a:	bf00      	nop
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	683a      	ldr	r2, [r7, #0]
 8005440:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	601a      	str	r2, [r3, #0]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr

0800545e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800545e:	b480      	push	{r7}
 8005460:	b085      	sub	sp, #20
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005474:	d103      	bne.n	800547e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	60fb      	str	r3, [r7, #12]
 800547c:	e00c      	b.n	8005498 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	3308      	adds	r3, #8
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	e002      	b.n	800548c <vListInsert+0x2e>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	60fb      	str	r3, [r7, #12]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	429a      	cmp	r2, r3
 8005496:	d2f6      	bcs.n	8005486 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	687a      	ldr	r2, [r7, #4]
 80054b8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
}
 80054c4:	bf00      	nop
 80054c6:	3714      	adds	r7, #20
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6892      	ldr	r2, [r2, #8]
 80054e6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	687a      	ldr	r2, [r7, #4]
 80054ee:	6852      	ldr	r2, [r2, #4]
 80054f0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d103      	bne.n	8005504 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689a      	ldr	r2, [r3, #8]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	1e5a      	subs	r2, r3, #1
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
}
 8005518:	4618      	mov	r0, r3
 800551a:	3714      	adds	r7, #20
 800551c:	46bd      	mov	sp, r7
 800551e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005522:	4770      	bx	lr

08005524 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d10b      	bne.n	8005550 <xQueueGenericReset+0x2c>
        __asm volatile
 8005538:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553c:	f383 8811 	msr	BASEPRI, r3
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	f3bf 8f4f 	dsb	sy
 8005548:	60bb      	str	r3, [r7, #8]
    }
 800554a:	bf00      	nop
 800554c:	bf00      	nop
 800554e:	e7fd      	b.n	800554c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005550:	f002 fb44 	bl	8007bdc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555c:	68f9      	ldr	r1, [r7, #12]
 800555e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005560:	fb01 f303 	mul.w	r3, r1, r3
 8005564:	441a      	add	r2, r3
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005580:	3b01      	subs	r3, #1
 8005582:	68f9      	ldr	r1, [r7, #12]
 8005584:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005586:	fb01 f303 	mul.w	r3, r1, r3
 800558a:	441a      	add	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	22ff      	movs	r2, #255	@ 0xff
 8005594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	22ff      	movs	r2, #255	@ 0xff
 800559c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d114      	bne.n	80055d0 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d01a      	beq.n	80055e4 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	3310      	adds	r3, #16
 80055b2:	4618      	mov	r0, r3
 80055b4:	f001 f93a 	bl	800682c <xTaskRemoveFromEventList>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d012      	beq.n	80055e4 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80055be:	4b0d      	ldr	r3, [pc, #52]	@ (80055f4 <xQueueGenericReset+0xd0>)
 80055c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	f3bf 8f4f 	dsb	sy
 80055ca:	f3bf 8f6f 	isb	sy
 80055ce:	e009      	b.n	80055e4 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	3310      	adds	r3, #16
 80055d4:	4618      	mov	r0, r3
 80055d6:	f7ff fef1 	bl	80053bc <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	3324      	adds	r3, #36	@ 0x24
 80055de:	4618      	mov	r0, r3
 80055e0:	f7ff feec 	bl	80053bc <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80055e4:	f002 fb2c 	bl	8007c40 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80055e8:	2301      	movs	r3, #1
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	e000ed04 	.word	0xe000ed04

080055f8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b08c      	sub	sp, #48	@ 0x30
 80055fc:	af02      	add	r7, sp, #8
 80055fe:	60f8      	str	r0, [r7, #12]
 8005600:	60b9      	str	r1, [r7, #8]
 8005602:	4613      	mov	r3, r2
 8005604:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d10b      	bne.n	8005624 <xQueueGenericCreate+0x2c>
        __asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	61bb      	str	r3, [r7, #24]
    }
 800561e:	bf00      	nop
 8005620:	bf00      	nop
 8005622:	e7fd      	b.n	8005620 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	68ba      	ldr	r2, [r7, #8]
 8005628:	fb02 f303 	mul.w	r3, r2, r3
 800562c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d006      	beq.n	8005642 <xQueueGenericCreate+0x4a>
 8005634:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	429a      	cmp	r2, r3
 8005640:	d101      	bne.n	8005646 <xQueueGenericCreate+0x4e>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <xQueueGenericCreate+0x50>
 8005646:	2300      	movs	r3, #0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10b      	bne.n	8005664 <xQueueGenericCreate+0x6c>
        __asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	617b      	str	r3, [r7, #20]
    }
 800565e:	bf00      	nop
 8005660:	bf00      	nop
 8005662:	e7fd      	b.n	8005660 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005666:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800566a:	d90b      	bls.n	8005684 <xQueueGenericCreate+0x8c>
        __asm volatile
 800566c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005670:	f383 8811 	msr	BASEPRI, r3
 8005674:	f3bf 8f6f 	isb	sy
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	613b      	str	r3, [r7, #16]
    }
 800567e:	bf00      	nop
 8005680:	bf00      	nop
 8005682:	e7fd      	b.n	8005680 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005686:	3350      	adds	r3, #80	@ 0x50
 8005688:	4618      	mov	r0, r3
 800568a:	f002 fbd1 	bl	8007e30 <pvPortMalloc>
 800568e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8005690:	6a3b      	ldr	r3, [r7, #32]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d00d      	beq.n	80056b2 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005696:	6a3b      	ldr	r3, [r7, #32]
 8005698:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800569a:	69fb      	ldr	r3, [r7, #28]
 800569c:	3350      	adds	r3, #80	@ 0x50
 800569e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80056a0:	79fa      	ldrb	r2, [r7, #7]
 80056a2:	6a3b      	ldr	r3, [r7, #32]
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	4613      	mov	r3, r2
 80056a8:	69fa      	ldr	r2, [r7, #28]
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f805 	bl	80056bc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80056b2:	6a3b      	ldr	r3, [r7, #32]
    }
 80056b4:	4618      	mov	r0, r3
 80056b6:	3728      	adds	r7, #40	@ 0x28
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}

080056bc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	60f8      	str	r0, [r7, #12]
 80056c4:	60b9      	str	r1, [r7, #8]
 80056c6:	607a      	str	r2, [r7, #4]
 80056c8:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d103      	bne.n	80056d8 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	69ba      	ldr	r2, [r7, #24]
 80056d4:	601a      	str	r2, [r3, #0]
 80056d6:	e002      	b.n	80056de <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80056e4:	69bb      	ldr	r3, [r7, #24]
 80056e6:	68ba      	ldr	r2, [r7, #8]
 80056e8:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056ea:	2101      	movs	r1, #1
 80056ec:	69b8      	ldr	r0, [r7, #24]
 80056ee:	f7ff ff19 	bl	8005524 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	78fa      	ldrb	r2, [r7, #3]
 80056f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80056fa:	bf00      	nop
 80056fc:	3710      	adds	r7, #16
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08e      	sub	sp, #56	@ 0x38
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
 8005710:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005712:	2300      	movs	r3, #0
 8005714:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	2b00      	cmp	r3, #0
 800571e:	d10b      	bne.n	8005738 <xQueueGenericSend+0x34>
        __asm volatile
 8005720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005724:	f383 8811 	msr	BASEPRI, r3
 8005728:	f3bf 8f6f 	isb	sy
 800572c:	f3bf 8f4f 	dsb	sy
 8005730:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005732:	bf00      	nop
 8005734:	bf00      	nop
 8005736:	e7fd      	b.n	8005734 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <xQueueGenericSend+0x42>
 800573e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <xQueueGenericSend+0x46>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <xQueueGenericSend+0x48>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10b      	bne.n	8005768 <xQueueGenericSend+0x64>
        __asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005762:	bf00      	nop
 8005764:	bf00      	nop
 8005766:	e7fd      	b.n	8005764 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	2b02      	cmp	r3, #2
 800576c:	d103      	bne.n	8005776 <xQueueGenericSend+0x72>
 800576e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <xQueueGenericSend+0x76>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <xQueueGenericSend+0x78>
 800577a:	2300      	movs	r3, #0
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10b      	bne.n	8005798 <xQueueGenericSend+0x94>
        __asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	623b      	str	r3, [r7, #32]
    }
 8005792:	bf00      	nop
 8005794:	bf00      	nop
 8005796:	e7fd      	b.n	8005794 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005798:	f001 f9e8 	bl	8006b6c <xTaskGetSchedulerState>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d102      	bne.n	80057a8 <xQueueGenericSend+0xa4>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <xQueueGenericSend+0xa8>
 80057a8:	2301      	movs	r3, #1
 80057aa:	e000      	b.n	80057ae <xQueueGenericSend+0xaa>
 80057ac:	2300      	movs	r3, #0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <xQueueGenericSend+0xc6>
        __asm volatile
 80057b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057b6:	f383 8811 	msr	BASEPRI, r3
 80057ba:	f3bf 8f6f 	isb	sy
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	61fb      	str	r3, [r7, #28]
    }
 80057c4:	bf00      	nop
 80057c6:	bf00      	nop
 80057c8:	e7fd      	b.n	80057c6 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80057ca:	f002 fa07 	bl	8007bdc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d302      	bcc.n	80057e0 <xQueueGenericSend+0xdc>
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	2b02      	cmp	r3, #2
 80057de:	d129      	bne.n	8005834 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057e0:	683a      	ldr	r2, [r7, #0]
 80057e2:	68b9      	ldr	r1, [r7, #8]
 80057e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80057e6:	f000 fad0 	bl	8005d8a <prvCopyDataToQueue>
 80057ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d010      	beq.n	8005816 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f6:	3324      	adds	r3, #36	@ 0x24
 80057f8:	4618      	mov	r0, r3
 80057fa:	f001 f817 	bl	800682c <xTaskRemoveFromEventList>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d013      	beq.n	800582c <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005804:	4b3f      	ldr	r3, [pc, #252]	@ (8005904 <xQueueGenericSend+0x200>)
 8005806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	f3bf 8f4f 	dsb	sy
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	e00a      	b.n	800582c <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005818:	2b00      	cmp	r3, #0
 800581a:	d007      	beq.n	800582c <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 800581c:	4b39      	ldr	r3, [pc, #228]	@ (8005904 <xQueueGenericSend+0x200>)
 800581e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 800582c:	f002 fa08 	bl	8007c40 <vPortExitCritical>
                return pdPASS;
 8005830:	2301      	movs	r3, #1
 8005832:	e063      	b.n	80058fc <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800583a:	f002 fa01 	bl	8007c40 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800583e:	2300      	movs	r3, #0
 8005840:	e05c      	b.n	80058fc <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005844:	2b00      	cmp	r3, #0
 8005846:	d106      	bne.n	8005856 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005848:	f107 0314 	add.w	r3, r7, #20
 800584c:	4618      	mov	r0, r3
 800584e:	f001 f851 	bl	80068f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005852:	2301      	movs	r3, #1
 8005854:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005856:	f002 f9f3 	bl	8007c40 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800585a:	f000 fdc3 	bl	80063e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800585e:	f002 f9bd 	bl	8007bdc <vPortEnterCritical>
 8005862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005864:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005868:	b25b      	sxtb	r3, r3
 800586a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800586e:	d103      	bne.n	8005878 <xQueueGenericSend+0x174>
 8005870:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800587a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800587e:	b25b      	sxtb	r3, r3
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005884:	d103      	bne.n	800588e <xQueueGenericSend+0x18a>
 8005886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800588e:	f002 f9d7 	bl	8007c40 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005892:	1d3a      	adds	r2, r7, #4
 8005894:	f107 0314 	add.w	r3, r7, #20
 8005898:	4611      	mov	r1, r2
 800589a:	4618      	mov	r0, r3
 800589c:	f001 f840 	bl	8006920 <xTaskCheckForTimeOut>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d124      	bne.n	80058f0 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80058a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058a8:	f000 fb67 	bl	8005f7a <prvIsQueueFull>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d018      	beq.n	80058e4 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80058b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b4:	3310      	adds	r3, #16
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	4611      	mov	r1, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 ff64 	bl	8006788 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80058c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058c2:	f000 faf2 	bl	8005eaa <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80058c6:	f000 fd9b 	bl	8006400 <xTaskResumeAll>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	f47f af7c 	bne.w	80057ca <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80058d2:	4b0c      	ldr	r3, [pc, #48]	@ (8005904 <xQueueGenericSend+0x200>)
 80058d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80058d8:	601a      	str	r2, [r3, #0]
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	e772      	b.n	80057ca <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80058e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058e6:	f000 fae0 	bl	8005eaa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80058ea:	f000 fd89 	bl	8006400 <xTaskResumeAll>
 80058ee:	e76c      	b.n	80057ca <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80058f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058f2:	f000 fada 	bl	8005eaa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80058f6:	f000 fd83 	bl	8006400 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80058fa:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3738      	adds	r7, #56	@ 0x38
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	e000ed04 	.word	0xe000ed04

08005908 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b090      	sub	sp, #64	@ 0x40
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800591a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10b      	bne.n	8005938 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005932:	bf00      	nop
 8005934:	bf00      	nop
 8005936:	e7fd      	b.n	8005934 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <xQueueGenericSendFromISR+0x3e>
 800593e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <xQueueGenericSendFromISR+0x42>
 8005946:	2301      	movs	r3, #1
 8005948:	e000      	b.n	800594c <xQueueGenericSendFromISR+0x44>
 800594a:	2300      	movs	r3, #0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005962:	bf00      	nop
 8005964:	bf00      	nop
 8005966:	e7fd      	b.n	8005964 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b02      	cmp	r3, #2
 800596c:	d103      	bne.n	8005976 <xQueueGenericSendFromISR+0x6e>
 800596e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <xQueueGenericSendFromISR+0x72>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <xQueueGenericSendFromISR+0x74>
 800597a:	2300      	movs	r3, #0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d10b      	bne.n	8005998 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8005980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005984:	f383 8811 	msr	BASEPRI, r3
 8005988:	f3bf 8f6f 	isb	sy
 800598c:	f3bf 8f4f 	dsb	sy
 8005990:	623b      	str	r3, [r7, #32]
    }
 8005992:	bf00      	nop
 8005994:	bf00      	nop
 8005996:	e7fd      	b.n	8005994 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005998:	f002 fa08 	bl	8007dac <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 800599c:	f3ef 8211 	mrs	r2, BASEPRI
 80059a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	61fa      	str	r2, [r7, #28]
 80059b2:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80059b4:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80059b6:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059c0:	429a      	cmp	r2, r3
 80059c2:	d302      	bcc.n	80059ca <xQueueGenericSendFromISR+0xc2>
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d13f      	bne.n	8005a4a <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80059ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80059d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	68b9      	ldr	r1, [r7, #8]
 80059de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059e0:	f000 f9d3 	bl	8005d8a <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80059e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059ec:	d112      	bne.n	8005a14 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d026      	beq.n	8005a44 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f8:	3324      	adds	r3, #36	@ 0x24
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 ff16 	bl	800682c <xTaskRemoveFromEventList>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01e      	beq.n	8005a44 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01b      	beq.n	8005a44 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	601a      	str	r2, [r3, #0]
 8005a12:	e017      	b.n	8005a44 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005a14:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005a18:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a1a:	d10b      	bne.n	8005a34 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8005a1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	617b      	str	r3, [r7, #20]
    }
 8005a2e:	bf00      	nop
 8005a30:	bf00      	nop
 8005a32:	e7fd      	b.n	8005a30 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005a34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005a38:	3301      	adds	r3, #1
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	b25a      	sxtb	r2, r3
 8005a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005a44:	2301      	movs	r3, #1
 8005a46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8005a48:	e001      	b.n	8005a4e <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005a4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a50:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005a58:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3740      	adds	r7, #64	@ 0x40
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b08c      	sub	sp, #48	@ 0x30
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d10b      	bne.n	8005a96 <xQueueReceive+0x32>
        __asm volatile
 8005a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	623b      	str	r3, [r7, #32]
    }
 8005a90:	bf00      	nop
 8005a92:	bf00      	nop
 8005a94:	e7fd      	b.n	8005a92 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d103      	bne.n	8005aa4 <xQueueReceive+0x40>
 8005a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d101      	bne.n	8005aa8 <xQueueReceive+0x44>
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	e000      	b.n	8005aaa <xQueueReceive+0x46>
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10b      	bne.n	8005ac6 <xQueueReceive+0x62>
        __asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	61fb      	str	r3, [r7, #28]
    }
 8005ac0:	bf00      	nop
 8005ac2:	bf00      	nop
 8005ac4:	e7fd      	b.n	8005ac2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ac6:	f001 f851 	bl	8006b6c <xTaskGetSchedulerState>
 8005aca:	4603      	mov	r3, r0
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <xQueueReceive+0x72>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d101      	bne.n	8005ada <xQueueReceive+0x76>
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <xQueueReceive+0x78>
 8005ada:	2300      	movs	r3, #0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10b      	bne.n	8005af8 <xQueueReceive+0x94>
        __asm volatile
 8005ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ae4:	f383 8811 	msr	BASEPRI, r3
 8005ae8:	f3bf 8f6f 	isb	sy
 8005aec:	f3bf 8f4f 	dsb	sy
 8005af0:	61bb      	str	r3, [r7, #24]
    }
 8005af2:	bf00      	nop
 8005af4:	bf00      	nop
 8005af6:	e7fd      	b.n	8005af4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005af8:	f002 f870 	bl	8007bdc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b00:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d01f      	beq.n	8005b48 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005b08:	68b9      	ldr	r1, [r7, #8]
 8005b0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005b0c:	f000 f9a7 	bl	8005e5e <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b12:	1e5a      	subs	r2, r3, #1
 8005b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b16:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00f      	beq.n	8005b40 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	3310      	adds	r3, #16
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fe81 	bl	800682c <xTaskRemoveFromEventList>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005b30:	4b3c      	ldr	r3, [pc, #240]	@ (8005c24 <xQueueReceive+0x1c0>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005b40:	f002 f87e 	bl	8007c40 <vPortExitCritical>
                return pdPASS;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e069      	b.n	8005c1c <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d103      	bne.n	8005b56 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005b4e:	f002 f877 	bl	8007c40 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005b52:	2300      	movs	r3, #0
 8005b54:	e062      	b.n	8005c1c <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d106      	bne.n	8005b6a <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005b5c:	f107 0310 	add.w	r3, r7, #16
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 fec7 	bl	80068f4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005b66:	2301      	movs	r3, #1
 8005b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005b6a:	f002 f869 	bl	8007c40 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005b6e:	f000 fc39 	bl	80063e4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005b72:	f002 f833 	bl	8007bdc <vPortEnterCritical>
 8005b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b78:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b7c:	b25b      	sxtb	r3, r3
 8005b7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b82:	d103      	bne.n	8005b8c <xQueueReceive+0x128>
 8005b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b8e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b92:	b25b      	sxtb	r3, r3
 8005b94:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b98:	d103      	bne.n	8005ba2 <xQueueReceive+0x13e>
 8005b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ba2:	f002 f84d 	bl	8007c40 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ba6:	1d3a      	adds	r2, r7, #4
 8005ba8:	f107 0310 	add.w	r3, r7, #16
 8005bac:	4611      	mov	r1, r2
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 feb6 	bl	8006920 <xTaskCheckForTimeOut>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d123      	bne.n	8005c02 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bbc:	f000 f9c7 	bl	8005f4e <prvIsQueueEmpty>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d017      	beq.n	8005bf6 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bc8:	3324      	adds	r3, #36	@ 0x24
 8005bca:	687a      	ldr	r2, [r7, #4]
 8005bcc:	4611      	mov	r1, r2
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f000 fdda 	bl	8006788 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005bd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bd6:	f000 f968 	bl	8005eaa <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005bda:	f000 fc11 	bl	8006400 <xTaskResumeAll>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d189      	bne.n	8005af8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8005be4:	4b0f      	ldr	r3, [pc, #60]	@ (8005c24 <xQueueReceive+0x1c0>)
 8005be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	f3bf 8f6f 	isb	sy
 8005bf4:	e780      	b.n	8005af8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005bf8:	f000 f957 	bl	8005eaa <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005bfc:	f000 fc00 	bl	8006400 <xTaskResumeAll>
 8005c00:	e77a      	b.n	8005af8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005c02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c04:	f000 f951 	bl	8005eaa <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005c08:	f000 fbfa 	bl	8006400 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005c0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c0e:	f000 f99e 	bl	8005f4e <prvIsQueueEmpty>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	f43f af6f 	beq.w	8005af8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005c1a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3730      	adds	r7, #48	@ 0x30
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	e000ed04 	.word	0xe000ed04

08005c28 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b090      	sub	sp, #64	@ 0x40
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d10b      	bne.n	8005c56 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8005c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c42:	f383 8811 	msr	BASEPRI, r3
 8005c46:	f3bf 8f6f 	isb	sy
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005c50:	bf00      	nop
 8005c52:	bf00      	nop
 8005c54:	e7fd      	b.n	8005c52 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <xQueueReceiveFromISR+0x3c>
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d101      	bne.n	8005c68 <xQueueReceiveFromISR+0x40>
 8005c64:	2301      	movs	r3, #1
 8005c66:	e000      	b.n	8005c6a <xQueueReceiveFromISR+0x42>
 8005c68:	2300      	movs	r3, #0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d10b      	bne.n	8005c86 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8005c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c72:	f383 8811 	msr	BASEPRI, r3
 8005c76:	f3bf 8f6f 	isb	sy
 8005c7a:	f3bf 8f4f 	dsb	sy
 8005c7e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005c80:	bf00      	nop
 8005c82:	bf00      	nop
 8005c84:	e7fd      	b.n	8005c82 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c86:	f002 f891 	bl	8007dac <vPortValidateInterruptPriority>
        __asm volatile
 8005c8a:	f3ef 8211 	mrs	r2, BASEPRI
 8005c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	623a      	str	r2, [r7, #32]
 8005ca0:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005ca2:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ca4:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d03f      	beq.n	8005d32 <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005cbc:	68b9      	ldr	r1, [r7, #8]
 8005cbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005cc0:	f000 f8cd 	bl	8005e5e <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc6:	1e5a      	subs	r2, r3, #1
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cca:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005ccc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cd4:	d112      	bne.n	8005cfc <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d026      	beq.n	8005d2c <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce0:	3310      	adds	r3, #16
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fda2 	bl	800682c <xTaskRemoveFromEventList>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01e      	beq.n	8005d2c <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d01b      	beq.n	8005d2c <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e017      	b.n	8005d2c <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005cfc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005d00:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d02:	d10b      	bne.n	8005d1c <xQueueReceiveFromISR+0xf4>
        __asm volatile
 8005d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d08:	f383 8811 	msr	BASEPRI, r3
 8005d0c:	f3bf 8f6f 	isb	sy
 8005d10:	f3bf 8f4f 	dsb	sy
 8005d14:	61bb      	str	r3, [r7, #24]
    }
 8005d16:	bf00      	nop
 8005d18:	bf00      	nop
 8005d1a:	e7fd      	b.n	8005d18 <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005d20:	3301      	adds	r3, #1
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	b25a      	sxtb	r2, r3
 8005d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d30:	e001      	b.n	8005d36 <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 8005d32:	2300      	movs	r3, #0
 8005d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d38:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f383 8811 	msr	BASEPRI, r3
    }
 8005d40:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005d42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3740      	adds	r7, #64	@ 0x40
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b084      	sub	sp, #16
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	60bb      	str	r3, [r7, #8]
    }
 8005d6c:	bf00      	nop
 8005d6e:	bf00      	nop
 8005d70:	e7fd      	b.n	8005d6e <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005d72:	f001 ff33 	bl	8007bdc <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d7a:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005d7c:	f001 ff60 	bl	8007c40 <vPortExitCritical>

    return uxReturn;
 8005d80:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b086      	sub	sp, #24
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9e:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10d      	bne.n	8005dc4 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d14d      	bne.n	8005e4c <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 fef7 	bl	8006ba8 <xTaskPriorityDisinherit>
 8005dba:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	609a      	str	r2, [r3, #8]
 8005dc2:	e043      	b.n	8005e4c <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d119      	bne.n	8005dfe <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6858      	ldr	r0, [r3, #4]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	f002 fa81 	bl	80082dc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005de2:	441a      	add	r2, r3
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d32b      	bcc.n	8005e4c <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	605a      	str	r2, [r3, #4]
 8005dfc:	e026      	b.n	8005e4c <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	68d8      	ldr	r0, [r3, #12]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e06:	461a      	mov	r2, r3
 8005e08:	68b9      	ldr	r1, [r7, #8]
 8005e0a:	f002 fa67 	bl	80082dc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	68da      	ldr	r2, [r3, #12]
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e16:	425b      	negs	r3, r3
 8005e18:	441a      	add	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	68da      	ldr	r2, [r3, #12]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d207      	bcs.n	8005e3a <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e32:	425b      	negs	r3, r3
 8005e34:	441a      	add	r2, r3
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d105      	bne.n	8005e4c <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d002      	beq.n	8005e4c <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8005e54:	697b      	ldr	r3, [r7, #20]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b082      	sub	sp, #8
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d018      	beq.n	8005ea2 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e78:	441a      	add	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68da      	ldr	r2, [r3, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	689b      	ldr	r3, [r3, #8]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d303      	bcc.n	8005e92 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68d9      	ldr	r1, [r3, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	6838      	ldr	r0, [r7, #0]
 8005e9e:	f002 fa1d 	bl	80082dc <memcpy>
    }
}
 8005ea2:	bf00      	nop
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005eb2:	f001 fe93 	bl	8007bdc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ebc:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ebe:	e011      	b.n	8005ee4 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d012      	beq.n	8005eee <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3324      	adds	r3, #36	@ 0x24
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 fcad 	bl	800682c <xTaskRemoveFromEventList>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005ed8:	f000 fd8a 	bl	80069f0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	dce9      	bgt.n	8005ec0 <prvUnlockQueue+0x16>
 8005eec:	e000      	b.n	8005ef0 <prvUnlockQueue+0x46>
                        break;
 8005eee:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	22ff      	movs	r2, #255	@ 0xff
 8005ef4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8005ef8:	f001 fea2 	bl	8007c40 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005efc:	f001 fe6e 	bl	8007bdc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f06:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f08:	e011      	b.n	8005f2e <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	691b      	ldr	r3, [r3, #16]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d012      	beq.n	8005f38 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3310      	adds	r3, #16
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 fc88 	bl	800682c <xTaskRemoveFromEventList>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005f22:	f000 fd65 	bl	80069f0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005f26:	7bbb      	ldrb	r3, [r7, #14]
 8005f28:	3b01      	subs	r3, #1
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005f2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	dce9      	bgt.n	8005f0a <prvUnlockQueue+0x60>
 8005f36:	e000      	b.n	8005f3a <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005f38:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	22ff      	movs	r2, #255	@ 0xff
 8005f3e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005f42:	f001 fe7d 	bl	8007c40 <vPortExitCritical>
}
 8005f46:	bf00      	nop
 8005f48:	3710      	adds	r7, #16
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}

08005f4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005f4e:	b580      	push	{r7, lr}
 8005f50:	b084      	sub	sp, #16
 8005f52:	af00      	add	r7, sp, #0
 8005f54:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005f56:	f001 fe41 	bl	8007bdc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d102      	bne.n	8005f68 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005f62:	2301      	movs	r3, #1
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e001      	b.n	8005f6c <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005f6c:	f001 fe68 	bl	8007c40 <vPortExitCritical>

    return xReturn;
 8005f70:	68fb      	ldr	r3, [r7, #12]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3710      	adds	r7, #16
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005f82:	f001 fe2b 	bl	8007bdc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f8e:	429a      	cmp	r2, r3
 8005f90:	d102      	bne.n	8005f98 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005f92:	2301      	movs	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]
 8005f96:	e001      	b.n	8005f9c <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005f9c:	f001 fe50 	bl	8007c40 <vPortExitCritical>

    return xReturn;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005faa:	b480      	push	{r7}
 8005fac:	b087      	sub	sp, #28
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d10b      	bne.n	8005fd4 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8005fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc0:	f383 8811 	msr	BASEPRI, r3
 8005fc4:	f3bf 8f6f 	isb	sy
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	60fb      	str	r3, [r7, #12]
    }
 8005fce:	bf00      	nop
 8005fd0:	bf00      	nop
 8005fd2:	e7fd      	b.n	8005fd0 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d102      	bne.n	8005fe6 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e001      	b.n	8005fea <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005fea:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005fec:	4618      	mov	r0, r3
 8005fee:	371c      	adds	r7, #28
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
 8006000:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
 8006006:	e014      	b.n	8006032 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006008:	4a0f      	ldr	r2, [pc, #60]	@ (8006048 <vQueueAddToRegistry+0x50>)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10b      	bne.n	800602c <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006014:	490c      	ldr	r1, [pc, #48]	@ (8006048 <vQueueAddToRegistry+0x50>)
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800601e:	4a0a      	ldr	r2, [pc, #40]	@ (8006048 <vQueueAddToRegistry+0x50>)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4413      	add	r3, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800602a:	e006      	b.n	800603a <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b07      	cmp	r3, #7
 8006036:	d9e7      	bls.n	8006008 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	3714      	adds	r7, #20
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr
 8006046:	bf00      	nop
 8006048:	20000230 	.word	0x20000230

0800604c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 800605c:	f001 fdbe 	bl	8007bdc <vPortEnterCritical>
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006066:	b25b      	sxtb	r3, r3
 8006068:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800606c:	d103      	bne.n	8006076 <vQueueWaitForMessageRestricted+0x2a>
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800607c:	b25b      	sxtb	r3, r3
 800607e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006082:	d103      	bne.n	800608c <vQueueWaitForMessageRestricted+0x40>
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	2200      	movs	r2, #0
 8006088:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800608c:	f001 fdd8 	bl	8007c40 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006094:	2b00      	cmp	r3, #0
 8006096:	d106      	bne.n	80060a6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	3324      	adds	r3, #36	@ 0x24
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	68b9      	ldr	r1, [r7, #8]
 80060a0:	4618      	mov	r0, r3
 80060a2:	f000 fb97 	bl	80067d4 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80060a6:	6978      	ldr	r0, [r7, #20]
 80060a8:	f7ff feff 	bl	8005eaa <prvUnlockQueue>
    }
 80060ac:	bf00      	nop
 80060ae:	3718      	adds	r7, #24
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b08c      	sub	sp, #48	@ 0x30
 80060b8:	af04      	add	r7, sp, #16
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	603b      	str	r3, [r7, #0]
 80060c0:	4613      	mov	r3, r2
 80060c2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80060c4:	88fb      	ldrh	r3, [r7, #6]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 feb1 	bl	8007e30 <pvPortMalloc>
 80060ce:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00e      	beq.n	80060f4 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80060d6:	2058      	movs	r0, #88	@ 0x58
 80060d8:	f001 feaa 	bl	8007e30 <pvPortMalloc>
 80060dc:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	697a      	ldr	r2, [r7, #20]
 80060e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80060ea:	e005      	b.n	80060f8 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80060ec:	6978      	ldr	r0, [r7, #20]
 80060ee:	f001 ff81 	bl	8007ff4 <vPortFree>
 80060f2:	e001      	b.n	80060f8 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80060f4:	2300      	movs	r3, #0
 80060f6:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d013      	beq.n	8006126 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80060fe:	88fa      	ldrh	r2, [r7, #6]
 8006100:	2300      	movs	r3, #0
 8006102:	9303      	str	r3, [sp, #12]
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	9302      	str	r3, [sp, #8]
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f000 f80e 	bl	8006136 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800611a:	69f8      	ldr	r0, [r7, #28]
 800611c:	f000 f8a2 	bl	8006264 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006120:	2301      	movs	r3, #1
 8006122:	61bb      	str	r3, [r7, #24]
 8006124:	e002      	b.n	800612c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006126:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800612a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800612c:	69bb      	ldr	r3, [r7, #24]
    }
 800612e:	4618      	mov	r0, r3
 8006130:	3720      	adds	r7, #32
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b088      	sub	sp, #32
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	461a      	mov	r2, r3
 800614e:	21a5      	movs	r1, #165	@ 0xa5
 8006150:	f002 f890 	bl	8008274 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800615e:	3b01      	subs	r3, #1
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	4413      	add	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	f023 0307 	bic.w	r3, r3, #7
 800616c:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	617b      	str	r3, [r7, #20]
    }
 800618a:	bf00      	nop
 800618c:	bf00      	nop
 800618e:	e7fd      	b.n	800618c <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d01f      	beq.n	80061d6 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	e012      	b.n	80061c2 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	4413      	add	r3, r2
 80061a2:	7819      	ldrb	r1, [r3, #0]
 80061a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	4413      	add	r3, r2
 80061aa:	3334      	adds	r3, #52	@ 0x34
 80061ac:	460a      	mov	r2, r1
 80061ae:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	69fb      	ldr	r3, [r7, #28]
 80061b4:	4413      	add	r3, r2
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d006      	beq.n	80061ca <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	3301      	adds	r3, #1
 80061c0:	61fb      	str	r3, [r7, #28]
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	2b09      	cmp	r3, #9
 80061c6:	d9e9      	bls.n	800619c <prvInitialiseNewTask+0x66>
 80061c8:	e000      	b.n	80061cc <prvInitialiseNewTask+0x96>
            {
                break;
 80061ca:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80061cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80061d4:	e003      	b.n	80061de <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80061d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d901      	bls.n	80061e8 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80061e4:	2304      	movs	r3, #4
 80061e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80061e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80061ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061f2:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80061f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061f6:	2200      	movs	r2, #0
 80061f8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80061fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061fc:	3304      	adds	r3, #4
 80061fe:	4618      	mov	r0, r3
 8006200:	f7ff f8fc 	bl	80053fc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006206:	3318      	adds	r3, #24
 8006208:	4618      	mov	r0, r3
 800620a:	f7ff f8f7 	bl	80053fc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800620e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006210:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006212:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006216:	f1c3 0205 	rsb	r2, r3, #5
 800621a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800621c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800621e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006220:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006222:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006224:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006226:	3350      	adds	r3, #80	@ 0x50
 8006228:	2204      	movs	r2, #4
 800622a:	2100      	movs	r1, #0
 800622c:	4618      	mov	r0, r3
 800622e:	f002 f821 	bl	8008274 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8006232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006234:	3354      	adds	r3, #84	@ 0x54
 8006236:	2201      	movs	r2, #1
 8006238:	2100      	movs	r1, #0
 800623a:	4618      	mov	r0, r3
 800623c:	f002 f81a 	bl	8008274 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006240:	683a      	ldr	r2, [r7, #0]
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	69b8      	ldr	r0, [r7, #24]
 8006246:	f001 fb99 	bl	800797c <pxPortInitialiseStack>
 800624a:	4602      	mov	r2, r0
 800624c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006252:	2b00      	cmp	r3, #0
 8006254:	d002      	beq.n	800625c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006258:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800625a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800625c:	bf00      	nop
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800626c:	f001 fcb6 	bl	8007bdc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006270:	4b2c      	ldr	r3, [pc, #176]	@ (8006324 <prvAddNewTaskToReadyList+0xc0>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	4a2b      	ldr	r2, [pc, #172]	@ (8006324 <prvAddNewTaskToReadyList+0xc0>)
 8006278:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800627a:	4b2b      	ldr	r3, [pc, #172]	@ (8006328 <prvAddNewTaskToReadyList+0xc4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d109      	bne.n	8006296 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006282:	4a29      	ldr	r2, [pc, #164]	@ (8006328 <prvAddNewTaskToReadyList+0xc4>)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006288:	4b26      	ldr	r3, [pc, #152]	@ (8006324 <prvAddNewTaskToReadyList+0xc0>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d110      	bne.n	80062b2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006290:	f000 fbd2 	bl	8006a38 <prvInitialiseTaskLists>
 8006294:	e00d      	b.n	80062b2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8006296:	4b25      	ldr	r3, [pc, #148]	@ (800632c <prvAddNewTaskToReadyList+0xc8>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d109      	bne.n	80062b2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800629e:	4b22      	ldr	r3, [pc, #136]	@ (8006328 <prvAddNewTaskToReadyList+0xc4>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d802      	bhi.n	80062b2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80062ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006328 <prvAddNewTaskToReadyList+0xc4>)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80062b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006330 <prvAddNewTaskToReadyList+0xcc>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3301      	adds	r3, #1
 80062b8:	4a1d      	ldr	r2, [pc, #116]	@ (8006330 <prvAddNewTaskToReadyList+0xcc>)
 80062ba:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80062bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006330 <prvAddNewTaskToReadyList+0xcc>)
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c8:	2201      	movs	r2, #1
 80062ca:	409a      	lsls	r2, r3
 80062cc:	4b19      	ldr	r3, [pc, #100]	@ (8006334 <prvAddNewTaskToReadyList+0xd0>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4313      	orrs	r3, r2
 80062d2:	4a18      	ldr	r2, [pc, #96]	@ (8006334 <prvAddNewTaskToReadyList+0xd0>)
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062da:	4613      	mov	r3, r2
 80062dc:	009b      	lsls	r3, r3, #2
 80062de:	4413      	add	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4a15      	ldr	r2, [pc, #84]	@ (8006338 <prvAddNewTaskToReadyList+0xd4>)
 80062e4:	441a      	add	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3304      	adds	r3, #4
 80062ea:	4619      	mov	r1, r3
 80062ec:	4610      	mov	r0, r2
 80062ee:	f7ff f892 	bl	8005416 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80062f2:	f001 fca5 	bl	8007c40 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80062f6:	4b0d      	ldr	r3, [pc, #52]	@ (800632c <prvAddNewTaskToReadyList+0xc8>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00e      	beq.n	800631c <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80062fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006328 <prvAddNewTaskToReadyList+0xc4>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006308:	429a      	cmp	r2, r3
 800630a:	d207      	bcs.n	800631c <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800630c:	4b0b      	ldr	r3, [pc, #44]	@ (800633c <prvAddNewTaskToReadyList+0xd8>)
 800630e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006312:	601a      	str	r2, [r3, #0]
 8006314:	f3bf 8f4f 	dsb	sy
 8006318:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800631c:	bf00      	nop
 800631e:	3708      	adds	r7, #8
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}
 8006324:	20000348 	.word	0x20000348
 8006328:	20000270 	.word	0x20000270
 800632c:	20000354 	.word	0x20000354
 8006330:	20000364 	.word	0x20000364
 8006334:	20000350 	.word	0x20000350
 8006338:	20000274 	.word	0x20000274
 800633c:	e000ed04 	.word	0xe000ed04

08006340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8006346:	4b20      	ldr	r3, [pc, #128]	@ (80063c8 <vTaskStartScheduler+0x88>)
 8006348:	9301      	str	r3, [sp, #4]
 800634a:	2300      	movs	r3, #0
 800634c:	9300      	str	r3, [sp, #0]
 800634e:	2300      	movs	r3, #0
 8006350:	2282      	movs	r2, #130	@ 0x82
 8006352:	491e      	ldr	r1, [pc, #120]	@ (80063cc <vTaskStartScheduler+0x8c>)
 8006354:	481e      	ldr	r0, [pc, #120]	@ (80063d0 <vTaskStartScheduler+0x90>)
 8006356:	f7ff fead 	bl	80060b4 <xTaskCreate>
 800635a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d102      	bne.n	8006368 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8006362:	f000 ff6d 	bl	8007240 <xTimerCreateTimerTask>
 8006366:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d116      	bne.n	800639c <vTaskStartScheduler+0x5c>
        __asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	60bb      	str	r3, [r7, #8]
    }
 8006380:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006382:	4b14      	ldr	r3, [pc, #80]	@ (80063d4 <vTaskStartScheduler+0x94>)
 8006384:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006388:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800638a:	4b13      	ldr	r3, [pc, #76]	@ (80063d8 <vTaskStartScheduler+0x98>)
 800638c:	2201      	movs	r2, #1
 800638e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006390:	4b12      	ldr	r3, [pc, #72]	@ (80063dc <vTaskStartScheduler+0x9c>)
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8006396:	f001 fb7d 	bl	8007a94 <xPortStartScheduler>
 800639a:	e00f      	b.n	80063bc <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063a2:	d10b      	bne.n	80063bc <vTaskStartScheduler+0x7c>
        __asm volatile
 80063a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a8:	f383 8811 	msr	BASEPRI, r3
 80063ac:	f3bf 8f6f 	isb	sy
 80063b0:	f3bf 8f4f 	dsb	sy
 80063b4:	607b      	str	r3, [r7, #4]
    }
 80063b6:	bf00      	nop
 80063b8:	bf00      	nop
 80063ba:	e7fd      	b.n	80063b8 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80063bc:	4b08      	ldr	r3, [pc, #32]	@ (80063e0 <vTaskStartScheduler+0xa0>)
 80063be:	681b      	ldr	r3, [r3, #0]
}
 80063c0:	bf00      	nop
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	2000036c 	.word	0x2000036c
 80063cc:	0800918c 	.word	0x0800918c
 80063d0:	08006a09 	.word	0x08006a09
 80063d4:	20000368 	.word	0x20000368
 80063d8:	20000354 	.word	0x20000354
 80063dc:	2000034c 	.word	0x2000034c
 80063e0:	20000064 	.word	0x20000064

080063e4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80063e8:	4b04      	ldr	r3, [pc, #16]	@ (80063fc <vTaskSuspendAll+0x18>)
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	3301      	adds	r3, #1
 80063ee:	4a03      	ldr	r2, [pc, #12]	@ (80063fc <vTaskSuspendAll+0x18>)
 80063f0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80063f2:	bf00      	nop
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	20000370 	.word	0x20000370

08006400 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006406:	2300      	movs	r3, #0
 8006408:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800640a:	2300      	movs	r3, #0
 800640c:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800640e:	4b42      	ldr	r3, [pc, #264]	@ (8006518 <xTaskResumeAll+0x118>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10b      	bne.n	800642e <xTaskResumeAll+0x2e>
        __asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	603b      	str	r3, [r7, #0]
    }
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	e7fd      	b.n	800642a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800642e:	f001 fbd5 	bl	8007bdc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006432:	4b39      	ldr	r3, [pc, #228]	@ (8006518 <xTaskResumeAll+0x118>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	3b01      	subs	r3, #1
 8006438:	4a37      	ldr	r2, [pc, #220]	@ (8006518 <xTaskResumeAll+0x118>)
 800643a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800643c:	4b36      	ldr	r3, [pc, #216]	@ (8006518 <xTaskResumeAll+0x118>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d161      	bne.n	8006508 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006444:	4b35      	ldr	r3, [pc, #212]	@ (800651c <xTaskResumeAll+0x11c>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d05d      	beq.n	8006508 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800644c:	e02e      	b.n	80064ac <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800644e:	4b34      	ldr	r3, [pc, #208]	@ (8006520 <xTaskResumeAll+0x120>)
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	3318      	adds	r3, #24
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff f838 	bl	80054d0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	3304      	adds	r3, #4
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff f833 	bl	80054d0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800646e:	2201      	movs	r2, #1
 8006470:	409a      	lsls	r2, r3
 8006472:	4b2c      	ldr	r3, [pc, #176]	@ (8006524 <xTaskResumeAll+0x124>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4313      	orrs	r3, r2
 8006478:	4a2a      	ldr	r2, [pc, #168]	@ (8006524 <xTaskResumeAll+0x124>)
 800647a:	6013      	str	r3, [r2, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006480:	4613      	mov	r3, r2
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	009b      	lsls	r3, r3, #2
 8006488:	4a27      	ldr	r2, [pc, #156]	@ (8006528 <xTaskResumeAll+0x128>)
 800648a:	441a      	add	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3304      	adds	r3, #4
 8006490:	4619      	mov	r1, r3
 8006492:	4610      	mov	r0, r2
 8006494:	f7fe ffbf 	bl	8005416 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800649c:	4b23      	ldr	r3, [pc, #140]	@ (800652c <xTaskResumeAll+0x12c>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d302      	bcc.n	80064ac <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 80064a6:	4b22      	ldr	r3, [pc, #136]	@ (8006530 <xTaskResumeAll+0x130>)
 80064a8:	2201      	movs	r2, #1
 80064aa:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80064ac:	4b1c      	ldr	r3, [pc, #112]	@ (8006520 <xTaskResumeAll+0x120>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1cc      	bne.n	800644e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80064ba:	f000 fb3b 	bl	8006b34 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80064be:	4b1d      	ldr	r3, [pc, #116]	@ (8006534 <xTaskResumeAll+0x134>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d010      	beq.n	80064ec <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80064ca:	f000 f847 	bl	800655c <xTaskIncrementTick>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d002      	beq.n	80064da <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 80064d4:	4b16      	ldr	r3, [pc, #88]	@ (8006530 <xTaskResumeAll+0x130>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	3b01      	subs	r3, #1
 80064de:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1f1      	bne.n	80064ca <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80064e6:	4b13      	ldr	r3, [pc, #76]	@ (8006534 <xTaskResumeAll+0x134>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80064ec:	4b10      	ldr	r3, [pc, #64]	@ (8006530 <xTaskResumeAll+0x130>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d009      	beq.n	8006508 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80064f8:	4b0f      	ldr	r3, [pc, #60]	@ (8006538 <xTaskResumeAll+0x138>)
 80064fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064fe:	601a      	str	r2, [r3, #0]
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006508:	f001 fb9a 	bl	8007c40 <vPortExitCritical>

    return xAlreadyYielded;
 800650c:	68bb      	ldr	r3, [r7, #8]
}
 800650e:	4618      	mov	r0, r3
 8006510:	3710      	adds	r7, #16
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000370 	.word	0x20000370
 800651c:	20000348 	.word	0x20000348
 8006520:	20000308 	.word	0x20000308
 8006524:	20000350 	.word	0x20000350
 8006528:	20000274 	.word	0x20000274
 800652c:	20000270 	.word	0x20000270
 8006530:	2000035c 	.word	0x2000035c
 8006534:	20000358 	.word	0x20000358
 8006538:	e000ed04 	.word	0xe000ed04

0800653c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800653c:	b480      	push	{r7}
 800653e:	b083      	sub	sp, #12
 8006540:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006542:	4b05      	ldr	r3, [pc, #20]	@ (8006558 <xTaskGetTickCount+0x1c>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006548:	687b      	ldr	r3, [r7, #4]
}
 800654a:	4618      	mov	r0, r3
 800654c:	370c      	adds	r7, #12
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	2000034c 	.word	0x2000034c

0800655c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006566:	4b4f      	ldr	r3, [pc, #316]	@ (80066a4 <xTaskIncrementTick+0x148>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	f040 808f 	bne.w	800668e <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006570:	4b4d      	ldr	r3, [pc, #308]	@ (80066a8 <xTaskIncrementTick+0x14c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3301      	adds	r3, #1
 8006576:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006578:	4a4b      	ldr	r2, [pc, #300]	@ (80066a8 <xTaskIncrementTick+0x14c>)
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d121      	bne.n	80065c8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006584:	4b49      	ldr	r3, [pc, #292]	@ (80066ac <xTaskIncrementTick+0x150>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d00b      	beq.n	80065a6 <xTaskIncrementTick+0x4a>
        __asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	603b      	str	r3, [r7, #0]
    }
 80065a0:	bf00      	nop
 80065a2:	bf00      	nop
 80065a4:	e7fd      	b.n	80065a2 <xTaskIncrementTick+0x46>
 80065a6:	4b41      	ldr	r3, [pc, #260]	@ (80066ac <xTaskIncrementTick+0x150>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]
 80065ac:	4b40      	ldr	r3, [pc, #256]	@ (80066b0 <xTaskIncrementTick+0x154>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a3e      	ldr	r2, [pc, #248]	@ (80066ac <xTaskIncrementTick+0x150>)
 80065b2:	6013      	str	r3, [r2, #0]
 80065b4:	4a3e      	ldr	r2, [pc, #248]	@ (80066b0 <xTaskIncrementTick+0x154>)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	4b3e      	ldr	r3, [pc, #248]	@ (80066b4 <xTaskIncrementTick+0x158>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3301      	adds	r3, #1
 80065c0:	4a3c      	ldr	r2, [pc, #240]	@ (80066b4 <xTaskIncrementTick+0x158>)
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	f000 fab6 	bl	8006b34 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80065c8:	4b3b      	ldr	r3, [pc, #236]	@ (80066b8 <xTaskIncrementTick+0x15c>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d348      	bcc.n	8006664 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065d2:	4b36      	ldr	r3, [pc, #216]	@ (80066ac <xTaskIncrementTick+0x150>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d104      	bne.n	80065e6 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065dc:	4b36      	ldr	r3, [pc, #216]	@ (80066b8 <xTaskIncrementTick+0x15c>)
 80065de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065e2:	601a      	str	r2, [r3, #0]
                    break;
 80065e4:	e03e      	b.n	8006664 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e6:	4b31      	ldr	r3, [pc, #196]	@ (80066ac <xTaskIncrementTick+0x150>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80065f6:	693a      	ldr	r2, [r7, #16]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d203      	bcs.n	8006606 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80065fe:	4a2e      	ldr	r2, [pc, #184]	@ (80066b8 <xTaskIncrementTick+0x15c>)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006604:	e02e      	b.n	8006664 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	3304      	adds	r3, #4
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe ff60 	bl	80054d0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006614:	2b00      	cmp	r3, #0
 8006616:	d004      	beq.n	8006622 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	3318      	adds	r3, #24
 800661c:	4618      	mov	r0, r3
 800661e:	f7fe ff57 	bl	80054d0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006626:	2201      	movs	r2, #1
 8006628:	409a      	lsls	r2, r3
 800662a:	4b24      	ldr	r3, [pc, #144]	@ (80066bc <xTaskIncrementTick+0x160>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4313      	orrs	r3, r2
 8006630:	4a22      	ldr	r2, [pc, #136]	@ (80066bc <xTaskIncrementTick+0x160>)
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	4a1f      	ldr	r2, [pc, #124]	@ (80066c0 <xTaskIncrementTick+0x164>)
 8006642:	441a      	add	r2, r3
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	3304      	adds	r3, #4
 8006648:	4619      	mov	r1, r3
 800664a:	4610      	mov	r0, r2
 800664c:	f7fe fee3 	bl	8005416 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006654:	4b1b      	ldr	r3, [pc, #108]	@ (80066c4 <xTaskIncrementTick+0x168>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800665a:	429a      	cmp	r2, r3
 800665c:	d3b9      	bcc.n	80065d2 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800665e:	2301      	movs	r3, #1
 8006660:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006662:	e7b6      	b.n	80065d2 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006664:	4b17      	ldr	r3, [pc, #92]	@ (80066c4 <xTaskIncrementTick+0x168>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800666a:	4915      	ldr	r1, [pc, #84]	@ (80066c0 <xTaskIncrementTick+0x164>)
 800666c:	4613      	mov	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	2b01      	cmp	r3, #1
 800667a:	d901      	bls.n	8006680 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 800667c:	2301      	movs	r3, #1
 800667e:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006680:	4b11      	ldr	r3, [pc, #68]	@ (80066c8 <xTaskIncrementTick+0x16c>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d007      	beq.n	8006698 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8006688:	2301      	movs	r3, #1
 800668a:	617b      	str	r3, [r7, #20]
 800668c:	e004      	b.n	8006698 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800668e:	4b0f      	ldr	r3, [pc, #60]	@ (80066cc <xTaskIncrementTick+0x170>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3301      	adds	r3, #1
 8006694:	4a0d      	ldr	r2, [pc, #52]	@ (80066cc <xTaskIncrementTick+0x170>)
 8006696:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006698:	697b      	ldr	r3, [r7, #20]
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	bf00      	nop
 80066a4:	20000370 	.word	0x20000370
 80066a8:	2000034c 	.word	0x2000034c
 80066ac:	20000300 	.word	0x20000300
 80066b0:	20000304 	.word	0x20000304
 80066b4:	20000360 	.word	0x20000360
 80066b8:	20000368 	.word	0x20000368
 80066bc:	20000350 	.word	0x20000350
 80066c0:	20000274 	.word	0x20000274
 80066c4:	20000270 	.word	0x20000270
 80066c8:	2000035c 	.word	0x2000035c
 80066cc:	20000358 	.word	0x20000358

080066d0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066d6:	4b27      	ldr	r3, [pc, #156]	@ (8006774 <vTaskSwitchContext+0xa4>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d003      	beq.n	80066e6 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80066de:	4b26      	ldr	r3, [pc, #152]	@ (8006778 <vTaskSwitchContext+0xa8>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80066e4:	e040      	b.n	8006768 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80066e6:	4b24      	ldr	r3, [pc, #144]	@ (8006778 <vTaskSwitchContext+0xa8>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ec:	4b23      	ldr	r3, [pc, #140]	@ (800677c <vTaskSwitchContext+0xac>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	fab3 f383 	clz	r3, r3
 80066f8:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80066fa:	7afb      	ldrb	r3, [r7, #11]
 80066fc:	f1c3 031f 	rsb	r3, r3, #31
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	491f      	ldr	r1, [pc, #124]	@ (8006780 <vTaskSwitchContext+0xb0>)
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	4613      	mov	r3, r2
 8006708:	009b      	lsls	r3, r3, #2
 800670a:	4413      	add	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	440b      	add	r3, r1
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10b      	bne.n	800672e <vTaskSwitchContext+0x5e>
        __asm volatile
 8006716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800671a:	f383 8811 	msr	BASEPRI, r3
 800671e:	f3bf 8f6f 	isb	sy
 8006722:	f3bf 8f4f 	dsb	sy
 8006726:	607b      	str	r3, [r7, #4]
    }
 8006728:	bf00      	nop
 800672a:	bf00      	nop
 800672c:	e7fd      	b.n	800672a <vTaskSwitchContext+0x5a>
 800672e:	697a      	ldr	r2, [r7, #20]
 8006730:	4613      	mov	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	4a11      	ldr	r2, [pc, #68]	@ (8006780 <vTaskSwitchContext+0xb0>)
 800673a:	4413      	add	r3, r2
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	605a      	str	r2, [r3, #4]
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	685a      	ldr	r2, [r3, #4]
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	3308      	adds	r3, #8
 8006750:	429a      	cmp	r2, r3
 8006752:	d104      	bne.n	800675e <vTaskSwitchContext+0x8e>
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	685a      	ldr	r2, [r3, #4]
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	605a      	str	r2, [r3, #4]
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	4a07      	ldr	r2, [pc, #28]	@ (8006784 <vTaskSwitchContext+0xb4>)
 8006766:	6013      	str	r3, [r2, #0]
}
 8006768:	bf00      	nop
 800676a:	371c      	adds	r7, #28
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	20000370 	.word	0x20000370
 8006778:	2000035c 	.word	0x2000035c
 800677c:	20000350 	.word	0x20000350
 8006780:	20000274 	.word	0x20000274
 8006784:	20000270 	.word	0x20000270

08006788 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
 8006790:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d10b      	bne.n	80067b0 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8006798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800679c:	f383 8811 	msr	BASEPRI, r3
 80067a0:	f3bf 8f6f 	isb	sy
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	60fb      	str	r3, [r7, #12]
    }
 80067aa:	bf00      	nop
 80067ac:	bf00      	nop
 80067ae:	e7fd      	b.n	80067ac <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067b0:	4b07      	ldr	r3, [pc, #28]	@ (80067d0 <vTaskPlaceOnEventList+0x48>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3318      	adds	r3, #24
 80067b6:	4619      	mov	r1, r3
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7fe fe50 	bl	800545e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067be:	2101      	movs	r1, #1
 80067c0:	6838      	ldr	r0, [r7, #0]
 80067c2:	f000 fcd7 	bl	8007174 <prvAddCurrentTaskToDelayedList>
}
 80067c6:	bf00      	nop
 80067c8:	3710      	adds	r7, #16
 80067ca:	46bd      	mov	sp, r7
 80067cc:	bd80      	pop	{r7, pc}
 80067ce:	bf00      	nop
 80067d0:	20000270 	.word	0x20000270

080067d4 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b086      	sub	sp, #24
 80067d8:	af00      	add	r7, sp, #0
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10b      	bne.n	80067fe <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	617b      	str	r3, [r7, #20]
    }
 80067f8:	bf00      	nop
 80067fa:	bf00      	nop
 80067fc:	e7fd      	b.n	80067fa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067fe:	4b0a      	ldr	r3, [pc, #40]	@ (8006828 <vTaskPlaceOnEventListRestricted+0x54>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	3318      	adds	r3, #24
 8006804:	4619      	mov	r1, r3
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f7fe fe05 	bl	8005416 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d002      	beq.n	8006818 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8006812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006816:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006818:	6879      	ldr	r1, [r7, #4]
 800681a:	68b8      	ldr	r0, [r7, #8]
 800681c:	f000 fcaa 	bl	8007174 <prvAddCurrentTaskToDelayedList>
    }
 8006820:	bf00      	nop
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	20000270 	.word	0x20000270

0800682c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b086      	sub	sp, #24
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d10b      	bne.n	800685a <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	60fb      	str	r3, [r7, #12]
    }
 8006854:	bf00      	nop
 8006856:	bf00      	nop
 8006858:	e7fd      	b.n	8006856 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	3318      	adds	r3, #24
 800685e:	4618      	mov	r0, r3
 8006860:	f7fe fe36 	bl	80054d0 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006864:	4b1d      	ldr	r3, [pc, #116]	@ (80068dc <xTaskRemoveFromEventList+0xb0>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d11c      	bne.n	80068a6 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe fe2d 	bl	80054d0 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687a:	2201      	movs	r2, #1
 800687c:	409a      	lsls	r2, r3
 800687e:	4b18      	ldr	r3, [pc, #96]	@ (80068e0 <xTaskRemoveFromEventList+0xb4>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4313      	orrs	r3, r2
 8006884:	4a16      	ldr	r2, [pc, #88]	@ (80068e0 <xTaskRemoveFromEventList+0xb4>)
 8006886:	6013      	str	r3, [r2, #0]
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688c:	4613      	mov	r3, r2
 800688e:	009b      	lsls	r3, r3, #2
 8006890:	4413      	add	r3, r2
 8006892:	009b      	lsls	r3, r3, #2
 8006894:	4a13      	ldr	r2, [pc, #76]	@ (80068e4 <xTaskRemoveFromEventList+0xb8>)
 8006896:	441a      	add	r2, r3
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	3304      	adds	r3, #4
 800689c:	4619      	mov	r1, r3
 800689e:	4610      	mov	r0, r2
 80068a0:	f7fe fdb9 	bl	8005416 <vListInsertEnd>
 80068a4:	e005      	b.n	80068b2 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	3318      	adds	r3, #24
 80068aa:	4619      	mov	r1, r3
 80068ac:	480e      	ldr	r0, [pc, #56]	@ (80068e8 <xTaskRemoveFromEventList+0xbc>)
 80068ae:	f7fe fdb2 	bl	8005416 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b6:	4b0d      	ldr	r3, [pc, #52]	@ (80068ec <xTaskRemoveFromEventList+0xc0>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068bc:	429a      	cmp	r2, r3
 80068be:	d905      	bls.n	80068cc <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80068c0:	2301      	movs	r3, #1
 80068c2:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80068c4:	4b0a      	ldr	r3, [pc, #40]	@ (80068f0 <xTaskRemoveFromEventList+0xc4>)
 80068c6:	2201      	movs	r2, #1
 80068c8:	601a      	str	r2, [r3, #0]
 80068ca:	e001      	b.n	80068d0 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80068d0:	697b      	ldr	r3, [r7, #20]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3718      	adds	r7, #24
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20000370 	.word	0x20000370
 80068e0:	20000350 	.word	0x20000350
 80068e4:	20000274 	.word	0x20000274
 80068e8:	20000308 	.word	0x20000308
 80068ec:	20000270 	.word	0x20000270
 80068f0:	2000035c 	.word	0x2000035c

080068f4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068f4:	b480      	push	{r7}
 80068f6:	b083      	sub	sp, #12
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068fc:	4b06      	ldr	r3, [pc, #24]	@ (8006918 <vTaskInternalSetTimeOutState+0x24>)
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006904:	4b05      	ldr	r3, [pc, #20]	@ (800691c <vTaskInternalSetTimeOutState+0x28>)
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	605a      	str	r2, [r3, #4]
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	20000360 	.word	0x20000360
 800691c:	2000034c 	.word	0x2000034c

08006920 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d10b      	bne.n	8006948 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8006930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006934:	f383 8811 	msr	BASEPRI, r3
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	f3bf 8f4f 	dsb	sy
 8006940:	613b      	str	r3, [r7, #16]
    }
 8006942:	bf00      	nop
 8006944:	bf00      	nop
 8006946:	e7fd      	b.n	8006944 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d10b      	bne.n	8006966 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800694e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006952:	f383 8811 	msr	BASEPRI, r3
 8006956:	f3bf 8f6f 	isb	sy
 800695a:	f3bf 8f4f 	dsb	sy
 800695e:	60fb      	str	r3, [r7, #12]
    }
 8006960:	bf00      	nop
 8006962:	bf00      	nop
 8006964:	e7fd      	b.n	8006962 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8006966:	f001 f939 	bl	8007bdc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800696a:	4b1f      	ldr	r3, [pc, #124]	@ (80069e8 <xTaskCheckForTimeOut+0xc8>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	1ad3      	subs	r3, r2, r3
 8006978:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006982:	d102      	bne.n	800698a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006984:	2300      	movs	r3, #0
 8006986:	61fb      	str	r3, [r7, #28]
 8006988:	e026      	b.n	80069d8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	4b17      	ldr	r3, [pc, #92]	@ (80069ec <xTaskCheckForTimeOut+0xcc>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	429a      	cmp	r2, r3
 8006994:	d00a      	beq.n	80069ac <xTaskCheckForTimeOut+0x8c>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	685b      	ldr	r3, [r3, #4]
 800699a:	69ba      	ldr	r2, [r7, #24]
 800699c:	429a      	cmp	r2, r3
 800699e:	d305      	bcc.n	80069ac <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80069a0:	2301      	movs	r3, #1
 80069a2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2200      	movs	r2, #0
 80069a8:	601a      	str	r2, [r3, #0]
 80069aa:	e015      	b.n	80069d8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d20b      	bcs.n	80069ce <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	1ad2      	subs	r2, r2, r3
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f7ff ff96 	bl	80068f4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80069c8:	2300      	movs	r3, #0
 80069ca:	61fb      	str	r3, [r7, #28]
 80069cc:	e004      	b.n	80069d8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2200      	movs	r2, #0
 80069d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80069d4:	2301      	movs	r3, #1
 80069d6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80069d8:	f001 f932 	bl	8007c40 <vPortExitCritical>

    return xReturn;
 80069dc:	69fb      	ldr	r3, [r7, #28]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3720      	adds	r7, #32
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	2000034c 	.word	0x2000034c
 80069ec:	20000360 	.word	0x20000360

080069f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80069f4:	4b03      	ldr	r3, [pc, #12]	@ (8006a04 <vTaskMissedYield+0x14>)
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]
}
 80069fa:	bf00      	nop
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr
 8006a04:	2000035c 	.word	0x2000035c

08006a08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006a10:	f000 f852 	bl	8006ab8 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006a14:	4b06      	ldr	r3, [pc, #24]	@ (8006a30 <prvIdleTask+0x28>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d9f9      	bls.n	8006a10 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006a1c:	4b05      	ldr	r3, [pc, #20]	@ (8006a34 <prvIdleTask+0x2c>)
 8006a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	f3bf 8f4f 	dsb	sy
 8006a28:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006a2c:	e7f0      	b.n	8006a10 <prvIdleTask+0x8>
 8006a2e:	bf00      	nop
 8006a30:	20000274 	.word	0x20000274
 8006a34:	e000ed04 	.word	0xe000ed04

08006a38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a3e:	2300      	movs	r3, #0
 8006a40:	607b      	str	r3, [r7, #4]
 8006a42:	e00c      	b.n	8006a5e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a44:	687a      	ldr	r2, [r7, #4]
 8006a46:	4613      	mov	r3, r2
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	4413      	add	r3, r2
 8006a4c:	009b      	lsls	r3, r3, #2
 8006a4e:	4a12      	ldr	r2, [pc, #72]	@ (8006a98 <prvInitialiseTaskLists+0x60>)
 8006a50:	4413      	add	r3, r2
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fe fcb2 	bl	80053bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2b04      	cmp	r3, #4
 8006a62:	d9ef      	bls.n	8006a44 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006a64:	480d      	ldr	r0, [pc, #52]	@ (8006a9c <prvInitialiseTaskLists+0x64>)
 8006a66:	f7fe fca9 	bl	80053bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006a6a:	480d      	ldr	r0, [pc, #52]	@ (8006aa0 <prvInitialiseTaskLists+0x68>)
 8006a6c:	f7fe fca6 	bl	80053bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006a70:	480c      	ldr	r0, [pc, #48]	@ (8006aa4 <prvInitialiseTaskLists+0x6c>)
 8006a72:	f7fe fca3 	bl	80053bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006a76:	480c      	ldr	r0, [pc, #48]	@ (8006aa8 <prvInitialiseTaskLists+0x70>)
 8006a78:	f7fe fca0 	bl	80053bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006a7c:	480b      	ldr	r0, [pc, #44]	@ (8006aac <prvInitialiseTaskLists+0x74>)
 8006a7e:	f7fe fc9d 	bl	80053bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006a82:	4b0b      	ldr	r3, [pc, #44]	@ (8006ab0 <prvInitialiseTaskLists+0x78>)
 8006a84:	4a05      	ldr	r2, [pc, #20]	@ (8006a9c <prvInitialiseTaskLists+0x64>)
 8006a86:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a88:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab4 <prvInitialiseTaskLists+0x7c>)
 8006a8a:	4a05      	ldr	r2, [pc, #20]	@ (8006aa0 <prvInitialiseTaskLists+0x68>)
 8006a8c:	601a      	str	r2, [r3, #0]
}
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000274 	.word	0x20000274
 8006a9c:	200002d8 	.word	0x200002d8
 8006aa0:	200002ec 	.word	0x200002ec
 8006aa4:	20000308 	.word	0x20000308
 8006aa8:	2000031c 	.word	0x2000031c
 8006aac:	20000334 	.word	0x20000334
 8006ab0:	20000300 	.word	0x20000300
 8006ab4:	20000304 	.word	0x20000304

08006ab8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b082      	sub	sp, #8
 8006abc:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006abe:	e019      	b.n	8006af4 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006ac0:	f001 f88c 	bl	8007bdc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ac4:	4b10      	ldr	r3, [pc, #64]	@ (8006b08 <prvCheckTasksWaitingTermination+0x50>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	3304      	adds	r3, #4
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7fe fcfd 	bl	80054d0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8006b0c <prvCheckTasksWaitingTermination+0x54>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	3b01      	subs	r3, #1
 8006adc:	4a0b      	ldr	r2, [pc, #44]	@ (8006b0c <prvCheckTasksWaitingTermination+0x54>)
 8006ade:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8006b10 <prvCheckTasksWaitingTermination+0x58>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8006b10 <prvCheckTasksWaitingTermination+0x58>)
 8006ae8:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006aea:	f001 f8a9 	bl	8007c40 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f810 	bl	8006b14 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006af4:	4b06      	ldr	r3, [pc, #24]	@ (8006b10 <prvCheckTasksWaitingTermination+0x58>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e1      	bne.n	8006ac0 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006afc:	bf00      	nop
 8006afe:	bf00      	nop
 8006b00:	3708      	adds	r7, #8
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	2000031c 	.word	0x2000031c
 8006b0c:	20000348 	.word	0x20000348
 8006b10:	20000330 	.word	0x20000330

08006b14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b20:	4618      	mov	r0, r3
 8006b22:	f001 fa67 	bl	8007ff4 <vPortFree>
                vPortFree( pxTCB );
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 fa64 	bl	8007ff4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006b2c:	bf00      	nop
 8006b2e:	3708      	adds	r7, #8
 8006b30:	46bd      	mov	sp, r7
 8006b32:	bd80      	pop	{r7, pc}

08006b34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b38:	4b0a      	ldr	r3, [pc, #40]	@ (8006b64 <prvResetNextTaskUnblockTime+0x30>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d104      	bne.n	8006b4c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006b42:	4b09      	ldr	r3, [pc, #36]	@ (8006b68 <prvResetNextTaskUnblockTime+0x34>)
 8006b44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006b48:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006b4a:	e005      	b.n	8006b58 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006b4c:	4b05      	ldr	r3, [pc, #20]	@ (8006b64 <prvResetNextTaskUnblockTime+0x30>)
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4a04      	ldr	r2, [pc, #16]	@ (8006b68 <prvResetNextTaskUnblockTime+0x34>)
 8006b56:	6013      	str	r3, [r2, #0]
}
 8006b58:	bf00      	nop
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	20000300 	.word	0x20000300
 8006b68:	20000368 	.word	0x20000368

08006b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006b72:	4b0b      	ldr	r3, [pc, #44]	@ (8006ba0 <xTaskGetSchedulerState+0x34>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	607b      	str	r3, [r7, #4]
 8006b7e:	e008      	b.n	8006b92 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b80:	4b08      	ldr	r3, [pc, #32]	@ (8006ba4 <xTaskGetSchedulerState+0x38>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d102      	bne.n	8006b8e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	607b      	str	r3, [r7, #4]
 8006b8c:	e001      	b.n	8006b92 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006b92:	687b      	ldr	r3, [r7, #4]
    }
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	20000354 	.word	0x20000354
 8006ba4:	20000370 	.word	0x20000370

08006ba8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b086      	sub	sp, #24
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d065      	beq.n	8006c8a <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006bbe:	4b35      	ldr	r3, [pc, #212]	@ (8006c94 <xTaskPriorityDisinherit+0xec>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	693a      	ldr	r2, [r7, #16]
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d00b      	beq.n	8006be0 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8006bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bcc:	f383 8811 	msr	BASEPRI, r3
 8006bd0:	f3bf 8f6f 	isb	sy
 8006bd4:	f3bf 8f4f 	dsb	sy
 8006bd8:	60fb      	str	r3, [r7, #12]
    }
 8006bda:	bf00      	nop
 8006bdc:	bf00      	nop
 8006bde:	e7fd      	b.n	8006bdc <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006be0:	693b      	ldr	r3, [r7, #16]
 8006be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d10b      	bne.n	8006c00 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8006be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bec:	f383 8811 	msr	BASEPRI, r3
 8006bf0:	f3bf 8f6f 	isb	sy
 8006bf4:	f3bf 8f4f 	dsb	sy
 8006bf8:	60bb      	str	r3, [r7, #8]
    }
 8006bfa:	bf00      	nop
 8006bfc:	bf00      	nop
 8006bfe:	e7fd      	b.n	8006bfc <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c04:	1e5a      	subs	r2, r3, #1
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d039      	beq.n	8006c8a <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d135      	bne.n	8006c8a <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	3304      	adds	r3, #4
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fe fc54 	bl	80054d0 <uxListRemove>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c32:	2201      	movs	r2, #1
 8006c34:	fa02 f303 	lsl.w	r3, r2, r3
 8006c38:	43da      	mvns	r2, r3
 8006c3a:	4b17      	ldr	r3, [pc, #92]	@ (8006c98 <xTaskPriorityDisinherit+0xf0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4013      	ands	r3, r2
 8006c40:	4a15      	ldr	r2, [pc, #84]	@ (8006c98 <xTaskPriorityDisinherit+0xf0>)
 8006c42:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c4c:	693b      	ldr	r3, [r7, #16]
 8006c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c50:	f1c3 0205 	rsb	r2, r3, #5
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	4b0d      	ldr	r3, [pc, #52]	@ (8006c98 <xTaskPriorityDisinherit+0xf0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4313      	orrs	r3, r2
 8006c66:	4a0c      	ldr	r2, [pc, #48]	@ (8006c98 <xTaskPriorityDisinherit+0xf0>)
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4a09      	ldr	r2, [pc, #36]	@ (8006c9c <xTaskPriorityDisinherit+0xf4>)
 8006c78:	441a      	add	r2, r3
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f7fe fbc8 	bl	8005416 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006c86:	2301      	movs	r3, #1
 8006c88:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006c8a:	697b      	ldr	r3, [r7, #20]
    }
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20000270 	.word	0x20000270
 8006c98:	20000350 	.word	0x20000350
 8006c9c:	20000274 	.word	0x20000274

08006ca0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
 8006cac:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00b      	beq.n	8006ccc <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8006cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb8:	f383 8811 	msr	BASEPRI, r3
 8006cbc:	f3bf 8f6f 	isb	sy
 8006cc0:	f3bf 8f4f 	dsb	sy
 8006cc4:	613b      	str	r3, [r7, #16]
    }
 8006cc6:	bf00      	nop
 8006cc8:	bf00      	nop
 8006cca:	e7fd      	b.n	8006cc8 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006ccc:	f000 ff86 	bl	8007bdc <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006cd0:	4b31      	ldr	r3, [pc, #196]	@ (8006d98 <xTaskGenericNotifyWait+0xf8>)
 8006cd2:	681a      	ldr	r2, [r3, #0]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	3354      	adds	r3, #84	@ 0x54
 8006cda:	781b      	ldrb	r3, [r3, #0]
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d022      	beq.n	8006d28 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8006d98 <xTaskGenericNotifyWait+0xf8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	68fa      	ldr	r2, [r7, #12]
 8006ce8:	3214      	adds	r2, #20
 8006cea:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	43d2      	mvns	r2, r2
 8006cf2:	4011      	ands	r1, r2
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	3214      	adds	r2, #20
 8006cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006cfc:	4b26      	ldr	r3, [pc, #152]	@ (8006d98 <xTaskGenericNotifyWait+0xf8>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	3354      	adds	r3, #84	@ 0x54
 8006d06:	2201      	movs	r2, #1
 8006d08:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006d0a:	6a3b      	ldr	r3, [r7, #32]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00b      	beq.n	8006d28 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d10:	2101      	movs	r1, #1
 8006d12:	6a38      	ldr	r0, [r7, #32]
 8006d14:	f000 fa2e 	bl	8007174 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006d18:	4b20      	ldr	r3, [pc, #128]	@ (8006d9c <xTaskGenericNotifyWait+0xfc>)
 8006d1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	f3bf 8f4f 	dsb	sy
 8006d24:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006d28:	f000 ff8a 	bl	8007c40 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006d2c:	f000 ff56 	bl	8007bdc <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d007      	beq.n	8006d46 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006d36:	4b18      	ldr	r3, [pc, #96]	@ (8006d98 <xTaskGenericNotifyWait+0xf8>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	3214      	adds	r2, #20
 8006d3e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006d46:	4b14      	ldr	r3, [pc, #80]	@ (8006d98 <xTaskGenericNotifyWait+0xf8>)
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	3354      	adds	r3, #84	@ 0x54
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d002      	beq.n	8006d5e <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	617b      	str	r3, [r7, #20]
 8006d5c:	e00e      	b.n	8006d7c <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006d98 <xTaskGenericNotifyWait+0xf8>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68fa      	ldr	r2, [r7, #12]
 8006d64:	3214      	adds	r2, #20
 8006d66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d6a:	687a      	ldr	r2, [r7, #4]
 8006d6c:	43d2      	mvns	r2, r2
 8006d6e:	4011      	ands	r1, r2
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	3214      	adds	r2, #20
 8006d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006d7c:	4b06      	ldr	r3, [pc, #24]	@ (8006d98 <xTaskGenericNotifyWait+0xf8>)
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	4413      	add	r3, r2
 8006d84:	3354      	adds	r3, #84	@ 0x54
 8006d86:	2200      	movs	r2, #0
 8006d88:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006d8a:	f000 ff59 	bl	8007c40 <vPortExitCritical>

        return xReturn;
 8006d8e:	697b      	ldr	r3, [r7, #20]
    }
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20000270 	.word	0x20000270
 8006d9c:	e000ed04 	.word	0xe000ed04

08006da0 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b08c      	sub	sp, #48	@ 0x30
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006dae:	2301      	movs	r3, #1
 8006db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00b      	beq.n	8006dd0 <xTaskGenericNotify+0x30>
        __asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	623b      	str	r3, [r7, #32]
    }
 8006dca:	bf00      	nop
 8006dcc:	bf00      	nop
 8006dce:	e7fd      	b.n	8006dcc <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10b      	bne.n	8006dee <xTaskGenericNotify+0x4e>
        __asm volatile
 8006dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dda:	f383 8811 	msr	BASEPRI, r3
 8006dde:	f3bf 8f6f 	isb	sy
 8006de2:	f3bf 8f4f 	dsb	sy
 8006de6:	61fb      	str	r3, [r7, #28]
    }
 8006de8:	bf00      	nop
 8006dea:	bf00      	nop
 8006dec:	e7fd      	b.n	8006dea <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 8006df2:	f000 fef3 	bl	8007bdc <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d006      	beq.n	8006e0a <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	3214      	adds	r2, #20
 8006e02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e08:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006e0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	4413      	add	r3, r2
 8006e10:	3354      	adds	r3, #84	@ 0x54
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006e18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	3354      	adds	r3, #84	@ 0x54
 8006e20:	2202      	movs	r2, #2
 8006e22:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d83b      	bhi.n	8006ea2 <xTaskGenericNotify+0x102>
 8006e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e30 <xTaskGenericNotify+0x90>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006ec3 	.word	0x08006ec3
 8006e34:	08006e45 	.word	0x08006e45
 8006e38:	08006e61 	.word	0x08006e61
 8006e3c:	08006e79 	.word	0x08006e79
 8006e40:	08006e87 	.word	0x08006e87
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	3214      	adds	r2, #20
 8006e4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	ea42 0103 	orr.w	r1, r2, r3
 8006e54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e56:	68ba      	ldr	r2, [r7, #8]
 8006e58:	3214      	adds	r2, #20
 8006e5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006e5e:	e033      	b.n	8006ec8 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	3214      	adds	r2, #20
 8006e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e6a:	1c59      	adds	r1, r3, #1
 8006e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	3214      	adds	r2, #20
 8006e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006e76:	e027      	b.n	8006ec8 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7a:	68ba      	ldr	r2, [r7, #8]
 8006e7c:	3214      	adds	r2, #20
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006e84:	e020      	b.n	8006ec8 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006e86:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d006      	beq.n	8006e9c <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e90:	68ba      	ldr	r2, [r7, #8]
 8006e92:	3214      	adds	r2, #20
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006e9a:	e015      	b.n	8006ec8 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8006ea0:	e012      	b.n	8006ec8 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006ea2:	4b2c      	ldr	r3, [pc, #176]	@ (8006f54 <xTaskGenericNotify+0x1b4>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00d      	beq.n	8006ec6 <xTaskGenericNotify+0x126>
        __asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	61bb      	str	r3, [r7, #24]
    }
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <xTaskGenericNotify+0x11e>
                    break;
 8006ec2:	bf00      	nop
 8006ec4:	e000      	b.n	8006ec8 <xTaskGenericNotify+0x128>

                    break;
 8006ec6:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006ec8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006ecc:	2b01      	cmp	r3, #1
 8006ece:	d13a      	bne.n	8006f46 <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed2:	3304      	adds	r3, #4
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f7fe fafb 	bl	80054d0 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ede:	2201      	movs	r2, #1
 8006ee0:	409a      	lsls	r2, r3
 8006ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8006f58 <xTaskGenericNotify+0x1b8>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	4a1b      	ldr	r2, [pc, #108]	@ (8006f58 <xTaskGenericNotify+0x1b8>)
 8006eea:	6013      	str	r3, [r2, #0]
 8006eec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	4a18      	ldr	r2, [pc, #96]	@ (8006f5c <xTaskGenericNotify+0x1bc>)
 8006efa:	441a      	add	r2, r3
 8006efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006efe:	3304      	adds	r3, #4
 8006f00:	4619      	mov	r1, r3
 8006f02:	4610      	mov	r0, r2
 8006f04:	f7fe fa87 	bl	8005416 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <xTaskGenericNotify+0x188>
        __asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	617b      	str	r3, [r7, #20]
    }
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f60 <xTaskGenericNotify+0x1c0>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f32:	429a      	cmp	r2, r3
 8006f34:	d907      	bls.n	8006f46 <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8006f36:	4b0b      	ldr	r3, [pc, #44]	@ (8006f64 <xTaskGenericNotify+0x1c4>)
 8006f38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f3c:	601a      	str	r2, [r3, #0]
 8006f3e:	f3bf 8f4f 	dsb	sy
 8006f42:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006f46:	f000 fe7b 	bl	8007c40 <vPortExitCritical>

        return xReturn;
 8006f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3730      	adds	r7, #48	@ 0x30
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}
 8006f54:	2000034c 	.word	0x2000034c
 8006f58:	20000350 	.word	0x20000350
 8006f5c:	20000274 	.word	0x20000274
 8006f60:	20000270 	.word	0x20000270
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b090      	sub	sp, #64	@ 0x40
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	607a      	str	r2, [r7, #4]
 8006f74:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006f76:	2301      	movs	r3, #1
 8006f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d10b      	bne.n	8006f98 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8006f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f84:	f383 8811 	msr	BASEPRI, r3
 8006f88:	f3bf 8f6f 	isb	sy
 8006f8c:	f3bf 8f4f 	dsb	sy
 8006f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8006f92:	bf00      	nop
 8006f94:	bf00      	nop
 8006f96:	e7fd      	b.n	8006f94 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00b      	beq.n	8006fb6 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006fb0:	bf00      	nop
 8006fb2:	bf00      	nop
 8006fb4:	e7fd      	b.n	8006fb2 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fb6:	f000 fef9 	bl	8007dac <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8006fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8006fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fc6:	f383 8811 	msr	BASEPRI, r3
 8006fca:	f3bf 8f6f 	isb	sy
 8006fce:	f3bf 8f4f 	dsb	sy
 8006fd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fd4:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fd8:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d006      	beq.n	8006fee <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	3214      	adds	r2, #20
 8006fe6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006fea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fec:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006fee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	3354      	adds	r3, #84	@ 0x54
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006ffc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	4413      	add	r3, r2
 8007002:	3354      	adds	r3, #84	@ 0x54
 8007004:	2202      	movs	r2, #2
 8007006:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007008:	78fb      	ldrb	r3, [r7, #3]
 800700a:	2b04      	cmp	r3, #4
 800700c:	d83b      	bhi.n	8007086 <xTaskGenericNotifyFromISR+0x11e>
 800700e:	a201      	add	r2, pc, #4	@ (adr r2, 8007014 <xTaskGenericNotifyFromISR+0xac>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	080070a7 	.word	0x080070a7
 8007018:	08007029 	.word	0x08007029
 800701c:	08007045 	.word	0x08007045
 8007020:	0800705d 	.word	0x0800705d
 8007024:	0800706b 	.word	0x0800706b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	3214      	adds	r2, #20
 800702e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	ea42 0103 	orr.w	r1, r2, r3
 8007038:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	3214      	adds	r2, #20
 800703e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007042:	e033      	b.n	80070ac <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007046:	68ba      	ldr	r2, [r7, #8]
 8007048:	3214      	adds	r2, #20
 800704a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800704e:	1c59      	adds	r1, r3, #1
 8007050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007052:	68ba      	ldr	r2, [r7, #8]
 8007054:	3214      	adds	r2, #20
 8007056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800705a:	e027      	b.n	80070ac <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800705c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	3214      	adds	r2, #20
 8007062:	6879      	ldr	r1, [r7, #4]
 8007064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007068:	e020      	b.n	80070ac <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800706a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800706e:	2b02      	cmp	r3, #2
 8007070:	d006      	beq.n	8007080 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	68ba      	ldr	r2, [r7, #8]
 8007076:	3214      	adds	r2, #20
 8007078:	6879      	ldr	r1, [r7, #4]
 800707a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800707e:	e015      	b.n	80070ac <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8007080:	2300      	movs	r3, #0
 8007082:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 8007084:	e012      	b.n	80070ac <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007086:	4b34      	ldr	r3, [pc, #208]	@ (8007158 <xTaskGenericNotifyFromISR+0x1f0>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00d      	beq.n	80070aa <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	61fb      	str	r3, [r7, #28]
    }
 80070a0:	bf00      	nop
 80070a2:	bf00      	nop
 80070a4:	e7fd      	b.n	80070a2 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 80070a6:	bf00      	nop
 80070a8:	e000      	b.n	80070ac <xTaskGenericNotifyFromISR+0x144>
                    break;
 80070aa:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80070ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80070b0:	2b01      	cmp	r3, #1
 80070b2:	d146      	bne.n	8007142 <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80070b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d00b      	beq.n	80070d4 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	61bb      	str	r3, [r7, #24]
    }
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	e7fd      	b.n	80070d0 <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d4:	4b21      	ldr	r3, [pc, #132]	@ (800715c <xTaskGenericNotifyFromISR+0x1f4>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d11c      	bne.n	8007116 <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070de:	3304      	adds	r3, #4
 80070e0:	4618      	mov	r0, r3
 80070e2:	f7fe f9f5 	bl	80054d0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80070e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070ea:	2201      	movs	r2, #1
 80070ec:	409a      	lsls	r2, r3
 80070ee:	4b1c      	ldr	r3, [pc, #112]	@ (8007160 <xTaskGenericNotifyFromISR+0x1f8>)
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007160 <xTaskGenericNotifyFromISR+0x1f8>)
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070fc:	4613      	mov	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	4413      	add	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4a17      	ldr	r2, [pc, #92]	@ (8007164 <xTaskGenericNotifyFromISR+0x1fc>)
 8007106:	441a      	add	r2, r3
 8007108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800710a:	3304      	adds	r3, #4
 800710c:	4619      	mov	r1, r3
 800710e:	4610      	mov	r0, r2
 8007110:	f7fe f981 	bl	8005416 <vListInsertEnd>
 8007114:	e005      	b.n	8007122 <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	3318      	adds	r3, #24
 800711a:	4619      	mov	r1, r3
 800711c:	4812      	ldr	r0, [pc, #72]	@ (8007168 <xTaskGenericNotifyFromISR+0x200>)
 800711e:	f7fe f97a 	bl	8005416 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007126:	4b11      	ldr	r3, [pc, #68]	@ (800716c <xTaskGenericNotifyFromISR+0x204>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	429a      	cmp	r2, r3
 800712e:	d908      	bls.n	8007142 <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8007130:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d002      	beq.n	800713c <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8007136:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007138:	2201      	movs	r2, #1
 800713a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800713c:	4b0c      	ldr	r3, [pc, #48]	@ (8007170 <xTaskGenericNotifyFromISR+0x208>)
 800713e:	2201      	movs	r2, #1
 8007140:	601a      	str	r2, [r3, #0]
 8007142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007144:	617b      	str	r3, [r7, #20]
        __asm volatile
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f383 8811 	msr	BASEPRI, r3
    }
 800714c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800714e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8007150:	4618      	mov	r0, r3
 8007152:	3740      	adds	r7, #64	@ 0x40
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}
 8007158:	2000034c 	.word	0x2000034c
 800715c:	20000370 	.word	0x20000370
 8007160:	20000350 	.word	0x20000350
 8007164:	20000274 	.word	0x20000274
 8007168:	20000308 	.word	0x20000308
 800716c:	20000270 	.word	0x20000270
 8007170:	2000035c 	.word	0x2000035c

08007174 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800717e:	4b29      	ldr	r3, [pc, #164]	@ (8007224 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007184:	4b28      	ldr	r3, [pc, #160]	@ (8007228 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	3304      	adds	r3, #4
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe f9a0 	bl	80054d0 <uxListRemove>
 8007190:	4603      	mov	r3, r0
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10b      	bne.n	80071ae <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007196:	4b24      	ldr	r3, [pc, #144]	@ (8007228 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800719c:	2201      	movs	r2, #1
 800719e:	fa02 f303 	lsl.w	r3, r2, r3
 80071a2:	43da      	mvns	r2, r3
 80071a4:	4b21      	ldr	r3, [pc, #132]	@ (800722c <prvAddCurrentTaskToDelayedList+0xb8>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	4013      	ands	r3, r2
 80071aa:	4a20      	ldr	r2, [pc, #128]	@ (800722c <prvAddCurrentTaskToDelayedList+0xb8>)
 80071ac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071b4:	d10a      	bne.n	80071cc <prvAddCurrentTaskToDelayedList+0x58>
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d007      	beq.n	80071cc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071bc:	4b1a      	ldr	r3, [pc, #104]	@ (8007228 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	3304      	adds	r3, #4
 80071c2:	4619      	mov	r1, r3
 80071c4:	481a      	ldr	r0, [pc, #104]	@ (8007230 <prvAddCurrentTaskToDelayedList+0xbc>)
 80071c6:	f7fe f926 	bl	8005416 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80071ca:	e026      	b.n	800721a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071d4:	4b14      	ldr	r3, [pc, #80]	@ (8007228 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	68ba      	ldr	r2, [r7, #8]
 80071da:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d209      	bcs.n	80071f8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071e4:	4b13      	ldr	r3, [pc, #76]	@ (8007234 <prvAddCurrentTaskToDelayedList+0xc0>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	4b0f      	ldr	r3, [pc, #60]	@ (8007228 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	3304      	adds	r3, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4610      	mov	r0, r2
 80071f2:	f7fe f934 	bl	800545e <vListInsert>
}
 80071f6:	e010      	b.n	800721a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071f8:	4b0f      	ldr	r3, [pc, #60]	@ (8007238 <prvAddCurrentTaskToDelayedList+0xc4>)
 80071fa:	681a      	ldr	r2, [r3, #0]
 80071fc:	4b0a      	ldr	r3, [pc, #40]	@ (8007228 <prvAddCurrentTaskToDelayedList+0xb4>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	3304      	adds	r3, #4
 8007202:	4619      	mov	r1, r3
 8007204:	4610      	mov	r0, r2
 8007206:	f7fe f92a 	bl	800545e <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800720a:	4b0c      	ldr	r3, [pc, #48]	@ (800723c <prvAddCurrentTaskToDelayedList+0xc8>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	68ba      	ldr	r2, [r7, #8]
 8007210:	429a      	cmp	r2, r3
 8007212:	d202      	bcs.n	800721a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8007214:	4a09      	ldr	r2, [pc, #36]	@ (800723c <prvAddCurrentTaskToDelayedList+0xc8>)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	6013      	str	r3, [r2, #0]
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	2000034c 	.word	0x2000034c
 8007228:	20000270 	.word	0x20000270
 800722c:	20000350 	.word	0x20000350
 8007230:	20000334 	.word	0x20000334
 8007234:	20000304 	.word	0x20000304
 8007238:	20000300 	.word	0x20000300
 800723c:	20000368 	.word	0x20000368

08007240 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8007246:	2300      	movs	r3, #0
 8007248:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800724a:	f000 fb3f 	bl	80078cc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800724e:	4b12      	ldr	r3, [pc, #72]	@ (8007298 <xTimerCreateTimerTask+0x58>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00b      	beq.n	800726e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8007256:	4b11      	ldr	r3, [pc, #68]	@ (800729c <xTimerCreateTimerTask+0x5c>)
 8007258:	9301      	str	r3, [sp, #4]
 800725a:	2302      	movs	r3, #2
 800725c:	9300      	str	r3, [sp, #0]
 800725e:	2300      	movs	r3, #0
 8007260:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007264:	490e      	ldr	r1, [pc, #56]	@ (80072a0 <xTimerCreateTimerTask+0x60>)
 8007266:	480f      	ldr	r0, [pc, #60]	@ (80072a4 <xTimerCreateTimerTask+0x64>)
 8007268:	f7fe ff24 	bl	80060b4 <xTaskCreate>
 800726c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10b      	bne.n	800728c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8007274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007278:	f383 8811 	msr	BASEPRI, r3
 800727c:	f3bf 8f6f 	isb	sy
 8007280:	f3bf 8f4f 	dsb	sy
 8007284:	603b      	str	r3, [r7, #0]
    }
 8007286:	bf00      	nop
 8007288:	bf00      	nop
 800728a:	e7fd      	b.n	8007288 <xTimerCreateTimerTask+0x48>
        return xReturn;
 800728c:	687b      	ldr	r3, [r7, #4]
    }
 800728e:	4618      	mov	r0, r3
 8007290:	3708      	adds	r7, #8
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}
 8007296:	bf00      	nop
 8007298:	200003a4 	.word	0x200003a4
 800729c:	200003a8 	.word	0x200003a8
 80072a0:	08009194 	.word	0x08009194
 80072a4:	0800749d 	.word	0x0800749d

080072a8 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80072b6:	202c      	movs	r0, #44	@ 0x2c
 80072b8:	f000 fdba 	bl	8007e30 <pvPortMalloc>
 80072bc:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00d      	beq.n	80072e0 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	9301      	str	r3, [sp, #4]
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	9300      	str	r3, [sp, #0]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	687a      	ldr	r2, [r7, #4]
 80072d8:	68b9      	ldr	r1, [r7, #8]
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f000 f805 	bl	80072ea <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80072e0:	697b      	ldr	r3, [r7, #20]
        }
 80072e2:	4618      	mov	r0, r3
 80072e4:	3718      	adds	r7, #24
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b086      	sub	sp, #24
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	60f8      	str	r0, [r7, #12]
 80072f2:	60b9      	str	r1, [r7, #8]
 80072f4:	607a      	str	r2, [r7, #4]
 80072f6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10b      	bne.n	8007316 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	617b      	str	r3, [r7, #20]
    }
 8007310:	bf00      	nop
 8007312:	bf00      	nop
 8007314:	e7fd      	b.n	8007312 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	2b00      	cmp	r3, #0
 800731a:	d01e      	beq.n	800735a <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800731c:	f000 fad6 	bl	80078cc <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8007320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800732c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732e:	683a      	ldr	r2, [r7, #0]
 8007330:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007334:	6a3a      	ldr	r2, [r7, #32]
 8007336:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733a:	3304      	adds	r3, #4
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe f85d 	bl	80053fc <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800734e:	f043 0304 	orr.w	r3, r3, #4
 8007352:	b2da      	uxtb	r2, r3
 8007354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007356:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800735a:	bf00      	nop
 800735c:	3718      	adds	r7, #24
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
	...

08007364 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007364:	b580      	push	{r7, lr}
 8007366:	b08a      	sub	sp, #40	@ 0x28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
 8007370:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007372:	2300      	movs	r3, #0
 8007374:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d10b      	bne.n	8007394 <xTimerGenericCommand+0x30>
        __asm volatile
 800737c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007380:	f383 8811 	msr	BASEPRI, r3
 8007384:	f3bf 8f6f 	isb	sy
 8007388:	f3bf 8f4f 	dsb	sy
 800738c:	623b      	str	r3, [r7, #32]
    }
 800738e:	bf00      	nop
 8007390:	bf00      	nop
 8007392:	e7fd      	b.n	8007390 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007394:	4b19      	ldr	r3, [pc, #100]	@ (80073fc <xTimerGenericCommand+0x98>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d02a      	beq.n	80073f2 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	dc18      	bgt.n	80073e0 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073ae:	f7ff fbdd 	bl	8006b6c <xTaskGetSchedulerState>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d109      	bne.n	80073cc <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073b8:	4b10      	ldr	r3, [pc, #64]	@ (80073fc <xTimerGenericCommand+0x98>)
 80073ba:	6818      	ldr	r0, [r3, #0]
 80073bc:	f107 0114 	add.w	r1, r7, #20
 80073c0:	2300      	movs	r3, #0
 80073c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073c4:	f7fe f99e 	bl	8005704 <xQueueGenericSend>
 80073c8:	6278      	str	r0, [r7, #36]	@ 0x24
 80073ca:	e012      	b.n	80073f2 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073cc:	4b0b      	ldr	r3, [pc, #44]	@ (80073fc <xTimerGenericCommand+0x98>)
 80073ce:	6818      	ldr	r0, [r3, #0]
 80073d0:	f107 0114 	add.w	r1, r7, #20
 80073d4:	2300      	movs	r3, #0
 80073d6:	2200      	movs	r2, #0
 80073d8:	f7fe f994 	bl	8005704 <xQueueGenericSend>
 80073dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80073de:	e008      	b.n	80073f2 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073e0:	4b06      	ldr	r3, [pc, #24]	@ (80073fc <xTimerGenericCommand+0x98>)
 80073e2:	6818      	ldr	r0, [r3, #0]
 80073e4:	f107 0114 	add.w	r1, r7, #20
 80073e8:	2300      	movs	r3, #0
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	f7fe fa8c 	bl	8005908 <xQueueGenericSendFromISR>
 80073f0:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80073f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80073f4:	4618      	mov	r0, r3
 80073f6:	3728      	adds	r7, #40	@ 0x28
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	200003a4 	.word	0x200003a4

08007400 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007400:	b580      	push	{r7, lr}
 8007402:	b088      	sub	sp, #32
 8007404:	af02      	add	r7, sp, #8
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800740a:	4b23      	ldr	r3, [pc, #140]	@ (8007498 <prvProcessExpiredTimer+0x98>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	3304      	adds	r3, #4
 8007418:	4618      	mov	r0, r3
 800741a:	f7fe f859 	bl	80054d0 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007424:	f003 0304 	and.w	r3, r3, #4
 8007428:	2b00      	cmp	r3, #0
 800742a:	d023      	beq.n	8007474 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	699a      	ldr	r2, [r3, #24]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	18d1      	adds	r1, r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	683a      	ldr	r2, [r7, #0]
 8007438:	6978      	ldr	r0, [r7, #20]
 800743a:	f000 f8d5 	bl	80075e8 <prvInsertTimerInActiveList>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d020      	beq.n	8007486 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007444:	2300      	movs	r3, #0
 8007446:	9300      	str	r3, [sp, #0]
 8007448:	2300      	movs	r3, #0
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	2100      	movs	r1, #0
 800744e:	6978      	ldr	r0, [r7, #20]
 8007450:	f7ff ff88 	bl	8007364 <xTimerGenericCommand>
 8007454:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d114      	bne.n	8007486 <prvProcessExpiredTimer+0x86>
        __asm volatile
 800745c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007460:	f383 8811 	msr	BASEPRI, r3
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	f3bf 8f4f 	dsb	sy
 800746c:	60fb      	str	r3, [r7, #12]
    }
 800746e:	bf00      	nop
 8007470:	bf00      	nop
 8007472:	e7fd      	b.n	8007470 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800747a:	f023 0301 	bic.w	r3, r3, #1
 800747e:	b2da      	uxtb	r2, r3
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	6978      	ldr	r0, [r7, #20]
 800748c:	4798      	blx	r3
    }
 800748e:	bf00      	nop
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	2000039c 	.word	0x2000039c

0800749c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074a4:	f107 0308 	add.w	r3, r7, #8
 80074a8:	4618      	mov	r0, r3
 80074aa:	f000 f859 	bl	8007560 <prvGetNextExpireTime>
 80074ae:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4619      	mov	r1, r3
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f000 f805 	bl	80074c4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80074ba:	f000 f8d7 	bl	800766c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074be:	bf00      	nop
 80074c0:	e7f0      	b.n	80074a4 <prvTimerTask+0x8>
	...

080074c4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80074ce:	f7fe ff89 	bl	80063e4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074d2:	f107 0308 	add.w	r3, r7, #8
 80074d6:	4618      	mov	r0, r3
 80074d8:	f000 f866 	bl	80075a8 <prvSampleTimeNow>
 80074dc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d130      	bne.n	8007546 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d10a      	bne.n	8007500 <prvProcessTimerOrBlockTask+0x3c>
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	429a      	cmp	r2, r3
 80074f0:	d806      	bhi.n	8007500 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80074f2:	f7fe ff85 	bl	8006400 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074f6:	68f9      	ldr	r1, [r7, #12]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff ff81 	bl	8007400 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80074fe:	e024      	b.n	800754a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d008      	beq.n	8007518 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007506:	4b13      	ldr	r3, [pc, #76]	@ (8007554 <prvProcessTimerOrBlockTask+0x90>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <prvProcessTimerOrBlockTask+0x50>
 8007510:	2301      	movs	r3, #1
 8007512:	e000      	b.n	8007516 <prvProcessTimerOrBlockTask+0x52>
 8007514:	2300      	movs	r3, #0
 8007516:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007518:	4b0f      	ldr	r3, [pc, #60]	@ (8007558 <prvProcessTimerOrBlockTask+0x94>)
 800751a:	6818      	ldr	r0, [r3, #0]
 800751c:	687a      	ldr	r2, [r7, #4]
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	683a      	ldr	r2, [r7, #0]
 8007524:	4619      	mov	r1, r3
 8007526:	f7fe fd91 	bl	800604c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800752a:	f7fe ff69 	bl	8006400 <xTaskResumeAll>
 800752e:	4603      	mov	r3, r0
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007534:	4b09      	ldr	r3, [pc, #36]	@ (800755c <prvProcessTimerOrBlockTask+0x98>)
 8007536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	f3bf 8f6f 	isb	sy
    }
 8007544:	e001      	b.n	800754a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007546:	f7fe ff5b 	bl	8006400 <xTaskResumeAll>
    }
 800754a:	bf00      	nop
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	200003a0 	.word	0x200003a0
 8007558:	200003a4 	.word	0x200003a4
 800755c:	e000ed04 	.word	0xe000ed04

08007560 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007560:	b480      	push	{r7}
 8007562:	b085      	sub	sp, #20
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007568:	4b0e      	ldr	r3, [pc, #56]	@ (80075a4 <prvGetNextExpireTime+0x44>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <prvGetNextExpireTime+0x16>
 8007572:	2201      	movs	r2, #1
 8007574:	e000      	b.n	8007578 <prvGetNextExpireTime+0x18>
 8007576:	2200      	movs	r2, #0
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d105      	bne.n	8007590 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007584:	4b07      	ldr	r3, [pc, #28]	@ (80075a4 <prvGetNextExpireTime+0x44>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	60fb      	str	r3, [r7, #12]
 800758e:	e001      	b.n	8007594 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007594:	68fb      	ldr	r3, [r7, #12]
    }
 8007596:	4618      	mov	r0, r3
 8007598:	3714      	adds	r7, #20
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	2000039c 	.word	0x2000039c

080075a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80075b0:	f7fe ffc4 	bl	800653c <xTaskGetTickCount>
 80075b4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80075b6:	4b0b      	ldr	r3, [pc, #44]	@ (80075e4 <prvSampleTimeNow+0x3c>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	429a      	cmp	r2, r3
 80075be:	d205      	bcs.n	80075cc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80075c0:	f000 f91e 	bl	8007800 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	e002      	b.n	80075d2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80075d2:	4a04      	ldr	r2, [pc, #16]	@ (80075e4 <prvSampleTimeNow+0x3c>)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80075d8:	68fb      	ldr	r3, [r7, #12]
    }
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}
 80075e2:	bf00      	nop
 80075e4:	200003ac 	.word	0x200003ac

080075e8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b086      	sub	sp, #24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	607a      	str	r2, [r7, #4]
 80075f4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	68ba      	ldr	r2, [r7, #8]
 80075fe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007606:	68ba      	ldr	r2, [r7, #8]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	429a      	cmp	r2, r3
 800760c:	d812      	bhi.n	8007634 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	1ad2      	subs	r2, r2, r3
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	699b      	ldr	r3, [r3, #24]
 8007618:	429a      	cmp	r2, r3
 800761a:	d302      	bcc.n	8007622 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800761c:	2301      	movs	r3, #1
 800761e:	617b      	str	r3, [r7, #20]
 8007620:	e01b      	b.n	800765a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007622:	4b10      	ldr	r3, [pc, #64]	@ (8007664 <prvInsertTimerInActiveList+0x7c>)
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3304      	adds	r3, #4
 800762a:	4619      	mov	r1, r3
 800762c:	4610      	mov	r0, r2
 800762e:	f7fd ff16 	bl	800545e <vListInsert>
 8007632:	e012      	b.n	800765a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	429a      	cmp	r2, r3
 800763a:	d206      	bcs.n	800764a <prvInsertTimerInActiveList+0x62>
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	429a      	cmp	r2, r3
 8007642:	d302      	bcc.n	800764a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007644:	2301      	movs	r3, #1
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	e007      	b.n	800765a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800764a:	4b07      	ldr	r3, [pc, #28]	@ (8007668 <prvInsertTimerInActiveList+0x80>)
 800764c:	681a      	ldr	r2, [r3, #0]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	3304      	adds	r3, #4
 8007652:	4619      	mov	r1, r3
 8007654:	4610      	mov	r0, r2
 8007656:	f7fd ff02 	bl	800545e <vListInsert>
            }
        }

        return xProcessTimerNow;
 800765a:	697b      	ldr	r3, [r7, #20]
    }
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}
 8007664:	200003a0 	.word	0x200003a0
 8007668:	2000039c 	.word	0x2000039c

0800766c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800766c:	b580      	push	{r7, lr}
 800766e:	b08c      	sub	sp, #48	@ 0x30
 8007670:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007672:	e0b2      	b.n	80077da <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	f2c0 80af 	blt.w	80077da <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007682:	695b      	ldr	r3, [r3, #20]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800768a:	3304      	adds	r3, #4
 800768c:	4618      	mov	r0, r3
 800768e:	f7fd ff1f 	bl	80054d0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007692:	1d3b      	adds	r3, r7, #4
 8007694:	4618      	mov	r0, r3
 8007696:	f7ff ff87 	bl	80075a8 <prvSampleTimeNow>
 800769a:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	2b09      	cmp	r3, #9
 80076a0:	f200 8098 	bhi.w	80077d4 <prvProcessReceivedCommands+0x168>
 80076a4:	a201      	add	r2, pc, #4	@ (adr r2, 80076ac <prvProcessReceivedCommands+0x40>)
 80076a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076aa:	bf00      	nop
 80076ac:	080076d5 	.word	0x080076d5
 80076b0:	080076d5 	.word	0x080076d5
 80076b4:	080076d5 	.word	0x080076d5
 80076b8:	0800774b 	.word	0x0800774b
 80076bc:	0800775f 	.word	0x0800775f
 80076c0:	080077ab 	.word	0x080077ab
 80076c4:	080076d5 	.word	0x080076d5
 80076c8:	080076d5 	.word	0x080076d5
 80076cc:	0800774b 	.word	0x0800774b
 80076d0:	0800775f 	.word	0x0800775f
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076da:	f043 0301 	orr.w	r3, r3, #1
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076e6:	68fa      	ldr	r2, [r7, #12]
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	699b      	ldr	r3, [r3, #24]
 80076ec:	18d1      	adds	r1, r2, r3
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6a3a      	ldr	r2, [r7, #32]
 80076f2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80076f4:	f7ff ff78 	bl	80075e8 <prvInsertTimerInActiveList>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d06c      	beq.n	80077d8 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007704:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800770c:	f003 0304 	and.w	r3, r3, #4
 8007710:	2b00      	cmp	r3, #0
 8007712:	d061      	beq.n	80077d8 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	441a      	add	r2, r3
 800771c:	2300      	movs	r3, #0
 800771e:	9300      	str	r3, [sp, #0]
 8007720:	2300      	movs	r3, #0
 8007722:	2100      	movs	r1, #0
 8007724:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007726:	f7ff fe1d 	bl	8007364 <xTimerGenericCommand>
 800772a:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d152      	bne.n	80077d8 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8007732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007736:	f383 8811 	msr	BASEPRI, r3
 800773a:	f3bf 8f6f 	isb	sy
 800773e:	f3bf 8f4f 	dsb	sy
 8007742:	61bb      	str	r3, [r7, #24]
    }
 8007744:	bf00      	nop
 8007746:	bf00      	nop
 8007748:	e7fd      	b.n	8007746 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800774a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007750:	f023 0301 	bic.w	r3, r3, #1
 8007754:	b2da      	uxtb	r2, r3
 8007756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007758:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800775c:	e03d      	b.n	80077da <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800775e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007760:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007764:	f043 0301 	orr.w	r3, r3, #1
 8007768:	b2da      	uxtb	r2, r3
 800776a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007770:	68fa      	ldr	r2, [r7, #12]
 8007772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007774:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007778:	699b      	ldr	r3, [r3, #24]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d10b      	bne.n	8007796 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800777e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007782:	f383 8811 	msr	BASEPRI, r3
 8007786:	f3bf 8f6f 	isb	sy
 800778a:	f3bf 8f4f 	dsb	sy
 800778e:	617b      	str	r3, [r7, #20]
    }
 8007790:	bf00      	nop
 8007792:	bf00      	nop
 8007794:	e7fd      	b.n	8007792 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007798:	699a      	ldr	r2, [r3, #24]
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	18d1      	adds	r1, r2, r3
 800779e:	6a3b      	ldr	r3, [r7, #32]
 80077a0:	6a3a      	ldr	r2, [r7, #32]
 80077a2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077a4:	f7ff ff20 	bl	80075e8 <prvInsertTimerInActiveList>
                        break;
 80077a8:	e017      	b.n	80077da <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d103      	bne.n	80077c0 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80077b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077ba:	f000 fc1b 	bl	8007ff4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80077be:	e00c      	b.n	80077da <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077c6:	f023 0301 	bic.w	r3, r3, #1
 80077ca:	b2da      	uxtb	r2, r3
 80077cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80077d2:	e002      	b.n	80077da <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80077d4:	bf00      	nop
 80077d6:	e000      	b.n	80077da <prvProcessReceivedCommands+0x16e>
                        break;
 80077d8:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077da:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <prvProcessReceivedCommands+0x190>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f107 0108 	add.w	r1, r7, #8
 80077e2:	2200      	movs	r2, #0
 80077e4:	4618      	mov	r0, r3
 80077e6:	f7fe f93d 	bl	8005a64 <xQueueReceive>
 80077ea:	4603      	mov	r3, r0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f47f af41 	bne.w	8007674 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	3728      	adds	r7, #40	@ 0x28
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}
 80077fc:	200003a4 	.word	0x200003a4

08007800 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007800:	b580      	push	{r7, lr}
 8007802:	b088      	sub	sp, #32
 8007804:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007806:	e049      	b.n	800789c <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007808:	4b2e      	ldr	r3, [pc, #184]	@ (80078c4 <prvSwitchTimerLists+0xc4>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68db      	ldr	r3, [r3, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007812:	4b2c      	ldr	r3, [pc, #176]	@ (80078c4 <prvSwitchTimerLists+0xc4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	68db      	ldr	r3, [r3, #12]
 800781a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	3304      	adds	r3, #4
 8007820:	4618      	mov	r0, r3
 8007822:	f7fd fe55 	bl	80054d0 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d02f      	beq.n	800789c <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4413      	add	r3, r2
 8007844:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	429a      	cmp	r2, r3
 800784c:	d90e      	bls.n	800786c <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800785a:	4b1a      	ldr	r3, [pc, #104]	@ (80078c4 <prvSwitchTimerLists+0xc4>)
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	3304      	adds	r3, #4
 8007862:	4619      	mov	r1, r3
 8007864:	4610      	mov	r0, r2
 8007866:	f7fd fdfa 	bl	800545e <vListInsert>
 800786a:	e017      	b.n	800789c <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800786c:	2300      	movs	r3, #0
 800786e:	9300      	str	r3, [sp, #0]
 8007870:	2300      	movs	r3, #0
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	2100      	movs	r1, #0
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f7ff fd74 	bl	8007364 <xTimerGenericCommand>
 800787c:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10b      	bne.n	800789c <prvSwitchTimerLists+0x9c>
        __asm volatile
 8007884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007888:	f383 8811 	msr	BASEPRI, r3
 800788c:	f3bf 8f6f 	isb	sy
 8007890:	f3bf 8f4f 	dsb	sy
 8007894:	603b      	str	r3, [r7, #0]
    }
 8007896:	bf00      	nop
 8007898:	bf00      	nop
 800789a:	e7fd      	b.n	8007898 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800789c:	4b09      	ldr	r3, [pc, #36]	@ (80078c4 <prvSwitchTimerLists+0xc4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d1b0      	bne.n	8007808 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80078a6:	4b07      	ldr	r3, [pc, #28]	@ (80078c4 <prvSwitchTimerLists+0xc4>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80078ac:	4b06      	ldr	r3, [pc, #24]	@ (80078c8 <prvSwitchTimerLists+0xc8>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a04      	ldr	r2, [pc, #16]	@ (80078c4 <prvSwitchTimerLists+0xc4>)
 80078b2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80078b4:	4a04      	ldr	r2, [pc, #16]	@ (80078c8 <prvSwitchTimerLists+0xc8>)
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	6013      	str	r3, [r2, #0]
    }
 80078ba:	bf00      	nop
 80078bc:	3718      	adds	r7, #24
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	2000039c 	.word	0x2000039c
 80078c8:	200003a0 	.word	0x200003a0

080078cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80078cc:	b580      	push	{r7, lr}
 80078ce:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80078d0:	f000 f984 	bl	8007bdc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80078d4:	4b12      	ldr	r3, [pc, #72]	@ (8007920 <prvCheckForValidListAndQueue+0x54>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d11d      	bne.n	8007918 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80078dc:	4811      	ldr	r0, [pc, #68]	@ (8007924 <prvCheckForValidListAndQueue+0x58>)
 80078de:	f7fd fd6d 	bl	80053bc <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80078e2:	4811      	ldr	r0, [pc, #68]	@ (8007928 <prvCheckForValidListAndQueue+0x5c>)
 80078e4:	f7fd fd6a 	bl	80053bc <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80078e8:	4b10      	ldr	r3, [pc, #64]	@ (800792c <prvCheckForValidListAndQueue+0x60>)
 80078ea:	4a0e      	ldr	r2, [pc, #56]	@ (8007924 <prvCheckForValidListAndQueue+0x58>)
 80078ec:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80078ee:	4b10      	ldr	r3, [pc, #64]	@ (8007930 <prvCheckForValidListAndQueue+0x64>)
 80078f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007928 <prvCheckForValidListAndQueue+0x5c>)
 80078f2:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80078f4:	2200      	movs	r2, #0
 80078f6:	210c      	movs	r1, #12
 80078f8:	200a      	movs	r0, #10
 80078fa:	f7fd fe7d 	bl	80055f8 <xQueueGenericCreate>
 80078fe:	4603      	mov	r3, r0
 8007900:	4a07      	ldr	r2, [pc, #28]	@ (8007920 <prvCheckForValidListAndQueue+0x54>)
 8007902:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007904:	4b06      	ldr	r3, [pc, #24]	@ (8007920 <prvCheckForValidListAndQueue+0x54>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800790c:	4b04      	ldr	r3, [pc, #16]	@ (8007920 <prvCheckForValidListAndQueue+0x54>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4908      	ldr	r1, [pc, #32]	@ (8007934 <prvCheckForValidListAndQueue+0x68>)
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fb70 	bl	8005ff8 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007918:	f000 f992 	bl	8007c40 <vPortExitCritical>
    }
 800791c:	bf00      	nop
 800791e:	bd80      	pop	{r7, pc}
 8007920:	200003a4 	.word	0x200003a4
 8007924:	20000374 	.word	0x20000374
 8007928:	20000388 	.word	0x20000388
 800792c:	2000039c 	.word	0x2000039c
 8007930:	200003a0 	.word	0x200003a0
 8007934:	0800919c 	.word	0x0800919c

08007938 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <pvTimerGetTimerID+0x2a>
        __asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	60fb      	str	r3, [r7, #12]
    }
 800795c:	bf00      	nop
 800795e:	bf00      	nop
 8007960:	e7fd      	b.n	800795e <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007962:	f000 f93b 	bl	8007bdc <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007966:	697b      	ldr	r3, [r7, #20]
 8007968:	69db      	ldr	r3, [r3, #28]
 800796a:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 800796c:	f000 f968 	bl	8007c40 <vPortExitCritical>

        return pvReturn;
 8007970:	693b      	ldr	r3, [r7, #16]
    }
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
	...

0800797c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3b04      	subs	r3, #4
 800798c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007994:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	3b04      	subs	r3, #4
 800799a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f023 0201 	bic.w	r2, r3, #1
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3b04      	subs	r3, #4
 80079aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80079ac:	4a0c      	ldr	r2, [pc, #48]	@ (80079e0 <pxPortInitialiseStack+0x64>)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	3b14      	subs	r3, #20
 80079b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	3b04      	subs	r3, #4
 80079c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f06f 0202 	mvn.w	r2, #2
 80079ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3b20      	subs	r3, #32
 80079d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80079d2:	68fb      	ldr	r3, [r7, #12]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3714      	adds	r7, #20
 80079d8:	46bd      	mov	sp, r7
 80079da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079de:	4770      	bx	lr
 80079e0:	080079e5 	.word	0x080079e5

080079e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b085      	sub	sp, #20
 80079e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80079ea:	2300      	movs	r3, #0
 80079ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80079ee:	4b13      	ldr	r3, [pc, #76]	@ (8007a3c <prvTaskExitError+0x58>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079f6:	d00b      	beq.n	8007a10 <prvTaskExitError+0x2c>
        __asm volatile
 80079f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079fc:	f383 8811 	msr	BASEPRI, r3
 8007a00:	f3bf 8f6f 	isb	sy
 8007a04:	f3bf 8f4f 	dsb	sy
 8007a08:	60fb      	str	r3, [r7, #12]
    }
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	e7fd      	b.n	8007a0c <prvTaskExitError+0x28>
        __asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	60bb      	str	r3, [r7, #8]
    }
 8007a22:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007a24:	bf00      	nop
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d0fc      	beq.n	8007a26 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007a2c:	bf00      	nop
 8007a2e:	bf00      	nop
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	20000068 	.word	0x20000068

08007a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007a40:	4b07      	ldr	r3, [pc, #28]	@ (8007a60 <pxCurrentTCBConst2>)
 8007a42:	6819      	ldr	r1, [r3, #0]
 8007a44:	6808      	ldr	r0, [r1, #0]
 8007a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a4a:	f380 8809 	msr	PSP, r0
 8007a4e:	f3bf 8f6f 	isb	sy
 8007a52:	f04f 0000 	mov.w	r0, #0
 8007a56:	f380 8811 	msr	BASEPRI, r0
 8007a5a:	4770      	bx	lr
 8007a5c:	f3af 8000 	nop.w

08007a60 <pxCurrentTCBConst2>:
 8007a60:	20000270 	.word	0x20000270
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007a64:	bf00      	nop
 8007a66:	bf00      	nop

08007a68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007a68:	4808      	ldr	r0, [pc, #32]	@ (8007a8c <prvPortStartFirstTask+0x24>)
 8007a6a:	6800      	ldr	r0, [r0, #0]
 8007a6c:	6800      	ldr	r0, [r0, #0]
 8007a6e:	f380 8808 	msr	MSP, r0
 8007a72:	f04f 0000 	mov.w	r0, #0
 8007a76:	f380 8814 	msr	CONTROL, r0
 8007a7a:	b662      	cpsie	i
 8007a7c:	b661      	cpsie	f
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	f3bf 8f6f 	isb	sy
 8007a86:	df00      	svc	0
 8007a88:	bf00      	nop
 8007a8a:	0000      	.short	0x0000
 8007a8c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007a90:	bf00      	nop
 8007a92:	bf00      	nop

08007a94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b086      	sub	sp, #24
 8007a98:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a9a:	4b47      	ldr	r3, [pc, #284]	@ (8007bb8 <xPortStartScheduler+0x124>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a47      	ldr	r2, [pc, #284]	@ (8007bbc <xPortStartScheduler+0x128>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d10b      	bne.n	8007abc <xPortStartScheduler+0x28>
        __asm volatile
 8007aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa8:	f383 8811 	msr	BASEPRI, r3
 8007aac:	f3bf 8f6f 	isb	sy
 8007ab0:	f3bf 8f4f 	dsb	sy
 8007ab4:	613b      	str	r3, [r7, #16]
    }
 8007ab6:	bf00      	nop
 8007ab8:	bf00      	nop
 8007aba:	e7fd      	b.n	8007ab8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007abc:	4b3e      	ldr	r3, [pc, #248]	@ (8007bb8 <xPortStartScheduler+0x124>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a3f      	ldr	r2, [pc, #252]	@ (8007bc0 <xPortStartScheduler+0x12c>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d10b      	bne.n	8007ade <xPortStartScheduler+0x4a>
        __asm volatile
 8007ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aca:	f383 8811 	msr	BASEPRI, r3
 8007ace:	f3bf 8f6f 	isb	sy
 8007ad2:	f3bf 8f4f 	dsb	sy
 8007ad6:	60fb      	str	r3, [r7, #12]
    }
 8007ad8:	bf00      	nop
 8007ada:	bf00      	nop
 8007adc:	e7fd      	b.n	8007ada <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ade:	4b39      	ldr	r3, [pc, #228]	@ (8007bc4 <xPortStartScheduler+0x130>)
 8007ae0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	22ff      	movs	r2, #255	@ 0xff
 8007aee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007af8:	78fb      	ldrb	r3, [r7, #3]
 8007afa:	b2db      	uxtb	r3, r3
 8007afc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	4b31      	ldr	r3, [pc, #196]	@ (8007bc8 <xPortStartScheduler+0x134>)
 8007b04:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007b06:	4b31      	ldr	r3, [pc, #196]	@ (8007bcc <xPortStartScheduler+0x138>)
 8007b08:	2207      	movs	r2, #7
 8007b0a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b0c:	e009      	b.n	8007b22 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8007b0e:	4b2f      	ldr	r3, [pc, #188]	@ (8007bcc <xPortStartScheduler+0x138>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	4a2d      	ldr	r2, [pc, #180]	@ (8007bcc <xPortStartScheduler+0x138>)
 8007b16:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007b18:	78fb      	ldrb	r3, [r7, #3]
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	005b      	lsls	r3, r3, #1
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007b22:	78fb      	ldrb	r3, [r7, #3]
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b2a:	2b80      	cmp	r3, #128	@ 0x80
 8007b2c:	d0ef      	beq.n	8007b0e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b2e:	4b27      	ldr	r3, [pc, #156]	@ (8007bcc <xPortStartScheduler+0x138>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f1c3 0307 	rsb	r3, r3, #7
 8007b36:	2b04      	cmp	r3, #4
 8007b38:	d00b      	beq.n	8007b52 <xPortStartScheduler+0xbe>
        __asm volatile
 8007b3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3e:	f383 8811 	msr	BASEPRI, r3
 8007b42:	f3bf 8f6f 	isb	sy
 8007b46:	f3bf 8f4f 	dsb	sy
 8007b4a:	60bb      	str	r3, [r7, #8]
    }
 8007b4c:	bf00      	nop
 8007b4e:	bf00      	nop
 8007b50:	e7fd      	b.n	8007b4e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b52:	4b1e      	ldr	r3, [pc, #120]	@ (8007bcc <xPortStartScheduler+0x138>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	4a1c      	ldr	r2, [pc, #112]	@ (8007bcc <xPortStartScheduler+0x138>)
 8007b5a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8007bcc <xPortStartScheduler+0x138>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b64:	4a19      	ldr	r2, [pc, #100]	@ (8007bcc <xPortStartScheduler+0x138>)
 8007b66:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	b2da      	uxtb	r2, r3
 8007b6c:	697b      	ldr	r3, [r7, #20]
 8007b6e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007b70:	4b17      	ldr	r3, [pc, #92]	@ (8007bd0 <xPortStartScheduler+0x13c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a16      	ldr	r2, [pc, #88]	@ (8007bd0 <xPortStartScheduler+0x13c>)
 8007b76:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b7a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007b7c:	4b14      	ldr	r3, [pc, #80]	@ (8007bd0 <xPortStartScheduler+0x13c>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a13      	ldr	r2, [pc, #76]	@ (8007bd0 <xPortStartScheduler+0x13c>)
 8007b82:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b86:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007b88:	f000 f8e0 	bl	8007d4c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007b8c:	4b11      	ldr	r3, [pc, #68]	@ (8007bd4 <xPortStartScheduler+0x140>)
 8007b8e:	2200      	movs	r2, #0
 8007b90:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007b92:	f000 f8ff 	bl	8007d94 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b96:	4b10      	ldr	r3, [pc, #64]	@ (8007bd8 <xPortStartScheduler+0x144>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a0f      	ldr	r2, [pc, #60]	@ (8007bd8 <xPortStartScheduler+0x144>)
 8007b9c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007ba0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007ba2:	f7ff ff61 	bl	8007a68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007ba6:	f7fe fd93 	bl	80066d0 <vTaskSwitchContext>
    prvTaskExitError();
 8007baa:	f7ff ff1b 	bl	80079e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007bae:	2300      	movs	r3, #0
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3718      	adds	r7, #24
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	e000ed00 	.word	0xe000ed00
 8007bbc:	410fc271 	.word	0x410fc271
 8007bc0:	410fc270 	.word	0x410fc270
 8007bc4:	e000e400 	.word	0xe000e400
 8007bc8:	200003b0 	.word	0x200003b0
 8007bcc:	200003b4 	.word	0x200003b4
 8007bd0:	e000ed20 	.word	0xe000ed20
 8007bd4:	20000068 	.word	0x20000068
 8007bd8:	e000ef34 	.word	0xe000ef34

08007bdc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
        __asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be6:	f383 8811 	msr	BASEPRI, r3
 8007bea:	f3bf 8f6f 	isb	sy
 8007bee:	f3bf 8f4f 	dsb	sy
 8007bf2:	607b      	str	r3, [r7, #4]
    }
 8007bf4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007bf6:	4b10      	ldr	r3, [pc, #64]	@ (8007c38 <vPortEnterCritical+0x5c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3301      	adds	r3, #1
 8007bfc:	4a0e      	ldr	r2, [pc, #56]	@ (8007c38 <vPortEnterCritical+0x5c>)
 8007bfe:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007c00:	4b0d      	ldr	r3, [pc, #52]	@ (8007c38 <vPortEnterCritical+0x5c>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d110      	bne.n	8007c2a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007c08:	4b0c      	ldr	r3, [pc, #48]	@ (8007c3c <vPortEnterCritical+0x60>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	b2db      	uxtb	r3, r3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <vPortEnterCritical+0x4e>
        __asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	603b      	str	r3, [r7, #0]
    }
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop
 8007c28:	e7fd      	b.n	8007c26 <vPortEnterCritical+0x4a>
    }
}
 8007c2a:	bf00      	nop
 8007c2c:	370c      	adds	r7, #12
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c34:	4770      	bx	lr
 8007c36:	bf00      	nop
 8007c38:	20000068 	.word	0x20000068
 8007c3c:	e000ed04 	.word	0xe000ed04

08007c40 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007c46:	4b12      	ldr	r3, [pc, #72]	@ (8007c90 <vPortExitCritical+0x50>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10b      	bne.n	8007c66 <vPortExitCritical+0x26>
        __asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
    }
 8007c60:	bf00      	nop
 8007c62:	bf00      	nop
 8007c64:	e7fd      	b.n	8007c62 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007c66:	4b0a      	ldr	r3, [pc, #40]	@ (8007c90 <vPortExitCritical+0x50>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4a08      	ldr	r2, [pc, #32]	@ (8007c90 <vPortExitCritical+0x50>)
 8007c6e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007c70:	4b07      	ldr	r3, [pc, #28]	@ (8007c90 <vPortExitCritical+0x50>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d105      	bne.n	8007c84 <vPortExitCritical+0x44>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	f383 8811 	msr	BASEPRI, r3
    }
 8007c82:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007c84:	bf00      	nop
 8007c86:	370c      	adds	r7, #12
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8e:	4770      	bx	lr
 8007c90:	20000068 	.word	0x20000068
	...

08007ca0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007ca0:	f3ef 8009 	mrs	r0, PSP
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	4b15      	ldr	r3, [pc, #84]	@ (8007d00 <pxCurrentTCBConst>)
 8007caa:	681a      	ldr	r2, [r3, #0]
 8007cac:	f01e 0f10 	tst.w	lr, #16
 8007cb0:	bf08      	it	eq
 8007cb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007cb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cba:	6010      	str	r0, [r2, #0]
 8007cbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007cc0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007cc4:	f380 8811 	msr	BASEPRI, r0
 8007cc8:	f3bf 8f4f 	dsb	sy
 8007ccc:	f3bf 8f6f 	isb	sy
 8007cd0:	f7fe fcfe 	bl	80066d0 <vTaskSwitchContext>
 8007cd4:	f04f 0000 	mov.w	r0, #0
 8007cd8:	f380 8811 	msr	BASEPRI, r0
 8007cdc:	bc09      	pop	{r0, r3}
 8007cde:	6819      	ldr	r1, [r3, #0]
 8007ce0:	6808      	ldr	r0, [r1, #0]
 8007ce2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ce6:	f01e 0f10 	tst.w	lr, #16
 8007cea:	bf08      	it	eq
 8007cec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cf0:	f380 8809 	msr	PSP, r0
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	f3af 8000 	nop.w

08007d00 <pxCurrentTCBConst>:
 8007d00:	20000270 	.word	0x20000270
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007d04:	bf00      	nop
 8007d06:	bf00      	nop

08007d08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b082      	sub	sp, #8
 8007d0c:	af00      	add	r7, sp, #0
        __asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	607b      	str	r3, [r7, #4]
    }
 8007d20:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007d22:	f7fe fc1b 	bl	800655c <xTaskIncrementTick>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007d2c:	4b06      	ldr	r3, [pc, #24]	@ (8007d48 <SysTick_Handler+0x40>)
 8007d2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d32:	601a      	str	r2, [r3, #0]
 8007d34:	2300      	movs	r3, #0
 8007d36:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	f383 8811 	msr	BASEPRI, r3
    }
 8007d3e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007d40:	bf00      	nop
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}
 8007d48:	e000ed04 	.word	0xe000ed04

08007d4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d50:	4b0b      	ldr	r3, [pc, #44]	@ (8007d80 <vPortSetupTimerInterrupt+0x34>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d56:	4b0b      	ldr	r3, [pc, #44]	@ (8007d84 <vPortSetupTimerInterrupt+0x38>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d88 <vPortSetupTimerInterrupt+0x3c>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a0a      	ldr	r2, [pc, #40]	@ (8007d8c <vPortSetupTimerInterrupt+0x40>)
 8007d62:	fba2 2303 	umull	r2, r3, r2, r3
 8007d66:	099b      	lsrs	r3, r3, #6
 8007d68:	4a09      	ldr	r2, [pc, #36]	@ (8007d90 <vPortSetupTimerInterrupt+0x44>)
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d6e:	4b04      	ldr	r3, [pc, #16]	@ (8007d80 <vPortSetupTimerInterrupt+0x34>)
 8007d70:	2207      	movs	r2, #7
 8007d72:	601a      	str	r2, [r3, #0]
}
 8007d74:	bf00      	nop
 8007d76:	46bd      	mov	sp, r7
 8007d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7c:	4770      	bx	lr
 8007d7e:	bf00      	nop
 8007d80:	e000e010 	.word	0xe000e010
 8007d84:	e000e018 	.word	0xe000e018
 8007d88:	20000058 	.word	0x20000058
 8007d8c:	10624dd3 	.word	0x10624dd3
 8007d90:	e000e014 	.word	0xe000e014

08007d94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007d94:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007da4 <vPortEnableVFP+0x10>
 8007d98:	6801      	ldr	r1, [r0, #0]
 8007d9a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d9e:	6001      	str	r1, [r0, #0]
 8007da0:	4770      	bx	lr
 8007da2:	0000      	.short	0x0000
 8007da4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007da8:	bf00      	nop
 8007daa:	bf00      	nop

08007dac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007dac:	b480      	push	{r7}
 8007dae:	b085      	sub	sp, #20
 8007db0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007db2:	f3ef 8305 	mrs	r3, IPSR
 8007db6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b0f      	cmp	r3, #15
 8007dbc:	d915      	bls.n	8007dea <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007dbe:	4a18      	ldr	r2, [pc, #96]	@ (8007e20 <vPortValidateInterruptPriority+0x74>)
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	4413      	add	r3, r2
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007dc8:	4b16      	ldr	r3, [pc, #88]	@ (8007e24 <vPortValidateInterruptPriority+0x78>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	7afa      	ldrb	r2, [r7, #11]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d20b      	bcs.n	8007dea <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	607b      	str	r3, [r7, #4]
    }
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007dea:	4b0f      	ldr	r3, [pc, #60]	@ (8007e28 <vPortValidateInterruptPriority+0x7c>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007df2:	4b0e      	ldr	r3, [pc, #56]	@ (8007e2c <vPortValidateInterruptPriority+0x80>)
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d90b      	bls.n	8007e12 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8007dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dfe:	f383 8811 	msr	BASEPRI, r3
 8007e02:	f3bf 8f6f 	isb	sy
 8007e06:	f3bf 8f4f 	dsb	sy
 8007e0a:	603b      	str	r3, [r7, #0]
    }
 8007e0c:	bf00      	nop
 8007e0e:	bf00      	nop
 8007e10:	e7fd      	b.n	8007e0e <vPortValidateInterruptPriority+0x62>
    }
 8007e12:	bf00      	nop
 8007e14:	3714      	adds	r7, #20
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	e000e3f0 	.word	0xe000e3f0
 8007e24:	200003b0 	.word	0x200003b0
 8007e28:	e000ed0c 	.word	0xe000ed0c
 8007e2c:	200003b4 	.word	0x200003b4

08007e30 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b08a      	sub	sp, #40	@ 0x28
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007e3c:	f7fe fad2 	bl	80063e4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007e40:	4b66      	ldr	r3, [pc, #408]	@ (8007fdc <pvPortMalloc+0x1ac>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d101      	bne.n	8007e4c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007e48:	f000 f938 	bl	80080bc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e4c:	4b64      	ldr	r3, [pc, #400]	@ (8007fe0 <pvPortMalloc+0x1b0>)
 8007e4e:	681a      	ldr	r2, [r3, #0]
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4013      	ands	r3, r2
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f040 80a9 	bne.w	8007fac <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d02e      	beq.n	8007ebe <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007e60:	2208      	movs	r2, #8
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007e66:	687a      	ldr	r2, [r7, #4]
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d228      	bcs.n	8007ebe <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8007e6c:	2208      	movs	r2, #8
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4413      	add	r3, r2
 8007e72:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d022      	beq.n	8007ec4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f023 0307 	bic.w	r3, r3, #7
 8007e84:	3308      	adds	r3, #8
 8007e86:	687a      	ldr	r2, [r7, #4]
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d215      	bcs.n	8007eb8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f023 0307 	bic.w	r3, r3, #7
 8007e92:	3308      	adds	r3, #8
 8007e94:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d011      	beq.n	8007ec4 <pvPortMalloc+0x94>
        __asm volatile
 8007ea0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea4:	f383 8811 	msr	BASEPRI, r3
 8007ea8:	f3bf 8f6f 	isb	sy
 8007eac:	f3bf 8f4f 	dsb	sy
 8007eb0:	617b      	str	r3, [r7, #20]
    }
 8007eb2:	bf00      	nop
 8007eb4:	bf00      	nop
 8007eb6:	e7fd      	b.n	8007eb4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ebc:	e002      	b.n	8007ec4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	607b      	str	r3, [r7, #4]
 8007ec2:	e000      	b.n	8007ec6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ec4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d06f      	beq.n	8007fac <pvPortMalloc+0x17c>
 8007ecc:	4b45      	ldr	r3, [pc, #276]	@ (8007fe4 <pvPortMalloc+0x1b4>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d86a      	bhi.n	8007fac <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007ed6:	4b44      	ldr	r3, [pc, #272]	@ (8007fe8 <pvPortMalloc+0x1b8>)
 8007ed8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007eda:	4b43      	ldr	r3, [pc, #268]	@ (8007fe8 <pvPortMalloc+0x1b8>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ee0:	e004      	b.n	8007eec <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d903      	bls.n	8007efe <pvPortMalloc+0xce>
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1f1      	bne.n	8007ee2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007efe:	4b37      	ldr	r3, [pc, #220]	@ (8007fdc <pvPortMalloc+0x1ac>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d051      	beq.n	8007fac <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f08:	6a3b      	ldr	r3, [r7, #32]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2208      	movs	r2, #8
 8007f0e:	4413      	add	r3, r2
 8007f10:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	685a      	ldr	r2, [r3, #4]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	1ad2      	subs	r2, r2, r3
 8007f22:	2308      	movs	r3, #8
 8007f24:	005b      	lsls	r3, r3, #1
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d920      	bls.n	8007f6c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007f2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	4413      	add	r3, r2
 8007f30:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f32:	69bb      	ldr	r3, [r7, #24]
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00b      	beq.n	8007f54 <pvPortMalloc+0x124>
        __asm volatile
 8007f3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f40:	f383 8811 	msr	BASEPRI, r3
 8007f44:	f3bf 8f6f 	isb	sy
 8007f48:	f3bf 8f4f 	dsb	sy
 8007f4c:	613b      	str	r3, [r7, #16]
    }
 8007f4e:	bf00      	nop
 8007f50:	bf00      	nop
 8007f52:	e7fd      	b.n	8007f50 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	1ad2      	subs	r2, r2, r3
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f66:	69b8      	ldr	r0, [r7, #24]
 8007f68:	f000 f90a 	bl	8008180 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f6c:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe4 <pvPortMalloc+0x1b4>)
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	1ad3      	subs	r3, r2, r3
 8007f76:	4a1b      	ldr	r2, [pc, #108]	@ (8007fe4 <pvPortMalloc+0x1b4>)
 8007f78:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8007fe4 <pvPortMalloc+0x1b4>)
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8007fec <pvPortMalloc+0x1bc>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	429a      	cmp	r2, r3
 8007f84:	d203      	bcs.n	8007f8e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f86:	4b17      	ldr	r3, [pc, #92]	@ (8007fe4 <pvPortMalloc+0x1b4>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a18      	ldr	r2, [pc, #96]	@ (8007fec <pvPortMalloc+0x1bc>)
 8007f8c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	4b13      	ldr	r3, [pc, #76]	@ (8007fe0 <pvPortMalloc+0x1b0>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	431a      	orrs	r2, r3
 8007f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007fa2:	4b13      	ldr	r3, [pc, #76]	@ (8007ff0 <pvPortMalloc+0x1c0>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	4a11      	ldr	r2, [pc, #68]	@ (8007ff0 <pvPortMalloc+0x1c0>)
 8007faa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007fac:	f7fe fa28 	bl	8006400 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d00b      	beq.n	8007fd2 <pvPortMalloc+0x1a2>
        __asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	60fb      	str	r3, [r7, #12]
    }
 8007fcc:	bf00      	nop
 8007fce:	bf00      	nop
 8007fd0:	e7fd      	b.n	8007fce <pvPortMalloc+0x19e>
    return pvReturn;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3728      	adds	r7, #40	@ 0x28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	200193c0 	.word	0x200193c0
 8007fe0:	200193d4 	.word	0x200193d4
 8007fe4:	200193c4 	.word	0x200193c4
 8007fe8:	200193b8 	.word	0x200193b8
 8007fec:	200193c8 	.word	0x200193c8
 8007ff0:	200193cc 	.word	0x200193cc

08007ff4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d04f      	beq.n	80080a6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008006:	2308      	movs	r3, #8
 8008008:	425b      	negs	r3, r3
 800800a:	697a      	ldr	r2, [r7, #20]
 800800c:	4413      	add	r3, r2
 800800e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	4b25      	ldr	r3, [pc, #148]	@ (80080b0 <vPortFree+0xbc>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4013      	ands	r3, r2
 800801e:	2b00      	cmp	r3, #0
 8008020:	d10b      	bne.n	800803a <vPortFree+0x46>
        __asm volatile
 8008022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008026:	f383 8811 	msr	BASEPRI, r3
 800802a:	f3bf 8f6f 	isb	sy
 800802e:	f3bf 8f4f 	dsb	sy
 8008032:	60fb      	str	r3, [r7, #12]
    }
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	e7fd      	b.n	8008036 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00b      	beq.n	800805a <vPortFree+0x66>
        __asm volatile
 8008042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008046:	f383 8811 	msr	BASEPRI, r3
 800804a:	f3bf 8f6f 	isb	sy
 800804e:	f3bf 8f4f 	dsb	sy
 8008052:	60bb      	str	r3, [r7, #8]
    }
 8008054:	bf00      	nop
 8008056:	bf00      	nop
 8008058:	e7fd      	b.n	8008056 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	685a      	ldr	r2, [r3, #4]
 800805e:	4b14      	ldr	r3, [pc, #80]	@ (80080b0 <vPortFree+0xbc>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4013      	ands	r3, r2
 8008064:	2b00      	cmp	r3, #0
 8008066:	d01e      	beq.n	80080a6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d11a      	bne.n	80080a6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	685a      	ldr	r2, [r3, #4]
 8008074:	4b0e      	ldr	r3, [pc, #56]	@ (80080b0 <vPortFree+0xbc>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	43db      	mvns	r3, r3
 800807a:	401a      	ands	r2, r3
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008080:	f7fe f9b0 	bl	80063e4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	685a      	ldr	r2, [r3, #4]
 8008088:	4b0a      	ldr	r3, [pc, #40]	@ (80080b4 <vPortFree+0xc0>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4413      	add	r3, r2
 800808e:	4a09      	ldr	r2, [pc, #36]	@ (80080b4 <vPortFree+0xc0>)
 8008090:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008092:	6938      	ldr	r0, [r7, #16]
 8008094:	f000 f874 	bl	8008180 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8008098:	4b07      	ldr	r3, [pc, #28]	@ (80080b8 <vPortFree+0xc4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	3301      	adds	r3, #1
 800809e:	4a06      	ldr	r2, [pc, #24]	@ (80080b8 <vPortFree+0xc4>)
 80080a0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80080a2:	f7fe f9ad 	bl	8006400 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80080a6:	bf00      	nop
 80080a8:	3718      	adds	r7, #24
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	200193d4 	.word	0x200193d4
 80080b4:	200193c4 	.word	0x200193c4
 80080b8:	200193d0 	.word	0x200193d0

080080bc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80080c2:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80080c6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80080c8:	4b27      	ldr	r3, [pc, #156]	@ (8008168 <prvHeapInit+0xac>)
 80080ca:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f003 0307 	and.w	r3, r3, #7
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00c      	beq.n	80080f0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	3307      	adds	r3, #7
 80080da:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f023 0307 	bic.w	r3, r3, #7
 80080e2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	1ad3      	subs	r3, r2, r3
 80080ea:	4a1f      	ldr	r2, [pc, #124]	@ (8008168 <prvHeapInit+0xac>)
 80080ec:	4413      	add	r3, r2
 80080ee:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80080f4:	4a1d      	ldr	r2, [pc, #116]	@ (800816c <prvHeapInit+0xb0>)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80080fa:	4b1c      	ldr	r3, [pc, #112]	@ (800816c <prvHeapInit+0xb0>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68ba      	ldr	r2, [r7, #8]
 8008104:	4413      	add	r3, r2
 8008106:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008108:	2208      	movs	r2, #8
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	1a9b      	subs	r3, r3, r2
 800810e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f023 0307 	bic.w	r3, r3, #7
 8008116:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	4a15      	ldr	r2, [pc, #84]	@ (8008170 <prvHeapInit+0xb4>)
 800811c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800811e:	4b14      	ldr	r3, [pc, #80]	@ (8008170 <prvHeapInit+0xb4>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2200      	movs	r2, #0
 8008124:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008126:	4b12      	ldr	r3, [pc, #72]	@ (8008170 <prvHeapInit+0xb4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	68fa      	ldr	r2, [r7, #12]
 8008136:	1ad2      	subs	r2, r2, r3
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800813c:	4b0c      	ldr	r3, [pc, #48]	@ (8008170 <prvHeapInit+0xb4>)
 800813e:	681a      	ldr	r2, [r3, #0]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	685b      	ldr	r3, [r3, #4]
 8008148:	4a0a      	ldr	r2, [pc, #40]	@ (8008174 <prvHeapInit+0xb8>)
 800814a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	4a09      	ldr	r2, [pc, #36]	@ (8008178 <prvHeapInit+0xbc>)
 8008152:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008154:	4b09      	ldr	r3, [pc, #36]	@ (800817c <prvHeapInit+0xc0>)
 8008156:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800815a:	601a      	str	r2, [r3, #0]
}
 800815c:	bf00      	nop
 800815e:	3714      	adds	r7, #20
 8008160:	46bd      	mov	sp, r7
 8008162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008166:	4770      	bx	lr
 8008168:	200003b8 	.word	0x200003b8
 800816c:	200193b8 	.word	0x200193b8
 8008170:	200193c0 	.word	0x200193c0
 8008174:	200193c8 	.word	0x200193c8
 8008178:	200193c4 	.word	0x200193c4
 800817c:	200193d4 	.word	0x200193d4

08008180 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008188:	4b28      	ldr	r3, [pc, #160]	@ (800822c <prvInsertBlockIntoFreeList+0xac>)
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	e002      	b.n	8008194 <prvInsertBlockIntoFreeList+0x14>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	60fb      	str	r3, [r7, #12]
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	687a      	ldr	r2, [r7, #4]
 800819a:	429a      	cmp	r2, r3
 800819c:	d8f7      	bhi.n	800818e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	68ba      	ldr	r2, [r7, #8]
 80081a8:	4413      	add	r3, r2
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d108      	bne.n	80081c2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	685a      	ldr	r2, [r3, #4]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	441a      	add	r2, r3
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	68ba      	ldr	r2, [r7, #8]
 80081cc:	441a      	add	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d118      	bne.n	8008208 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681a      	ldr	r2, [r3, #0]
 80081da:	4b15      	ldr	r3, [pc, #84]	@ (8008230 <prvInsertBlockIntoFreeList+0xb0>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d00d      	beq.n	80081fe <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685a      	ldr	r2, [r3, #4]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	685b      	ldr	r3, [r3, #4]
 80081ec:	441a      	add	r2, r3
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	601a      	str	r2, [r3, #0]
 80081fc:	e008      	b.n	8008210 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80081fe:	4b0c      	ldr	r3, [pc, #48]	@ (8008230 <prvInsertBlockIntoFreeList+0xb0>)
 8008200:	681a      	ldr	r2, [r3, #0]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	601a      	str	r2, [r3, #0]
 8008206:	e003      	b.n	8008210 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008210:	68fa      	ldr	r2, [r7, #12]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	429a      	cmp	r2, r3
 8008216:	d002      	beq.n	800821e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800821e:	bf00      	nop
 8008220:	3714      	adds	r7, #20
 8008222:	46bd      	mov	sp, r7
 8008224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	200193b8 	.word	0x200193b8
 8008230:	200193c0 	.word	0x200193c0

08008234 <siprintf>:
 8008234:	b40e      	push	{r1, r2, r3}
 8008236:	b500      	push	{lr}
 8008238:	b09c      	sub	sp, #112	@ 0x70
 800823a:	ab1d      	add	r3, sp, #116	@ 0x74
 800823c:	9002      	str	r0, [sp, #8]
 800823e:	9006      	str	r0, [sp, #24]
 8008240:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008244:	4809      	ldr	r0, [pc, #36]	@ (800826c <siprintf+0x38>)
 8008246:	9107      	str	r1, [sp, #28]
 8008248:	9104      	str	r1, [sp, #16]
 800824a:	4909      	ldr	r1, [pc, #36]	@ (8008270 <siprintf+0x3c>)
 800824c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008250:	9105      	str	r1, [sp, #20]
 8008252:	6800      	ldr	r0, [r0, #0]
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	a902      	add	r1, sp, #8
 8008258:	f000 f9a2 	bl	80085a0 <_svfiprintf_r>
 800825c:	9b02      	ldr	r3, [sp, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	b01c      	add	sp, #112	@ 0x70
 8008264:	f85d eb04 	ldr.w	lr, [sp], #4
 8008268:	b003      	add	sp, #12
 800826a:	4770      	bx	lr
 800826c:	2000006c 	.word	0x2000006c
 8008270:	ffff0208 	.word	0xffff0208

08008274 <memset>:
 8008274:	4402      	add	r2, r0
 8008276:	4603      	mov	r3, r0
 8008278:	4293      	cmp	r3, r2
 800827a:	d100      	bne.n	800827e <memset+0xa>
 800827c:	4770      	bx	lr
 800827e:	f803 1b01 	strb.w	r1, [r3], #1
 8008282:	e7f9      	b.n	8008278 <memset+0x4>

08008284 <__errno>:
 8008284:	4b01      	ldr	r3, [pc, #4]	@ (800828c <__errno+0x8>)
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	4770      	bx	lr
 800828a:	bf00      	nop
 800828c:	2000006c 	.word	0x2000006c

08008290 <__libc_init_array>:
 8008290:	b570      	push	{r4, r5, r6, lr}
 8008292:	4d0d      	ldr	r5, [pc, #52]	@ (80082c8 <__libc_init_array+0x38>)
 8008294:	4c0d      	ldr	r4, [pc, #52]	@ (80082cc <__libc_init_array+0x3c>)
 8008296:	1b64      	subs	r4, r4, r5
 8008298:	10a4      	asrs	r4, r4, #2
 800829a:	2600      	movs	r6, #0
 800829c:	42a6      	cmp	r6, r4
 800829e:	d109      	bne.n	80082b4 <__libc_init_array+0x24>
 80082a0:	4d0b      	ldr	r5, [pc, #44]	@ (80082d0 <__libc_init_array+0x40>)
 80082a2:	4c0c      	ldr	r4, [pc, #48]	@ (80082d4 <__libc_init_array+0x44>)
 80082a4:	f000 fc66 	bl	8008b74 <_init>
 80082a8:	1b64      	subs	r4, r4, r5
 80082aa:	10a4      	asrs	r4, r4, #2
 80082ac:	2600      	movs	r6, #0
 80082ae:	42a6      	cmp	r6, r4
 80082b0:	d105      	bne.n	80082be <__libc_init_array+0x2e>
 80082b2:	bd70      	pop	{r4, r5, r6, pc}
 80082b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b8:	4798      	blx	r3
 80082ba:	3601      	adds	r6, #1
 80082bc:	e7ee      	b.n	800829c <__libc_init_array+0xc>
 80082be:	f855 3b04 	ldr.w	r3, [r5], #4
 80082c2:	4798      	blx	r3
 80082c4:	3601      	adds	r6, #1
 80082c6:	e7f2      	b.n	80082ae <__libc_init_array+0x1e>
 80082c8:	080092f8 	.word	0x080092f8
 80082cc:	080092f8 	.word	0x080092f8
 80082d0:	080092f8 	.word	0x080092f8
 80082d4:	080092fc 	.word	0x080092fc

080082d8 <__retarget_lock_acquire_recursive>:
 80082d8:	4770      	bx	lr

080082da <__retarget_lock_release_recursive>:
 80082da:	4770      	bx	lr

080082dc <memcpy>:
 80082dc:	440a      	add	r2, r1
 80082de:	4291      	cmp	r1, r2
 80082e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80082e4:	d100      	bne.n	80082e8 <memcpy+0xc>
 80082e6:	4770      	bx	lr
 80082e8:	b510      	push	{r4, lr}
 80082ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082f2:	4291      	cmp	r1, r2
 80082f4:	d1f9      	bne.n	80082ea <memcpy+0xe>
 80082f6:	bd10      	pop	{r4, pc}

080082f8 <_free_r>:
 80082f8:	b538      	push	{r3, r4, r5, lr}
 80082fa:	4605      	mov	r5, r0
 80082fc:	2900      	cmp	r1, #0
 80082fe:	d041      	beq.n	8008384 <_free_r+0x8c>
 8008300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008304:	1f0c      	subs	r4, r1, #4
 8008306:	2b00      	cmp	r3, #0
 8008308:	bfb8      	it	lt
 800830a:	18e4      	addlt	r4, r4, r3
 800830c:	f000 f8e0 	bl	80084d0 <__malloc_lock>
 8008310:	4a1d      	ldr	r2, [pc, #116]	@ (8008388 <_free_r+0x90>)
 8008312:	6813      	ldr	r3, [r2, #0]
 8008314:	b933      	cbnz	r3, 8008324 <_free_r+0x2c>
 8008316:	6063      	str	r3, [r4, #4]
 8008318:	6014      	str	r4, [r2, #0]
 800831a:	4628      	mov	r0, r5
 800831c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008320:	f000 b8dc 	b.w	80084dc <__malloc_unlock>
 8008324:	42a3      	cmp	r3, r4
 8008326:	d908      	bls.n	800833a <_free_r+0x42>
 8008328:	6820      	ldr	r0, [r4, #0]
 800832a:	1821      	adds	r1, r4, r0
 800832c:	428b      	cmp	r3, r1
 800832e:	bf01      	itttt	eq
 8008330:	6819      	ldreq	r1, [r3, #0]
 8008332:	685b      	ldreq	r3, [r3, #4]
 8008334:	1809      	addeq	r1, r1, r0
 8008336:	6021      	streq	r1, [r4, #0]
 8008338:	e7ed      	b.n	8008316 <_free_r+0x1e>
 800833a:	461a      	mov	r2, r3
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	b10b      	cbz	r3, 8008344 <_free_r+0x4c>
 8008340:	42a3      	cmp	r3, r4
 8008342:	d9fa      	bls.n	800833a <_free_r+0x42>
 8008344:	6811      	ldr	r1, [r2, #0]
 8008346:	1850      	adds	r0, r2, r1
 8008348:	42a0      	cmp	r0, r4
 800834a:	d10b      	bne.n	8008364 <_free_r+0x6c>
 800834c:	6820      	ldr	r0, [r4, #0]
 800834e:	4401      	add	r1, r0
 8008350:	1850      	adds	r0, r2, r1
 8008352:	4283      	cmp	r3, r0
 8008354:	6011      	str	r1, [r2, #0]
 8008356:	d1e0      	bne.n	800831a <_free_r+0x22>
 8008358:	6818      	ldr	r0, [r3, #0]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	6053      	str	r3, [r2, #4]
 800835e:	4408      	add	r0, r1
 8008360:	6010      	str	r0, [r2, #0]
 8008362:	e7da      	b.n	800831a <_free_r+0x22>
 8008364:	d902      	bls.n	800836c <_free_r+0x74>
 8008366:	230c      	movs	r3, #12
 8008368:	602b      	str	r3, [r5, #0]
 800836a:	e7d6      	b.n	800831a <_free_r+0x22>
 800836c:	6820      	ldr	r0, [r4, #0]
 800836e:	1821      	adds	r1, r4, r0
 8008370:	428b      	cmp	r3, r1
 8008372:	bf04      	itt	eq
 8008374:	6819      	ldreq	r1, [r3, #0]
 8008376:	685b      	ldreq	r3, [r3, #4]
 8008378:	6063      	str	r3, [r4, #4]
 800837a:	bf04      	itt	eq
 800837c:	1809      	addeq	r1, r1, r0
 800837e:	6021      	streq	r1, [r4, #0]
 8008380:	6054      	str	r4, [r2, #4]
 8008382:	e7ca      	b.n	800831a <_free_r+0x22>
 8008384:	bd38      	pop	{r3, r4, r5, pc}
 8008386:	bf00      	nop
 8008388:	2001951c 	.word	0x2001951c

0800838c <sbrk_aligned>:
 800838c:	b570      	push	{r4, r5, r6, lr}
 800838e:	4e0f      	ldr	r6, [pc, #60]	@ (80083cc <sbrk_aligned+0x40>)
 8008390:	460c      	mov	r4, r1
 8008392:	6831      	ldr	r1, [r6, #0]
 8008394:	4605      	mov	r5, r0
 8008396:	b911      	cbnz	r1, 800839e <sbrk_aligned+0x12>
 8008398:	f000 fba6 	bl	8008ae8 <_sbrk_r>
 800839c:	6030      	str	r0, [r6, #0]
 800839e:	4621      	mov	r1, r4
 80083a0:	4628      	mov	r0, r5
 80083a2:	f000 fba1 	bl	8008ae8 <_sbrk_r>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d103      	bne.n	80083b2 <sbrk_aligned+0x26>
 80083aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80083ae:	4620      	mov	r0, r4
 80083b0:	bd70      	pop	{r4, r5, r6, pc}
 80083b2:	1cc4      	adds	r4, r0, #3
 80083b4:	f024 0403 	bic.w	r4, r4, #3
 80083b8:	42a0      	cmp	r0, r4
 80083ba:	d0f8      	beq.n	80083ae <sbrk_aligned+0x22>
 80083bc:	1a21      	subs	r1, r4, r0
 80083be:	4628      	mov	r0, r5
 80083c0:	f000 fb92 	bl	8008ae8 <_sbrk_r>
 80083c4:	3001      	adds	r0, #1
 80083c6:	d1f2      	bne.n	80083ae <sbrk_aligned+0x22>
 80083c8:	e7ef      	b.n	80083aa <sbrk_aligned+0x1e>
 80083ca:	bf00      	nop
 80083cc:	20019518 	.word	0x20019518

080083d0 <_malloc_r>:
 80083d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80083d4:	1ccd      	adds	r5, r1, #3
 80083d6:	f025 0503 	bic.w	r5, r5, #3
 80083da:	3508      	adds	r5, #8
 80083dc:	2d0c      	cmp	r5, #12
 80083de:	bf38      	it	cc
 80083e0:	250c      	movcc	r5, #12
 80083e2:	2d00      	cmp	r5, #0
 80083e4:	4606      	mov	r6, r0
 80083e6:	db01      	blt.n	80083ec <_malloc_r+0x1c>
 80083e8:	42a9      	cmp	r1, r5
 80083ea:	d904      	bls.n	80083f6 <_malloc_r+0x26>
 80083ec:	230c      	movs	r3, #12
 80083ee:	6033      	str	r3, [r6, #0]
 80083f0:	2000      	movs	r0, #0
 80083f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80084cc <_malloc_r+0xfc>
 80083fa:	f000 f869 	bl	80084d0 <__malloc_lock>
 80083fe:	f8d8 3000 	ldr.w	r3, [r8]
 8008402:	461c      	mov	r4, r3
 8008404:	bb44      	cbnz	r4, 8008458 <_malloc_r+0x88>
 8008406:	4629      	mov	r1, r5
 8008408:	4630      	mov	r0, r6
 800840a:	f7ff ffbf 	bl	800838c <sbrk_aligned>
 800840e:	1c43      	adds	r3, r0, #1
 8008410:	4604      	mov	r4, r0
 8008412:	d158      	bne.n	80084c6 <_malloc_r+0xf6>
 8008414:	f8d8 4000 	ldr.w	r4, [r8]
 8008418:	4627      	mov	r7, r4
 800841a:	2f00      	cmp	r7, #0
 800841c:	d143      	bne.n	80084a6 <_malloc_r+0xd6>
 800841e:	2c00      	cmp	r4, #0
 8008420:	d04b      	beq.n	80084ba <_malloc_r+0xea>
 8008422:	6823      	ldr	r3, [r4, #0]
 8008424:	4639      	mov	r1, r7
 8008426:	4630      	mov	r0, r6
 8008428:	eb04 0903 	add.w	r9, r4, r3
 800842c:	f000 fb5c 	bl	8008ae8 <_sbrk_r>
 8008430:	4581      	cmp	r9, r0
 8008432:	d142      	bne.n	80084ba <_malloc_r+0xea>
 8008434:	6821      	ldr	r1, [r4, #0]
 8008436:	1a6d      	subs	r5, r5, r1
 8008438:	4629      	mov	r1, r5
 800843a:	4630      	mov	r0, r6
 800843c:	f7ff ffa6 	bl	800838c <sbrk_aligned>
 8008440:	3001      	adds	r0, #1
 8008442:	d03a      	beq.n	80084ba <_malloc_r+0xea>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	442b      	add	r3, r5
 8008448:	6023      	str	r3, [r4, #0]
 800844a:	f8d8 3000 	ldr.w	r3, [r8]
 800844e:	685a      	ldr	r2, [r3, #4]
 8008450:	bb62      	cbnz	r2, 80084ac <_malloc_r+0xdc>
 8008452:	f8c8 7000 	str.w	r7, [r8]
 8008456:	e00f      	b.n	8008478 <_malloc_r+0xa8>
 8008458:	6822      	ldr	r2, [r4, #0]
 800845a:	1b52      	subs	r2, r2, r5
 800845c:	d420      	bmi.n	80084a0 <_malloc_r+0xd0>
 800845e:	2a0b      	cmp	r2, #11
 8008460:	d917      	bls.n	8008492 <_malloc_r+0xc2>
 8008462:	1961      	adds	r1, r4, r5
 8008464:	42a3      	cmp	r3, r4
 8008466:	6025      	str	r5, [r4, #0]
 8008468:	bf18      	it	ne
 800846a:	6059      	strne	r1, [r3, #4]
 800846c:	6863      	ldr	r3, [r4, #4]
 800846e:	bf08      	it	eq
 8008470:	f8c8 1000 	streq.w	r1, [r8]
 8008474:	5162      	str	r2, [r4, r5]
 8008476:	604b      	str	r3, [r1, #4]
 8008478:	4630      	mov	r0, r6
 800847a:	f000 f82f 	bl	80084dc <__malloc_unlock>
 800847e:	f104 000b 	add.w	r0, r4, #11
 8008482:	1d23      	adds	r3, r4, #4
 8008484:	f020 0007 	bic.w	r0, r0, #7
 8008488:	1ac2      	subs	r2, r0, r3
 800848a:	bf1c      	itt	ne
 800848c:	1a1b      	subne	r3, r3, r0
 800848e:	50a3      	strne	r3, [r4, r2]
 8008490:	e7af      	b.n	80083f2 <_malloc_r+0x22>
 8008492:	6862      	ldr	r2, [r4, #4]
 8008494:	42a3      	cmp	r3, r4
 8008496:	bf0c      	ite	eq
 8008498:	f8c8 2000 	streq.w	r2, [r8]
 800849c:	605a      	strne	r2, [r3, #4]
 800849e:	e7eb      	b.n	8008478 <_malloc_r+0xa8>
 80084a0:	4623      	mov	r3, r4
 80084a2:	6864      	ldr	r4, [r4, #4]
 80084a4:	e7ae      	b.n	8008404 <_malloc_r+0x34>
 80084a6:	463c      	mov	r4, r7
 80084a8:	687f      	ldr	r7, [r7, #4]
 80084aa:	e7b6      	b.n	800841a <_malloc_r+0x4a>
 80084ac:	461a      	mov	r2, r3
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	d1fb      	bne.n	80084ac <_malloc_r+0xdc>
 80084b4:	2300      	movs	r3, #0
 80084b6:	6053      	str	r3, [r2, #4]
 80084b8:	e7de      	b.n	8008478 <_malloc_r+0xa8>
 80084ba:	230c      	movs	r3, #12
 80084bc:	6033      	str	r3, [r6, #0]
 80084be:	4630      	mov	r0, r6
 80084c0:	f000 f80c 	bl	80084dc <__malloc_unlock>
 80084c4:	e794      	b.n	80083f0 <_malloc_r+0x20>
 80084c6:	6005      	str	r5, [r0, #0]
 80084c8:	e7d6      	b.n	8008478 <_malloc_r+0xa8>
 80084ca:	bf00      	nop
 80084cc:	2001951c 	.word	0x2001951c

080084d0 <__malloc_lock>:
 80084d0:	4801      	ldr	r0, [pc, #4]	@ (80084d8 <__malloc_lock+0x8>)
 80084d2:	f7ff bf01 	b.w	80082d8 <__retarget_lock_acquire_recursive>
 80084d6:	bf00      	nop
 80084d8:	20019514 	.word	0x20019514

080084dc <__malloc_unlock>:
 80084dc:	4801      	ldr	r0, [pc, #4]	@ (80084e4 <__malloc_unlock+0x8>)
 80084de:	f7ff befc 	b.w	80082da <__retarget_lock_release_recursive>
 80084e2:	bf00      	nop
 80084e4:	20019514 	.word	0x20019514

080084e8 <__ssputs_r>:
 80084e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084ec:	688e      	ldr	r6, [r1, #8]
 80084ee:	461f      	mov	r7, r3
 80084f0:	42be      	cmp	r6, r7
 80084f2:	680b      	ldr	r3, [r1, #0]
 80084f4:	4682      	mov	sl, r0
 80084f6:	460c      	mov	r4, r1
 80084f8:	4690      	mov	r8, r2
 80084fa:	d82d      	bhi.n	8008558 <__ssputs_r+0x70>
 80084fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008500:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008504:	d026      	beq.n	8008554 <__ssputs_r+0x6c>
 8008506:	6965      	ldr	r5, [r4, #20]
 8008508:	6909      	ldr	r1, [r1, #16]
 800850a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800850e:	eba3 0901 	sub.w	r9, r3, r1
 8008512:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008516:	1c7b      	adds	r3, r7, #1
 8008518:	444b      	add	r3, r9
 800851a:	106d      	asrs	r5, r5, #1
 800851c:	429d      	cmp	r5, r3
 800851e:	bf38      	it	cc
 8008520:	461d      	movcc	r5, r3
 8008522:	0553      	lsls	r3, r2, #21
 8008524:	d527      	bpl.n	8008576 <__ssputs_r+0x8e>
 8008526:	4629      	mov	r1, r5
 8008528:	f7ff ff52 	bl	80083d0 <_malloc_r>
 800852c:	4606      	mov	r6, r0
 800852e:	b360      	cbz	r0, 800858a <__ssputs_r+0xa2>
 8008530:	6921      	ldr	r1, [r4, #16]
 8008532:	464a      	mov	r2, r9
 8008534:	f7ff fed2 	bl	80082dc <memcpy>
 8008538:	89a3      	ldrh	r3, [r4, #12]
 800853a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800853e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008542:	81a3      	strh	r3, [r4, #12]
 8008544:	6126      	str	r6, [r4, #16]
 8008546:	6165      	str	r5, [r4, #20]
 8008548:	444e      	add	r6, r9
 800854a:	eba5 0509 	sub.w	r5, r5, r9
 800854e:	6026      	str	r6, [r4, #0]
 8008550:	60a5      	str	r5, [r4, #8]
 8008552:	463e      	mov	r6, r7
 8008554:	42be      	cmp	r6, r7
 8008556:	d900      	bls.n	800855a <__ssputs_r+0x72>
 8008558:	463e      	mov	r6, r7
 800855a:	6820      	ldr	r0, [r4, #0]
 800855c:	4632      	mov	r2, r6
 800855e:	4641      	mov	r1, r8
 8008560:	f000 faa8 	bl	8008ab4 <memmove>
 8008564:	68a3      	ldr	r3, [r4, #8]
 8008566:	1b9b      	subs	r3, r3, r6
 8008568:	60a3      	str	r3, [r4, #8]
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	4433      	add	r3, r6
 800856e:	6023      	str	r3, [r4, #0]
 8008570:	2000      	movs	r0, #0
 8008572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008576:	462a      	mov	r2, r5
 8008578:	f000 fac6 	bl	8008b08 <_realloc_r>
 800857c:	4606      	mov	r6, r0
 800857e:	2800      	cmp	r0, #0
 8008580:	d1e0      	bne.n	8008544 <__ssputs_r+0x5c>
 8008582:	6921      	ldr	r1, [r4, #16]
 8008584:	4650      	mov	r0, sl
 8008586:	f7ff feb7 	bl	80082f8 <_free_r>
 800858a:	230c      	movs	r3, #12
 800858c:	f8ca 3000 	str.w	r3, [sl]
 8008590:	89a3      	ldrh	r3, [r4, #12]
 8008592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008596:	81a3      	strh	r3, [r4, #12]
 8008598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800859c:	e7e9      	b.n	8008572 <__ssputs_r+0x8a>
	...

080085a0 <_svfiprintf_r>:
 80085a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085a4:	4698      	mov	r8, r3
 80085a6:	898b      	ldrh	r3, [r1, #12]
 80085a8:	061b      	lsls	r3, r3, #24
 80085aa:	b09d      	sub	sp, #116	@ 0x74
 80085ac:	4607      	mov	r7, r0
 80085ae:	460d      	mov	r5, r1
 80085b0:	4614      	mov	r4, r2
 80085b2:	d510      	bpl.n	80085d6 <_svfiprintf_r+0x36>
 80085b4:	690b      	ldr	r3, [r1, #16]
 80085b6:	b973      	cbnz	r3, 80085d6 <_svfiprintf_r+0x36>
 80085b8:	2140      	movs	r1, #64	@ 0x40
 80085ba:	f7ff ff09 	bl	80083d0 <_malloc_r>
 80085be:	6028      	str	r0, [r5, #0]
 80085c0:	6128      	str	r0, [r5, #16]
 80085c2:	b930      	cbnz	r0, 80085d2 <_svfiprintf_r+0x32>
 80085c4:	230c      	movs	r3, #12
 80085c6:	603b      	str	r3, [r7, #0]
 80085c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80085cc:	b01d      	add	sp, #116	@ 0x74
 80085ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085d2:	2340      	movs	r3, #64	@ 0x40
 80085d4:	616b      	str	r3, [r5, #20]
 80085d6:	2300      	movs	r3, #0
 80085d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80085da:	2320      	movs	r3, #32
 80085dc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80085e4:	2330      	movs	r3, #48	@ 0x30
 80085e6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008784 <_svfiprintf_r+0x1e4>
 80085ea:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80085ee:	f04f 0901 	mov.w	r9, #1
 80085f2:	4623      	mov	r3, r4
 80085f4:	469a      	mov	sl, r3
 80085f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085fa:	b10a      	cbz	r2, 8008600 <_svfiprintf_r+0x60>
 80085fc:	2a25      	cmp	r2, #37	@ 0x25
 80085fe:	d1f9      	bne.n	80085f4 <_svfiprintf_r+0x54>
 8008600:	ebba 0b04 	subs.w	fp, sl, r4
 8008604:	d00b      	beq.n	800861e <_svfiprintf_r+0x7e>
 8008606:	465b      	mov	r3, fp
 8008608:	4622      	mov	r2, r4
 800860a:	4629      	mov	r1, r5
 800860c:	4638      	mov	r0, r7
 800860e:	f7ff ff6b 	bl	80084e8 <__ssputs_r>
 8008612:	3001      	adds	r0, #1
 8008614:	f000 80a7 	beq.w	8008766 <_svfiprintf_r+0x1c6>
 8008618:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800861a:	445a      	add	r2, fp
 800861c:	9209      	str	r2, [sp, #36]	@ 0x24
 800861e:	f89a 3000 	ldrb.w	r3, [sl]
 8008622:	2b00      	cmp	r3, #0
 8008624:	f000 809f 	beq.w	8008766 <_svfiprintf_r+0x1c6>
 8008628:	2300      	movs	r3, #0
 800862a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800862e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008632:	f10a 0a01 	add.w	sl, sl, #1
 8008636:	9304      	str	r3, [sp, #16]
 8008638:	9307      	str	r3, [sp, #28]
 800863a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800863e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008640:	4654      	mov	r4, sl
 8008642:	2205      	movs	r2, #5
 8008644:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008648:	484e      	ldr	r0, [pc, #312]	@ (8008784 <_svfiprintf_r+0x1e4>)
 800864a:	f7f7 fdd9 	bl	8000200 <memchr>
 800864e:	9a04      	ldr	r2, [sp, #16]
 8008650:	b9d8      	cbnz	r0, 800868a <_svfiprintf_r+0xea>
 8008652:	06d0      	lsls	r0, r2, #27
 8008654:	bf44      	itt	mi
 8008656:	2320      	movmi	r3, #32
 8008658:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800865c:	0711      	lsls	r1, r2, #28
 800865e:	bf44      	itt	mi
 8008660:	232b      	movmi	r3, #43	@ 0x2b
 8008662:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008666:	f89a 3000 	ldrb.w	r3, [sl]
 800866a:	2b2a      	cmp	r3, #42	@ 0x2a
 800866c:	d015      	beq.n	800869a <_svfiprintf_r+0xfa>
 800866e:	9a07      	ldr	r2, [sp, #28]
 8008670:	4654      	mov	r4, sl
 8008672:	2000      	movs	r0, #0
 8008674:	f04f 0c0a 	mov.w	ip, #10
 8008678:	4621      	mov	r1, r4
 800867a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800867e:	3b30      	subs	r3, #48	@ 0x30
 8008680:	2b09      	cmp	r3, #9
 8008682:	d94b      	bls.n	800871c <_svfiprintf_r+0x17c>
 8008684:	b1b0      	cbz	r0, 80086b4 <_svfiprintf_r+0x114>
 8008686:	9207      	str	r2, [sp, #28]
 8008688:	e014      	b.n	80086b4 <_svfiprintf_r+0x114>
 800868a:	eba0 0308 	sub.w	r3, r0, r8
 800868e:	fa09 f303 	lsl.w	r3, r9, r3
 8008692:	4313      	orrs	r3, r2
 8008694:	9304      	str	r3, [sp, #16]
 8008696:	46a2      	mov	sl, r4
 8008698:	e7d2      	b.n	8008640 <_svfiprintf_r+0xa0>
 800869a:	9b03      	ldr	r3, [sp, #12]
 800869c:	1d19      	adds	r1, r3, #4
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	9103      	str	r1, [sp, #12]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	bfbb      	ittet	lt
 80086a6:	425b      	neglt	r3, r3
 80086a8:	f042 0202 	orrlt.w	r2, r2, #2
 80086ac:	9307      	strge	r3, [sp, #28]
 80086ae:	9307      	strlt	r3, [sp, #28]
 80086b0:	bfb8      	it	lt
 80086b2:	9204      	strlt	r2, [sp, #16]
 80086b4:	7823      	ldrb	r3, [r4, #0]
 80086b6:	2b2e      	cmp	r3, #46	@ 0x2e
 80086b8:	d10a      	bne.n	80086d0 <_svfiprintf_r+0x130>
 80086ba:	7863      	ldrb	r3, [r4, #1]
 80086bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80086be:	d132      	bne.n	8008726 <_svfiprintf_r+0x186>
 80086c0:	9b03      	ldr	r3, [sp, #12]
 80086c2:	1d1a      	adds	r2, r3, #4
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	9203      	str	r2, [sp, #12]
 80086c8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086cc:	3402      	adds	r4, #2
 80086ce:	9305      	str	r3, [sp, #20]
 80086d0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008794 <_svfiprintf_r+0x1f4>
 80086d4:	7821      	ldrb	r1, [r4, #0]
 80086d6:	2203      	movs	r2, #3
 80086d8:	4650      	mov	r0, sl
 80086da:	f7f7 fd91 	bl	8000200 <memchr>
 80086de:	b138      	cbz	r0, 80086f0 <_svfiprintf_r+0x150>
 80086e0:	9b04      	ldr	r3, [sp, #16]
 80086e2:	eba0 000a 	sub.w	r0, r0, sl
 80086e6:	2240      	movs	r2, #64	@ 0x40
 80086e8:	4082      	lsls	r2, r0
 80086ea:	4313      	orrs	r3, r2
 80086ec:	3401      	adds	r4, #1
 80086ee:	9304      	str	r3, [sp, #16]
 80086f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086f4:	4824      	ldr	r0, [pc, #144]	@ (8008788 <_svfiprintf_r+0x1e8>)
 80086f6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80086fa:	2206      	movs	r2, #6
 80086fc:	f7f7 fd80 	bl	8000200 <memchr>
 8008700:	2800      	cmp	r0, #0
 8008702:	d036      	beq.n	8008772 <_svfiprintf_r+0x1d2>
 8008704:	4b21      	ldr	r3, [pc, #132]	@ (800878c <_svfiprintf_r+0x1ec>)
 8008706:	bb1b      	cbnz	r3, 8008750 <_svfiprintf_r+0x1b0>
 8008708:	9b03      	ldr	r3, [sp, #12]
 800870a:	3307      	adds	r3, #7
 800870c:	f023 0307 	bic.w	r3, r3, #7
 8008710:	3308      	adds	r3, #8
 8008712:	9303      	str	r3, [sp, #12]
 8008714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008716:	4433      	add	r3, r6
 8008718:	9309      	str	r3, [sp, #36]	@ 0x24
 800871a:	e76a      	b.n	80085f2 <_svfiprintf_r+0x52>
 800871c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008720:	460c      	mov	r4, r1
 8008722:	2001      	movs	r0, #1
 8008724:	e7a8      	b.n	8008678 <_svfiprintf_r+0xd8>
 8008726:	2300      	movs	r3, #0
 8008728:	3401      	adds	r4, #1
 800872a:	9305      	str	r3, [sp, #20]
 800872c:	4619      	mov	r1, r3
 800872e:	f04f 0c0a 	mov.w	ip, #10
 8008732:	4620      	mov	r0, r4
 8008734:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008738:	3a30      	subs	r2, #48	@ 0x30
 800873a:	2a09      	cmp	r2, #9
 800873c:	d903      	bls.n	8008746 <_svfiprintf_r+0x1a6>
 800873e:	2b00      	cmp	r3, #0
 8008740:	d0c6      	beq.n	80086d0 <_svfiprintf_r+0x130>
 8008742:	9105      	str	r1, [sp, #20]
 8008744:	e7c4      	b.n	80086d0 <_svfiprintf_r+0x130>
 8008746:	fb0c 2101 	mla	r1, ip, r1, r2
 800874a:	4604      	mov	r4, r0
 800874c:	2301      	movs	r3, #1
 800874e:	e7f0      	b.n	8008732 <_svfiprintf_r+0x192>
 8008750:	ab03      	add	r3, sp, #12
 8008752:	9300      	str	r3, [sp, #0]
 8008754:	462a      	mov	r2, r5
 8008756:	4b0e      	ldr	r3, [pc, #56]	@ (8008790 <_svfiprintf_r+0x1f0>)
 8008758:	a904      	add	r1, sp, #16
 800875a:	4638      	mov	r0, r7
 800875c:	f3af 8000 	nop.w
 8008760:	1c42      	adds	r2, r0, #1
 8008762:	4606      	mov	r6, r0
 8008764:	d1d6      	bne.n	8008714 <_svfiprintf_r+0x174>
 8008766:	89ab      	ldrh	r3, [r5, #12]
 8008768:	065b      	lsls	r3, r3, #25
 800876a:	f53f af2d 	bmi.w	80085c8 <_svfiprintf_r+0x28>
 800876e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008770:	e72c      	b.n	80085cc <_svfiprintf_r+0x2c>
 8008772:	ab03      	add	r3, sp, #12
 8008774:	9300      	str	r3, [sp, #0]
 8008776:	462a      	mov	r2, r5
 8008778:	4b05      	ldr	r3, [pc, #20]	@ (8008790 <_svfiprintf_r+0x1f0>)
 800877a:	a904      	add	r1, sp, #16
 800877c:	4638      	mov	r0, r7
 800877e:	f000 f879 	bl	8008874 <_printf_i>
 8008782:	e7ed      	b.n	8008760 <_svfiprintf_r+0x1c0>
 8008784:	080092bd 	.word	0x080092bd
 8008788:	080092c7 	.word	0x080092c7
 800878c:	00000000 	.word	0x00000000
 8008790:	080084e9 	.word	0x080084e9
 8008794:	080092c3 	.word	0x080092c3

08008798 <_printf_common>:
 8008798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800879c:	4616      	mov	r6, r2
 800879e:	4698      	mov	r8, r3
 80087a0:	688a      	ldr	r2, [r1, #8]
 80087a2:	690b      	ldr	r3, [r1, #16]
 80087a4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087a8:	4293      	cmp	r3, r2
 80087aa:	bfb8      	it	lt
 80087ac:	4613      	movlt	r3, r2
 80087ae:	6033      	str	r3, [r6, #0]
 80087b0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80087b4:	4607      	mov	r7, r0
 80087b6:	460c      	mov	r4, r1
 80087b8:	b10a      	cbz	r2, 80087be <_printf_common+0x26>
 80087ba:	3301      	adds	r3, #1
 80087bc:	6033      	str	r3, [r6, #0]
 80087be:	6823      	ldr	r3, [r4, #0]
 80087c0:	0699      	lsls	r1, r3, #26
 80087c2:	bf42      	ittt	mi
 80087c4:	6833      	ldrmi	r3, [r6, #0]
 80087c6:	3302      	addmi	r3, #2
 80087c8:	6033      	strmi	r3, [r6, #0]
 80087ca:	6825      	ldr	r5, [r4, #0]
 80087cc:	f015 0506 	ands.w	r5, r5, #6
 80087d0:	d106      	bne.n	80087e0 <_printf_common+0x48>
 80087d2:	f104 0a19 	add.w	sl, r4, #25
 80087d6:	68e3      	ldr	r3, [r4, #12]
 80087d8:	6832      	ldr	r2, [r6, #0]
 80087da:	1a9b      	subs	r3, r3, r2
 80087dc:	42ab      	cmp	r3, r5
 80087de:	dc26      	bgt.n	800882e <_printf_common+0x96>
 80087e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80087e4:	6822      	ldr	r2, [r4, #0]
 80087e6:	3b00      	subs	r3, #0
 80087e8:	bf18      	it	ne
 80087ea:	2301      	movne	r3, #1
 80087ec:	0692      	lsls	r2, r2, #26
 80087ee:	d42b      	bmi.n	8008848 <_printf_common+0xb0>
 80087f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80087f4:	4641      	mov	r1, r8
 80087f6:	4638      	mov	r0, r7
 80087f8:	47c8      	blx	r9
 80087fa:	3001      	adds	r0, #1
 80087fc:	d01e      	beq.n	800883c <_printf_common+0xa4>
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	6922      	ldr	r2, [r4, #16]
 8008802:	f003 0306 	and.w	r3, r3, #6
 8008806:	2b04      	cmp	r3, #4
 8008808:	bf02      	ittt	eq
 800880a:	68e5      	ldreq	r5, [r4, #12]
 800880c:	6833      	ldreq	r3, [r6, #0]
 800880e:	1aed      	subeq	r5, r5, r3
 8008810:	68a3      	ldr	r3, [r4, #8]
 8008812:	bf0c      	ite	eq
 8008814:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008818:	2500      	movne	r5, #0
 800881a:	4293      	cmp	r3, r2
 800881c:	bfc4      	itt	gt
 800881e:	1a9b      	subgt	r3, r3, r2
 8008820:	18ed      	addgt	r5, r5, r3
 8008822:	2600      	movs	r6, #0
 8008824:	341a      	adds	r4, #26
 8008826:	42b5      	cmp	r5, r6
 8008828:	d11a      	bne.n	8008860 <_printf_common+0xc8>
 800882a:	2000      	movs	r0, #0
 800882c:	e008      	b.n	8008840 <_printf_common+0xa8>
 800882e:	2301      	movs	r3, #1
 8008830:	4652      	mov	r2, sl
 8008832:	4641      	mov	r1, r8
 8008834:	4638      	mov	r0, r7
 8008836:	47c8      	blx	r9
 8008838:	3001      	adds	r0, #1
 800883a:	d103      	bne.n	8008844 <_printf_common+0xac>
 800883c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008844:	3501      	adds	r5, #1
 8008846:	e7c6      	b.n	80087d6 <_printf_common+0x3e>
 8008848:	18e1      	adds	r1, r4, r3
 800884a:	1c5a      	adds	r2, r3, #1
 800884c:	2030      	movs	r0, #48	@ 0x30
 800884e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008852:	4422      	add	r2, r4
 8008854:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008858:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800885c:	3302      	adds	r3, #2
 800885e:	e7c7      	b.n	80087f0 <_printf_common+0x58>
 8008860:	2301      	movs	r3, #1
 8008862:	4622      	mov	r2, r4
 8008864:	4641      	mov	r1, r8
 8008866:	4638      	mov	r0, r7
 8008868:	47c8      	blx	r9
 800886a:	3001      	adds	r0, #1
 800886c:	d0e6      	beq.n	800883c <_printf_common+0xa4>
 800886e:	3601      	adds	r6, #1
 8008870:	e7d9      	b.n	8008826 <_printf_common+0x8e>
	...

08008874 <_printf_i>:
 8008874:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008878:	7e0f      	ldrb	r7, [r1, #24]
 800887a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800887c:	2f78      	cmp	r7, #120	@ 0x78
 800887e:	4691      	mov	r9, r2
 8008880:	4680      	mov	r8, r0
 8008882:	460c      	mov	r4, r1
 8008884:	469a      	mov	sl, r3
 8008886:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800888a:	d807      	bhi.n	800889c <_printf_i+0x28>
 800888c:	2f62      	cmp	r7, #98	@ 0x62
 800888e:	d80a      	bhi.n	80088a6 <_printf_i+0x32>
 8008890:	2f00      	cmp	r7, #0
 8008892:	f000 80d2 	beq.w	8008a3a <_printf_i+0x1c6>
 8008896:	2f58      	cmp	r7, #88	@ 0x58
 8008898:	f000 80b9 	beq.w	8008a0e <_printf_i+0x19a>
 800889c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80088a0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80088a4:	e03a      	b.n	800891c <_printf_i+0xa8>
 80088a6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80088aa:	2b15      	cmp	r3, #21
 80088ac:	d8f6      	bhi.n	800889c <_printf_i+0x28>
 80088ae:	a101      	add	r1, pc, #4	@ (adr r1, 80088b4 <_printf_i+0x40>)
 80088b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088b4:	0800890d 	.word	0x0800890d
 80088b8:	08008921 	.word	0x08008921
 80088bc:	0800889d 	.word	0x0800889d
 80088c0:	0800889d 	.word	0x0800889d
 80088c4:	0800889d 	.word	0x0800889d
 80088c8:	0800889d 	.word	0x0800889d
 80088cc:	08008921 	.word	0x08008921
 80088d0:	0800889d 	.word	0x0800889d
 80088d4:	0800889d 	.word	0x0800889d
 80088d8:	0800889d 	.word	0x0800889d
 80088dc:	0800889d 	.word	0x0800889d
 80088e0:	08008a21 	.word	0x08008a21
 80088e4:	0800894b 	.word	0x0800894b
 80088e8:	080089db 	.word	0x080089db
 80088ec:	0800889d 	.word	0x0800889d
 80088f0:	0800889d 	.word	0x0800889d
 80088f4:	08008a43 	.word	0x08008a43
 80088f8:	0800889d 	.word	0x0800889d
 80088fc:	0800894b 	.word	0x0800894b
 8008900:	0800889d 	.word	0x0800889d
 8008904:	0800889d 	.word	0x0800889d
 8008908:	080089e3 	.word	0x080089e3
 800890c:	6833      	ldr	r3, [r6, #0]
 800890e:	1d1a      	adds	r2, r3, #4
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	6032      	str	r2, [r6, #0]
 8008914:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008918:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800891c:	2301      	movs	r3, #1
 800891e:	e09d      	b.n	8008a5c <_printf_i+0x1e8>
 8008920:	6833      	ldr	r3, [r6, #0]
 8008922:	6820      	ldr	r0, [r4, #0]
 8008924:	1d19      	adds	r1, r3, #4
 8008926:	6031      	str	r1, [r6, #0]
 8008928:	0606      	lsls	r6, r0, #24
 800892a:	d501      	bpl.n	8008930 <_printf_i+0xbc>
 800892c:	681d      	ldr	r5, [r3, #0]
 800892e:	e003      	b.n	8008938 <_printf_i+0xc4>
 8008930:	0645      	lsls	r5, r0, #25
 8008932:	d5fb      	bpl.n	800892c <_printf_i+0xb8>
 8008934:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008938:	2d00      	cmp	r5, #0
 800893a:	da03      	bge.n	8008944 <_printf_i+0xd0>
 800893c:	232d      	movs	r3, #45	@ 0x2d
 800893e:	426d      	negs	r5, r5
 8008940:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008944:	4859      	ldr	r0, [pc, #356]	@ (8008aac <_printf_i+0x238>)
 8008946:	230a      	movs	r3, #10
 8008948:	e011      	b.n	800896e <_printf_i+0xfa>
 800894a:	6821      	ldr	r1, [r4, #0]
 800894c:	6833      	ldr	r3, [r6, #0]
 800894e:	0608      	lsls	r0, r1, #24
 8008950:	f853 5b04 	ldr.w	r5, [r3], #4
 8008954:	d402      	bmi.n	800895c <_printf_i+0xe8>
 8008956:	0649      	lsls	r1, r1, #25
 8008958:	bf48      	it	mi
 800895a:	b2ad      	uxthmi	r5, r5
 800895c:	2f6f      	cmp	r7, #111	@ 0x6f
 800895e:	4853      	ldr	r0, [pc, #332]	@ (8008aac <_printf_i+0x238>)
 8008960:	6033      	str	r3, [r6, #0]
 8008962:	bf14      	ite	ne
 8008964:	230a      	movne	r3, #10
 8008966:	2308      	moveq	r3, #8
 8008968:	2100      	movs	r1, #0
 800896a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800896e:	6866      	ldr	r6, [r4, #4]
 8008970:	60a6      	str	r6, [r4, #8]
 8008972:	2e00      	cmp	r6, #0
 8008974:	bfa2      	ittt	ge
 8008976:	6821      	ldrge	r1, [r4, #0]
 8008978:	f021 0104 	bicge.w	r1, r1, #4
 800897c:	6021      	strge	r1, [r4, #0]
 800897e:	b90d      	cbnz	r5, 8008984 <_printf_i+0x110>
 8008980:	2e00      	cmp	r6, #0
 8008982:	d04b      	beq.n	8008a1c <_printf_i+0x1a8>
 8008984:	4616      	mov	r6, r2
 8008986:	fbb5 f1f3 	udiv	r1, r5, r3
 800898a:	fb03 5711 	mls	r7, r3, r1, r5
 800898e:	5dc7      	ldrb	r7, [r0, r7]
 8008990:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008994:	462f      	mov	r7, r5
 8008996:	42bb      	cmp	r3, r7
 8008998:	460d      	mov	r5, r1
 800899a:	d9f4      	bls.n	8008986 <_printf_i+0x112>
 800899c:	2b08      	cmp	r3, #8
 800899e:	d10b      	bne.n	80089b8 <_printf_i+0x144>
 80089a0:	6823      	ldr	r3, [r4, #0]
 80089a2:	07df      	lsls	r7, r3, #31
 80089a4:	d508      	bpl.n	80089b8 <_printf_i+0x144>
 80089a6:	6923      	ldr	r3, [r4, #16]
 80089a8:	6861      	ldr	r1, [r4, #4]
 80089aa:	4299      	cmp	r1, r3
 80089ac:	bfde      	ittt	le
 80089ae:	2330      	movle	r3, #48	@ 0x30
 80089b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80089b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80089b8:	1b92      	subs	r2, r2, r6
 80089ba:	6122      	str	r2, [r4, #16]
 80089bc:	f8cd a000 	str.w	sl, [sp]
 80089c0:	464b      	mov	r3, r9
 80089c2:	aa03      	add	r2, sp, #12
 80089c4:	4621      	mov	r1, r4
 80089c6:	4640      	mov	r0, r8
 80089c8:	f7ff fee6 	bl	8008798 <_printf_common>
 80089cc:	3001      	adds	r0, #1
 80089ce:	d14a      	bne.n	8008a66 <_printf_i+0x1f2>
 80089d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80089d4:	b004      	add	sp, #16
 80089d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	f043 0320 	orr.w	r3, r3, #32
 80089e0:	6023      	str	r3, [r4, #0]
 80089e2:	4833      	ldr	r0, [pc, #204]	@ (8008ab0 <_printf_i+0x23c>)
 80089e4:	2778      	movs	r7, #120	@ 0x78
 80089e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	6831      	ldr	r1, [r6, #0]
 80089ee:	061f      	lsls	r7, r3, #24
 80089f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80089f4:	d402      	bmi.n	80089fc <_printf_i+0x188>
 80089f6:	065f      	lsls	r7, r3, #25
 80089f8:	bf48      	it	mi
 80089fa:	b2ad      	uxthmi	r5, r5
 80089fc:	6031      	str	r1, [r6, #0]
 80089fe:	07d9      	lsls	r1, r3, #31
 8008a00:	bf44      	itt	mi
 8008a02:	f043 0320 	orrmi.w	r3, r3, #32
 8008a06:	6023      	strmi	r3, [r4, #0]
 8008a08:	b11d      	cbz	r5, 8008a12 <_printf_i+0x19e>
 8008a0a:	2310      	movs	r3, #16
 8008a0c:	e7ac      	b.n	8008968 <_printf_i+0xf4>
 8008a0e:	4827      	ldr	r0, [pc, #156]	@ (8008aac <_printf_i+0x238>)
 8008a10:	e7e9      	b.n	80089e6 <_printf_i+0x172>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	f023 0320 	bic.w	r3, r3, #32
 8008a18:	6023      	str	r3, [r4, #0]
 8008a1a:	e7f6      	b.n	8008a0a <_printf_i+0x196>
 8008a1c:	4616      	mov	r6, r2
 8008a1e:	e7bd      	b.n	800899c <_printf_i+0x128>
 8008a20:	6833      	ldr	r3, [r6, #0]
 8008a22:	6825      	ldr	r5, [r4, #0]
 8008a24:	6961      	ldr	r1, [r4, #20]
 8008a26:	1d18      	adds	r0, r3, #4
 8008a28:	6030      	str	r0, [r6, #0]
 8008a2a:	062e      	lsls	r6, r5, #24
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	d501      	bpl.n	8008a34 <_printf_i+0x1c0>
 8008a30:	6019      	str	r1, [r3, #0]
 8008a32:	e002      	b.n	8008a3a <_printf_i+0x1c6>
 8008a34:	0668      	lsls	r0, r5, #25
 8008a36:	d5fb      	bpl.n	8008a30 <_printf_i+0x1bc>
 8008a38:	8019      	strh	r1, [r3, #0]
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	6123      	str	r3, [r4, #16]
 8008a3e:	4616      	mov	r6, r2
 8008a40:	e7bc      	b.n	80089bc <_printf_i+0x148>
 8008a42:	6833      	ldr	r3, [r6, #0]
 8008a44:	1d1a      	adds	r2, r3, #4
 8008a46:	6032      	str	r2, [r6, #0]
 8008a48:	681e      	ldr	r6, [r3, #0]
 8008a4a:	6862      	ldr	r2, [r4, #4]
 8008a4c:	2100      	movs	r1, #0
 8008a4e:	4630      	mov	r0, r6
 8008a50:	f7f7 fbd6 	bl	8000200 <memchr>
 8008a54:	b108      	cbz	r0, 8008a5a <_printf_i+0x1e6>
 8008a56:	1b80      	subs	r0, r0, r6
 8008a58:	6060      	str	r0, [r4, #4]
 8008a5a:	6863      	ldr	r3, [r4, #4]
 8008a5c:	6123      	str	r3, [r4, #16]
 8008a5e:	2300      	movs	r3, #0
 8008a60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a64:	e7aa      	b.n	80089bc <_printf_i+0x148>
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	4632      	mov	r2, r6
 8008a6a:	4649      	mov	r1, r9
 8008a6c:	4640      	mov	r0, r8
 8008a6e:	47d0      	blx	sl
 8008a70:	3001      	adds	r0, #1
 8008a72:	d0ad      	beq.n	80089d0 <_printf_i+0x15c>
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	079b      	lsls	r3, r3, #30
 8008a78:	d413      	bmi.n	8008aa2 <_printf_i+0x22e>
 8008a7a:	68e0      	ldr	r0, [r4, #12]
 8008a7c:	9b03      	ldr	r3, [sp, #12]
 8008a7e:	4298      	cmp	r0, r3
 8008a80:	bfb8      	it	lt
 8008a82:	4618      	movlt	r0, r3
 8008a84:	e7a6      	b.n	80089d4 <_printf_i+0x160>
 8008a86:	2301      	movs	r3, #1
 8008a88:	4632      	mov	r2, r6
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	4640      	mov	r0, r8
 8008a8e:	47d0      	blx	sl
 8008a90:	3001      	adds	r0, #1
 8008a92:	d09d      	beq.n	80089d0 <_printf_i+0x15c>
 8008a94:	3501      	adds	r5, #1
 8008a96:	68e3      	ldr	r3, [r4, #12]
 8008a98:	9903      	ldr	r1, [sp, #12]
 8008a9a:	1a5b      	subs	r3, r3, r1
 8008a9c:	42ab      	cmp	r3, r5
 8008a9e:	dcf2      	bgt.n	8008a86 <_printf_i+0x212>
 8008aa0:	e7eb      	b.n	8008a7a <_printf_i+0x206>
 8008aa2:	2500      	movs	r5, #0
 8008aa4:	f104 0619 	add.w	r6, r4, #25
 8008aa8:	e7f5      	b.n	8008a96 <_printf_i+0x222>
 8008aaa:	bf00      	nop
 8008aac:	080092ce 	.word	0x080092ce
 8008ab0:	080092df 	.word	0x080092df

08008ab4 <memmove>:
 8008ab4:	4288      	cmp	r0, r1
 8008ab6:	b510      	push	{r4, lr}
 8008ab8:	eb01 0402 	add.w	r4, r1, r2
 8008abc:	d902      	bls.n	8008ac4 <memmove+0x10>
 8008abe:	4284      	cmp	r4, r0
 8008ac0:	4623      	mov	r3, r4
 8008ac2:	d807      	bhi.n	8008ad4 <memmove+0x20>
 8008ac4:	1e43      	subs	r3, r0, #1
 8008ac6:	42a1      	cmp	r1, r4
 8008ac8:	d008      	beq.n	8008adc <memmove+0x28>
 8008aca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ace:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ad2:	e7f8      	b.n	8008ac6 <memmove+0x12>
 8008ad4:	4402      	add	r2, r0
 8008ad6:	4601      	mov	r1, r0
 8008ad8:	428a      	cmp	r2, r1
 8008ada:	d100      	bne.n	8008ade <memmove+0x2a>
 8008adc:	bd10      	pop	{r4, pc}
 8008ade:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ae2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ae6:	e7f7      	b.n	8008ad8 <memmove+0x24>

08008ae8 <_sbrk_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4d06      	ldr	r5, [pc, #24]	@ (8008b04 <_sbrk_r+0x1c>)
 8008aec:	2300      	movs	r3, #0
 8008aee:	4604      	mov	r4, r0
 8008af0:	4608      	mov	r0, r1
 8008af2:	602b      	str	r3, [r5, #0]
 8008af4:	f7f9 fcd4 	bl	80024a0 <_sbrk>
 8008af8:	1c43      	adds	r3, r0, #1
 8008afa:	d102      	bne.n	8008b02 <_sbrk_r+0x1a>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	b103      	cbz	r3, 8008b02 <_sbrk_r+0x1a>
 8008b00:	6023      	str	r3, [r4, #0]
 8008b02:	bd38      	pop	{r3, r4, r5, pc}
 8008b04:	20019510 	.word	0x20019510

08008b08 <_realloc_r>:
 8008b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b0c:	4680      	mov	r8, r0
 8008b0e:	4615      	mov	r5, r2
 8008b10:	460c      	mov	r4, r1
 8008b12:	b921      	cbnz	r1, 8008b1e <_realloc_r+0x16>
 8008b14:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b18:	4611      	mov	r1, r2
 8008b1a:	f7ff bc59 	b.w	80083d0 <_malloc_r>
 8008b1e:	b92a      	cbnz	r2, 8008b2c <_realloc_r+0x24>
 8008b20:	f7ff fbea 	bl	80082f8 <_free_r>
 8008b24:	2400      	movs	r4, #0
 8008b26:	4620      	mov	r0, r4
 8008b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2c:	f000 f81a 	bl	8008b64 <_malloc_usable_size_r>
 8008b30:	4285      	cmp	r5, r0
 8008b32:	4606      	mov	r6, r0
 8008b34:	d802      	bhi.n	8008b3c <_realloc_r+0x34>
 8008b36:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008b3a:	d8f4      	bhi.n	8008b26 <_realloc_r+0x1e>
 8008b3c:	4629      	mov	r1, r5
 8008b3e:	4640      	mov	r0, r8
 8008b40:	f7ff fc46 	bl	80083d0 <_malloc_r>
 8008b44:	4607      	mov	r7, r0
 8008b46:	2800      	cmp	r0, #0
 8008b48:	d0ec      	beq.n	8008b24 <_realloc_r+0x1c>
 8008b4a:	42b5      	cmp	r5, r6
 8008b4c:	462a      	mov	r2, r5
 8008b4e:	4621      	mov	r1, r4
 8008b50:	bf28      	it	cs
 8008b52:	4632      	movcs	r2, r6
 8008b54:	f7ff fbc2 	bl	80082dc <memcpy>
 8008b58:	4621      	mov	r1, r4
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	f7ff fbcc 	bl	80082f8 <_free_r>
 8008b60:	463c      	mov	r4, r7
 8008b62:	e7e0      	b.n	8008b26 <_realloc_r+0x1e>

08008b64 <_malloc_usable_size_r>:
 8008b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b68:	1f18      	subs	r0, r3, #4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bfbc      	itt	lt
 8008b6e:	580b      	ldrlt	r3, [r1, r0]
 8008b70:	18c0      	addlt	r0, r0, r3
 8008b72:	4770      	bx	lr

08008b74 <_init>:
 8008b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b76:	bf00      	nop
 8008b78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b7a:	bc08      	pop	{r3}
 8008b7c:	469e      	mov	lr, r3
 8008b7e:	4770      	bx	lr

08008b80 <_fini>:
 8008b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b82:	bf00      	nop
 8008b84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b86:	bc08      	pop	{r3}
 8008b88:	469e      	mov	lr, r3
 8008b8a:	4770      	bx	lr
