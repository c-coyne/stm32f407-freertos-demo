
FreeRTOSDemoProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b0c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  08008c9c  08008c9c  00009c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009490  08009490  0000b0c0  2**0
                  CONTENTS
  4 .ARM          00000008  08009490  08009490  0000a490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009498  08009498  0000b0c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009498  08009498  0000a498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800949c  0800949c  0000a49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c0  20000000  080094a0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0c0  2**0
                  CONTENTS
 10 .bss          00019464  200000c0  200000c0  0000b0c0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20019524  20019524  0000b0c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0c0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016385  00000000  00000000  0000b0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003904  00000000  00000000  00021475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013a8  00000000  00000000  00024d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f3d  00000000  00000000  00026128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000246c1  00000000  00000000  00027065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001842b  00000000  00000000  0004b726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db2e9  00000000  00000000  00063b51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0013ee3a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005798  00000000  00000000  0013ee80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00144618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008c84 	.word	0x08008c84

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	08008c84 	.word	0x08008c84

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <led_task>:
 * @note The task must be notified when a new command is available.									   *
 * @note The function utilizes software timers to control LED effects.								   *
 ******************************************************************************************************/

void led_task(void *param)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;
	int freq = 2; // Frequency in Hz
 8000d84:	2302      	movs	r3, #2
 8000d86:	60bb      	str	r3, [r7, #8]
	int period = 500; // Period in ms
 8000d88:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000d8c:	617b      	str	r3, [r7, #20]

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2300      	movs	r3, #0
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f006 f802 	bl	8006da4 <xTaskGenericNotifyWait>

		// Display LED menu for the user
		xQueueSend(q_print, &msg_led_menu, portMAX_DELAY);
 8000da0:	4b7d      	ldr	r3, [pc, #500]	@ (8000f98 <led_task+0x21c>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	2300      	movs	r3, #0
 8000da6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000daa:	497c      	ldr	r1, [pc, #496]	@ (8000f9c <led_task+0x220>)
 8000dac:	f004 fd2c 	bl	8005808 <xQueueGenericSend>

		// Wait for the user to select their desired LED effect
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8000db0:	f107 030c 	add.w	r3, r7, #12
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db8:	9200      	str	r2, [sp, #0]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f005 fff0 	bl	8006da4 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	613b      	str	r3, [r7, #16]

		// Process command, adjust LED state, and set software timers accordingly
		if(msg->len <= 4) {
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	f200 80cb 	bhi.w	8000f68 <led_task+0x1ec>
			if(!strcmp((char*)msg->payload, "None"))			// No effect
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4972      	ldr	r1, [pc, #456]	@ (8000fa0 <led_task+0x224>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff f9fa 	bl	80001d0 <strcmp>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d109      	bne.n	8000df6 <led_task+0x7a>
			{
				set_led_timer(effectNone);
 8000de2:	2004      	movs	r0, #4
 8000de4:	f000 f912 	bl	800100c <set_led_timer>
				curr_led_state = sNone;
 8000de8:	4b6e      	ldr	r3, [pc, #440]	@ (8000fa4 <led_task+0x228>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	701a      	strb	r2, [r3, #0]
				control_all_leds(LED_OFF);
 8000dee:	2000      	movs	r0, #0
 8000df0:	f000 f93e 	bl	8001070 <control_all_leds>
 8000df4:	e0c0      	b.n	8000f78 <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E1")) {		// E1 effect
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	496b      	ldr	r1, [pc, #428]	@ (8000fa8 <led_task+0x22c>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff f9e8 	bl	80001d0 <strcmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d106      	bne.n	8000e14 <led_task+0x98>
				curr_led_state = sEffectE1;
 8000e06:	4b67      	ldr	r3, [pc, #412]	@ (8000fa4 <led_task+0x228>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE1);
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 f8fd 	bl	800100c <set_led_timer>
 8000e12:	e0b1      	b.n	8000f78 <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E2")) {		// E2 effect
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4965      	ldr	r1, [pc, #404]	@ (8000fac <led_task+0x230>)
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f7ff f9d9 	bl	80001d0 <strcmp>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d106      	bne.n	8000e32 <led_task+0xb6>
				curr_led_state = sEffectE2;
 8000e24:	4b5f      	ldr	r3, [pc, #380]	@ (8000fa4 <led_task+0x228>)
 8000e26:	2201      	movs	r2, #1
 8000e28:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE2);
 8000e2a:	2001      	movs	r0, #1
 8000e2c:	f000 f8ee 	bl	800100c <set_led_timer>
 8000e30:	e0a2      	b.n	8000f78 <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E3")) {		// E3 effect
 8000e32:	693b      	ldr	r3, [r7, #16]
 8000e34:	495e      	ldr	r1, [pc, #376]	@ (8000fb0 <led_task+0x234>)
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff f9ca 	bl	80001d0 <strcmp>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d106      	bne.n	8000e50 <led_task+0xd4>
				curr_led_state = sEffectE3;
 8000e42:	4b58      	ldr	r3, [pc, #352]	@ (8000fa4 <led_task+0x228>)
 8000e44:	2202      	movs	r2, #2
 8000e46:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE3);
 8000e48:	2002      	movs	r0, #2
 8000e4a:	f000 f8df 	bl	800100c <set_led_timer>
 8000e4e:	e093      	b.n	8000f78 <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E4")) {		// E4 effect
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	4958      	ldr	r1, [pc, #352]	@ (8000fb4 <led_task+0x238>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff f9bb 	bl	80001d0 <strcmp>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d106      	bne.n	8000e6e <led_task+0xf2>
				curr_led_state = sEffectE4;
 8000e60:	4b50      	ldr	r3, [pc, #320]	@ (8000fa4 <led_task+0x228>)
 8000e62:	2203      	movs	r2, #3
 8000e64:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE4);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 f8d0 	bl	800100c <set_led_timer>
 8000e6c:	e084      	b.n	8000f78 <led_task+0x1fc>
			}
			else if (parse_freq_string(msg, &freq)) {			// Frequency adjustment
 8000e6e:	f107 0308 	add.w	r3, r7, #8
 8000e72:	4619      	mov	r1, r3
 8000e74:	6938      	ldr	r0, [r7, #16]
 8000e76:	f000 f9ef 	bl	8001258 <parse_freq_string>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d055      	beq.n	8000f2c <led_task+0x1b0>
				// Check that there is an active effect
				if(sNone == curr_led_state) {
 8000e80:	4b48      	ldr	r3, [pc, #288]	@ (8000fa4 <led_task+0x228>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	d108      	bne.n	8000e9a <led_task+0x11e>
					xQueueSend(q_print, &msg_no_active_effect, portMAX_DELAY);
 8000e88:	4b43      	ldr	r3, [pc, #268]	@ (8000f98 <led_task+0x21c>)
 8000e8a:	6818      	ldr	r0, [r3, #0]
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e92:	4949      	ldr	r1, [pc, #292]	@ (8000fb8 <led_task+0x23c>)
 8000e94:	f004 fcb8 	bl	8005808 <xQueueGenericSend>
 8000e98:	e06e      	b.n	8000f78 <led_task+0x1fc>
				}
				// Check that frequency is between 1 and 10 Hz
				else if(freq > 10) {
 8000e9a:	68bb      	ldr	r3, [r7, #8]
 8000e9c:	2b0a      	cmp	r3, #10
 8000e9e:	dd08      	ble.n	8000eb2 <led_task+0x136>
					xQueueSend(q_print, &msg_inv_freq, portMAX_DELAY);
 8000ea0:	4b3d      	ldr	r3, [pc, #244]	@ (8000f98 <led_task+0x21c>)
 8000ea2:	6818      	ldr	r0, [r3, #0]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000eaa:	4944      	ldr	r1, [pc, #272]	@ (8000fbc <led_task+0x240>)
 8000eac:	f004 fcac 	bl	8005808 <xQueueGenericSend>
 8000eb0:	e062      	b.n	8000f78 <led_task+0x1fc>
				}
				// Change timer frequency
				else {
					period = (1.0 / freq) * 1000;
 8000eb2:	68bb      	ldr	r3, [r7, #8]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fb45 	bl	8000544 <__aeabi_i2d>
 8000eba:	4602      	mov	r2, r0
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	f04f 0000 	mov.w	r0, #0
 8000ec2:	493f      	ldr	r1, [pc, #252]	@ (8000fc0 <led_task+0x244>)
 8000ec4:	f7ff fcd2 	bl	800086c <__aeabi_ddiv>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f04f 0200 	mov.w	r2, #0
 8000ed4:	4b3b      	ldr	r3, [pc, #236]	@ (8000fc4 <led_task+0x248>)
 8000ed6:	f7ff fb9f 	bl	8000618 <__aeabi_dmul>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff fdab 	bl	8000a3c <__aeabi_d2iz>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	617b      	str	r3, [r7, #20]
					if (xTimerChangePeriod(handle_led_timer[curr_led_state], pdMS_TO_TICKS(period), 0) != pdPASS) {
 8000eea:	4b2e      	ldr	r3, [pc, #184]	@ (8000fa4 <led_task+0x228>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b35      	ldr	r3, [pc, #212]	@ (8000fc8 <led_task+0x24c>)
 8000ef2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000efc:	fb02 f303 	mul.w	r3, r2, r3
 8000f00:	4a32      	ldr	r2, [pc, #200]	@ (8000fcc <led_task+0x250>)
 8000f02:	fba2 2303 	umull	r2, r3, r2, r3
 8000f06:	099a      	lsrs	r2, r3, #6
 8000f08:	2300      	movs	r3, #0
 8000f0a:	9300      	str	r3, [sp, #0]
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	2104      	movs	r1, #4
 8000f10:	f006 faaa 	bl	8007468 <xTimerGenericCommand>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d02e      	beq.n	8000f78 <led_task+0x1fc>
						// If frequency update was not successful, notify the user
						xQueueSend(q_print, &msg_err_freq, portMAX_DELAY);
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <led_task+0x21c>)
 8000f1c:	6818      	ldr	r0, [r3, #0]
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f24:	492a      	ldr	r1, [pc, #168]	@ (8000fd0 <led_task+0x254>)
 8000f26:	f004 fc6f 	bl	8005808 <xQueueGenericSend>
 8000f2a:	e025      	b.n	8000f78 <led_task+0x1fc>
					}
				}
			}
			else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	4929      	ldr	r1, [pc, #164]	@ (8000fd4 <led_task+0x258>)
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff f94d 	bl	80001d0 <strcmp>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10c      	bne.n	8000f56 <led_task+0x1da>
				// Update the system state
				curr_sys_state = sMainMenu;
 8000f3c:	4b26      	ldr	r3, [pc, #152]	@ (8000fd8 <led_task+0x25c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	701a      	strb	r2, [r3, #0]

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <led_task+0x260>)
 8000f44:	6818      	ldr	r0, [r3, #0]
 8000f46:	2300      	movs	r3, #0
 8000f48:	9300      	str	r3, [sp, #0]
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	2100      	movs	r1, #0
 8000f50:	f005 ffa8 	bl	8006ea4 <xTaskGenericNotify>
 8000f54:	e010      	b.n	8000f78 <led_task+0x1fc>
			}
			else												// Invalid response
				xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 8000f56:	4b10      	ldr	r3, [pc, #64]	@ (8000f98 <led_task+0x21c>)
 8000f58:	6818      	ldr	r0, [r3, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f60:	491f      	ldr	r1, [pc, #124]	@ (8000fe0 <led_task+0x264>)
 8000f62:	f004 fc51 	bl	8005808 <xQueueGenericSend>
 8000f66:	e007      	b.n	8000f78 <led_task+0x1fc>
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 8000f68:	4b0b      	ldr	r3, [pc, #44]	@ (8000f98 <led_task+0x21c>)
 8000f6a:	6818      	ldr	r0, [r3, #0]
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f72:	491b      	ldr	r1, [pc, #108]	@ (8000fe0 <led_task+0x264>)
 8000f74:	f004 fc48 	bl	8005808 <xQueueGenericSend>
		}

		// Notify self / led task if not returning to the main menu
		if (sLedMenu == curr_sys_state)
 8000f78:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <led_task+0x25c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	f47f af06 	bne.w	8000d8e <led_task+0x12>
			xTaskNotify(handle_led_task, 0, eNoAction);
 8000f82:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <led_task+0x268>)
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	2300      	movs	r3, #0
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	f005 ff88 	bl	8006ea4 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000f94:	e6fb      	b.n	8000d8e <led_task+0x12>
 8000f96:	bf00      	nop
 8000f98:	200001c8 	.word	0x200001c8
 8000f9c:	20000010 	.word	0x20000010
 8000fa0:	08008ee4 	.word	0x08008ee4
 8000fa4:	20000014 	.word	0x20000014
 8000fa8:	08008eec 	.word	0x08008eec
 8000fac:	08008ef0 	.word	0x08008ef0
 8000fb0:	08008ef4 	.word	0x08008ef4
 8000fb4:	08008ef8 	.word	0x08008ef8
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	2000000c 	.word	0x2000000c
 8000fc0:	3ff00000 	.word	0x3ff00000
 8000fc4:	408f4000 	.word	0x408f4000
 8000fc8:	200001d0 	.word	0x200001d0
 8000fcc:	10624dd3 	.word	0x10624dd3
 8000fd0:	20000008 	.word	0x20000008
 8000fd4:	08008efc 	.word	0x08008efc
 8000fd8:	200001e1 	.word	0x200001e1
 8000fdc:	200001b4 	.word	0x200001b4
 8000fe0:	20000000 	.word	0x20000000
 8000fe4:	200001c0 	.word	0x200001c0

08000fe8 <led_callback>:
 * @note The function assumes that the timer IDs correspond directly to the LED effects to be executed *
 *       and relies on proper timer setup and management by the calling code.						   *
 ******************************************************************************************************/

void led_callback(TimerHandle_t xTimer)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
	// Get timer ID
	int id = (uint32_t)pvTimerGetTimerID(xTimer);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f006 fd23 	bl	8007a3c <pvTimerGetTimerID>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	60fb      	str	r3, [r7, #12]

	// LED effects correspond to timer ID's
	int effect = id;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
	execute_led_effect(effect);
 8000ffe:	68b8      	ldr	r0, [r7, #8]
 8001000:	f000 f8c4 	bl	800118c <execute_led_effect>
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <set_led_timer>:
 * @note This function assumes that `handle_led_timer[]` array is properly initialized and contains    *
 *       valid FreeRTOS software timer handles for each LED effect.									   *
 ******************************************************************************************************/

void set_led_timer(led_effect_t effect)
{
 800100c:	b590      	push	{r4, r7, lr}
 800100e:	b087      	sub	sp, #28
 8001010:	af02      	add	r7, sp, #8
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	// Turn off all timers
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e00e      	b.n	800103a <set_led_timer+0x2e>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 800101c:	4a13      	ldr	r2, [pc, #76]	@ (800106c <set_led_timer+0x60>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001024:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001028:	9300      	str	r3, [sp, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	2200      	movs	r2, #0
 800102e:	2103      	movs	r1, #3
 8001030:	f006 fa1a 	bl	8007468 <xTimerGenericCommand>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3301      	adds	r3, #1
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b03      	cmp	r3, #3
 800103e:	dded      	ble.n	800101c <set_led_timer+0x10>
	}

	// Start the selected timer
	if(effectNone != effect) {
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	2b04      	cmp	r3, #4
 8001044:	d00e      	beq.n	8001064 <set_led_timer+0x58>
		xTimerStart(handle_led_timer[effect], portMAX_DELAY);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4a08      	ldr	r2, [pc, #32]	@ (800106c <set_led_timer+0x60>)
 800104a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800104e:	f005 faf7 	bl	8006640 <xTaskGetTickCount>
 8001052:	4602      	mov	r2, r0
 8001054:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2300      	movs	r3, #0
 800105c:	2101      	movs	r1, #1
 800105e:	4620      	mov	r0, r4
 8001060:	f006 fa02 	bl	8007468 <xTimerGenericCommand>
	}
}
 8001064:	bf00      	nop
 8001066:	3714      	adds	r7, #20
 8001068:	46bd      	mov	sp, r7
 800106a:	bd90      	pop	{r4, r7, pc}
 800106c:	200001d0 	.word	0x200001d0

08001070 <control_all_leds>:
 * 																									   *
 * @note This function assumes that the macros for each on-board LED are configured correctly.	       *
 ******************************************************************************************************/

void control_all_leds(int state)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, state);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	b2db      	uxtb	r3, r3
 800107c:	461a      	mov	r2, r3
 800107e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001082:	480f      	ldr	r0, [pc, #60]	@ (80010c0 <control_all_leds+0x50>)
 8001084:	f001 fe52 	bl	8002d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, state);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	b2db      	uxtb	r3, r3
 800108c:	461a      	mov	r2, r3
 800108e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001092:	480b      	ldr	r0, [pc, #44]	@ (80010c0 <control_all_leds+0x50>)
 8001094:	f001 fe4a 	bl	8002d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, state);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010a2:	4807      	ldr	r0, [pc, #28]	@ (80010c0 <control_all_leds+0x50>)
 80010a4:	f001 fe42 	bl	8002d2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, state);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	b2db      	uxtb	r3, r3
 80010ac:	461a      	mov	r2, r3
 80010ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010b2:	4803      	ldr	r0, [pc, #12]	@ (80010c0 <control_all_leds+0x50>)
 80010b4:	f001 fe3a 	bl	8002d2c <HAL_GPIO_WritePin>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40020c00 	.word	0x40020c00

080010c4 <control_led_group>:
 * @note The provided `led_mode` specifies which LED group should be turned on (ex. LED_EVEN). The	   *
 *       other LED group (ex. LED_ODD) will be turned off.											   *
 ******************************************************************************************************/

void control_led_group(int led_mode)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	// Turn on even LEDs
	if(LED_EVEN == led_mode) {
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d118      	bne.n	8001104 <control_led_group+0x40>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 80010d2:	2200      	movs	r2, #0
 80010d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010d8:	4818      	ldr	r0, [pc, #96]	@ (800113c <control_led_group+0x78>)
 80010da:	f001 fe27 	bl	8002d2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80010e4:	4815      	ldr	r0, [pc, #84]	@ (800113c <control_led_group+0x78>)
 80010e6:	f001 fe21 	bl	8002d2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f0:	4812      	ldr	r0, [pc, #72]	@ (800113c <control_led_group+0x78>)
 80010f2:	f001 fe1b 	bl	8002d2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 80010f6:	2201      	movs	r2, #1
 80010f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80010fc:	480f      	ldr	r0, [pc, #60]	@ (800113c <control_led_group+0x78>)
 80010fe:	f001 fe15 	bl	8002d2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
	}
}
 8001102:	e017      	b.n	8001134 <control_led_group+0x70>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110a:	480c      	ldr	r0, [pc, #48]	@ (800113c <control_led_group+0x78>)
 800110c:	f001 fe0e 	bl	8002d2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001116:	4809      	ldr	r0, [pc, #36]	@ (800113c <control_led_group+0x78>)
 8001118:	f001 fe08 	bl	8002d2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
 800111c:	2201      	movs	r2, #1
 800111e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001122:	4806      	ldr	r0, [pc, #24]	@ (800113c <control_led_group+0x78>)
 8001124:	f001 fe02 	bl	8002d2c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800112e:	4803      	ldr	r0, [pc, #12]	@ (800113c <control_led_group+0x78>)
 8001130:	f001 fdfc 	bl	8002d2c <HAL_GPIO_WritePin>
}
 8001134:	bf00      	nop
 8001136:	3708      	adds	r7, #8
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40020c00 	.word	0x40020c00

08001140 <control_single_led>:
 * @note `config` dictates the LED states, ex. 0x05 = 0101 = Green and Red LEDs on, Orange and Blue    *
 *       LEDs off.																					   *
 ******************************************************************************************************/

void control_single_led(int config)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	// Orange		LD3			GPIO_PIN_13		0x2000  //
	// Red			LD5			GPIO_PIN_14		0x4000  //
	// Blue			LD6			GPIO_PIN_15		0x8000  //
	//////////////////////////////////////////////////////

	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	e014      	b.n	8001178 <control_single_led+0x38>
		HAL_GPIO_WritePin(GREEN_LED_PORT, (GREEN_LED_PIN << i), ((config >> i) & 0x1));
 800114e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	b299      	uxth	r1, r3
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	fa42 f303 	asr.w	r3, r2, r3
 8001162:	b2db      	uxtb	r3, r3
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
 800116a:	461a      	mov	r2, r3
 800116c:	4806      	ldr	r0, [pc, #24]	@ (8001188 <control_single_led+0x48>)
 800116e:	f001 fddd 	bl	8002d2c <HAL_GPIO_WritePin>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	3301      	adds	r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	2b03      	cmp	r3, #3
 800117c:	dde7      	ble.n	800114e <control_single_led+0xe>
	}
}
 800117e:	bf00      	nop
 8001180:	bf00      	nop
 8001182:	3710      	adds	r7, #16
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40020c00 	.word	0x40020c00

0800118c <execute_led_effect>:
 * @note This function assumes that functions `control_all_leds()`, `control_led_group()`, and 		   *
 *       `control_single_led()` are implemented to control the LEDs accordingly.			 		   *
 ******************************************************************************************************/

void execute_led_effect(int effect)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	// Flag used for effects E1 and E2
	static int flag = 1;
	// i and used for effects E3 and E4
	static int i = 0;

	switch(effect) {
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b03      	cmp	r3, #3
 8001198:	d854      	bhi.n	8001244 <execute_led_effect+0xb8>
 800119a:	a201      	add	r2, pc, #4	@ (adr r2, 80011a0 <execute_led_effect+0x14>)
 800119c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a0:	080011b1 	.word	0x080011b1
 80011a4:	080011d5 	.word	0x080011d5
 80011a8:	080011f9 	.word	0x080011f9
 80011ac:	0800121f 	.word	0x0800121f
		case effectE1:
			// Flash all LEDs in unison
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 80011b0:	4b27      	ldr	r3, [pc, #156]	@ (8001250 <execute_led_effect+0xc4>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f083 0301 	eor.w	r3, r3, #1
 80011b8:	4a25      	ldr	r2, [pc, #148]	@ (8001250 <execute_led_effect+0xc4>)
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b24      	ldr	r3, [pc, #144]	@ (8001250 <execute_led_effect+0xc4>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <execute_led_effect+0x40>
 80011c4:	2000      	movs	r0, #0
 80011c6:	f7ff ff53 	bl	8001070 <control_all_leds>
			break;
 80011ca:	e03c      	b.n	8001246 <execute_led_effect+0xba>
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 80011cc:	2001      	movs	r0, #1
 80011ce:	f7ff ff4f 	bl	8001070 <control_all_leds>
			break;
 80011d2:	e038      	b.n	8001246 <execute_led_effect+0xba>
		case effectE2:
			// Flash even and odd LEDs back and forth
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 80011d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001250 <execute_led_effect+0xc4>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f083 0301 	eor.w	r3, r3, #1
 80011dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001250 <execute_led_effect+0xc4>)
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001250 <execute_led_effect+0xc4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <execute_led_effect+0x64>
 80011e8:	2000      	movs	r0, #0
 80011ea:	f7ff ff6b 	bl	80010c4 <control_led_group>
			break;
 80011ee:	e02a      	b.n	8001246 <execute_led_effect+0xba>
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff ff67 	bl	80010c4 <control_led_group>
			break;
 80011f6:	e026      	b.n	8001246 <execute_led_effect+0xba>
		case effectE3:
			// Move the illuminated LED around the circle of on-board LEDs
			control_single_led(0x1 << (i++ % 4));
 80011f8:	4b16      	ldr	r3, [pc, #88]	@ (8001254 <execute_led_effect+0xc8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1c5a      	adds	r2, r3, #1
 80011fe:	4915      	ldr	r1, [pc, #84]	@ (8001254 <execute_led_effect+0xc8>)
 8001200:	600a      	str	r2, [r1, #0]
 8001202:	425a      	negs	r2, r3
 8001204:	f003 0303 	and.w	r3, r3, #3
 8001208:	f002 0203 	and.w	r2, r2, #3
 800120c:	bf58      	it	pl
 800120e:	4253      	negpl	r3, r2
 8001210:	2201      	movs	r2, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ff92 	bl	8001140 <control_single_led>
			break;
 800121c:	e013      	b.n	8001246 <execute_led_effect+0xba>
		case effectE4:
			// Move the illuminated LED around the circle of on-board LEDs in opposite direction of effect E3
			control_single_led(0x08 >> (i++ % 4));
 800121e:	4b0d      	ldr	r3, [pc, #52]	@ (8001254 <execute_led_effect+0xc8>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	1c5a      	adds	r2, r3, #1
 8001224:	490b      	ldr	r1, [pc, #44]	@ (8001254 <execute_led_effect+0xc8>)
 8001226:	600a      	str	r2, [r1, #0]
 8001228:	425a      	negs	r2, r3
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	f002 0203 	and.w	r2, r2, #3
 8001232:	bf58      	it	pl
 8001234:	4253      	negpl	r3, r2
 8001236:	2208      	movs	r2, #8
 8001238:	fa42 f303 	asr.w	r3, r2, r3
 800123c:	4618      	mov	r0, r3
 800123e:	f7ff ff7f 	bl	8001140 <control_single_led>
			break;
 8001242:	e000      	b.n	8001246 <execute_led_effect+0xba>
		default:
			break;
 8001244:	bf00      	nop
	}
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000018 	.word	0x20000018
 8001254:	200000dc 	.word	0x200000dc

08001258 <parse_freq_string>:
 *       validate the value range explicitly. It relies on other components to handle invalid values.  *
 ******************************************************************************************************/


int parse_freq_string(message_t *msg, int *freq_Hz)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
    // Check if the input string is at least 2 characters long (F and one digit)
    int len = strlen((char *)msg->payload);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4618      	mov	r0, r3
 8001266:	f7fe ffbd 	bl	80001e4 <strlen>
 800126a:	4603      	mov	r3, r0
 800126c:	60bb      	str	r3, [r7, #8]
    if (len < 2 || len > 4) return 0;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2b01      	cmp	r3, #1
 8001272:	dd02      	ble.n	800127a <parse_freq_string+0x22>
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b04      	cmp	r3, #4
 8001278:	dd01      	ble.n	800127e <parse_freq_string+0x26>
 800127a:	2300      	movs	r3, #0
 800127c:	e025      	b.n	80012ca <parse_freq_string+0x72>

    // Check if the first character is 'F'
    if (msg->payload[0] != 'F') return 0;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b46      	cmp	r3, #70	@ 0x46
 8001284:	d001      	beq.n	800128a <parse_freq_string+0x32>
 8001286:	2300      	movs	r3, #0
 8001288:	e01f      	b.n	80012ca <parse_freq_string+0x72>

    // Check if the remaining characters are digits
    for (int i = 1; i < len; i++)
 800128a:	2301      	movs	r3, #1
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	e010      	b.n	80012b2 <parse_freq_string+0x5a>
    {
        if (!isdigit(msg->payload[i])) return 0;
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4413      	add	r3, r2
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	3301      	adds	r3, #1
 800129a:	4a0e      	ldr	r2, [pc, #56]	@ (80012d4 <parse_freq_string+0x7c>)
 800129c:	4413      	add	r3, r2
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <parse_freq_string+0x54>
 80012a8:	2300      	movs	r3, #0
 80012aa:	e00e      	b.n	80012ca <parse_freq_string+0x72>
    for (int i = 1; i < len; i++)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3301      	adds	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	68fa      	ldr	r2, [r7, #12]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	dbea      	blt.n	8001290 <parse_freq_string+0x38>
    }

    // Convert the numeric part to an integer
    *freq_Hz = freq_str_to_int(msg, len);
 80012ba:	68b9      	ldr	r1, [r7, #8]
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f000 f80b 	bl	80012d8 <freq_str_to_int>
 80012c2:	4602      	mov	r2, r0
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	601a      	str	r2, [r3, #0]
    return 1;
 80012c8:	2301      	movs	r3, #1
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3710      	adds	r7, #16
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	0800935c 	.word	0x0800935c

080012d8 <freq_str_to_int>:
 *       invalid formats or edge cases (e.g., non-numeric characters). It relies on proper validation  *
 *       by the calling function.																	   *
 ******************************************************************************************************/

int freq_str_to_int(message_t *msg, int len)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
	int ret = 0;
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<len; i++) {
 80012e6:	2301      	movs	r3, #1
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	e00f      	b.n	800130c <freq_str_to_int+0x34>
		ret = ret * 10 + (msg->payload[i] - '0'); // Convert from ASCII to an integer
 80012ec:	68fa      	ldr	r2, [r7, #12]
 80012ee:	4613      	mov	r3, r2
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	4413      	add	r3, r2
 80012f4:	005b      	lsls	r3, r3, #1
 80012f6:	4619      	mov	r1, r3
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	3b30      	subs	r3, #48	@ 0x30
 8001302:	440b      	add	r3, r1
 8001304:	60fb      	str	r3, [r7, #12]
	for(int i=1; i<len; i++) {
 8001306:	68bb      	ldr	r3, [r7, #8]
 8001308:	3301      	adds	r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	dbeb      	blt.n	80012ec <freq_str_to_int+0x14>
	}

	return ret;
 8001314:	68fb      	ldr	r3, [r7, #12]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
	...

08001324 <rtc_task>:
/****************************************************
 *  Public functions                                *
 ****************************************************/

void rtc_task(void *param)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af02      	add	r7, sp, #8
 800132a:	6078      	str	r0, [r7, #4]
	message_t *msg;

	while(1) {

		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800132c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	2300      	movs	r3, #0
 8001334:	2200      	movs	r2, #0
 8001336:	2100      	movs	r1, #0
 8001338:	2000      	movs	r0, #0
 800133a:	f005 fd33 	bl	8006da4 <xTaskGenericNotifyWait>

		while(curr_sys_state != sMainMenu) {
 800133e:	e1e5      	b.n	800170c <rtc_task+0x3e8>

			switch(curr_sys_state) {
 8001340:	4bb3      	ldr	r3, [pc, #716]	@ (8001610 <rtc_task+0x2ec>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b04      	cmp	r3, #4
 8001346:	f000 8116 	beq.w	8001576 <rtc_task+0x252>
 800134a:	2b04      	cmp	r3, #4
 800134c:	f300 81cf 	bgt.w	80016ee <rtc_task+0x3ca>
 8001350:	2b02      	cmp	r3, #2
 8001352:	d002      	beq.n	800135a <rtc_task+0x36>
 8001354:	2b03      	cmp	r3, #3
 8001356:	d07a      	beq.n	800144e <rtc_task+0x12a>
 8001358:	e1c9      	b.n	80016ee <rtc_task+0x3ca>
				case sRtcMenu:
					// Display RTC menu for the user
					xQueueSend(q_print, &msg_rtc_menu_1, portMAX_DELAY);
 800135a:	4bae      	ldr	r3, [pc, #696]	@ (8001614 <rtc_task+0x2f0>)
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	2300      	movs	r3, #0
 8001360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001364:	49ac      	ldr	r1, [pc, #688]	@ (8001618 <rtc_task+0x2f4>)
 8001366:	f004 fa4f 	bl	8005808 <xQueueGenericSend>
					show_time_date();
 800136a:	f000 fa6d 	bl	8001848 <show_time_date>
					xQueueSend(q_print, &msg_rtc_menu_2, portMAX_DELAY);
 800136e:	4ba9      	ldr	r3, [pc, #676]	@ (8001614 <rtc_task+0x2f0>)
 8001370:	6818      	ldr	r0, [r3, #0]
 8001372:	2300      	movs	r3, #0
 8001374:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001378:	49a8      	ldr	r1, [pc, #672]	@ (800161c <rtc_task+0x2f8>)
 800137a:	f004 fa45 	bl	8005808 <xQueueGenericSend>

					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 800137e:	f107 0308 	add.w	r3, r7, #8
 8001382:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001386:	9200      	str	r2, [sp, #0]
 8001388:	2200      	movs	r2, #0
 800138a:	2100      	movs	r1, #0
 800138c:	2000      	movs	r0, #0
 800138e:	f005 fd09 	bl	8006da4 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	617b      	str	r3, [r7, #20]

					// Process command, update date / time accordingly
					if(msg->len <= 4) {
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	2b04      	cmp	r3, #4
 800139c:	d84b      	bhi.n	8001436 <rtc_task+0x112>
						if(!strcmp((char*)msg->payload, "Date")) {			// Configure date
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	499f      	ldr	r1, [pc, #636]	@ (8001620 <rtc_task+0x2fc>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe ff14 	bl	80001d0 <strcmp>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d10b      	bne.n	80013c6 <rtc_task+0xa2>
							curr_sys_state = sRtcDateConfig;
 80013ae:	4b98      	ldr	r3, [pc, #608]	@ (8001610 <rtc_task+0x2ec>)
 80013b0:	2203      	movs	r2, #3
 80013b2:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 80013b4:	4b97      	ldr	r3, [pc, #604]	@ (8001614 <rtc_task+0x2f0>)
 80013b6:	6818      	ldr	r0, [r3, #0]
 80013b8:	2300      	movs	r3, #0
 80013ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013be:	4999      	ldr	r1, [pc, #612]	@ (8001624 <rtc_task+0x300>)
 80013c0:	f004 fa22 	bl	8005808 <xQueueGenericSend>
					else {
						// If user input is longer than 4 characters, notify user of invalid response
						curr_sys_state = sMainMenu;
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
					}
					break;
 80013c4:	e1a2      	b.n	800170c <rtc_task+0x3e8>
						else if (!strcmp((char*)msg->payload, "Time")) {	// Configure time
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	4997      	ldr	r1, [pc, #604]	@ (8001628 <rtc_task+0x304>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7fe ff00 	bl	80001d0 <strcmp>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10b      	bne.n	80013ee <rtc_task+0xca>
							curr_sys_state = sRtcTimeConfig;
 80013d6:	4b8e      	ldr	r3, [pc, #568]	@ (8001610 <rtc_task+0x2ec>)
 80013d8:	2204      	movs	r2, #4
 80013da:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 80013dc:	4b8d      	ldr	r3, [pc, #564]	@ (8001614 <rtc_task+0x2f0>)
 80013de:	6818      	ldr	r0, [r3, #0]
 80013e0:	2300      	movs	r3, #0
 80013e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80013e6:	4991      	ldr	r1, [pc, #580]	@ (800162c <rtc_task+0x308>)
 80013e8:	f004 fa0e 	bl	8005808 <xQueueGenericSend>
					break;
 80013ec:	e18e      	b.n	800170c <rtc_task+0x3e8>
						else if (!strcmp((char*)msg->payload, "Rfsh")) {	// Refresh the date and time
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	498f      	ldr	r1, [pc, #572]	@ (8001630 <rtc_task+0x30c>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7fe feec 	bl	80001d0 <strcmp>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d103      	bne.n	8001406 <rtc_task+0xe2>
							curr_sys_state = sRtcMenu;
 80013fe:	4b84      	ldr	r3, [pc, #528]	@ (8001610 <rtc_task+0x2ec>)
 8001400:	2202      	movs	r2, #2
 8001402:	701a      	strb	r2, [r3, #0]
					break;
 8001404:	e182      	b.n	800170c <rtc_task+0x3e8>
						else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	498a      	ldr	r1, [pc, #552]	@ (8001634 <rtc_task+0x310>)
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe fee0 	bl	80001d0 <strcmp>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d103      	bne.n	800141e <rtc_task+0xfa>
							curr_sys_state = sMainMenu;
 8001416:	4b7e      	ldr	r3, [pc, #504]	@ (8001610 <rtc_task+0x2ec>)
 8001418:	2200      	movs	r2, #0
 800141a:	701a      	strb	r2, [r3, #0]
					break;
 800141c:	e176      	b.n	800170c <rtc_task+0x3e8>
							curr_sys_state = sMainMenu;
 800141e:	4b7c      	ldr	r3, [pc, #496]	@ (8001610 <rtc_task+0x2ec>)
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001424:	4b7b      	ldr	r3, [pc, #492]	@ (8001614 <rtc_task+0x2f0>)
 8001426:	6818      	ldr	r0, [r3, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800142e:	4982      	ldr	r1, [pc, #520]	@ (8001638 <rtc_task+0x314>)
 8001430:	f004 f9ea 	bl	8005808 <xQueueGenericSend>
					break;
 8001434:	e16a      	b.n	800170c <rtc_task+0x3e8>
						curr_sys_state = sMainMenu;
 8001436:	4b76      	ldr	r3, [pc, #472]	@ (8001610 <rtc_task+0x2ec>)
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 800143c:	4b75      	ldr	r3, [pc, #468]	@ (8001614 <rtc_task+0x2f0>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	2300      	movs	r3, #0
 8001442:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001446:	497c      	ldr	r1, [pc, #496]	@ (8001638 <rtc_task+0x314>)
 8001448:	f004 f9de 	bl	8005808 <xQueueGenericSend>
					break;
 800144c:	e15e      	b.n	800170c <rtc_task+0x3e8>
				case sRtcDateConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 800144e:	f107 0308 	add.w	r3, r7, #8
 8001452:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001456:	9200      	str	r2, [sp, #0]
 8001458:	2200      	movs	r2, #0
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f005 fca1 	bl	8006da4 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001462:	68bb      	ldr	r3, [r7, #8]
 8001464:	617b      	str	r3, [r7, #20]

					// Configure month, date, year, or day of week accordingly
					switch(curr_rtc_state) {
 8001466:	4b75      	ldr	r3, [pc, #468]	@ (800163c <rtc_task+0x318>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	2b03      	cmp	r3, #3
 800146c:	f200 814b 	bhi.w	8001706 <rtc_task+0x3e2>
 8001470:	a201      	add	r2, pc, #4	@ (adr r2, 8001478 <rtc_task+0x154>)
 8001472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001476:	bf00      	nop
 8001478:	08001489 	.word	0x08001489
 800147c:	080014b9 	.word	0x080014b9
 8001480:	080014e9 	.word	0x080014e9
 8001484:	08001519 	.word	0x08001519
						case MONTH_CONFIG:
							uint8_t m = getnumber(msg->payload, msg->len);
 8001488:	697a      	ldr	r2, [r7, #20]
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	68db      	ldr	r3, [r3, #12]
 800148e:	4619      	mov	r1, r3
 8001490:	4610      	mov	r0, r2
 8001492:	f000 f95b 	bl	800174c <getnumber>
 8001496:	4603      	mov	r3, r0
 8001498:	733b      	strb	r3, [r7, #12]
							date.Month = m;
 800149a:	4a69      	ldr	r2, [pc, #420]	@ (8001640 <rtc_task+0x31c>)
 800149c:	7b3b      	ldrb	r3, [r7, #12]
 800149e:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = DATE_CONFIG;
 80014a0:	4b66      	ldr	r3, [pc, #408]	@ (800163c <rtc_task+0x318>)
 80014a2:	2201      	movs	r2, #1
 80014a4:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 80014a6:	4b5b      	ldr	r3, [pc, #364]	@ (8001614 <rtc_task+0x2f0>)
 80014a8:	6818      	ldr	r0, [r3, #0]
 80014aa:	2300      	movs	r3, #0
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014b0:	4964      	ldr	r1, [pc, #400]	@ (8001644 <rtc_task+0x320>)
 80014b2:	f004 f9a9 	bl	8005808 <xQueueGenericSend>
							break;
 80014b6:	e05d      	b.n	8001574 <rtc_task+0x250>
						case DATE_CONFIG:
							uint8_t d = getnumber(msg->payload, msg->len);
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	4619      	mov	r1, r3
 80014c0:	4610      	mov	r0, r2
 80014c2:	f000 f943 	bl	800174c <getnumber>
 80014c6:	4603      	mov	r3, r0
 80014c8:	737b      	strb	r3, [r7, #13]
							date.Date = d;
 80014ca:	4a5d      	ldr	r2, [pc, #372]	@ (8001640 <rtc_task+0x31c>)
 80014cc:	7b7b      	ldrb	r3, [r7, #13]
 80014ce:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = YEAR_CONFIG;
 80014d0:	4b5a      	ldr	r3, [pc, #360]	@ (800163c <rtc_task+0x318>)
 80014d2:	2202      	movs	r2, #2
 80014d4:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 80014d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001614 <rtc_task+0x2f0>)
 80014d8:	6818      	ldr	r0, [r3, #0]
 80014da:	2300      	movs	r3, #0
 80014dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014e0:	4959      	ldr	r1, [pc, #356]	@ (8001648 <rtc_task+0x324>)
 80014e2:	f004 f991 	bl	8005808 <xQueueGenericSend>
							break;
 80014e6:	e045      	b.n	8001574 <rtc_task+0x250>
						case YEAR_CONFIG:
							uint8_t y = getnumber(msg->payload, msg->len);
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4610      	mov	r0, r2
 80014f2:	f000 f92b 	bl	800174c <getnumber>
 80014f6:	4603      	mov	r3, r0
 80014f8:	73bb      	strb	r3, [r7, #14]
							date.Year = y;
 80014fa:	4a51      	ldr	r2, [pc, #324]	@ (8001640 <rtc_task+0x31c>)
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	70d3      	strb	r3, [r2, #3]
							curr_rtc_state = DAY_CONFIG;
 8001500:	4b4e      	ldr	r3, [pc, #312]	@ (800163c <rtc_task+0x318>)
 8001502:	2203      	movs	r2, #3
 8001504:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 8001506:	4b43      	ldr	r3, [pc, #268]	@ (8001614 <rtc_task+0x2f0>)
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	2300      	movs	r3, #0
 800150c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001510:	494e      	ldr	r1, [pc, #312]	@ (800164c <rtc_task+0x328>)
 8001512:	f004 f979 	bl	8005808 <xQueueGenericSend>
							break;
 8001516:	e02d      	b.n	8001574 <rtc_task+0x250>
						case DAY_CONFIG:
							uint8_t day = getnumber(msg->payload, msg->len);
 8001518:	697a      	ldr	r2, [r7, #20]
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	4619      	mov	r1, r3
 8001520:	4610      	mov	r0, r2
 8001522:	f000 f913 	bl	800174c <getnumber>
 8001526:	4603      	mov	r3, r0
 8001528:	73fb      	strb	r3, [r7, #15]
							date.WeekDay = day;
 800152a:	4a45      	ldr	r2, [pc, #276]	@ (8001640 <rtc_task+0x31c>)
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	7013      	strb	r3, [r2, #0]

							if(!validate_rtc_information(NULL, &date)) {
 8001530:	4943      	ldr	r1, [pc, #268]	@ (8001640 <rtc_task+0x31c>)
 8001532:	2000      	movs	r0, #0
 8001534:	f000 f92b 	bl	800178e <validate_rtc_information>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d10b      	bne.n	8001556 <rtc_task+0x232>
								rtc_configure_date(&date);
 800153e:	4840      	ldr	r0, [pc, #256]	@ (8001640 <rtc_task+0x31c>)
 8001540:	f000 f972 	bl	8001828 <rtc_configure_date>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001544:	4b33      	ldr	r3, [pc, #204]	@ (8001614 <rtc_task+0x2f0>)
 8001546:	6818      	ldr	r0, [r3, #0]
 8001548:	2300      	movs	r3, #0
 800154a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800154e:	4940      	ldr	r1, [pc, #256]	@ (8001650 <rtc_task+0x32c>)
 8001550:	f004 f95a 	bl	8005808 <xQueueGenericSend>
 8001554:	e007      	b.n	8001566 <rtc_task+0x242>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001556:	4b2f      	ldr	r3, [pc, #188]	@ (8001614 <rtc_task+0x2f0>)
 8001558:	6818      	ldr	r0, [r3, #0]
 800155a:	2300      	movs	r3, #0
 800155c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001560:	4935      	ldr	r1, [pc, #212]	@ (8001638 <rtc_task+0x314>)
 8001562:	f004 f951 	bl	8005808 <xQueueGenericSend>
							}

							// Update system state
							curr_sys_state = sRtcMenu;
 8001566:	4b2a      	ldr	r3, [pc, #168]	@ (8001610 <rtc_task+0x2ec>)
 8001568:	2202      	movs	r2, #2
 800156a:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 800156c:	4b33      	ldr	r3, [pc, #204]	@ (800163c <rtc_task+0x318>)
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
							break;
 8001572:	bf00      	nop
					}
					break;
 8001574:	e0c7      	b.n	8001706 <rtc_task+0x3e2>
				case sRtcTimeConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001576:	f107 0308 	add.w	r3, r7, #8
 800157a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800157e:	9200      	str	r2, [sp, #0]
 8001580:	2200      	movs	r2, #0
 8001582:	2100      	movs	r1, #0
 8001584:	2000      	movs	r0, #0
 8001586:	f005 fc0d 	bl	8006da4 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	617b      	str	r3, [r7, #20]

					// Configure hours, minutes, or seconds accordingly
					switch(curr_rtc_state) {
 800158e:	4b2b      	ldr	r3, [pc, #172]	@ (800163c <rtc_task+0x318>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	2b03      	cmp	r3, #3
 8001594:	f200 80b9 	bhi.w	800170a <rtc_task+0x3e6>
 8001598:	a201      	add	r2, pc, #4	@ (adr r2, 80015a0 <rtc_task+0x27c>)
 800159a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159e:	bf00      	nop
 80015a0:	080015b1 	.word	0x080015b1
 80015a4:	080015e1 	.word	0x080015e1
 80015a8:	08001661 	.word	0x08001661
 80015ac:	08001691 	.word	0x08001691
						case HH_CONFIG:
							uint8_t hour = getnumber(msg->payload, msg->len);
 80015b0:	697a      	ldr	r2, [r7, #20]
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	4619      	mov	r1, r3
 80015b8:	4610      	mov	r0, r2
 80015ba:	f000 f8c7 	bl	800174c <getnumber>
 80015be:	4603      	mov	r3, r0
 80015c0:	743b      	strb	r3, [r7, #16]
							time.Hours = hour;
 80015c2:	4a24      	ldr	r2, [pc, #144]	@ (8001654 <rtc_task+0x330>)
 80015c4:	7c3b      	ldrb	r3, [r7, #16]
 80015c6:	7013      	strb	r3, [r2, #0]
							curr_rtc_state = MM_CONFIG;
 80015c8:	4b1c      	ldr	r3, [pc, #112]	@ (800163c <rtc_task+0x318>)
 80015ca:	2201      	movs	r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 80015ce:	4b11      	ldr	r3, [pc, #68]	@ (8001614 <rtc_task+0x2f0>)
 80015d0:	6818      	ldr	r0, [r3, #0]
 80015d2:	2300      	movs	r3, #0
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015d8:	491f      	ldr	r1, [pc, #124]	@ (8001658 <rtc_task+0x334>)
 80015da:	f004 f915 	bl	8005808 <xQueueGenericSend>
							break;
 80015de:	e085      	b.n	80016ec <rtc_task+0x3c8>
						case MM_CONFIG:
							uint8_t min = getnumber(msg->payload, msg->len);
 80015e0:	697a      	ldr	r2, [r7, #20]
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	4619      	mov	r1, r3
 80015e8:	4610      	mov	r0, r2
 80015ea:	f000 f8af 	bl	800174c <getnumber>
 80015ee:	4603      	mov	r3, r0
 80015f0:	747b      	strb	r3, [r7, #17]
							time.Minutes = min;
 80015f2:	4a18      	ldr	r2, [pc, #96]	@ (8001654 <rtc_task+0x330>)
 80015f4:	7c7b      	ldrb	r3, [r7, #17]
 80015f6:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = SS_CONFIG;
 80015f8:	4b10      	ldr	r3, [pc, #64]	@ (800163c <rtc_task+0x318>)
 80015fa:	2202      	movs	r2, #2
 80015fc:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 80015fe:	4b05      	ldr	r3, [pc, #20]	@ (8001614 <rtc_task+0x2f0>)
 8001600:	6818      	ldr	r0, [r3, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001608:	4914      	ldr	r1, [pc, #80]	@ (800165c <rtc_task+0x338>)
 800160a:	f004 f8fd 	bl	8005808 <xQueueGenericSend>
							break;
 800160e:	e06d      	b.n	80016ec <rtc_task+0x3c8>
 8001610:	200001e1 	.word	0x200001e1
 8001614:	200001c8 	.word	0x200001c8
 8001618:	20000044 	.word	0x20000044
 800161c:	20000048 	.word	0x20000048
 8001620:	08009124 	.word	0x08009124
 8001624:	20000034 	.word	0x20000034
 8001628:	0800912c 	.word	0x0800912c
 800162c:	20000024 	.word	0x20000024
 8001630:	08009134 	.word	0x08009134
 8001634:	0800913c 	.word	0x0800913c
 8001638:	2000001c 	.word	0x2000001c
 800163c:	200000e0 	.word	0x200000e0
 8001640:	200000f8 	.word	0x200000f8
 8001644:	20000038 	.word	0x20000038
 8001648:	2000003c 	.word	0x2000003c
 800164c:	20000040 	.word	0x20000040
 8001650:	20000020 	.word	0x20000020
 8001654:	200000e4 	.word	0x200000e4
 8001658:	20000028 	.word	0x20000028
 800165c:	2000002c 	.word	0x2000002c
						case SS_CONFIG:
							uint8_t sec = getnumber(msg->payload, msg->len);
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	4619      	mov	r1, r3
 8001668:	4610      	mov	r0, r2
 800166a:	f000 f86f 	bl	800174c <getnumber>
 800166e:	4603      	mov	r3, r0
 8001670:	74bb      	strb	r3, [r7, #18]
							time.Seconds = sec;
 8001672:	4a2e      	ldr	r2, [pc, #184]	@ (800172c <rtc_task+0x408>)
 8001674:	7cbb      	ldrb	r3, [r7, #18]
 8001676:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = AMPM_CONFIG;
 8001678:	4b2d      	ldr	r3, [pc, #180]	@ (8001730 <rtc_task+0x40c>)
 800167a:	2203      	movs	r2, #3
 800167c:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ampm, portMAX_DELAY);
 800167e:	4b2d      	ldr	r3, [pc, #180]	@ (8001734 <rtc_task+0x410>)
 8001680:	6818      	ldr	r0, [r3, #0]
 8001682:	2300      	movs	r3, #0
 8001684:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001688:	492b      	ldr	r1, [pc, #172]	@ (8001738 <rtc_task+0x414>)
 800168a:	f004 f8bd 	bl	8005808 <xQueueGenericSend>
							break;
 800168e:	e02d      	b.n	80016ec <rtc_task+0x3c8>
						case AMPM_CONFIG:
							uint8_t opt = getnumber(msg->payload, msg->len);
 8001690:	697a      	ldr	r2, [r7, #20]
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	4619      	mov	r1, r3
 8001698:	4610      	mov	r0, r2
 800169a:	f000 f857 	bl	800174c <getnumber>
 800169e:	4603      	mov	r3, r0
 80016a0:	74fb      	strb	r3, [r7, #19]
							time.TimeFormat = opt; // Note: 0 = RTC_HOURFORMAT12_AM, 1 = RTC_HOURFORMAT12_PM
 80016a2:	4a22      	ldr	r2, [pc, #136]	@ (800172c <rtc_task+0x408>)
 80016a4:	7cfb      	ldrb	r3, [r7, #19]
 80016a6:	70d3      	strb	r3, [r2, #3]
							if(!validate_rtc_information(&time, NULL)) {
 80016a8:	2100      	movs	r1, #0
 80016aa:	4820      	ldr	r0, [pc, #128]	@ (800172c <rtc_task+0x408>)
 80016ac:	f000 f86f 	bl	800178e <validate_rtc_information>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d10b      	bne.n	80016ce <rtc_task+0x3aa>
								rtc_configure_time(&time);
 80016b6:	481d      	ldr	r0, [pc, #116]	@ (800172c <rtc_task+0x408>)
 80016b8:	f000 f8a0 	bl	80017fc <rtc_configure_time>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 80016bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <rtc_task+0x410>)
 80016be:	6818      	ldr	r0, [r3, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016c6:	491d      	ldr	r1, [pc, #116]	@ (800173c <rtc_task+0x418>)
 80016c8:	f004 f89e 	bl	8005808 <xQueueGenericSend>
 80016cc:	e007      	b.n	80016de <rtc_task+0x3ba>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 80016ce:	4b19      	ldr	r3, [pc, #100]	@ (8001734 <rtc_task+0x410>)
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	2300      	movs	r3, #0
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016d8:	4919      	ldr	r1, [pc, #100]	@ (8001740 <rtc_task+0x41c>)
 80016da:	f004 f895 	bl	8005808 <xQueueGenericSend>
							}
							// Update system state
							curr_sys_state = sRtcMenu;
 80016de:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <rtc_task+0x420>)
 80016e0:	2202      	movs	r2, #2
 80016e2:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <rtc_task+0x40c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
							break;
 80016ea:	bf00      	nop
					}
					break;
 80016ec:	e00d      	b.n	800170a <rtc_task+0x3e6>
				default:
					curr_sys_state = sMainMenu;
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <rtc_task+0x420>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <rtc_task+0x410>)
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	2300      	movs	r3, #0
 80016fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016fe:	4910      	ldr	r1, [pc, #64]	@ (8001740 <rtc_task+0x41c>)
 8001700:	f004 f882 	bl	8005808 <xQueueGenericSend>
					break;
 8001704:	e002      	b.n	800170c <rtc_task+0x3e8>
					break;
 8001706:	bf00      	nop
 8001708:	e000      	b.n	800170c <rtc_task+0x3e8>
					break;
 800170a:	bf00      	nop
		while(curr_sys_state != sMainMenu) {
 800170c:	4b0d      	ldr	r3, [pc, #52]	@ (8001744 <rtc_task+0x420>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	f47f ae15 	bne.w	8001340 <rtc_task+0x1c>
			}

		} // while end

		// Notify the main menu task
		xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <rtc_task+0x424>)
 8001718:	6818      	ldr	r0, [r3, #0]
 800171a:	2300      	movs	r3, #0
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	2300      	movs	r3, #0
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	f005 fbbe 	bl	8006ea4 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001728:	e600      	b.n	800132c <rtc_task+0x8>
 800172a:	bf00      	nop
 800172c:	200000e4 	.word	0x200000e4
 8001730:	200000e0 	.word	0x200000e0
 8001734:	200001c8 	.word	0x200001c8
 8001738:	20000030 	.word	0x20000030
 800173c:	20000020 	.word	0x20000020
 8001740:	2000001c 	.word	0x2000001c
 8001744:	200001e1 	.word	0x200001e1
 8001748:	200001b4 	.word	0x200001b4

0800174c <getnumber>:
/****************************************************
 *  Private functions                               *
 ****************************************************/

uint8_t getnumber(uint8_t *p, int len)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
	return (len > 1) ? ( ((p[0]-48) * 10) + (p[1]-48) ) : (p[0]-48);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	2b01      	cmp	r3, #1
 800175a:	dd0e      	ble.n	800177a <getnumber+0x2e>
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	461a      	mov	r2, r3
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	4413      	add	r3, r2
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	3301      	adds	r3, #1
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4413      	add	r3, r2
 8001772:	b2db      	uxtb	r3, r3
 8001774:	3b10      	subs	r3, #16
 8001776:	b2db      	uxtb	r3, r3
 8001778:	e003      	b.n	8001782 <getnumber+0x36>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	3b30      	subs	r3, #48	@ 0x30
 8001780:	b2db      	uxtb	r3, r3
}
 8001782:	4618      	mov	r0, r3
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <validate_rtc_information>:

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	6039      	str	r1, [r7, #0]
	if(time) {
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d011      	beq.n	80017c2 <validate_rtc_information+0x34>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) || (time->TimeFormat > 1) )
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	781b      	ldrb	r3, [r3, #0]
 80017a2:	2b0c      	cmp	r3, #12
 80017a4:	d80b      	bhi.n	80017be <validate_rtc_information+0x30>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	785b      	ldrb	r3, [r3, #1]
 80017aa:	2b3b      	cmp	r3, #59	@ 0x3b
 80017ac:	d807      	bhi.n	80017be <validate_rtc_information+0x30>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	789b      	ldrb	r3, [r3, #2]
 80017b2:	2b3b      	cmp	r3, #59	@ 0x3b
 80017b4:	d803      	bhi.n	80017be <validate_rtc_information+0x30>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	78db      	ldrb	r3, [r3, #3]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d901      	bls.n	80017c2 <validate_rtc_information+0x34>
			return 1;
 80017be:	2301      	movs	r3, #1
 80017c0:	e015      	b.n	80017ee <validate_rtc_information+0x60>
	}
	if(date) {
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d011      	beq.n	80017ec <validate_rtc_information+0x5e>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	789b      	ldrb	r3, [r3, #2]
 80017cc:	2b1f      	cmp	r3, #31
 80017ce:	d80b      	bhi.n	80017e8 <validate_rtc_information+0x5a>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b07      	cmp	r3, #7
 80017d6:	d807      	bhi.n	80017e8 <validate_rtc_information+0x5a>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	78db      	ldrb	r3, [r3, #3]
 80017dc:	2b63      	cmp	r3, #99	@ 0x63
 80017de:	d803      	bhi.n	80017e8 <validate_rtc_information+0x5a>
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	785b      	ldrb	r3, [r3, #1]
 80017e4:	2b0c      	cmp	r3, #12
 80017e6:	d901      	bls.n	80017ec <validate_rtc_information+0x5e>
			return 1;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e000      	b.n	80017ee <validate_rtc_information+0x60>
	}

	return 0;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <rtc_configure_time>:

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b082      	sub	sp, #8
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	4803      	ldr	r0, [pc, #12]	@ (8001824 <rtc_configure_time+0x28>)
 8001816:	f002 f8d2 	bl	80039be <HAL_RTC_SetTime>
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000014c 	.word	0x2000014c

08001828 <rtc_configure_date>:

void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8001830:	2200      	movs	r2, #0
 8001832:	6879      	ldr	r1, [r7, #4]
 8001834:	4803      	ldr	r0, [pc, #12]	@ (8001844 <rtc_configure_date+0x1c>)
 8001836:	f002 f9ba 	bl	8003bae <HAL_RTC_SetDate>
}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	2000014c 	.word	0x2000014c

08001848 <show_time_date>:

void show_time_date(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	@ 0x30
 800184c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 800184e:	f107 0314 	add.w	r3, r7, #20
 8001852:	2204      	movs	r2, #4
 8001854:	2100      	movs	r1, #0
 8001856:	4618      	mov	r0, r3
 8001858:	f006 fd94 	bl	8008384 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 800185c:	463b      	mov	r3, r7
 800185e:	2214      	movs	r2, #20
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f006 fd8e 	bl	8008384 <memset>

	// Get the RTC current time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001868:	463b      	mov	r3, r7
 800186a:	2200      	movs	r2, #0
 800186c:	4619      	mov	r1, r3
 800186e:	4837      	ldr	r0, [pc, #220]	@ (800194c <show_time_date+0x104>)
 8001870:	f002 f93f 	bl	8003af2 <HAL_RTC_GetTime>
	// Get the RTC current date
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001874:	f107 0314 	add.w	r3, r7, #20
 8001878:	2200      	movs	r2, #0
 800187a:	4619      	mov	r1, r3
 800187c:	4833      	ldr	r0, [pc, #204]	@ (800194c <show_time_date+0x104>)
 800187e:	f002 fa1a 	bl	8003cb6 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d101      	bne.n	800188c <show_time_date+0x44>
 8001888:	4b31      	ldr	r3, [pc, #196]	@ (8001950 <show_time_date+0x108>)
 800188a:	e000      	b.n	800188e <show_time_date+0x46>
 800188c:	4b31      	ldr	r3, [pc, #196]	@ (8001954 <show_time_date+0x10c>)
 800188e:	61bb      	str	r3, [r7, #24]

	// Display time format: hh:mm:ss [AM/PM]
	sprintf((char*)showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time & Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8001890:	783b      	ldrb	r3, [r7, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	787b      	ldrb	r3, [r7, #1]
 8001896:	461a      	mov	r2, r3
 8001898:	78bb      	ldrb	r3, [r7, #2]
 800189a:	4619      	mov	r1, r3
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	9302      	str	r3, [sp, #8]
 80018a0:	9101      	str	r1, [sp, #4]
 80018a2:	9200      	str	r2, [sp, #0]
 80018a4:	4603      	mov	r3, r0
 80018a6:	4a2c      	ldr	r2, [pc, #176]	@ (8001958 <show_time_date+0x110>)
 80018a8:	492c      	ldr	r1, [pc, #176]	@ (800195c <show_time_date+0x114>)
 80018aa:	482d      	ldr	r0, [pc, #180]	@ (8001960 <show_time_date+0x118>)
 80018ac:	f006 fd4a 	bl	8008344 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 80018b0:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <show_time_date+0x11c>)
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	2300      	movs	r3, #0
 80018b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018ba:	492b      	ldr	r1, [pc, #172]	@ (8001968 <show_time_date+0x120>)
 80018bc:	f003 ffa4 	bl	8005808 <xQueueGenericSend>

	// Display date format: day, month-date-year
	switch(rtc_date.WeekDay) {
 80018c0:	7d3b      	ldrb	r3, [r7, #20]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	2b06      	cmp	r3, #6
 80018c6:	d826      	bhi.n	8001916 <show_time_date+0xce>
 80018c8:	a201      	add	r2, pc, #4	@ (adr r2, 80018d0 <show_time_date+0x88>)
 80018ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ce:	bf00      	nop
 80018d0:	080018ed 	.word	0x080018ed
 80018d4:	080018f3 	.word	0x080018f3
 80018d8:	080018f9 	.word	0x080018f9
 80018dc:	080018ff 	.word	0x080018ff
 80018e0:	08001905 	.word	0x08001905
 80018e4:	0800190b 	.word	0x0800190b
 80018e8:	08001911 	.word	0x08001911
		case 1:
			weekday = "Sunday";
 80018ec:	4b1f      	ldr	r3, [pc, #124]	@ (800196c <show_time_date+0x124>)
 80018ee:	61fb      	str	r3, [r7, #28]
			break;
 80018f0:	e011      	b.n	8001916 <show_time_date+0xce>
		case 2:
			weekday = "Monday";
 80018f2:	4b1f      	ldr	r3, [pc, #124]	@ (8001970 <show_time_date+0x128>)
 80018f4:	61fb      	str	r3, [r7, #28]
			break;
 80018f6:	e00e      	b.n	8001916 <show_time_date+0xce>
		case 3:
			weekday = "Tuesday";
 80018f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001974 <show_time_date+0x12c>)
 80018fa:	61fb      	str	r3, [r7, #28]
			break;
 80018fc:	e00b      	b.n	8001916 <show_time_date+0xce>
		case 4:
			weekday = "Wednesday";
 80018fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <show_time_date+0x130>)
 8001900:	61fb      	str	r3, [r7, #28]
			break;
 8001902:	e008      	b.n	8001916 <show_time_date+0xce>
		case 5:
			weekday = "Thursday";
 8001904:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <show_time_date+0x134>)
 8001906:	61fb      	str	r3, [r7, #28]
			break;
 8001908:	e005      	b.n	8001916 <show_time_date+0xce>
		case 6:
			weekday = "Friday";
 800190a:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <show_time_date+0x138>)
 800190c:	61fb      	str	r3, [r7, #28]
			break;
 800190e:	e002      	b.n	8001916 <show_time_date+0xce>
		case 7:
			weekday = "Saturday";
 8001910:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <show_time_date+0x13c>)
 8001912:	61fb      	str	r3, [r7, #28]
			break;
 8001914:	bf00      	nop
	}
	sprintf((char*)showdate, "\t%s, %02d-%02d-%02d\n", weekday, rtc_date.Month, rtc_date.Date, rtc_date.Year + 2000);
 8001916:	7d7b      	ldrb	r3, [r7, #21]
 8001918:	4619      	mov	r1, r3
 800191a:	7dbb      	ldrb	r3, [r7, #22]
 800191c:	461a      	mov	r2, r3
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001924:	9301      	str	r3, [sp, #4]
 8001926:	9200      	str	r2, [sp, #0]
 8001928:	460b      	mov	r3, r1
 800192a:	69fa      	ldr	r2, [r7, #28]
 800192c:	4916      	ldr	r1, [pc, #88]	@ (8001988 <show_time_date+0x140>)
 800192e:	4817      	ldr	r0, [pc, #92]	@ (800198c <show_time_date+0x144>)
 8001930:	f006 fd08 	bl	8008344 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 8001934:	4b0b      	ldr	r3, [pc, #44]	@ (8001964 <show_time_date+0x11c>)
 8001936:	6818      	ldr	r0, [r3, #0]
 8001938:	2300      	movs	r3, #0
 800193a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800193e:	4914      	ldr	r1, [pc, #80]	@ (8001990 <show_time_date+0x148>)
 8001940:	f003 ff62 	bl	8005808 <xQueueGenericSend>
}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000014c 	.word	0x2000014c
 8001950:	08009144 	.word	0x08009144
 8001954:	08009148 	.word	0x08009148
 8001958:	0800914c 	.word	0x0800914c
 800195c:	08009164 	.word	0x08009164
 8001960:	200000fc 	.word	0x200000fc
 8001964:	200001c8 	.word	0x200001c8
 8001968:	2000004c 	.word	0x2000004c
 800196c:	0800917c 	.word	0x0800917c
 8001970:	08009184 	.word	0x08009184
 8001974:	0800918c 	.word	0x0800918c
 8001978:	08009194 	.word	0x08009194
 800197c:	080091a0 	.word	0x080091a0
 8001980:	080091ac 	.word	0x080091ac
 8001984:	080091b4 	.word	0x080091b4
 8001988:	080091c0 	.word	0x080091c0
 800198c:	20000124 	.word	0x20000124
 8001990:	20000050 	.word	0x20000050

08001994 <main_menu_task>:
 *       command is available.                                                                         *
 * @note The main menu is displayed, and the user input is processed. Invalid inputs are handled and   *
 * an error message is sent to the print queue.                                                        *
 ******************************************************************************************************/
void main_menu_task(void *param)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af02      	add	r7, sp, #8
 800199a:	6078      	str	r0, [r7, #4]
	int option;

	while(1) {

		// Present the main menu to the user
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 800199c:	4b33      	ldr	r3, [pc, #204]	@ (8001a6c <main_menu_task+0xd8>)
 800199e:	6818      	ldr	r0, [r3, #0]
 80019a0:	2300      	movs	r3, #0
 80019a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019a6:	4932      	ldr	r1, [pc, #200]	@ (8001a70 <main_menu_task+0xdc>)
 80019a8:	f003 ff2e 	bl	8005808 <xQueueGenericSend>

		// Wait for user to select a menu option
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 80019ac:	f107 030c 	add.w	r3, r7, #12
 80019b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019b4:	9200      	str	r2, [sp, #0]
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2000      	movs	r0, #0
 80019bc:	f005 f9f2 	bl	8006da4 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	617b      	str	r3, [r7, #20]

		if(msg->len == 1) {
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d13c      	bne.n	8001a46 <main_menu_task+0xb2>
			// Get user option, convert from ASCII to number
			option = msg->payload[0] - 48;
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	3b30      	subs	r3, #48	@ 0x30
 80019d2:	613b      	str	r3, [r7, #16]
			switch(option) {
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d023      	beq.n	8001a22 <main_menu_task+0x8e>
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	2b02      	cmp	r3, #2
 80019de:	dc29      	bgt.n	8001a34 <main_menu_task+0xa0>
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d003      	beq.n	80019ee <main_menu_task+0x5a>
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d00d      	beq.n	8001a08 <main_menu_task+0x74>
 80019ec:	e022      	b.n	8001a34 <main_menu_task+0xa0>
				case 0:
					// User selection: LED menu
					curr_sys_state = sLedMenu;
 80019ee:	4b21      	ldr	r3, [pc, #132]	@ (8001a74 <main_menu_task+0xe0>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 80019f4:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <main_menu_task+0xe4>)
 80019f6:	6818      	ldr	r0, [r3, #0]
 80019f8:	2300      	movs	r3, #0
 80019fa:	9300      	str	r3, [sp, #0]
 80019fc:	2300      	movs	r3, #0
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	f005 fa4f 	bl	8006ea4 <xTaskGenericNotify>
					break;
 8001a06:	e027      	b.n	8001a58 <main_menu_task+0xc4>
				case 1:
					curr_sys_state = sRtcMenu;
 8001a08:	4b1a      	ldr	r3, [pc, #104]	@ (8001a74 <main_menu_task+0xe0>)
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001a7c <main_menu_task+0xe8>)
 8001a10:	6818      	ldr	r0, [r3, #0]
 8001a12:	2300      	movs	r3, #0
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	2300      	movs	r3, #0
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	f005 fa42 	bl	8006ea4 <xTaskGenericNotify>
					break;
 8001a20:	e01a      	b.n	8001a58 <main_menu_task+0xc4>
				case 2:
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8001a22:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <main_menu_task+0xd8>)
 8001a24:	6818      	ldr	r0, [r3, #0]
 8001a26:	2300      	movs	r3, #0
 8001a28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a2c:	4914      	ldr	r1, [pc, #80]	@ (8001a80 <main_menu_task+0xec>)
 8001a2e:	f003 feeb 	bl	8005808 <xQueueGenericSend>
					continue;
 8001a32:	e01a      	b.n	8001a6a <main_menu_task+0xd6>
				default:
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8001a34:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <main_menu_task+0xd8>)
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a3e:	4910      	ldr	r1, [pc, #64]	@ (8001a80 <main_menu_task+0xec>)
 8001a40:	f003 fee2 	bl	8005808 <xQueueGenericSend>
					continue;
 8001a44:	e011      	b.n	8001a6a <main_menu_task+0xd6>
			}
		}
		// Handle invalid entry
		else {
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8001a46:	4b09      	ldr	r3, [pc, #36]	@ (8001a6c <main_menu_task+0xd8>)
 8001a48:	6818      	ldr	r0, [r3, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a50:	490b      	ldr	r1, [pc, #44]	@ (8001a80 <main_menu_task+0xec>)
 8001a52:	f003 fed9 	bl	8005808 <xQueueGenericSend>
			continue;
 8001a56:	e008      	b.n	8001a6a <main_menu_task+0xd6>
		}

		// Wait for notification from another task before running again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	2300      	movs	r3, #0
 8001a60:	2200      	movs	r2, #0
 8001a62:	2100      	movs	r1, #0
 8001a64:	2000      	movs	r0, #0
 8001a66:	f005 f99d 	bl	8006da4 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 8001a6a:	e797      	b.n	800199c <main_menu_task+0x8>
 8001a6c:	200001c8 	.word	0x200001c8
 8001a70:	20000058 	.word	0x20000058
 8001a74:	200001e1 	.word	0x200001e1
 8001a78:	200001c0 	.word	0x200001c0
 8001a7c:	200001c4 	.word	0x200001c4
 8001a80:	20000054 	.word	0x20000054

08001a84 <message_handler_task>:
 * @note The data queue (`q_data`) and print queue (`q_print`) must be initialized. The task must be   *
 *       notified when a new message is available.                                                     *
 * @note The processed message is sent to the print queue (`q_print`).                                 *
 ******************************************************************************************************/
void message_handler_task(void *param)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af02      	add	r7, sp, #8
 8001a8a:	6078      	str	r0, [r7, #4]
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001a8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2300      	movs	r3, #0
 8001a94:	2200      	movs	r2, #0
 8001a96:	2100      	movs	r1, #0
 8001a98:	2000      	movs	r0, #0
 8001a9a:	f005 f983 	bl	8006da4 <xTaskGenericNotifyWait>
 8001a9e:	61f8      	str	r0, [r7, #28]

		if(pdTRUE == ret) {
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d1f2      	bne.n	8001a8c <message_handler_task+0x8>
			// Process the message stored in the input data queue
			process_message(&msg);
 8001aa6:	f107 030c 	add.w	r3, r7, #12
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f000 f822 	bl	8001af4 <process_message>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001ab0:	e7ec      	b.n	8001a8c <message_handler_task+0x8>
	...

08001ab4 <print_task>:
 * @note This function is intended to run as a FreeRTOS task.                                          *
 * @note The print queue (`q_print`) must be initialized and contain messages to print.                *
 * @note The received message is transmitted via UART.                                                 *
 ******************************************************************************************************/
void print_task(void *param)
{
 8001ab4:	b590      	push	{r4, r7, lr}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	@ (8001aec <print_task+0x38>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f107 010c 	add.w	r1, r7, #12
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 f84d 	bl	8005b68 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001ace:	68fc      	ldr	r4, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fb86 	bl	80001e4 <strlen>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ae0:	4621      	mov	r1, r4
 8001ae2:	4803      	ldr	r0, [pc, #12]	@ (8001af0 <print_task+0x3c>)
 8001ae4:	f002 fce6 	bl	80044b4 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001ae8:	bf00      	nop
 8001aea:	e7e7      	b.n	8001abc <print_task+0x8>
 8001aec:	200001c8 	.word	0x200001c8
 8001af0:	2000016c 	.word	0x2000016c

08001af4 <process_message>:
 * @return void                                                                                        *
 *                                                                                                     *
 * @note This function is called by the `message_handler_task` when a notification is received.        *
 * @note The data queue (`q_data`) must be initialized and contain a message to process.               *
 ******************************************************************************************************/
void process_message(message_t *msg) {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	6078      	str	r0, [r7, #4]

	extract_command(msg);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 f837 	bl	8001b70 <extract_command>

	switch(curr_sys_state) {
 8001b02:	4b17      	ldr	r3, [pc, #92]	@ (8001b60 <process_message+0x6c>)
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	2b04      	cmp	r3, #4
 8001b08:	dc24      	bgt.n	8001b54 <process_message+0x60>
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	da18      	bge.n	8001b40 <process_message+0x4c>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <process_message+0x24>
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d00a      	beq.n	8001b2c <process_message+0x38>
		case sRtcDateConfig:
			// Notify the RTC task and pass the message
			xTaskNotify(handle_rtc_task, (uint32_t)msg, eSetValueWithOverwrite);
			break;
		default:
			break;
 8001b16:	e01d      	b.n	8001b54 <process_message+0x60>
			xTaskNotify(handle_main_menu_task, (uint32_t)msg, eSetValueWithOverwrite);
 8001b18:	4b12      	ldr	r3, [pc, #72]	@ (8001b64 <process_message+0x70>)
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	9300      	str	r3, [sp, #0]
 8001b22:	2303      	movs	r3, #3
 8001b24:	2100      	movs	r1, #0
 8001b26:	f005 f9bd 	bl	8006ea4 <xTaskGenericNotify>
			break;
 8001b2a:	e014      	b.n	8001b56 <process_message+0x62>
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b68 <process_message+0x74>)
 8001b2e:	6818      	ldr	r0, [r3, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	2300      	movs	r3, #0
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	2303      	movs	r3, #3
 8001b38:	2100      	movs	r1, #0
 8001b3a:	f005 f9b3 	bl	8006ea4 <xTaskGenericNotify>
			break;
 8001b3e:	e00a      	b.n	8001b56 <process_message+0x62>
			xTaskNotify(handle_rtc_task, (uint32_t)msg, eSetValueWithOverwrite);
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <process_message+0x78>)
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	2300      	movs	r3, #0
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	f005 f9a9 	bl	8006ea4 <xTaskGenericNotify>
			break;
 8001b52:	e000      	b.n	8001b56 <process_message+0x62>
			break;
 8001b54:	bf00      	nop
	}
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200001e1 	.word	0x200001e1
 8001b64:	200001b4 	.word	0x200001b4
 8001b68:	200001c0 	.word	0x200001c0
 8001b6c:	200001c4 	.word	0x200001c4

08001b70 <extract_command>:
 * @note This function is called by `process_message` to parse the incoming command message.           *
 * @note The data queue (`q_data`) must be initialized and contain a message to extract.               *
 * @note The extracted command is stored in the `msg` structure, with its payload and length fields    *
 *       populated.                                                                                    *
 ******************************************************************************************************/
int extract_command(message_t *msg) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	// Check if there is data in the data queue
	status = uxQueueMessagesWaiting(q_data);
 8001b78:	4b19      	ldr	r3, [pc, #100]	@ (8001be0 <extract_command+0x70>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f004 f967 	bl	8005e50 <uxQueueMessagesWaiting>
 8001b82:	4603      	mov	r3, r0
 8001b84:	613b      	str	r3, [r7, #16]
	if(!status) {
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d102      	bne.n	8001b92 <extract_command+0x22>
		return -1;
 8001b8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b90:	e022      	b.n	8001bd8 <extract_command+0x68>
	}

	// If data is available in the data queue, load it to the msg payload
	uint8_t i=0;
 8001b92:	2300      	movs	r3, #0
 8001b94:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 8001b96:	4b12      	ldr	r3, [pc, #72]	@ (8001be0 <extract_command+0x70>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f107 010f 	add.w	r1, r7, #15
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	f003 ffe1 	bl	8005b68 <xQueueReceive>
 8001ba6:	6138      	str	r0, [r7, #16]
		if(pdTRUE == status) {
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d106      	bne.n	8001bbc <extract_command+0x4c>
			msg->payload[i++] = item;
 8001bae:	7dfb      	ldrb	r3, [r7, #23]
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	75fa      	strb	r2, [r7, #23]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	7bf9      	ldrb	r1, [r7, #15]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\n');
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	2b0a      	cmp	r3, #10
 8001bc0:	d1e9      	bne.n	8001b96 <extract_command+0x26>

	// Set final character in message payload to null character
	msg->payload[i-1] = '\0';
 8001bc2:	7dfb      	ldrb	r3, [r7, #23]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	2100      	movs	r1, #0
 8001bca:	54d1      	strb	r1, [r2, r3]
	// Save length of message without null character
	msg->len = i-1;
 8001bcc:	7dfb      	ldrb	r3, [r7, #23]
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	60da      	str	r2, [r3, #12]

	return 0;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	200001cc 	.word	0x200001cc

08001be4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08c      	sub	sp, #48	@ 0x30
 8001be8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bea:	f000 fd4d 	bl	8002688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bee:	f000 f905 	bl	8001dfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bf2:	f000 f9bf 	bl	8001f74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bf6:	f000 f993 	bl	8001f20 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001bfa:	f000 f96b 	bl	8001ed4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Create main menu task and check that it was created successfully
  status = xTaskCreate(main_menu_task, "main_menu_task", 250, NULL, 2, &handle_main_menu_task);
 8001bfe:	4b69      	ldr	r3, [pc, #420]	@ (8001da4 <main+0x1c0>)
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2302      	movs	r3, #2
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	22fa      	movs	r2, #250	@ 0xfa
 8001c0a:	4967      	ldr	r1, [pc, #412]	@ (8001da8 <main+0x1c4>)
 8001c0c:	4867      	ldr	r0, [pc, #412]	@ (8001dac <main+0x1c8>)
 8001c0e:	f004 fad3 	bl	80061b8 <xTaskCreate>
 8001c12:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d00b      	beq.n	8001c32 <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c1e:	f383 8811 	msr	BASEPRI, r3
 8001c22:	f3bf 8f6f 	isb	sy
 8001c26:	f3bf 8f4f 	dsb	sy
 8001c2a:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001c2c:	bf00      	nop
 8001c2e:	bf00      	nop
 8001c30:	e7fd      	b.n	8001c2e <main+0x4a>

  // Create message handler task and check that it was created successfully
  status = xTaskCreate(message_handler_task, "msg_task", 250, NULL, 2, &handle_message_handler_task);
 8001c32:	4b5f      	ldr	r3, [pc, #380]	@ (8001db0 <main+0x1cc>)
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2302      	movs	r3, #2
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	22fa      	movs	r2, #250	@ 0xfa
 8001c3e:	495d      	ldr	r1, [pc, #372]	@ (8001db4 <main+0x1d0>)
 8001c40:	485d      	ldr	r0, [pc, #372]	@ (8001db8 <main+0x1d4>)
 8001c42:	f004 fab9 	bl	80061b8 <xTaskCreate>
 8001c46:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001c48:	6a3b      	ldr	r3, [r7, #32]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d00b      	beq.n	8001c66 <main+0x82>
        __asm volatile
 8001c4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c52:	f383 8811 	msr	BASEPRI, r3
 8001c56:	f3bf 8f6f 	isb	sy
 8001c5a:	f3bf 8f4f 	dsb	sy
 8001c5e:	61bb      	str	r3, [r7, #24]
    }
 8001c60:	bf00      	nop
 8001c62:	bf00      	nop
 8001c64:	e7fd      	b.n	8001c62 <main+0x7e>

  // Create print task and check that it was created successfully
  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8001c66:	4b55      	ldr	r3, [pc, #340]	@ (8001dbc <main+0x1d8>)
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2300      	movs	r3, #0
 8001c70:	22fa      	movs	r2, #250	@ 0xfa
 8001c72:	4953      	ldr	r1, [pc, #332]	@ (8001dc0 <main+0x1dc>)
 8001c74:	4853      	ldr	r0, [pc, #332]	@ (8001dc4 <main+0x1e0>)
 8001c76:	f004 fa9f 	bl	80061b8 <xTaskCreate>
 8001c7a:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d00b      	beq.n	8001c9a <main+0xb6>
        __asm volatile
 8001c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c86:	f383 8811 	msr	BASEPRI, r3
 8001c8a:	f3bf 8f6f 	isb	sy
 8001c8e:	f3bf 8f4f 	dsb	sy
 8001c92:	617b      	str	r3, [r7, #20]
    }
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	e7fd      	b.n	8001c96 <main+0xb2>

  // Create LED task and check that it was created successfully
  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8001c9a:	4b4b      	ldr	r3, [pc, #300]	@ (8001dc8 <main+0x1e4>)
 8001c9c:	9301      	str	r3, [sp, #4]
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	9300      	str	r3, [sp, #0]
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	22fa      	movs	r2, #250	@ 0xfa
 8001ca6:	4949      	ldr	r1, [pc, #292]	@ (8001dcc <main+0x1e8>)
 8001ca8:	4849      	ldr	r0, [pc, #292]	@ (8001dd0 <main+0x1ec>)
 8001caa:	f004 fa85 	bl	80061b8 <xTaskCreate>
 8001cae:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d00b      	beq.n	8001cce <main+0xea>
        __asm volatile
 8001cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cba:	f383 8811 	msr	BASEPRI, r3
 8001cbe:	f3bf 8f6f 	isb	sy
 8001cc2:	f3bf 8f4f 	dsb	sy
 8001cc6:	613b      	str	r3, [r7, #16]
    }
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	e7fd      	b.n	8001cca <main+0xe6>

  // Create RTC task and check that it was created successfully
  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8001cce:	4b41      	ldr	r3, [pc, #260]	@ (8001dd4 <main+0x1f0>)
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	2302      	movs	r3, #2
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	22fa      	movs	r2, #250	@ 0xfa
 8001cda:	493f      	ldr	r1, [pc, #252]	@ (8001dd8 <main+0x1f4>)
 8001cdc:	483f      	ldr	r0, [pc, #252]	@ (8001ddc <main+0x1f8>)
 8001cde:	f004 fa6b 	bl	80061b8 <xTaskCreate>
 8001ce2:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001ce4:	6a3b      	ldr	r3, [r7, #32]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d00b      	beq.n	8001d02 <main+0x11e>
        __asm volatile
 8001cea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001cee:	f383 8811 	msr	BASEPRI, r3
 8001cf2:	f3bf 8f6f 	isb	sy
 8001cf6:	f3bf 8f4f 	dsb	sy
 8001cfa:	60fb      	str	r3, [r7, #12]
    }
 8001cfc:	bf00      	nop
 8001cfe:	bf00      	nop
 8001d00:	e7fd      	b.n	8001cfe <main+0x11a>

  // Create data queue and check that it was created successfully
  q_data = xQueueCreate(10, sizeof(char));
 8001d02:	2200      	movs	r2, #0
 8001d04:	2101      	movs	r1, #1
 8001d06:	200a      	movs	r0, #10
 8001d08:	f003 fcf8 	bl	80056fc <xQueueGenericCreate>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4a34      	ldr	r2, [pc, #208]	@ (8001de0 <main+0x1fc>)
 8001d10:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_data);
 8001d12:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <main+0x1fc>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10b      	bne.n	8001d32 <main+0x14e>
        __asm volatile
 8001d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d1e:	f383 8811 	msr	BASEPRI, r3
 8001d22:	f3bf 8f6f 	isb	sy
 8001d26:	f3bf 8f4f 	dsb	sy
 8001d2a:	60bb      	str	r3, [r7, #8]
    }
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	e7fd      	b.n	8001d2e <main+0x14a>

  // Create print queue and check that it was created successfully
  q_print = xQueueCreate(10, sizeof(size_t));
 8001d32:	2200      	movs	r2, #0
 8001d34:	2104      	movs	r1, #4
 8001d36:	200a      	movs	r0, #10
 8001d38:	f003 fce0 	bl	80056fc <xQueueGenericCreate>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4a29      	ldr	r2, [pc, #164]	@ (8001de4 <main+0x200>)
 8001d40:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_print);
 8001d42:	4b28      	ldr	r3, [pc, #160]	@ (8001de4 <main+0x200>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10b      	bne.n	8001d62 <main+0x17e>
        __asm volatile
 8001d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d4e:	f383 8811 	msr	BASEPRI, r3
 8001d52:	f3bf 8f6f 	isb	sy
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	607b      	str	r3, [r7, #4]
    }
 8001d5c:	bf00      	nop
 8001d5e:	bf00      	nop
 8001d60:	e7fd      	b.n	8001d5e <main+0x17a>

  // Create software timers for LED effects
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001d62:	2300      	movs	r3, #0
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d66:	e010      	b.n	8001d8a <main+0x1a6>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)i, led_callback);
 8001d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d6a:	4a1f      	ldr	r2, [pc, #124]	@ (8001de8 <main+0x204>)
 8001d6c:	9200      	str	r2, [sp, #0]
 8001d6e:	2201      	movs	r2, #1
 8001d70:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001d74:	481d      	ldr	r0, [pc, #116]	@ (8001dec <main+0x208>)
 8001d76:	f005 fb19 	bl	80073ac <xTimerCreate>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	491c      	ldr	r1, [pc, #112]	@ (8001df0 <main+0x20c>)
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d86:	3301      	adds	r3, #1
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	ddeb      	ble.n	8001d68 <main+0x184>
  }

  // Prepare UART to receive a message
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8001d90:	2201      	movs	r2, #1
 8001d92:	4918      	ldr	r1, [pc, #96]	@ (8001df4 <main+0x210>)
 8001d94:	4818      	ldr	r0, [pc, #96]	@ (8001df8 <main+0x214>)
 8001d96:	f002 fc18 	bl	80045ca <HAL_UART_Receive_IT>

  // Start the kernel
  vTaskStartScheduler();
 8001d9a:	f004 fb53 	bl	8006444 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d9e:	bf00      	nop
 8001da0:	e7fd      	b.n	8001d9e <main+0x1ba>
 8001da2:	bf00      	nop
 8001da4:	200001b4 	.word	0x200001b4
 8001da8:	080092e0 	.word	0x080092e0
 8001dac:	08001995 	.word	0x08001995
 8001db0:	200001b8 	.word	0x200001b8
 8001db4:	080092f0 	.word	0x080092f0
 8001db8:	08001a85 	.word	0x08001a85
 8001dbc:	200001bc 	.word	0x200001bc
 8001dc0:	080092fc 	.word	0x080092fc
 8001dc4:	08001ab5 	.word	0x08001ab5
 8001dc8:	200001c0 	.word	0x200001c0
 8001dcc:	08009308 	.word	0x08009308
 8001dd0:	08000d7d 	.word	0x08000d7d
 8001dd4:	200001c4 	.word	0x200001c4
 8001dd8:	08009314 	.word	0x08009314
 8001ddc:	08001325 	.word	0x08001325
 8001de0:	200001cc 	.word	0x200001cc
 8001de4:	200001c8 	.word	0x200001c8
 8001de8:	08000fe9 	.word	0x08000fe9
 8001dec:	08009320 	.word	0x08009320
 8001df0:	200001d0 	.word	0x200001d0
 8001df4:	200001e0 	.word	0x200001e0
 8001df8:	2000016c 	.word	0x2000016c

08001dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b094      	sub	sp, #80	@ 0x50
 8001e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e02:	f107 0320 	add.w	r3, r7, #32
 8001e06:	2230      	movs	r2, #48	@ 0x30
 8001e08:	2100      	movs	r1, #0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f006 faba 	bl	8008384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e10:	f107 030c 	add.w	r3, r7, #12
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	4b29      	ldr	r3, [pc, #164]	@ (8001ecc <SystemClock_Config+0xd0>)
 8001e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e28:	4a28      	ldr	r2, [pc, #160]	@ (8001ecc <SystemClock_Config+0xd0>)
 8001e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e30:	4b26      	ldr	r3, [pc, #152]	@ (8001ecc <SystemClock_Config+0xd0>)
 8001e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <SystemClock_Config+0xd4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a22      	ldr	r2, [pc, #136]	@ (8001ed0 <SystemClock_Config+0xd4>)
 8001e46:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	4b20      	ldr	r3, [pc, #128]	@ (8001ed0 <SystemClock_Config+0xd4>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e54:	607b      	str	r3, [r7, #4]
 8001e56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001e58:	230a      	movs	r3, #10
 8001e5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e60:	2310      	movs	r3, #16
 8001e62:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001e64:	2301      	movs	r3, #1
 8001e66:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e68:	2302      	movs	r3, #2
 8001e6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e70:	2308      	movs	r3, #8
 8001e72:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001e74:	2332      	movs	r3, #50	@ 0x32
 8001e76:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001e78:	2304      	movs	r3, #4
 8001e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001e7c:	2307      	movs	r3, #7
 8001e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e80:	f107 0320 	add.w	r3, r7, #32
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 ff6b 	bl	8002d60 <HAL_RCC_OscConfig>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001e90:	f000 fa34 	bl	80022fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e94:	230f      	movs	r3, #15
 8001e96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ea0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ea4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ea6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001eac:	f107 030c 	add.w	r3, r7, #12
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f001 f9cc 	bl	8003250 <HAL_RCC_ClockConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001ebe:	f000 fa1d 	bl	80022fc <Error_Handler>
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3750      	adds	r7, #80	@ 0x50
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40007000 	.word	0x40007000

08001ed4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <MX_RTC_Init+0x44>)
 8001eda:	4a10      	ldr	r2, [pc, #64]	@ (8001f1c <MX_RTC_Init+0x48>)
 8001edc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <MX_RTC_Init+0x44>)
 8001ee0:	2240      	movs	r2, #64	@ 0x40
 8001ee2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <MX_RTC_Init+0x44>)
 8001ee6:	227f      	movs	r2, #127	@ 0x7f
 8001ee8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	@ (8001f18 <MX_RTC_Init+0x44>)
 8001eec:	22ff      	movs	r2, #255	@ 0xff
 8001eee:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <MX_RTC_Init+0x44>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	@ (8001f18 <MX_RTC_Init+0x44>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001efc:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_RTC_Init+0x44>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	@ (8001f18 <MX_RTC_Init+0x44>)
 8001f04:	f001 fcd8 	bl	80038b8 <HAL_RTC_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001f0e:	f000 f9f5 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000014c 	.word	0x2000014c
 8001f1c:	40002800 	.word	0x40002800

08001f20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f24:	4b11      	ldr	r3, [pc, #68]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	@ (8001f70 <MX_USART2_UART_Init+0x50>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b06      	ldr	r3, [pc, #24]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	@ (8001f6c <MX_USART2_UART_Init+0x4c>)
 8001f58:	f002 fa5c 	bl	8004414 <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f62:	f000 f9cb 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000016c 	.word	0x2000016c
 8001f70:	40004400 	.word	0x40004400

08001f74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	@ 0x30
 8001f78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]
 8001f84:	609a      	str	r2, [r3, #8]
 8001f86:	60da      	str	r2, [r3, #12]
 8001f88:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	61bb      	str	r3, [r7, #24]
 8001f8e:	4ba2      	ldr	r3, [pc, #648]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f92:	4aa1      	ldr	r2, [pc, #644]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001f94:	f043 0310 	orr.w	r3, r3, #16
 8001f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f9a:	4b9f      	ldr	r3, [pc, #636]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	61bb      	str	r3, [r7, #24]
 8001fa4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	4b9b      	ldr	r3, [pc, #620]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fae:	4a9a      	ldr	r2, [pc, #616]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001fb0:	f043 0304 	orr.w	r3, r3, #4
 8001fb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb6:	4b98      	ldr	r3, [pc, #608]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	f003 0304 	and.w	r3, r3, #4
 8001fbe:	617b      	str	r3, [r7, #20]
 8001fc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	4b94      	ldr	r3, [pc, #592]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fca:	4a93      	ldr	r2, [pc, #588]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001fd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fd2:	4b91      	ldr	r3, [pc, #580]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b8d      	ldr	r3, [pc, #564]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe6:	4a8c      	ldr	r2, [pc, #560]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fee:	4b8a      	ldr	r3, [pc, #552]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b86      	ldr	r3, [pc, #536]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002002:	4a85      	ldr	r2, [pc, #532]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	@ 0x30
 800200a:	4b83      	ldr	r3, [pc, #524]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	4b7f      	ldr	r3, [pc, #508]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201e:	4a7e      	ldr	r2, [pc, #504]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8002020:	f043 0308 	orr.w	r3, r3, #8
 8002024:	6313      	str	r3, [r2, #48]	@ 0x30
 8002026:	4b7c      	ldr	r3, [pc, #496]	@ (8002218 <MX_GPIO_Init+0x2a4>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002032:	2200      	movs	r2, #0
 8002034:	2108      	movs	r1, #8
 8002036:	4879      	ldr	r0, [pc, #484]	@ (800221c <MX_GPIO_Init+0x2a8>)
 8002038:	f000 fe78 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800203c:	2201      	movs	r2, #1
 800203e:	2101      	movs	r1, #1
 8002040:	4877      	ldr	r0, [pc, #476]	@ (8002220 <MX_GPIO_Init+0x2ac>)
 8002042:	f000 fe73 	bl	8002d2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002046:	2200      	movs	r2, #0
 8002048:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800204c:	4875      	ldr	r0, [pc, #468]	@ (8002224 <MX_GPIO_Init+0x2b0>)
 800204e:	f000 fe6d 	bl	8002d2c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002052:	2308      	movs	r3, #8
 8002054:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002056:	2301      	movs	r3, #1
 8002058:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205e:	2300      	movs	r3, #0
 8002060:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002062:	f107 031c 	add.w	r3, r7, #28
 8002066:	4619      	mov	r1, r3
 8002068:	486c      	ldr	r0, [pc, #432]	@ (800221c <MX_GPIO_Init+0x2a8>)
 800206a:	f000 fcc3 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800206e:	2301      	movs	r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002072:	2301      	movs	r3, #1
 8002074:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207a:	2300      	movs	r3, #0
 800207c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800207e:	f107 031c 	add.w	r3, r7, #28
 8002082:	4619      	mov	r1, r3
 8002084:	4866      	ldr	r0, [pc, #408]	@ (8002220 <MX_GPIO_Init+0x2ac>)
 8002086:	f000 fcb5 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800208a:	2308      	movs	r3, #8
 800208c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800209a:	2305      	movs	r3, #5
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800209e:	f107 031c 	add.w	r3, r7, #28
 80020a2:	4619      	mov	r1, r3
 80020a4:	485e      	ldr	r0, [pc, #376]	@ (8002220 <MX_GPIO_Init+0x2ac>)
 80020a6:	f000 fca5 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020aa:	2301      	movs	r3, #1
 80020ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ae:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020b8:	f107 031c 	add.w	r3, r7, #28
 80020bc:	4619      	mov	r1, r3
 80020be:	485a      	ldr	r0, [pc, #360]	@ (8002228 <MX_GPIO_Init+0x2b4>)
 80020c0:	f000 fc98 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80020c4:	2310      	movs	r3, #16
 80020c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020c8:	2302      	movs	r3, #2
 80020ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020cc:	2300      	movs	r3, #0
 80020ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d0:	2300      	movs	r3, #0
 80020d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020d4:	2306      	movs	r3, #6
 80020d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 031c 	add.w	r3, r7, #28
 80020dc:	4619      	mov	r1, r3
 80020de:	4852      	ldr	r0, [pc, #328]	@ (8002228 <MX_GPIO_Init+0x2b4>)
 80020e0:	f000 fc88 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80020e4:	23e0      	movs	r3, #224	@ 0xe0
 80020e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e8:	2302      	movs	r3, #2
 80020ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80020f4:	2305      	movs	r3, #5
 80020f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f8:	f107 031c 	add.w	r3, r7, #28
 80020fc:	4619      	mov	r1, r3
 80020fe:	484a      	ldr	r0, [pc, #296]	@ (8002228 <MX_GPIO_Init+0x2b4>)
 8002100:	f000 fc78 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002104:	2304      	movs	r3, #4
 8002106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002108:	2300      	movs	r3, #0
 800210a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210c:	2300      	movs	r3, #0
 800210e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	4619      	mov	r1, r3
 8002116:	4845      	ldr	r0, [pc, #276]	@ (800222c <MX_GPIO_Init+0x2b8>)
 8002118:	f000 fc6c 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800211c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002120:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002122:	2302      	movs	r3, #2
 8002124:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800212a:	2300      	movs	r3, #0
 800212c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800212e:	2305      	movs	r3, #5
 8002130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002132:	f107 031c 	add.w	r3, r7, #28
 8002136:	4619      	mov	r1, r3
 8002138:	483c      	ldr	r0, [pc, #240]	@ (800222c <MX_GPIO_Init+0x2b8>)
 800213a:	f000 fc5b 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800213e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002142:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002144:	2301      	movs	r3, #1
 8002146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002148:	2300      	movs	r3, #0
 800214a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800214c:	2300      	movs	r3, #0
 800214e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	4619      	mov	r1, r3
 8002156:	4833      	ldr	r0, [pc, #204]	@ (8002224 <MX_GPIO_Init+0x2b0>)
 8002158:	f000 fc4c 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800215c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002160:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800216a:	2300      	movs	r3, #0
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800216e:	2306      	movs	r3, #6
 8002170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002172:	f107 031c 	add.w	r3, r7, #28
 8002176:	4619      	mov	r1, r3
 8002178:	4829      	ldr	r0, [pc, #164]	@ (8002220 <MX_GPIO_Init+0x2ac>)
 800217a:	f000 fc3b 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800217e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002182:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002184:	2300      	movs	r3, #0
 8002186:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800218c:	f107 031c 	add.w	r3, r7, #28
 8002190:	4619      	mov	r1, r3
 8002192:	4825      	ldr	r0, [pc, #148]	@ (8002228 <MX_GPIO_Init+0x2b4>)
 8002194:	f000 fc2e 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002198:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800219c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a6:	2300      	movs	r3, #0
 80021a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80021aa:	230a      	movs	r3, #10
 80021ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021ae:	f107 031c 	add.w	r3, r7, #28
 80021b2:	4619      	mov	r1, r3
 80021b4:	481c      	ldr	r0, [pc, #112]	@ (8002228 <MX_GPIO_Init+0x2b4>)
 80021b6:	f000 fc1d 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80021ba:	2320      	movs	r3, #32
 80021bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021be:	2300      	movs	r3, #0
 80021c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 031c 	add.w	r3, r7, #28
 80021ca:	4619      	mov	r1, r3
 80021cc:	4815      	ldr	r0, [pc, #84]	@ (8002224 <MX_GPIO_Init+0x2b0>)
 80021ce:	f000 fc11 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80021d2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80021d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d8:	2312      	movs	r3, #18
 80021da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021dc:	2300      	movs	r3, #0
 80021de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021e4:	2304      	movs	r3, #4
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	480f      	ldr	r0, [pc, #60]	@ (800222c <MX_GPIO_Init+0x2b8>)
 80021f0:	f000 fc00 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80021f4:	2302      	movs	r3, #2
 80021f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80021f8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80021fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	4804      	ldr	r0, [pc, #16]	@ (800221c <MX_GPIO_Init+0x2a8>)
 800220a:	f000 fbf3 	bl	80029f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800220e:	bf00      	nop
 8002210:	3730      	adds	r7, #48	@ 0x30
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40021000 	.word	0x40021000
 8002220:	40020800 	.word	0x40020800
 8002224:	40020c00 	.word	0x40020c00
 8002228:	40020000 	.word	0x40020000
 800222c:	40020400 	.word	0x40020400

08002230 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler, so it executes in the interrupt context
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b086      	sub	sp, #24
 8002234:	af02      	add	r7, sp, #8
 8002236:	6078      	str	r0, [r7, #4]
	// Dummy variable used to replace final character in data queue
	uint8_t dummy;

	// Add a small delay to allow timing for message transmission
	for(uint32_t i=0; i<4000; i++);
 8002238:	2300      	movs	r3, #0
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	e002      	b.n	8002244 <HAL_UART_RxCpltCallback+0x14>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3301      	adds	r3, #1
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 800224a:	d3f8      	bcc.n	800223e <HAL_UART_RxCpltCallback+0xe>

	// Check if data is available via UART
	if(!xQueueIsQueueFullFromISR(q_data)) {
 800224c:	4b1e      	ldr	r3, [pc, #120]	@ (80022c8 <HAL_UART_RxCpltCallback+0x98>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4618      	mov	r0, r3
 8002252:	f003 ff2c 	bl	80060ae <xQueueIsQueueFullFromISR>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d107      	bne.n	800226c <HAL_UART_RxCpltCallback+0x3c>
		// Enqueue data byte
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 800225c:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <HAL_UART_RxCpltCallback+0x98>)
 800225e:	6818      	ldr	r0, [r3, #0]
 8002260:	2300      	movs	r3, #0
 8002262:	2200      	movs	r2, #0
 8002264:	4919      	ldr	r1, [pc, #100]	@ (80022cc <HAL_UART_RxCpltCallback+0x9c>)
 8002266:	f003 fbd1 	bl	8005a0c <xQueueGenericSendFromISR>
 800226a:	e013      	b.n	8002294 <HAL_UART_RxCpltCallback+0x64>
	}
	// If no data available, check if last entered character is newline character
	else {
		if(user_data == '\n') {
 800226c:	4b17      	ldr	r3, [pc, #92]	@ (80022cc <HAL_UART_RxCpltCallback+0x9c>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b0a      	cmp	r3, #10
 8002274:	d10e      	bne.n	8002294 <HAL_UART_RxCpltCallback+0x64>
			// Replace last byte of data queue with '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8002276:	4b14      	ldr	r3, [pc, #80]	@ (80022c8 <HAL_UART_RxCpltCallback+0x98>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f107 010b 	add.w	r1, r7, #11
 800227e:	2200      	movs	r2, #0
 8002280:	4618      	mov	r0, r3
 8002282:	f003 fd53 	bl	8005d2c <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8002286:	4b10      	ldr	r3, [pc, #64]	@ (80022c8 <HAL_UART_RxCpltCallback+0x98>)
 8002288:	6818      	ldr	r0, [r3, #0]
 800228a:	2300      	movs	r3, #0
 800228c:	2200      	movs	r2, #0
 800228e:	490f      	ldr	r1, [pc, #60]	@ (80022cc <HAL_UART_RxCpltCallback+0x9c>)
 8002290:	f003 fbbc 	bl	8005a0c <xQueueGenericSendFromISR>
		}
	}

	// Send notification to message handler task if user_data == '\n'
	if(user_data == '\n') {
 8002294:	4b0d      	ldr	r3, [pc, #52]	@ (80022cc <HAL_UART_RxCpltCallback+0x9c>)
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b0a      	cmp	r3, #10
 800229c:	d10a      	bne.n	80022b4 <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_message_handler_task, 0, eNoAction, NULL);
 800229e:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <HAL_UART_RxCpltCallback+0xa0>)
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	2300      	movs	r3, #0
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2300      	movs	r3, #0
 80022ac:	2200      	movs	r2, #0
 80022ae:	2100      	movs	r1, #0
 80022b0:	f004 fedc 	bl	800706c <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in interrupt mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80022b4:	2201      	movs	r2, #1
 80022b6:	4905      	ldr	r1, [pc, #20]	@ (80022cc <HAL_UART_RxCpltCallback+0x9c>)
 80022b8:	4806      	ldr	r0, [pc, #24]	@ (80022d4 <HAL_UART_RxCpltCallback+0xa4>)
 80022ba:	f002 f986 	bl	80045ca <HAL_UART_Receive_IT>

}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	200001cc 	.word	0x200001cc
 80022cc:	200001e0 	.word	0x200001e0
 80022d0:	200001b8 	.word	0x200001b8
 80022d4:	2000016c 	.word	0x2000016c

080022d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a04      	ldr	r2, [pc, #16]	@ (80022f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022ea:	f000 f9ef 	bl	80026cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40001000 	.word	0x40001000

080022fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002304:	bf00      	nop
 8002306:	e7fd      	b.n	8002304 <Error_Handler+0x8>

08002308 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	4b10      	ldr	r3, [pc, #64]	@ (8002354 <HAL_MspInit+0x4c>)
 8002314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002316:	4a0f      	ldr	r2, [pc, #60]	@ (8002354 <HAL_MspInit+0x4c>)
 8002318:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800231c:	6453      	str	r3, [r2, #68]	@ 0x44
 800231e:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <HAL_MspInit+0x4c>)
 8002320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002322:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002326:	607b      	str	r3, [r7, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	4b09      	ldr	r3, [pc, #36]	@ (8002354 <HAL_MspInit+0x4c>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002332:	4a08      	ldr	r2, [pc, #32]	@ (8002354 <HAL_MspInit+0x4c>)
 8002334:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002338:	6413      	str	r3, [r2, #64]	@ 0x40
 800233a:	4b06      	ldr	r3, [pc, #24]	@ (8002354 <HAL_MspInit+0x4c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002346:	bf00      	nop
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]
 8002368:	605a      	str	r2, [r3, #4]
 800236a:	609a      	str	r2, [r3, #8]
 800236c:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a0c      	ldr	r2, [pc, #48]	@ (80023a4 <HAL_RTC_MspInit+0x4c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d111      	bne.n	800239c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002378:	2302      	movs	r3, #2
 800237a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800237c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002380:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002382:	f107 0308 	add.w	r3, r7, #8
 8002386:	4618      	mov	r0, r3
 8002388:	f001 f9b4 	bl	80036f4 <HAL_RCCEx_PeriphCLKConfig>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002392:	f7ff ffb3 	bl	80022fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002396:	4b04      	ldr	r3, [pc, #16]	@ (80023a8 <HAL_RTC_MspInit+0x50>)
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800239c:	bf00      	nop
 800239e:	3718      	adds	r7, #24
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40002800 	.word	0x40002800
 80023a8:	42470e3c 	.word	0x42470e3c

080023ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a1d      	ldr	r2, [pc, #116]	@ (8002440 <HAL_UART_MspInit+0x94>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d133      	bne.n	8002436 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80023ce:	2300      	movs	r3, #0
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	4a1b      	ldr	r2, [pc, #108]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023de:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e6:	613b      	str	r3, [r7, #16]
 80023e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	60fb      	str	r3, [r7, #12]
 80023ee:	4b15      	ldr	r3, [pc, #84]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	4a14      	ldr	r2, [pc, #80]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023fa:	4b12      	ldr	r3, [pc, #72]	@ (8002444 <HAL_UART_MspInit+0x98>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002406:	230c      	movs	r3, #12
 8002408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240a:	2302      	movs	r3, #2
 800240c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240e:	2300      	movs	r3, #0
 8002410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002412:	2303      	movs	r3, #3
 8002414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002416:	2307      	movs	r3, #7
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800241a:	f107 0314 	add.w	r3, r7, #20
 800241e:	4619      	mov	r1, r3
 8002420:	4809      	ldr	r0, [pc, #36]	@ (8002448 <HAL_UART_MspInit+0x9c>)
 8002422:	f000 fae7 	bl	80029f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	2106      	movs	r1, #6
 800242a:	2026      	movs	r0, #38	@ 0x26
 800242c:	f000 fa26 	bl	800287c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002430:	2026      	movs	r0, #38	@ 0x26
 8002432:	f000 fa3f 	bl	80028b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002436:	bf00      	nop
 8002438:	3728      	adds	r7, #40	@ 0x28
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40004400 	.word	0x40004400
 8002444:	40023800 	.word	0x40023800
 8002448:	40020000 	.word	0x40020000

0800244c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08e      	sub	sp, #56	@ 0x38
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002458:	2300      	movs	r3, #0
 800245a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
 8002460:	4b33      	ldr	r3, [pc, #204]	@ (8002530 <HAL_InitTick+0xe4>)
 8002462:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002464:	4a32      	ldr	r2, [pc, #200]	@ (8002530 <HAL_InitTick+0xe4>)
 8002466:	f043 0310 	orr.w	r3, r3, #16
 800246a:	6413      	str	r3, [r2, #64]	@ 0x40
 800246c:	4b30      	ldr	r3, [pc, #192]	@ (8002530 <HAL_InitTick+0xe4>)
 800246e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002478:	f107 0210 	add.w	r2, r7, #16
 800247c:	f107 0314 	add.w	r3, r7, #20
 8002480:	4611      	mov	r1, r2
 8002482:	4618      	mov	r0, r3
 8002484:	f001 f904 	bl	8003690 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800248c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d103      	bne.n	800249a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002492:	f001 f8d5 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8002496:	6378      	str	r0, [r7, #52]	@ 0x34
 8002498:	e004      	b.n	80024a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800249a:	f001 f8d1 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 800249e:	4603      	mov	r3, r0
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80024a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024a6:	4a23      	ldr	r2, [pc, #140]	@ (8002534 <HAL_InitTick+0xe8>)
 80024a8:	fba2 2303 	umull	r2, r3, r2, r3
 80024ac:	0c9b      	lsrs	r3, r3, #18
 80024ae:	3b01      	subs	r3, #1
 80024b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80024b2:	4b21      	ldr	r3, [pc, #132]	@ (8002538 <HAL_InitTick+0xec>)
 80024b4:	4a21      	ldr	r2, [pc, #132]	@ (800253c <HAL_InitTick+0xf0>)
 80024b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80024b8:	4b1f      	ldr	r3, [pc, #124]	@ (8002538 <HAL_InitTick+0xec>)
 80024ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80024c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002538 <HAL_InitTick+0xec>)
 80024c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80024c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002538 <HAL_InitTick+0xec>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002538 <HAL_InitTick+0xec>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024d2:	4b19      	ldr	r3, [pc, #100]	@ (8002538 <HAL_InitTick+0xec>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80024d8:	4817      	ldr	r0, [pc, #92]	@ (8002538 <HAL_InitTick+0xec>)
 80024da:	f001 fcf9 	bl	8003ed0 <HAL_TIM_Base_Init>
 80024de:	4603      	mov	r3, r0
 80024e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80024e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d11b      	bne.n	8002524 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80024ec:	4812      	ldr	r0, [pc, #72]	@ (8002538 <HAL_InitTick+0xec>)
 80024ee:	f001 fd49 	bl	8003f84 <HAL_TIM_Base_Start_IT>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80024f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d111      	bne.n	8002524 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002500:	2036      	movs	r0, #54	@ 0x36
 8002502:	f000 f9d7 	bl	80028b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2b0f      	cmp	r3, #15
 800250a:	d808      	bhi.n	800251e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800250c:	2200      	movs	r2, #0
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	2036      	movs	r0, #54	@ 0x36
 8002512:	f000 f9b3 	bl	800287c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002516:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_InitTick+0xf4>)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6013      	str	r3, [r2, #0]
 800251c:	e002      	b.n	8002524 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002524:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002528:	4618      	mov	r0, r3
 800252a:	3738      	adds	r7, #56	@ 0x38
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	431bde83 	.word	0x431bde83
 8002538:	200001e4 	.word	0x200001e4
 800253c:	40001000 	.word	0x40001000
 8002540:	20000060 	.word	0x20000060

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <NMI_Handler+0x4>

0800254c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <HardFault_Handler+0x4>

08002554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <MemManage_Handler+0x4>

0800255c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <BusFault_Handler+0x4>

08002564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <UsageFault_Handler+0x4>

0800256c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
	...

0800257c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002580:	4802      	ldr	r0, [pc, #8]	@ (800258c <USART2_IRQHandler+0x10>)
 8002582:	f002 f847 	bl	8004614 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	2000016c 	.word	0x2000016c

08002590 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002594:	4802      	ldr	r0, [pc, #8]	@ (80025a0 <TIM6_DAC_IRQHandler+0x10>)
 8002596:	f001 fd65 	bl	8004064 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
 800259e:	bf00      	nop
 80025a0:	200001e4 	.word	0x200001e4

080025a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025ac:	4a14      	ldr	r2, [pc, #80]	@ (8002600 <_sbrk+0x5c>)
 80025ae:	4b15      	ldr	r3, [pc, #84]	@ (8002604 <_sbrk+0x60>)
 80025b0:	1ad3      	subs	r3, r2, r3
 80025b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025b8:	4b13      	ldr	r3, [pc, #76]	@ (8002608 <_sbrk+0x64>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d102      	bne.n	80025c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025c0:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <_sbrk+0x64>)
 80025c2:	4a12      	ldr	r2, [pc, #72]	@ (800260c <_sbrk+0x68>)
 80025c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025c6:	4b10      	ldr	r3, [pc, #64]	@ (8002608 <_sbrk+0x64>)
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d207      	bcs.n	80025e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025d4:	f005 fede 	bl	8008394 <__errno>
 80025d8:	4603      	mov	r3, r0
 80025da:	220c      	movs	r2, #12
 80025dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025e2:	e009      	b.n	80025f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025e4:	4b08      	ldr	r3, [pc, #32]	@ (8002608 <_sbrk+0x64>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ea:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <_sbrk+0x64>)
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4413      	add	r3, r2
 80025f2:	4a05      	ldr	r2, [pc, #20]	@ (8002608 <_sbrk+0x64>)
 80025f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025f6:	68fb      	ldr	r3, [r7, #12]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	20020000 	.word	0x20020000
 8002604:	00000400 	.word	0x00000400
 8002608:	2000022c 	.word	0x2000022c
 800260c:	20019528 	.word	0x20019528

08002610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <SystemInit+0x20>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800261a:	4a05      	ldr	r2, [pc, #20]	@ (8002630 <SystemInit+0x20>)
 800261c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002620:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002634:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800266c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002638:	f7ff ffea 	bl	8002610 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800263c:	480c      	ldr	r0, [pc, #48]	@ (8002670 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800263e:	490d      	ldr	r1, [pc, #52]	@ (8002674 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002640:	4a0d      	ldr	r2, [pc, #52]	@ (8002678 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002644:	e002      	b.n	800264c <LoopCopyDataInit>

08002646 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002646:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002648:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800264a:	3304      	adds	r3, #4

0800264c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800264c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002650:	d3f9      	bcc.n	8002646 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002652:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002654:	4c0a      	ldr	r4, [pc, #40]	@ (8002680 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002656:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002658:	e001      	b.n	800265e <LoopFillZerobss>

0800265a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800265a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800265c:	3204      	adds	r2, #4

0800265e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002660:	d3fb      	bcc.n	800265a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002662:	f005 fe9d 	bl	80083a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002666:	f7ff fabd 	bl	8001be4 <main>
  bx  lr    
 800266a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800266c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002674:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8002678:	080094a0 	.word	0x080094a0
  ldr r2, =_sbss
 800267c:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8002680:	20019524 	.word	0x20019524

08002684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC_IRQHandler>
	...

08002688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800268c:	4b0e      	ldr	r3, [pc, #56]	@ (80026c8 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0d      	ldr	r2, [pc, #52]	@ (80026c8 <HAL_Init+0x40>)
 8002692:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002698:	4b0b      	ldr	r3, [pc, #44]	@ (80026c8 <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0a      	ldr	r2, [pc, #40]	@ (80026c8 <HAL_Init+0x40>)
 800269e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a4:	4b08      	ldr	r3, [pc, #32]	@ (80026c8 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a07      	ldr	r2, [pc, #28]	@ (80026c8 <HAL_Init+0x40>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b0:	2003      	movs	r0, #3
 80026b2:	f000 f8d8 	bl	8002866 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b6:	200f      	movs	r0, #15
 80026b8:	f7ff fec8 	bl	800244c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026bc:	f7ff fe24 	bl	8002308 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00

080026cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d0:	4b06      	ldr	r3, [pc, #24]	@ (80026ec <HAL_IncTick+0x20>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <HAL_IncTick+0x24>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4413      	add	r3, r2
 80026dc:	4a04      	ldr	r2, [pc, #16]	@ (80026f0 <HAL_IncTick+0x24>)
 80026de:	6013      	str	r3, [r2, #0]
}
 80026e0:	bf00      	nop
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop
 80026ec:	20000064 	.word	0x20000064
 80026f0:	20000230 	.word	0x20000230

080026f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  return uwTick;
 80026f8:	4b03      	ldr	r3, [pc, #12]	@ (8002708 <HAL_GetTick+0x14>)
 80026fa:	681b      	ldr	r3, [r3, #0]
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	20000230 	.word	0x20000230

0800270c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800270c:	b480      	push	{r7}
 800270e:	b085      	sub	sp, #20
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800271c:	4b0c      	ldr	r3, [pc, #48]	@ (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002728:	4013      	ands	r3, r2
 800272a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002734:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002738:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800273c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800273e:	4a04      	ldr	r2, [pc, #16]	@ (8002750 <__NVIC_SetPriorityGrouping+0x44>)
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	60d3      	str	r3, [r2, #12]
}
 8002744:	bf00      	nop
 8002746:	3714      	adds	r7, #20
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr
 8002750:	e000ed00 	.word	0xe000ed00

08002754 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002758:	4b04      	ldr	r3, [pc, #16]	@ (800276c <__NVIC_GetPriorityGrouping+0x18>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	f003 0307 	and.w	r3, r3, #7
}
 8002762:	4618      	mov	r0, r3
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000ed00 	.word	0xe000ed00

08002770 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800277a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	db0b      	blt.n	800279a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4907      	ldr	r1, [pc, #28]	@ (80027a8 <__NVIC_EnableIRQ+0x38>)
 800278a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278e:	095b      	lsrs	r3, r3, #5
 8002790:	2001      	movs	r0, #1
 8002792:	fa00 f202 	lsl.w	r2, r0, r2
 8002796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	e000e100 	.word	0xe000e100

080027ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	6039      	str	r1, [r7, #0]
 80027b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	db0a      	blt.n	80027d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	b2da      	uxtb	r2, r3
 80027c4:	490c      	ldr	r1, [pc, #48]	@ (80027f8 <__NVIC_SetPriority+0x4c>)
 80027c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ca:	0112      	lsls	r2, r2, #4
 80027cc:	b2d2      	uxtb	r2, r2
 80027ce:	440b      	add	r3, r1
 80027d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027d4:	e00a      	b.n	80027ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	4908      	ldr	r1, [pc, #32]	@ (80027fc <__NVIC_SetPriority+0x50>)
 80027dc:	79fb      	ldrb	r3, [r7, #7]
 80027de:	f003 030f 	and.w	r3, r3, #15
 80027e2:	3b04      	subs	r3, #4
 80027e4:	0112      	lsls	r2, r2, #4
 80027e6:	b2d2      	uxtb	r2, r2
 80027e8:	440b      	add	r3, r1
 80027ea:	761a      	strb	r2, [r3, #24]
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000e100 	.word	0xe000e100
 80027fc:	e000ed00 	.word	0xe000ed00

08002800 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002800:	b480      	push	{r7}
 8002802:	b089      	sub	sp, #36	@ 0x24
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0307 	and.w	r3, r3, #7
 8002812:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	f1c3 0307 	rsb	r3, r3, #7
 800281a:	2b04      	cmp	r3, #4
 800281c:	bf28      	it	cs
 800281e:	2304      	movcs	r3, #4
 8002820:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3304      	adds	r3, #4
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <NVIC_EncodePriority+0x30>
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3b03      	subs	r3, #3
 800282e:	e000      	b.n	8002832 <NVIC_EncodePriority+0x32>
 8002830:	2300      	movs	r3, #0
 8002832:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002834:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	401a      	ands	r2, r3
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002848:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	fa01 f303 	lsl.w	r3, r1, r3
 8002852:	43d9      	mvns	r1, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002858:	4313      	orrs	r3, r2
         );
}
 800285a:	4618      	mov	r0, r3
 800285c:	3724      	adds	r7, #36	@ 0x24
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ff4c 	bl	800270c <__NVIC_SetPriorityGrouping>
}
 8002874:	bf00      	nop
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	4603      	mov	r3, r0
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800288e:	f7ff ff61 	bl	8002754 <__NVIC_GetPriorityGrouping>
 8002892:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	6978      	ldr	r0, [r7, #20]
 800289a:	f7ff ffb1 	bl	8002800 <NVIC_EncodePriority>
 800289e:	4602      	mov	r2, r0
 80028a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028a4:	4611      	mov	r1, r2
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff ff80 	bl	80027ac <__NVIC_SetPriority>
}
 80028ac:	bf00      	nop
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	4603      	mov	r3, r0
 80028bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff54 	bl	8002770 <__NVIC_EnableIRQ>
}
 80028c8:	bf00      	nop
 80028ca:	3708      	adds	r7, #8
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028de:	f7ff ff09 	bl	80026f4 <HAL_GetTick>
 80028e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d008      	beq.n	8002902 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2280      	movs	r2, #128	@ 0x80
 80028f4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e052      	b.n	80029a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0216 	bic.w	r2, r2, #22
 8002910:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002920:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <HAL_DMA_Abort+0x62>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0208 	bic.w	r2, r2, #8
 8002940:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002952:	e013      	b.n	800297c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002954:	f7ff fece 	bl	80026f4 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b05      	cmp	r3, #5
 8002960:	d90c      	bls.n	800297c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2220      	movs	r2, #32
 8002966:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2203      	movs	r2, #3
 800296c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e015      	b.n	80029a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e4      	bne.n	8002954 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800298e:	223f      	movs	r2, #63	@ 0x3f
 8002990:	409a      	lsls	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d004      	beq.n	80029ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2280      	movs	r2, #128	@ 0x80
 80029c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e00c      	b.n	80029e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2205      	movs	r2, #5
 80029d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 0201 	bic.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	@ 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
 8002a0e:	e16b      	b.n	8002ce8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a10:	2201      	movs	r2, #1
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	fa02 f303 	lsl.w	r3, r2, r3
 8002a18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	4013      	ands	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	f040 815a 	bne.w	8002ce2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d005      	beq.n	8002a46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d130      	bne.n	8002aa8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	2203      	movs	r2, #3
 8002a52:	fa02 f303 	lsl.w	r3, r2, r3
 8002a56:	43db      	mvns	r3, r3
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68da      	ldr	r2, [r3, #12]
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	69ba      	ldr	r2, [r7, #24]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	f003 0201 	and.w	r2, r3, #1
 8002a96:	69fb      	ldr	r3, [r7, #28]
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d017      	beq.n	8002ae4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	2203      	movs	r2, #3
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	4013      	ands	r3, r2
 8002aca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d123      	bne.n	8002b38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	08da      	lsrs	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3208      	adds	r2, #8
 8002af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	f003 0307 	and.w	r3, r3, #7
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	08da      	lsrs	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3208      	adds	r2, #8
 8002b32:	69b9      	ldr	r1, [r7, #24]
 8002b34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	005b      	lsls	r3, r3, #1
 8002b42:	2203      	movs	r2, #3
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f003 0203 	and.w	r2, r3, #3
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 80b4 	beq.w	8002ce2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	60fb      	str	r3, [r7, #12]
 8002b7e:	4b60      	ldr	r3, [pc, #384]	@ (8002d00 <HAL_GPIO_Init+0x30c>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	4a5f      	ldr	r2, [pc, #380]	@ (8002d00 <HAL_GPIO_Init+0x30c>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8a:	4b5d      	ldr	r3, [pc, #372]	@ (8002d00 <HAL_GPIO_Init+0x30c>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b96:	4a5b      	ldr	r2, [pc, #364]	@ (8002d04 <HAL_GPIO_Init+0x310>)
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	089b      	lsrs	r3, r3, #2
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f003 0303 	and.w	r3, r3, #3
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	220f      	movs	r2, #15
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a52      	ldr	r2, [pc, #328]	@ (8002d08 <HAL_GPIO_Init+0x314>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d02b      	beq.n	8002c1a <HAL_GPIO_Init+0x226>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a51      	ldr	r2, [pc, #324]	@ (8002d0c <HAL_GPIO_Init+0x318>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d025      	beq.n	8002c16 <HAL_GPIO_Init+0x222>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a50      	ldr	r2, [pc, #320]	@ (8002d10 <HAL_GPIO_Init+0x31c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01f      	beq.n	8002c12 <HAL_GPIO_Init+0x21e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a4f      	ldr	r2, [pc, #316]	@ (8002d14 <HAL_GPIO_Init+0x320>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d019      	beq.n	8002c0e <HAL_GPIO_Init+0x21a>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a4e      	ldr	r2, [pc, #312]	@ (8002d18 <HAL_GPIO_Init+0x324>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d013      	beq.n	8002c0a <HAL_GPIO_Init+0x216>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a4d      	ldr	r2, [pc, #308]	@ (8002d1c <HAL_GPIO_Init+0x328>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00d      	beq.n	8002c06 <HAL_GPIO_Init+0x212>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a4c      	ldr	r2, [pc, #304]	@ (8002d20 <HAL_GPIO_Init+0x32c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <HAL_GPIO_Init+0x20e>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d24 <HAL_GPIO_Init+0x330>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d101      	bne.n	8002bfe <HAL_GPIO_Init+0x20a>
 8002bfa:	2307      	movs	r3, #7
 8002bfc:	e00e      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002bfe:	2308      	movs	r3, #8
 8002c00:	e00c      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c02:	2306      	movs	r3, #6
 8002c04:	e00a      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c06:	2305      	movs	r3, #5
 8002c08:	e008      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c0a:	2304      	movs	r3, #4
 8002c0c:	e006      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e004      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e002      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_GPIO_Init+0x228>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	69fa      	ldr	r2, [r7, #28]
 8002c1e:	f002 0203 	and.w	r2, r2, #3
 8002c22:	0092      	lsls	r2, r2, #2
 8002c24:	4093      	lsls	r3, r2
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c2c:	4935      	ldr	r1, [pc, #212]	@ (8002d04 <HAL_GPIO_Init+0x310>)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	3302      	adds	r3, #2
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c5e:	4a32      	ldr	r2, [pc, #200]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c64:	4b30      	ldr	r3, [pc, #192]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c88:	4a27      	ldr	r2, [pc, #156]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c8e:	4b26      	ldr	r3, [pc, #152]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cb2:	4a1d      	ldr	r2, [pc, #116]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002cdc:	4a12      	ldr	r2, [pc, #72]	@ (8002d28 <HAL_GPIO_Init+0x334>)
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	61fb      	str	r3, [r7, #28]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b0f      	cmp	r3, #15
 8002cec:	f67f ae90 	bls.w	8002a10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	3724      	adds	r7, #36	@ 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40023800 	.word	0x40023800
 8002d04:	40013800 	.word	0x40013800
 8002d08:	40020000 	.word	0x40020000
 8002d0c:	40020400 	.word	0x40020400
 8002d10:	40020800 	.word	0x40020800
 8002d14:	40020c00 	.word	0x40020c00
 8002d18:	40021000 	.word	0x40021000
 8002d1c:	40021400 	.word	0x40021400
 8002d20:	40021800 	.word	0x40021800
 8002d24:	40021c00 	.word	0x40021c00
 8002d28:	40013c00 	.word	0x40013c00

08002d2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	460b      	mov	r3, r1
 8002d36:	807b      	strh	r3, [r7, #2]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d3c:	787b      	ldrb	r3, [r7, #1]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d003      	beq.n	8002d4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d42:	887a      	ldrh	r2, [r7, #2]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d48:	e003      	b.n	8002d52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d4a:	887b      	ldrh	r3, [r7, #2]
 8002d4c:	041a      	lsls	r2, r3, #16
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	619a      	str	r2, [r3, #24]
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b086      	sub	sp, #24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e267      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d075      	beq.n	8002e6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d7e:	4b88      	ldr	r3, [pc, #544]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d00c      	beq.n	8002da4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d8a:	4b85      	ldr	r3, [pc, #532]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d112      	bne.n	8002dbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d96:	4b82      	ldr	r3, [pc, #520]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002da2:	d10b      	bne.n	8002dbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da4:	4b7e      	ldr	r3, [pc, #504]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d05b      	beq.n	8002e68 <HAL_RCC_OscConfig+0x108>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d157      	bne.n	8002e68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e242      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x74>
 8002dc6:	4b76      	ldr	r3, [pc, #472]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a75      	ldr	r2, [pc, #468]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd0:	6013      	str	r3, [r2, #0]
 8002dd2:	e01d      	b.n	8002e10 <HAL_RCC_OscConfig+0xb0>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ddc:	d10c      	bne.n	8002df8 <HAL_RCC_OscConfig+0x98>
 8002dde:	4b70      	ldr	r3, [pc, #448]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a6f      	ldr	r2, [pc, #444]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	4b6d      	ldr	r3, [pc, #436]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a6c      	ldr	r2, [pc, #432]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e00b      	b.n	8002e10 <HAL_RCC_OscConfig+0xb0>
 8002df8:	4b69      	ldr	r3, [pc, #420]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a68      	ldr	r2, [pc, #416]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002dfe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	4b66      	ldr	r3, [pc, #408]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a65      	ldr	r2, [pc, #404]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d013      	beq.n	8002e40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e18:	f7ff fc6c 	bl	80026f4 <HAL_GetTick>
 8002e1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1e:	e008      	b.n	8002e32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e20:	f7ff fc68 	bl	80026f4 <HAL_GetTick>
 8002e24:	4602      	mov	r2, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1ad3      	subs	r3, r2, r3
 8002e2a:	2b64      	cmp	r3, #100	@ 0x64
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e207      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e32:	4b5b      	ldr	r3, [pc, #364]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0f0      	beq.n	8002e20 <HAL_RCC_OscConfig+0xc0>
 8002e3e:	e014      	b.n	8002e6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e40:	f7ff fc58 	bl	80026f4 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e48:	f7ff fc54 	bl	80026f4 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b64      	cmp	r3, #100	@ 0x64
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e1f3      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e5a:	4b51      	ldr	r3, [pc, #324]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0xe8>
 8002e66:	e000      	b.n	8002e6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d063      	beq.n	8002f3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e76:	4b4a      	ldr	r3, [pc, #296]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f003 030c 	and.w	r3, r3, #12
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00b      	beq.n	8002e9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e82:	4b47      	ldr	r3, [pc, #284]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e8a:	2b08      	cmp	r3, #8
 8002e8c:	d11c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8e:	4b44      	ldr	r3, [pc, #272]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d116      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e9a:	4b41      	ldr	r3, [pc, #260]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x152>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d001      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e1c7      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	4937      	ldr	r1, [pc, #220]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec6:	e03a      	b.n	8002f3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ed0:	4b34      	ldr	r3, [pc, #208]	@ (8002fa4 <HAL_RCC_OscConfig+0x244>)
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed6:	f7ff fc0d 	bl	80026f4 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ede:	f7ff fc09 	bl	80026f4 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e1a8      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ef0:	4b2b      	ldr	r3, [pc, #172]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d0f0      	beq.n	8002ede <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002efc:	4b28      	ldr	r3, [pc, #160]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4925      	ldr	r1, [pc, #148]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	600b      	str	r3, [r1, #0]
 8002f10:	e015      	b.n	8002f3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f12:	4b24      	ldr	r3, [pc, #144]	@ (8002fa4 <HAL_RCC_OscConfig+0x244>)
 8002f14:	2200      	movs	r2, #0
 8002f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f18:	f7ff fbec 	bl	80026f4 <HAL_GetTick>
 8002f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1e:	e008      	b.n	8002f32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f20:	f7ff fbe8 	bl	80026f4 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d901      	bls.n	8002f32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	e187      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f32:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d1f0      	bne.n	8002f20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0308 	and.w	r3, r3, #8
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d036      	beq.n	8002fb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d016      	beq.n	8002f80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f52:	4b15      	ldr	r3, [pc, #84]	@ (8002fa8 <HAL_RCC_OscConfig+0x248>)
 8002f54:	2201      	movs	r2, #1
 8002f56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f58:	f7ff fbcc 	bl	80026f4 <HAL_GetTick>
 8002f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5e:	e008      	b.n	8002f72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f60:	f7ff fbc8 	bl	80026f4 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d901      	bls.n	8002f72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e167      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f72:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa0 <HAL_RCC_OscConfig+0x240>)
 8002f74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f76:	f003 0302 	and.w	r3, r3, #2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d0f0      	beq.n	8002f60 <HAL_RCC_OscConfig+0x200>
 8002f7e:	e01b      	b.n	8002fb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f80:	4b09      	ldr	r3, [pc, #36]	@ (8002fa8 <HAL_RCC_OscConfig+0x248>)
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f86:	f7ff fbb5 	bl	80026f4 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f8c:	e00e      	b.n	8002fac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8e:	f7ff fbb1 	bl	80026f4 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d907      	bls.n	8002fac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e150      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	42470000 	.word	0x42470000
 8002fa8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fac:	4b88      	ldr	r3, [pc, #544]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fb0:	f003 0302 	and.w	r3, r3, #2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1ea      	bne.n	8002f8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0304 	and.w	r3, r3, #4
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 8097 	beq.w	80030f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fca:	4b81      	ldr	r3, [pc, #516]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	60bb      	str	r3, [r7, #8]
 8002fda:	4b7d      	ldr	r3, [pc, #500]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fde:	4a7c      	ldr	r2, [pc, #496]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fe0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fe4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002fe6:	4b7a      	ldr	r3, [pc, #488]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	60bb      	str	r3, [r7, #8]
 8002ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b77      	ldr	r3, [pc, #476]	@ (80031d4 <HAL_RCC_OscConfig+0x474>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d118      	bne.n	8003034 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003002:	4b74      	ldr	r3, [pc, #464]	@ (80031d4 <HAL_RCC_OscConfig+0x474>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a73      	ldr	r2, [pc, #460]	@ (80031d4 <HAL_RCC_OscConfig+0x474>)
 8003008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800300c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300e:	f7ff fb71 	bl	80026f4 <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003016:	f7ff fb6d 	bl	80026f4 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e10c      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003028:	4b6a      	ldr	r3, [pc, #424]	@ (80031d4 <HAL_RCC_OscConfig+0x474>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003030:	2b00      	cmp	r3, #0
 8003032:	d0f0      	beq.n	8003016 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d106      	bne.n	800304a <HAL_RCC_OscConfig+0x2ea>
 800303c:	4b64      	ldr	r3, [pc, #400]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 800303e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003040:	4a63      	ldr	r2, [pc, #396]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003042:	f043 0301 	orr.w	r3, r3, #1
 8003046:	6713      	str	r3, [r2, #112]	@ 0x70
 8003048:	e01c      	b.n	8003084 <HAL_RCC_OscConfig+0x324>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b05      	cmp	r3, #5
 8003050:	d10c      	bne.n	800306c <HAL_RCC_OscConfig+0x30c>
 8003052:	4b5f      	ldr	r3, [pc, #380]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003056:	4a5e      	ldr	r2, [pc, #376]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003058:	f043 0304 	orr.w	r3, r3, #4
 800305c:	6713      	str	r3, [r2, #112]	@ 0x70
 800305e:	4b5c      	ldr	r3, [pc, #368]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	4a5b      	ldr	r2, [pc, #364]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003064:	f043 0301 	orr.w	r3, r3, #1
 8003068:	6713      	str	r3, [r2, #112]	@ 0x70
 800306a:	e00b      	b.n	8003084 <HAL_RCC_OscConfig+0x324>
 800306c:	4b58      	ldr	r3, [pc, #352]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003070:	4a57      	ldr	r2, [pc, #348]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003072:	f023 0301 	bic.w	r3, r3, #1
 8003076:	6713      	str	r3, [r2, #112]	@ 0x70
 8003078:	4b55      	ldr	r3, [pc, #340]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307c:	4a54      	ldr	r2, [pc, #336]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 0304 	bic.w	r3, r3, #4
 8003082:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d015      	beq.n	80030b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800308c:	f7ff fb32 	bl	80026f4 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003092:	e00a      	b.n	80030aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003094:	f7ff fb2e 	bl	80026f4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d901      	bls.n	80030aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e0cb      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030aa:	4b49      	ldr	r3, [pc, #292]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	f003 0302 	and.w	r3, r3, #2
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0ee      	beq.n	8003094 <HAL_RCC_OscConfig+0x334>
 80030b6:	e014      	b.n	80030e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b8:	f7ff fb1c 	bl	80026f4 <HAL_GetTick>
 80030bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030c0:	f7ff fb18 	bl	80026f4 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e0b5      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d6:	4b3e      	ldr	r3, [pc, #248]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1ee      	bne.n	80030c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d105      	bne.n	80030f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e8:	4b39      	ldr	r3, [pc, #228]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	4a38      	ldr	r2, [pc, #224]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 80030ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 80a1 	beq.w	8003240 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fe:	4b34      	ldr	r3, [pc, #208]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 030c 	and.w	r3, r3, #12
 8003106:	2b08      	cmp	r3, #8
 8003108:	d05c      	beq.n	80031c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d141      	bne.n	8003196 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003112:	4b31      	ldr	r3, [pc, #196]	@ (80031d8 <HAL_RCC_OscConfig+0x478>)
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003118:	f7ff faec 	bl	80026f4 <HAL_GetTick>
 800311c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311e:	e008      	b.n	8003132 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003120:	f7ff fae8 	bl	80026f4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	2b02      	cmp	r3, #2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e087      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	4b27      	ldr	r3, [pc, #156]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	d1f0      	bne.n	8003120 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69da      	ldr	r2, [r3, #28]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	431a      	orrs	r2, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314c:	019b      	lsls	r3, r3, #6
 800314e:	431a      	orrs	r2, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	085b      	lsrs	r3, r3, #1
 8003156:	3b01      	subs	r3, #1
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	491b      	ldr	r1, [pc, #108]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003168:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <HAL_RCC_OscConfig+0x478>)
 800316a:	2201      	movs	r2, #1
 800316c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316e:	f7ff fac1 	bl	80026f4 <HAL_GetTick>
 8003172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003174:	e008      	b.n	8003188 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003176:	f7ff fabd 	bl	80026f4 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	2b02      	cmp	r3, #2
 8003182:	d901      	bls.n	8003188 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003184:	2303      	movs	r3, #3
 8003186:	e05c      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003188:	4b11      	ldr	r3, [pc, #68]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d0f0      	beq.n	8003176 <HAL_RCC_OscConfig+0x416>
 8003194:	e054      	b.n	8003240 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003196:	4b10      	ldr	r3, [pc, #64]	@ (80031d8 <HAL_RCC_OscConfig+0x478>)
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319c:	f7ff faaa 	bl	80026f4 <HAL_GetTick>
 80031a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	e008      	b.n	80031b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a4:	f7ff faa6 	bl	80026f4 <HAL_GetTick>
 80031a8:	4602      	mov	r2, r0
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	1ad3      	subs	r3, r2, r3
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d901      	bls.n	80031b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031b2:	2303      	movs	r3, #3
 80031b4:	e045      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	4b06      	ldr	r3, [pc, #24]	@ (80031d0 <HAL_RCC_OscConfig+0x470>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d1f0      	bne.n	80031a4 <HAL_RCC_OscConfig+0x444>
 80031c2:	e03d      	b.n	8003240 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d107      	bne.n	80031dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e038      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
 80031d0:	40023800 	.word	0x40023800
 80031d4:	40007000 	.word	0x40007000
 80031d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031dc:	4b1b      	ldr	r3, [pc, #108]	@ (800324c <HAL_RCC_OscConfig+0x4ec>)
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	699b      	ldr	r3, [r3, #24]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d028      	beq.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d121      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003202:	429a      	cmp	r2, r3
 8003204:	d11a      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800320c:	4013      	ands	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003212:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003214:	4293      	cmp	r3, r2
 8003216:	d111      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003222:	085b      	lsrs	r3, r3, #1
 8003224:	3b01      	subs	r3, #1
 8003226:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003228:	429a      	cmp	r2, r3
 800322a:	d107      	bne.n	800323c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003236:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003238:	429a      	cmp	r2, r3
 800323a:	d001      	beq.n	8003240 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003240:	2300      	movs	r3, #0
}
 8003242:	4618      	mov	r0, r3
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	40023800 	.word	0x40023800

08003250 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d101      	bne.n	8003264 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0cc      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003264:	4b68      	ldr	r3, [pc, #416]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d90c      	bls.n	800328c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b65      	ldr	r3, [pc, #404]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003274:	683a      	ldr	r2, [r7, #0]
 8003276:	b2d2      	uxtb	r2, r2
 8003278:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800327a:	4b63      	ldr	r3, [pc, #396]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	429a      	cmp	r2, r3
 8003286:	d001      	beq.n	800328c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0b8      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b00      	cmp	r3, #0
 8003296:	d020      	beq.n	80032da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d005      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a4:	4b59      	ldr	r3, [pc, #356]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4a58      	ldr	r2, [pc, #352]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032bc:	4b53      	ldr	r3, [pc, #332]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	4a52      	ldr	r2, [pc, #328]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c8:	4b50      	ldr	r3, [pc, #320]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	494d      	ldr	r1, [pc, #308]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d044      	beq.n	8003370 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ee:	4b47      	ldr	r3, [pc, #284]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d119      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e07f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	2b02      	cmp	r3, #2
 8003304:	d003      	beq.n	800330e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800330a:	2b03      	cmp	r3, #3
 800330c:	d107      	bne.n	800331e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330e:	4b3f      	ldr	r3, [pc, #252]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e06f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331e:	4b3b      	ldr	r3, [pc, #236]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e067      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332e:	4b37      	ldr	r3, [pc, #220]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f023 0203 	bic.w	r2, r3, #3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	4934      	ldr	r1, [pc, #208]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 800333c:	4313      	orrs	r3, r2
 800333e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003340:	f7ff f9d8 	bl	80026f4 <HAL_GetTick>
 8003344:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003346:	e00a      	b.n	800335e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003348:	f7ff f9d4 	bl	80026f4 <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003356:	4293      	cmp	r3, r2
 8003358:	d901      	bls.n	800335e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e04f      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335e:	4b2b      	ldr	r3, [pc, #172]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f003 020c 	and.w	r2, r3, #12
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	429a      	cmp	r2, r3
 800336e:	d1eb      	bne.n	8003348 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003370:	4b25      	ldr	r3, [pc, #148]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0307 	and.w	r3, r3, #7
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	429a      	cmp	r2, r3
 800337c:	d20c      	bcs.n	8003398 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337e:	4b22      	ldr	r3, [pc, #136]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003380:	683a      	ldr	r2, [r7, #0]
 8003382:	b2d2      	uxtb	r2, r2
 8003384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003386:	4b20      	ldr	r3, [pc, #128]	@ (8003408 <HAL_RCC_ClockConfig+0x1b8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e032      	b.n	80033fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a4:	4b19      	ldr	r3, [pc, #100]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	4916      	ldr	r1, [pc, #88]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033b2:	4313      	orrs	r3, r2
 80033b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0308 	and.w	r3, r3, #8
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d009      	beq.n	80033d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033c2:	4b12      	ldr	r3, [pc, #72]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	691b      	ldr	r3, [r3, #16]
 80033ce:	00db      	lsls	r3, r3, #3
 80033d0:	490e      	ldr	r1, [pc, #56]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033d6:	f000 f821 	bl	800341c <HAL_RCC_GetSysClockFreq>
 80033da:	4602      	mov	r2, r0
 80033dc:	4b0b      	ldr	r3, [pc, #44]	@ (800340c <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	091b      	lsrs	r3, r3, #4
 80033e2:	f003 030f 	and.w	r3, r3, #15
 80033e6:	490a      	ldr	r1, [pc, #40]	@ (8003410 <HAL_RCC_ClockConfig+0x1c0>)
 80033e8:	5ccb      	ldrb	r3, [r1, r3]
 80033ea:	fa22 f303 	lsr.w	r3, r2, r3
 80033ee:	4a09      	ldr	r2, [pc, #36]	@ (8003414 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033f2:	4b09      	ldr	r3, [pc, #36]	@ (8003418 <HAL_RCC_ClockConfig+0x1c8>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f7ff f828 	bl	800244c <HAL_InitTick>

  return HAL_OK;
 80033fc:	2300      	movs	r3, #0
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40023c00 	.word	0x40023c00
 800340c:	40023800 	.word	0x40023800
 8003410:	08009344 	.word	0x08009344
 8003414:	2000005c 	.word	0x2000005c
 8003418:	20000060 	.word	0x20000060

0800341c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800341c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003420:	b094      	sub	sp, #80	@ 0x50
 8003422:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	647b      	str	r3, [r7, #68]	@ 0x44
 8003428:	2300      	movs	r3, #0
 800342a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800342c:	2300      	movs	r3, #0
 800342e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003434:	4b79      	ldr	r3, [pc, #484]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 030c 	and.w	r3, r3, #12
 800343c:	2b08      	cmp	r3, #8
 800343e:	d00d      	beq.n	800345c <HAL_RCC_GetSysClockFreq+0x40>
 8003440:	2b08      	cmp	r3, #8
 8003442:	f200 80e1 	bhi.w	8003608 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003446:	2b00      	cmp	r3, #0
 8003448:	d002      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x34>
 800344a:	2b04      	cmp	r3, #4
 800344c:	d003      	beq.n	8003456 <HAL_RCC_GetSysClockFreq+0x3a>
 800344e:	e0db      	b.n	8003608 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003450:	4b73      	ldr	r3, [pc, #460]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x204>)
 8003452:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003454:	e0db      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003456:	4b73      	ldr	r3, [pc, #460]	@ (8003624 <HAL_RCC_GetSysClockFreq+0x208>)
 8003458:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800345a:	e0d8      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800345c:	4b6f      	ldr	r3, [pc, #444]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003464:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003466:	4b6d      	ldr	r3, [pc, #436]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d063      	beq.n	800353a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003472:	4b6a      	ldr	r3, [pc, #424]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	099b      	lsrs	r3, r3, #6
 8003478:	2200      	movs	r2, #0
 800347a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800347c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800347e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003484:	633b      	str	r3, [r7, #48]	@ 0x30
 8003486:	2300      	movs	r3, #0
 8003488:	637b      	str	r3, [r7, #52]	@ 0x34
 800348a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800348e:	4622      	mov	r2, r4
 8003490:	462b      	mov	r3, r5
 8003492:	f04f 0000 	mov.w	r0, #0
 8003496:	f04f 0100 	mov.w	r1, #0
 800349a:	0159      	lsls	r1, r3, #5
 800349c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034a0:	0150      	lsls	r0, r2, #5
 80034a2:	4602      	mov	r2, r0
 80034a4:	460b      	mov	r3, r1
 80034a6:	4621      	mov	r1, r4
 80034a8:	1a51      	subs	r1, r2, r1
 80034aa:	6139      	str	r1, [r7, #16]
 80034ac:	4629      	mov	r1, r5
 80034ae:	eb63 0301 	sbc.w	r3, r3, r1
 80034b2:	617b      	str	r3, [r7, #20]
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	f04f 0300 	mov.w	r3, #0
 80034bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034c0:	4659      	mov	r1, fp
 80034c2:	018b      	lsls	r3, r1, #6
 80034c4:	4651      	mov	r1, sl
 80034c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034ca:	4651      	mov	r1, sl
 80034cc:	018a      	lsls	r2, r1, #6
 80034ce:	4651      	mov	r1, sl
 80034d0:	ebb2 0801 	subs.w	r8, r2, r1
 80034d4:	4659      	mov	r1, fp
 80034d6:	eb63 0901 	sbc.w	r9, r3, r1
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ee:	4690      	mov	r8, r2
 80034f0:	4699      	mov	r9, r3
 80034f2:	4623      	mov	r3, r4
 80034f4:	eb18 0303 	adds.w	r3, r8, r3
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	462b      	mov	r3, r5
 80034fc:	eb49 0303 	adc.w	r3, r9, r3
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800350e:	4629      	mov	r1, r5
 8003510:	024b      	lsls	r3, r1, #9
 8003512:	4621      	mov	r1, r4
 8003514:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003518:	4621      	mov	r1, r4
 800351a:	024a      	lsls	r2, r1, #9
 800351c:	4610      	mov	r0, r2
 800351e:	4619      	mov	r1, r3
 8003520:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003522:	2200      	movs	r2, #0
 8003524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003528:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800352c:	f7fd faae 	bl	8000a8c <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4613      	mov	r3, r2
 8003536:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003538:	e058      	b.n	80035ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800353a:	4b38      	ldr	r3, [pc, #224]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	099b      	lsrs	r3, r3, #6
 8003540:	2200      	movs	r2, #0
 8003542:	4618      	mov	r0, r3
 8003544:	4611      	mov	r1, r2
 8003546:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800354a:	623b      	str	r3, [r7, #32]
 800354c:	2300      	movs	r3, #0
 800354e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003550:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003554:	4642      	mov	r2, r8
 8003556:	464b      	mov	r3, r9
 8003558:	f04f 0000 	mov.w	r0, #0
 800355c:	f04f 0100 	mov.w	r1, #0
 8003560:	0159      	lsls	r1, r3, #5
 8003562:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003566:	0150      	lsls	r0, r2, #5
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4641      	mov	r1, r8
 800356e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003572:	4649      	mov	r1, r9
 8003574:	eb63 0b01 	sbc.w	fp, r3, r1
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003584:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003588:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800358c:	ebb2 040a 	subs.w	r4, r2, sl
 8003590:	eb63 050b 	sbc.w	r5, r3, fp
 8003594:	f04f 0200 	mov.w	r2, #0
 8003598:	f04f 0300 	mov.w	r3, #0
 800359c:	00eb      	lsls	r3, r5, #3
 800359e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035a2:	00e2      	lsls	r2, r4, #3
 80035a4:	4614      	mov	r4, r2
 80035a6:	461d      	mov	r5, r3
 80035a8:	4643      	mov	r3, r8
 80035aa:	18e3      	adds	r3, r4, r3
 80035ac:	603b      	str	r3, [r7, #0]
 80035ae:	464b      	mov	r3, r9
 80035b0:	eb45 0303 	adc.w	r3, r5, r3
 80035b4:	607b      	str	r3, [r7, #4]
 80035b6:	f04f 0200 	mov.w	r2, #0
 80035ba:	f04f 0300 	mov.w	r3, #0
 80035be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035c2:	4629      	mov	r1, r5
 80035c4:	028b      	lsls	r3, r1, #10
 80035c6:	4621      	mov	r1, r4
 80035c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035cc:	4621      	mov	r1, r4
 80035ce:	028a      	lsls	r2, r1, #10
 80035d0:	4610      	mov	r0, r2
 80035d2:	4619      	mov	r1, r3
 80035d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035d6:	2200      	movs	r2, #0
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	61fa      	str	r2, [r7, #28]
 80035dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035e0:	f7fd fa54 	bl	8000a8c <__aeabi_uldivmod>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4613      	mov	r3, r2
 80035ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035ec:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <HAL_RCC_GetSysClockFreq+0x200>)
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	f003 0303 	and.w	r3, r3, #3
 80035f6:	3301      	adds	r3, #1
 80035f8:	005b      	lsls	r3, r3, #1
 80035fa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80035fc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003600:	fbb2 f3f3 	udiv	r3, r2, r3
 8003604:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003606:	e002      	b.n	800360e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b05      	ldr	r3, [pc, #20]	@ (8003620 <HAL_RCC_GetSysClockFreq+0x204>)
 800360a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800360c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003610:	4618      	mov	r0, r3
 8003612:	3750      	adds	r7, #80	@ 0x50
 8003614:	46bd      	mov	sp, r7
 8003616:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800361a:	bf00      	nop
 800361c:	40023800 	.word	0x40023800
 8003620:	00f42400 	.word	0x00f42400
 8003624:	007a1200 	.word	0x007a1200

08003628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003628:	b480      	push	{r7}
 800362a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800362c:	4b03      	ldr	r3, [pc, #12]	@ (800363c <HAL_RCC_GetHCLKFreq+0x14>)
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	2000005c 	.word	0x2000005c

08003640 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003644:	f7ff fff0 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b05      	ldr	r3, [pc, #20]	@ (8003660 <HAL_RCC_GetPCLK1Freq+0x20>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	0a9b      	lsrs	r3, r3, #10
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4903      	ldr	r1, [pc, #12]	@ (8003664 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	fa22 f303 	lsr.w	r3, r2, r3
}
 800365c:	4618      	mov	r0, r3
 800365e:	bd80      	pop	{r7, pc}
 8003660:	40023800 	.word	0x40023800
 8003664:	08009354 	.word	0x08009354

08003668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800366c:	f7ff ffdc 	bl	8003628 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0b5b      	lsrs	r3, r3, #13
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	@ (800368c <HAL_RCC_GetPCLK2Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	08009354 	.word	0x08009354

08003690 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	220f      	movs	r2, #15
 800369e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036a0:	4b12      	ldr	r3, [pc, #72]	@ (80036ec <HAL_RCC_GetClockConfig+0x5c>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0203 	and.w	r2, r3, #3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036ac:	4b0f      	ldr	r3, [pc, #60]	@ (80036ec <HAL_RCC_GetClockConfig+0x5c>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036b8:	4b0c      	ldr	r3, [pc, #48]	@ (80036ec <HAL_RCC_GetClockConfig+0x5c>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036c4:	4b09      	ldr	r3, [pc, #36]	@ (80036ec <HAL_RCC_GetClockConfig+0x5c>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	08db      	lsrs	r3, r3, #3
 80036ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036d2:	4b07      	ldr	r3, [pc, #28]	@ (80036f0 <HAL_RCC_GetClockConfig+0x60>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0207 	and.w	r2, r3, #7
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	601a      	str	r2, [r3, #0]
}
 80036de:	bf00      	nop
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40023800 	.word	0x40023800
 80036f0:	40023c00 	.word	0x40023c00

080036f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d105      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003718:	2b00      	cmp	r3, #0
 800371a:	d035      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800371c:	4b62      	ldr	r3, [pc, #392]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003722:	f7fe ffe7 	bl	80026f4 <HAL_GetTick>
 8003726:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003728:	e008      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800372a:	f7fe ffe3 	bl	80026f4 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d901      	bls.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e0b0      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800373c:	4b5b      	ldr	r3, [pc, #364]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f0      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	019a      	lsls	r2, r3, #6
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	071b      	lsls	r3, r3, #28
 8003754:	4955      	ldr	r1, [pc, #340]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800375c:	4b52      	ldr	r3, [pc, #328]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003762:	f7fe ffc7 	bl	80026f4 <HAL_GetTick>
 8003766:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003768:	e008      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800376a:	f7fe ffc3 	bl	80026f4 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e090      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800377c:	4b4b      	ldr	r3, [pc, #300]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d0f0      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0302 	and.w	r3, r3, #2
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8083 	beq.w	800389c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003796:	2300      	movs	r3, #0
 8003798:	60fb      	str	r3, [r7, #12]
 800379a:	4b44      	ldr	r3, [pc, #272]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379e:	4a43      	ldr	r2, [pc, #268]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037a6:	4b41      	ldr	r3, [pc, #260]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ae:	60fb      	str	r3, [r7, #12]
 80037b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037b2:	4b3f      	ldr	r3, [pc, #252]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a3e      	ldr	r2, [pc, #248]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037be:	f7fe ff99 	bl	80026f4 <HAL_GetTick>
 80037c2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037c4:	e008      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80037c6:	f7fe ff95 	bl	80026f4 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e062      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80037d8:	4b35      	ldr	r3, [pc, #212]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037e4:	4b31      	ldr	r3, [pc, #196]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d02f      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	429a      	cmp	r2, r3
 8003800:	d028      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003802:	4b2a      	ldr	r3, [pc, #168]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800380c:	4b29      	ldr	r3, [pc, #164]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003812:	4b28      	ldr	r3, [pc, #160]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003814:	2200      	movs	r2, #0
 8003816:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003818:	4a24      	ldr	r2, [pc, #144]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800381e:	4b23      	ldr	r3, [pc, #140]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d114      	bne.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800382a:	f7fe ff63 	bl	80026f4 <HAL_GetTick>
 800382e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003830:	e00a      	b.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003832:	f7fe ff5f 	bl	80026f4 <HAL_GetTick>
 8003836:	4602      	mov	r2, r0
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	1ad3      	subs	r3, r2, r3
 800383c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003840:	4293      	cmp	r3, r2
 8003842:	d901      	bls.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e02a      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003848:	4b18      	ldr	r3, [pc, #96]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d0ee      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800385c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003860:	d10d      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003862:	4b12      	ldr	r3, [pc, #72]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003876:	490d      	ldr	r1, [pc, #52]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003878:	4313      	orrs	r3, r2
 800387a:	608b      	str	r3, [r1, #8]
 800387c:	e005      	b.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800387e:	4b0b      	ldr	r3, [pc, #44]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	4a0a      	ldr	r2, [pc, #40]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003884:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003888:	6093      	str	r3, [r2, #8]
 800388a:	4b08      	ldr	r3, [pc, #32]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800388c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003896:	4905      	ldr	r1, [pc, #20]	@ (80038ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003898:	4313      	orrs	r3, r2
 800389a:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	42470068 	.word	0x42470068
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40007000 	.word	0x40007000
 80038b4:	42470e40 	.word	0x42470e40

080038b8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d101      	bne.n	80038ce <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80038ca:	2301      	movs	r3, #1
 80038cc:	e073      	b.n	80039b6 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	7f5b      	ldrb	r3, [r3, #29]
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d105      	bne.n	80038e4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f7fe fd3a 	bl	8002358 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2202      	movs	r2, #2
 80038e8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b10      	cmp	r3, #16
 80038f6:	d055      	beq.n	80039a4 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	22ca      	movs	r2, #202	@ 0xca
 80038fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2253      	movs	r2, #83	@ 0x53
 8003906:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	f000 fa49 	bl	8003da0 <RTC_EnterInitMode>
 800390e:	4603      	mov	r3, r0
 8003910:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003912:	7bfb      	ldrb	r3, [r7, #15]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d12c      	bne.n	8003972 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003926:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800392a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6899      	ldr	r1, [r3, #8]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	431a      	orrs	r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	430a      	orrs	r2, r1
 8003948:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	68d2      	ldr	r2, [r2, #12]
 8003952:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6919      	ldr	r1, [r3, #16]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	041a      	lsls	r2, r3, #16
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	430a      	orrs	r2, r1
 8003966:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	f000 fa50 	bl	8003e0e <RTC_ExitInitMode>
 800396e:	4603      	mov	r3, r0
 8003970:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003972:	7bfb      	ldrb	r3, [r7, #15]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d110      	bne.n	800399a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003986:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	699a      	ldr	r2, [r3, #24]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	22ff      	movs	r2, #255	@ 0xff
 80039a0:	625a      	str	r2, [r3, #36]	@ 0x24
 80039a2:	e001      	b.n	80039a8 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80039a4:	2300      	movs	r3, #0
 80039a6:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80039be:	b590      	push	{r4, r7, lr}
 80039c0:	b087      	sub	sp, #28
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	7f1b      	ldrb	r3, [r3, #28]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d101      	bne.n	80039da <HAL_RTC_SetTime+0x1c>
 80039d6:	2302      	movs	r3, #2
 80039d8:	e087      	b.n	8003aea <HAL_RTC_SetTime+0x12c>
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2201      	movs	r2, #1
 80039de:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2202      	movs	r2, #2
 80039e4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d126      	bne.n	8003a3a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2200      	movs	r2, #0
 80039fe:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fa27 	bl	8003e58 <RTC_ByteToBcd2>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	785b      	ldrb	r3, [r3, #1]
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 fa20 	bl	8003e58 <RTC_ByteToBcd2>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a1c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	789b      	ldrb	r3, [r3, #2]
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 fa18 	bl	8003e58 <RTC_ByteToBcd2>
 8003a28:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003a2a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	78db      	ldrb	r3, [r3, #3]
 8003a32:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
 8003a38:	e018      	b.n	8003a6c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d102      	bne.n	8003a4e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	785b      	ldrb	r3, [r3, #1]
 8003a58:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a5a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003a60:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	78db      	ldrb	r3, [r3, #3]
 8003a66:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	22ca      	movs	r2, #202	@ 0xca
 8003a72:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2253      	movs	r2, #83	@ 0x53
 8003a7a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f98f 	bl	8003da0 <RTC_EnterInitMode>
 8003a82:	4603      	mov	r3, r0
 8003a84:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003a86:	7cfb      	ldrb	r3, [r7, #19]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d120      	bne.n	8003ace <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003a96:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003a9a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689a      	ldr	r2, [r3, #8]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003aaa:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6899      	ldr	r1, [r3, #8]
 8003ab2:	68bb      	ldr	r3, [r7, #8]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	691b      	ldr	r3, [r3, #16]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 f9a2 	bl	8003e0e <RTC_ExitInitMode>
 8003aca:	4603      	mov	r3, r0
 8003acc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003ace:	7cfb      	ldrb	r3, [r7, #19]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	22ff      	movs	r2, #255	@ 0xff
 8003ae0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	771a      	strb	r2, [r3, #28]

  return status;
 8003ae8:	7cfb      	ldrb	r3, [r7, #19]
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	371c      	adds	r7, #28
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd90      	pop	{r4, r7, pc}

08003af2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003af2:	b580      	push	{r7, lr}
 8003af4:	b086      	sub	sp, #24
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	60f8      	str	r0, [r7, #12]
 8003afa:	60b9      	str	r1, [r7, #8]
 8003afc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003b24:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003b28:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	0c1b      	lsrs	r3, r3, #16
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	0a1b      	lsrs	r3, r3, #8
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	0d9b      	lsrs	r3, r3, #22
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d11a      	bne.n	8003ba4 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 f98e 	bl	8003e94 <RTC_Bcd2ToByte>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	785b      	ldrb	r3, [r3, #1]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f000 f985 	bl	8003e94 <RTC_Bcd2ToByte>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	789b      	ldrb	r3, [r3, #2]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 f97c 	bl	8003e94 <RTC_Bcd2ToByte>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003bae:	b590      	push	{r4, r7, lr}
 8003bb0:	b087      	sub	sp, #28
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	7f1b      	ldrb	r3, [r3, #28]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <HAL_RTC_SetDate+0x1c>
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	e071      	b.n	8003cae <HAL_RTC_SetDate+0x100>
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2202      	movs	r2, #2
 8003bd4:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10e      	bne.n	8003bfa <HAL_RTC_SetDate+0x4c>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	785b      	ldrb	r3, [r3, #1]
 8003be0:	f003 0310 	and.w	r3, r3, #16
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	785b      	ldrb	r3, [r3, #1]
 8003bec:	f023 0310 	bic.w	r3, r3, #16
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	330a      	adds	r3, #10
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d11c      	bne.n	8003c3a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	78db      	ldrb	r3, [r3, #3]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 f927 	bl	8003e58 <RTC_ByteToBcd2>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	785b      	ldrb	r3, [r3, #1]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 f920 	bl	8003e58 <RTC_ByteToBcd2>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c1c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	789b      	ldrb	r3, [r3, #2]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 f918 	bl	8003e58 <RTC_ByteToBcd2>
 8003c28:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003c2a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003c34:	4313      	orrs	r3, r2
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	e00e      	b.n	8003c58 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	78db      	ldrb	r3, [r3, #3]
 8003c3e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	785b      	ldrb	r3, [r3, #1]
 8003c44:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c46:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003c48:	68ba      	ldr	r2, [r7, #8]
 8003c4a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003c4c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003c54:	4313      	orrs	r3, r2
 8003c56:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	22ca      	movs	r2, #202	@ 0xca
 8003c5e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2253      	movs	r2, #83	@ 0x53
 8003c66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f899 	bl	8003da0 <RTC_EnterInitMode>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003c72:	7cfb      	ldrb	r3, [r7, #19]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10c      	bne.n	8003c92 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003c82:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003c86:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c88:	68f8      	ldr	r0, [r7, #12]
 8003c8a:	f000 f8c0 	bl	8003e0e <RTC_ExitInitMode>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c92:	7cfb      	ldrb	r3, [r7, #19]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	22ff      	movs	r2, #255	@ 0xff
 8003ca4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]

  return status;
 8003cac:	7cfb      	ldrb	r3, [r7, #19]
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd90      	pop	{r4, r7, pc}

08003cb6 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b086      	sub	sp, #24
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003cd0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003cd4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	0c1b      	lsrs	r3, r3, #16
 8003cda:	b2da      	uxtb	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	0a1b      	lsrs	r3, r3, #8
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	f003 031f 	and.w	r3, r3, #31
 8003cea:	b2da      	uxtb	r2, r3
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	0b5b      	lsrs	r3, r3, #13
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	b2da      	uxtb	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d11a      	bne.n	8003d4a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	78db      	ldrb	r3, [r3, #3]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f000 f8bb 	bl	8003e94 <RTC_Bcd2ToByte>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	461a      	mov	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f000 f8b2 	bl	8003e94 <RTC_Bcd2ToByte>
 8003d30:	4603      	mov	r3, r0
 8003d32:	461a      	mov	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	789b      	ldrb	r3, [r3, #2]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 f8a9 	bl	8003e94 <RTC_Bcd2ToByte>
 8003d42:	4603      	mov	r3, r0
 8003d44:	461a      	mov	r2, r3
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3718      	adds	r7, #24
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b084      	sub	sp, #16
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0d      	ldr	r2, [pc, #52]	@ (8003d9c <HAL_RTC_WaitForSynchro+0x48>)
 8003d66:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d68:	f7fe fcc4 	bl	80026f4 <HAL_GetTick>
 8003d6c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d6e:	e009      	b.n	8003d84 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003d70:	f7fe fcc0 	bl	80026f4 <HAL_GetTick>
 8003d74:	4602      	mov	r2, r0
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003d7e:	d901      	bls.n	8003d84 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e007      	b.n	8003d94 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d0ee      	beq.n	8003d70 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3710      	adds	r7, #16
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	00017f5f 	.word	0x00017f5f

08003da0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003da8:	2300      	movs	r3, #0
 8003daa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d122      	bne.n	8003e04 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	68da      	ldr	r2, [r3, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003dcc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003dce:	f7fe fc91 	bl	80026f4 <HAL_GetTick>
 8003dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003dd4:	e00c      	b.n	8003df0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003dd6:	f7fe fc8d 	bl	80026f4 <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003de4:	d904      	bls.n	8003df0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2204      	movs	r2, #4
 8003dea:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d102      	bne.n	8003e04 <RTC_EnterInitMode+0x64>
 8003dfe:	7bfb      	ldrb	r3, [r7, #15]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d1e8      	bne.n	8003dd6 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b084      	sub	sp, #16
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e16:	2300      	movs	r3, #0
 8003e18:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e28:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0320 	and.w	r3, r3, #32
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ff8b 	bl	8003d54 <HAL_RTC_WaitForSynchro>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2204      	movs	r2, #4
 8003e48:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003e66:	e005      	b.n	8003e74 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	3b0a      	subs	r3, #10
 8003e72:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	2b09      	cmp	r3, #9
 8003e78:	d8f6      	bhi.n	8003e68 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	b2db      	uxtb	r3, r3
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3714      	adds	r7, #20
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003ea2:	79fb      	ldrb	r3, [r7, #7]
 8003ea4:	091b      	lsrs	r3, r3, #4
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	461a      	mov	r2, r3
 8003eaa:	4613      	mov	r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	4413      	add	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	b2da      	uxtb	r2, r3
 8003eb8:	79fb      	ldrb	r3, [r7, #7]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	4413      	add	r3, r2
 8003ec2:	b2db      	uxtb	r3, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3714      	adds	r7, #20
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e041      	b.n	8003f66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f839 	bl	8003f6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2202      	movs	r2, #2
 8003f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3304      	adds	r3, #4
 8003f0c:	4619      	mov	r1, r3
 8003f0e:	4610      	mov	r0, r2
 8003f10:	f000 f9c0 	bl	8004294 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3708      	adds	r7, #8
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}

08003f6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003f76:	bf00      	nop
 8003f78:	370c      	adds	r7, #12
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b085      	sub	sp, #20
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d001      	beq.n	8003f9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e04e      	b.n	800403a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68da      	ldr	r2, [r3, #12]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0201 	orr.w	r2, r2, #1
 8003fb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a23      	ldr	r2, [pc, #140]	@ (8004048 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d022      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fc6:	d01d      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800404c <HAL_TIM_Base_Start_IT+0xc8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d018      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8004050 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d013      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8004054 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d00e      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a1b      	ldr	r2, [pc, #108]	@ (8004058 <HAL_TIM_Base_Start_IT+0xd4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d009      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a19      	ldr	r2, [pc, #100]	@ (800405c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d004      	beq.n	8004004 <HAL_TIM_Base_Start_IT+0x80>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a18      	ldr	r2, [pc, #96]	@ (8004060 <HAL_TIM_Base_Start_IT+0xdc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d111      	bne.n	8004028 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2b06      	cmp	r3, #6
 8004014:	d010      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f042 0201 	orr.w	r2, r2, #1
 8004024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004026:	e007      	b.n	8004038 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40010000 	.word	0x40010000
 800404c:	40000400 	.word	0x40000400
 8004050:	40000800 	.word	0x40000800
 8004054:	40000c00 	.word	0x40000c00
 8004058:	40010400 	.word	0x40010400
 800405c:	40014000 	.word	0x40014000
 8004060:	40001800 	.word	0x40001800

08004064 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d020      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b00      	cmp	r3, #0
 800408e:	d01b      	beq.n	80040c8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0202 	mvn.w	r2, #2
 8004098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f8d2 	bl	8004258 <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f8c4 	bl	8004244 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 f8d5 	bl	800426c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d020      	beq.n	8004114 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01b      	beq.n	8004114 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0204 	mvn.w	r2, #4
 80040e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2202      	movs	r2, #2
 80040ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	699b      	ldr	r3, [r3, #24]
 80040f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f8ac 	bl	8004258 <HAL_TIM_IC_CaptureCallback>
 8004100:	e005      	b.n	800410e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f89e 	bl	8004244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f8af 	bl	800426c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d020      	beq.n	8004160 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01b      	beq.n	8004160 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f06f 0208 	mvn.w	r2, #8
 8004130:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2204      	movs	r2, #4
 8004136:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f886 	bl	8004258 <HAL_TIM_IC_CaptureCallback>
 800414c:	e005      	b.n	800415a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f878 	bl	8004244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f889 	bl	800426c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f003 0310 	and.w	r3, r3, #16
 8004166:	2b00      	cmp	r3, #0
 8004168:	d020      	beq.n	80041ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01b      	beq.n	80041ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0210 	mvn.w	r2, #16
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2208      	movs	r2, #8
 8004182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	69db      	ldr	r3, [r3, #28]
 800418a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f860 	bl	8004258 <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f852 	bl	8004244 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f863 	bl	800426c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00c      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f06f 0201 	mvn.w	r2, #1
 80041c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7fe f884 	bl	80022d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00c      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d007      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80041ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f906 	bl	8004400 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f834 	bl	8004280 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 0320 	and.w	r3, r3, #32
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00c      	beq.n	800423c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d007      	beq.n	800423c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f06f 0220 	mvn.w	r2, #32
 8004234:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f8d8 	bl	80043ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800423c:	bf00      	nop
 800423e:	3710      	adds	r7, #16
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}

08004244 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004280:	b480      	push	{r7}
 8004282:	b083      	sub	sp, #12
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004288:	bf00      	nop
 800428a:	370c      	adds	r7, #12
 800428c:	46bd      	mov	sp, r7
 800428e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004292:	4770      	bx	lr

08004294 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	4a46      	ldr	r2, [pc, #280]	@ (80043c0 <TIM_Base_SetConfig+0x12c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d013      	beq.n	80042d4 <TIM_Base_SetConfig+0x40>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042b2:	d00f      	beq.n	80042d4 <TIM_Base_SetConfig+0x40>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	4a43      	ldr	r2, [pc, #268]	@ (80043c4 <TIM_Base_SetConfig+0x130>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d00b      	beq.n	80042d4 <TIM_Base_SetConfig+0x40>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a42      	ldr	r2, [pc, #264]	@ (80043c8 <TIM_Base_SetConfig+0x134>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d007      	beq.n	80042d4 <TIM_Base_SetConfig+0x40>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a41      	ldr	r2, [pc, #260]	@ (80043cc <TIM_Base_SetConfig+0x138>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d003      	beq.n	80042d4 <TIM_Base_SetConfig+0x40>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	4a40      	ldr	r2, [pc, #256]	@ (80043d0 <TIM_Base_SetConfig+0x13c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d108      	bne.n	80042e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	68fa      	ldr	r2, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a35      	ldr	r2, [pc, #212]	@ (80043c0 <TIM_Base_SetConfig+0x12c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d02b      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f4:	d027      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a32      	ldr	r2, [pc, #200]	@ (80043c4 <TIM_Base_SetConfig+0x130>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d023      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a31      	ldr	r2, [pc, #196]	@ (80043c8 <TIM_Base_SetConfig+0x134>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01f      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a30      	ldr	r2, [pc, #192]	@ (80043cc <TIM_Base_SetConfig+0x138>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d01b      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a2f      	ldr	r2, [pc, #188]	@ (80043d0 <TIM_Base_SetConfig+0x13c>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d017      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a2e      	ldr	r2, [pc, #184]	@ (80043d4 <TIM_Base_SetConfig+0x140>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d013      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a2d      	ldr	r2, [pc, #180]	@ (80043d8 <TIM_Base_SetConfig+0x144>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d00f      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a2c      	ldr	r2, [pc, #176]	@ (80043dc <TIM_Base_SetConfig+0x148>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00b      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a2b      	ldr	r2, [pc, #172]	@ (80043e0 <TIM_Base_SetConfig+0x14c>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d007      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a2a      	ldr	r2, [pc, #168]	@ (80043e4 <TIM_Base_SetConfig+0x150>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d003      	beq.n	8004346 <TIM_Base_SetConfig+0xb2>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a29      	ldr	r2, [pc, #164]	@ (80043e8 <TIM_Base_SetConfig+0x154>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d108      	bne.n	8004358 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800434c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	4313      	orrs	r3, r2
 8004356:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	689a      	ldr	r2, [r3, #8]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a10      	ldr	r2, [pc, #64]	@ (80043c0 <TIM_Base_SetConfig+0x12c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_Base_SetConfig+0xf8>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a12      	ldr	r2, [pc, #72]	@ (80043d0 <TIM_Base_SetConfig+0x13c>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d103      	bne.n	8004394 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	691a      	ldr	r2, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2201      	movs	r2, #1
 8004398:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691b      	ldr	r3, [r3, #16]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d105      	bne.n	80043b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f023 0201 	bic.w	r2, r3, #1
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	611a      	str	r2, [r3, #16]
  }
}
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	40010000 	.word	0x40010000
 80043c4:	40000400 	.word	0x40000400
 80043c8:	40000800 	.word	0x40000800
 80043cc:	40000c00 	.word	0x40000c00
 80043d0:	40010400 	.word	0x40010400
 80043d4:	40014000 	.word	0x40014000
 80043d8:	40014400 	.word	0x40014400
 80043dc:	40014800 	.word	0x40014800
 80043e0:	40001800 	.word	0x40001800
 80043e4:	40001c00 	.word	0x40001c00
 80043e8:	40002000 	.word	0x40002000

080043ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b082      	sub	sp, #8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d101      	bne.n	8004426 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e042      	b.n	80044ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800442c:	b2db      	uxtb	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d106      	bne.n	8004440 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7fd ffb6 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2224      	movs	r2, #36	@ 0x24
 8004444:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	68da      	ldr	r2, [r3, #12]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004456:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fdbd 	bl	8004fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	691a      	ldr	r2, [r3, #16]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800446c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695a      	ldr	r2, [r3, #20]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800447c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800448c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2200      	movs	r2, #0
 8004492:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2220      	movs	r2, #32
 8004498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3708      	adds	r7, #8
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b08a      	sub	sp, #40	@ 0x28
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80044c4:	2300      	movs	r3, #0
 80044c6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d175      	bne.n	80045c0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <HAL_UART_Transmit+0x2c>
 80044da:	88fb      	ldrh	r3, [r7, #6]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e06e      	b.n	80045c2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2221      	movs	r2, #33	@ 0x21
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f2:	f7fe f8ff 	bl	80026f4 <HAL_GetTick>
 80044f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	88fa      	ldrh	r2, [r7, #6]
 8004502:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800450c:	d108      	bne.n	8004520 <HAL_UART_Transmit+0x6c>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d104      	bne.n	8004520 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004516:	2300      	movs	r3, #0
 8004518:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	61bb      	str	r3, [r7, #24]
 800451e:	e003      	b.n	8004528 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004524:	2300      	movs	r3, #0
 8004526:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004528:	e02e      	b.n	8004588 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2200      	movs	r2, #0
 8004532:	2180      	movs	r1, #128	@ 0x80
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 fb1f 	bl	8004b78 <UART_WaitOnFlagUntilTimeout>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2220      	movs	r2, #32
 8004544:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e03a      	b.n	80045c2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004552:	69bb      	ldr	r3, [r7, #24]
 8004554:	881b      	ldrh	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004560:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	3302      	adds	r3, #2
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	e007      	b.n	800457a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	781a      	ldrb	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	3301      	adds	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800457e:	b29b      	uxth	r3, r3
 8004580:	3b01      	subs	r3, #1
 8004582:	b29a      	uxth	r2, r3
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800458c:	b29b      	uxth	r3, r3
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1cb      	bne.n	800452a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	2200      	movs	r2, #0
 800459a:	2140      	movs	r1, #64	@ 0x40
 800459c:	68f8      	ldr	r0, [r7, #12]
 800459e:	f000 faeb 	bl	8004b78 <UART_WaitOnFlagUntilTimeout>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d005      	beq.n	80045b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2220      	movs	r2, #32
 80045ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e006      	b.n	80045c2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2220      	movs	r2, #32
 80045b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80045bc:	2300      	movs	r3, #0
 80045be:	e000      	b.n	80045c2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80045c0:	2302      	movs	r3, #2
  }
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	4613      	mov	r3, r2
 80045d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d112      	bne.n	800460a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_UART_Receive_IT+0x26>
 80045ea:	88fb      	ldrh	r3, [r7, #6]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e00b      	b.n	800460c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045fa:	88fb      	ldrh	r3, [r7, #6]
 80045fc:	461a      	mov	r2, r3
 80045fe:	68b9      	ldr	r1, [r7, #8]
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fb12 	bl	8004c2a <UART_Start_Receive_IT>
 8004606:	4603      	mov	r3, r0
 8004608:	e000      	b.n	800460c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
  }
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b0ba      	sub	sp, #232	@ 0xe8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695b      	ldr	r3, [r3, #20]
 8004636:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800463a:	2300      	movs	r3, #0
 800463c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004640:	2300      	movs	r3, #0
 8004642:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800464a:	f003 030f 	and.w	r3, r3, #15
 800464e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004652:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10f      	bne.n	800467a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800465a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800465e:	f003 0320 	and.w	r3, r3, #32
 8004662:	2b00      	cmp	r3, #0
 8004664:	d009      	beq.n	800467a <HAL_UART_IRQHandler+0x66>
 8004666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800466a:	f003 0320 	and.w	r3, r3, #32
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fbf2 	bl	8004e5c <UART_Receive_IT>
      return;
 8004678:	e25b      	b.n	8004b32 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800467a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 80de 	beq.w	8004840 <HAL_UART_IRQHandler+0x22c>
 8004684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004688:	f003 0301 	and.w	r3, r3, #1
 800468c:	2b00      	cmp	r3, #0
 800468e:	d106      	bne.n	800469e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004690:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004694:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 80d1 	beq.w	8004840 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046a2:	f003 0301 	and.w	r3, r3, #1
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d00b      	beq.n	80046c2 <HAL_UART_IRQHandler+0xae>
 80046aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ba:	f043 0201 	orr.w	r2, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_UART_IRQHandler+0xd2>
 80046ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d005      	beq.n	80046e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046de:	f043 0202 	orr.w	r2, r3, #2
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80046e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00b      	beq.n	800470a <HAL_UART_IRQHandler+0xf6>
 80046f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d005      	beq.n	800470a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004702:	f043 0204 	orr.w	r2, r3, #4
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800470a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800470e:	f003 0308 	and.w	r3, r3, #8
 8004712:	2b00      	cmp	r3, #0
 8004714:	d011      	beq.n	800473a <HAL_UART_IRQHandler+0x126>
 8004716:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800471a:	f003 0320 	and.w	r3, r3, #32
 800471e:	2b00      	cmp	r3, #0
 8004720:	d105      	bne.n	800472e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d005      	beq.n	800473a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004732:	f043 0208 	orr.w	r2, r3, #8
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473e:	2b00      	cmp	r3, #0
 8004740:	f000 81f2 	beq.w	8004b28 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004748:	f003 0320 	and.w	r3, r3, #32
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <HAL_UART_IRQHandler+0x14e>
 8004750:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d002      	beq.n	8004762 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	f000 fb7d 	bl	8004e5c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	695b      	ldr	r3, [r3, #20]
 8004768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800476c:	2b40      	cmp	r3, #64	@ 0x40
 800476e:	bf0c      	ite	eq
 8004770:	2301      	moveq	r3, #1
 8004772:	2300      	movne	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477e:	f003 0308 	and.w	r3, r3, #8
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <HAL_UART_IRQHandler+0x17a>
 8004786:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800478a:	2b00      	cmp	r3, #0
 800478c:	d04f      	beq.n	800482e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa85 	bl	8004c9e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	695b      	ldr	r3, [r3, #20]
 800479a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800479e:	2b40      	cmp	r3, #64	@ 0x40
 80047a0:	d141      	bne.n	8004826 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3314      	adds	r3, #20
 80047a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80047b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80047bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3314      	adds	r3, #20
 80047ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80047ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80047d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80047da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80047de:	e841 2300 	strex	r3, r2, [r1]
 80047e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80047e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d1d9      	bne.n	80047a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d013      	beq.n	800481e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fa:	4a7e      	ldr	r2, [pc, #504]	@ (80049f4 <HAL_UART_IRQHandler+0x3e0>)
 80047fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004802:	4618      	mov	r0, r3
 8004804:	f7fe f8d4 	bl	80029b0 <HAL_DMA_Abort_IT>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d016      	beq.n	800483c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004812:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004818:	4610      	mov	r0, r2
 800481a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481c:	e00e      	b.n	800483c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f994 	bl	8004b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004824:	e00a      	b.n	800483c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f990 	bl	8004b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800482c:	e006      	b.n	800483c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f98c 	bl	8004b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800483a:	e175      	b.n	8004b28 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800483c:	bf00      	nop
    return;
 800483e:	e173      	b.n	8004b28 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004844:	2b01      	cmp	r3, #1
 8004846:	f040 814f 	bne.w	8004ae8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800484a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b00      	cmp	r3, #0
 8004854:	f000 8148 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004858:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800485c:	f003 0310 	and.w	r3, r3, #16
 8004860:	2b00      	cmp	r3, #0
 8004862:	f000 8141 	beq.w	8004ae8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004866:	2300      	movs	r3, #0
 8004868:	60bb      	str	r3, [r7, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	60bb      	str	r3, [r7, #8]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	60bb      	str	r3, [r7, #8]
 800487a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004886:	2b40      	cmp	r3, #64	@ 0x40
 8004888:	f040 80b6 	bne.w	80049f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004898:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 8145 	beq.w	8004b2c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048aa:	429a      	cmp	r2, r3
 80048ac:	f080 813e 	bcs.w	8004b2c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80048b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048c2:	f000 8088 	beq.w	80049d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	330c      	adds	r3, #12
 80048cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80048d4:	e853 3f00 	ldrex	r3, [r3]
 80048d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80048dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80048e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	330c      	adds	r3, #12
 80048ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80048f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800490a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1d9      	bne.n	80048c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	3314      	adds	r3, #20
 8004918:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800491a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800491c:	e853 3f00 	ldrex	r3, [r3]
 8004920:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004922:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004924:	f023 0301 	bic.w	r3, r3, #1
 8004928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	3314      	adds	r3, #20
 8004932:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004936:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800493a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800493e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004942:	e841 2300 	strex	r3, r2, [r1]
 8004946:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004948:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1e1      	bne.n	8004912 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	3314      	adds	r3, #20
 8004954:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004956:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004958:	e853 3f00 	ldrex	r3, [r3]
 800495c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800495e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004960:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004964:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3314      	adds	r3, #20
 800496e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004972:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004974:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004978:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004980:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e3      	bne.n	800494e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2220      	movs	r2, #32
 800498a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	330c      	adds	r3, #12
 800499a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80049a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049a6:	f023 0310 	bic.w	r3, r3, #16
 80049aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	330c      	adds	r3, #12
 80049b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80049b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80049ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80049be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80049c0:	e841 2300 	strex	r3, r2, [r1]
 80049c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80049c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1e3      	bne.n	8004994 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fd ff7d 	bl	80028d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 f8b7 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049f2:	e09b      	b.n	8004b2c <HAL_UART_IRQHandler+0x518>
 80049f4:	08004d65 	.word	0x08004d65
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 808e 	beq.w	8004b30 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004a14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	f000 8089 	beq.w	8004b30 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	e853 3f00 	ldrex	r3, [r3]
 8004a2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	330c      	adds	r3, #12
 8004a3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004a42:	647a      	str	r2, [r7, #68]	@ 0x44
 8004a44:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a46:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004a48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a4a:	e841 2300 	strex	r3, r2, [r1]
 8004a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d1e3      	bne.n	8004a1e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3314      	adds	r3, #20
 8004a5c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	e853 3f00 	ldrex	r3, [r3]
 8004a64:	623b      	str	r3, [r7, #32]
   return(result);
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	f023 0301 	bic.w	r3, r3, #1
 8004a6c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	3314      	adds	r3, #20
 8004a76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a7a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a7e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a82:	e841 2300 	strex	r3, r2, [r1]
 8004a86:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1e3      	bne.n	8004a56 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	330c      	adds	r3, #12
 8004aa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	e853 3f00 	ldrex	r3, [r3]
 8004aaa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0310 	bic.w	r3, r3, #16
 8004ab2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ac0:	61fa      	str	r2, [r7, #28]
 8004ac2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	69b9      	ldr	r1, [r7, #24]
 8004ac6:	69fa      	ldr	r2, [r7, #28]
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e3      	bne.n	8004a9c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ade:	4619      	mov	r1, r3
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 f83d 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ae6:	e023      	b.n	8004b30 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d009      	beq.n	8004b08 <HAL_UART_IRQHandler+0x4f4>
 8004af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004af8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d003      	beq.n	8004b08 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004b00:	6878      	ldr	r0, [r7, #4]
 8004b02:	f000 f943 	bl	8004d8c <UART_Transmit_IT>
    return;
 8004b06:	e014      	b.n	8004b32 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d00e      	beq.n	8004b32 <HAL_UART_IRQHandler+0x51e>
 8004b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d008      	beq.n	8004b32 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 f983 	bl	8004e2c <UART_EndTransmit_IT>
    return;
 8004b26:	e004      	b.n	8004b32 <HAL_UART_IRQHandler+0x51e>
    return;
 8004b28:	bf00      	nop
 8004b2a:	e002      	b.n	8004b32 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b2c:	bf00      	nop
 8004b2e:	e000      	b.n	8004b32 <HAL_UART_IRQHandler+0x51e>
      return;
 8004b30:	bf00      	nop
  }
}
 8004b32:	37e8      	adds	r7, #232	@ 0xe8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004b40:	bf00      	nop
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b6c:	bf00      	nop
 8004b6e:	370c      	adds	r7, #12
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b086      	sub	sp, #24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	4613      	mov	r3, r2
 8004b86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b88:	e03b      	b.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b8a:	6a3b      	ldr	r3, [r7, #32]
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b90:	d037      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b92:	f7fd fdaf 	bl	80026f4 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d302      	bcc.n	8004ba8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e03a      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d023      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b80      	cmp	r3, #128	@ 0x80
 8004bbe:	d020      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b40      	cmp	r3, #64	@ 0x40
 8004bc4:	d01d      	beq.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d116      	bne.n	8004c02 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	617b      	str	r3, [r7, #20]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 f857 	bl	8004c9e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2208      	movs	r2, #8
 8004bf4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bfe:	2301      	movs	r3, #1
 8004c00:	e00f      	b.n	8004c22 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	bf0c      	ite	eq
 8004c12:	2301      	moveq	r3, #1
 8004c14:	2300      	movne	r3, #0
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	461a      	mov	r2, r3
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d0b4      	beq.n	8004b8a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3718      	adds	r7, #24
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b085      	sub	sp, #20
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	60f8      	str	r0, [r7, #12]
 8004c32:	60b9      	str	r1, [r7, #8]
 8004c34:	4613      	mov	r3, r2
 8004c36:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	68ba      	ldr	r2, [r7, #8]
 8004c3c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	88fa      	ldrh	r2, [r7, #6]
 8004c42:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	88fa      	ldrh	r2, [r7, #6]
 8004c48:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2222      	movs	r2, #34	@ 0x22
 8004c54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c6e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0201 	orr.w	r2, r2, #1
 8004c7e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0220 	orr.w	r2, r2, #32
 8004c8e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b095      	sub	sp, #84	@ 0x54
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb0:	e853 3f00 	ldrex	r3, [r3]
 8004cb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004cbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	330c      	adds	r3, #12
 8004cc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004cc6:	643a      	str	r2, [r7, #64]	@ 0x40
 8004cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004ccc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cce:	e841 2300 	strex	r3, r2, [r1]
 8004cd2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d1e5      	bne.n	8004ca6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3314      	adds	r3, #20
 8004ce0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	e853 3f00 	ldrex	r3, [r3]
 8004ce8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	f023 0301 	bic.w	r3, r3, #1
 8004cf0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3314      	adds	r3, #20
 8004cf8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cfc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1e5      	bne.n	8004cda <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d119      	bne.n	8004d4a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	e853 3f00 	ldrex	r3, [r3]
 8004d24:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f023 0310 	bic.w	r3, r3, #16
 8004d2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	330c      	adds	r3, #12
 8004d34:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d36:	61ba      	str	r2, [r7, #24]
 8004d38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3a:	6979      	ldr	r1, [r7, #20]
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	e841 2300 	strex	r3, r2, [r1]
 8004d42:	613b      	str	r3, [r7, #16]
   return(result);
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d1e5      	bne.n	8004d16 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d58:	bf00      	nop
 8004d5a:	3754      	adds	r7, #84	@ 0x54
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr

08004d64 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7ff fee4 	bl	8004b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d9a:	b2db      	uxtb	r3, r3
 8004d9c:	2b21      	cmp	r3, #33	@ 0x21
 8004d9e:	d13e      	bne.n	8004e1e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004da8:	d114      	bne.n	8004dd4 <UART_Transmit_IT+0x48>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d110      	bne.n	8004dd4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6a1b      	ldr	r3, [r3, #32]
 8004db6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	881b      	ldrh	r3, [r3, #0]
 8004dbc:	461a      	mov	r2, r3
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	1c9a      	adds	r2, r3, #2
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	621a      	str	r2, [r3, #32]
 8004dd2:	e008      	b.n	8004de6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
 8004dd8:	1c59      	adds	r1, r3, #1
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	6211      	str	r1, [r2, #32]
 8004dde:	781a      	ldrb	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	4619      	mov	r1, r3
 8004df4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10f      	bne.n	8004e1a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e08:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68da      	ldr	r2, [r3, #12]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e18:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	e000      	b.n	8004e20 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e1e:	2302      	movs	r3, #2
  }
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e42:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff fe73 	bl	8004b38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b08c      	sub	sp, #48	@ 0x30
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b22      	cmp	r3, #34	@ 0x22
 8004e6e:	f040 80ae 	bne.w	8004fce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e7a:	d117      	bne.n	8004eac <UART_Receive_IT+0x50>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d113      	bne.n	8004eac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	b29b      	uxth	r3, r3
 8004e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e9a:	b29a      	uxth	r2, r3
 8004e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea4:	1c9a      	adds	r2, r3, #2
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	629a      	str	r2, [r3, #40]	@ 0x28
 8004eaa:	e026      	b.n	8004efa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ebe:	d007      	beq.n	8004ed0 <UART_Receive_IT+0x74>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <UART_Receive_IT+0x82>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	691b      	ldr	r3, [r3, #16]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d106      	bne.n	8004ede <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eda:	701a      	strb	r2, [r3, #0]
 8004edc:	e008      	b.n	8004ef0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	4619      	mov	r1, r3
 8004f08:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d15d      	bne.n	8004fca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68da      	ldr	r2, [r3, #12]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0220 	bic.w	r2, r2, #32
 8004f1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004f2c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695a      	ldr	r2, [r3, #20]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0201 	bic.w	r2, r2, #1
 8004f3c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2220      	movs	r2, #32
 8004f42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d135      	bne.n	8004fc0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	330c      	adds	r3, #12
 8004f60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f023 0310 	bic.w	r3, r3, #16
 8004f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	330c      	adds	r3, #12
 8004f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f7a:	623a      	str	r2, [r7, #32]
 8004f7c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	69f9      	ldr	r1, [r7, #28]
 8004f80:	6a3a      	ldr	r2, [r7, #32]
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e5      	bne.n	8004f5a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d10a      	bne.n	8004fb2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	60fb      	str	r3, [r7, #12]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f7ff fdd1 	bl	8004b60 <HAL_UARTEx_RxEventCallback>
 8004fbe:	e002      	b.n	8004fc6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7fd f935 	bl	8002230 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	e002      	b.n	8004fd0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e000      	b.n	8004fd0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004fce:	2302      	movs	r3, #2
  }
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3730      	adds	r7, #48	@ 0x30
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004fdc:	b0c0      	sub	sp, #256	@ 0x100
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff4:	68d9      	ldr	r1, [r3, #12]
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	ea40 0301 	orr.w	r3, r0, r1
 8005000:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	431a      	orrs	r2, r3
 8005010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	431a      	orrs	r2, r3
 8005018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005030:	f021 010c 	bic.w	r1, r1, #12
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800503e:	430b      	orrs	r3, r1
 8005040:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005042:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005052:	6999      	ldr	r1, [r3, #24]
 8005054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	ea40 0301 	orr.w	r3, r0, r1
 800505e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	4b8f      	ldr	r3, [pc, #572]	@ (80052a4 <UART_SetConfig+0x2cc>)
 8005068:	429a      	cmp	r2, r3
 800506a:	d005      	beq.n	8005078 <UART_SetConfig+0xa0>
 800506c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	4b8d      	ldr	r3, [pc, #564]	@ (80052a8 <UART_SetConfig+0x2d0>)
 8005074:	429a      	cmp	r2, r3
 8005076:	d104      	bne.n	8005082 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005078:	f7fe faf6 	bl	8003668 <HAL_RCC_GetPCLK2Freq>
 800507c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005080:	e003      	b.n	800508a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005082:	f7fe fadd 	bl	8003640 <HAL_RCC_GetPCLK1Freq>
 8005086:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800508a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005094:	f040 810c 	bne.w	80052b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005098:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800509c:	2200      	movs	r2, #0
 800509e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80050a2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80050a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80050aa:	4622      	mov	r2, r4
 80050ac:	462b      	mov	r3, r5
 80050ae:	1891      	adds	r1, r2, r2
 80050b0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80050b2:	415b      	adcs	r3, r3
 80050b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80050ba:	4621      	mov	r1, r4
 80050bc:	eb12 0801 	adds.w	r8, r2, r1
 80050c0:	4629      	mov	r1, r5
 80050c2:	eb43 0901 	adc.w	r9, r3, r1
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	f04f 0300 	mov.w	r3, #0
 80050ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050da:	4690      	mov	r8, r2
 80050dc:	4699      	mov	r9, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	eb18 0303 	adds.w	r3, r8, r3
 80050e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80050e8:	462b      	mov	r3, r5
 80050ea:	eb49 0303 	adc.w	r3, r9, r3
 80050ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050fe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005102:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005106:	460b      	mov	r3, r1
 8005108:	18db      	adds	r3, r3, r3
 800510a:	653b      	str	r3, [r7, #80]	@ 0x50
 800510c:	4613      	mov	r3, r2
 800510e:	eb42 0303 	adc.w	r3, r2, r3
 8005112:	657b      	str	r3, [r7, #84]	@ 0x54
 8005114:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005118:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800511c:	f7fb fcb6 	bl	8000a8c <__aeabi_uldivmod>
 8005120:	4602      	mov	r2, r0
 8005122:	460b      	mov	r3, r1
 8005124:	4b61      	ldr	r3, [pc, #388]	@ (80052ac <UART_SetConfig+0x2d4>)
 8005126:	fba3 2302 	umull	r2, r3, r3, r2
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	011c      	lsls	r4, r3, #4
 800512e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005132:	2200      	movs	r2, #0
 8005134:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005138:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800513c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005140:	4642      	mov	r2, r8
 8005142:	464b      	mov	r3, r9
 8005144:	1891      	adds	r1, r2, r2
 8005146:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005148:	415b      	adcs	r3, r3
 800514a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800514c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005150:	4641      	mov	r1, r8
 8005152:	eb12 0a01 	adds.w	sl, r2, r1
 8005156:	4649      	mov	r1, r9
 8005158:	eb43 0b01 	adc.w	fp, r3, r1
 800515c:	f04f 0200 	mov.w	r2, #0
 8005160:	f04f 0300 	mov.w	r3, #0
 8005164:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005168:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800516c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005170:	4692      	mov	sl, r2
 8005172:	469b      	mov	fp, r3
 8005174:	4643      	mov	r3, r8
 8005176:	eb1a 0303 	adds.w	r3, sl, r3
 800517a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800517e:	464b      	mov	r3, r9
 8005180:	eb4b 0303 	adc.w	r3, fp, r3
 8005184:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005194:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005198:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800519c:	460b      	mov	r3, r1
 800519e:	18db      	adds	r3, r3, r3
 80051a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80051a2:	4613      	mov	r3, r2
 80051a4:	eb42 0303 	adc.w	r3, r2, r3
 80051a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80051aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80051ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80051b2:	f7fb fc6b 	bl	8000a8c <__aeabi_uldivmod>
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4611      	mov	r1, r2
 80051bc:	4b3b      	ldr	r3, [pc, #236]	@ (80052ac <UART_SetConfig+0x2d4>)
 80051be:	fba3 2301 	umull	r2, r3, r3, r1
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	2264      	movs	r2, #100	@ 0x64
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	1acb      	subs	r3, r1, r3
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80051d2:	4b36      	ldr	r3, [pc, #216]	@ (80052ac <UART_SetConfig+0x2d4>)
 80051d4:	fba3 2302 	umull	r2, r3, r3, r2
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80051e0:	441c      	add	r4, r3
 80051e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051ec:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051f4:	4642      	mov	r2, r8
 80051f6:	464b      	mov	r3, r9
 80051f8:	1891      	adds	r1, r2, r2
 80051fa:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051fc:	415b      	adcs	r3, r3
 80051fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005200:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005204:	4641      	mov	r1, r8
 8005206:	1851      	adds	r1, r2, r1
 8005208:	6339      	str	r1, [r7, #48]	@ 0x30
 800520a:	4649      	mov	r1, r9
 800520c:	414b      	adcs	r3, r1
 800520e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800521c:	4659      	mov	r1, fp
 800521e:	00cb      	lsls	r3, r1, #3
 8005220:	4651      	mov	r1, sl
 8005222:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005226:	4651      	mov	r1, sl
 8005228:	00ca      	lsls	r2, r1, #3
 800522a:	4610      	mov	r0, r2
 800522c:	4619      	mov	r1, r3
 800522e:	4603      	mov	r3, r0
 8005230:	4642      	mov	r2, r8
 8005232:	189b      	adds	r3, r3, r2
 8005234:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005238:	464b      	mov	r3, r9
 800523a:	460a      	mov	r2, r1
 800523c:	eb42 0303 	adc.w	r3, r2, r3
 8005240:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005250:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005254:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005258:	460b      	mov	r3, r1
 800525a:	18db      	adds	r3, r3, r3
 800525c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800525e:	4613      	mov	r3, r2
 8005260:	eb42 0303 	adc.w	r3, r2, r3
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005266:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800526a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800526e:	f7fb fc0d 	bl	8000a8c <__aeabi_uldivmod>
 8005272:	4602      	mov	r2, r0
 8005274:	460b      	mov	r3, r1
 8005276:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <UART_SetConfig+0x2d4>)
 8005278:	fba3 1302 	umull	r1, r3, r3, r2
 800527c:	095b      	lsrs	r3, r3, #5
 800527e:	2164      	movs	r1, #100	@ 0x64
 8005280:	fb01 f303 	mul.w	r3, r1, r3
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	3332      	adds	r3, #50	@ 0x32
 800528a:	4a08      	ldr	r2, [pc, #32]	@ (80052ac <UART_SetConfig+0x2d4>)
 800528c:	fba2 2303 	umull	r2, r3, r2, r3
 8005290:	095b      	lsrs	r3, r3, #5
 8005292:	f003 0207 	and.w	r2, r3, #7
 8005296:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4422      	add	r2, r4
 800529e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052a0:	e106      	b.n	80054b0 <UART_SetConfig+0x4d8>
 80052a2:	bf00      	nop
 80052a4:	40011000 	.word	0x40011000
 80052a8:	40011400 	.word	0x40011400
 80052ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80052ba:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80052be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80052c2:	4642      	mov	r2, r8
 80052c4:	464b      	mov	r3, r9
 80052c6:	1891      	adds	r1, r2, r2
 80052c8:	6239      	str	r1, [r7, #32]
 80052ca:	415b      	adcs	r3, r3
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80052d2:	4641      	mov	r1, r8
 80052d4:	1854      	adds	r4, r2, r1
 80052d6:	4649      	mov	r1, r9
 80052d8:	eb43 0501 	adc.w	r5, r3, r1
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	00eb      	lsls	r3, r5, #3
 80052e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ea:	00e2      	lsls	r2, r4, #3
 80052ec:	4614      	mov	r4, r2
 80052ee:	461d      	mov	r5, r3
 80052f0:	4643      	mov	r3, r8
 80052f2:	18e3      	adds	r3, r4, r3
 80052f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052f8:	464b      	mov	r3, r9
 80052fa:	eb45 0303 	adc.w	r3, r5, r3
 80052fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800530e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	f04f 0300 	mov.w	r3, #0
 800531a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800531e:	4629      	mov	r1, r5
 8005320:	008b      	lsls	r3, r1, #2
 8005322:	4621      	mov	r1, r4
 8005324:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005328:	4621      	mov	r1, r4
 800532a:	008a      	lsls	r2, r1, #2
 800532c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005330:	f7fb fbac 	bl	8000a8c <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4b60      	ldr	r3, [pc, #384]	@ (80054bc <UART_SetConfig+0x4e4>)
 800533a:	fba3 2302 	umull	r2, r3, r3, r2
 800533e:	095b      	lsrs	r3, r3, #5
 8005340:	011c      	lsls	r4, r3, #4
 8005342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005346:	2200      	movs	r2, #0
 8005348:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800534c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005350:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005354:	4642      	mov	r2, r8
 8005356:	464b      	mov	r3, r9
 8005358:	1891      	adds	r1, r2, r2
 800535a:	61b9      	str	r1, [r7, #24]
 800535c:	415b      	adcs	r3, r3
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005364:	4641      	mov	r1, r8
 8005366:	1851      	adds	r1, r2, r1
 8005368:	6139      	str	r1, [r7, #16]
 800536a:	4649      	mov	r1, r9
 800536c:	414b      	adcs	r3, r1
 800536e:	617b      	str	r3, [r7, #20]
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800537c:	4659      	mov	r1, fp
 800537e:	00cb      	lsls	r3, r1, #3
 8005380:	4651      	mov	r1, sl
 8005382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005386:	4651      	mov	r1, sl
 8005388:	00ca      	lsls	r2, r1, #3
 800538a:	4610      	mov	r0, r2
 800538c:	4619      	mov	r1, r3
 800538e:	4603      	mov	r3, r0
 8005390:	4642      	mov	r2, r8
 8005392:	189b      	adds	r3, r3, r2
 8005394:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005398:	464b      	mov	r3, r9
 800539a:	460a      	mov	r2, r1
 800539c:	eb42 0303 	adc.w	r3, r2, r3
 80053a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80053ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80053b0:	f04f 0200 	mov.w	r2, #0
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80053bc:	4649      	mov	r1, r9
 80053be:	008b      	lsls	r3, r1, #2
 80053c0:	4641      	mov	r1, r8
 80053c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053c6:	4641      	mov	r1, r8
 80053c8:	008a      	lsls	r2, r1, #2
 80053ca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80053ce:	f7fb fb5d 	bl	8000a8c <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	4b38      	ldr	r3, [pc, #224]	@ (80054bc <UART_SetConfig+0x4e4>)
 80053da:	fba3 2301 	umull	r2, r3, r3, r1
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2264      	movs	r2, #100	@ 0x64
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	1acb      	subs	r3, r1, r3
 80053e8:	011b      	lsls	r3, r3, #4
 80053ea:	3332      	adds	r3, #50	@ 0x32
 80053ec:	4a33      	ldr	r2, [pc, #204]	@ (80054bc <UART_SetConfig+0x4e4>)
 80053ee:	fba2 2303 	umull	r2, r3, r2, r3
 80053f2:	095b      	lsrs	r3, r3, #5
 80053f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053f8:	441c      	add	r4, r3
 80053fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053fe:	2200      	movs	r2, #0
 8005400:	673b      	str	r3, [r7, #112]	@ 0x70
 8005402:	677a      	str	r2, [r7, #116]	@ 0x74
 8005404:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005408:	4642      	mov	r2, r8
 800540a:	464b      	mov	r3, r9
 800540c:	1891      	adds	r1, r2, r2
 800540e:	60b9      	str	r1, [r7, #8]
 8005410:	415b      	adcs	r3, r3
 8005412:	60fb      	str	r3, [r7, #12]
 8005414:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005418:	4641      	mov	r1, r8
 800541a:	1851      	adds	r1, r2, r1
 800541c:	6039      	str	r1, [r7, #0]
 800541e:	4649      	mov	r1, r9
 8005420:	414b      	adcs	r3, r1
 8005422:	607b      	str	r3, [r7, #4]
 8005424:	f04f 0200 	mov.w	r2, #0
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005430:	4659      	mov	r1, fp
 8005432:	00cb      	lsls	r3, r1, #3
 8005434:	4651      	mov	r1, sl
 8005436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800543a:	4651      	mov	r1, sl
 800543c:	00ca      	lsls	r2, r1, #3
 800543e:	4610      	mov	r0, r2
 8005440:	4619      	mov	r1, r3
 8005442:	4603      	mov	r3, r0
 8005444:	4642      	mov	r2, r8
 8005446:	189b      	adds	r3, r3, r2
 8005448:	66bb      	str	r3, [r7, #104]	@ 0x68
 800544a:	464b      	mov	r3, r9
 800544c:	460a      	mov	r2, r1
 800544e:	eb42 0303 	adc.w	r3, r2, r3
 8005452:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	663b      	str	r3, [r7, #96]	@ 0x60
 800545e:	667a      	str	r2, [r7, #100]	@ 0x64
 8005460:	f04f 0200 	mov.w	r2, #0
 8005464:	f04f 0300 	mov.w	r3, #0
 8005468:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800546c:	4649      	mov	r1, r9
 800546e:	008b      	lsls	r3, r1, #2
 8005470:	4641      	mov	r1, r8
 8005472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005476:	4641      	mov	r1, r8
 8005478:	008a      	lsls	r2, r1, #2
 800547a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800547e:	f7fb fb05 	bl	8000a8c <__aeabi_uldivmod>
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	4b0d      	ldr	r3, [pc, #52]	@ (80054bc <UART_SetConfig+0x4e4>)
 8005488:	fba3 1302 	umull	r1, r3, r3, r2
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	2164      	movs	r1, #100	@ 0x64
 8005490:	fb01 f303 	mul.w	r3, r1, r3
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	3332      	adds	r3, #50	@ 0x32
 800549a:	4a08      	ldr	r2, [pc, #32]	@ (80054bc <UART_SetConfig+0x4e4>)
 800549c:	fba2 2303 	umull	r2, r3, r2, r3
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	f003 020f 	and.w	r2, r3, #15
 80054a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4422      	add	r2, r4
 80054ae:	609a      	str	r2, [r3, #8]
}
 80054b0:	bf00      	nop
 80054b2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80054b6:	46bd      	mov	sp, r7
 80054b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80054bc:	51eb851f 	.word	0x51eb851f

080054c0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f103 0208 	add.w	r2, r3, #8
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054d8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f103 0208 	add.w	r2, r3, #8
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f103 0208 	add.w	r2, r3, #8
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800550e:	bf00      	nop
 8005510:	370c      	adds	r7, #12
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	683a      	ldr	r2, [r7, #0]
 800553e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	683a      	ldr	r2, [r7, #0]
 8005544:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	1c5a      	adds	r2, r3, #1
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	601a      	str	r2, [r3, #0]
}
 8005556:	bf00      	nop
 8005558:	3714      	adds	r7, #20
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr

08005562 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8005562:	b480      	push	{r7}
 8005564:	b085      	sub	sp, #20
 8005566:	af00      	add	r7, sp, #0
 8005568:	6078      	str	r0, [r7, #4]
 800556a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8005572:	68bb      	ldr	r3, [r7, #8]
 8005574:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005578:	d103      	bne.n	8005582 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e00c      	b.n	800559c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3308      	adds	r3, #8
 8005586:	60fb      	str	r3, [r7, #12]
 8005588:	e002      	b.n	8005590 <vListInsert+0x2e>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	429a      	cmp	r2, r3
 800559a:	d2f6      	bcs.n	800558a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	683a      	ldr	r2, [r7, #0]
 80055aa:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	68fa      	ldr	r2, [r7, #12]
 80055b0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	687a      	ldr	r2, [r7, #4]
 80055bc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	1c5a      	adds	r2, r3, #1
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	601a      	str	r2, [r3, #0]
}
 80055c8:	bf00      	nop
 80055ca:	3714      	adds	r7, #20
 80055cc:	46bd      	mov	sp, r7
 80055ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d2:	4770      	bx	lr

080055d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	687a      	ldr	r2, [r7, #4]
 80055e8:	6892      	ldr	r2, [r2, #8]
 80055ea:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	687a      	ldr	r2, [r7, #4]
 80055f2:	6852      	ldr	r2, [r2, #4]
 80055f4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d103      	bne.n	8005608 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	689a      	ldr	r2, [r3, #8]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	1e5a      	subs	r2, r3, #1
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10b      	bne.n	8005654 <xQueueGenericReset+0x2c>
        __asm volatile
 800563c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005640:	f383 8811 	msr	BASEPRI, r3
 8005644:	f3bf 8f6f 	isb	sy
 8005648:	f3bf 8f4f 	dsb	sy
 800564c:	60bb      	str	r3, [r7, #8]
    }
 800564e:	bf00      	nop
 8005650:	bf00      	nop
 8005652:	e7fd      	b.n	8005650 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8005654:	f002 fb4a 	bl	8007cec <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005660:	68f9      	ldr	r1, [r7, #12]
 8005662:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005664:	fb01 f303 	mul.w	r3, r1, r3
 8005668:	441a      	add	r2, r3
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681a      	ldr	r2, [r3, #0]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005684:	3b01      	subs	r3, #1
 8005686:	68f9      	ldr	r1, [r7, #12]
 8005688:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800568a:	fb01 f303 	mul.w	r3, r1, r3
 800568e:	441a      	add	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	22ff      	movs	r2, #255	@ 0xff
 8005698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	22ff      	movs	r2, #255	@ 0xff
 80056a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d114      	bne.n	80056d4 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d01a      	beq.n	80056e8 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	3310      	adds	r3, #16
 80056b6:	4618      	mov	r0, r3
 80056b8:	f001 f93a 	bl	8006930 <xTaskRemoveFromEventList>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d012      	beq.n	80056e8 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80056c2:	4b0d      	ldr	r3, [pc, #52]	@ (80056f8 <xQueueGenericReset+0xd0>)
 80056c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056c8:	601a      	str	r2, [r3, #0]
 80056ca:	f3bf 8f4f 	dsb	sy
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	e009      	b.n	80056e8 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	3310      	adds	r3, #16
 80056d8:	4618      	mov	r0, r3
 80056da:	f7ff fef1 	bl	80054c0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3324      	adds	r3, #36	@ 0x24
 80056e2:	4618      	mov	r0, r3
 80056e4:	f7ff feec 	bl	80054c0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80056e8:	f002 fb32 	bl	8007d50 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80056ec:	2301      	movs	r3, #1
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08c      	sub	sp, #48	@ 0x30
 8005700:	af02      	add	r7, sp, #8
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d10b      	bne.n	8005728 <xQueueGenericCreate+0x2c>
        __asm volatile
 8005710:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005714:	f383 8811 	msr	BASEPRI, r3
 8005718:	f3bf 8f6f 	isb	sy
 800571c:	f3bf 8f4f 	dsb	sy
 8005720:	61bb      	str	r3, [r7, #24]
    }
 8005722:	bf00      	nop
 8005724:	bf00      	nop
 8005726:	e7fd      	b.n	8005724 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	68ba      	ldr	r2, [r7, #8]
 800572c:	fb02 f303 	mul.w	r3, r2, r3
 8005730:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d006      	beq.n	8005746 <xQueueGenericCreate+0x4a>
 8005738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	429a      	cmp	r2, r3
 8005744:	d101      	bne.n	800574a <xQueueGenericCreate+0x4e>
 8005746:	2301      	movs	r3, #1
 8005748:	e000      	b.n	800574c <xQueueGenericCreate+0x50>
 800574a:	2300      	movs	r3, #0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d10b      	bne.n	8005768 <xQueueGenericCreate+0x6c>
        __asm volatile
 8005750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005754:	f383 8811 	msr	BASEPRI, r3
 8005758:	f3bf 8f6f 	isb	sy
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	617b      	str	r3, [r7, #20]
    }
 8005762:	bf00      	nop
 8005764:	bf00      	nop
 8005766:	e7fd      	b.n	8005764 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800576e:	d90b      	bls.n	8005788 <xQueueGenericCreate+0x8c>
        __asm volatile
 8005770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005774:	f383 8811 	msr	BASEPRI, r3
 8005778:	f3bf 8f6f 	isb	sy
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	613b      	str	r3, [r7, #16]
    }
 8005782:	bf00      	nop
 8005784:	bf00      	nop
 8005786:	e7fd      	b.n	8005784 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	3350      	adds	r3, #80	@ 0x50
 800578c:	4618      	mov	r0, r3
 800578e:	f002 fbd7 	bl	8007f40 <pvPortMalloc>
 8005792:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8005794:	6a3b      	ldr	r3, [r7, #32]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00d      	beq.n	80057b6 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	3350      	adds	r3, #80	@ 0x50
 80057a2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80057a4:	79fa      	ldrb	r2, [r7, #7]
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	4613      	mov	r3, r2
 80057ac:	69fa      	ldr	r2, [r7, #28]
 80057ae:	68b9      	ldr	r1, [r7, #8]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f805 	bl	80057c0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80057b6:	6a3b      	ldr	r3, [r7, #32]
    }
 80057b8:	4618      	mov	r0, r3
 80057ba:	3728      	adds	r7, #40	@ 0x28
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d103      	bne.n	80057dc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80057d4:	69bb      	ldr	r3, [r7, #24]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	e002      	b.n	80057e2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80057dc:	69bb      	ldr	r3, [r7, #24]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80057ee:	2101      	movs	r1, #1
 80057f0:	69b8      	ldr	r0, [r7, #24]
 80057f2:	f7ff ff19 	bl	8005628 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	78fa      	ldrb	r2, [r7, #3]
 80057fa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80057fe:	bf00      	nop
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
	...

08005808 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b08e      	sub	sp, #56	@ 0x38
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
 8005814:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005816:	2300      	movs	r3, #0
 8005818:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800581e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005820:	2b00      	cmp	r3, #0
 8005822:	d10b      	bne.n	800583c <xQueueGenericSend+0x34>
        __asm volatile
 8005824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005828:	f383 8811 	msr	BASEPRI, r3
 800582c:	f3bf 8f6f 	isb	sy
 8005830:	f3bf 8f4f 	dsb	sy
 8005834:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005836:	bf00      	nop
 8005838:	bf00      	nop
 800583a:	e7fd      	b.n	8005838 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d103      	bne.n	800584a <xQueueGenericSend+0x42>
 8005842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005846:	2b00      	cmp	r3, #0
 8005848:	d101      	bne.n	800584e <xQueueGenericSend+0x46>
 800584a:	2301      	movs	r3, #1
 800584c:	e000      	b.n	8005850 <xQueueGenericSend+0x48>
 800584e:	2300      	movs	r3, #0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <xQueueGenericSend+0x64>
        __asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005866:	bf00      	nop
 8005868:	bf00      	nop
 800586a:	e7fd      	b.n	8005868 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b02      	cmp	r3, #2
 8005870:	d103      	bne.n	800587a <xQueueGenericSend+0x72>
 8005872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005876:	2b01      	cmp	r3, #1
 8005878:	d101      	bne.n	800587e <xQueueGenericSend+0x76>
 800587a:	2301      	movs	r3, #1
 800587c:	e000      	b.n	8005880 <xQueueGenericSend+0x78>
 800587e:	2300      	movs	r3, #0
 8005880:	2b00      	cmp	r3, #0
 8005882:	d10b      	bne.n	800589c <xQueueGenericSend+0x94>
        __asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	623b      	str	r3, [r7, #32]
    }
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	e7fd      	b.n	8005898 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800589c:	f001 f9e8 	bl	8006c70 <xTaskGetSchedulerState>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d102      	bne.n	80058ac <xQueueGenericSend+0xa4>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <xQueueGenericSend+0xa8>
 80058ac:	2301      	movs	r3, #1
 80058ae:	e000      	b.n	80058b2 <xQueueGenericSend+0xaa>
 80058b0:	2300      	movs	r3, #0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10b      	bne.n	80058ce <xQueueGenericSend+0xc6>
        __asm volatile
 80058b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ba:	f383 8811 	msr	BASEPRI, r3
 80058be:	f3bf 8f6f 	isb	sy
 80058c2:	f3bf 8f4f 	dsb	sy
 80058c6:	61fb      	str	r3, [r7, #28]
    }
 80058c8:	bf00      	nop
 80058ca:	bf00      	nop
 80058cc:	e7fd      	b.n	80058ca <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80058ce:	f002 fa0d 	bl	8007cec <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80058d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058da:	429a      	cmp	r2, r3
 80058dc:	d302      	bcc.n	80058e4 <xQueueGenericSend+0xdc>
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d129      	bne.n	8005938 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80058ea:	f000 fad0 	bl	8005e8e <prvCopyDataToQueue>
 80058ee:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d010      	beq.n	800591a <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fa:	3324      	adds	r3, #36	@ 0x24
 80058fc:	4618      	mov	r0, r3
 80058fe:	f001 f817 	bl	8006930 <xTaskRemoveFromEventList>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d013      	beq.n	8005930 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005908:	4b3f      	ldr	r3, [pc, #252]	@ (8005a08 <xQueueGenericSend+0x200>)
 800590a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800590e:	601a      	str	r2, [r3, #0]
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	e00a      	b.n	8005930 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800591a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d007      	beq.n	8005930 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005920:	4b39      	ldr	r3, [pc, #228]	@ (8005a08 <xQueueGenericSend+0x200>)
 8005922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005926:	601a      	str	r2, [r3, #0]
 8005928:	f3bf 8f4f 	dsb	sy
 800592c:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005930:	f002 fa0e 	bl	8007d50 <vPortExitCritical>
                return pdPASS;
 8005934:	2301      	movs	r3, #1
 8005936:	e063      	b.n	8005a00 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d103      	bne.n	8005946 <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800593e:	f002 fa07 	bl	8007d50 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005942:	2300      	movs	r3, #0
 8005944:	e05c      	b.n	8005a00 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005948:	2b00      	cmp	r3, #0
 800594a:	d106      	bne.n	800595a <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800594c:	f107 0314 	add.w	r3, r7, #20
 8005950:	4618      	mov	r0, r3
 8005952:	f001 f851 	bl	80069f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005956:	2301      	movs	r3, #1
 8005958:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800595a:	f002 f9f9 	bl	8007d50 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800595e:	f000 fdc3 	bl	80064e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005962:	f002 f9c3 	bl	8007cec <vPortEnterCritical>
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800596c:	b25b      	sxtb	r3, r3
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005972:	d103      	bne.n	800597c <xQueueGenericSend+0x174>
 8005974:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800597c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005982:	b25b      	sxtb	r3, r3
 8005984:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005988:	d103      	bne.n	8005992 <xQueueGenericSend+0x18a>
 800598a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800598c:	2200      	movs	r2, #0
 800598e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005992:	f002 f9dd 	bl	8007d50 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005996:	1d3a      	adds	r2, r7, #4
 8005998:	f107 0314 	add.w	r3, r7, #20
 800599c:	4611      	mov	r1, r2
 800599e:	4618      	mov	r0, r3
 80059a0:	f001 f840 	bl	8006a24 <xTaskCheckForTimeOut>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d124      	bne.n	80059f4 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80059aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059ac:	f000 fb67 	bl	800607e <prvIsQueueFull>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d018      	beq.n	80059e8 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80059b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b8:	3310      	adds	r3, #16
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	4611      	mov	r1, r2
 80059be:	4618      	mov	r0, r3
 80059c0:	f000 ff64 	bl	800688c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80059c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059c6:	f000 faf2 	bl	8005fae <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80059ca:	f000 fd9b 	bl	8006504 <xTaskResumeAll>
 80059ce:	4603      	mov	r3, r0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f47f af7c 	bne.w	80058ce <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80059d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005a08 <xQueueGenericSend+0x200>)
 80059d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	f3bf 8f4f 	dsb	sy
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	e772      	b.n	80058ce <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80059e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059ea:	f000 fae0 	bl	8005fae <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80059ee:	f000 fd89 	bl	8006504 <xTaskResumeAll>
 80059f2:	e76c      	b.n	80058ce <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80059f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80059f6:	f000 fada 	bl	8005fae <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80059fa:	f000 fd83 	bl	8006504 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80059fe:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3738      	adds	r7, #56	@ 0x38
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	e000ed04 	.word	0xe000ed04

08005a0c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b090      	sub	sp, #64	@ 0x40
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
 8005a18:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10b      	bne.n	8005a3c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	e7fd      	b.n	8005a38 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d103      	bne.n	8005a4a <xQueueGenericSendFromISR+0x3e>
 8005a42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d101      	bne.n	8005a4e <xQueueGenericSendFromISR+0x42>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e000      	b.n	8005a50 <xQueueGenericSendFromISR+0x44>
 8005a4e:	2300      	movs	r3, #0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10b      	bne.n	8005a6c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005a66:	bf00      	nop
 8005a68:	bf00      	nop
 8005a6a:	e7fd      	b.n	8005a68 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d103      	bne.n	8005a7a <xQueueGenericSendFromISR+0x6e>
 8005a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <xQueueGenericSendFromISR+0x72>
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e000      	b.n	8005a80 <xQueueGenericSendFromISR+0x74>
 8005a7e:	2300      	movs	r3, #0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8005a84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a88:	f383 8811 	msr	BASEPRI, r3
 8005a8c:	f3bf 8f6f 	isb	sy
 8005a90:	f3bf 8f4f 	dsb	sy
 8005a94:	623b      	str	r3, [r7, #32]
    }
 8005a96:	bf00      	nop
 8005a98:	bf00      	nop
 8005a9a:	e7fd      	b.n	8005a98 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a9c:	f002 fa0e 	bl	8007ebc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005aa0:	f3ef 8211 	mrs	r2, BASEPRI
 8005aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa8:	f383 8811 	msr	BASEPRI, r3
 8005aac:	f3bf 8f6f 	isb	sy
 8005ab0:	f3bf 8f4f 	dsb	sy
 8005ab4:	61fa      	str	r2, [r7, #28]
 8005ab6:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005ab8:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005aba:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d302      	bcc.n	8005ace <xQueueGenericSendFromISR+0xc2>
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d13f      	bne.n	8005b4e <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ad4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005adc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005ae4:	f000 f9d3 	bl	8005e8e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005ae8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005aec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005af0:	d112      	bne.n	8005b18 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d026      	beq.n	8005b48 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	3324      	adds	r3, #36	@ 0x24
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 ff16 	bl	8006930 <xTaskRemoveFromEventList>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01e      	beq.n	8005b48 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d01b      	beq.n	8005b48 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2201      	movs	r2, #1
 8005b14:	601a      	str	r2, [r3, #0]
 8005b16:	e017      	b.n	8005b48 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005b18:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005b1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b1e:	d10b      	bne.n	8005b38 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	617b      	str	r3, [r7, #20]
    }
 8005b32:	bf00      	nop
 8005b34:	bf00      	nop
 8005b36:	e7fd      	b.n	8005b34 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005b38:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	b25a      	sxtb	r2, r3
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8005b4c:	e001      	b.n	8005b52 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b54:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005b5c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3740      	adds	r7, #64	@ 0x40
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08c      	sub	sp, #48	@ 0x30
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d10b      	bne.n	8005b9a <xQueueReceive+0x32>
        __asm volatile
 8005b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b86:	f383 8811 	msr	BASEPRI, r3
 8005b8a:	f3bf 8f6f 	isb	sy
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	623b      	str	r3, [r7, #32]
    }
 8005b94:	bf00      	nop
 8005b96:	bf00      	nop
 8005b98:	e7fd      	b.n	8005b96 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b9a:	68bb      	ldr	r3, [r7, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d103      	bne.n	8005ba8 <xQueueReceive+0x40>
 8005ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <xQueueReceive+0x44>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <xQueueReceive+0x46>
 8005bac:	2300      	movs	r3, #0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <xQueueReceive+0x62>
        __asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	61fb      	str	r3, [r7, #28]
    }
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	e7fd      	b.n	8005bc6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bca:	f001 f851 	bl	8006c70 <xTaskGetSchedulerState>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d102      	bne.n	8005bda <xQueueReceive+0x72>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <xQueueReceive+0x76>
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e000      	b.n	8005be0 <xQueueReceive+0x78>
 8005bde:	2300      	movs	r3, #0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <xQueueReceive+0x94>
        __asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	61bb      	str	r3, [r7, #24]
    }
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005bfc:	f002 f876 	bl	8007cec <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d01f      	beq.n	8005c4c <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005c0c:	68b9      	ldr	r1, [r7, #8]
 8005c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005c10:	f000 f9a7 	bl	8005f62 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c16:	1e5a      	subs	r2, r3, #1
 8005c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	691b      	ldr	r3, [r3, #16]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00f      	beq.n	8005c44 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c26:	3310      	adds	r3, #16
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f000 fe81 	bl	8006930 <xTaskRemoveFromEventList>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d007      	beq.n	8005c44 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005c34:	4b3c      	ldr	r3, [pc, #240]	@ (8005d28 <xQueueReceive+0x1c0>)
 8005c36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c3a:	601a      	str	r2, [r3, #0]
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005c44:	f002 f884 	bl	8007d50 <vPortExitCritical>
                return pdPASS;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e069      	b.n	8005d20 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d103      	bne.n	8005c5a <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005c52:	f002 f87d 	bl	8007d50 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005c56:	2300      	movs	r3, #0
 8005c58:	e062      	b.n	8005d20 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d106      	bne.n	8005c6e <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005c60:	f107 0310 	add.w	r3, r7, #16
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 fec7 	bl	80069f8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005c6e:	f002 f86f 	bl	8007d50 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005c72:	f000 fc39 	bl	80064e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005c76:	f002 f839 	bl	8007cec <vPortEnterCritical>
 8005c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c80:	b25b      	sxtb	r3, r3
 8005c82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c86:	d103      	bne.n	8005c90 <xQueueReceive+0x128>
 8005c88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c96:	b25b      	sxtb	r3, r3
 8005c98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c9c:	d103      	bne.n	8005ca6 <xQueueReceive+0x13e>
 8005c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ca6:	f002 f853 	bl	8007d50 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005caa:	1d3a      	adds	r2, r7, #4
 8005cac:	f107 0310 	add.w	r3, r7, #16
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 feb6 	bl	8006a24 <xTaskCheckForTimeOut>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d123      	bne.n	8005d06 <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005cbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cc0:	f000 f9c7 	bl	8006052 <prvIsQueueEmpty>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d017      	beq.n	8005cfa <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ccc:	3324      	adds	r3, #36	@ 0x24
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	4611      	mov	r1, r2
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fdda 	bl	800688c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005cd8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cda:	f000 f968 	bl	8005fae <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005cde:	f000 fc11 	bl	8006504 <xTaskResumeAll>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d189      	bne.n	8005bfc <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8005ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8005d28 <xQueueReceive+0x1c0>)
 8005cea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	f3bf 8f6f 	isb	sy
 8005cf8:	e780      	b.n	8005bfc <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005cfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005cfc:	f000 f957 	bl	8005fae <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005d00:	f000 fc00 	bl	8006504 <xTaskResumeAll>
 8005d04:	e77a      	b.n	8005bfc <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005d06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d08:	f000 f951 	bl	8005fae <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005d0c:	f000 fbfa 	bl	8006504 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005d10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d12:	f000 f99e 	bl	8006052 <prvIsQueueEmpty>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f43f af6f 	beq.w	8005bfc <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005d1e:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3730      	adds	r7, #48	@ 0x30
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b090      	sub	sp, #64	@ 0x40
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	60f8      	str	r0, [r7, #12]
 8005d34:	60b9      	str	r1, [r7, #8]
 8005d36:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005d3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d10b      	bne.n	8005d5a <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8005d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d46:	f383 8811 	msr	BASEPRI, r3
 8005d4a:	f3bf 8f6f 	isb	sy
 8005d4e:	f3bf 8f4f 	dsb	sy
 8005d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005d54:	bf00      	nop
 8005d56:	bf00      	nop
 8005d58:	e7fd      	b.n	8005d56 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d103      	bne.n	8005d68 <xQueueReceiveFromISR+0x3c>
 8005d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <xQueueReceiveFromISR+0x40>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e000      	b.n	8005d6e <xQueueReceiveFromISR+0x42>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d10b      	bne.n	8005d8a <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8005d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d76:	f383 8811 	msr	BASEPRI, r3
 8005d7a:	f3bf 8f6f 	isb	sy
 8005d7e:	f3bf 8f4f 	dsb	sy
 8005d82:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005d84:	bf00      	nop
 8005d86:	bf00      	nop
 8005d88:	e7fd      	b.n	8005d86 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d8a:	f002 f897 	bl	8007ebc <vPortValidateInterruptPriority>
        __asm volatile
 8005d8e:	f3ef 8211 	mrs	r2, BASEPRI
 8005d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	623a      	str	r2, [r7, #32]
 8005da4:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005da6:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005da8:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dae:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d03f      	beq.n	8005e36 <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005dc0:	68b9      	ldr	r1, [r7, #8]
 8005dc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005dc4:	f000 f8cd 	bl	8005f62 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dca:	1e5a      	subs	r2, r3, #1
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dce:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005dd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dd8:	d112      	bne.n	8005e00 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d026      	beq.n	8005e30 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de4:	3310      	adds	r3, #16
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fda2 	bl	8006930 <xTaskRemoveFromEventList>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d01e      	beq.n	8005e30 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d01b      	beq.n	8005e30 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	e017      	b.n	8005e30 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005e00:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005e04:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e06:	d10b      	bne.n	8005e20 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	61bb      	str	r3, [r7, #24]
    }
 8005e1a:	bf00      	nop
 8005e1c:	bf00      	nop
 8005e1e:	e7fd      	b.n	8005e1c <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005e20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e24:	3301      	adds	r3, #1
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	b25a      	sxtb	r2, r3
 8005e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8005e30:	2301      	movs	r3, #1
 8005e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e34:	e001      	b.n	8005e3a <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3c:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	f383 8811 	msr	BASEPRI, r3
    }
 8005e44:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3740      	adds	r7, #64	@ 0x40
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10b      	bne.n	8005e76 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	60bb      	str	r3, [r7, #8]
    }
 8005e70:	bf00      	nop
 8005e72:	bf00      	nop
 8005e74:	e7fd      	b.n	8005e72 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005e76:	f001 ff39 	bl	8007cec <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e7e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005e80:	f001 ff66 	bl	8007d50 <vPortExitCritical>

    return uxReturn;
 8005e84:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b086      	sub	sp, #24
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d10d      	bne.n	8005ec8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d14d      	bne.n	8005f50 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f000 fef7 	bl	8006cac <xTaskPriorityDisinherit>
 8005ebe:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	609a      	str	r2, [r3, #8]
 8005ec6:	e043      	b.n	8005f50 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d119      	bne.n	8005f02 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	6858      	ldr	r0, [r3, #4]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68b9      	ldr	r1, [r7, #8]
 8005eda:	f002 fa87 	bl	80083ec <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee6:	441a      	add	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d32b      	bcc.n	8005f50 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	605a      	str	r2, [r3, #4]
 8005f00:	e026      	b.n	8005f50 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	68d8      	ldr	r0, [r3, #12]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	68b9      	ldr	r1, [r7, #8]
 8005f0e:	f002 fa6d 	bl	80083ec <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f1a:	425b      	negs	r3, r3
 8005f1c:	441a      	add	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d207      	bcs.n	8005f3e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f36:	425b      	negs	r3, r3
 8005f38:	441a      	add	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d105      	bne.n	8005f50 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8005f58:	697b      	ldr	r3, [r7, #20]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d018      	beq.n	8005fa6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68da      	ldr	r2, [r3, #12]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f7c:	441a      	add	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	68da      	ldr	r2, [r3, #12]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d303      	bcc.n	8005f96 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68d9      	ldr	r1, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	6838      	ldr	r0, [r7, #0]
 8005fa2:	f002 fa23 	bl	80083ec <memcpy>
    }
}
 8005fa6:	bf00      	nop
 8005fa8:	3708      	adds	r7, #8
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}

08005fae <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fae:	b580      	push	{r7, lr}
 8005fb0:	b084      	sub	sp, #16
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005fb6:	f001 fe99 	bl	8007cec <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fc0:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fc2:	e011      	b.n	8005fe8 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3324      	adds	r3, #36	@ 0x24
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f000 fcad 	bl	8006930 <xTaskRemoveFromEventList>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005fdc:	f000 fd8a 	bl	8006af4 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
 8005fe2:	3b01      	subs	r3, #1
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005fe8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	dce9      	bgt.n	8005fc4 <prvUnlockQueue+0x16>
 8005ff0:	e000      	b.n	8005ff4 <prvUnlockQueue+0x46>
                        break;
 8005ff2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	22ff      	movs	r2, #255	@ 0xff
 8005ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8005ffc:	f001 fea8 	bl	8007d50 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006000:	f001 fe74 	bl	8007cec <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800600a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800600c:	e011      	b.n	8006032 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d012      	beq.n	800603c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	3310      	adds	r3, #16
 800601a:	4618      	mov	r0, r3
 800601c:	f000 fc88 	bl	8006930 <xTaskRemoveFromEventList>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d001      	beq.n	800602a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8006026:	f000 fd65 	bl	8006af4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800602a:	7bbb      	ldrb	r3, [r7, #14]
 800602c:	3b01      	subs	r3, #1
 800602e:	b2db      	uxtb	r3, r3
 8006030:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006032:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006036:	2b00      	cmp	r3, #0
 8006038:	dce9      	bgt.n	800600e <prvUnlockQueue+0x60>
 800603a:	e000      	b.n	800603e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800603c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	22ff      	movs	r2, #255	@ 0xff
 8006042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8006046:	f001 fe83 	bl	8007d50 <vPortExitCritical>
}
 800604a:	bf00      	nop
 800604c:	3710      	adds	r7, #16
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}

08006052 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8006052:	b580      	push	{r7, lr}
 8006054:	b084      	sub	sp, #16
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800605a:	f001 fe47 	bl	8007cec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006062:	2b00      	cmp	r3, #0
 8006064:	d102      	bne.n	800606c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8006066:	2301      	movs	r3, #1
 8006068:	60fb      	str	r3, [r7, #12]
 800606a:	e001      	b.n	8006070 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800606c:	2300      	movs	r3, #0
 800606e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8006070:	f001 fe6e 	bl	8007d50 <vPortExitCritical>

    return xReturn;
 8006074:	68fb      	ldr	r3, [r7, #12]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b084      	sub	sp, #16
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8006086:	f001 fe31 	bl	8007cec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006092:	429a      	cmp	r2, r3
 8006094:	d102      	bne.n	800609c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8006096:	2301      	movs	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	e001      	b.n	80060a0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80060a0:	f001 fe56 	bl	8007d50 <vPortExitCritical>

    return xReturn;
 80060a4:	68fb      	ldr	r3, [r7, #12]
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3710      	adds	r7, #16
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80060ae:	b480      	push	{r7}
 80060b0:	b087      	sub	sp, #28
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10b      	bne.n	80060d8 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	60fb      	str	r3, [r7, #12]
    }
 80060d2:	bf00      	nop
 80060d4:	bf00      	nop
 80060d6:	e7fd      	b.n	80060d4 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d102      	bne.n	80060ea <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 80060e4:	2301      	movs	r3, #1
 80060e6:	617b      	str	r3, [r7, #20]
 80060e8:	e001      	b.n	80060ee <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 80060ea:	2300      	movs	r3, #0
 80060ec:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80060ee:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80060f0:	4618      	mov	r0, r3
 80060f2:	371c      	adds	r7, #28
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006106:	2300      	movs	r3, #0
 8006108:	60fb      	str	r3, [r7, #12]
 800610a:	e014      	b.n	8006136 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800610c:	4a0f      	ldr	r2, [pc, #60]	@ (800614c <vQueueAddToRegistry+0x50>)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10b      	bne.n	8006130 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006118:	490c      	ldr	r1, [pc, #48]	@ (800614c <vQueueAddToRegistry+0x50>)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8006122:	4a0a      	ldr	r2, [pc, #40]	@ (800614c <vQueueAddToRegistry+0x50>)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	00db      	lsls	r3, r3, #3
 8006128:	4413      	add	r3, r2
 800612a:	687a      	ldr	r2, [r7, #4]
 800612c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 800612e:	e006      	b.n	800613e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3301      	adds	r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2b07      	cmp	r3, #7
 800613a:	d9e7      	bls.n	800610c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800613c:	bf00      	nop
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000234 	.word	0x20000234

08006150 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8006160:	f001 fdc4 	bl	8007cec <vPortEnterCritical>
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800616a:	b25b      	sxtb	r3, r3
 800616c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006170:	d103      	bne.n	800617a <vQueueWaitForMessageRestricted+0x2a>
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006180:	b25b      	sxtb	r3, r3
 8006182:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006186:	d103      	bne.n	8006190 <vQueueWaitForMessageRestricted+0x40>
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2200      	movs	r2, #0
 800618c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006190:	f001 fdde 	bl	8007d50 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006198:	2b00      	cmp	r3, #0
 800619a:	d106      	bne.n	80061aa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	3324      	adds	r3, #36	@ 0x24
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	68b9      	ldr	r1, [r7, #8]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f000 fb97 	bl	80068d8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80061aa:	6978      	ldr	r0, [r7, #20]
 80061ac:	f7ff feff 	bl	8005fae <prvUnlockQueue>
    }
 80061b0:	bf00      	nop
 80061b2:	3718      	adds	r7, #24
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b08c      	sub	sp, #48	@ 0x30
 80061bc:	af04      	add	r7, sp, #16
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	60b9      	str	r1, [r7, #8]
 80061c2:	603b      	str	r3, [r7, #0]
 80061c4:	4613      	mov	r3, r2
 80061c6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80061c8:	88fb      	ldrh	r3, [r7, #6]
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 feb7 	bl	8007f40 <pvPortMalloc>
 80061d2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00e      	beq.n	80061f8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80061da:	2058      	movs	r0, #88	@ 0x58
 80061dc:	f001 feb0 	bl	8007f40 <pvPortMalloc>
 80061e0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d003      	beq.n	80061f0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	631a      	str	r2, [r3, #48]	@ 0x30
 80061ee:	e005      	b.n	80061fc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80061f0:	6978      	ldr	r0, [r7, #20]
 80061f2:	f001 ff87 	bl	8008104 <vPortFree>
 80061f6:	e001      	b.n	80061fc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d013      	beq.n	800622a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006202:	88fa      	ldrh	r2, [r7, #6]
 8006204:	2300      	movs	r3, #0
 8006206:	9303      	str	r3, [sp, #12]
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	9302      	str	r3, [sp, #8]
 800620c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620e:	9301      	str	r3, [sp, #4]
 8006210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006212:	9300      	str	r3, [sp, #0]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	68b9      	ldr	r1, [r7, #8]
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 f80e 	bl	800623a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800621e:	69f8      	ldr	r0, [r7, #28]
 8006220:	f000 f8a2 	bl	8006368 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8006224:	2301      	movs	r3, #1
 8006226:	61bb      	str	r3, [r7, #24]
 8006228:	e002      	b.n	8006230 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800622a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800622e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006230:	69bb      	ldr	r3, [r7, #24]
    }
 8006232:	4618      	mov	r0, r3
 8006234:	3720      	adds	r7, #32
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800623a:	b580      	push	{r7, lr}
 800623c:	b088      	sub	sp, #32
 800623e:	af00      	add	r7, sp, #0
 8006240:	60f8      	str	r0, [r7, #12]
 8006242:	60b9      	str	r1, [r7, #8]
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800624a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	461a      	mov	r2, r3
 8006252:	21a5      	movs	r1, #165	@ 0xa5
 8006254:	f002 f896 	bl	8008384 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800625a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006262:	3b01      	subs	r3, #1
 8006264:	009b      	lsls	r3, r3, #2
 8006266:	4413      	add	r3, r2
 8006268:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	f023 0307 	bic.w	r3, r3, #7
 8006270:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	f003 0307 	and.w	r3, r3, #7
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00b      	beq.n	8006294 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800627c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	617b      	str	r3, [r7, #20]
    }
 800628e:	bf00      	nop
 8006290:	bf00      	nop
 8006292:	e7fd      	b.n	8006290 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d01f      	beq.n	80062da <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800629a:	2300      	movs	r3, #0
 800629c:	61fb      	str	r3, [r7, #28]
 800629e:	e012      	b.n	80062c6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	4413      	add	r3, r2
 80062a6:	7819      	ldrb	r1, [r3, #0]
 80062a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	4413      	add	r3, r2
 80062ae:	3334      	adds	r3, #52	@ 0x34
 80062b0:	460a      	mov	r2, r1
 80062b2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4413      	add	r3, r2
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d006      	beq.n	80062ce <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	3301      	adds	r3, #1
 80062c4:	61fb      	str	r3, [r7, #28]
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	2b09      	cmp	r3, #9
 80062ca:	d9e9      	bls.n	80062a0 <prvInitialiseNewTask+0x66>
 80062cc:	e000      	b.n	80062d0 <prvInitialiseNewTask+0x96>
            {
                break;
 80062ce:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80062d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80062d8:	e003      	b.n	80062e2 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80062e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e4:	2b04      	cmp	r3, #4
 80062e6:	d901      	bls.n	80062ec <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80062e8:	2304      	movs	r3, #4
 80062ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80062ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80062f6:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80062f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062fa:	2200      	movs	r2, #0
 80062fc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80062fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006300:	3304      	adds	r3, #4
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff f8fc 	bl	8005500 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630a:	3318      	adds	r3, #24
 800630c:	4618      	mov	r0, r3
 800630e:	f7ff f8f7 	bl	8005500 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006314:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006316:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	f1c3 0205 	rsb	r2, r3, #5
 800631e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006320:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006322:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006324:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006326:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006328:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800632a:	3350      	adds	r3, #80	@ 0x50
 800632c:	2204      	movs	r2, #4
 800632e:	2100      	movs	r1, #0
 8006330:	4618      	mov	r0, r3
 8006332:	f002 f827 	bl	8008384 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8006336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006338:	3354      	adds	r3, #84	@ 0x54
 800633a:	2201      	movs	r2, #1
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f002 f820 	bl	8008384 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	68f9      	ldr	r1, [r7, #12]
 8006348:	69b8      	ldr	r0, [r7, #24]
 800634a:	f001 fb99 	bl	8007a80 <pxPortInitialiseStack>
 800634e:	4602      	mov	r2, r0
 8006350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006352:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8006354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800635a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800635c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800635e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006360:	bf00      	nop
 8006362:	3720      	adds	r7, #32
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}

08006368 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8006370:	f001 fcbc 	bl	8007cec <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8006374:	4b2c      	ldr	r3, [pc, #176]	@ (8006428 <prvAddNewTaskToReadyList+0xc0>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	3301      	adds	r3, #1
 800637a:	4a2b      	ldr	r2, [pc, #172]	@ (8006428 <prvAddNewTaskToReadyList+0xc0>)
 800637c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800637e:	4b2b      	ldr	r3, [pc, #172]	@ (800642c <prvAddNewTaskToReadyList+0xc4>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d109      	bne.n	800639a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8006386:	4a29      	ldr	r2, [pc, #164]	@ (800642c <prvAddNewTaskToReadyList+0xc4>)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800638c:	4b26      	ldr	r3, [pc, #152]	@ (8006428 <prvAddNewTaskToReadyList+0xc0>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d110      	bne.n	80063b6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8006394:	f000 fbd2 	bl	8006b3c <prvInitialiseTaskLists>
 8006398:	e00d      	b.n	80063b6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800639a:	4b25      	ldr	r3, [pc, #148]	@ (8006430 <prvAddNewTaskToReadyList+0xc8>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80063a2:	4b22      	ldr	r3, [pc, #136]	@ (800642c <prvAddNewTaskToReadyList+0xc4>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d802      	bhi.n	80063b6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80063b0:	4a1e      	ldr	r2, [pc, #120]	@ (800642c <prvAddNewTaskToReadyList+0xc4>)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80063b6:	4b1f      	ldr	r3, [pc, #124]	@ (8006434 <prvAddNewTaskToReadyList+0xcc>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006434 <prvAddNewTaskToReadyList+0xcc>)
 80063be:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80063c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006434 <prvAddNewTaskToReadyList+0xcc>)
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063cc:	2201      	movs	r2, #1
 80063ce:	409a      	lsls	r2, r3
 80063d0:	4b19      	ldr	r3, [pc, #100]	@ (8006438 <prvAddNewTaskToReadyList+0xd0>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	4a18      	ldr	r2, [pc, #96]	@ (8006438 <prvAddNewTaskToReadyList+0xd0>)
 80063d8:	6013      	str	r3, [r2, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063de:	4613      	mov	r3, r2
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4a15      	ldr	r2, [pc, #84]	@ (800643c <prvAddNewTaskToReadyList+0xd4>)
 80063e8:	441a      	add	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3304      	adds	r3, #4
 80063ee:	4619      	mov	r1, r3
 80063f0:	4610      	mov	r0, r2
 80063f2:	f7ff f892 	bl	800551a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80063f6:	f001 fcab 	bl	8007d50 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80063fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006430 <prvAddNewTaskToReadyList+0xc8>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00e      	beq.n	8006420 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006402:	4b0a      	ldr	r3, [pc, #40]	@ (800642c <prvAddNewTaskToReadyList+0xc4>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640c:	429a      	cmp	r2, r3
 800640e:	d207      	bcs.n	8006420 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006410:	4b0b      	ldr	r3, [pc, #44]	@ (8006440 <prvAddNewTaskToReadyList+0xd8>)
 8006412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006416:	601a      	str	r2, [r3, #0]
 8006418:	f3bf 8f4f 	dsb	sy
 800641c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	2000034c 	.word	0x2000034c
 800642c:	20000274 	.word	0x20000274
 8006430:	20000358 	.word	0x20000358
 8006434:	20000368 	.word	0x20000368
 8006438:	20000354 	.word	0x20000354
 800643c:	20000278 	.word	0x20000278
 8006440:	e000ed04 	.word	0xe000ed04

08006444 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b086      	sub	sp, #24
 8006448:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800644a:	4b20      	ldr	r3, [pc, #128]	@ (80064cc <vTaskStartScheduler+0x88>)
 800644c:	9301      	str	r3, [sp, #4]
 800644e:	2300      	movs	r3, #0
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	2300      	movs	r3, #0
 8006454:	2282      	movs	r2, #130	@ 0x82
 8006456:	491e      	ldr	r1, [pc, #120]	@ (80064d0 <vTaskStartScheduler+0x8c>)
 8006458:	481e      	ldr	r0, [pc, #120]	@ (80064d4 <vTaskStartScheduler+0x90>)
 800645a:	f7ff fead 	bl	80061b8 <xTaskCreate>
 800645e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d102      	bne.n	800646c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8006466:	f000 ff6d 	bl	8007344 <xTimerCreateTimerTask>
 800646a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d116      	bne.n	80064a0 <vTaskStartScheduler+0x5c>
        __asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	60bb      	str	r3, [r7, #8]
    }
 8006484:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8006486:	4b14      	ldr	r3, [pc, #80]	@ (80064d8 <vTaskStartScheduler+0x94>)
 8006488:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800648c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800648e:	4b13      	ldr	r3, [pc, #76]	@ (80064dc <vTaskStartScheduler+0x98>)
 8006490:	2201      	movs	r2, #1
 8006492:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006494:	4b12      	ldr	r3, [pc, #72]	@ (80064e0 <vTaskStartScheduler+0x9c>)
 8006496:	2200      	movs	r2, #0
 8006498:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800649a:	f001 fb83 	bl	8007ba4 <xPortStartScheduler>
 800649e:	e00f      	b.n	80064c0 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064a6:	d10b      	bne.n	80064c0 <vTaskStartScheduler+0x7c>
        __asm volatile
 80064a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ac:	f383 8811 	msr	BASEPRI, r3
 80064b0:	f3bf 8f6f 	isb	sy
 80064b4:	f3bf 8f4f 	dsb	sy
 80064b8:	607b      	str	r3, [r7, #4]
    }
 80064ba:	bf00      	nop
 80064bc:	bf00      	nop
 80064be:	e7fd      	b.n	80064bc <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80064c0:	4b08      	ldr	r3, [pc, #32]	@ (80064e4 <vTaskStartScheduler+0xa0>)
 80064c2:	681b      	ldr	r3, [r3, #0]
}
 80064c4:	bf00      	nop
 80064c6:	3710      	adds	r7, #16
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	20000370 	.word	0x20000370
 80064d0:	0800932c 	.word	0x0800932c
 80064d4:	08006b0d 	.word	0x08006b0d
 80064d8:	2000036c 	.word	0x2000036c
 80064dc:	20000358 	.word	0x20000358
 80064e0:	20000350 	.word	0x20000350
 80064e4:	20000068 	.word	0x20000068

080064e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80064e8:	b480      	push	{r7}
 80064ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80064ec:	4b04      	ldr	r3, [pc, #16]	@ (8006500 <vTaskSuspendAll+0x18>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	3301      	adds	r3, #1
 80064f2:	4a03      	ldr	r2, [pc, #12]	@ (8006500 <vTaskSuspendAll+0x18>)
 80064f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80064f6:	bf00      	nop
 80064f8:	46bd      	mov	sp, r7
 80064fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fe:	4770      	bx	lr
 8006500:	20000374 	.word	0x20000374

08006504 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800650e:	2300      	movs	r3, #0
 8006510:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006512:	4b42      	ldr	r3, [pc, #264]	@ (800661c <xTaskResumeAll+0x118>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10b      	bne.n	8006532 <xTaskResumeAll+0x2e>
        __asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	603b      	str	r3, [r7, #0]
    }
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	e7fd      	b.n	800652e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006532:	f001 fbdb 	bl	8007cec <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8006536:	4b39      	ldr	r3, [pc, #228]	@ (800661c <xTaskResumeAll+0x118>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	3b01      	subs	r3, #1
 800653c:	4a37      	ldr	r2, [pc, #220]	@ (800661c <xTaskResumeAll+0x118>)
 800653e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006540:	4b36      	ldr	r3, [pc, #216]	@ (800661c <xTaskResumeAll+0x118>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d161      	bne.n	800660c <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006548:	4b35      	ldr	r3, [pc, #212]	@ (8006620 <xTaskResumeAll+0x11c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d05d      	beq.n	800660c <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006550:	e02e      	b.n	80065b0 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006552:	4b34      	ldr	r3, [pc, #208]	@ (8006624 <xTaskResumeAll+0x120>)
 8006554:	68db      	ldr	r3, [r3, #12]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3318      	adds	r3, #24
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff f838 	bl	80055d4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	3304      	adds	r3, #4
 8006568:	4618      	mov	r0, r3
 800656a:	f7ff f833 	bl	80055d4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006572:	2201      	movs	r2, #1
 8006574:	409a      	lsls	r2, r3
 8006576:	4b2c      	ldr	r3, [pc, #176]	@ (8006628 <xTaskResumeAll+0x124>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4313      	orrs	r3, r2
 800657c:	4a2a      	ldr	r2, [pc, #168]	@ (8006628 <xTaskResumeAll+0x124>)
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4a27      	ldr	r2, [pc, #156]	@ (800662c <xTaskResumeAll+0x128>)
 800658e:	441a      	add	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f7fe ffbf 	bl	800551a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065a0:	4b23      	ldr	r3, [pc, #140]	@ (8006630 <xTaskResumeAll+0x12c>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d302      	bcc.n	80065b0 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 80065aa:	4b22      	ldr	r3, [pc, #136]	@ (8006634 <xTaskResumeAll+0x130>)
 80065ac:	2201      	movs	r2, #1
 80065ae:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80065b0:	4b1c      	ldr	r3, [pc, #112]	@ (8006624 <xTaskResumeAll+0x120>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1cc      	bne.n	8006552 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80065be:	f000 fb3b 	bl	8006c38 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80065c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006638 <xTaskResumeAll+0x134>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d010      	beq.n	80065f0 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80065ce:	f000 f847 	bl	8006660 <xTaskIncrementTick>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 80065d8:	4b16      	ldr	r3, [pc, #88]	@ (8006634 <xTaskResumeAll+0x130>)
 80065da:	2201      	movs	r2, #1
 80065dc:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	3b01      	subs	r3, #1
 80065e2:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1f1      	bne.n	80065ce <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80065ea:	4b13      	ldr	r3, [pc, #76]	@ (8006638 <xTaskResumeAll+0x134>)
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80065f0:	4b10      	ldr	r3, [pc, #64]	@ (8006634 <xTaskResumeAll+0x130>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80065f8:	2301      	movs	r3, #1
 80065fa:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80065fc:	4b0f      	ldr	r3, [pc, #60]	@ (800663c <xTaskResumeAll+0x138>)
 80065fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006602:	601a      	str	r2, [r3, #0]
 8006604:	f3bf 8f4f 	dsb	sy
 8006608:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800660c:	f001 fba0 	bl	8007d50 <vPortExitCritical>

    return xAlreadyYielded;
 8006610:	68bb      	ldr	r3, [r7, #8]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	20000374 	.word	0x20000374
 8006620:	2000034c 	.word	0x2000034c
 8006624:	2000030c 	.word	0x2000030c
 8006628:	20000354 	.word	0x20000354
 800662c:	20000278 	.word	0x20000278
 8006630:	20000274 	.word	0x20000274
 8006634:	20000360 	.word	0x20000360
 8006638:	2000035c 	.word	0x2000035c
 800663c:	e000ed04 	.word	0xe000ed04

08006640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006640:	b480      	push	{r7}
 8006642:	b083      	sub	sp, #12
 8006644:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8006646:	4b05      	ldr	r3, [pc, #20]	@ (800665c <xTaskGetTickCount+0x1c>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 800664c:	687b      	ldr	r3, [r7, #4]
}
 800664e:	4618      	mov	r0, r3
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20000350 	.word	0x20000350

08006660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8006666:	2300      	movs	r3, #0
 8006668:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800666a:	4b4f      	ldr	r3, [pc, #316]	@ (80067a8 <xTaskIncrementTick+0x148>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	f040 808f 	bne.w	8006792 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006674:	4b4d      	ldr	r3, [pc, #308]	@ (80067ac <xTaskIncrementTick+0x14c>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3301      	adds	r3, #1
 800667a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800667c:	4a4b      	ldr	r2, [pc, #300]	@ (80067ac <xTaskIncrementTick+0x14c>)
 800667e:	693b      	ldr	r3, [r7, #16]
 8006680:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d121      	bne.n	80066cc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8006688:	4b49      	ldr	r3, [pc, #292]	@ (80067b0 <xTaskIncrementTick+0x150>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d00b      	beq.n	80066aa <xTaskIncrementTick+0x4a>
        __asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	603b      	str	r3, [r7, #0]
    }
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop
 80066a8:	e7fd      	b.n	80066a6 <xTaskIncrementTick+0x46>
 80066aa:	4b41      	ldr	r3, [pc, #260]	@ (80067b0 <xTaskIncrementTick+0x150>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	4b40      	ldr	r3, [pc, #256]	@ (80067b4 <xTaskIncrementTick+0x154>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a3e      	ldr	r2, [pc, #248]	@ (80067b0 <xTaskIncrementTick+0x150>)
 80066b6:	6013      	str	r3, [r2, #0]
 80066b8:	4a3e      	ldr	r2, [pc, #248]	@ (80067b4 <xTaskIncrementTick+0x154>)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6013      	str	r3, [r2, #0]
 80066be:	4b3e      	ldr	r3, [pc, #248]	@ (80067b8 <xTaskIncrementTick+0x158>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	3301      	adds	r3, #1
 80066c4:	4a3c      	ldr	r2, [pc, #240]	@ (80067b8 <xTaskIncrementTick+0x158>)
 80066c6:	6013      	str	r3, [r2, #0]
 80066c8:	f000 fab6 	bl	8006c38 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80066cc:	4b3b      	ldr	r3, [pc, #236]	@ (80067bc <xTaskIncrementTick+0x15c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	429a      	cmp	r2, r3
 80066d4:	d348      	bcc.n	8006768 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066d6:	4b36      	ldr	r3, [pc, #216]	@ (80067b0 <xTaskIncrementTick+0x150>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d104      	bne.n	80066ea <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e0:	4b36      	ldr	r3, [pc, #216]	@ (80067bc <xTaskIncrementTick+0x15c>)
 80066e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066e6:	601a      	str	r2, [r3, #0]
                    break;
 80066e8:	e03e      	b.n	8006768 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066ea:	4b31      	ldr	r3, [pc, #196]	@ (80067b0 <xTaskIncrementTick+0x150>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d203      	bcs.n	800670a <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006702:	4a2e      	ldr	r2, [pc, #184]	@ (80067bc <xTaskIncrementTick+0x15c>)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006708:	e02e      	b.n	8006768 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	3304      	adds	r3, #4
 800670e:	4618      	mov	r0, r3
 8006710:	f7fe ff60 	bl	80055d4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006718:	2b00      	cmp	r3, #0
 800671a:	d004      	beq.n	8006726 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	3318      	adds	r3, #24
 8006720:	4618      	mov	r0, r3
 8006722:	f7fe ff57 	bl	80055d4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672a:	2201      	movs	r2, #1
 800672c:	409a      	lsls	r2, r3
 800672e:	4b24      	ldr	r3, [pc, #144]	@ (80067c0 <xTaskIncrementTick+0x160>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4313      	orrs	r3, r2
 8006734:	4a22      	ldr	r2, [pc, #136]	@ (80067c0 <xTaskIncrementTick+0x160>)
 8006736:	6013      	str	r3, [r2, #0]
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4a1f      	ldr	r2, [pc, #124]	@ (80067c4 <xTaskIncrementTick+0x164>)
 8006746:	441a      	add	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	3304      	adds	r3, #4
 800674c:	4619      	mov	r1, r3
 800674e:	4610      	mov	r0, r2
 8006750:	f7fe fee3 	bl	800551a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006758:	4b1b      	ldr	r3, [pc, #108]	@ (80067c8 <xTaskIncrementTick+0x168>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800675e:	429a      	cmp	r2, r3
 8006760:	d3b9      	bcc.n	80066d6 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8006762:	2301      	movs	r3, #1
 8006764:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006766:	e7b6      	b.n	80066d6 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006768:	4b17      	ldr	r3, [pc, #92]	@ (80067c8 <xTaskIncrementTick+0x168>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800676e:	4915      	ldr	r1, [pc, #84]	@ (80067c4 <xTaskIncrementTick+0x164>)
 8006770:	4613      	mov	r3, r2
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d901      	bls.n	8006784 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8006780:	2301      	movs	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8006784:	4b11      	ldr	r3, [pc, #68]	@ (80067cc <xTaskIncrementTick+0x16c>)
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 800678c:	2301      	movs	r3, #1
 800678e:	617b      	str	r3, [r7, #20]
 8006790:	e004      	b.n	800679c <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8006792:	4b0f      	ldr	r3, [pc, #60]	@ (80067d0 <xTaskIncrementTick+0x170>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	3301      	adds	r3, #1
 8006798:	4a0d      	ldr	r2, [pc, #52]	@ (80067d0 <xTaskIncrementTick+0x170>)
 800679a:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800679c:	697b      	ldr	r3, [r7, #20]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	20000374 	.word	0x20000374
 80067ac:	20000350 	.word	0x20000350
 80067b0:	20000304 	.word	0x20000304
 80067b4:	20000308 	.word	0x20000308
 80067b8:	20000364 	.word	0x20000364
 80067bc:	2000036c 	.word	0x2000036c
 80067c0:	20000354 	.word	0x20000354
 80067c4:	20000278 	.word	0x20000278
 80067c8:	20000274 	.word	0x20000274
 80067cc:	20000360 	.word	0x20000360
 80067d0:	2000035c 	.word	0x2000035c

080067d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80067da:	4b27      	ldr	r3, [pc, #156]	@ (8006878 <vTaskSwitchContext+0xa4>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d003      	beq.n	80067ea <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80067e2:	4b26      	ldr	r3, [pc, #152]	@ (800687c <vTaskSwitchContext+0xa8>)
 80067e4:	2201      	movs	r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80067e8:	e040      	b.n	800686c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80067ea:	4b24      	ldr	r3, [pc, #144]	@ (800687c <vTaskSwitchContext+0xa8>)
 80067ec:	2200      	movs	r2, #0
 80067ee:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067f0:	4b23      	ldr	r3, [pc, #140]	@ (8006880 <vTaskSwitchContext+0xac>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	fab3 f383 	clz	r3, r3
 80067fc:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80067fe:	7afb      	ldrb	r3, [r7, #11]
 8006800:	f1c3 031f 	rsb	r3, r3, #31
 8006804:	617b      	str	r3, [r7, #20]
 8006806:	491f      	ldr	r1, [pc, #124]	@ (8006884 <vTaskSwitchContext+0xb0>)
 8006808:	697a      	ldr	r2, [r7, #20]
 800680a:	4613      	mov	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4413      	add	r3, r2
 8006810:	009b      	lsls	r3, r3, #2
 8006812:	440b      	add	r3, r1
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10b      	bne.n	8006832 <vTaskSwitchContext+0x5e>
        __asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	607b      	str	r3, [r7, #4]
    }
 800682c:	bf00      	nop
 800682e:	bf00      	nop
 8006830:	e7fd      	b.n	800682e <vTaskSwitchContext+0x5a>
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	4613      	mov	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4413      	add	r3, r2
 800683a:	009b      	lsls	r3, r3, #2
 800683c:	4a11      	ldr	r2, [pc, #68]	@ (8006884 <vTaskSwitchContext+0xb0>)
 800683e:	4413      	add	r3, r2
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	685a      	ldr	r2, [r3, #4]
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	605a      	str	r2, [r3, #4]
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	3308      	adds	r3, #8
 8006854:	429a      	cmp	r2, r3
 8006856:	d104      	bne.n	8006862 <vTaskSwitchContext+0x8e>
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	4a07      	ldr	r2, [pc, #28]	@ (8006888 <vTaskSwitchContext+0xb4>)
 800686a:	6013      	str	r3, [r2, #0]
}
 800686c:	bf00      	nop
 800686e:	371c      	adds	r7, #28
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr
 8006878:	20000374 	.word	0x20000374
 800687c:	20000360 	.word	0x20000360
 8006880:	20000354 	.word	0x20000354
 8006884:	20000278 	.word	0x20000278
 8006888:	20000274 	.word	0x20000274

0800688c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b084      	sub	sp, #16
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10b      	bne.n	80068b4 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	60fb      	str	r3, [r7, #12]
    }
 80068ae:	bf00      	nop
 80068b0:	bf00      	nop
 80068b2:	e7fd      	b.n	80068b0 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80068b4:	4b07      	ldr	r3, [pc, #28]	@ (80068d4 <vTaskPlaceOnEventList+0x48>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	3318      	adds	r3, #24
 80068ba:	4619      	mov	r1, r3
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f7fe fe50 	bl	8005562 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068c2:	2101      	movs	r1, #1
 80068c4:	6838      	ldr	r0, [r7, #0]
 80068c6:	f000 fcd7 	bl	8007278 <prvAddCurrentTaskToDelayedList>
}
 80068ca:	bf00      	nop
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20000274 	.word	0x20000274

080068d8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80068d8:	b580      	push	{r7, lr}
 80068da:	b086      	sub	sp, #24
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10b      	bne.n	8006902 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80068ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068ee:	f383 8811 	msr	BASEPRI, r3
 80068f2:	f3bf 8f6f 	isb	sy
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	617b      	str	r3, [r7, #20]
    }
 80068fc:	bf00      	nop
 80068fe:	bf00      	nop
 8006900:	e7fd      	b.n	80068fe <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006902:	4b0a      	ldr	r3, [pc, #40]	@ (800692c <vTaskPlaceOnEventListRestricted+0x54>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3318      	adds	r3, #24
 8006908:	4619      	mov	r1, r3
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f7fe fe05 	bl	800551a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d002      	beq.n	800691c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8006916:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800691a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800691c:	6879      	ldr	r1, [r7, #4]
 800691e:	68b8      	ldr	r0, [r7, #8]
 8006920:	f000 fcaa 	bl	8007278 <prvAddCurrentTaskToDelayedList>
    }
 8006924:	bf00      	nop
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000274 	.word	0x20000274

08006930 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	68db      	ldr	r3, [r3, #12]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10b      	bne.n	800695e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	f383 8811 	msr	BASEPRI, r3
 800694e:	f3bf 8f6f 	isb	sy
 8006952:	f3bf 8f4f 	dsb	sy
 8006956:	60fb      	str	r3, [r7, #12]
    }
 8006958:	bf00      	nop
 800695a:	bf00      	nop
 800695c:	e7fd      	b.n	800695a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	3318      	adds	r3, #24
 8006962:	4618      	mov	r0, r3
 8006964:	f7fe fe36 	bl	80055d4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006968:	4b1d      	ldr	r3, [pc, #116]	@ (80069e0 <xTaskRemoveFromEventList+0xb0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d11c      	bne.n	80069aa <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	3304      	adds	r3, #4
 8006974:	4618      	mov	r0, r3
 8006976:	f7fe fe2d 	bl	80055d4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800697e:	2201      	movs	r2, #1
 8006980:	409a      	lsls	r2, r3
 8006982:	4b18      	ldr	r3, [pc, #96]	@ (80069e4 <xTaskRemoveFromEventList+0xb4>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4313      	orrs	r3, r2
 8006988:	4a16      	ldr	r2, [pc, #88]	@ (80069e4 <xTaskRemoveFromEventList+0xb4>)
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4a13      	ldr	r2, [pc, #76]	@ (80069e8 <xTaskRemoveFromEventList+0xb8>)
 800699a:	441a      	add	r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	3304      	adds	r3, #4
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7fe fdb9 	bl	800551a <vListInsertEnd>
 80069a8:	e005      	b.n	80069b6 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	3318      	adds	r3, #24
 80069ae:	4619      	mov	r1, r3
 80069b0:	480e      	ldr	r0, [pc, #56]	@ (80069ec <xTaskRemoveFromEventList+0xbc>)
 80069b2:	f7fe fdb2 	bl	800551a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ba:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <xTaskRemoveFromEventList+0xc0>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d905      	bls.n	80069d0 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80069c4:	2301      	movs	r3, #1
 80069c6:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80069c8:	4b0a      	ldr	r3, [pc, #40]	@ (80069f4 <xTaskRemoveFromEventList+0xc4>)
 80069ca:	2201      	movs	r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
 80069ce:	e001      	b.n	80069d4 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80069d0:	2300      	movs	r3, #0
 80069d2:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80069d4:	697b      	ldr	r3, [r7, #20]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	20000374 	.word	0x20000374
 80069e4:	20000354 	.word	0x20000354
 80069e8:	20000278 	.word	0x20000278
 80069ec:	2000030c 	.word	0x2000030c
 80069f0:	20000274 	.word	0x20000274
 80069f4:	20000360 	.word	0x20000360

080069f8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a00:	4b06      	ldr	r3, [pc, #24]	@ (8006a1c <vTaskInternalSetTimeOutState+0x24>)
 8006a02:	681a      	ldr	r2, [r3, #0]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006a08:	4b05      	ldr	r3, [pc, #20]	@ (8006a20 <vTaskInternalSetTimeOutState+0x28>)
 8006a0a:	681a      	ldr	r2, [r3, #0]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	605a      	str	r2, [r3, #4]
}
 8006a10:	bf00      	nop
 8006a12:	370c      	adds	r7, #12
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr
 8006a1c:	20000364 	.word	0x20000364
 8006a20:	20000350 	.word	0x20000350

08006a24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b088      	sub	sp, #32
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	613b      	str	r3, [r7, #16]
    }
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d10b      	bne.n	8006a6a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8006a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a56:	f383 8811 	msr	BASEPRI, r3
 8006a5a:	f3bf 8f6f 	isb	sy
 8006a5e:	f3bf 8f4f 	dsb	sy
 8006a62:	60fb      	str	r3, [r7, #12]
    }
 8006a64:	bf00      	nop
 8006a66:	bf00      	nop
 8006a68:	e7fd      	b.n	8006a66 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8006a6a:	f001 f93f 	bl	8007cec <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006a6e:	4b1f      	ldr	r3, [pc, #124]	@ (8006aec <xTaskCheckForTimeOut+0xc8>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	1ad3      	subs	r3, r2, r3
 8006a7c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a86:	d102      	bne.n	8006a8e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	61fb      	str	r3, [r7, #28]
 8006a8c:	e026      	b.n	8006adc <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681a      	ldr	r2, [r3, #0]
 8006a92:	4b17      	ldr	r3, [pc, #92]	@ (8006af0 <xTaskCheckForTimeOut+0xcc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	429a      	cmp	r2, r3
 8006a98:	d00a      	beq.n	8006ab0 <xTaskCheckForTimeOut+0x8c>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	69ba      	ldr	r2, [r7, #24]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d305      	bcc.n	8006ab0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
 8006aae:	e015      	b.n	8006adc <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d20b      	bcs.n	8006ad2 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	1ad2      	subs	r2, r2, r3
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff ff96 	bl	80069f8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006acc:	2300      	movs	r3, #0
 8006ace:	61fb      	str	r3, [r7, #28]
 8006ad0:	e004      	b.n	8006adc <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006adc:	f001 f938 	bl	8007d50 <vPortExitCritical>

    return xReturn;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
}
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	3720      	adds	r7, #32
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}
 8006aea:	bf00      	nop
 8006aec:	20000350 	.word	0x20000350
 8006af0:	20000364 	.word	0x20000364

08006af4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006af4:	b480      	push	{r7}
 8006af6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006af8:	4b03      	ldr	r3, [pc, #12]	@ (8006b08 <vTaskMissedYield+0x14>)
 8006afa:	2201      	movs	r2, #1
 8006afc:	601a      	str	r2, [r3, #0]
}
 8006afe:	bf00      	nop
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr
 8006b08:	20000360 	.word	0x20000360

08006b0c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006b14:	f000 f852 	bl	8006bbc <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006b18:	4b06      	ldr	r3, [pc, #24]	@ (8006b34 <prvIdleTask+0x28>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d9f9      	bls.n	8006b14 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006b20:	4b05      	ldr	r3, [pc, #20]	@ (8006b38 <prvIdleTask+0x2c>)
 8006b22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b26:	601a      	str	r2, [r3, #0]
 8006b28:	f3bf 8f4f 	dsb	sy
 8006b2c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006b30:	e7f0      	b.n	8006b14 <prvIdleTask+0x8>
 8006b32:	bf00      	nop
 8006b34:	20000278 	.word	0x20000278
 8006b38:	e000ed04 	.word	0xe000ed04

08006b3c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b42:	2300      	movs	r3, #0
 8006b44:	607b      	str	r3, [r7, #4]
 8006b46:	e00c      	b.n	8006b62 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4a12      	ldr	r2, [pc, #72]	@ (8006b9c <prvInitialiseTaskLists+0x60>)
 8006b54:	4413      	add	r3, r2
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fe fcb2 	bl	80054c0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	607b      	str	r3, [r7, #4]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d9ef      	bls.n	8006b48 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006b68:	480d      	ldr	r0, [pc, #52]	@ (8006ba0 <prvInitialiseTaskLists+0x64>)
 8006b6a:	f7fe fca9 	bl	80054c0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006b6e:	480d      	ldr	r0, [pc, #52]	@ (8006ba4 <prvInitialiseTaskLists+0x68>)
 8006b70:	f7fe fca6 	bl	80054c0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006b74:	480c      	ldr	r0, [pc, #48]	@ (8006ba8 <prvInitialiseTaskLists+0x6c>)
 8006b76:	f7fe fca3 	bl	80054c0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006b7a:	480c      	ldr	r0, [pc, #48]	@ (8006bac <prvInitialiseTaskLists+0x70>)
 8006b7c:	f7fe fca0 	bl	80054c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006b80:	480b      	ldr	r0, [pc, #44]	@ (8006bb0 <prvInitialiseTaskLists+0x74>)
 8006b82:	f7fe fc9d 	bl	80054c0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006b86:	4b0b      	ldr	r3, [pc, #44]	@ (8006bb4 <prvInitialiseTaskLists+0x78>)
 8006b88:	4a05      	ldr	r2, [pc, #20]	@ (8006ba0 <prvInitialiseTaskLists+0x64>)
 8006b8a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb8 <prvInitialiseTaskLists+0x7c>)
 8006b8e:	4a05      	ldr	r2, [pc, #20]	@ (8006ba4 <prvInitialiseTaskLists+0x68>)
 8006b90:	601a      	str	r2, [r3, #0]
}
 8006b92:	bf00      	nop
 8006b94:	3708      	adds	r7, #8
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}
 8006b9a:	bf00      	nop
 8006b9c:	20000278 	.word	0x20000278
 8006ba0:	200002dc 	.word	0x200002dc
 8006ba4:	200002f0 	.word	0x200002f0
 8006ba8:	2000030c 	.word	0x2000030c
 8006bac:	20000320 	.word	0x20000320
 8006bb0:	20000338 	.word	0x20000338
 8006bb4:	20000304 	.word	0x20000304
 8006bb8:	20000308 	.word	0x20000308

08006bbc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bc2:	e019      	b.n	8006bf8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006bc4:	f001 f892 	bl	8007cec <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc8:	4b10      	ldr	r3, [pc, #64]	@ (8006c0c <prvCheckTasksWaitingTermination+0x50>)
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f7fe fcfd 	bl	80055d4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <prvCheckTasksWaitingTermination+0x54>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	4a0b      	ldr	r2, [pc, #44]	@ (8006c10 <prvCheckTasksWaitingTermination+0x54>)
 8006be2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006be4:	4b0b      	ldr	r3, [pc, #44]	@ (8006c14 <prvCheckTasksWaitingTermination+0x58>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3b01      	subs	r3, #1
 8006bea:	4a0a      	ldr	r2, [pc, #40]	@ (8006c14 <prvCheckTasksWaitingTermination+0x58>)
 8006bec:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006bee:	f001 f8af 	bl	8007d50 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 f810 	bl	8006c18 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006bf8:	4b06      	ldr	r3, [pc, #24]	@ (8006c14 <prvCheckTasksWaitingTermination+0x58>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e1      	bne.n	8006bc4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	3708      	adds	r7, #8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	20000320 	.word	0x20000320
 8006c10:	2000034c 	.word	0x2000034c
 8006c14:	20000334 	.word	0x20000334

08006c18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c24:	4618      	mov	r0, r3
 8006c26:	f001 fa6d 	bl	8008104 <vPortFree>
                vPortFree( pxTCB );
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f001 fa6a 	bl	8008104 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006c68 <prvResetNextTaskUnblockTime+0x30>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d104      	bne.n	8006c50 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006c46:	4b09      	ldr	r3, [pc, #36]	@ (8006c6c <prvResetNextTaskUnblockTime+0x34>)
 8006c48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c4c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006c4e:	e005      	b.n	8006c5c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006c50:	4b05      	ldr	r3, [pc, #20]	@ (8006c68 <prvResetNextTaskUnblockTime+0x30>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a04      	ldr	r2, [pc, #16]	@ (8006c6c <prvResetNextTaskUnblockTime+0x34>)
 8006c5a:	6013      	str	r3, [r2, #0]
}
 8006c5c:	bf00      	nop
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20000304 	.word	0x20000304
 8006c6c:	2000036c 	.word	0x2000036c

08006c70 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006c76:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <xTaskGetSchedulerState+0x34>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d102      	bne.n	8006c84 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	607b      	str	r3, [r7, #4]
 8006c82:	e008      	b.n	8006c96 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c84:	4b08      	ldr	r3, [pc, #32]	@ (8006ca8 <xTaskGetSchedulerState+0x38>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d102      	bne.n	8006c92 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006c8c:	2302      	movs	r3, #2
 8006c8e:	607b      	str	r3, [r7, #4]
 8006c90:	e001      	b.n	8006c96 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006c92:	2300      	movs	r3, #0
 8006c94:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006c96:	687b      	ldr	r3, [r7, #4]
    }
 8006c98:	4618      	mov	r0, r3
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr
 8006ca4:	20000358 	.word	0x20000358
 8006ca8:	20000374 	.word	0x20000374

08006cac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d065      	beq.n	8006d8e <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006cc2:	4b35      	ldr	r3, [pc, #212]	@ (8006d98 <xTaskPriorityDisinherit+0xec>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	693a      	ldr	r2, [r7, #16]
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d00b      	beq.n	8006ce4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8006ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd0:	f383 8811 	msr	BASEPRI, r3
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	60fb      	str	r3, [r7, #12]
    }
 8006cde:	bf00      	nop
 8006ce0:	bf00      	nop
 8006ce2:	e7fd      	b.n	8006ce0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10b      	bne.n	8006d04 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	60bb      	str	r3, [r7, #8]
    }
 8006cfe:	bf00      	nop
 8006d00:	bf00      	nop
 8006d02:	e7fd      	b.n	8006d00 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d08:	1e5a      	subs	r2, r3, #1
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d039      	beq.n	8006d8e <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d135      	bne.n	8006d8e <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	3304      	adds	r3, #4
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fc54 	bl	80055d4 <uxListRemove>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d10a      	bne.n	8006d48 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d36:	2201      	movs	r2, #1
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	43da      	mvns	r2, r3
 8006d3e:	4b17      	ldr	r3, [pc, #92]	@ (8006d9c <xTaskPriorityDisinherit+0xf0>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4013      	ands	r3, r2
 8006d44:	4a15      	ldr	r2, [pc, #84]	@ (8006d9c <xTaskPriorityDisinherit+0xf0>)
 8006d46:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d54:	f1c3 0205 	rsb	r2, r3, #5
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d60:	2201      	movs	r2, #1
 8006d62:	409a      	lsls	r2, r3
 8006d64:	4b0d      	ldr	r3, [pc, #52]	@ (8006d9c <xTaskPriorityDisinherit+0xf0>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8006d9c <xTaskPriorityDisinherit+0xf0>)
 8006d6c:	6013      	str	r3, [r2, #0]
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d72:	4613      	mov	r3, r2
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	4413      	add	r3, r2
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	4a09      	ldr	r2, [pc, #36]	@ (8006da0 <xTaskPriorityDisinherit+0xf4>)
 8006d7c:	441a      	add	r2, r3
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	3304      	adds	r3, #4
 8006d82:	4619      	mov	r1, r3
 8006d84:	4610      	mov	r0, r2
 8006d86:	f7fe fbc8 	bl	800551a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006d8e:	697b      	ldr	r3, [r7, #20]
    }
 8006d90:	4618      	mov	r0, r3
 8006d92:	3718      	adds	r7, #24
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	20000274 	.word	0x20000274
 8006d9c:	20000354 	.word	0x20000354
 8006da0:	20000278 	.word	0x20000278

08006da4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b086      	sub	sp, #24
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00b      	beq.n	8006dd0 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	613b      	str	r3, [r7, #16]
    }
 8006dca:	bf00      	nop
 8006dcc:	bf00      	nop
 8006dce:	e7fd      	b.n	8006dcc <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006dd0:	f000 ff8c 	bl	8007cec <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006dd4:	4b31      	ldr	r3, [pc, #196]	@ (8006e9c <xTaskGenericNotifyWait+0xf8>)
 8006dd6:	681a      	ldr	r2, [r3, #0]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	4413      	add	r3, r2
 8006ddc:	3354      	adds	r3, #84	@ 0x54
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d022      	beq.n	8006e2c <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006de6:	4b2d      	ldr	r3, [pc, #180]	@ (8006e9c <xTaskGenericNotifyWait+0xf8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	3214      	adds	r2, #20
 8006dee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	43d2      	mvns	r2, r2
 8006df6:	4011      	ands	r1, r2
 8006df8:	68fa      	ldr	r2, [r7, #12]
 8006dfa:	3214      	adds	r2, #20
 8006dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006e00:	4b26      	ldr	r3, [pc, #152]	@ (8006e9c <xTaskGenericNotifyWait+0xf8>)
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	3354      	adds	r3, #84	@ 0x54
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00b      	beq.n	8006e2c <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e14:	2101      	movs	r1, #1
 8006e16:	6a38      	ldr	r0, [r7, #32]
 8006e18:	f000 fa2e 	bl	8007278 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006e1c:	4b20      	ldr	r3, [pc, #128]	@ (8006ea0 <xTaskGenericNotifyWait+0xfc>)
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006e2c:	f000 ff90 	bl	8007d50 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006e30:	f000 ff5c 	bl	8007cec <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d007      	beq.n	8006e4a <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006e3a:	4b18      	ldr	r3, [pc, #96]	@ (8006e9c <xTaskGenericNotifyWait+0xf8>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68fa      	ldr	r2, [r7, #12]
 8006e40:	3214      	adds	r2, #20
 8006e42:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006e4a:	4b14      	ldr	r3, [pc, #80]	@ (8006e9c <xTaskGenericNotifyWait+0xf8>)
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	3354      	adds	r3, #84	@ 0x54
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d002      	beq.n	8006e62 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	617b      	str	r3, [r7, #20]
 8006e60:	e00e      	b.n	8006e80 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006e62:	4b0e      	ldr	r3, [pc, #56]	@ (8006e9c <xTaskGenericNotifyWait+0xf8>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	3214      	adds	r2, #20
 8006e6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	43d2      	mvns	r2, r2
 8006e72:	4011      	ands	r1, r2
 8006e74:	68fa      	ldr	r2, [r7, #12]
 8006e76:	3214      	adds	r2, #20
 8006e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006e7c:	2301      	movs	r3, #1
 8006e7e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006e80:	4b06      	ldr	r3, [pc, #24]	@ (8006e9c <xTaskGenericNotifyWait+0xf8>)
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4413      	add	r3, r2
 8006e88:	3354      	adds	r3, #84	@ 0x54
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006e8e:	f000 ff5f 	bl	8007d50 <vPortExitCritical>

        return xReturn;
 8006e92:	697b      	ldr	r3, [r7, #20]
    }
 8006e94:	4618      	mov	r0, r3
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}
 8006e9c:	20000274 	.word	0x20000274
 8006ea0:	e000ed04 	.word	0xe000ed04

08006ea4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08c      	sub	sp, #48	@ 0x30
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
 8006eb0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00b      	beq.n	8006ed4 <xTaskGenericNotify+0x30>
        __asm volatile
 8006ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec0:	f383 8811 	msr	BASEPRI, r3
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	f3bf 8f4f 	dsb	sy
 8006ecc:	623b      	str	r3, [r7, #32]
    }
 8006ece:	bf00      	nop
 8006ed0:	bf00      	nop
 8006ed2:	e7fd      	b.n	8006ed0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d10b      	bne.n	8006ef2 <xTaskGenericNotify+0x4e>
        __asm volatile
 8006eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ede:	f383 8811 	msr	BASEPRI, r3
 8006ee2:	f3bf 8f6f 	isb	sy
 8006ee6:	f3bf 8f4f 	dsb	sy
 8006eea:	61fb      	str	r3, [r7, #28]
    }
 8006eec:	bf00      	nop
 8006eee:	bf00      	nop
 8006ef0:	e7fd      	b.n	8006eee <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 8006ef6:	f000 fef9 	bl	8007cec <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8006efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d006      	beq.n	8006f0e <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	3214      	adds	r2, #20
 8006f06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006f0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4413      	add	r3, r2
 8006f14:	3354      	adds	r3, #84	@ 0x54
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006f1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	4413      	add	r3, r2
 8006f22:	3354      	adds	r3, #84	@ 0x54
 8006f24:	2202      	movs	r2, #2
 8006f26:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	2b04      	cmp	r3, #4
 8006f2c:	d83b      	bhi.n	8006fa6 <xTaskGenericNotify+0x102>
 8006f2e:	a201      	add	r2, pc, #4	@ (adr r2, 8006f34 <xTaskGenericNotify+0x90>)
 8006f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f34:	08006fc7 	.word	0x08006fc7
 8006f38:	08006f49 	.word	0x08006f49
 8006f3c:	08006f65 	.word	0x08006f65
 8006f40:	08006f7d 	.word	0x08006f7d
 8006f44:	08006f8b 	.word	0x08006f8b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	3214      	adds	r2, #20
 8006f4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	ea42 0103 	orr.w	r1, r2, r3
 8006f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5a:	68ba      	ldr	r2, [r7, #8]
 8006f5c:	3214      	adds	r2, #20
 8006f5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006f62:	e033      	b.n	8006fcc <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f66:	68ba      	ldr	r2, [r7, #8]
 8006f68:	3214      	adds	r2, #20
 8006f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f6e:	1c59      	adds	r1, r3, #1
 8006f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	3214      	adds	r2, #20
 8006f76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006f7a:	e027      	b.n	8006fcc <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	3214      	adds	r2, #20
 8006f82:	6879      	ldr	r1, [r7, #4]
 8006f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006f88:	e020      	b.n	8006fcc <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d006      	beq.n	8006fa0 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	3214      	adds	r2, #20
 8006f98:	6879      	ldr	r1, [r7, #4]
 8006f9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006f9e:	e015      	b.n	8006fcc <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8006fa4:	e012      	b.n	8006fcc <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006fa6:	4b2c      	ldr	r3, [pc, #176]	@ (8007058 <xTaskGenericNotify+0x1b4>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00d      	beq.n	8006fca <xTaskGenericNotify+0x126>
        __asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb2:	f383 8811 	msr	BASEPRI, r3
 8006fb6:	f3bf 8f6f 	isb	sy
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	61bb      	str	r3, [r7, #24]
    }
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	e7fd      	b.n	8006fc2 <xTaskGenericNotify+0x11e>
                    break;
 8006fc6:	bf00      	nop
 8006fc8:	e000      	b.n	8006fcc <xTaskGenericNotify+0x128>

                    break;
 8006fca:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d13a      	bne.n	800704a <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd6:	3304      	adds	r3, #4
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f7fe fafb 	bl	80055d4 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	409a      	lsls	r2, r3
 8006fe6:	4b1d      	ldr	r3, [pc, #116]	@ (800705c <xTaskGenericNotify+0x1b8>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	4a1b      	ldr	r2, [pc, #108]	@ (800705c <xTaskGenericNotify+0x1b8>)
 8006fee:	6013      	str	r3, [r2, #0]
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff4:	4613      	mov	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	4413      	add	r3, r2
 8006ffa:	009b      	lsls	r3, r3, #2
 8006ffc:	4a18      	ldr	r2, [pc, #96]	@ (8007060 <xTaskGenericNotify+0x1bc>)
 8006ffe:	441a      	add	r2, r3
 8007000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007002:	3304      	adds	r3, #4
 8007004:	4619      	mov	r1, r3
 8007006:	4610      	mov	r0, r2
 8007008:	f7fe fa87 	bl	800551a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800700c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800700e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <xTaskGenericNotify+0x188>
        __asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	617b      	str	r3, [r7, #20]
    }
 8007026:	bf00      	nop
 8007028:	bf00      	nop
 800702a:	e7fd      	b.n	8007028 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800702c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007030:	4b0c      	ldr	r3, [pc, #48]	@ (8007064 <xTaskGenericNotify+0x1c0>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007036:	429a      	cmp	r2, r3
 8007038:	d907      	bls.n	800704a <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800703a:	4b0b      	ldr	r3, [pc, #44]	@ (8007068 <xTaskGenericNotify+0x1c4>)
 800703c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007040:	601a      	str	r2, [r3, #0]
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800704a:	f000 fe81 	bl	8007d50 <vPortExitCritical>

        return xReturn;
 800704e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8007050:	4618      	mov	r0, r3
 8007052:	3730      	adds	r7, #48	@ 0x30
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000350 	.word	0x20000350
 800705c:	20000354 	.word	0x20000354
 8007060:	20000278 	.word	0x20000278
 8007064:	20000274 	.word	0x20000274
 8007068:	e000ed04 	.word	0xe000ed04

0800706c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800706c:	b580      	push	{r7, lr}
 800706e:	b090      	sub	sp, #64	@ 0x40
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800707a:	2301      	movs	r3, #1
 800707c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d10b      	bne.n	800709c <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8007084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007088:	f383 8811 	msr	BASEPRI, r3
 800708c:	f3bf 8f6f 	isb	sy
 8007090:	f3bf 8f4f 	dsb	sy
 8007094:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8007096:	bf00      	nop
 8007098:	bf00      	nop
 800709a:	e7fd      	b.n	8007098 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00b      	beq.n	80070ba <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80070b4:	bf00      	nop
 80070b6:	bf00      	nop
 80070b8:	e7fd      	b.n	80070b6 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070ba:	f000 feff 	bl	8007ebc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 80070c2:	f3ef 8211 	mrs	r2, BASEPRI
 80070c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ca:	f383 8811 	msr	BASEPRI, r3
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f3bf 8f4f 	dsb	sy
 80070d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80070d8:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070dc:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 80070de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d006      	beq.n	80070f2 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80070e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	3214      	adds	r2, #20
 80070ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80070f0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80070f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	4413      	add	r3, r2
 80070f8:	3354      	adds	r3, #84	@ 0x54
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007100:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4413      	add	r3, r2
 8007106:	3354      	adds	r3, #84	@ 0x54
 8007108:	2202      	movs	r2, #2
 800710a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	2b04      	cmp	r3, #4
 8007110:	d83b      	bhi.n	800718a <xTaskGenericNotifyFromISR+0x11e>
 8007112:	a201      	add	r2, pc, #4	@ (adr r2, 8007118 <xTaskGenericNotifyFromISR+0xac>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	080071ab 	.word	0x080071ab
 800711c:	0800712d 	.word	0x0800712d
 8007120:	08007149 	.word	0x08007149
 8007124:	08007161 	.word	0x08007161
 8007128:	0800716f 	.word	0x0800716f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800712c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	3214      	adds	r2, #20
 8007132:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	ea42 0103 	orr.w	r1, r2, r3
 800713c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713e:	68ba      	ldr	r2, [r7, #8]
 8007140:	3214      	adds	r2, #20
 8007142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007146:	e033      	b.n	80071b0 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	3214      	adds	r2, #20
 800714e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007152:	1c59      	adds	r1, r3, #1
 8007154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	3214      	adds	r2, #20
 800715a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800715e:	e027      	b.n	80071b0 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	3214      	adds	r2, #20
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800716c:	e020      	b.n	80071b0 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800716e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007172:	2b02      	cmp	r3, #2
 8007174:	d006      	beq.n	8007184 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	3214      	adds	r2, #20
 800717c:	6879      	ldr	r1, [r7, #4]
 800717e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8007182:	e015      	b.n	80071b0 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8007184:	2300      	movs	r3, #0
 8007186:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 8007188:	e012      	b.n	80071b0 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800718a:	4b34      	ldr	r3, [pc, #208]	@ (800725c <xTaskGenericNotifyFromISR+0x1f0>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00d      	beq.n	80071ae <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	61fb      	str	r3, [r7, #28]
    }
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop
 80071a8:	e7fd      	b.n	80071a6 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 80071aa:	bf00      	nop
 80071ac:	e000      	b.n	80071b0 <xTaskGenericNotifyFromISR+0x144>
                    break;
 80071ae:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80071b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d146      	bne.n	8007246 <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80071b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d00b      	beq.n	80071d8 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 80071c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c4:	f383 8811 	msr	BASEPRI, r3
 80071c8:	f3bf 8f6f 	isb	sy
 80071cc:	f3bf 8f4f 	dsb	sy
 80071d0:	61bb      	str	r3, [r7, #24]
    }
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	e7fd      	b.n	80071d4 <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80071d8:	4b21      	ldr	r3, [pc, #132]	@ (8007260 <xTaskGenericNotifyFromISR+0x1f4>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d11c      	bne.n	800721a <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071e2:	3304      	adds	r3, #4
 80071e4:	4618      	mov	r0, r3
 80071e6:	f7fe f9f5 	bl	80055d4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80071ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ee:	2201      	movs	r2, #1
 80071f0:	409a      	lsls	r2, r3
 80071f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007264 <xTaskGenericNotifyFromISR+0x1f8>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	4a1a      	ldr	r2, [pc, #104]	@ (8007264 <xTaskGenericNotifyFromISR+0x1f8>)
 80071fa:	6013      	str	r3, [r2, #0]
 80071fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4a17      	ldr	r2, [pc, #92]	@ (8007268 <xTaskGenericNotifyFromISR+0x1fc>)
 800720a:	441a      	add	r2, r3
 800720c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800720e:	3304      	adds	r3, #4
 8007210:	4619      	mov	r1, r3
 8007212:	4610      	mov	r0, r2
 8007214:	f7fe f981 	bl	800551a <vListInsertEnd>
 8007218:	e005      	b.n	8007226 <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800721a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800721c:	3318      	adds	r3, #24
 800721e:	4619      	mov	r1, r3
 8007220:	4812      	ldr	r0, [pc, #72]	@ (800726c <xTaskGenericNotifyFromISR+0x200>)
 8007222:	f7fe f97a 	bl	800551a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800722a:	4b11      	ldr	r3, [pc, #68]	@ (8007270 <xTaskGenericNotifyFromISR+0x204>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007230:	429a      	cmp	r2, r3
 8007232:	d908      	bls.n	8007246 <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8007234:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007236:	2b00      	cmp	r3, #0
 8007238:	d002      	beq.n	8007240 <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800723a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800723c:	2201      	movs	r2, #1
 800723e:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007240:	4b0c      	ldr	r3, [pc, #48]	@ (8007274 <xTaskGenericNotifyFromISR+0x208>)
 8007242:	2201      	movs	r2, #1
 8007244:	601a      	str	r2, [r3, #0]
 8007246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007248:	617b      	str	r3, [r7, #20]
        __asm volatile
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f383 8811 	msr	BASEPRI, r3
    }
 8007250:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8007252:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8007254:	4618      	mov	r0, r3
 8007256:	3740      	adds	r7, #64	@ 0x40
 8007258:	46bd      	mov	sp, r7
 800725a:	bd80      	pop	{r7, pc}
 800725c:	20000350 	.word	0x20000350
 8007260:	20000374 	.word	0x20000374
 8007264:	20000354 	.word	0x20000354
 8007268:	20000278 	.word	0x20000278
 800726c:	2000030c 	.word	0x2000030c
 8007270:	20000274 	.word	0x20000274
 8007274:	20000360 	.word	0x20000360

08007278 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b084      	sub	sp, #16
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8007282:	4b29      	ldr	r3, [pc, #164]	@ (8007328 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007288:	4b28      	ldr	r3, [pc, #160]	@ (800732c <prvAddCurrentTaskToDelayedList+0xb4>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3304      	adds	r3, #4
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe f9a0 	bl	80055d4 <uxListRemove>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10b      	bne.n	80072b2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800729a:	4b24      	ldr	r3, [pc, #144]	@ (800732c <prvAddCurrentTaskToDelayedList+0xb4>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072a0:	2201      	movs	r2, #1
 80072a2:	fa02 f303 	lsl.w	r3, r2, r3
 80072a6:	43da      	mvns	r2, r3
 80072a8:	4b21      	ldr	r3, [pc, #132]	@ (8007330 <prvAddCurrentTaskToDelayedList+0xb8>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4013      	ands	r3, r2
 80072ae:	4a20      	ldr	r2, [pc, #128]	@ (8007330 <prvAddCurrentTaskToDelayedList+0xb8>)
 80072b0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072b8:	d10a      	bne.n	80072d0 <prvAddCurrentTaskToDelayedList+0x58>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d007      	beq.n	80072d0 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072c0:	4b1a      	ldr	r3, [pc, #104]	@ (800732c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3304      	adds	r3, #4
 80072c6:	4619      	mov	r1, r3
 80072c8:	481a      	ldr	r0, [pc, #104]	@ (8007334 <prvAddCurrentTaskToDelayedList+0xbc>)
 80072ca:	f7fe f926 	bl	800551a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80072ce:	e026      	b.n	800731e <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4413      	add	r3, r2
 80072d6:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80072d8:	4b14      	ldr	r3, [pc, #80]	@ (800732c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	68ba      	ldr	r2, [r7, #8]
 80072de:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80072e0:	68ba      	ldr	r2, [r7, #8]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d209      	bcs.n	80072fc <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072e8:	4b13      	ldr	r3, [pc, #76]	@ (8007338 <prvAddCurrentTaskToDelayedList+0xc0>)
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	4b0f      	ldr	r3, [pc, #60]	@ (800732c <prvAddCurrentTaskToDelayedList+0xb4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	3304      	adds	r3, #4
 80072f2:	4619      	mov	r1, r3
 80072f4:	4610      	mov	r0, r2
 80072f6:	f7fe f934 	bl	8005562 <vListInsert>
}
 80072fa:	e010      	b.n	800731e <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80072fc:	4b0f      	ldr	r3, [pc, #60]	@ (800733c <prvAddCurrentTaskToDelayedList+0xc4>)
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	4b0a      	ldr	r3, [pc, #40]	@ (800732c <prvAddCurrentTaskToDelayedList+0xb4>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3304      	adds	r3, #4
 8007306:	4619      	mov	r1, r3
 8007308:	4610      	mov	r0, r2
 800730a:	f7fe f92a 	bl	8005562 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800730e:	4b0c      	ldr	r3, [pc, #48]	@ (8007340 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68ba      	ldr	r2, [r7, #8]
 8007314:	429a      	cmp	r2, r3
 8007316:	d202      	bcs.n	800731e <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8007318:	4a09      	ldr	r2, [pc, #36]	@ (8007340 <prvAddCurrentTaskToDelayedList+0xc8>)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	6013      	str	r3, [r2, #0]
}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}
 8007326:	bf00      	nop
 8007328:	20000350 	.word	0x20000350
 800732c:	20000274 	.word	0x20000274
 8007330:	20000354 	.word	0x20000354
 8007334:	20000338 	.word	0x20000338
 8007338:	20000308 	.word	0x20000308
 800733c:	20000304 	.word	0x20000304
 8007340:	2000036c 	.word	0x2000036c

08007344 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800734a:	2300      	movs	r3, #0
 800734c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800734e:	f000 fb3f 	bl	80079d0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8007352:	4b12      	ldr	r3, [pc, #72]	@ (800739c <xTimerCreateTimerTask+0x58>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00b      	beq.n	8007372 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800735a:	4b11      	ldr	r3, [pc, #68]	@ (80073a0 <xTimerCreateTimerTask+0x5c>)
 800735c:	9301      	str	r3, [sp, #4]
 800735e:	2302      	movs	r3, #2
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	2300      	movs	r3, #0
 8007364:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8007368:	490e      	ldr	r1, [pc, #56]	@ (80073a4 <xTimerCreateTimerTask+0x60>)
 800736a:	480f      	ldr	r0, [pc, #60]	@ (80073a8 <xTimerCreateTimerTask+0x64>)
 800736c:	f7fe ff24 	bl	80061b8 <xTaskCreate>
 8007370:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10b      	bne.n	8007390 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	603b      	str	r3, [r7, #0]
    }
 800738a:	bf00      	nop
 800738c:	bf00      	nop
 800738e:	e7fd      	b.n	800738c <xTimerCreateTimerTask+0x48>
        return xReturn;
 8007390:	687b      	ldr	r3, [r7, #4]
    }
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
 800739a:	bf00      	nop
 800739c:	200003a8 	.word	0x200003a8
 80073a0:	200003ac 	.word	0x200003ac
 80073a4:	08009334 	.word	0x08009334
 80073a8:	080075a1 	.word	0x080075a1

080073ac <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b088      	sub	sp, #32
 80073b0:	af02      	add	r7, sp, #8
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
 80073b8:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80073ba:	202c      	movs	r0, #44	@ 0x2c
 80073bc:	f000 fdc0 	bl	8007f40 <pvPortMalloc>
 80073c0:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00d      	beq.n	80073e4 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	9301      	str	r3, [sp, #4]
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	68b9      	ldr	r1, [r7, #8]
 80073de:	68f8      	ldr	r0, [r7, #12]
 80073e0:	f000 f805 	bl	80073ee <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 80073e4:	697b      	ldr	r3, [r7, #20]
        }
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b086      	sub	sp, #24
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	60f8      	str	r0, [r7, #12]
 80073f6:	60b9      	str	r1, [r7, #8]
 80073f8:	607a      	str	r2, [r7, #4]
 80073fa:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80073fc:	68bb      	ldr	r3, [r7, #8]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d10b      	bne.n	800741a <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	617b      	str	r3, [r7, #20]
    }
 8007414:	bf00      	nop
 8007416:	bf00      	nop
 8007418:	e7fd      	b.n	8007416 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800741a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741c:	2b00      	cmp	r3, #0
 800741e:	d01e      	beq.n	800745e <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8007420:	f000 fad6 	bl	80079d0 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8007424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800742a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007438:	6a3a      	ldr	r2, [r7, #32]
 800743a:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800743c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800743e:	3304      	adds	r3, #4
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe f85d 	bl	8005500 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800744c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800744e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007452:	f043 0304 	orr.w	r3, r3, #4
 8007456:	b2da      	uxtb	r2, r3
 8007458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800745a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800745e:	bf00      	nop
 8007460:	3718      	adds	r7, #24
 8007462:	46bd      	mov	sp, r7
 8007464:	bd80      	pop	{r7, pc}
	...

08007468 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	@ 0x28
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	607a      	str	r2, [r7, #4]
 8007474:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8007476:	2300      	movs	r3, #0
 8007478:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d10b      	bne.n	8007498 <xTimerGenericCommand+0x30>
        __asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	623b      	str	r3, [r7, #32]
    }
 8007492:	bf00      	nop
 8007494:	bf00      	nop
 8007496:	e7fd      	b.n	8007494 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8007498:	4b19      	ldr	r3, [pc, #100]	@ (8007500 <xTimerGenericCommand+0x98>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d02a      	beq.n	80074f6 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80074ac:	68bb      	ldr	r3, [r7, #8]
 80074ae:	2b05      	cmp	r3, #5
 80074b0:	dc18      	bgt.n	80074e4 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80074b2:	f7ff fbdd 	bl	8006c70 <xTaskGetSchedulerState>
 80074b6:	4603      	mov	r3, r0
 80074b8:	2b02      	cmp	r3, #2
 80074ba:	d109      	bne.n	80074d0 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80074bc:	4b10      	ldr	r3, [pc, #64]	@ (8007500 <xTimerGenericCommand+0x98>)
 80074be:	6818      	ldr	r0, [r3, #0]
 80074c0:	f107 0114 	add.w	r1, r7, #20
 80074c4:	2300      	movs	r3, #0
 80074c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074c8:	f7fe f99e 	bl	8005808 <xQueueGenericSend>
 80074cc:	6278      	str	r0, [r7, #36]	@ 0x24
 80074ce:	e012      	b.n	80074f6 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80074d0:	4b0b      	ldr	r3, [pc, #44]	@ (8007500 <xTimerGenericCommand+0x98>)
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	f107 0114 	add.w	r1, r7, #20
 80074d8:	2300      	movs	r3, #0
 80074da:	2200      	movs	r2, #0
 80074dc:	f7fe f994 	bl	8005808 <xQueueGenericSend>
 80074e0:	6278      	str	r0, [r7, #36]	@ 0x24
 80074e2:	e008      	b.n	80074f6 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80074e4:	4b06      	ldr	r3, [pc, #24]	@ (8007500 <xTimerGenericCommand+0x98>)
 80074e6:	6818      	ldr	r0, [r3, #0]
 80074e8:	f107 0114 	add.w	r1, r7, #20
 80074ec:	2300      	movs	r3, #0
 80074ee:	683a      	ldr	r2, [r7, #0]
 80074f0:	f7fe fa8c 	bl	8005a0c <xQueueGenericSendFromISR>
 80074f4:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80074f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80074f8:	4618      	mov	r0, r3
 80074fa:	3728      	adds	r7, #40	@ 0x28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	200003a8 	.word	0x200003a8

08007504 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af02      	add	r7, sp, #8
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800750e:	4b23      	ldr	r3, [pc, #140]	@ (800759c <prvProcessExpiredTimer+0x98>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	68db      	ldr	r3, [r3, #12]
 8007516:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	3304      	adds	r3, #4
 800751c:	4618      	mov	r0, r3
 800751e:	f7fe f859 	bl	80055d4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d023      	beq.n	8007578 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007530:	697b      	ldr	r3, [r7, #20]
 8007532:	699a      	ldr	r2, [r3, #24]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	18d1      	adds	r1, r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	6978      	ldr	r0, [r7, #20]
 800753e:	f000 f8d5 	bl	80076ec <prvInsertTimerInActiveList>
 8007542:	4603      	mov	r3, r0
 8007544:	2b00      	cmp	r3, #0
 8007546:	d020      	beq.n	800758a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007548:	2300      	movs	r3, #0
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	2300      	movs	r3, #0
 800754e:	687a      	ldr	r2, [r7, #4]
 8007550:	2100      	movs	r1, #0
 8007552:	6978      	ldr	r0, [r7, #20]
 8007554:	f7ff ff88 	bl	8007468 <xTimerGenericCommand>
 8007558:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d114      	bne.n	800758a <prvProcessExpiredTimer+0x86>
        __asm volatile
 8007560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007564:	f383 8811 	msr	BASEPRI, r3
 8007568:	f3bf 8f6f 	isb	sy
 800756c:	f3bf 8f4f 	dsb	sy
 8007570:	60fb      	str	r3, [r7, #12]
    }
 8007572:	bf00      	nop
 8007574:	bf00      	nop
 8007576:	e7fd      	b.n	8007574 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800757e:	f023 0301 	bic.w	r3, r3, #1
 8007582:	b2da      	uxtb	r2, r3
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	6a1b      	ldr	r3, [r3, #32]
 800758e:	6978      	ldr	r0, [r7, #20]
 8007590:	4798      	blx	r3
    }
 8007592:	bf00      	nop
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	200003a0 	.word	0x200003a0

080075a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075a8:	f107 0308 	add.w	r3, r7, #8
 80075ac:	4618      	mov	r0, r3
 80075ae:	f000 f859 	bl	8007664 <prvGetNextExpireTime>
 80075b2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	4619      	mov	r1, r3
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f805 	bl	80075c8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80075be:	f000 f8d7 	bl	8007770 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80075c2:	bf00      	nop
 80075c4:	e7f0      	b.n	80075a8 <prvTimerTask+0x8>
	...

080075c8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
 80075d0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80075d2:	f7fe ff89 	bl	80064e8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80075d6:	f107 0308 	add.w	r3, r7, #8
 80075da:	4618      	mov	r0, r3
 80075dc:	f000 f866 	bl	80076ac <prvSampleTimeNow>
 80075e0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d130      	bne.n	800764a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d10a      	bne.n	8007604 <prvProcessTimerOrBlockTask+0x3c>
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d806      	bhi.n	8007604 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80075f6:	f7fe ff85 	bl	8006504 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80075fa:	68f9      	ldr	r1, [r7, #12]
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff ff81 	bl	8007504 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8007602:	e024      	b.n	800764e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d008      	beq.n	800761c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800760a:	4b13      	ldr	r3, [pc, #76]	@ (8007658 <prvProcessTimerOrBlockTask+0x90>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d101      	bne.n	8007618 <prvProcessTimerOrBlockTask+0x50>
 8007614:	2301      	movs	r3, #1
 8007616:	e000      	b.n	800761a <prvProcessTimerOrBlockTask+0x52>
 8007618:	2300      	movs	r3, #0
 800761a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800761c:	4b0f      	ldr	r3, [pc, #60]	@ (800765c <prvProcessTimerOrBlockTask+0x94>)
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	687a      	ldr	r2, [r7, #4]
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	1ad3      	subs	r3, r2, r3
 8007626:	683a      	ldr	r2, [r7, #0]
 8007628:	4619      	mov	r1, r3
 800762a:	f7fe fd91 	bl	8006150 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800762e:	f7fe ff69 	bl	8006504 <xTaskResumeAll>
 8007632:	4603      	mov	r3, r0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10a      	bne.n	800764e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007638:	4b09      	ldr	r3, [pc, #36]	@ (8007660 <prvProcessTimerOrBlockTask+0x98>)
 800763a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800763e:	601a      	str	r2, [r3, #0]
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	f3bf 8f6f 	isb	sy
    }
 8007648:	e001      	b.n	800764e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800764a:	f7fe ff5b 	bl	8006504 <xTaskResumeAll>
    }
 800764e:	bf00      	nop
 8007650:	3710      	adds	r7, #16
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
 8007656:	bf00      	nop
 8007658:	200003a4 	.word	0x200003a4
 800765c:	200003a8 	.word	0x200003a8
 8007660:	e000ed04 	.word	0xe000ed04

08007664 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007664:	b480      	push	{r7}
 8007666:	b085      	sub	sp, #20
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800766c:	4b0e      	ldr	r3, [pc, #56]	@ (80076a8 <prvGetNextExpireTime+0x44>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d101      	bne.n	800767a <prvGetNextExpireTime+0x16>
 8007676:	2201      	movs	r2, #1
 8007678:	e000      	b.n	800767c <prvGetNextExpireTime+0x18>
 800767a:	2200      	movs	r2, #0
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d105      	bne.n	8007694 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007688:	4b07      	ldr	r3, [pc, #28]	@ (80076a8 <prvGetNextExpireTime+0x44>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	68db      	ldr	r3, [r3, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	e001      	b.n	8007698 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007698:	68fb      	ldr	r3, [r7, #12]
    }
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	200003a0 	.word	0x200003a0

080076ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b084      	sub	sp, #16
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80076b4:	f7fe ffc4 	bl	8006640 <xTaskGetTickCount>
 80076b8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80076ba:	4b0b      	ldr	r3, [pc, #44]	@ (80076e8 <prvSampleTimeNow+0x3c>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d205      	bcs.n	80076d0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80076c4:	f000 f91e 	bl	8007904 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2201      	movs	r2, #1
 80076cc:	601a      	str	r2, [r3, #0]
 80076ce:	e002      	b.n	80076d6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80076d6:	4a04      	ldr	r2, [pc, #16]	@ (80076e8 <prvSampleTimeNow+0x3c>)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80076dc:	68fb      	ldr	r3, [r7, #12]
    }
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	200003b0 	.word	0x200003b0

080076ec <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80076fa:	2300      	movs	r3, #0
 80076fc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	68fa      	ldr	r2, [r7, #12]
 8007708:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800770a:	68ba      	ldr	r2, [r7, #8]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	429a      	cmp	r2, r3
 8007710:	d812      	bhi.n	8007738 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	1ad2      	subs	r2, r2, r3
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	699b      	ldr	r3, [r3, #24]
 800771c:	429a      	cmp	r2, r3
 800771e:	d302      	bcc.n	8007726 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007720:	2301      	movs	r3, #1
 8007722:	617b      	str	r3, [r7, #20]
 8007724:	e01b      	b.n	800775e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007726:	4b10      	ldr	r3, [pc, #64]	@ (8007768 <prvInsertTimerInActiveList+0x7c>)
 8007728:	681a      	ldr	r2, [r3, #0]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	3304      	adds	r3, #4
 800772e:	4619      	mov	r1, r3
 8007730:	4610      	mov	r0, r2
 8007732:	f7fd ff16 	bl	8005562 <vListInsert>
 8007736:	e012      	b.n	800775e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	429a      	cmp	r2, r3
 800773e:	d206      	bcs.n	800774e <prvInsertTimerInActiveList+0x62>
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	429a      	cmp	r2, r3
 8007746:	d302      	bcc.n	800774e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007748:	2301      	movs	r3, #1
 800774a:	617b      	str	r3, [r7, #20]
 800774c:	e007      	b.n	800775e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800774e:	4b07      	ldr	r3, [pc, #28]	@ (800776c <prvInsertTimerInActiveList+0x80>)
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	3304      	adds	r3, #4
 8007756:	4619      	mov	r1, r3
 8007758:	4610      	mov	r0, r2
 800775a:	f7fd ff02 	bl	8005562 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800775e:	697b      	ldr	r3, [r7, #20]
    }
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}
 8007768:	200003a4 	.word	0x200003a4
 800776c:	200003a0 	.word	0x200003a0

08007770 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007770:	b580      	push	{r7, lr}
 8007772:	b08c      	sub	sp, #48	@ 0x30
 8007774:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007776:	e0b2      	b.n	80078de <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2b00      	cmp	r3, #0
 800777c:	f2c0 80af 	blt.w	80078de <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d004      	beq.n	8007796 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778e:	3304      	adds	r3, #4
 8007790:	4618      	mov	r0, r3
 8007792:	f7fd ff1f 	bl	80055d4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007796:	1d3b      	adds	r3, r7, #4
 8007798:	4618      	mov	r0, r3
 800779a:	f7ff ff87 	bl	80076ac <prvSampleTimeNow>
 800779e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	2b09      	cmp	r3, #9
 80077a4:	f200 8098 	bhi.w	80078d8 <prvProcessReceivedCommands+0x168>
 80077a8:	a201      	add	r2, pc, #4	@ (adr r2, 80077b0 <prvProcessReceivedCommands+0x40>)
 80077aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ae:	bf00      	nop
 80077b0:	080077d9 	.word	0x080077d9
 80077b4:	080077d9 	.word	0x080077d9
 80077b8:	080077d9 	.word	0x080077d9
 80077bc:	0800784f 	.word	0x0800784f
 80077c0:	08007863 	.word	0x08007863
 80077c4:	080078af 	.word	0x080078af
 80077c8:	080077d9 	.word	0x080077d9
 80077cc:	080077d9 	.word	0x080077d9
 80077d0:	0800784f 	.word	0x0800784f
 80077d4:	08007863 	.word	0x08007863
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80077ea:	68fa      	ldr	r2, [r7, #12]
 80077ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ee:	699b      	ldr	r3, [r3, #24]
 80077f0:	18d1      	adds	r1, r2, r3
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6a3a      	ldr	r2, [r7, #32]
 80077f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077f8:	f7ff ff78 	bl	80076ec <prvInsertTimerInActiveList>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d06c      	beq.n	80078dc <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007804:	6a1b      	ldr	r3, [r3, #32]
 8007806:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007808:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800780a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800780c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007810:	f003 0304 	and.w	r3, r3, #4
 8007814:	2b00      	cmp	r3, #0
 8007816:	d061      	beq.n	80078dc <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007818:	68fa      	ldr	r2, [r7, #12]
 800781a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	441a      	add	r2, r3
 8007820:	2300      	movs	r3, #0
 8007822:	9300      	str	r3, [sp, #0]
 8007824:	2300      	movs	r3, #0
 8007826:	2100      	movs	r1, #0
 8007828:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800782a:	f7ff fe1d 	bl	8007468 <xTimerGenericCommand>
 800782e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d152      	bne.n	80078dc <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	61bb      	str	r3, [r7, #24]
    }
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	e7fd      	b.n	800784a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800784e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	b2da      	uxtb	r2, r3
 800785a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800785c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007860:	e03d      	b.n	80078de <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007864:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007868:	f043 0301 	orr.w	r3, r3, #1
 800786c:	b2da      	uxtb	r2, r3
 800786e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007870:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007878:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d10b      	bne.n	800789a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8007882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	617b      	str	r3, [r7, #20]
    }
 8007894:	bf00      	nop
 8007896:	bf00      	nop
 8007898:	e7fd      	b.n	8007896 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	699a      	ldr	r2, [r3, #24]
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	18d1      	adds	r1, r2, r3
 80078a2:	6a3b      	ldr	r3, [r7, #32]
 80078a4:	6a3a      	ldr	r2, [r7, #32]
 80078a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078a8:	f7ff ff20 	bl	80076ec <prvInsertTimerInActiveList>
                        break;
 80078ac:	e017      	b.n	80078de <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80078ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d103      	bne.n	80078c4 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80078bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80078be:	f000 fc21 	bl	8008104 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80078c2:	e00c      	b.n	80078de <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078ca:	f023 0301 	bic.w	r3, r3, #1
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80078d6:	e002      	b.n	80078de <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80078d8:	bf00      	nop
 80078da:	e000      	b.n	80078de <prvProcessReceivedCommands+0x16e>
                        break;
 80078dc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078de:	4b08      	ldr	r3, [pc, #32]	@ (8007900 <prvProcessReceivedCommands+0x190>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f107 0108 	add.w	r1, r7, #8
 80078e6:	2200      	movs	r2, #0
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fe f93d 	bl	8005b68 <xQueueReceive>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f47f af41 	bne.w	8007778 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80078f6:	bf00      	nop
 80078f8:	bf00      	nop
 80078fa:	3728      	adds	r7, #40	@ 0x28
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	200003a8 	.word	0x200003a8

08007904 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007904:	b580      	push	{r7, lr}
 8007906:	b088      	sub	sp, #32
 8007908:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800790a:	e049      	b.n	80079a0 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800790c:	4b2e      	ldr	r3, [pc, #184]	@ (80079c8 <prvSwitchTimerLists+0xc4>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007916:	4b2c      	ldr	r3, [pc, #176]	@ (80079c8 <prvSwitchTimerLists+0xc4>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3304      	adds	r3, #4
 8007924:	4618      	mov	r0, r3
 8007926:	f7fd fe55 	bl	80055d4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6a1b      	ldr	r3, [r3, #32]
 800792e:	68f8      	ldr	r0, [r7, #12]
 8007930:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007938:	f003 0304 	and.w	r3, r3, #4
 800793c:	2b00      	cmp	r3, #0
 800793e:	d02f      	beq.n	80079a0 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	4413      	add	r3, r2
 8007948:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	693b      	ldr	r3, [r7, #16]
 800794e:	429a      	cmp	r2, r3
 8007950:	d90e      	bls.n	8007970 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800795e:	4b1a      	ldr	r3, [pc, #104]	@ (80079c8 <prvSwitchTimerLists+0xc4>)
 8007960:	681a      	ldr	r2, [r3, #0]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3304      	adds	r3, #4
 8007966:	4619      	mov	r1, r3
 8007968:	4610      	mov	r0, r2
 800796a:	f7fd fdfa 	bl	8005562 <vListInsert>
 800796e:	e017      	b.n	80079a0 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007970:	2300      	movs	r3, #0
 8007972:	9300      	str	r3, [sp, #0]
 8007974:	2300      	movs	r3, #0
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	2100      	movs	r1, #0
 800797a:	68f8      	ldr	r0, [r7, #12]
 800797c:	f7ff fd74 	bl	8007468 <xTimerGenericCommand>
 8007980:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8007988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798c:	f383 8811 	msr	BASEPRI, r3
 8007990:	f3bf 8f6f 	isb	sy
 8007994:	f3bf 8f4f 	dsb	sy
 8007998:	603b      	str	r3, [r7, #0]
    }
 800799a:	bf00      	nop
 800799c:	bf00      	nop
 800799e:	e7fd      	b.n	800799c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079a0:	4b09      	ldr	r3, [pc, #36]	@ (80079c8 <prvSwitchTimerLists+0xc4>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1b0      	bne.n	800790c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80079aa:	4b07      	ldr	r3, [pc, #28]	@ (80079c8 <prvSwitchTimerLists+0xc4>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80079b0:	4b06      	ldr	r3, [pc, #24]	@ (80079cc <prvSwitchTimerLists+0xc8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a04      	ldr	r2, [pc, #16]	@ (80079c8 <prvSwitchTimerLists+0xc4>)
 80079b6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80079b8:	4a04      	ldr	r2, [pc, #16]	@ (80079cc <prvSwitchTimerLists+0xc8>)
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	6013      	str	r3, [r2, #0]
    }
 80079be:	bf00      	nop
 80079c0:	3718      	adds	r7, #24
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	200003a0 	.word	0x200003a0
 80079cc:	200003a4 	.word	0x200003a4

080079d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80079d0:	b580      	push	{r7, lr}
 80079d2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80079d4:	f000 f98a 	bl	8007cec <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80079d8:	4b12      	ldr	r3, [pc, #72]	@ (8007a24 <prvCheckForValidListAndQueue+0x54>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d11d      	bne.n	8007a1c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80079e0:	4811      	ldr	r0, [pc, #68]	@ (8007a28 <prvCheckForValidListAndQueue+0x58>)
 80079e2:	f7fd fd6d 	bl	80054c0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80079e6:	4811      	ldr	r0, [pc, #68]	@ (8007a2c <prvCheckForValidListAndQueue+0x5c>)
 80079e8:	f7fd fd6a 	bl	80054c0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80079ec:	4b10      	ldr	r3, [pc, #64]	@ (8007a30 <prvCheckForValidListAndQueue+0x60>)
 80079ee:	4a0e      	ldr	r2, [pc, #56]	@ (8007a28 <prvCheckForValidListAndQueue+0x58>)
 80079f0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80079f2:	4b10      	ldr	r3, [pc, #64]	@ (8007a34 <prvCheckForValidListAndQueue+0x64>)
 80079f4:	4a0d      	ldr	r2, [pc, #52]	@ (8007a2c <prvCheckForValidListAndQueue+0x5c>)
 80079f6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80079f8:	2200      	movs	r2, #0
 80079fa:	210c      	movs	r1, #12
 80079fc:	200a      	movs	r0, #10
 80079fe:	f7fd fe7d 	bl	80056fc <xQueueGenericCreate>
 8007a02:	4603      	mov	r3, r0
 8007a04:	4a07      	ldr	r2, [pc, #28]	@ (8007a24 <prvCheckForValidListAndQueue+0x54>)
 8007a06:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007a08:	4b06      	ldr	r3, [pc, #24]	@ (8007a24 <prvCheckForValidListAndQueue+0x54>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007a10:	4b04      	ldr	r3, [pc, #16]	@ (8007a24 <prvCheckForValidListAndQueue+0x54>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4908      	ldr	r1, [pc, #32]	@ (8007a38 <prvCheckForValidListAndQueue+0x68>)
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fb70 	bl	80060fc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007a1c:	f000 f998 	bl	8007d50 <vPortExitCritical>
    }
 8007a20:	bf00      	nop
 8007a22:	bd80      	pop	{r7, pc}
 8007a24:	200003a8 	.word	0x200003a8
 8007a28:	20000378 	.word	0x20000378
 8007a2c:	2000038c 	.word	0x2000038c
 8007a30:	200003a0 	.word	0x200003a0
 8007a34:	200003a4 	.word	0x200003a4
 8007a38:	0800933c 	.word	0x0800933c

08007a3c <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b086      	sub	sp, #24
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10b      	bne.n	8007a66 <pvTimerGetTimerID+0x2a>
        __asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	60fb      	str	r3, [r7, #12]
    }
 8007a60:	bf00      	nop
 8007a62:	bf00      	nop
 8007a64:	e7fd      	b.n	8007a62 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007a66:	f000 f941 	bl	8007cec <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	69db      	ldr	r3, [r3, #28]
 8007a6e:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007a70:	f000 f96e 	bl	8007d50 <vPortExitCritical>

        return pvReturn;
 8007a74:	693b      	ldr	r3, [r7, #16]
    }
 8007a76:	4618      	mov	r0, r3
 8007a78:	3718      	adds	r7, #24
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
	...

08007a80 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007a80:	b480      	push	{r7}
 8007a82:	b085      	sub	sp, #20
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3b04      	subs	r3, #4
 8007a90:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007a98:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	3b04      	subs	r3, #4
 8007a9e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f023 0201 	bic.w	r2, r3, #1
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3b04      	subs	r3, #4
 8007aae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007ab0:	4a0c      	ldr	r2, [pc, #48]	@ (8007ae4 <pxPortInitialiseStack+0x64>)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	3b14      	subs	r3, #20
 8007aba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	3b04      	subs	r3, #4
 8007ac6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f06f 0202 	mvn.w	r2, #2
 8007ace:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	3b20      	subs	r3, #32
 8007ad4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae2:	4770      	bx	lr
 8007ae4:	08007ae9 	.word	0x08007ae9

08007ae8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007aee:	2300      	movs	r3, #0
 8007af0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007af2:	4b13      	ldr	r3, [pc, #76]	@ (8007b40 <prvTaskExitError+0x58>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007afa:	d00b      	beq.n	8007b14 <prvTaskExitError+0x2c>
        __asm volatile
 8007afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b00:	f383 8811 	msr	BASEPRI, r3
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	f3bf 8f4f 	dsb	sy
 8007b0c:	60fb      	str	r3, [r7, #12]
    }
 8007b0e:	bf00      	nop
 8007b10:	bf00      	nop
 8007b12:	e7fd      	b.n	8007b10 <prvTaskExitError+0x28>
        __asm volatile
 8007b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b18:	f383 8811 	msr	BASEPRI, r3
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	f3bf 8f4f 	dsb	sy
 8007b24:	60bb      	str	r3, [r7, #8]
    }
 8007b26:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007b28:	bf00      	nop
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0fc      	beq.n	8007b2a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007b30:	bf00      	nop
 8007b32:	bf00      	nop
 8007b34:	3714      	adds	r7, #20
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr
 8007b3e:	bf00      	nop
 8007b40:	2000006c 	.word	0x2000006c
	...

08007b50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007b50:	4b07      	ldr	r3, [pc, #28]	@ (8007b70 <pxCurrentTCBConst2>)
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	6808      	ldr	r0, [r1, #0]
 8007b56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b5a:	f380 8809 	msr	PSP, r0
 8007b5e:	f3bf 8f6f 	isb	sy
 8007b62:	f04f 0000 	mov.w	r0, #0
 8007b66:	f380 8811 	msr	BASEPRI, r0
 8007b6a:	4770      	bx	lr
 8007b6c:	f3af 8000 	nop.w

08007b70 <pxCurrentTCBConst2>:
 8007b70:	20000274 	.word	0x20000274
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007b74:	bf00      	nop
 8007b76:	bf00      	nop

08007b78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007b78:	4808      	ldr	r0, [pc, #32]	@ (8007b9c <prvPortStartFirstTask+0x24>)
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	6800      	ldr	r0, [r0, #0]
 8007b7e:	f380 8808 	msr	MSP, r0
 8007b82:	f04f 0000 	mov.w	r0, #0
 8007b86:	f380 8814 	msr	CONTROL, r0
 8007b8a:	b662      	cpsie	i
 8007b8c:	b661      	cpsie	f
 8007b8e:	f3bf 8f4f 	dsb	sy
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	df00      	svc	0
 8007b98:	bf00      	nop
 8007b9a:	0000      	.short	0x0000
 8007b9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007ba0:	bf00      	nop
 8007ba2:	bf00      	nop

08007ba4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b086      	sub	sp, #24
 8007ba8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007baa:	4b47      	ldr	r3, [pc, #284]	@ (8007cc8 <xPortStartScheduler+0x124>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a47      	ldr	r2, [pc, #284]	@ (8007ccc <xPortStartScheduler+0x128>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d10b      	bne.n	8007bcc <xPortStartScheduler+0x28>
        __asm volatile
 8007bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bb8:	f383 8811 	msr	BASEPRI, r3
 8007bbc:	f3bf 8f6f 	isb	sy
 8007bc0:	f3bf 8f4f 	dsb	sy
 8007bc4:	613b      	str	r3, [r7, #16]
    }
 8007bc6:	bf00      	nop
 8007bc8:	bf00      	nop
 8007bca:	e7fd      	b.n	8007bc8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007bcc:	4b3e      	ldr	r3, [pc, #248]	@ (8007cc8 <xPortStartScheduler+0x124>)
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	4a3f      	ldr	r2, [pc, #252]	@ (8007cd0 <xPortStartScheduler+0x12c>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d10b      	bne.n	8007bee <xPortStartScheduler+0x4a>
        __asm volatile
 8007bd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bda:	f383 8811 	msr	BASEPRI, r3
 8007bde:	f3bf 8f6f 	isb	sy
 8007be2:	f3bf 8f4f 	dsb	sy
 8007be6:	60fb      	str	r3, [r7, #12]
    }
 8007be8:	bf00      	nop
 8007bea:	bf00      	nop
 8007bec:	e7fd      	b.n	8007bea <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007bee:	4b39      	ldr	r3, [pc, #228]	@ (8007cd4 <xPortStartScheduler+0x130>)
 8007bf0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	b2db      	uxtb	r3, r3
 8007bf8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	22ff      	movs	r2, #255	@ 0xff
 8007bfe:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007c00:	697b      	ldr	r3, [r7, #20]
 8007c02:	781b      	ldrb	r3, [r3, #0]
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007c08:	78fb      	ldrb	r3, [r7, #3]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007c10:	b2da      	uxtb	r2, r3
 8007c12:	4b31      	ldr	r3, [pc, #196]	@ (8007cd8 <xPortStartScheduler+0x134>)
 8007c14:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007c16:	4b31      	ldr	r3, [pc, #196]	@ (8007cdc <xPortStartScheduler+0x138>)
 8007c18:	2207      	movs	r2, #7
 8007c1a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c1c:	e009      	b.n	8007c32 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8007c1e:	4b2f      	ldr	r3, [pc, #188]	@ (8007cdc <xPortStartScheduler+0x138>)
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3b01      	subs	r3, #1
 8007c24:	4a2d      	ldr	r2, [pc, #180]	@ (8007cdc <xPortStartScheduler+0x138>)
 8007c26:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	005b      	lsls	r3, r3, #1
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007c32:	78fb      	ldrb	r3, [r7, #3]
 8007c34:	b2db      	uxtb	r3, r3
 8007c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c3a:	2b80      	cmp	r3, #128	@ 0x80
 8007c3c:	d0ef      	beq.n	8007c1e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007c3e:	4b27      	ldr	r3, [pc, #156]	@ (8007cdc <xPortStartScheduler+0x138>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f1c3 0307 	rsb	r3, r3, #7
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d00b      	beq.n	8007c62 <xPortStartScheduler+0xbe>
        __asm volatile
 8007c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c4e:	f383 8811 	msr	BASEPRI, r3
 8007c52:	f3bf 8f6f 	isb	sy
 8007c56:	f3bf 8f4f 	dsb	sy
 8007c5a:	60bb      	str	r3, [r7, #8]
    }
 8007c5c:	bf00      	nop
 8007c5e:	bf00      	nop
 8007c60:	e7fd      	b.n	8007c5e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c62:	4b1e      	ldr	r3, [pc, #120]	@ (8007cdc <xPortStartScheduler+0x138>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	4a1c      	ldr	r2, [pc, #112]	@ (8007cdc <xPortStartScheduler+0x138>)
 8007c6a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c6c:	4b1b      	ldr	r3, [pc, #108]	@ (8007cdc <xPortStartScheduler+0x138>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007c74:	4a19      	ldr	r2, [pc, #100]	@ (8007cdc <xPortStartScheduler+0x138>)
 8007c76:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	b2da      	uxtb	r2, r3
 8007c7c:	697b      	ldr	r3, [r7, #20]
 8007c7e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007c80:	4b17      	ldr	r3, [pc, #92]	@ (8007ce0 <xPortStartScheduler+0x13c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4a16      	ldr	r2, [pc, #88]	@ (8007ce0 <xPortStartScheduler+0x13c>)
 8007c86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007c8a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007c8c:	4b14      	ldr	r3, [pc, #80]	@ (8007ce0 <xPortStartScheduler+0x13c>)
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	4a13      	ldr	r2, [pc, #76]	@ (8007ce0 <xPortStartScheduler+0x13c>)
 8007c92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007c96:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007c98:	f000 f8e0 	bl	8007e5c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007c9c:	4b11      	ldr	r3, [pc, #68]	@ (8007ce4 <xPortStartScheduler+0x140>)
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007ca2:	f000 f8ff 	bl	8007ea4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007ca6:	4b10      	ldr	r3, [pc, #64]	@ (8007ce8 <xPortStartScheduler+0x144>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a0f      	ldr	r2, [pc, #60]	@ (8007ce8 <xPortStartScheduler+0x144>)
 8007cac:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007cb0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007cb2:	f7ff ff61 	bl	8007b78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007cb6:	f7fe fd8d 	bl	80067d4 <vTaskSwitchContext>
    prvTaskExitError();
 8007cba:	f7ff ff15 	bl	8007ae8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	3718      	adds	r7, #24
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	bd80      	pop	{r7, pc}
 8007cc8:	e000ed00 	.word	0xe000ed00
 8007ccc:	410fc271 	.word	0x410fc271
 8007cd0:	410fc270 	.word	0x410fc270
 8007cd4:	e000e400 	.word	0xe000e400
 8007cd8:	200003b4 	.word	0x200003b4
 8007cdc:	200003b8 	.word	0x200003b8
 8007ce0:	e000ed20 	.word	0xe000ed20
 8007ce4:	2000006c 	.word	0x2000006c
 8007ce8:	e000ef34 	.word	0xe000ef34

08007cec <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
        __asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	607b      	str	r3, [r7, #4]
    }
 8007d04:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007d06:	4b10      	ldr	r3, [pc, #64]	@ (8007d48 <vPortEnterCritical+0x5c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	4a0e      	ldr	r2, [pc, #56]	@ (8007d48 <vPortEnterCritical+0x5c>)
 8007d0e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007d10:	4b0d      	ldr	r3, [pc, #52]	@ (8007d48 <vPortEnterCritical+0x5c>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b01      	cmp	r3, #1
 8007d16:	d110      	bne.n	8007d3a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007d18:	4b0c      	ldr	r3, [pc, #48]	@ (8007d4c <vPortEnterCritical+0x60>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00b      	beq.n	8007d3a <vPortEnterCritical+0x4e>
        __asm volatile
 8007d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d26:	f383 8811 	msr	BASEPRI, r3
 8007d2a:	f3bf 8f6f 	isb	sy
 8007d2e:	f3bf 8f4f 	dsb	sy
 8007d32:	603b      	str	r3, [r7, #0]
    }
 8007d34:	bf00      	nop
 8007d36:	bf00      	nop
 8007d38:	e7fd      	b.n	8007d36 <vPortEnterCritical+0x4a>
    }
}
 8007d3a:	bf00      	nop
 8007d3c:	370c      	adds	r7, #12
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
 8007d46:	bf00      	nop
 8007d48:	2000006c 	.word	0x2000006c
 8007d4c:	e000ed04 	.word	0xe000ed04

08007d50 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007d56:	4b12      	ldr	r3, [pc, #72]	@ (8007da0 <vPortExitCritical+0x50>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d10b      	bne.n	8007d76 <vPortExitCritical+0x26>
        __asm volatile
 8007d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d62:	f383 8811 	msr	BASEPRI, r3
 8007d66:	f3bf 8f6f 	isb	sy
 8007d6a:	f3bf 8f4f 	dsb	sy
 8007d6e:	607b      	str	r3, [r7, #4]
    }
 8007d70:	bf00      	nop
 8007d72:	bf00      	nop
 8007d74:	e7fd      	b.n	8007d72 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007d76:	4b0a      	ldr	r3, [pc, #40]	@ (8007da0 <vPortExitCritical+0x50>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	4a08      	ldr	r2, [pc, #32]	@ (8007da0 <vPortExitCritical+0x50>)
 8007d7e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007d80:	4b07      	ldr	r3, [pc, #28]	@ (8007da0 <vPortExitCritical+0x50>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d105      	bne.n	8007d94 <vPortExitCritical+0x44>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	f383 8811 	msr	BASEPRI, r3
    }
 8007d92:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	2000006c 	.word	0x2000006c
	...

08007db0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007db0:	f3ef 8009 	mrs	r0, PSP
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	4b15      	ldr	r3, [pc, #84]	@ (8007e10 <pxCurrentTCBConst>)
 8007dba:	681a      	ldr	r2, [r3, #0]
 8007dbc:	f01e 0f10 	tst.w	lr, #16
 8007dc0:	bf08      	it	eq
 8007dc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007dc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dca:	6010      	str	r0, [r2, #0]
 8007dcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007dd0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007dd4:	f380 8811 	msr	BASEPRI, r0
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	f3bf 8f6f 	isb	sy
 8007de0:	f7fe fcf8 	bl	80067d4 <vTaskSwitchContext>
 8007de4:	f04f 0000 	mov.w	r0, #0
 8007de8:	f380 8811 	msr	BASEPRI, r0
 8007dec:	bc09      	pop	{r0, r3}
 8007dee:	6819      	ldr	r1, [r3, #0]
 8007df0:	6808      	ldr	r0, [r1, #0]
 8007df2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007df6:	f01e 0f10 	tst.w	lr, #16
 8007dfa:	bf08      	it	eq
 8007dfc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007e00:	f380 8809 	msr	PSP, r0
 8007e04:	f3bf 8f6f 	isb	sy
 8007e08:	4770      	bx	lr
 8007e0a:	bf00      	nop
 8007e0c:	f3af 8000 	nop.w

08007e10 <pxCurrentTCBConst>:
 8007e10:	20000274 	.word	0x20000274
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007e14:	bf00      	nop
 8007e16:	bf00      	nop

08007e18 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b082      	sub	sp, #8
 8007e1c:	af00      	add	r7, sp, #0
        __asm volatile
 8007e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e22:	f383 8811 	msr	BASEPRI, r3
 8007e26:	f3bf 8f6f 	isb	sy
 8007e2a:	f3bf 8f4f 	dsb	sy
 8007e2e:	607b      	str	r3, [r7, #4]
    }
 8007e30:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007e32:	f7fe fc15 	bl	8006660 <xTaskIncrementTick>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007e3c:	4b06      	ldr	r3, [pc, #24]	@ (8007e58 <SysTick_Handler+0x40>)
 8007e3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e42:	601a      	str	r2, [r3, #0]
 8007e44:	2300      	movs	r3, #0
 8007e46:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007e48:	683b      	ldr	r3, [r7, #0]
 8007e4a:	f383 8811 	msr	BASEPRI, r3
    }
 8007e4e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007e50:	bf00      	nop
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}
 8007e58:	e000ed04 	.word	0xe000ed04

08007e5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e60:	4b0b      	ldr	r3, [pc, #44]	@ (8007e90 <vPortSetupTimerInterrupt+0x34>)
 8007e62:	2200      	movs	r2, #0
 8007e64:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e66:	4b0b      	ldr	r3, [pc, #44]	@ (8007e94 <vPortSetupTimerInterrupt+0x38>)
 8007e68:	2200      	movs	r2, #0
 8007e6a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e98 <vPortSetupTimerInterrupt+0x3c>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4a0a      	ldr	r2, [pc, #40]	@ (8007e9c <vPortSetupTimerInterrupt+0x40>)
 8007e72:	fba2 2303 	umull	r2, r3, r2, r3
 8007e76:	099b      	lsrs	r3, r3, #6
 8007e78:	4a09      	ldr	r2, [pc, #36]	@ (8007ea0 <vPortSetupTimerInterrupt+0x44>)
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e7e:	4b04      	ldr	r3, [pc, #16]	@ (8007e90 <vPortSetupTimerInterrupt+0x34>)
 8007e80:	2207      	movs	r2, #7
 8007e82:	601a      	str	r2, [r3, #0]
}
 8007e84:	bf00      	nop
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	e000e010 	.word	0xe000e010
 8007e94:	e000e018 	.word	0xe000e018
 8007e98:	2000005c 	.word	0x2000005c
 8007e9c:	10624dd3 	.word	0x10624dd3
 8007ea0:	e000e014 	.word	0xe000e014

08007ea4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007ea4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007eb4 <vPortEnableVFP+0x10>
 8007ea8:	6801      	ldr	r1, [r0, #0]
 8007eaa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007eae:	6001      	str	r1, [r0, #0]
 8007eb0:	4770      	bx	lr
 8007eb2:	0000      	.short	0x0000
 8007eb4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007eb8:	bf00      	nop
 8007eba:	bf00      	nop

08007ebc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007ec2:	f3ef 8305 	mrs	r3, IPSR
 8007ec6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2b0f      	cmp	r3, #15
 8007ecc:	d915      	bls.n	8007efa <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007ece:	4a18      	ldr	r2, [pc, #96]	@ (8007f30 <vPortValidateInterruptPriority+0x74>)
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007ed8:	4b16      	ldr	r3, [pc, #88]	@ (8007f34 <vPortValidateInterruptPriority+0x78>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	7afa      	ldrb	r2, [r7, #11]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d20b      	bcs.n	8007efa <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8007ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee6:	f383 8811 	msr	BASEPRI, r3
 8007eea:	f3bf 8f6f 	isb	sy
 8007eee:	f3bf 8f4f 	dsb	sy
 8007ef2:	607b      	str	r3, [r7, #4]
    }
 8007ef4:	bf00      	nop
 8007ef6:	bf00      	nop
 8007ef8:	e7fd      	b.n	8007ef6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007efa:	4b0f      	ldr	r3, [pc, #60]	@ (8007f38 <vPortValidateInterruptPriority+0x7c>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f02:	4b0e      	ldr	r3, [pc, #56]	@ (8007f3c <vPortValidateInterruptPriority+0x80>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d90b      	bls.n	8007f22 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8007f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f0e:	f383 8811 	msr	BASEPRI, r3
 8007f12:	f3bf 8f6f 	isb	sy
 8007f16:	f3bf 8f4f 	dsb	sy
 8007f1a:	603b      	str	r3, [r7, #0]
    }
 8007f1c:	bf00      	nop
 8007f1e:	bf00      	nop
 8007f20:	e7fd      	b.n	8007f1e <vPortValidateInterruptPriority+0x62>
    }
 8007f22:	bf00      	nop
 8007f24:	3714      	adds	r7, #20
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	e000e3f0 	.word	0xe000e3f0
 8007f34:	200003b4 	.word	0x200003b4
 8007f38:	e000ed0c 	.word	0xe000ed0c
 8007f3c:	200003b8 	.word	0x200003b8

08007f40 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b08a      	sub	sp, #40	@ 0x28
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007f4c:	f7fe facc 	bl	80064e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007f50:	4b66      	ldr	r3, [pc, #408]	@ (80080ec <pvPortMalloc+0x1ac>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d101      	bne.n	8007f5c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007f58:	f000 f938 	bl	80081cc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f5c:	4b64      	ldr	r3, [pc, #400]	@ (80080f0 <pvPortMalloc+0x1b0>)
 8007f5e:	681a      	ldr	r2, [r3, #0]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4013      	ands	r3, r2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f040 80a9 	bne.w	80080bc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d02e      	beq.n	8007fce <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007f70:	2208      	movs	r2, #8
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007f76:	687a      	ldr	r2, [r7, #4]
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d228      	bcs.n	8007fce <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	4413      	add	r3, r2
 8007f82:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d022      	beq.n	8007fd4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f023 0307 	bic.w	r3, r3, #7
 8007f94:	3308      	adds	r3, #8
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	d215      	bcs.n	8007fc8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f023 0307 	bic.w	r3, r3, #7
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d011      	beq.n	8007fd4 <pvPortMalloc+0x94>
        __asm volatile
 8007fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb4:	f383 8811 	msr	BASEPRI, r3
 8007fb8:	f3bf 8f6f 	isb	sy
 8007fbc:	f3bf 8f4f 	dsb	sy
 8007fc0:	617b      	str	r3, [r7, #20]
    }
 8007fc2:	bf00      	nop
 8007fc4:	bf00      	nop
 8007fc6:	e7fd      	b.n	8007fc4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fcc:	e002      	b.n	8007fd4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	607b      	str	r3, [r7, #4]
 8007fd2:	e000      	b.n	8007fd6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007fd4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d06f      	beq.n	80080bc <pvPortMalloc+0x17c>
 8007fdc:	4b45      	ldr	r3, [pc, #276]	@ (80080f4 <pvPortMalloc+0x1b4>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	429a      	cmp	r2, r3
 8007fe4:	d86a      	bhi.n	80080bc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007fe6:	4b44      	ldr	r3, [pc, #272]	@ (80080f8 <pvPortMalloc+0x1b8>)
 8007fe8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007fea:	4b43      	ldr	r3, [pc, #268]	@ (80080f8 <pvPortMalloc+0x1b8>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ff0:	e004      	b.n	8007ffc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	429a      	cmp	r2, r3
 8008004:	d903      	bls.n	800800e <pvPortMalloc+0xce>
 8008006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d1f1      	bne.n	8007ff2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800800e:	4b37      	ldr	r3, [pc, #220]	@ (80080ec <pvPortMalloc+0x1ac>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008014:	429a      	cmp	r2, r3
 8008016:	d051      	beq.n	80080bc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008018:	6a3b      	ldr	r3, [r7, #32]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	2208      	movs	r2, #8
 800801e:	4413      	add	r3, r2
 8008020:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	6a3b      	ldr	r3, [r7, #32]
 8008028:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800802a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	1ad2      	subs	r2, r2, r3
 8008032:	2308      	movs	r3, #8
 8008034:	005b      	lsls	r3, r3, #1
 8008036:	429a      	cmp	r2, r3
 8008038:	d920      	bls.n	800807c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800803a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4413      	add	r3, r2
 8008040:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008042:	69bb      	ldr	r3, [r7, #24]
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00b      	beq.n	8008064 <pvPortMalloc+0x124>
        __asm volatile
 800804c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008050:	f383 8811 	msr	BASEPRI, r3
 8008054:	f3bf 8f6f 	isb	sy
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	613b      	str	r3, [r7, #16]
    }
 800805e:	bf00      	nop
 8008060:	bf00      	nop
 8008062:	e7fd      	b.n	8008060 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	1ad2      	subs	r2, r2, r3
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008076:	69b8      	ldr	r0, [r7, #24]
 8008078:	f000 f90a 	bl	8008290 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800807c:	4b1d      	ldr	r3, [pc, #116]	@ (80080f4 <pvPortMalloc+0x1b4>)
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008082:	685b      	ldr	r3, [r3, #4]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	4a1b      	ldr	r2, [pc, #108]	@ (80080f4 <pvPortMalloc+0x1b4>)
 8008088:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800808a:	4b1a      	ldr	r3, [pc, #104]	@ (80080f4 <pvPortMalloc+0x1b4>)
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	4b1b      	ldr	r3, [pc, #108]	@ (80080fc <pvPortMalloc+0x1bc>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	429a      	cmp	r2, r3
 8008094:	d203      	bcs.n	800809e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008096:	4b17      	ldr	r3, [pc, #92]	@ (80080f4 <pvPortMalloc+0x1b4>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a18      	ldr	r2, [pc, #96]	@ (80080fc <pvPortMalloc+0x1bc>)
 800809c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800809e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	4b13      	ldr	r3, [pc, #76]	@ (80080f0 <pvPortMalloc+0x1b0>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	431a      	orrs	r2, r3
 80080a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080aa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80080b2:	4b13      	ldr	r3, [pc, #76]	@ (8008100 <pvPortMalloc+0x1c0>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	3301      	adds	r3, #1
 80080b8:	4a11      	ldr	r2, [pc, #68]	@ (8008100 <pvPortMalloc+0x1c0>)
 80080ba:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80080bc:	f7fe fa22 	bl	8006504 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	f003 0307 	and.w	r3, r3, #7
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d00b      	beq.n	80080e2 <pvPortMalloc+0x1a2>
        __asm volatile
 80080ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	60fb      	str	r3, [r7, #12]
    }
 80080dc:	bf00      	nop
 80080de:	bf00      	nop
 80080e0:	e7fd      	b.n	80080de <pvPortMalloc+0x19e>
    return pvReturn;
 80080e2:	69fb      	ldr	r3, [r7, #28]
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3728      	adds	r7, #40	@ 0x28
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}
 80080ec:	200193c4 	.word	0x200193c4
 80080f0:	200193d8 	.word	0x200193d8
 80080f4:	200193c8 	.word	0x200193c8
 80080f8:	200193bc 	.word	0x200193bc
 80080fc:	200193cc 	.word	0x200193cc
 8008100:	200193d0 	.word	0x200193d0

08008104 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d04f      	beq.n	80081b6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008116:	2308      	movs	r3, #8
 8008118:	425b      	negs	r3, r3
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	4413      	add	r3, r2
 800811e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	685a      	ldr	r2, [r3, #4]
 8008128:	4b25      	ldr	r3, [pc, #148]	@ (80081c0 <vPortFree+0xbc>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4013      	ands	r3, r2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d10b      	bne.n	800814a <vPortFree+0x46>
        __asm volatile
 8008132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008136:	f383 8811 	msr	BASEPRI, r3
 800813a:	f3bf 8f6f 	isb	sy
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	60fb      	str	r3, [r7, #12]
    }
 8008144:	bf00      	nop
 8008146:	bf00      	nop
 8008148:	e7fd      	b.n	8008146 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00b      	beq.n	800816a <vPortFree+0x66>
        __asm volatile
 8008152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	60bb      	str	r3, [r7, #8]
    }
 8008164:	bf00      	nop
 8008166:	bf00      	nop
 8008168:	e7fd      	b.n	8008166 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	685a      	ldr	r2, [r3, #4]
 800816e:	4b14      	ldr	r3, [pc, #80]	@ (80081c0 <vPortFree+0xbc>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4013      	ands	r3, r2
 8008174:	2b00      	cmp	r3, #0
 8008176:	d01e      	beq.n	80081b6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d11a      	bne.n	80081b6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	4b0e      	ldr	r3, [pc, #56]	@ (80081c0 <vPortFree+0xbc>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	43db      	mvns	r3, r3
 800818a:	401a      	ands	r2, r3
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8008190:	f7fe f9aa 	bl	80064e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	685a      	ldr	r2, [r3, #4]
 8008198:	4b0a      	ldr	r3, [pc, #40]	@ (80081c4 <vPortFree+0xc0>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4413      	add	r3, r2
 800819e:	4a09      	ldr	r2, [pc, #36]	@ (80081c4 <vPortFree+0xc0>)
 80081a0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80081a2:	6938      	ldr	r0, [r7, #16]
 80081a4:	f000 f874 	bl	8008290 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80081a8:	4b07      	ldr	r3, [pc, #28]	@ (80081c8 <vPortFree+0xc4>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	3301      	adds	r3, #1
 80081ae:	4a06      	ldr	r2, [pc, #24]	@ (80081c8 <vPortFree+0xc4>)
 80081b0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80081b2:	f7fe f9a7 	bl	8006504 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80081b6:	bf00      	nop
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	200193d8 	.word	0x200193d8
 80081c4:	200193c8 	.word	0x200193c8
 80081c8:	200193d4 	.word	0x200193d4

080081cc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80081d2:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80081d6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80081d8:	4b27      	ldr	r3, [pc, #156]	@ (8008278 <prvHeapInit+0xac>)
 80081da:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f003 0307 	and.w	r3, r3, #7
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d00c      	beq.n	8008200 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	3307      	adds	r3, #7
 80081ea:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f023 0307 	bic.w	r3, r3, #7
 80081f2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80081f4:	68ba      	ldr	r2, [r7, #8]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	4a1f      	ldr	r2, [pc, #124]	@ (8008278 <prvHeapInit+0xac>)
 80081fc:	4413      	add	r3, r2
 80081fe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008204:	4a1d      	ldr	r2, [pc, #116]	@ (800827c <prvHeapInit+0xb0>)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800820a:	4b1c      	ldr	r3, [pc, #112]	@ (800827c <prvHeapInit+0xb0>)
 800820c:	2200      	movs	r2, #0
 800820e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68ba      	ldr	r2, [r7, #8]
 8008214:	4413      	add	r3, r2
 8008216:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008218:	2208      	movs	r2, #8
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	1a9b      	subs	r3, r3, r2
 800821e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f023 0307 	bic.w	r3, r3, #7
 8008226:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	4a15      	ldr	r2, [pc, #84]	@ (8008280 <prvHeapInit+0xb4>)
 800822c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800822e:	4b14      	ldr	r3, [pc, #80]	@ (8008280 <prvHeapInit+0xb4>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	2200      	movs	r2, #0
 8008234:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008236:	4b12      	ldr	r3, [pc, #72]	@ (8008280 <prvHeapInit+0xb4>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2200      	movs	r2, #0
 800823c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	1ad2      	subs	r2, r2, r3
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800824c:	4b0c      	ldr	r3, [pc, #48]	@ (8008280 <prvHeapInit+0xb4>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	4a0a      	ldr	r2, [pc, #40]	@ (8008284 <prvHeapInit+0xb8>)
 800825a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	685b      	ldr	r3, [r3, #4]
 8008260:	4a09      	ldr	r2, [pc, #36]	@ (8008288 <prvHeapInit+0xbc>)
 8008262:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008264:	4b09      	ldr	r3, [pc, #36]	@ (800828c <prvHeapInit+0xc0>)
 8008266:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800826a:	601a      	str	r2, [r3, #0]
}
 800826c:	bf00      	nop
 800826e:	3714      	adds	r7, #20
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	200003bc 	.word	0x200003bc
 800827c:	200193bc 	.word	0x200193bc
 8008280:	200193c4 	.word	0x200193c4
 8008284:	200193cc 	.word	0x200193cc
 8008288:	200193c8 	.word	0x200193c8
 800828c:	200193d8 	.word	0x200193d8

08008290 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8008290:	b480      	push	{r7}
 8008292:	b085      	sub	sp, #20
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008298:	4b28      	ldr	r3, [pc, #160]	@ (800833c <prvInsertBlockIntoFreeList+0xac>)
 800829a:	60fb      	str	r3, [r7, #12]
 800829c:	e002      	b.n	80082a4 <prvInsertBlockIntoFreeList+0x14>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d8f7      	bhi.n	800829e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	685b      	ldr	r3, [r3, #4]
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	4413      	add	r3, r2
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	429a      	cmp	r2, r3
 80082be:	d108      	bne.n	80082d2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	441a      	add	r2, r3
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	68ba      	ldr	r2, [r7, #8]
 80082dc:	441a      	add	r2, r3
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d118      	bne.n	8008318 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	4b15      	ldr	r3, [pc, #84]	@ (8008340 <prvInsertBlockIntoFreeList+0xb0>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d00d      	beq.n	800830e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	441a      	add	r2, r3
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	601a      	str	r2, [r3, #0]
 800830c:	e008      	b.n	8008320 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800830e:	4b0c      	ldr	r3, [pc, #48]	@ (8008340 <prvInsertBlockIntoFreeList+0xb0>)
 8008310:	681a      	ldr	r2, [r3, #0]
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	601a      	str	r2, [r3, #0]
 8008316:	e003      	b.n	8008320 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681a      	ldr	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	429a      	cmp	r2, r3
 8008326:	d002      	beq.n	800832e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800832e:	bf00      	nop
 8008330:	3714      	adds	r7, #20
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr
 800833a:	bf00      	nop
 800833c:	200193bc 	.word	0x200193bc
 8008340:	200193c4 	.word	0x200193c4

08008344 <siprintf>:
 8008344:	b40e      	push	{r1, r2, r3}
 8008346:	b500      	push	{lr}
 8008348:	b09c      	sub	sp, #112	@ 0x70
 800834a:	ab1d      	add	r3, sp, #116	@ 0x74
 800834c:	9002      	str	r0, [sp, #8]
 800834e:	9006      	str	r0, [sp, #24]
 8008350:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008354:	4809      	ldr	r0, [pc, #36]	@ (800837c <siprintf+0x38>)
 8008356:	9107      	str	r1, [sp, #28]
 8008358:	9104      	str	r1, [sp, #16]
 800835a:	4909      	ldr	r1, [pc, #36]	@ (8008380 <siprintf+0x3c>)
 800835c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008360:	9105      	str	r1, [sp, #20]
 8008362:	6800      	ldr	r0, [r0, #0]
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	a902      	add	r1, sp, #8
 8008368:	f000 f9a2 	bl	80086b0 <_svfiprintf_r>
 800836c:	9b02      	ldr	r3, [sp, #8]
 800836e:	2200      	movs	r2, #0
 8008370:	701a      	strb	r2, [r3, #0]
 8008372:	b01c      	add	sp, #112	@ 0x70
 8008374:	f85d eb04 	ldr.w	lr, [sp], #4
 8008378:	b003      	add	sp, #12
 800837a:	4770      	bx	lr
 800837c:	20000070 	.word	0x20000070
 8008380:	ffff0208 	.word	0xffff0208

08008384 <memset>:
 8008384:	4402      	add	r2, r0
 8008386:	4603      	mov	r3, r0
 8008388:	4293      	cmp	r3, r2
 800838a:	d100      	bne.n	800838e <memset+0xa>
 800838c:	4770      	bx	lr
 800838e:	f803 1b01 	strb.w	r1, [r3], #1
 8008392:	e7f9      	b.n	8008388 <memset+0x4>

08008394 <__errno>:
 8008394:	4b01      	ldr	r3, [pc, #4]	@ (800839c <__errno+0x8>)
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	4770      	bx	lr
 800839a:	bf00      	nop
 800839c:	20000070 	.word	0x20000070

080083a0 <__libc_init_array>:
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	4d0d      	ldr	r5, [pc, #52]	@ (80083d8 <__libc_init_array+0x38>)
 80083a4:	4c0d      	ldr	r4, [pc, #52]	@ (80083dc <__libc_init_array+0x3c>)
 80083a6:	1b64      	subs	r4, r4, r5
 80083a8:	10a4      	asrs	r4, r4, #2
 80083aa:	2600      	movs	r6, #0
 80083ac:	42a6      	cmp	r6, r4
 80083ae:	d109      	bne.n	80083c4 <__libc_init_array+0x24>
 80083b0:	4d0b      	ldr	r5, [pc, #44]	@ (80083e0 <__libc_init_array+0x40>)
 80083b2:	4c0c      	ldr	r4, [pc, #48]	@ (80083e4 <__libc_init_array+0x44>)
 80083b4:	f000 fc66 	bl	8008c84 <_init>
 80083b8:	1b64      	subs	r4, r4, r5
 80083ba:	10a4      	asrs	r4, r4, #2
 80083bc:	2600      	movs	r6, #0
 80083be:	42a6      	cmp	r6, r4
 80083c0:	d105      	bne.n	80083ce <__libc_init_array+0x2e>
 80083c2:	bd70      	pop	{r4, r5, r6, pc}
 80083c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80083c8:	4798      	blx	r3
 80083ca:	3601      	adds	r6, #1
 80083cc:	e7ee      	b.n	80083ac <__libc_init_array+0xc>
 80083ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d2:	4798      	blx	r3
 80083d4:	3601      	adds	r6, #1
 80083d6:	e7f2      	b.n	80083be <__libc_init_array+0x1e>
 80083d8:	08009498 	.word	0x08009498
 80083dc:	08009498 	.word	0x08009498
 80083e0:	08009498 	.word	0x08009498
 80083e4:	0800949c 	.word	0x0800949c

080083e8 <__retarget_lock_acquire_recursive>:
 80083e8:	4770      	bx	lr

080083ea <__retarget_lock_release_recursive>:
 80083ea:	4770      	bx	lr

080083ec <memcpy>:
 80083ec:	440a      	add	r2, r1
 80083ee:	4291      	cmp	r1, r2
 80083f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80083f4:	d100      	bne.n	80083f8 <memcpy+0xc>
 80083f6:	4770      	bx	lr
 80083f8:	b510      	push	{r4, lr}
 80083fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008402:	4291      	cmp	r1, r2
 8008404:	d1f9      	bne.n	80083fa <memcpy+0xe>
 8008406:	bd10      	pop	{r4, pc}

08008408 <_free_r>:
 8008408:	b538      	push	{r3, r4, r5, lr}
 800840a:	4605      	mov	r5, r0
 800840c:	2900      	cmp	r1, #0
 800840e:	d041      	beq.n	8008494 <_free_r+0x8c>
 8008410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008414:	1f0c      	subs	r4, r1, #4
 8008416:	2b00      	cmp	r3, #0
 8008418:	bfb8      	it	lt
 800841a:	18e4      	addlt	r4, r4, r3
 800841c:	f000 f8e0 	bl	80085e0 <__malloc_lock>
 8008420:	4a1d      	ldr	r2, [pc, #116]	@ (8008498 <_free_r+0x90>)
 8008422:	6813      	ldr	r3, [r2, #0]
 8008424:	b933      	cbnz	r3, 8008434 <_free_r+0x2c>
 8008426:	6063      	str	r3, [r4, #4]
 8008428:	6014      	str	r4, [r2, #0]
 800842a:	4628      	mov	r0, r5
 800842c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008430:	f000 b8dc 	b.w	80085ec <__malloc_unlock>
 8008434:	42a3      	cmp	r3, r4
 8008436:	d908      	bls.n	800844a <_free_r+0x42>
 8008438:	6820      	ldr	r0, [r4, #0]
 800843a:	1821      	adds	r1, r4, r0
 800843c:	428b      	cmp	r3, r1
 800843e:	bf01      	itttt	eq
 8008440:	6819      	ldreq	r1, [r3, #0]
 8008442:	685b      	ldreq	r3, [r3, #4]
 8008444:	1809      	addeq	r1, r1, r0
 8008446:	6021      	streq	r1, [r4, #0]
 8008448:	e7ed      	b.n	8008426 <_free_r+0x1e>
 800844a:	461a      	mov	r2, r3
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	b10b      	cbz	r3, 8008454 <_free_r+0x4c>
 8008450:	42a3      	cmp	r3, r4
 8008452:	d9fa      	bls.n	800844a <_free_r+0x42>
 8008454:	6811      	ldr	r1, [r2, #0]
 8008456:	1850      	adds	r0, r2, r1
 8008458:	42a0      	cmp	r0, r4
 800845a:	d10b      	bne.n	8008474 <_free_r+0x6c>
 800845c:	6820      	ldr	r0, [r4, #0]
 800845e:	4401      	add	r1, r0
 8008460:	1850      	adds	r0, r2, r1
 8008462:	4283      	cmp	r3, r0
 8008464:	6011      	str	r1, [r2, #0]
 8008466:	d1e0      	bne.n	800842a <_free_r+0x22>
 8008468:	6818      	ldr	r0, [r3, #0]
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	6053      	str	r3, [r2, #4]
 800846e:	4408      	add	r0, r1
 8008470:	6010      	str	r0, [r2, #0]
 8008472:	e7da      	b.n	800842a <_free_r+0x22>
 8008474:	d902      	bls.n	800847c <_free_r+0x74>
 8008476:	230c      	movs	r3, #12
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	e7d6      	b.n	800842a <_free_r+0x22>
 800847c:	6820      	ldr	r0, [r4, #0]
 800847e:	1821      	adds	r1, r4, r0
 8008480:	428b      	cmp	r3, r1
 8008482:	bf04      	itt	eq
 8008484:	6819      	ldreq	r1, [r3, #0]
 8008486:	685b      	ldreq	r3, [r3, #4]
 8008488:	6063      	str	r3, [r4, #4]
 800848a:	bf04      	itt	eq
 800848c:	1809      	addeq	r1, r1, r0
 800848e:	6021      	streq	r1, [r4, #0]
 8008490:	6054      	str	r4, [r2, #4]
 8008492:	e7ca      	b.n	800842a <_free_r+0x22>
 8008494:	bd38      	pop	{r3, r4, r5, pc}
 8008496:	bf00      	nop
 8008498:	20019520 	.word	0x20019520

0800849c <sbrk_aligned>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	4e0f      	ldr	r6, [pc, #60]	@ (80084dc <sbrk_aligned+0x40>)
 80084a0:	460c      	mov	r4, r1
 80084a2:	6831      	ldr	r1, [r6, #0]
 80084a4:	4605      	mov	r5, r0
 80084a6:	b911      	cbnz	r1, 80084ae <sbrk_aligned+0x12>
 80084a8:	f000 fba6 	bl	8008bf8 <_sbrk_r>
 80084ac:	6030      	str	r0, [r6, #0]
 80084ae:	4621      	mov	r1, r4
 80084b0:	4628      	mov	r0, r5
 80084b2:	f000 fba1 	bl	8008bf8 <_sbrk_r>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d103      	bne.n	80084c2 <sbrk_aligned+0x26>
 80084ba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80084be:	4620      	mov	r0, r4
 80084c0:	bd70      	pop	{r4, r5, r6, pc}
 80084c2:	1cc4      	adds	r4, r0, #3
 80084c4:	f024 0403 	bic.w	r4, r4, #3
 80084c8:	42a0      	cmp	r0, r4
 80084ca:	d0f8      	beq.n	80084be <sbrk_aligned+0x22>
 80084cc:	1a21      	subs	r1, r4, r0
 80084ce:	4628      	mov	r0, r5
 80084d0:	f000 fb92 	bl	8008bf8 <_sbrk_r>
 80084d4:	3001      	adds	r0, #1
 80084d6:	d1f2      	bne.n	80084be <sbrk_aligned+0x22>
 80084d8:	e7ef      	b.n	80084ba <sbrk_aligned+0x1e>
 80084da:	bf00      	nop
 80084dc:	2001951c 	.word	0x2001951c

080084e0 <_malloc_r>:
 80084e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e4:	1ccd      	adds	r5, r1, #3
 80084e6:	f025 0503 	bic.w	r5, r5, #3
 80084ea:	3508      	adds	r5, #8
 80084ec:	2d0c      	cmp	r5, #12
 80084ee:	bf38      	it	cc
 80084f0:	250c      	movcc	r5, #12
 80084f2:	2d00      	cmp	r5, #0
 80084f4:	4606      	mov	r6, r0
 80084f6:	db01      	blt.n	80084fc <_malloc_r+0x1c>
 80084f8:	42a9      	cmp	r1, r5
 80084fa:	d904      	bls.n	8008506 <_malloc_r+0x26>
 80084fc:	230c      	movs	r3, #12
 80084fe:	6033      	str	r3, [r6, #0]
 8008500:	2000      	movs	r0, #0
 8008502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085dc <_malloc_r+0xfc>
 800850a:	f000 f869 	bl	80085e0 <__malloc_lock>
 800850e:	f8d8 3000 	ldr.w	r3, [r8]
 8008512:	461c      	mov	r4, r3
 8008514:	bb44      	cbnz	r4, 8008568 <_malloc_r+0x88>
 8008516:	4629      	mov	r1, r5
 8008518:	4630      	mov	r0, r6
 800851a:	f7ff ffbf 	bl	800849c <sbrk_aligned>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	4604      	mov	r4, r0
 8008522:	d158      	bne.n	80085d6 <_malloc_r+0xf6>
 8008524:	f8d8 4000 	ldr.w	r4, [r8]
 8008528:	4627      	mov	r7, r4
 800852a:	2f00      	cmp	r7, #0
 800852c:	d143      	bne.n	80085b6 <_malloc_r+0xd6>
 800852e:	2c00      	cmp	r4, #0
 8008530:	d04b      	beq.n	80085ca <_malloc_r+0xea>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	4639      	mov	r1, r7
 8008536:	4630      	mov	r0, r6
 8008538:	eb04 0903 	add.w	r9, r4, r3
 800853c:	f000 fb5c 	bl	8008bf8 <_sbrk_r>
 8008540:	4581      	cmp	r9, r0
 8008542:	d142      	bne.n	80085ca <_malloc_r+0xea>
 8008544:	6821      	ldr	r1, [r4, #0]
 8008546:	1a6d      	subs	r5, r5, r1
 8008548:	4629      	mov	r1, r5
 800854a:	4630      	mov	r0, r6
 800854c:	f7ff ffa6 	bl	800849c <sbrk_aligned>
 8008550:	3001      	adds	r0, #1
 8008552:	d03a      	beq.n	80085ca <_malloc_r+0xea>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	442b      	add	r3, r5
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	f8d8 3000 	ldr.w	r3, [r8]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	bb62      	cbnz	r2, 80085bc <_malloc_r+0xdc>
 8008562:	f8c8 7000 	str.w	r7, [r8]
 8008566:	e00f      	b.n	8008588 <_malloc_r+0xa8>
 8008568:	6822      	ldr	r2, [r4, #0]
 800856a:	1b52      	subs	r2, r2, r5
 800856c:	d420      	bmi.n	80085b0 <_malloc_r+0xd0>
 800856e:	2a0b      	cmp	r2, #11
 8008570:	d917      	bls.n	80085a2 <_malloc_r+0xc2>
 8008572:	1961      	adds	r1, r4, r5
 8008574:	42a3      	cmp	r3, r4
 8008576:	6025      	str	r5, [r4, #0]
 8008578:	bf18      	it	ne
 800857a:	6059      	strne	r1, [r3, #4]
 800857c:	6863      	ldr	r3, [r4, #4]
 800857e:	bf08      	it	eq
 8008580:	f8c8 1000 	streq.w	r1, [r8]
 8008584:	5162      	str	r2, [r4, r5]
 8008586:	604b      	str	r3, [r1, #4]
 8008588:	4630      	mov	r0, r6
 800858a:	f000 f82f 	bl	80085ec <__malloc_unlock>
 800858e:	f104 000b 	add.w	r0, r4, #11
 8008592:	1d23      	adds	r3, r4, #4
 8008594:	f020 0007 	bic.w	r0, r0, #7
 8008598:	1ac2      	subs	r2, r0, r3
 800859a:	bf1c      	itt	ne
 800859c:	1a1b      	subne	r3, r3, r0
 800859e:	50a3      	strne	r3, [r4, r2]
 80085a0:	e7af      	b.n	8008502 <_malloc_r+0x22>
 80085a2:	6862      	ldr	r2, [r4, #4]
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	bf0c      	ite	eq
 80085a8:	f8c8 2000 	streq.w	r2, [r8]
 80085ac:	605a      	strne	r2, [r3, #4]
 80085ae:	e7eb      	b.n	8008588 <_malloc_r+0xa8>
 80085b0:	4623      	mov	r3, r4
 80085b2:	6864      	ldr	r4, [r4, #4]
 80085b4:	e7ae      	b.n	8008514 <_malloc_r+0x34>
 80085b6:	463c      	mov	r4, r7
 80085b8:	687f      	ldr	r7, [r7, #4]
 80085ba:	e7b6      	b.n	800852a <_malloc_r+0x4a>
 80085bc:	461a      	mov	r2, r3
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	d1fb      	bne.n	80085bc <_malloc_r+0xdc>
 80085c4:	2300      	movs	r3, #0
 80085c6:	6053      	str	r3, [r2, #4]
 80085c8:	e7de      	b.n	8008588 <_malloc_r+0xa8>
 80085ca:	230c      	movs	r3, #12
 80085cc:	6033      	str	r3, [r6, #0]
 80085ce:	4630      	mov	r0, r6
 80085d0:	f000 f80c 	bl	80085ec <__malloc_unlock>
 80085d4:	e794      	b.n	8008500 <_malloc_r+0x20>
 80085d6:	6005      	str	r5, [r0, #0]
 80085d8:	e7d6      	b.n	8008588 <_malloc_r+0xa8>
 80085da:	bf00      	nop
 80085dc:	20019520 	.word	0x20019520

080085e0 <__malloc_lock>:
 80085e0:	4801      	ldr	r0, [pc, #4]	@ (80085e8 <__malloc_lock+0x8>)
 80085e2:	f7ff bf01 	b.w	80083e8 <__retarget_lock_acquire_recursive>
 80085e6:	bf00      	nop
 80085e8:	20019518 	.word	0x20019518

080085ec <__malloc_unlock>:
 80085ec:	4801      	ldr	r0, [pc, #4]	@ (80085f4 <__malloc_unlock+0x8>)
 80085ee:	f7ff befc 	b.w	80083ea <__retarget_lock_release_recursive>
 80085f2:	bf00      	nop
 80085f4:	20019518 	.word	0x20019518

080085f8 <__ssputs_r>:
 80085f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085fc:	688e      	ldr	r6, [r1, #8]
 80085fe:	461f      	mov	r7, r3
 8008600:	42be      	cmp	r6, r7
 8008602:	680b      	ldr	r3, [r1, #0]
 8008604:	4682      	mov	sl, r0
 8008606:	460c      	mov	r4, r1
 8008608:	4690      	mov	r8, r2
 800860a:	d82d      	bhi.n	8008668 <__ssputs_r+0x70>
 800860c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008610:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008614:	d026      	beq.n	8008664 <__ssputs_r+0x6c>
 8008616:	6965      	ldr	r5, [r4, #20]
 8008618:	6909      	ldr	r1, [r1, #16]
 800861a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800861e:	eba3 0901 	sub.w	r9, r3, r1
 8008622:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008626:	1c7b      	adds	r3, r7, #1
 8008628:	444b      	add	r3, r9
 800862a:	106d      	asrs	r5, r5, #1
 800862c:	429d      	cmp	r5, r3
 800862e:	bf38      	it	cc
 8008630:	461d      	movcc	r5, r3
 8008632:	0553      	lsls	r3, r2, #21
 8008634:	d527      	bpl.n	8008686 <__ssputs_r+0x8e>
 8008636:	4629      	mov	r1, r5
 8008638:	f7ff ff52 	bl	80084e0 <_malloc_r>
 800863c:	4606      	mov	r6, r0
 800863e:	b360      	cbz	r0, 800869a <__ssputs_r+0xa2>
 8008640:	6921      	ldr	r1, [r4, #16]
 8008642:	464a      	mov	r2, r9
 8008644:	f7ff fed2 	bl	80083ec <memcpy>
 8008648:	89a3      	ldrh	r3, [r4, #12]
 800864a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800864e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008652:	81a3      	strh	r3, [r4, #12]
 8008654:	6126      	str	r6, [r4, #16]
 8008656:	6165      	str	r5, [r4, #20]
 8008658:	444e      	add	r6, r9
 800865a:	eba5 0509 	sub.w	r5, r5, r9
 800865e:	6026      	str	r6, [r4, #0]
 8008660:	60a5      	str	r5, [r4, #8]
 8008662:	463e      	mov	r6, r7
 8008664:	42be      	cmp	r6, r7
 8008666:	d900      	bls.n	800866a <__ssputs_r+0x72>
 8008668:	463e      	mov	r6, r7
 800866a:	6820      	ldr	r0, [r4, #0]
 800866c:	4632      	mov	r2, r6
 800866e:	4641      	mov	r1, r8
 8008670:	f000 faa8 	bl	8008bc4 <memmove>
 8008674:	68a3      	ldr	r3, [r4, #8]
 8008676:	1b9b      	subs	r3, r3, r6
 8008678:	60a3      	str	r3, [r4, #8]
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	4433      	add	r3, r6
 800867e:	6023      	str	r3, [r4, #0]
 8008680:	2000      	movs	r0, #0
 8008682:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008686:	462a      	mov	r2, r5
 8008688:	f000 fac6 	bl	8008c18 <_realloc_r>
 800868c:	4606      	mov	r6, r0
 800868e:	2800      	cmp	r0, #0
 8008690:	d1e0      	bne.n	8008654 <__ssputs_r+0x5c>
 8008692:	6921      	ldr	r1, [r4, #16]
 8008694:	4650      	mov	r0, sl
 8008696:	f7ff feb7 	bl	8008408 <_free_r>
 800869a:	230c      	movs	r3, #12
 800869c:	f8ca 3000 	str.w	r3, [sl]
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086a6:	81a3      	strh	r3, [r4, #12]
 80086a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086ac:	e7e9      	b.n	8008682 <__ssputs_r+0x8a>
	...

080086b0 <_svfiprintf_r>:
 80086b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086b4:	4698      	mov	r8, r3
 80086b6:	898b      	ldrh	r3, [r1, #12]
 80086b8:	061b      	lsls	r3, r3, #24
 80086ba:	b09d      	sub	sp, #116	@ 0x74
 80086bc:	4607      	mov	r7, r0
 80086be:	460d      	mov	r5, r1
 80086c0:	4614      	mov	r4, r2
 80086c2:	d510      	bpl.n	80086e6 <_svfiprintf_r+0x36>
 80086c4:	690b      	ldr	r3, [r1, #16]
 80086c6:	b973      	cbnz	r3, 80086e6 <_svfiprintf_r+0x36>
 80086c8:	2140      	movs	r1, #64	@ 0x40
 80086ca:	f7ff ff09 	bl	80084e0 <_malloc_r>
 80086ce:	6028      	str	r0, [r5, #0]
 80086d0:	6128      	str	r0, [r5, #16]
 80086d2:	b930      	cbnz	r0, 80086e2 <_svfiprintf_r+0x32>
 80086d4:	230c      	movs	r3, #12
 80086d6:	603b      	str	r3, [r7, #0]
 80086d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80086dc:	b01d      	add	sp, #116	@ 0x74
 80086de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e2:	2340      	movs	r3, #64	@ 0x40
 80086e4:	616b      	str	r3, [r5, #20]
 80086e6:	2300      	movs	r3, #0
 80086e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ea:	2320      	movs	r3, #32
 80086ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80086f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80086f4:	2330      	movs	r3, #48	@ 0x30
 80086f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008894 <_svfiprintf_r+0x1e4>
 80086fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80086fe:	f04f 0901 	mov.w	r9, #1
 8008702:	4623      	mov	r3, r4
 8008704:	469a      	mov	sl, r3
 8008706:	f813 2b01 	ldrb.w	r2, [r3], #1
 800870a:	b10a      	cbz	r2, 8008710 <_svfiprintf_r+0x60>
 800870c:	2a25      	cmp	r2, #37	@ 0x25
 800870e:	d1f9      	bne.n	8008704 <_svfiprintf_r+0x54>
 8008710:	ebba 0b04 	subs.w	fp, sl, r4
 8008714:	d00b      	beq.n	800872e <_svfiprintf_r+0x7e>
 8008716:	465b      	mov	r3, fp
 8008718:	4622      	mov	r2, r4
 800871a:	4629      	mov	r1, r5
 800871c:	4638      	mov	r0, r7
 800871e:	f7ff ff6b 	bl	80085f8 <__ssputs_r>
 8008722:	3001      	adds	r0, #1
 8008724:	f000 80a7 	beq.w	8008876 <_svfiprintf_r+0x1c6>
 8008728:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800872a:	445a      	add	r2, fp
 800872c:	9209      	str	r2, [sp, #36]	@ 0x24
 800872e:	f89a 3000 	ldrb.w	r3, [sl]
 8008732:	2b00      	cmp	r3, #0
 8008734:	f000 809f 	beq.w	8008876 <_svfiprintf_r+0x1c6>
 8008738:	2300      	movs	r3, #0
 800873a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800873e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008742:	f10a 0a01 	add.w	sl, sl, #1
 8008746:	9304      	str	r3, [sp, #16]
 8008748:	9307      	str	r3, [sp, #28]
 800874a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800874e:	931a      	str	r3, [sp, #104]	@ 0x68
 8008750:	4654      	mov	r4, sl
 8008752:	2205      	movs	r2, #5
 8008754:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008758:	484e      	ldr	r0, [pc, #312]	@ (8008894 <_svfiprintf_r+0x1e4>)
 800875a:	f7f7 fd51 	bl	8000200 <memchr>
 800875e:	9a04      	ldr	r2, [sp, #16]
 8008760:	b9d8      	cbnz	r0, 800879a <_svfiprintf_r+0xea>
 8008762:	06d0      	lsls	r0, r2, #27
 8008764:	bf44      	itt	mi
 8008766:	2320      	movmi	r3, #32
 8008768:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800876c:	0711      	lsls	r1, r2, #28
 800876e:	bf44      	itt	mi
 8008770:	232b      	movmi	r3, #43	@ 0x2b
 8008772:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008776:	f89a 3000 	ldrb.w	r3, [sl]
 800877a:	2b2a      	cmp	r3, #42	@ 0x2a
 800877c:	d015      	beq.n	80087aa <_svfiprintf_r+0xfa>
 800877e:	9a07      	ldr	r2, [sp, #28]
 8008780:	4654      	mov	r4, sl
 8008782:	2000      	movs	r0, #0
 8008784:	f04f 0c0a 	mov.w	ip, #10
 8008788:	4621      	mov	r1, r4
 800878a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800878e:	3b30      	subs	r3, #48	@ 0x30
 8008790:	2b09      	cmp	r3, #9
 8008792:	d94b      	bls.n	800882c <_svfiprintf_r+0x17c>
 8008794:	b1b0      	cbz	r0, 80087c4 <_svfiprintf_r+0x114>
 8008796:	9207      	str	r2, [sp, #28]
 8008798:	e014      	b.n	80087c4 <_svfiprintf_r+0x114>
 800879a:	eba0 0308 	sub.w	r3, r0, r8
 800879e:	fa09 f303 	lsl.w	r3, r9, r3
 80087a2:	4313      	orrs	r3, r2
 80087a4:	9304      	str	r3, [sp, #16]
 80087a6:	46a2      	mov	sl, r4
 80087a8:	e7d2      	b.n	8008750 <_svfiprintf_r+0xa0>
 80087aa:	9b03      	ldr	r3, [sp, #12]
 80087ac:	1d19      	adds	r1, r3, #4
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	9103      	str	r1, [sp, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	bfbb      	ittet	lt
 80087b6:	425b      	neglt	r3, r3
 80087b8:	f042 0202 	orrlt.w	r2, r2, #2
 80087bc:	9307      	strge	r3, [sp, #28]
 80087be:	9307      	strlt	r3, [sp, #28]
 80087c0:	bfb8      	it	lt
 80087c2:	9204      	strlt	r2, [sp, #16]
 80087c4:	7823      	ldrb	r3, [r4, #0]
 80087c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80087c8:	d10a      	bne.n	80087e0 <_svfiprintf_r+0x130>
 80087ca:	7863      	ldrb	r3, [r4, #1]
 80087cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80087ce:	d132      	bne.n	8008836 <_svfiprintf_r+0x186>
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	1d1a      	adds	r2, r3, #4
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	9203      	str	r2, [sp, #12]
 80087d8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80087dc:	3402      	adds	r4, #2
 80087de:	9305      	str	r3, [sp, #20]
 80087e0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80088a4 <_svfiprintf_r+0x1f4>
 80087e4:	7821      	ldrb	r1, [r4, #0]
 80087e6:	2203      	movs	r2, #3
 80087e8:	4650      	mov	r0, sl
 80087ea:	f7f7 fd09 	bl	8000200 <memchr>
 80087ee:	b138      	cbz	r0, 8008800 <_svfiprintf_r+0x150>
 80087f0:	9b04      	ldr	r3, [sp, #16]
 80087f2:	eba0 000a 	sub.w	r0, r0, sl
 80087f6:	2240      	movs	r2, #64	@ 0x40
 80087f8:	4082      	lsls	r2, r0
 80087fa:	4313      	orrs	r3, r2
 80087fc:	3401      	adds	r4, #1
 80087fe:	9304      	str	r3, [sp, #16]
 8008800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008804:	4824      	ldr	r0, [pc, #144]	@ (8008898 <_svfiprintf_r+0x1e8>)
 8008806:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800880a:	2206      	movs	r2, #6
 800880c:	f7f7 fcf8 	bl	8000200 <memchr>
 8008810:	2800      	cmp	r0, #0
 8008812:	d036      	beq.n	8008882 <_svfiprintf_r+0x1d2>
 8008814:	4b21      	ldr	r3, [pc, #132]	@ (800889c <_svfiprintf_r+0x1ec>)
 8008816:	bb1b      	cbnz	r3, 8008860 <_svfiprintf_r+0x1b0>
 8008818:	9b03      	ldr	r3, [sp, #12]
 800881a:	3307      	adds	r3, #7
 800881c:	f023 0307 	bic.w	r3, r3, #7
 8008820:	3308      	adds	r3, #8
 8008822:	9303      	str	r3, [sp, #12]
 8008824:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008826:	4433      	add	r3, r6
 8008828:	9309      	str	r3, [sp, #36]	@ 0x24
 800882a:	e76a      	b.n	8008702 <_svfiprintf_r+0x52>
 800882c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008830:	460c      	mov	r4, r1
 8008832:	2001      	movs	r0, #1
 8008834:	e7a8      	b.n	8008788 <_svfiprintf_r+0xd8>
 8008836:	2300      	movs	r3, #0
 8008838:	3401      	adds	r4, #1
 800883a:	9305      	str	r3, [sp, #20]
 800883c:	4619      	mov	r1, r3
 800883e:	f04f 0c0a 	mov.w	ip, #10
 8008842:	4620      	mov	r0, r4
 8008844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008848:	3a30      	subs	r2, #48	@ 0x30
 800884a:	2a09      	cmp	r2, #9
 800884c:	d903      	bls.n	8008856 <_svfiprintf_r+0x1a6>
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0c6      	beq.n	80087e0 <_svfiprintf_r+0x130>
 8008852:	9105      	str	r1, [sp, #20]
 8008854:	e7c4      	b.n	80087e0 <_svfiprintf_r+0x130>
 8008856:	fb0c 2101 	mla	r1, ip, r1, r2
 800885a:	4604      	mov	r4, r0
 800885c:	2301      	movs	r3, #1
 800885e:	e7f0      	b.n	8008842 <_svfiprintf_r+0x192>
 8008860:	ab03      	add	r3, sp, #12
 8008862:	9300      	str	r3, [sp, #0]
 8008864:	462a      	mov	r2, r5
 8008866:	4b0e      	ldr	r3, [pc, #56]	@ (80088a0 <_svfiprintf_r+0x1f0>)
 8008868:	a904      	add	r1, sp, #16
 800886a:	4638      	mov	r0, r7
 800886c:	f3af 8000 	nop.w
 8008870:	1c42      	adds	r2, r0, #1
 8008872:	4606      	mov	r6, r0
 8008874:	d1d6      	bne.n	8008824 <_svfiprintf_r+0x174>
 8008876:	89ab      	ldrh	r3, [r5, #12]
 8008878:	065b      	lsls	r3, r3, #25
 800887a:	f53f af2d 	bmi.w	80086d8 <_svfiprintf_r+0x28>
 800887e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008880:	e72c      	b.n	80086dc <_svfiprintf_r+0x2c>
 8008882:	ab03      	add	r3, sp, #12
 8008884:	9300      	str	r3, [sp, #0]
 8008886:	462a      	mov	r2, r5
 8008888:	4b05      	ldr	r3, [pc, #20]	@ (80088a0 <_svfiprintf_r+0x1f0>)
 800888a:	a904      	add	r1, sp, #16
 800888c:	4638      	mov	r0, r7
 800888e:	f000 f879 	bl	8008984 <_printf_i>
 8008892:	e7ed      	b.n	8008870 <_svfiprintf_r+0x1c0>
 8008894:	0800945d 	.word	0x0800945d
 8008898:	08009467 	.word	0x08009467
 800889c:	00000000 	.word	0x00000000
 80088a0:	080085f9 	.word	0x080085f9
 80088a4:	08009463 	.word	0x08009463

080088a8 <_printf_common>:
 80088a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	4616      	mov	r6, r2
 80088ae:	4698      	mov	r8, r3
 80088b0:	688a      	ldr	r2, [r1, #8]
 80088b2:	690b      	ldr	r3, [r1, #16]
 80088b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	bfb8      	it	lt
 80088bc:	4613      	movlt	r3, r2
 80088be:	6033      	str	r3, [r6, #0]
 80088c0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80088c4:	4607      	mov	r7, r0
 80088c6:	460c      	mov	r4, r1
 80088c8:	b10a      	cbz	r2, 80088ce <_printf_common+0x26>
 80088ca:	3301      	adds	r3, #1
 80088cc:	6033      	str	r3, [r6, #0]
 80088ce:	6823      	ldr	r3, [r4, #0]
 80088d0:	0699      	lsls	r1, r3, #26
 80088d2:	bf42      	ittt	mi
 80088d4:	6833      	ldrmi	r3, [r6, #0]
 80088d6:	3302      	addmi	r3, #2
 80088d8:	6033      	strmi	r3, [r6, #0]
 80088da:	6825      	ldr	r5, [r4, #0]
 80088dc:	f015 0506 	ands.w	r5, r5, #6
 80088e0:	d106      	bne.n	80088f0 <_printf_common+0x48>
 80088e2:	f104 0a19 	add.w	sl, r4, #25
 80088e6:	68e3      	ldr	r3, [r4, #12]
 80088e8:	6832      	ldr	r2, [r6, #0]
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	42ab      	cmp	r3, r5
 80088ee:	dc26      	bgt.n	800893e <_printf_common+0x96>
 80088f0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80088f4:	6822      	ldr	r2, [r4, #0]
 80088f6:	3b00      	subs	r3, #0
 80088f8:	bf18      	it	ne
 80088fa:	2301      	movne	r3, #1
 80088fc:	0692      	lsls	r2, r2, #26
 80088fe:	d42b      	bmi.n	8008958 <_printf_common+0xb0>
 8008900:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008904:	4641      	mov	r1, r8
 8008906:	4638      	mov	r0, r7
 8008908:	47c8      	blx	r9
 800890a:	3001      	adds	r0, #1
 800890c:	d01e      	beq.n	800894c <_printf_common+0xa4>
 800890e:	6823      	ldr	r3, [r4, #0]
 8008910:	6922      	ldr	r2, [r4, #16]
 8008912:	f003 0306 	and.w	r3, r3, #6
 8008916:	2b04      	cmp	r3, #4
 8008918:	bf02      	ittt	eq
 800891a:	68e5      	ldreq	r5, [r4, #12]
 800891c:	6833      	ldreq	r3, [r6, #0]
 800891e:	1aed      	subeq	r5, r5, r3
 8008920:	68a3      	ldr	r3, [r4, #8]
 8008922:	bf0c      	ite	eq
 8008924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008928:	2500      	movne	r5, #0
 800892a:	4293      	cmp	r3, r2
 800892c:	bfc4      	itt	gt
 800892e:	1a9b      	subgt	r3, r3, r2
 8008930:	18ed      	addgt	r5, r5, r3
 8008932:	2600      	movs	r6, #0
 8008934:	341a      	adds	r4, #26
 8008936:	42b5      	cmp	r5, r6
 8008938:	d11a      	bne.n	8008970 <_printf_common+0xc8>
 800893a:	2000      	movs	r0, #0
 800893c:	e008      	b.n	8008950 <_printf_common+0xa8>
 800893e:	2301      	movs	r3, #1
 8008940:	4652      	mov	r2, sl
 8008942:	4641      	mov	r1, r8
 8008944:	4638      	mov	r0, r7
 8008946:	47c8      	blx	r9
 8008948:	3001      	adds	r0, #1
 800894a:	d103      	bne.n	8008954 <_printf_common+0xac>
 800894c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008954:	3501      	adds	r5, #1
 8008956:	e7c6      	b.n	80088e6 <_printf_common+0x3e>
 8008958:	18e1      	adds	r1, r4, r3
 800895a:	1c5a      	adds	r2, r3, #1
 800895c:	2030      	movs	r0, #48	@ 0x30
 800895e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008962:	4422      	add	r2, r4
 8008964:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008968:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800896c:	3302      	adds	r3, #2
 800896e:	e7c7      	b.n	8008900 <_printf_common+0x58>
 8008970:	2301      	movs	r3, #1
 8008972:	4622      	mov	r2, r4
 8008974:	4641      	mov	r1, r8
 8008976:	4638      	mov	r0, r7
 8008978:	47c8      	blx	r9
 800897a:	3001      	adds	r0, #1
 800897c:	d0e6      	beq.n	800894c <_printf_common+0xa4>
 800897e:	3601      	adds	r6, #1
 8008980:	e7d9      	b.n	8008936 <_printf_common+0x8e>
	...

08008984 <_printf_i>:
 8008984:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008988:	7e0f      	ldrb	r7, [r1, #24]
 800898a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800898c:	2f78      	cmp	r7, #120	@ 0x78
 800898e:	4691      	mov	r9, r2
 8008990:	4680      	mov	r8, r0
 8008992:	460c      	mov	r4, r1
 8008994:	469a      	mov	sl, r3
 8008996:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800899a:	d807      	bhi.n	80089ac <_printf_i+0x28>
 800899c:	2f62      	cmp	r7, #98	@ 0x62
 800899e:	d80a      	bhi.n	80089b6 <_printf_i+0x32>
 80089a0:	2f00      	cmp	r7, #0
 80089a2:	f000 80d2 	beq.w	8008b4a <_printf_i+0x1c6>
 80089a6:	2f58      	cmp	r7, #88	@ 0x58
 80089a8:	f000 80b9 	beq.w	8008b1e <_printf_i+0x19a>
 80089ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80089b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80089b4:	e03a      	b.n	8008a2c <_printf_i+0xa8>
 80089b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80089ba:	2b15      	cmp	r3, #21
 80089bc:	d8f6      	bhi.n	80089ac <_printf_i+0x28>
 80089be:	a101      	add	r1, pc, #4	@ (adr r1, 80089c4 <_printf_i+0x40>)
 80089c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80089c4:	08008a1d 	.word	0x08008a1d
 80089c8:	08008a31 	.word	0x08008a31
 80089cc:	080089ad 	.word	0x080089ad
 80089d0:	080089ad 	.word	0x080089ad
 80089d4:	080089ad 	.word	0x080089ad
 80089d8:	080089ad 	.word	0x080089ad
 80089dc:	08008a31 	.word	0x08008a31
 80089e0:	080089ad 	.word	0x080089ad
 80089e4:	080089ad 	.word	0x080089ad
 80089e8:	080089ad 	.word	0x080089ad
 80089ec:	080089ad 	.word	0x080089ad
 80089f0:	08008b31 	.word	0x08008b31
 80089f4:	08008a5b 	.word	0x08008a5b
 80089f8:	08008aeb 	.word	0x08008aeb
 80089fc:	080089ad 	.word	0x080089ad
 8008a00:	080089ad 	.word	0x080089ad
 8008a04:	08008b53 	.word	0x08008b53
 8008a08:	080089ad 	.word	0x080089ad
 8008a0c:	08008a5b 	.word	0x08008a5b
 8008a10:	080089ad 	.word	0x080089ad
 8008a14:	080089ad 	.word	0x080089ad
 8008a18:	08008af3 	.word	0x08008af3
 8008a1c:	6833      	ldr	r3, [r6, #0]
 8008a1e:	1d1a      	adds	r2, r3, #4
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6032      	str	r2, [r6, #0]
 8008a24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008a28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e09d      	b.n	8008b6c <_printf_i+0x1e8>
 8008a30:	6833      	ldr	r3, [r6, #0]
 8008a32:	6820      	ldr	r0, [r4, #0]
 8008a34:	1d19      	adds	r1, r3, #4
 8008a36:	6031      	str	r1, [r6, #0]
 8008a38:	0606      	lsls	r6, r0, #24
 8008a3a:	d501      	bpl.n	8008a40 <_printf_i+0xbc>
 8008a3c:	681d      	ldr	r5, [r3, #0]
 8008a3e:	e003      	b.n	8008a48 <_printf_i+0xc4>
 8008a40:	0645      	lsls	r5, r0, #25
 8008a42:	d5fb      	bpl.n	8008a3c <_printf_i+0xb8>
 8008a44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008a48:	2d00      	cmp	r5, #0
 8008a4a:	da03      	bge.n	8008a54 <_printf_i+0xd0>
 8008a4c:	232d      	movs	r3, #45	@ 0x2d
 8008a4e:	426d      	negs	r5, r5
 8008a50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008a54:	4859      	ldr	r0, [pc, #356]	@ (8008bbc <_printf_i+0x238>)
 8008a56:	230a      	movs	r3, #10
 8008a58:	e011      	b.n	8008a7e <_printf_i+0xfa>
 8008a5a:	6821      	ldr	r1, [r4, #0]
 8008a5c:	6833      	ldr	r3, [r6, #0]
 8008a5e:	0608      	lsls	r0, r1, #24
 8008a60:	f853 5b04 	ldr.w	r5, [r3], #4
 8008a64:	d402      	bmi.n	8008a6c <_printf_i+0xe8>
 8008a66:	0649      	lsls	r1, r1, #25
 8008a68:	bf48      	it	mi
 8008a6a:	b2ad      	uxthmi	r5, r5
 8008a6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008a6e:	4853      	ldr	r0, [pc, #332]	@ (8008bbc <_printf_i+0x238>)
 8008a70:	6033      	str	r3, [r6, #0]
 8008a72:	bf14      	ite	ne
 8008a74:	230a      	movne	r3, #10
 8008a76:	2308      	moveq	r3, #8
 8008a78:	2100      	movs	r1, #0
 8008a7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008a7e:	6866      	ldr	r6, [r4, #4]
 8008a80:	60a6      	str	r6, [r4, #8]
 8008a82:	2e00      	cmp	r6, #0
 8008a84:	bfa2      	ittt	ge
 8008a86:	6821      	ldrge	r1, [r4, #0]
 8008a88:	f021 0104 	bicge.w	r1, r1, #4
 8008a8c:	6021      	strge	r1, [r4, #0]
 8008a8e:	b90d      	cbnz	r5, 8008a94 <_printf_i+0x110>
 8008a90:	2e00      	cmp	r6, #0
 8008a92:	d04b      	beq.n	8008b2c <_printf_i+0x1a8>
 8008a94:	4616      	mov	r6, r2
 8008a96:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a9a:	fb03 5711 	mls	r7, r3, r1, r5
 8008a9e:	5dc7      	ldrb	r7, [r0, r7]
 8008aa0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008aa4:	462f      	mov	r7, r5
 8008aa6:	42bb      	cmp	r3, r7
 8008aa8:	460d      	mov	r5, r1
 8008aaa:	d9f4      	bls.n	8008a96 <_printf_i+0x112>
 8008aac:	2b08      	cmp	r3, #8
 8008aae:	d10b      	bne.n	8008ac8 <_printf_i+0x144>
 8008ab0:	6823      	ldr	r3, [r4, #0]
 8008ab2:	07df      	lsls	r7, r3, #31
 8008ab4:	d508      	bpl.n	8008ac8 <_printf_i+0x144>
 8008ab6:	6923      	ldr	r3, [r4, #16]
 8008ab8:	6861      	ldr	r1, [r4, #4]
 8008aba:	4299      	cmp	r1, r3
 8008abc:	bfde      	ittt	le
 8008abe:	2330      	movle	r3, #48	@ 0x30
 8008ac0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008ac4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008ac8:	1b92      	subs	r2, r2, r6
 8008aca:	6122      	str	r2, [r4, #16]
 8008acc:	f8cd a000 	str.w	sl, [sp]
 8008ad0:	464b      	mov	r3, r9
 8008ad2:	aa03      	add	r2, sp, #12
 8008ad4:	4621      	mov	r1, r4
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	f7ff fee6 	bl	80088a8 <_printf_common>
 8008adc:	3001      	adds	r0, #1
 8008ade:	d14a      	bne.n	8008b76 <_printf_i+0x1f2>
 8008ae0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ae4:	b004      	add	sp, #16
 8008ae6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	f043 0320 	orr.w	r3, r3, #32
 8008af0:	6023      	str	r3, [r4, #0]
 8008af2:	4833      	ldr	r0, [pc, #204]	@ (8008bc0 <_printf_i+0x23c>)
 8008af4:	2778      	movs	r7, #120	@ 0x78
 8008af6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008afa:	6823      	ldr	r3, [r4, #0]
 8008afc:	6831      	ldr	r1, [r6, #0]
 8008afe:	061f      	lsls	r7, r3, #24
 8008b00:	f851 5b04 	ldr.w	r5, [r1], #4
 8008b04:	d402      	bmi.n	8008b0c <_printf_i+0x188>
 8008b06:	065f      	lsls	r7, r3, #25
 8008b08:	bf48      	it	mi
 8008b0a:	b2ad      	uxthmi	r5, r5
 8008b0c:	6031      	str	r1, [r6, #0]
 8008b0e:	07d9      	lsls	r1, r3, #31
 8008b10:	bf44      	itt	mi
 8008b12:	f043 0320 	orrmi.w	r3, r3, #32
 8008b16:	6023      	strmi	r3, [r4, #0]
 8008b18:	b11d      	cbz	r5, 8008b22 <_printf_i+0x19e>
 8008b1a:	2310      	movs	r3, #16
 8008b1c:	e7ac      	b.n	8008a78 <_printf_i+0xf4>
 8008b1e:	4827      	ldr	r0, [pc, #156]	@ (8008bbc <_printf_i+0x238>)
 8008b20:	e7e9      	b.n	8008af6 <_printf_i+0x172>
 8008b22:	6823      	ldr	r3, [r4, #0]
 8008b24:	f023 0320 	bic.w	r3, r3, #32
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	e7f6      	b.n	8008b1a <_printf_i+0x196>
 8008b2c:	4616      	mov	r6, r2
 8008b2e:	e7bd      	b.n	8008aac <_printf_i+0x128>
 8008b30:	6833      	ldr	r3, [r6, #0]
 8008b32:	6825      	ldr	r5, [r4, #0]
 8008b34:	6961      	ldr	r1, [r4, #20]
 8008b36:	1d18      	adds	r0, r3, #4
 8008b38:	6030      	str	r0, [r6, #0]
 8008b3a:	062e      	lsls	r6, r5, #24
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	d501      	bpl.n	8008b44 <_printf_i+0x1c0>
 8008b40:	6019      	str	r1, [r3, #0]
 8008b42:	e002      	b.n	8008b4a <_printf_i+0x1c6>
 8008b44:	0668      	lsls	r0, r5, #25
 8008b46:	d5fb      	bpl.n	8008b40 <_printf_i+0x1bc>
 8008b48:	8019      	strh	r1, [r3, #0]
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	6123      	str	r3, [r4, #16]
 8008b4e:	4616      	mov	r6, r2
 8008b50:	e7bc      	b.n	8008acc <_printf_i+0x148>
 8008b52:	6833      	ldr	r3, [r6, #0]
 8008b54:	1d1a      	adds	r2, r3, #4
 8008b56:	6032      	str	r2, [r6, #0]
 8008b58:	681e      	ldr	r6, [r3, #0]
 8008b5a:	6862      	ldr	r2, [r4, #4]
 8008b5c:	2100      	movs	r1, #0
 8008b5e:	4630      	mov	r0, r6
 8008b60:	f7f7 fb4e 	bl	8000200 <memchr>
 8008b64:	b108      	cbz	r0, 8008b6a <_printf_i+0x1e6>
 8008b66:	1b80      	subs	r0, r0, r6
 8008b68:	6060      	str	r0, [r4, #4]
 8008b6a:	6863      	ldr	r3, [r4, #4]
 8008b6c:	6123      	str	r3, [r4, #16]
 8008b6e:	2300      	movs	r3, #0
 8008b70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b74:	e7aa      	b.n	8008acc <_printf_i+0x148>
 8008b76:	6923      	ldr	r3, [r4, #16]
 8008b78:	4632      	mov	r2, r6
 8008b7a:	4649      	mov	r1, r9
 8008b7c:	4640      	mov	r0, r8
 8008b7e:	47d0      	blx	sl
 8008b80:	3001      	adds	r0, #1
 8008b82:	d0ad      	beq.n	8008ae0 <_printf_i+0x15c>
 8008b84:	6823      	ldr	r3, [r4, #0]
 8008b86:	079b      	lsls	r3, r3, #30
 8008b88:	d413      	bmi.n	8008bb2 <_printf_i+0x22e>
 8008b8a:	68e0      	ldr	r0, [r4, #12]
 8008b8c:	9b03      	ldr	r3, [sp, #12]
 8008b8e:	4298      	cmp	r0, r3
 8008b90:	bfb8      	it	lt
 8008b92:	4618      	movlt	r0, r3
 8008b94:	e7a6      	b.n	8008ae4 <_printf_i+0x160>
 8008b96:	2301      	movs	r3, #1
 8008b98:	4632      	mov	r2, r6
 8008b9a:	4649      	mov	r1, r9
 8008b9c:	4640      	mov	r0, r8
 8008b9e:	47d0      	blx	sl
 8008ba0:	3001      	adds	r0, #1
 8008ba2:	d09d      	beq.n	8008ae0 <_printf_i+0x15c>
 8008ba4:	3501      	adds	r5, #1
 8008ba6:	68e3      	ldr	r3, [r4, #12]
 8008ba8:	9903      	ldr	r1, [sp, #12]
 8008baa:	1a5b      	subs	r3, r3, r1
 8008bac:	42ab      	cmp	r3, r5
 8008bae:	dcf2      	bgt.n	8008b96 <_printf_i+0x212>
 8008bb0:	e7eb      	b.n	8008b8a <_printf_i+0x206>
 8008bb2:	2500      	movs	r5, #0
 8008bb4:	f104 0619 	add.w	r6, r4, #25
 8008bb8:	e7f5      	b.n	8008ba6 <_printf_i+0x222>
 8008bba:	bf00      	nop
 8008bbc:	0800946e 	.word	0x0800946e
 8008bc0:	0800947f 	.word	0x0800947f

08008bc4 <memmove>:
 8008bc4:	4288      	cmp	r0, r1
 8008bc6:	b510      	push	{r4, lr}
 8008bc8:	eb01 0402 	add.w	r4, r1, r2
 8008bcc:	d902      	bls.n	8008bd4 <memmove+0x10>
 8008bce:	4284      	cmp	r4, r0
 8008bd0:	4623      	mov	r3, r4
 8008bd2:	d807      	bhi.n	8008be4 <memmove+0x20>
 8008bd4:	1e43      	subs	r3, r0, #1
 8008bd6:	42a1      	cmp	r1, r4
 8008bd8:	d008      	beq.n	8008bec <memmove+0x28>
 8008bda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008be2:	e7f8      	b.n	8008bd6 <memmove+0x12>
 8008be4:	4402      	add	r2, r0
 8008be6:	4601      	mov	r1, r0
 8008be8:	428a      	cmp	r2, r1
 8008bea:	d100      	bne.n	8008bee <memmove+0x2a>
 8008bec:	bd10      	pop	{r4, pc}
 8008bee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bf6:	e7f7      	b.n	8008be8 <memmove+0x24>

08008bf8 <_sbrk_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4d06      	ldr	r5, [pc, #24]	@ (8008c14 <_sbrk_r+0x1c>)
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	4604      	mov	r4, r0
 8008c00:	4608      	mov	r0, r1
 8008c02:	602b      	str	r3, [r5, #0]
 8008c04:	f7f9 fcce 	bl	80025a4 <_sbrk>
 8008c08:	1c43      	adds	r3, r0, #1
 8008c0a:	d102      	bne.n	8008c12 <_sbrk_r+0x1a>
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	b103      	cbz	r3, 8008c12 <_sbrk_r+0x1a>
 8008c10:	6023      	str	r3, [r4, #0]
 8008c12:	bd38      	pop	{r3, r4, r5, pc}
 8008c14:	20019514 	.word	0x20019514

08008c18 <_realloc_r>:
 8008c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1c:	4680      	mov	r8, r0
 8008c1e:	4615      	mov	r5, r2
 8008c20:	460c      	mov	r4, r1
 8008c22:	b921      	cbnz	r1, 8008c2e <_realloc_r+0x16>
 8008c24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c28:	4611      	mov	r1, r2
 8008c2a:	f7ff bc59 	b.w	80084e0 <_malloc_r>
 8008c2e:	b92a      	cbnz	r2, 8008c3c <_realloc_r+0x24>
 8008c30:	f7ff fbea 	bl	8008408 <_free_r>
 8008c34:	2400      	movs	r4, #0
 8008c36:	4620      	mov	r0, r4
 8008c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c3c:	f000 f81a 	bl	8008c74 <_malloc_usable_size_r>
 8008c40:	4285      	cmp	r5, r0
 8008c42:	4606      	mov	r6, r0
 8008c44:	d802      	bhi.n	8008c4c <_realloc_r+0x34>
 8008c46:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008c4a:	d8f4      	bhi.n	8008c36 <_realloc_r+0x1e>
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	4640      	mov	r0, r8
 8008c50:	f7ff fc46 	bl	80084e0 <_malloc_r>
 8008c54:	4607      	mov	r7, r0
 8008c56:	2800      	cmp	r0, #0
 8008c58:	d0ec      	beq.n	8008c34 <_realloc_r+0x1c>
 8008c5a:	42b5      	cmp	r5, r6
 8008c5c:	462a      	mov	r2, r5
 8008c5e:	4621      	mov	r1, r4
 8008c60:	bf28      	it	cs
 8008c62:	4632      	movcs	r2, r6
 8008c64:	f7ff fbc2 	bl	80083ec <memcpy>
 8008c68:	4621      	mov	r1, r4
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	f7ff fbcc 	bl	8008408 <_free_r>
 8008c70:	463c      	mov	r4, r7
 8008c72:	e7e0      	b.n	8008c36 <_realloc_r+0x1e>

08008c74 <_malloc_usable_size_r>:
 8008c74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c78:	1f18      	subs	r0, r3, #4
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	bfbc      	itt	lt
 8008c7e:	580b      	ldrlt	r3, [r1, r0]
 8008c80:	18c0      	addlt	r0, r0, r3
 8008c82:	4770      	bx	lr

08008c84 <_init>:
 8008c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c86:	bf00      	nop
 8008c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c8a:	bc08      	pop	{r3}
 8008c8c:	469e      	mov	lr, r3
 8008c8e:	4770      	bx	lr

08008c90 <_fini>:
 8008c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c92:	bf00      	nop
 8008c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c96:	bc08      	pop	{r3}
 8008c98:	469e      	mov	lr, r3
 8008c9a:	4770      	bx	lr
