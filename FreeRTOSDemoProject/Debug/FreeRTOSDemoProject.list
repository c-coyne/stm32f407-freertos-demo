
FreeRTOSDemoProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c5c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000944  08008dec  08008dec  00009dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009730  08009730  0000b0c8  2**0
                  CONTENTS
  4 .ARM          00000008  08009730  08009730  0000a730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009738  08009738  0000b0c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009738  08009738  0000a738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800973c  0800973c  0000a73c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c8  20000000  08009740  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b0c8  2**0
                  CONTENTS
 10 .bss          00019468  200000c8  200000c8  0000b0c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20019530  20019530  0000b0c8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b0c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000166f1  00000000  00000000  0000b0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a73  00000000  00000000  000217e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013c8  00000000  00000000  00025260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f52  00000000  00000000  00026628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a33  00000000  00000000  0002757a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018f1d  00000000  00000000  0004bfad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db382  00000000  00000000  00064eca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014024c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057cc  00000000  00000000  00140290  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00145a5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c8 	.word	0x200000c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008dd4 	.word	0x08008dd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	08008dd4 	.word	0x08008dd4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <acc_task>:
/****************************************************
 *  Public functions                                *
 ****************************************************/

void acc_task(void* param)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b086      	sub	sp, #24
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000d84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	2100      	movs	r1, #0
 8000d90:	2000      	movs	r0, #0
 8000d92:	f006 f8b3 	bl	8006efc <xTaskGenericNotifyWait>

		// Display Accelerometer menu for the user
		xQueueSend(q_print, &msg_acc_menu, portMAX_DELAY);
 8000d96:	4b2a      	ldr	r3, [pc, #168]	@ (8000e40 <acc_task+0xc4>)
 8000d98:	6818      	ldr	r0, [r3, #0]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000da0:	4928      	ldr	r1, [pc, #160]	@ (8000e44 <acc_task+0xc8>)
 8000da2:	f004 fddd 	bl	8005960 <xQueueGenericSend>

		// Wait for the user to make a selection
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000dae:	9200      	str	r2, [sp, #0]
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	2000      	movs	r0, #0
 8000db6:	f006 f8a1 	bl	8006efc <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8000dba:	68bb      	ldr	r3, [r7, #8]
 8000dbc:	60fb      	str	r3, [r7, #12]

		// Process command
		if(msg->len <= 4) {
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	d825      	bhi.n	8000e12 <acc_task+0x96>
			if(!strcmp((char*)msg->payload, "Read")) {
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	491f      	ldr	r1, [pc, #124]	@ (8000e48 <acc_task+0xcc>)
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f7ff fa00 	bl	80001d0 <strcmp>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d025      	beq.n	8000e22 <acc_task+0xa6>
				// Take an accelerometer reading
			}
			else if (!strcmp((char*)msg->payload, "Main")) {
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	491c      	ldr	r1, [pc, #112]	@ (8000e4c <acc_task+0xd0>)
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff f9f8 	bl	80001d0 <strcmp>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10c      	bne.n	8000e00 <acc_task+0x84>
				// Update the system state
				curr_sys_state = sMainMenu;
 8000de6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <acc_task+0xd4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8000dec:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <acc_task+0xd8>)
 8000dee:	6818      	ldr	r0, [r3, #0]
 8000df0:	2300      	movs	r3, #0
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2300      	movs	r3, #0
 8000df6:	2200      	movs	r2, #0
 8000df8:	2100      	movs	r1, #0
 8000dfa:	f006 f8ff 	bl	8006ffc <xTaskGenericNotify>
 8000dfe:	e010      	b.n	8000e22 <acc_task+0xa6>
			}
			else {
				xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 8000e00:	4b0f      	ldr	r3, [pc, #60]	@ (8000e40 <acc_task+0xc4>)
 8000e02:	6818      	ldr	r0, [r3, #0]
 8000e04:	2300      	movs	r3, #0
 8000e06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e0a:	4913      	ldr	r1, [pc, #76]	@ (8000e58 <acc_task+0xdc>)
 8000e0c:	f004 fda8 	bl	8005960 <xQueueGenericSend>
 8000e10:	e007      	b.n	8000e22 <acc_task+0xa6>
			}
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 8000e12:	4b0b      	ldr	r3, [pc, #44]	@ (8000e40 <acc_task+0xc4>)
 8000e14:	6818      	ldr	r0, [r3, #0]
 8000e16:	2300      	movs	r3, #0
 8000e18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e1c:	490e      	ldr	r1, [pc, #56]	@ (8000e58 <acc_task+0xdc>)
 8000e1e:	f004 fd9f 	bl	8005960 <xQueueGenericSend>
		}

		// Notify self / accelerometer task if not returning to the main menu
		if (sAccMenu == curr_sys_state)
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <acc_task+0xd4>)
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d1ac      	bne.n	8000d84 <acc_task+0x8>
			xTaskNotify(handle_acc_task, 0, eNoAction);
 8000e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e5c <acc_task+0xe0>)
 8000e2c:	6818      	ldr	r0, [r3, #0]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2300      	movs	r3, #0
 8000e34:	2200      	movs	r2, #0
 8000e36:	2100      	movs	r1, #0
 8000e38:	f006 f8e0 	bl	8006ffc <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000e3c:	e7a2      	b.n	8000d84 <acc_task+0x8>
 8000e3e:	bf00      	nop
 8000e40:	200001d4 	.word	0x200001d4
 8000e44:	20000004 	.word	0x20000004
 8000e48:	08008ef4 	.word	0x08008ef4
 8000e4c:	08008efc 	.word	0x08008efc
 8000e50:	200001ed 	.word	0x200001ed
 8000e54:	200001bc 	.word	0x200001bc
 8000e58:	20000000 	.word	0x20000000
 8000e5c:	200001d0 	.word	0x200001d0

08000e60 <led_task>:
 * @note The task must be notified when a new command is available.									   *
 * @note The function utilizes software timers to control LED effects.								   *
 ******************************************************************************************************/

void led_task(void *param)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;
	int freq = 2; // Frequency in Hz
 8000e68:	2302      	movs	r3, #2
 8000e6a:	60bb      	str	r3, [r7, #8]
	int period = 500; // Period in ms
 8000e6c:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e70:	617b      	str	r3, [r7, #20]

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000e72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e76:	9300      	str	r3, [sp, #0]
 8000e78:	2300      	movs	r3, #0
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f006 f83c 	bl	8006efc <xTaskGenericNotifyWait>

		// Display LED menu for the user
		xQueueSend(q_print, &msg_led_menu, portMAX_DELAY);
 8000e84:	4b7d      	ldr	r3, [pc, #500]	@ (800107c <led_task+0x21c>)
 8000e86:	6818      	ldr	r0, [r3, #0]
 8000e88:	2300      	movs	r3, #0
 8000e8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e8e:	497c      	ldr	r1, [pc, #496]	@ (8001080 <led_task+0x220>)
 8000e90:	f004 fd66 	bl	8005960 <xQueueGenericSend>

		// Wait for the user to select their desired LED effect
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e9c:	9200      	str	r2, [sp, #0]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f006 f82a 	bl	8006efc <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	613b      	str	r3, [r7, #16]

		// Process command, adjust LED state, and set software timers accordingly
		if(msg->len <= 4) {
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	f200 80cb 	bhi.w	800104c <led_task+0x1ec>
			if(!strcmp((char*)msg->payload, "None"))			// No effect
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4972      	ldr	r1, [pc, #456]	@ (8001084 <led_task+0x224>)
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff f988 	bl	80001d0 <strcmp>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d109      	bne.n	8000eda <led_task+0x7a>
			{
				set_led_timer(effectNone);
 8000ec6:	2004      	movs	r0, #4
 8000ec8:	f000 f912 	bl	80010f0 <set_led_timer>
				curr_led_state = sNone;
 8000ecc:	4b6e      	ldr	r3, [pc, #440]	@ (8001088 <led_task+0x228>)
 8000ece:	2204      	movs	r2, #4
 8000ed0:	701a      	strb	r2, [r3, #0]
				control_all_leds(LED_OFF);
 8000ed2:	2000      	movs	r0, #0
 8000ed4:	f000 f93e 	bl	8001154 <control_all_leds>
 8000ed8:	e0c0      	b.n	800105c <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E1")) {		// E1 effect
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	496b      	ldr	r1, [pc, #428]	@ (800108c <led_task+0x22c>)
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff f976 	bl	80001d0 <strcmp>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d106      	bne.n	8000ef8 <led_task+0x98>
				curr_led_state = sEffectE1;
 8000eea:	4b67      	ldr	r3, [pc, #412]	@ (8001088 <led_task+0x228>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE1);
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	f000 f8fd 	bl	80010f0 <set_led_timer>
 8000ef6:	e0b1      	b.n	800105c <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E2")) {		// E2 effect
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	4965      	ldr	r1, [pc, #404]	@ (8001090 <led_task+0x230>)
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff f967 	bl	80001d0 <strcmp>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d106      	bne.n	8000f16 <led_task+0xb6>
				curr_led_state = sEffectE2;
 8000f08:	4b5f      	ldr	r3, [pc, #380]	@ (8001088 <led_task+0x228>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE2);
 8000f0e:	2001      	movs	r0, #1
 8000f10:	f000 f8ee 	bl	80010f0 <set_led_timer>
 8000f14:	e0a2      	b.n	800105c <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E3")) {		// E3 effect
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	495e      	ldr	r1, [pc, #376]	@ (8001094 <led_task+0x234>)
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff f958 	bl	80001d0 <strcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d106      	bne.n	8000f34 <led_task+0xd4>
				curr_led_state = sEffectE3;
 8000f26:	4b58      	ldr	r3, [pc, #352]	@ (8001088 <led_task+0x228>)
 8000f28:	2202      	movs	r2, #2
 8000f2a:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE3);
 8000f2c:	2002      	movs	r0, #2
 8000f2e:	f000 f8df 	bl	80010f0 <set_led_timer>
 8000f32:	e093      	b.n	800105c <led_task+0x1fc>
			}
			else if (!strcmp((char*)msg->payload, "E4")) {		// E4 effect
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	4958      	ldr	r1, [pc, #352]	@ (8001098 <led_task+0x238>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f7ff f949 	bl	80001d0 <strcmp>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d106      	bne.n	8000f52 <led_task+0xf2>
				curr_led_state = sEffectE4;
 8000f44:	4b50      	ldr	r3, [pc, #320]	@ (8001088 <led_task+0x228>)
 8000f46:	2203      	movs	r2, #3
 8000f48:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE4);
 8000f4a:	2003      	movs	r0, #3
 8000f4c:	f000 f8d0 	bl	80010f0 <set_led_timer>
 8000f50:	e084      	b.n	800105c <led_task+0x1fc>
			}
			else if (parse_freq_string(msg, &freq)) {			// Frequency adjustment
 8000f52:	f107 0308 	add.w	r3, r7, #8
 8000f56:	4619      	mov	r1, r3
 8000f58:	6938      	ldr	r0, [r7, #16]
 8000f5a:	f000 f9ef 	bl	800133c <parse_freq_string>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d055      	beq.n	8001010 <led_task+0x1b0>
				// Check that there is an active effect
				if(sNone == curr_led_state) {
 8000f64:	4b48      	ldr	r3, [pc, #288]	@ (8001088 <led_task+0x228>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b04      	cmp	r3, #4
 8000f6a:	d108      	bne.n	8000f7e <led_task+0x11e>
					xQueueSend(q_print, &msg_no_active_effect, portMAX_DELAY);
 8000f6c:	4b43      	ldr	r3, [pc, #268]	@ (800107c <led_task+0x21c>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	2300      	movs	r3, #0
 8000f72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f76:	4949      	ldr	r1, [pc, #292]	@ (800109c <led_task+0x23c>)
 8000f78:	f004 fcf2 	bl	8005960 <xQueueGenericSend>
 8000f7c:	e06e      	b.n	800105c <led_task+0x1fc>
				}
				// Check that frequency is between 1 and 10 Hz
				else if(freq > 10) {
 8000f7e:	68bb      	ldr	r3, [r7, #8]
 8000f80:	2b0a      	cmp	r3, #10
 8000f82:	dd08      	ble.n	8000f96 <led_task+0x136>
					xQueueSend(q_print, &msg_inv_freq, portMAX_DELAY);
 8000f84:	4b3d      	ldr	r3, [pc, #244]	@ (800107c <led_task+0x21c>)
 8000f86:	6818      	ldr	r0, [r3, #0]
 8000f88:	2300      	movs	r3, #0
 8000f8a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f8e:	4944      	ldr	r1, [pc, #272]	@ (80010a0 <led_task+0x240>)
 8000f90:	f004 fce6 	bl	8005960 <xQueueGenericSend>
 8000f94:	e062      	b.n	800105c <led_task+0x1fc>
				}
				// Change timer frequency
				else {
					period = (1.0 / freq) * 1000;
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fad3 	bl	8000544 <__aeabi_i2d>
 8000f9e:	4602      	mov	r2, r0
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	f04f 0000 	mov.w	r0, #0
 8000fa6:	493f      	ldr	r1, [pc, #252]	@ (80010a4 <led_task+0x244>)
 8000fa8:	f7ff fc60 	bl	800086c <__aeabi_ddiv>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4610      	mov	r0, r2
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4b3b      	ldr	r3, [pc, #236]	@ (80010a8 <led_task+0x248>)
 8000fba:	f7ff fb2d 	bl	8000618 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f7ff fd39 	bl	8000a3c <__aeabi_d2iz>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	617b      	str	r3, [r7, #20]
					if (xTimerChangePeriod(handle_led_timer[curr_led_state], pdMS_TO_TICKS(period), 0) != pdPASS) {
 8000fce:	4b2e      	ldr	r3, [pc, #184]	@ (8001088 <led_task+0x228>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b35      	ldr	r3, [pc, #212]	@ (80010ac <led_task+0x24c>)
 8000fd6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000fe0:	fb02 f303 	mul.w	r3, r2, r3
 8000fe4:	4a32      	ldr	r2, [pc, #200]	@ (80010b0 <led_task+0x250>)
 8000fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8000fea:	099a      	lsrs	r2, r3, #6
 8000fec:	2300      	movs	r3, #0
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	f006 fae4 	bl	80075c0 <xTimerGenericCommand>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d02e      	beq.n	800105c <led_task+0x1fc>
						// If frequency update was not successful, notify the user
						xQueueSend(q_print, &msg_err_freq, portMAX_DELAY);
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	@ (800107c <led_task+0x21c>)
 8001000:	6818      	ldr	r0, [r3, #0]
 8001002:	2300      	movs	r3, #0
 8001004:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001008:	492a      	ldr	r1, [pc, #168]	@ (80010b4 <led_task+0x254>)
 800100a:	f004 fca9 	bl	8005960 <xQueueGenericSend>
 800100e:	e025      	b.n	800105c <led_task+0x1fc>
					}
				}
			}
			else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4929      	ldr	r1, [pc, #164]	@ (80010b8 <led_task+0x258>)
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff f8db 	bl	80001d0 <strcmp>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d10c      	bne.n	800103a <led_task+0x1da>
				// Update the system state
				curr_sys_state = sMainMenu;
 8001020:	4b26      	ldr	r3, [pc, #152]	@ (80010bc <led_task+0x25c>)
 8001022:	2200      	movs	r2, #0
 8001024:	701a      	strb	r2, [r3, #0]

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8001026:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <led_task+0x260>)
 8001028:	6818      	ldr	r0, [r3, #0]
 800102a:	2300      	movs	r3, #0
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2300      	movs	r3, #0
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	f005 ffe2 	bl	8006ffc <xTaskGenericNotify>
 8001038:	e010      	b.n	800105c <led_task+0x1fc>
			}
			else												// Invalid response
				xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <led_task+0x21c>)
 800103c:	6818      	ldr	r0, [r3, #0]
 800103e:	2300      	movs	r3, #0
 8001040:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001044:	491f      	ldr	r1, [pc, #124]	@ (80010c4 <led_task+0x264>)
 8001046:	f004 fc8b 	bl	8005960 <xQueueGenericSend>
 800104a:	e007      	b.n	800105c <led_task+0x1fc>
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 800104c:	4b0b      	ldr	r3, [pc, #44]	@ (800107c <led_task+0x21c>)
 800104e:	6818      	ldr	r0, [r3, #0]
 8001050:	2300      	movs	r3, #0
 8001052:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001056:	491b      	ldr	r1, [pc, #108]	@ (80010c4 <led_task+0x264>)
 8001058:	f004 fc82 	bl	8005960 <xQueueGenericSend>
		}

		// Notify self / led task if not returning to the main menu
		if (sLedMenu == curr_sys_state)
 800105c:	4b17      	ldr	r3, [pc, #92]	@ (80010bc <led_task+0x25c>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b01      	cmp	r3, #1
 8001062:	f47f af06 	bne.w	8000e72 <led_task+0x12>
			xTaskNotify(handle_led_task, 0, eNoAction);
 8001066:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <led_task+0x268>)
 8001068:	6818      	ldr	r0, [r3, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	f005 ffc2 	bl	8006ffc <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001078:	e6fb      	b.n	8000e72 <led_task+0x12>
 800107a:	bf00      	nop
 800107c:	200001d4 	.word	0x200001d4
 8001080:	20000018 	.word	0x20000018
 8001084:	0800914c 	.word	0x0800914c
 8001088:	2000001c 	.word	0x2000001c
 800108c:	08009154 	.word	0x08009154
 8001090:	08009158 	.word	0x08009158
 8001094:	0800915c 	.word	0x0800915c
 8001098:	08009160 	.word	0x08009160
 800109c:	2000000c 	.word	0x2000000c
 80010a0:	20000014 	.word	0x20000014
 80010a4:	3ff00000 	.word	0x3ff00000
 80010a8:	408f4000 	.word	0x408f4000
 80010ac:	200001dc 	.word	0x200001dc
 80010b0:	10624dd3 	.word	0x10624dd3
 80010b4:	20000010 	.word	0x20000010
 80010b8:	08009164 	.word	0x08009164
 80010bc:	200001ed 	.word	0x200001ed
 80010c0:	200001bc 	.word	0x200001bc
 80010c4:	20000008 	.word	0x20000008
 80010c8:	200001c8 	.word	0x200001c8

080010cc <led_callback>:
 * @note The function assumes that the timer IDs correspond directly to the LED effects to be executed *
 *       and relies on proper timer setup and management by the calling code.						   *
 ******************************************************************************************************/

void led_callback(TimerHandle_t xTimer)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b084      	sub	sp, #16
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
	// Get timer ID
	int id = (uint32_t)pvTimerGetTimerID(xTimer);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f006 fd5d 	bl	8007b94 <pvTimerGetTimerID>
 80010da:	4603      	mov	r3, r0
 80010dc:	60fb      	str	r3, [r7, #12]

	// LED effects correspond to timer ID's
	int effect = id;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
	execute_led_effect(effect);
 80010e2:	68b8      	ldr	r0, [r7, #8]
 80010e4:	f000 f8c4 	bl	8001270 <execute_led_effect>
}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <set_led_timer>:
 * @note This function assumes that `handle_led_timer[]` array is properly initialized and contains    *
 *       valid FreeRTOS software timer handles for each LED effect.									   *
 ******************************************************************************************************/

void set_led_timer(led_effect_t effect)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
	// Turn off all timers
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	e00e      	b.n	800111e <set_led_timer+0x2e>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 8001100:	4a13      	ldr	r2, [pc, #76]	@ (8001150 <set_led_timer+0x60>)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	2300      	movs	r3, #0
 8001110:	2200      	movs	r2, #0
 8001112:	2103      	movs	r1, #3
 8001114:	f006 fa54 	bl	80075c0 <xTimerGenericCommand>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	3301      	adds	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2b03      	cmp	r3, #3
 8001122:	dded      	ble.n	8001100 <set_led_timer+0x10>
	}

	// Start the selected timer
	if(effectNone != effect) {
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	2b04      	cmp	r3, #4
 8001128:	d00e      	beq.n	8001148 <set_led_timer+0x58>
		xTimerStart(handle_led_timer[effect], portMAX_DELAY);
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	4a08      	ldr	r2, [pc, #32]	@ (8001150 <set_led_timer+0x60>)
 800112e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001132:	f005 fb31 	bl	8006798 <xTaskGetTickCount>
 8001136:	4602      	mov	r2, r0
 8001138:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800113c:	9300      	str	r3, [sp, #0]
 800113e:	2300      	movs	r3, #0
 8001140:	2101      	movs	r1, #1
 8001142:	4620      	mov	r0, r4
 8001144:	f006 fa3c 	bl	80075c0 <xTimerGenericCommand>
	}
}
 8001148:	bf00      	nop
 800114a:	3714      	adds	r7, #20
 800114c:	46bd      	mov	sp, r7
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	200001dc 	.word	0x200001dc

08001154 <control_all_leds>:
 * 																									   *
 * @note This function assumes that the macros for each on-board LED are configured correctly.	       *
 ******************************************************************************************************/

void control_all_leds(int state)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, state);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001166:	480f      	ldr	r0, [pc, #60]	@ (80011a4 <control_all_leds+0x50>)
 8001168:	f001 fe8c 	bl	8002e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, state);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	b2db      	uxtb	r3, r3
 8001170:	461a      	mov	r2, r3
 8001172:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001176:	480b      	ldr	r0, [pc, #44]	@ (80011a4 <control_all_leds+0x50>)
 8001178:	f001 fe84 	bl	8002e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, state);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	b2db      	uxtb	r3, r3
 8001180:	461a      	mov	r2, r3
 8001182:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001186:	4807      	ldr	r0, [pc, #28]	@ (80011a4 <control_all_leds+0x50>)
 8001188:	f001 fe7c 	bl	8002e84 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, state);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	461a      	mov	r2, r3
 8001192:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001196:	4803      	ldr	r0, [pc, #12]	@ (80011a4 <control_all_leds+0x50>)
 8001198:	f001 fe74 	bl	8002e84 <HAL_GPIO_WritePin>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40020c00 	.word	0x40020c00

080011a8 <control_led_group>:
 * @note The provided `led_mode` specifies which LED group should be turned on (ex. LED_EVEN). The	   *
 *       other LED group (ex. LED_ODD) will be turned off.											   *
 ******************************************************************************************************/

void control_led_group(int led_mode)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
	// Turn on even LEDs
	if(LED_EVEN == led_mode) {
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d118      	bne.n	80011e8 <control_led_group+0x40>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011bc:	4818      	ldr	r0, [pc, #96]	@ (8001220 <control_led_group+0x78>)
 80011be:	f001 fe61 	bl	8002e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c8:	4815      	ldr	r0, [pc, #84]	@ (8001220 <control_led_group+0x78>)
 80011ca:	f001 fe5b 	bl	8002e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 80011ce:	2200      	movs	r2, #0
 80011d0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80011d4:	4812      	ldr	r0, [pc, #72]	@ (8001220 <control_led_group+0x78>)
 80011d6:	f001 fe55 	bl	8002e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 80011da:	2201      	movs	r2, #1
 80011dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011e0:	480f      	ldr	r0, [pc, #60]	@ (8001220 <control_led_group+0x78>)
 80011e2:	f001 fe4f 	bl	8002e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
	}
}
 80011e6:	e017      	b.n	8001218 <control_led_group+0x70>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
 80011e8:	2201      	movs	r2, #1
 80011ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011ee:	480c      	ldr	r0, [pc, #48]	@ (8001220 <control_led_group+0x78>)
 80011f0:	f001 fe48 	bl	8002e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011fa:	4809      	ldr	r0, [pc, #36]	@ (8001220 <control_led_group+0x78>)
 80011fc:	f001 fe42 	bl	8002e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001206:	4806      	ldr	r0, [pc, #24]	@ (8001220 <control_led_group+0x78>)
 8001208:	f001 fe3c 	bl	8002e84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 800120c:	2200      	movs	r2, #0
 800120e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001212:	4803      	ldr	r0, [pc, #12]	@ (8001220 <control_led_group+0x78>)
 8001214:	f001 fe36 	bl	8002e84 <HAL_GPIO_WritePin>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40020c00 	.word	0x40020c00

08001224 <control_single_led>:
 * @note `config` dictates the LED states, ex. 0x05 = 0101 = Green and Red LEDs on, Orange and Blue    *
 *       LEDs off.																					   *
 ******************************************************************************************************/

void control_single_led(int config)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	// Orange		LD3			GPIO_PIN_13		0x2000  //
	// Red			LD5			GPIO_PIN_14		0x4000  //
	// Blue			LD6			GPIO_PIN_15		0x8000  //
	//////////////////////////////////////////////////////

	for(int i=0; i<NUM_LED_TIMERS; i++) {
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	e014      	b.n	800125c <control_single_led+0x38>
		HAL_GPIO_WritePin(GREEN_LED_PORT, (GREEN_LED_PIN << i), ((config >> i) & 0x1));
 8001232:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	b299      	uxth	r1, r3
 800123e:	687a      	ldr	r2, [r7, #4]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	fa42 f303 	asr.w	r3, r2, r3
 8001246:	b2db      	uxtb	r3, r3
 8001248:	f003 0301 	and.w	r3, r3, #1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	461a      	mov	r2, r3
 8001250:	4806      	ldr	r0, [pc, #24]	@ (800126c <control_single_led+0x48>)
 8001252:	f001 fe17 	bl	8002e84 <HAL_GPIO_WritePin>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3301      	adds	r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2b03      	cmp	r3, #3
 8001260:	dde7      	ble.n	8001232 <control_single_led+0xe>
	}
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40020c00 	.word	0x40020c00

08001270 <execute_led_effect>:
 * @note This function assumes that functions `control_all_leds()`, `control_led_group()`, and 		   *
 *       `control_single_led()` are implemented to control the LEDs accordingly.			 		   *
 ******************************************************************************************************/

void execute_led_effect(int effect)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	// Flag used for effects E1 and E2
	static int flag = 1;
	// i and used for effects E3 and E4
	static int i = 0;

	switch(effect) {
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d854      	bhi.n	8001328 <execute_led_effect+0xb8>
 800127e:	a201      	add	r2, pc, #4	@ (adr r2, 8001284 <execute_led_effect+0x14>)
 8001280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001284:	08001295 	.word	0x08001295
 8001288:	080012b9 	.word	0x080012b9
 800128c:	080012dd 	.word	0x080012dd
 8001290:	08001303 	.word	0x08001303
		case effectE1:
			// Flash all LEDs in unison
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 8001294:	4b27      	ldr	r3, [pc, #156]	@ (8001334 <execute_led_effect+0xc4>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f083 0301 	eor.w	r3, r3, #1
 800129c:	4a25      	ldr	r2, [pc, #148]	@ (8001334 <execute_led_effect+0xc4>)
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b24      	ldr	r3, [pc, #144]	@ (8001334 <execute_led_effect+0xc4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d003      	beq.n	80012b0 <execute_led_effect+0x40>
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff ff53 	bl	8001154 <control_all_leds>
			break;
 80012ae:	e03c      	b.n	800132a <execute_led_effect+0xba>
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 80012b0:	2001      	movs	r0, #1
 80012b2:	f7ff ff4f 	bl	8001154 <control_all_leds>
			break;
 80012b6:	e038      	b.n	800132a <execute_led_effect+0xba>
		case effectE2:
			// Flash even and odd LEDs back and forth
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 80012b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001334 <execute_led_effect+0xc4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f083 0301 	eor.w	r3, r3, #1
 80012c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001334 <execute_led_effect+0xc4>)
 80012c2:	6013      	str	r3, [r2, #0]
 80012c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <execute_led_effect+0xc4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d003      	beq.n	80012d4 <execute_led_effect+0x64>
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff ff6b 	bl	80011a8 <control_led_group>
			break;
 80012d2:	e02a      	b.n	800132a <execute_led_effect+0xba>
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 80012d4:	2001      	movs	r0, #1
 80012d6:	f7ff ff67 	bl	80011a8 <control_led_group>
			break;
 80012da:	e026      	b.n	800132a <execute_led_effect+0xba>
		case effectE3:
			// Move the illuminated LED around the circle of on-board LEDs
			control_single_led(0x1 << (i++ % 4));
 80012dc:	4b16      	ldr	r3, [pc, #88]	@ (8001338 <execute_led_effect+0xc8>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	1c5a      	adds	r2, r3, #1
 80012e2:	4915      	ldr	r1, [pc, #84]	@ (8001338 <execute_led_effect+0xc8>)
 80012e4:	600a      	str	r2, [r1, #0]
 80012e6:	425a      	negs	r2, r3
 80012e8:	f003 0303 	and.w	r3, r3, #3
 80012ec:	f002 0203 	and.w	r2, r2, #3
 80012f0:	bf58      	it	pl
 80012f2:	4253      	negpl	r3, r2
 80012f4:	2201      	movs	r2, #1
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff ff92 	bl	8001224 <control_single_led>
			break;
 8001300:	e013      	b.n	800132a <execute_led_effect+0xba>
		case effectE4:
			// Move the illuminated LED around the circle of on-board LEDs in opposite direction of effect E3
			control_single_led(0x08 >> (i++ % 4));
 8001302:	4b0d      	ldr	r3, [pc, #52]	@ (8001338 <execute_led_effect+0xc8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	1c5a      	adds	r2, r3, #1
 8001308:	490b      	ldr	r1, [pc, #44]	@ (8001338 <execute_led_effect+0xc8>)
 800130a:	600a      	str	r2, [r1, #0]
 800130c:	425a      	negs	r2, r3
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	f002 0203 	and.w	r2, r2, #3
 8001316:	bf58      	it	pl
 8001318:	4253      	negpl	r3, r2
 800131a:	2208      	movs	r2, #8
 800131c:	fa42 f303 	asr.w	r3, r2, r3
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff7f 	bl	8001224 <control_single_led>
			break;
 8001326:	e000      	b.n	800132a <execute_led_effect+0xba>
		default:
			break;
 8001328:	bf00      	nop
	}
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000020 	.word	0x20000020
 8001338:	200000e4 	.word	0x200000e4

0800133c <parse_freq_string>:
 *       validate the value range explicitly. It relies on other components to handle invalid values.  *
 ******************************************************************************************************/


int parse_freq_string(message_t *msg, int *freq_Hz)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	6039      	str	r1, [r7, #0]
    // Check if the input string is at least 2 characters long (F and one digit)
    int len = strlen((char *)msg->payload);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4618      	mov	r0, r3
 800134a:	f7fe ff4b 	bl	80001e4 <strlen>
 800134e:	4603      	mov	r3, r0
 8001350:	60bb      	str	r3, [r7, #8]
    if (len < 2 || len > 4) return 0;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b01      	cmp	r3, #1
 8001356:	dd02      	ble.n	800135e <parse_freq_string+0x22>
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	2b04      	cmp	r3, #4
 800135c:	dd01      	ble.n	8001362 <parse_freq_string+0x26>
 800135e:	2300      	movs	r3, #0
 8001360:	e025      	b.n	80013ae <parse_freq_string+0x72>

    // Check if the first character is 'F'
    if (msg->payload[0] != 'F') return 0;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b46      	cmp	r3, #70	@ 0x46
 8001368:	d001      	beq.n	800136e <parse_freq_string+0x32>
 800136a:	2300      	movs	r3, #0
 800136c:	e01f      	b.n	80013ae <parse_freq_string+0x72>

    // Check if the remaining characters are digits
    for (int i = 1; i < len; i++)
 800136e:	2301      	movs	r3, #1
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	e010      	b.n	8001396 <parse_freq_string+0x5a>
    {
        if (!isdigit(msg->payload[i])) return 0;
 8001374:	687a      	ldr	r2, [r7, #4]
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	4413      	add	r3, r2
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	3301      	adds	r3, #1
 800137e:	4a0e      	ldr	r2, [pc, #56]	@ (80013b8 <parse_freq_string+0x7c>)
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <parse_freq_string+0x54>
 800138c:	2300      	movs	r3, #0
 800138e:	e00e      	b.n	80013ae <parse_freq_string+0x72>
    for (int i = 1; i < len; i++)
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	3301      	adds	r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	429a      	cmp	r2, r3
 800139c:	dbea      	blt.n	8001374 <parse_freq_string+0x38>
    }

    // Convert the numeric part to an integer
    *freq_Hz = freq_str_to_int(msg, len);
 800139e:	68b9      	ldr	r1, [r7, #8]
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f80b 	bl	80013bc <freq_str_to_int>
 80013a6:	4602      	mov	r2, r0
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	601a      	str	r2, [r3, #0]
    return 1;
 80013ac:	2301      	movs	r3, #1
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	080095fc 	.word	0x080095fc

080013bc <freq_str_to_int>:
 *       invalid formats or edge cases (e.g., non-numeric characters). It relies on proper validation  *
 *       by the calling function.																	   *
 ******************************************************************************************************/

int freq_str_to_int(message_t *msg, int len)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	int ret = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<len; i++) {
 80013ca:	2301      	movs	r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	e00f      	b.n	80013f0 <freq_str_to_int+0x34>
		ret = ret * 10 + (msg->payload[i] - '0'); // Convert from ASCII to an integer
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	4613      	mov	r3, r2
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4619      	mov	r1, r3
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	4413      	add	r3, r2
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	3b30      	subs	r3, #48	@ 0x30
 80013e6:	440b      	add	r3, r1
 80013e8:	60fb      	str	r3, [r7, #12]
	for(int i=1; i<len; i++) {
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	3301      	adds	r3, #1
 80013ee:	60bb      	str	r3, [r7, #8]
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	dbeb      	blt.n	80013d0 <freq_str_to_int+0x14>
	}

	return ret;
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
	...

08001408 <rtc_task>:
 * @note There are multiple state machines handled here: the overall system state machine and the	   *
 *       RTC-specific state machine.																   *
 ******************************************************************************************************/

void rtc_task(void *param)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af02      	add	r7, sp, #8
 800140e:	6078      	str	r0, [r7, #4]
	message_t *msg;

	while(1) {

		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001410:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	2300      	movs	r3, #0
 8001418:	2200      	movs	r2, #0
 800141a:	2100      	movs	r1, #0
 800141c:	2000      	movs	r0, #0
 800141e:	f005 fd6d 	bl	8006efc <xTaskGenericNotifyWait>

		while(curr_sys_state != sMainMenu) {
 8001422:	e1e5      	b.n	80017f0 <rtc_task+0x3e8>

			switch(curr_sys_state) {
 8001424:	4bb3      	ldr	r3, [pc, #716]	@ (80016f4 <rtc_task+0x2ec>)
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b05      	cmp	r3, #5
 800142a:	f000 8116 	beq.w	800165a <rtc_task+0x252>
 800142e:	2b05      	cmp	r3, #5
 8001430:	f300 81cf 	bgt.w	80017d2 <rtc_task+0x3ca>
 8001434:	2b03      	cmp	r3, #3
 8001436:	d002      	beq.n	800143e <rtc_task+0x36>
 8001438:	2b04      	cmp	r3, #4
 800143a:	d07a      	beq.n	8001532 <rtc_task+0x12a>
 800143c:	e1c9      	b.n	80017d2 <rtc_task+0x3ca>
				/***** RTC main menu state *****/
				case sRtcMenu:
					// Display RTC menu for the user, show current time and date
					xQueueSend(q_print, &msg_rtc_menu_1, portMAX_DELAY);
 800143e:	4bae      	ldr	r3, [pc, #696]	@ (80016f8 <rtc_task+0x2f0>)
 8001440:	6818      	ldr	r0, [r3, #0]
 8001442:	2300      	movs	r3, #0
 8001444:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001448:	49ac      	ldr	r1, [pc, #688]	@ (80016fc <rtc_task+0x2f4>)
 800144a:	f004 fa89 	bl	8005960 <xQueueGenericSend>
					show_time_date();
 800144e:	f000 fa6d 	bl	800192c <show_time_date>
					xQueueSend(q_print, &msg_rtc_menu_2, portMAX_DELAY);
 8001452:	4ba9      	ldr	r3, [pc, #676]	@ (80016f8 <rtc_task+0x2f0>)
 8001454:	6818      	ldr	r0, [r3, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800145c:	49a8      	ldr	r1, [pc, #672]	@ (8001700 <rtc_task+0x2f8>)
 800145e:	f004 fa7f 	bl	8005960 <xQueueGenericSend>

					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001462:	f107 0308 	add.w	r3, r7, #8
 8001466:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800146a:	9200      	str	r2, [sp, #0]
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2000      	movs	r0, #0
 8001472:	f005 fd43 	bl	8006efc <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001476:	68bb      	ldr	r3, [r7, #8]
 8001478:	617b      	str	r3, [r7, #20]

					// Process command, update date / time accordingly
					if(msg->len <= 4) {
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b04      	cmp	r3, #4
 8001480:	d84b      	bhi.n	800151a <rtc_task+0x112>
						if(!strcmp((char*)msg->payload, "Date")) {			// Configure date
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	499f      	ldr	r1, [pc, #636]	@ (8001704 <rtc_task+0x2fc>)
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe fea2 	bl	80001d0 <strcmp>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10b      	bne.n	80014aa <rtc_task+0xa2>
							// Update the system state
							curr_sys_state = sRtcDateConfig;
 8001492:	4b98      	ldr	r3, [pc, #608]	@ (80016f4 <rtc_task+0x2ec>)
 8001494:	2204      	movs	r2, #4
 8001496:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 8001498:	4b97      	ldr	r3, [pc, #604]	@ (80016f8 <rtc_task+0x2f0>)
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	2300      	movs	r3, #0
 800149e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014a2:	4999      	ldr	r1, [pc, #612]	@ (8001708 <rtc_task+0x300>)
 80014a4:	f004 fa5c 	bl	8005960 <xQueueGenericSend>
					else {
						// If user input is longer than 4 characters, notify user of invalid response
						curr_sys_state = sMainMenu;
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
					}
					break;
 80014a8:	e1a2      	b.n	80017f0 <rtc_task+0x3e8>
						else if (!strcmp((char*)msg->payload, "Time")) {	// Configure time
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	4997      	ldr	r1, [pc, #604]	@ (800170c <rtc_task+0x304>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7fe fe8e 	bl	80001d0 <strcmp>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10b      	bne.n	80014d2 <rtc_task+0xca>
							curr_sys_state = sRtcTimeConfig;
 80014ba:	4b8e      	ldr	r3, [pc, #568]	@ (80016f4 <rtc_task+0x2ec>)
 80014bc:	2205      	movs	r2, #5
 80014be:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 80014c0:	4b8d      	ldr	r3, [pc, #564]	@ (80016f8 <rtc_task+0x2f0>)
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	2300      	movs	r3, #0
 80014c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014ca:	4991      	ldr	r1, [pc, #580]	@ (8001710 <rtc_task+0x308>)
 80014cc:	f004 fa48 	bl	8005960 <xQueueGenericSend>
					break;
 80014d0:	e18e      	b.n	80017f0 <rtc_task+0x3e8>
						else if (!strcmp((char*)msg->payload, "Rfsh")) {	// Refresh the date and time
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	498f      	ldr	r1, [pc, #572]	@ (8001714 <rtc_task+0x30c>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe fe7a 	bl	80001d0 <strcmp>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d103      	bne.n	80014ea <rtc_task+0xe2>
							curr_sys_state = sRtcMenu;
 80014e2:	4b84      	ldr	r3, [pc, #528]	@ (80016f4 <rtc_task+0x2ec>)
 80014e4:	2203      	movs	r2, #3
 80014e6:	701a      	strb	r2, [r3, #0]
					break;
 80014e8:	e182      	b.n	80017f0 <rtc_task+0x3e8>
						else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	498a      	ldr	r1, [pc, #552]	@ (8001718 <rtc_task+0x310>)
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7fe fe6e 	bl	80001d0 <strcmp>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d103      	bne.n	8001502 <rtc_task+0xfa>
							curr_sys_state = sMainMenu;
 80014fa:	4b7e      	ldr	r3, [pc, #504]	@ (80016f4 <rtc_task+0x2ec>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
					break;
 8001500:	e176      	b.n	80017f0 <rtc_task+0x3e8>
							curr_sys_state = sMainMenu;
 8001502:	4b7c      	ldr	r3, [pc, #496]	@ (80016f4 <rtc_task+0x2ec>)
 8001504:	2200      	movs	r2, #0
 8001506:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001508:	4b7b      	ldr	r3, [pc, #492]	@ (80016f8 <rtc_task+0x2f0>)
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	2300      	movs	r3, #0
 800150e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001512:	4982      	ldr	r1, [pc, #520]	@ (800171c <rtc_task+0x314>)
 8001514:	f004 fa24 	bl	8005960 <xQueueGenericSend>
					break;
 8001518:	e16a      	b.n	80017f0 <rtc_task+0x3e8>
						curr_sys_state = sMainMenu;
 800151a:	4b76      	ldr	r3, [pc, #472]	@ (80016f4 <rtc_task+0x2ec>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001520:	4b75      	ldr	r3, [pc, #468]	@ (80016f8 <rtc_task+0x2f0>)
 8001522:	6818      	ldr	r0, [r3, #0]
 8001524:	2300      	movs	r3, #0
 8001526:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800152a:	497c      	ldr	r1, [pc, #496]	@ (800171c <rtc_task+0x314>)
 800152c:	f004 fa18 	bl	8005960 <xQueueGenericSend>
					break;
 8001530:	e15e      	b.n	80017f0 <rtc_task+0x3e8>
				/***** RTC date configuration state *****/
				case sRtcDateConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001532:	f107 0308 	add.w	r3, r7, #8
 8001536:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800153a:	9200      	str	r2, [sp, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2000      	movs	r0, #0
 8001542:	f005 fcdb 	bl	8006efc <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	617b      	str	r3, [r7, #20]

					// Configure month, date, year, or day of week accordingly
					switch(curr_rtc_state) {
 800154a:	4b75      	ldr	r3, [pc, #468]	@ (8001720 <rtc_task+0x318>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	2b03      	cmp	r3, #3
 8001550:	f200 814b 	bhi.w	80017ea <rtc_task+0x3e2>
 8001554:	a201      	add	r2, pc, #4	@ (adr r2, 800155c <rtc_task+0x154>)
 8001556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155a:	bf00      	nop
 800155c:	0800156d 	.word	0x0800156d
 8001560:	0800159d 	.word	0x0800159d
 8001564:	080015cd 	.word	0x080015cd
 8001568:	080015fd 	.word	0x080015fd
						case MONTH_CONFIG:									// Month config
							uint8_t m = getnumber(msg->payload, msg->len);
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	4619      	mov	r1, r3
 8001574:	4610      	mov	r0, r2
 8001576:	f000 f95b 	bl	8001830 <getnumber>
 800157a:	4603      	mov	r3, r0
 800157c:	733b      	strb	r3, [r7, #12]
							date.Month = m;
 800157e:	4a69      	ldr	r2, [pc, #420]	@ (8001724 <rtc_task+0x31c>)
 8001580:	7b3b      	ldrb	r3, [r7, #12]
 8001582:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = DATE_CONFIG;
 8001584:	4b66      	ldr	r3, [pc, #408]	@ (8001720 <rtc_task+0x318>)
 8001586:	2201      	movs	r2, #1
 8001588:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 800158a:	4b5b      	ldr	r3, [pc, #364]	@ (80016f8 <rtc_task+0x2f0>)
 800158c:	6818      	ldr	r0, [r3, #0]
 800158e:	2300      	movs	r3, #0
 8001590:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001594:	4964      	ldr	r1, [pc, #400]	@ (8001728 <rtc_task+0x320>)
 8001596:	f004 f9e3 	bl	8005960 <xQueueGenericSend>
							break;
 800159a:	e05d      	b.n	8001658 <rtc_task+0x250>
						case DATE_CONFIG:									// Date config
							uint8_t d = getnumber(msg->payload, msg->len);
 800159c:	697a      	ldr	r2, [r7, #20]
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4610      	mov	r0, r2
 80015a6:	f000 f943 	bl	8001830 <getnumber>
 80015aa:	4603      	mov	r3, r0
 80015ac:	737b      	strb	r3, [r7, #13]
							date.Date = d;
 80015ae:	4a5d      	ldr	r2, [pc, #372]	@ (8001724 <rtc_task+0x31c>)
 80015b0:	7b7b      	ldrb	r3, [r7, #13]
 80015b2:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = YEAR_CONFIG;
 80015b4:	4b5a      	ldr	r3, [pc, #360]	@ (8001720 <rtc_task+0x318>)
 80015b6:	2202      	movs	r2, #2
 80015b8:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 80015ba:	4b4f      	ldr	r3, [pc, #316]	@ (80016f8 <rtc_task+0x2f0>)
 80015bc:	6818      	ldr	r0, [r3, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015c4:	4959      	ldr	r1, [pc, #356]	@ (800172c <rtc_task+0x324>)
 80015c6:	f004 f9cb 	bl	8005960 <xQueueGenericSend>
							break;
 80015ca:	e045      	b.n	8001658 <rtc_task+0x250>
						case YEAR_CONFIG:									// Year config
							uint8_t y = getnumber(msg->payload, msg->len);
 80015cc:	697a      	ldr	r2, [r7, #20]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	4619      	mov	r1, r3
 80015d4:	4610      	mov	r0, r2
 80015d6:	f000 f92b 	bl	8001830 <getnumber>
 80015da:	4603      	mov	r3, r0
 80015dc:	73bb      	strb	r3, [r7, #14]
							date.Year = y;
 80015de:	4a51      	ldr	r2, [pc, #324]	@ (8001724 <rtc_task+0x31c>)
 80015e0:	7bbb      	ldrb	r3, [r7, #14]
 80015e2:	70d3      	strb	r3, [r2, #3]
							curr_rtc_state = DAY_CONFIG;
 80015e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001720 <rtc_task+0x318>)
 80015e6:	2203      	movs	r2, #3
 80015e8:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 80015ea:	4b43      	ldr	r3, [pc, #268]	@ (80016f8 <rtc_task+0x2f0>)
 80015ec:	6818      	ldr	r0, [r3, #0]
 80015ee:	2300      	movs	r3, #0
 80015f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015f4:	494e      	ldr	r1, [pc, #312]	@ (8001730 <rtc_task+0x328>)
 80015f6:	f004 f9b3 	bl	8005960 <xQueueGenericSend>
							break;
 80015fa:	e02d      	b.n	8001658 <rtc_task+0x250>
						case DAY_CONFIG:									// Day of week config
							uint8_t day = getnumber(msg->payload, msg->len);
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4619      	mov	r1, r3
 8001604:	4610      	mov	r0, r2
 8001606:	f000 f913 	bl	8001830 <getnumber>
 800160a:	4603      	mov	r3, r0
 800160c:	73fb      	strb	r3, [r7, #15]
							date.WeekDay = day;
 800160e:	4a45      	ldr	r2, [pc, #276]	@ (8001724 <rtc_task+0x31c>)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	7013      	strb	r3, [r2, #0]

							// Check that the user entered a valid date entry, configure date
							if(!validate_rtc_information(NULL, &date)) {
 8001614:	4943      	ldr	r1, [pc, #268]	@ (8001724 <rtc_task+0x31c>)
 8001616:	2000      	movs	r0, #0
 8001618:	f000 f92b 	bl	8001872 <validate_rtc_information>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d10b      	bne.n	800163a <rtc_task+0x232>
								rtc_configure_date(&date);
 8001622:	4840      	ldr	r0, [pc, #256]	@ (8001724 <rtc_task+0x31c>)
 8001624:	f000 f972 	bl	800190c <rtc_configure_date>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001628:	4b33      	ldr	r3, [pc, #204]	@ (80016f8 <rtc_task+0x2f0>)
 800162a:	6818      	ldr	r0, [r3, #0]
 800162c:	2300      	movs	r3, #0
 800162e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001632:	4940      	ldr	r1, [pc, #256]	@ (8001734 <rtc_task+0x32c>)
 8001634:	f004 f994 	bl	8005960 <xQueueGenericSend>
 8001638:	e007      	b.n	800164a <rtc_task+0x242>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 800163a:	4b2f      	ldr	r3, [pc, #188]	@ (80016f8 <rtc_task+0x2f0>)
 800163c:	6818      	ldr	r0, [r3, #0]
 800163e:	2300      	movs	r3, #0
 8001640:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001644:	4935      	ldr	r1, [pc, #212]	@ (800171c <rtc_task+0x314>)
 8001646:	f004 f98b 	bl	8005960 <xQueueGenericSend>
							}

							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 800164a:	4b2a      	ldr	r3, [pc, #168]	@ (80016f4 <rtc_task+0x2ec>)
 800164c:	2203      	movs	r2, #3
 800164e:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 8001650:	4b33      	ldr	r3, [pc, #204]	@ (8001720 <rtc_task+0x318>)
 8001652:	2200      	movs	r2, #0
 8001654:	601a      	str	r2, [r3, #0]
							break;
 8001656:	bf00      	nop
					}
					break;
 8001658:	e0c7      	b.n	80017ea <rtc_task+0x3e2>
				/***** RTC time configuration state *****/
				case sRtcTimeConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001662:	9200      	str	r2, [sp, #0]
 8001664:	2200      	movs	r2, #0
 8001666:	2100      	movs	r1, #0
 8001668:	2000      	movs	r0, #0
 800166a:	f005 fc47 	bl	8006efc <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	617b      	str	r3, [r7, #20]

					// Configure hours, minutes, or seconds accordingly
					switch(curr_rtc_state) {
 8001672:	4b2b      	ldr	r3, [pc, #172]	@ (8001720 <rtc_task+0x318>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2b03      	cmp	r3, #3
 8001678:	f200 80b9 	bhi.w	80017ee <rtc_task+0x3e6>
 800167c:	a201      	add	r2, pc, #4	@ (adr r2, 8001684 <rtc_task+0x27c>)
 800167e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001682:	bf00      	nop
 8001684:	08001695 	.word	0x08001695
 8001688:	080016c5 	.word	0x080016c5
 800168c:	08001745 	.word	0x08001745
 8001690:	08001775 	.word	0x08001775
						case HH_CONFIG:
							uint8_t hour = getnumber(msg->payload, msg->len);
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	4619      	mov	r1, r3
 800169c:	4610      	mov	r0, r2
 800169e:	f000 f8c7 	bl	8001830 <getnumber>
 80016a2:	4603      	mov	r3, r0
 80016a4:	743b      	strb	r3, [r7, #16]
							time.Hours = hour;
 80016a6:	4a24      	ldr	r2, [pc, #144]	@ (8001738 <rtc_task+0x330>)
 80016a8:	7c3b      	ldrb	r3, [r7, #16]
 80016aa:	7013      	strb	r3, [r2, #0]
							curr_rtc_state = MM_CONFIG;
 80016ac:	4b1c      	ldr	r3, [pc, #112]	@ (8001720 <rtc_task+0x318>)
 80016ae:	2201      	movs	r2, #1
 80016b0:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 80016b2:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <rtc_task+0x2f0>)
 80016b4:	6818      	ldr	r0, [r3, #0]
 80016b6:	2300      	movs	r3, #0
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016bc:	491f      	ldr	r1, [pc, #124]	@ (800173c <rtc_task+0x334>)
 80016be:	f004 f94f 	bl	8005960 <xQueueGenericSend>
							break;
 80016c2:	e085      	b.n	80017d0 <rtc_task+0x3c8>
						case MM_CONFIG:
							uint8_t min = getnumber(msg->payload, msg->len);
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	4619      	mov	r1, r3
 80016cc:	4610      	mov	r0, r2
 80016ce:	f000 f8af 	bl	8001830 <getnumber>
 80016d2:	4603      	mov	r3, r0
 80016d4:	747b      	strb	r3, [r7, #17]
							time.Minutes = min;
 80016d6:	4a18      	ldr	r2, [pc, #96]	@ (8001738 <rtc_task+0x330>)
 80016d8:	7c7b      	ldrb	r3, [r7, #17]
 80016da:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = SS_CONFIG;
 80016dc:	4b10      	ldr	r3, [pc, #64]	@ (8001720 <rtc_task+0x318>)
 80016de:	2202      	movs	r2, #2
 80016e0:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 80016e2:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <rtc_task+0x2f0>)
 80016e4:	6818      	ldr	r0, [r3, #0]
 80016e6:	2300      	movs	r3, #0
 80016e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80016ec:	4914      	ldr	r1, [pc, #80]	@ (8001740 <rtc_task+0x338>)
 80016ee:	f004 f937 	bl	8005960 <xQueueGenericSend>
							break;
 80016f2:	e06d      	b.n	80017d0 <rtc_task+0x3c8>
 80016f4:	200001ed 	.word	0x200001ed
 80016f8:	200001d4 	.word	0x200001d4
 80016fc:	2000004c 	.word	0x2000004c
 8001700:	20000050 	.word	0x20000050
 8001704:	0800938c 	.word	0x0800938c
 8001708:	2000003c 	.word	0x2000003c
 800170c:	08009394 	.word	0x08009394
 8001710:	2000002c 	.word	0x2000002c
 8001714:	0800939c 	.word	0x0800939c
 8001718:	080093a4 	.word	0x080093a4
 800171c:	20000024 	.word	0x20000024
 8001720:	200000e8 	.word	0x200000e8
 8001724:	20000100 	.word	0x20000100
 8001728:	20000040 	.word	0x20000040
 800172c:	20000044 	.word	0x20000044
 8001730:	20000048 	.word	0x20000048
 8001734:	20000028 	.word	0x20000028
 8001738:	200000ec 	.word	0x200000ec
 800173c:	20000030 	.word	0x20000030
 8001740:	20000034 	.word	0x20000034
						case SS_CONFIG:
							uint8_t sec = getnumber(msg->payload, msg->len);
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	68db      	ldr	r3, [r3, #12]
 800174a:	4619      	mov	r1, r3
 800174c:	4610      	mov	r0, r2
 800174e:	f000 f86f 	bl	8001830 <getnumber>
 8001752:	4603      	mov	r3, r0
 8001754:	74bb      	strb	r3, [r7, #18]
							time.Seconds = sec;
 8001756:	4a2e      	ldr	r2, [pc, #184]	@ (8001810 <rtc_task+0x408>)
 8001758:	7cbb      	ldrb	r3, [r7, #18]
 800175a:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = AMPM_CONFIG;
 800175c:	4b2d      	ldr	r3, [pc, #180]	@ (8001814 <rtc_task+0x40c>)
 800175e:	2203      	movs	r2, #3
 8001760:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ampm, portMAX_DELAY);
 8001762:	4b2d      	ldr	r3, [pc, #180]	@ (8001818 <rtc_task+0x410>)
 8001764:	6818      	ldr	r0, [r3, #0]
 8001766:	2300      	movs	r3, #0
 8001768:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800176c:	492b      	ldr	r1, [pc, #172]	@ (800181c <rtc_task+0x414>)
 800176e:	f004 f8f7 	bl	8005960 <xQueueGenericSend>
							break;
 8001772:	e02d      	b.n	80017d0 <rtc_task+0x3c8>
						case AMPM_CONFIG:
							uint8_t opt = getnumber(msg->payload, msg->len);
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	4619      	mov	r1, r3
 800177c:	4610      	mov	r0, r2
 800177e:	f000 f857 	bl	8001830 <getnumber>
 8001782:	4603      	mov	r3, r0
 8001784:	74fb      	strb	r3, [r7, #19]
							time.TimeFormat = opt; // Note: 0 = RTC_HOURFORMAT12_AM, 1 = RTC_HOURFORMAT12_PM
 8001786:	4a22      	ldr	r2, [pc, #136]	@ (8001810 <rtc_task+0x408>)
 8001788:	7cfb      	ldrb	r3, [r7, #19]
 800178a:	70d3      	strb	r3, [r2, #3]
							
							// Check that the user entered a valid date entry, configure time
							if(!validate_rtc_information(&time, NULL)) {
 800178c:	2100      	movs	r1, #0
 800178e:	4820      	ldr	r0, [pc, #128]	@ (8001810 <rtc_task+0x408>)
 8001790:	f000 f86f 	bl	8001872 <validate_rtc_information>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10b      	bne.n	80017b2 <rtc_task+0x3aa>
								rtc_configure_time(&time);
 800179a:	481d      	ldr	r0, [pc, #116]	@ (8001810 <rtc_task+0x408>)
 800179c:	f000 f8a0 	bl	80018e0 <rtc_configure_time>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 80017a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001818 <rtc_task+0x410>)
 80017a2:	6818      	ldr	r0, [r3, #0]
 80017a4:	2300      	movs	r3, #0
 80017a6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017aa:	491d      	ldr	r1, [pc, #116]	@ (8001820 <rtc_task+0x418>)
 80017ac:	f004 f8d8 	bl	8005960 <xQueueGenericSend>
 80017b0:	e007      	b.n	80017c2 <rtc_task+0x3ba>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 80017b2:	4b19      	ldr	r3, [pc, #100]	@ (8001818 <rtc_task+0x410>)
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	2300      	movs	r3, #0
 80017b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017bc:	4919      	ldr	r1, [pc, #100]	@ (8001824 <rtc_task+0x41c>)
 80017be:	f004 f8cf 	bl	8005960 <xQueueGenericSend>
							}
							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 80017c2:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <rtc_task+0x420>)
 80017c4:	2203      	movs	r2, #3
 80017c6:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 80017c8:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <rtc_task+0x40c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
							break;
 80017ce:	bf00      	nop
					}
					break;
 80017d0:	e00d      	b.n	80017ee <rtc_task+0x3e6>
				default:
					// Return control to the main menu task
					curr_sys_state = sMainMenu;
 80017d2:	4b15      	ldr	r3, [pc, #84]	@ (8001828 <rtc_task+0x420>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 80017d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <rtc_task+0x410>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017e2:	4910      	ldr	r1, [pc, #64]	@ (8001824 <rtc_task+0x41c>)
 80017e4:	f004 f8bc 	bl	8005960 <xQueueGenericSend>
					break;
 80017e8:	e002      	b.n	80017f0 <rtc_task+0x3e8>
					break;
 80017ea:	bf00      	nop
 80017ec:	e000      	b.n	80017f0 <rtc_task+0x3e8>
					break;
 80017ee:	bf00      	nop
		while(curr_sys_state != sMainMenu) {
 80017f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001828 <rtc_task+0x420>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f47f ae15 	bne.w	8001424 <rtc_task+0x1c>
			}

		} // while end

		// Notify the main menu task
		xTaskNotify(handle_main_menu_task, 0, eNoAction);
 80017fa:	4b0c      	ldr	r3, [pc, #48]	@ (800182c <rtc_task+0x424>)
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	2300      	movs	r3, #0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	2200      	movs	r2, #0
 8001806:	2100      	movs	r1, #0
 8001808:	f005 fbf8 	bl	8006ffc <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800180c:	e600      	b.n	8001410 <rtc_task+0x8>
 800180e:	bf00      	nop
 8001810:	200000ec 	.word	0x200000ec
 8001814:	200000e8 	.word	0x200000e8
 8001818:	200001d4 	.word	0x200001d4
 800181c:	20000038 	.word	0x20000038
 8001820:	20000028 	.word	0x20000028
 8001824:	20000024 	.word	0x20000024
 8001828:	200001ed 	.word	0x200001ed
 800182c:	200001bc 	.word	0x200001bc

08001830 <getnumber>:
 * @note This function assumes only one or two digits in the ASCII number. If there are more than	   *
 *       two digits, it will only convert the first two to a number.								   *
  ******************************************************************************************************/

uint8_t getnumber(uint8_t *p, int len)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	return (len > 1) ? ( ((p[0]-48) * 10) + (p[1]-48) ) : (p[0]-48);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	dd0e      	ble.n	800185e <getnumber+0x2e>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	461a      	mov	r2, r3
 8001846:	0092      	lsls	r2, r2, #2
 8001848:	4413      	add	r3, r2
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	b2da      	uxtb	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3301      	adds	r3, #1
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	4413      	add	r3, r2
 8001856:	b2db      	uxtb	r3, r3
 8001858:	3b10      	subs	r3, #16
 800185a:	b2db      	uxtb	r3, r3
 800185c:	e003      	b.n	8001866 <getnumber+0x36>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	3b30      	subs	r3, #48	@ 0x30
 8001864:	b2db      	uxtb	r3, r3
}
 8001866:	4618      	mov	r0, r3
 8001868:	370c      	adds	r7, #12
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <validate_rtc_information>:
 *       - Year should be in the range 0-99 (assumption is 21st century).							   *
 *       - Month should be in the range 1-12.														   *
  ******************************************************************************************************/

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
 800187a:	6039      	str	r1, [r7, #0]
	if(time) {
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d011      	beq.n	80018a6 <validate_rtc_information+0x34>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) || (time->TimeFormat > 1) )
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b0c      	cmp	r3, #12
 8001888:	d80b      	bhi.n	80018a2 <validate_rtc_information+0x30>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	785b      	ldrb	r3, [r3, #1]
 800188e:	2b3b      	cmp	r3, #59	@ 0x3b
 8001890:	d807      	bhi.n	80018a2 <validate_rtc_information+0x30>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	789b      	ldrb	r3, [r3, #2]
 8001896:	2b3b      	cmp	r3, #59	@ 0x3b
 8001898:	d803      	bhi.n	80018a2 <validate_rtc_information+0x30>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	78db      	ldrb	r3, [r3, #3]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d901      	bls.n	80018a6 <validate_rtc_information+0x34>
			return 1;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e015      	b.n	80018d2 <validate_rtc_information+0x60>
	}
	if(date) {
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d011      	beq.n	80018d0 <validate_rtc_information+0x5e>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	789b      	ldrb	r3, [r3, #2]
 80018b0:	2b1f      	cmp	r3, #31
 80018b2:	d80b      	bhi.n	80018cc <validate_rtc_information+0x5a>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	2b07      	cmp	r3, #7
 80018ba:	d807      	bhi.n	80018cc <validate_rtc_information+0x5a>
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	78db      	ldrb	r3, [r3, #3]
 80018c0:	2b63      	cmp	r3, #99	@ 0x63
 80018c2:	d803      	bhi.n	80018cc <validate_rtc_information+0x5a>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	785b      	ldrb	r3, [r3, #1]
 80018c8:	2b0c      	cmp	r3, #12
 80018ca:	d901      	bls.n	80018d0 <validate_rtc_information+0x5e>
			return 1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e000      	b.n	80018d2 <validate_rtc_information+0x60>
	}

	return 0;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <rtc_configure_time>:
 * @note The DayLightSaving defaults to RTC_DAYLIGHTSAVING_NONE (disable daylight saving).			   *
 * @note The StoreOperation defaults to RTC_STOREOPERATION_RESET.									   *														   *
  ******************************************************************************************************/

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4803      	ldr	r0, [pc, #12]	@ (8001908 <rtc_configure_time+0x28>)
 80018fa:	f002 f90c 	bl	8003b16 <HAL_RTC_SetTime>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000154 	.word	0x20000154

0800190c <rtc_configure_date>:
 * 																									   *
 * @note This function uses the HAL library to set the RTC date in binary format (RTC_FORMAT_BIN). 	   *
  ******************************************************************************************************/

void rtc_configure_date(RTC_DateTypeDef *date)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8001914:	2200      	movs	r2, #0
 8001916:	6879      	ldr	r1, [r7, #4]
 8001918:	4803      	ldr	r0, [pc, #12]	@ (8001928 <rtc_configure_date+0x1c>)
 800191a:	f002 f9f4 	bl	8003d06 <HAL_RTC_SetDate>
}
 800191e:	bf00      	nop
 8001920:	3708      	adds	r7, #8
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000154 	.word	0x20000154

0800192c <show_time_date>:
 * 		 format "day, month-date-year". 															   *
 * @note The function assumes the presence of a queue `q_print` to send the formatted strings.		   *
  ******************************************************************************************************/

void show_time_date(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08c      	sub	sp, #48	@ 0x30
 8001930:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	2204      	movs	r2, #4
 8001938:	2100      	movs	r1, #0
 800193a:	4618      	mov	r0, r3
 800193c:	f006 fdca 	bl	80084d4 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8001940:	463b      	mov	r3, r7
 8001942:	2214      	movs	r2, #20
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f006 fdc4 	bl	80084d4 <memset>

	// Get the RTC current time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800194c:	463b      	mov	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	4619      	mov	r1, r3
 8001952:	4837      	ldr	r0, [pc, #220]	@ (8001a30 <show_time_date+0x104>)
 8001954:	f002 f979 	bl	8003c4a <HAL_RTC_GetTime>

	// Get the RTC current date
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	2200      	movs	r2, #0
 800195e:	4619      	mov	r1, r3
 8001960:	4833      	ldr	r0, [pc, #204]	@ (8001a30 <show_time_date+0x104>)
 8001962:	f002 fa54 	bl	8003e0e <HAL_RTC_GetDate>

	// Get AM / PM
	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001966:	78fb      	ldrb	r3, [r7, #3]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d101      	bne.n	8001970 <show_time_date+0x44>
 800196c:	4b31      	ldr	r3, [pc, #196]	@ (8001a34 <show_time_date+0x108>)
 800196e:	e000      	b.n	8001972 <show_time_date+0x46>
 8001970:	4b31      	ldr	r3, [pc, #196]	@ (8001a38 <show_time_date+0x10c>)
 8001972:	61bb      	str	r3, [r7, #24]

	// Display time format: hh:mm:ss [AM/PM]
	sprintf((char*)showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time & Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8001974:	783b      	ldrb	r3, [r7, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	787b      	ldrb	r3, [r7, #1]
 800197a:	461a      	mov	r2, r3
 800197c:	78bb      	ldrb	r3, [r7, #2]
 800197e:	4619      	mov	r1, r3
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	9302      	str	r3, [sp, #8]
 8001984:	9101      	str	r1, [sp, #4]
 8001986:	9200      	str	r2, [sp, #0]
 8001988:	4603      	mov	r3, r0
 800198a:	4a2c      	ldr	r2, [pc, #176]	@ (8001a3c <show_time_date+0x110>)
 800198c:	492c      	ldr	r1, [pc, #176]	@ (8001a40 <show_time_date+0x114>)
 800198e:	482d      	ldr	r0, [pc, #180]	@ (8001a44 <show_time_date+0x118>)
 8001990:	f006 fd80 	bl	8008494 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 8001994:	4b2c      	ldr	r3, [pc, #176]	@ (8001a48 <show_time_date+0x11c>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	2300      	movs	r3, #0
 800199a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800199e:	492b      	ldr	r1, [pc, #172]	@ (8001a4c <show_time_date+0x120>)
 80019a0:	f003 ffde 	bl	8005960 <xQueueGenericSend>

	// Convert the user input day of the week from a number to a string
	switch(rtc_date.WeekDay) {
 80019a4:	7d3b      	ldrb	r3, [r7, #20]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	2b06      	cmp	r3, #6
 80019aa:	d826      	bhi.n	80019fa <show_time_date+0xce>
 80019ac:	a201      	add	r2, pc, #4	@ (adr r2, 80019b4 <show_time_date+0x88>)
 80019ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b2:	bf00      	nop
 80019b4:	080019d1 	.word	0x080019d1
 80019b8:	080019d7 	.word	0x080019d7
 80019bc:	080019dd 	.word	0x080019dd
 80019c0:	080019e3 	.word	0x080019e3
 80019c4:	080019e9 	.word	0x080019e9
 80019c8:	080019ef 	.word	0x080019ef
 80019cc:	080019f5 	.word	0x080019f5
		case 1:
			weekday = "Sunday";
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <show_time_date+0x124>)
 80019d2:	61fb      	str	r3, [r7, #28]
			break;
 80019d4:	e011      	b.n	80019fa <show_time_date+0xce>
		case 2:
			weekday = "Monday";
 80019d6:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <show_time_date+0x128>)
 80019d8:	61fb      	str	r3, [r7, #28]
			break;
 80019da:	e00e      	b.n	80019fa <show_time_date+0xce>
		case 3:
			weekday = "Tuesday";
 80019dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <show_time_date+0x12c>)
 80019de:	61fb      	str	r3, [r7, #28]
			break;
 80019e0:	e00b      	b.n	80019fa <show_time_date+0xce>
		case 4:
			weekday = "Wednesday";
 80019e2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a5c <show_time_date+0x130>)
 80019e4:	61fb      	str	r3, [r7, #28]
			break;
 80019e6:	e008      	b.n	80019fa <show_time_date+0xce>
		case 5:
			weekday = "Thursday";
 80019e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001a60 <show_time_date+0x134>)
 80019ea:	61fb      	str	r3, [r7, #28]
			break;
 80019ec:	e005      	b.n	80019fa <show_time_date+0xce>
		case 6:
			weekday = "Friday";
 80019ee:	4b1d      	ldr	r3, [pc, #116]	@ (8001a64 <show_time_date+0x138>)
 80019f0:	61fb      	str	r3, [r7, #28]
			break;
 80019f2:	e002      	b.n	80019fa <show_time_date+0xce>
		case 7:
			weekday = "Saturday";
 80019f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a68 <show_time_date+0x13c>)
 80019f6:	61fb      	str	r3, [r7, #28]
			break;
 80019f8:	bf00      	nop
	}
	
	// Display date format: day, month-date-year
	sprintf((char*)showdate, "\t%s, %02d-%02d-%02d\n", weekday, rtc_date.Month, rtc_date.Date, rtc_date.Year + 2000);
 80019fa:	7d7b      	ldrb	r3, [r7, #21]
 80019fc:	4619      	mov	r1, r3
 80019fe:	7dbb      	ldrb	r3, [r7, #22]
 8001a00:	461a      	mov	r2, r3
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	9200      	str	r2, [sp, #0]
 8001a0c:	460b      	mov	r3, r1
 8001a0e:	69fa      	ldr	r2, [r7, #28]
 8001a10:	4916      	ldr	r1, [pc, #88]	@ (8001a6c <show_time_date+0x140>)
 8001a12:	4817      	ldr	r0, [pc, #92]	@ (8001a70 <show_time_date+0x144>)
 8001a14:	f006 fd3e 	bl	8008494 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 8001a18:	4b0b      	ldr	r3, [pc, #44]	@ (8001a48 <show_time_date+0x11c>)
 8001a1a:	6818      	ldr	r0, [r3, #0]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a22:	4914      	ldr	r1, [pc, #80]	@ (8001a74 <show_time_date+0x148>)
 8001a24:	f003 ff9c 	bl	8005960 <xQueueGenericSend>
}
 8001a28:	bf00      	nop
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000154 	.word	0x20000154
 8001a34:	080093ac 	.word	0x080093ac
 8001a38:	080093b0 	.word	0x080093b0
 8001a3c:	080093b4 	.word	0x080093b4
 8001a40:	080093cc 	.word	0x080093cc
 8001a44:	20000104 	.word	0x20000104
 8001a48:	200001d4 	.word	0x200001d4
 8001a4c:	20000054 	.word	0x20000054
 8001a50:	080093e4 	.word	0x080093e4
 8001a54:	080093ec 	.word	0x080093ec
 8001a58:	080093f4 	.word	0x080093f4
 8001a5c:	080093fc 	.word	0x080093fc
 8001a60:	08009408 	.word	0x08009408
 8001a64:	08009414 	.word	0x08009414
 8001a68:	0800941c 	.word	0x0800941c
 8001a6c:	08009428 	.word	0x08009428
 8001a70:	2000012c 	.word	0x2000012c
 8001a74:	20000058 	.word	0x20000058

08001a78 <main_menu_task>:
 *       command is available.                                                                         *
 * @note The main menu is displayed, and the user input is processed. Invalid inputs are handled and   *
 * an error message is sent to the print queue.                                                        *
 ******************************************************************************************************/
void main_menu_task(void *param)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	6078      	str	r0, [r7, #4]
	int option;

	while(1) {

		// Present the main menu to the user
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 8001a80:	4b35      	ldr	r3, [pc, #212]	@ (8001b58 <main_menu_task+0xe0>)
 8001a82:	6818      	ldr	r0, [r3, #0]
 8001a84:	2300      	movs	r3, #0
 8001a86:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a8a:	4934      	ldr	r1, [pc, #208]	@ (8001b5c <main_menu_task+0xe4>)
 8001a8c:	f003 ff68 	bl	8005960 <xQueueGenericSend>

		// Wait for user to select a menu option
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001a90:	f107 030c 	add.w	r3, r7, #12
 8001a94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a98:	9200      	str	r2, [sp, #0]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f005 fa2c 	bl	8006efc <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	617b      	str	r3, [r7, #20]

		if(msg->len == 1) {
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d140      	bne.n	8001b32 <main_menu_task+0xba>
			// Get user option, convert from ASCII to number
			option = msg->payload[0] - 48;
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	3b30      	subs	r3, #48	@ 0x30
 8001ab6:	613b      	str	r3, [r7, #16]
			switch(option) {
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d023      	beq.n	8001b06 <main_menu_task+0x8e>
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	dc2d      	bgt.n	8001b20 <main_menu_task+0xa8>
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <main_menu_task+0x5a>
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d00d      	beq.n	8001aec <main_menu_task+0x74>
 8001ad0:	e026      	b.n	8001b20 <main_menu_task+0xa8>
				case 0:
					// User selection: LED menu
					curr_sys_state = sLedMenu;
 8001ad2:	4b23      	ldr	r3, [pc, #140]	@ (8001b60 <main_menu_task+0xe8>)
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 8001ad8:	4b22      	ldr	r3, [pc, #136]	@ (8001b64 <main_menu_task+0xec>)
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	2300      	movs	r3, #0
 8001ade:	9300      	str	r3, [sp, #0]
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f005 fa89 	bl	8006ffc <xTaskGenericNotify>
					break;
 8001aea:	e02b      	b.n	8001b44 <main_menu_task+0xcc>
				case 1:
					curr_sys_state = sRtcMenu;
 8001aec:	4b1c      	ldr	r3, [pc, #112]	@ (8001b60 <main_menu_task+0xe8>)
 8001aee:	2203      	movs	r2, #3
 8001af0:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 8001af2:	4b1d      	ldr	r3, [pc, #116]	@ (8001b68 <main_menu_task+0xf0>)
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	2300      	movs	r3, #0
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	f005 fa7c 	bl	8006ffc <xTaskGenericNotify>
					break;
 8001b04:	e01e      	b.n	8001b44 <main_menu_task+0xcc>
				case 2:
					curr_sys_state = sAccMenu;
 8001b06:	4b16      	ldr	r3, [pc, #88]	@ (8001b60 <main_menu_task+0xe8>)
 8001b08:	2202      	movs	r2, #2
 8001b0a:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_acc_task, 0, eNoAction);
 8001b0c:	4b17      	ldr	r3, [pc, #92]	@ (8001b6c <main_menu_task+0xf4>)
 8001b0e:	6818      	ldr	r0, [r3, #0]
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2300      	movs	r3, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	f005 fa6f 	bl	8006ffc <xTaskGenericNotify>
					break;
 8001b1e:	e011      	b.n	8001b44 <main_menu_task+0xcc>
				default:
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8001b20:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <main_menu_task+0xe0>)
 8001b22:	6818      	ldr	r0, [r3, #0]
 8001b24:	2300      	movs	r3, #0
 8001b26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b2a:	4911      	ldr	r1, [pc, #68]	@ (8001b70 <main_menu_task+0xf8>)
 8001b2c:	f003 ff18 	bl	8005960 <xQueueGenericSend>
					continue;
 8001b30:	e011      	b.n	8001b56 <main_menu_task+0xde>
			}
		}
		// Handle invalid entry
		else {
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <main_menu_task+0xe0>)
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	2300      	movs	r3, #0
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b3c:	490c      	ldr	r1, [pc, #48]	@ (8001b70 <main_menu_task+0xf8>)
 8001b3e:	f003 ff0f 	bl	8005960 <xQueueGenericSend>
			continue;
 8001b42:	e008      	b.n	8001b56 <main_menu_task+0xde>
		}

		// Wait for notification from another task before running again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001b44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	2000      	movs	r0, #0
 8001b52:	f005 f9d3 	bl	8006efc <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 8001b56:	e793      	b.n	8001a80 <main_menu_task+0x8>
 8001b58:	200001d4 	.word	0x200001d4
 8001b5c:	20000060 	.word	0x20000060
 8001b60:	200001ed 	.word	0x200001ed
 8001b64:	200001c8 	.word	0x200001c8
 8001b68:	200001cc 	.word	0x200001cc
 8001b6c:	200001d0 	.word	0x200001d0
 8001b70:	2000005c 	.word	0x2000005c

08001b74 <message_handler_task>:
 * @note The data queue (`q_data`) and print queue (`q_print`) must be initialized. The task must be   *
 *       notified when a new message is available.                                                     *
 * @note The processed message is sent to the print queue (`q_print`).                                 *
 ******************************************************************************************************/
void message_handler_task(void *param)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	@ 0x28
 8001b78:	af02      	add	r7, sp, #8
 8001b7a:	6078      	str	r0, [r7, #4]
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b80:	9300      	str	r3, [sp, #0]
 8001b82:	2300      	movs	r3, #0
 8001b84:	2200      	movs	r2, #0
 8001b86:	2100      	movs	r1, #0
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f005 f9b7 	bl	8006efc <xTaskGenericNotifyWait>
 8001b8e:	61f8      	str	r0, [r7, #28]

		if(pdTRUE == ret) {
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d1f2      	bne.n	8001b7c <message_handler_task+0x8>
			// Process the message stored in the input data queue
			process_message(&msg);
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f822 	bl	8001be4 <process_message>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001ba0:	e7ec      	b.n	8001b7c <message_handler_task+0x8>
	...

08001ba4 <print_task>:
 * @note This function is intended to run as a FreeRTOS task.                                          *
 * @note The print queue (`q_print`) must be initialized and contain messages to print.                *
 * @note The received message is transmitted via UART.                                                 *
 ******************************************************************************************************/
void print_task(void *param)
{
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <print_task+0x38>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f107 010c 	add.w	r1, r7, #12
 8001bb4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f004 f881 	bl	8005cc0 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8001bbe:	68fc      	ldr	r4, [r7, #12]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fb0e 	bl	80001e4 <strlen>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	4803      	ldr	r0, [pc, #12]	@ (8001be0 <print_task+0x3c>)
 8001bd4:	f002 fd1a 	bl	800460c <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001bd8:	bf00      	nop
 8001bda:	e7e7      	b.n	8001bac <print_task+0x8>
 8001bdc:	200001d4 	.word	0x200001d4
 8001be0:	20000174 	.word	0x20000174

08001be4 <process_message>:
 * @return void                                                                                        *
 *                                                                                                     *
 * @note This function is called by the `message_handler_task` when a notification is received.        *
 * @note The data queue (`q_data`) must be initialized and contain a message to process.               *
 ******************************************************************************************************/
void process_message(message_t *msg) {
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af02      	add	r7, sp, #8
 8001bea:	6078      	str	r0, [r7, #4]

	extract_command(msg);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f000 f84b 	bl	8001c88 <extract_command>

	switch(curr_sys_state) {
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <process_message+0x90>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	d836      	bhi.n	8001c68 <process_message+0x84>
 8001bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8001c00 <process_message+0x1c>)
 8001bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c00:	08001c19 	.word	0x08001c19
 8001c04:	08001c2d 	.word	0x08001c2d
 8001c08:	08001c41 	.word	0x08001c41
 8001c0c:	08001c55 	.word	0x08001c55
 8001c10:	08001c55 	.word	0x08001c55
 8001c14:	08001c55 	.word	0x08001c55
		case sMainMenu:
			// Notify the main menu task and pass the message
			xTaskNotify(handle_main_menu_task, (uint32_t)msg, eSetValueWithOverwrite);
 8001c18:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <process_message+0x94>)
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2303      	movs	r3, #3
 8001c24:	2100      	movs	r1, #0
 8001c26:	f005 f9e9 	bl	8006ffc <xTaskGenericNotify>
			break;
 8001c2a:	e01e      	b.n	8001c6a <process_message+0x86>
		case sLedMenu:
			// Notify the led task and pass the message
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <process_message+0x98>)
 8001c2e:	6818      	ldr	r0, [r3, #0]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	2300      	movs	r3, #0
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2303      	movs	r3, #3
 8001c38:	2100      	movs	r1, #0
 8001c3a:	f005 f9df 	bl	8006ffc <xTaskGenericNotify>
			break;
 8001c3e:	e014      	b.n	8001c6a <process_message+0x86>
		case sAccMenu:
			// Notify the ACC task and pass the message
			xTaskNotify(handle_acc_task, (uint32_t)msg, eSetValueWithOverwrite);
 8001c40:	4b0f      	ldr	r3, [pc, #60]	@ (8001c80 <process_message+0x9c>)
 8001c42:	6818      	ldr	r0, [r3, #0]
 8001c44:	687a      	ldr	r2, [r7, #4]
 8001c46:	2300      	movs	r3, #0
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f005 f9d5 	bl	8006ffc <xTaskGenericNotify>
			break;
 8001c52:	e00a      	b.n	8001c6a <process_message+0x86>
		case sRtcMenu:
		case sRtcTimeConfig:
		case sRtcDateConfig:
			// Notify the RTC task and pass the message
			xTaskNotify(handle_rtc_task, (uint32_t)msg, eSetValueWithOverwrite);
 8001c54:	4b0b      	ldr	r3, [pc, #44]	@ (8001c84 <process_message+0xa0>)
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2303      	movs	r3, #3
 8001c60:	2100      	movs	r1, #0
 8001c62:	f005 f9cb 	bl	8006ffc <xTaskGenericNotify>
			break;
 8001c66:	e000      	b.n	8001c6a <process_message+0x86>
		default:
			break;
 8001c68:	bf00      	nop
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200001ed 	.word	0x200001ed
 8001c78:	200001bc 	.word	0x200001bc
 8001c7c:	200001c8 	.word	0x200001c8
 8001c80:	200001d0 	.word	0x200001d0
 8001c84:	200001cc 	.word	0x200001cc

08001c88 <extract_command>:
 * @note This function is called by `process_message` to parse the incoming command message.           *
 * @note The data queue (`q_data`) must be initialized and contain a message to extract.               *
 * @note The extracted command is stored in the `msg` structure, with its payload and length fields    *
 *       populated.                                                                                    *
 ******************************************************************************************************/
int extract_command(message_t *msg) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	// Check if there is data in the data queue
	status = uxQueueMessagesWaiting(q_data);
 8001c90:	4b19      	ldr	r3, [pc, #100]	@ (8001cf8 <extract_command+0x70>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f004 f987 	bl	8005fa8 <uxQueueMessagesWaiting>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	613b      	str	r3, [r7, #16]
	if(!status) {
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <extract_command+0x22>
		return -1;
 8001ca4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ca8:	e022      	b.n	8001cf0 <extract_command+0x68>
	}

	// If data is available in the data queue, load it to the msg payload
	uint8_t i=0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 8001cae:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <extract_command+0x70>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f107 010f 	add.w	r1, r7, #15
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f004 f801 	bl	8005cc0 <xQueueReceive>
 8001cbe:	6138      	str	r0, [r7, #16]
		if(pdTRUE == status) {
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d106      	bne.n	8001cd4 <extract_command+0x4c>
			msg->payload[i++] = item;
 8001cc6:	7dfb      	ldrb	r3, [r7, #23]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	75fa      	strb	r2, [r7, #23]
 8001ccc:	461a      	mov	r2, r3
 8001cce:	7bf9      	ldrb	r1, [r7, #15]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\n');
 8001cd4:	7bfb      	ldrb	r3, [r7, #15]
 8001cd6:	2b0a      	cmp	r3, #10
 8001cd8:	d1e9      	bne.n	8001cae <extract_command+0x26>

	// Set final character in message payload to null character
	msg->payload[i-1] = '\0';
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	54d1      	strb	r1, [r2, r3]
	// Save length of message without null character
	msg->len = i-1;
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	461a      	mov	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	60da      	str	r2, [r3, #12]

	return 0;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	200001d8 	.word	0x200001d8

08001cfc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b08c      	sub	sp, #48	@ 0x30
 8001d00:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d02:	f000 fd6d 	bl	80027e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d06:	f000 f925 	bl	8001f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d0a:	f000 f9df 	bl	80020cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001d0e:	f000 f9b3 	bl	8002078 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8001d12:	f000 f98b 	bl	800202c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  // Create main menu task and check that it was created successfully
  status = xTaskCreate(main_menu_task, "main_menu_task", 250, NULL, 2, &handle_main_menu_task);
 8001d16:	4b76      	ldr	r3, [pc, #472]	@ (8001ef0 <main+0x1f4>)
 8001d18:	9301      	str	r3, [sp, #4]
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	22fa      	movs	r2, #250	@ 0xfa
 8001d22:	4974      	ldr	r1, [pc, #464]	@ (8001ef4 <main+0x1f8>)
 8001d24:	4874      	ldr	r0, [pc, #464]	@ (8001ef8 <main+0x1fc>)
 8001d26:	f004 faf3 	bl	8006310 <xTaskCreate>
 8001d2a:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d00b      	beq.n	8001d4a <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d36:	f383 8811 	msr	BASEPRI, r3
 8001d3a:	f3bf 8f6f 	isb	sy
 8001d3e:	f3bf 8f4f 	dsb	sy
 8001d42:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
 8001d48:	e7fd      	b.n	8001d46 <main+0x4a>

  // Create message handler task and check that it was created successfully
  status = xTaskCreate(message_handler_task, "msg_task", 250, NULL, 2, &handle_message_handler_task);
 8001d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8001efc <main+0x200>)
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	2302      	movs	r3, #2
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	2300      	movs	r3, #0
 8001d54:	22fa      	movs	r2, #250	@ 0xfa
 8001d56:	496a      	ldr	r1, [pc, #424]	@ (8001f00 <main+0x204>)
 8001d58:	486a      	ldr	r0, [pc, #424]	@ (8001f04 <main+0x208>)
 8001d5a:	f004 fad9 	bl	8006310 <xTaskCreate>
 8001d5e:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001d60:	6a3b      	ldr	r3, [r7, #32]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d00b      	beq.n	8001d7e <main+0x82>
        __asm volatile
 8001d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d6a:	f383 8811 	msr	BASEPRI, r3
 8001d6e:	f3bf 8f6f 	isb	sy
 8001d72:	f3bf 8f4f 	dsb	sy
 8001d76:	61bb      	str	r3, [r7, #24]
    }
 8001d78:	bf00      	nop
 8001d7a:	bf00      	nop
 8001d7c:	e7fd      	b.n	8001d7a <main+0x7e>

  // Create print task and check that it was created successfully
  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8001d7e:	4b62      	ldr	r3, [pc, #392]	@ (8001f08 <main+0x20c>)
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	2302      	movs	r3, #2
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2300      	movs	r3, #0
 8001d88:	22fa      	movs	r2, #250	@ 0xfa
 8001d8a:	4960      	ldr	r1, [pc, #384]	@ (8001f0c <main+0x210>)
 8001d8c:	4860      	ldr	r0, [pc, #384]	@ (8001f10 <main+0x214>)
 8001d8e:	f004 fabf 	bl	8006310 <xTaskCreate>
 8001d92:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001d94:	6a3b      	ldr	r3, [r7, #32]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d00b      	beq.n	8001db2 <main+0xb6>
        __asm volatile
 8001d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d9e:	f383 8811 	msr	BASEPRI, r3
 8001da2:	f3bf 8f6f 	isb	sy
 8001da6:	f3bf 8f4f 	dsb	sy
 8001daa:	617b      	str	r3, [r7, #20]
    }
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	e7fd      	b.n	8001dae <main+0xb2>

  // Create LED task and check that it was created successfully
  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8001db2:	4b58      	ldr	r3, [pc, #352]	@ (8001f14 <main+0x218>)
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	2302      	movs	r3, #2
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	22fa      	movs	r2, #250	@ 0xfa
 8001dbe:	4956      	ldr	r1, [pc, #344]	@ (8001f18 <main+0x21c>)
 8001dc0:	4856      	ldr	r0, [pc, #344]	@ (8001f1c <main+0x220>)
 8001dc2:	f004 faa5 	bl	8006310 <xTaskCreate>
 8001dc6:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d00b      	beq.n	8001de6 <main+0xea>
        __asm volatile
 8001dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001dd2:	f383 8811 	msr	BASEPRI, r3
 8001dd6:	f3bf 8f6f 	isb	sy
 8001dda:	f3bf 8f4f 	dsb	sy
 8001dde:	613b      	str	r3, [r7, #16]
    }
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	e7fd      	b.n	8001de2 <main+0xe6>

  // Create RTC task and check that it was created successfully
  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8001de6:	4b4e      	ldr	r3, [pc, #312]	@ (8001f20 <main+0x224>)
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	2302      	movs	r3, #2
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2300      	movs	r3, #0
 8001df0:	22fa      	movs	r2, #250	@ 0xfa
 8001df2:	494c      	ldr	r1, [pc, #304]	@ (8001f24 <main+0x228>)
 8001df4:	484c      	ldr	r0, [pc, #304]	@ (8001f28 <main+0x22c>)
 8001df6:	f004 fa8b 	bl	8006310 <xTaskCreate>
 8001dfa:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d00b      	beq.n	8001e1a <main+0x11e>
        __asm volatile
 8001e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e06:	f383 8811 	msr	BASEPRI, r3
 8001e0a:	f3bf 8f6f 	isb	sy
 8001e0e:	f3bf 8f4f 	dsb	sy
 8001e12:	60fb      	str	r3, [r7, #12]
    }
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	e7fd      	b.n	8001e16 <main+0x11a>

  // Create RTC task and check that it was created successfully
  status = xTaskCreate(acc_task, "accelerometer_task", 250, NULL, 2, &handle_acc_task);
 8001e1a:	4b44      	ldr	r3, [pc, #272]	@ (8001f2c <main+0x230>)
 8001e1c:	9301      	str	r3, [sp, #4]
 8001e1e:	2302      	movs	r3, #2
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2300      	movs	r3, #0
 8001e24:	22fa      	movs	r2, #250	@ 0xfa
 8001e26:	4942      	ldr	r1, [pc, #264]	@ (8001f30 <main+0x234>)
 8001e28:	4842      	ldr	r0, [pc, #264]	@ (8001f34 <main+0x238>)
 8001e2a:	f004 fa71 	bl	8006310 <xTaskCreate>
 8001e2e:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8001e30:	6a3b      	ldr	r3, [r7, #32]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d00b      	beq.n	8001e4e <main+0x152>
        __asm volatile
 8001e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e3a:	f383 8811 	msr	BASEPRI, r3
 8001e3e:	f3bf 8f6f 	isb	sy
 8001e42:	f3bf 8f4f 	dsb	sy
 8001e46:	60bb      	str	r3, [r7, #8]
    }
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	e7fd      	b.n	8001e4a <main+0x14e>

  // Create data queue and check that it was created successfully
  q_data = xQueueCreate(10, sizeof(char));
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2101      	movs	r1, #1
 8001e52:	200a      	movs	r0, #10
 8001e54:	f003 fcfe 	bl	8005854 <xQueueGenericCreate>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a37      	ldr	r2, [pc, #220]	@ (8001f38 <main+0x23c>)
 8001e5c:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_data);
 8001e5e:	4b36      	ldr	r3, [pc, #216]	@ (8001f38 <main+0x23c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10b      	bne.n	8001e7e <main+0x182>
        __asm volatile
 8001e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e6a:	f383 8811 	msr	BASEPRI, r3
 8001e6e:	f3bf 8f6f 	isb	sy
 8001e72:	f3bf 8f4f 	dsb	sy
 8001e76:	607b      	str	r3, [r7, #4]
    }
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	e7fd      	b.n	8001e7a <main+0x17e>

  // Create print queue and check that it was created successfully
  q_print = xQueueCreate(10, sizeof(size_t));
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2104      	movs	r1, #4
 8001e82:	200a      	movs	r0, #10
 8001e84:	f003 fce6 	bl	8005854 <xQueueGenericCreate>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <main+0x240>)
 8001e8c:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_print);
 8001e8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001f3c <main+0x240>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d10b      	bne.n	8001eae <main+0x1b2>
        __asm volatile
 8001e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e9a:	f383 8811 	msr	BASEPRI, r3
 8001e9e:	f3bf 8f6f 	isb	sy
 8001ea2:	f3bf 8f4f 	dsb	sy
 8001ea6:	603b      	str	r3, [r7, #0]
    }
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	e7fd      	b.n	8001eaa <main+0x1ae>

  // Create software timers for LED effects
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001eae:	2300      	movs	r3, #0
 8001eb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eb2:	e010      	b.n	8001ed6 <main+0x1da>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)i, led_callback);
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	4a22      	ldr	r2, [pc, #136]	@ (8001f40 <main+0x244>)
 8001eb8:	9200      	str	r2, [sp, #0]
 8001eba:	2201      	movs	r2, #1
 8001ebc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001ec0:	4820      	ldr	r0, [pc, #128]	@ (8001f44 <main+0x248>)
 8001ec2:	f005 fb1f 	bl	8007504 <xTimerCreate>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	491f      	ldr	r1, [pc, #124]	@ (8001f48 <main+0x24c>)
 8001eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ecc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	ddeb      	ble.n	8001eb4 <main+0x1b8>
  }

  // Prepare UART to receive a message
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8001edc:	2201      	movs	r2, #1
 8001ede:	491b      	ldr	r1, [pc, #108]	@ (8001f4c <main+0x250>)
 8001ee0:	481b      	ldr	r0, [pc, #108]	@ (8001f50 <main+0x254>)
 8001ee2:	f002 fc1e 	bl	8004722 <HAL_UART_Receive_IT>

  // Start the kernel
  vTaskStartScheduler();
 8001ee6:	f004 fb59 	bl	800659c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001eea:	bf00      	nop
 8001eec:	e7fd      	b.n	8001eea <main+0x1ee>
 8001eee:	bf00      	nop
 8001ef0:	200001bc 	.word	0x200001bc
 8001ef4:	0800956c 	.word	0x0800956c
 8001ef8:	08001a79 	.word	0x08001a79
 8001efc:	200001c0 	.word	0x200001c0
 8001f00:	0800957c 	.word	0x0800957c
 8001f04:	08001b75 	.word	0x08001b75
 8001f08:	200001c4 	.word	0x200001c4
 8001f0c:	08009588 	.word	0x08009588
 8001f10:	08001ba5 	.word	0x08001ba5
 8001f14:	200001c8 	.word	0x200001c8
 8001f18:	08009594 	.word	0x08009594
 8001f1c:	08000e61 	.word	0x08000e61
 8001f20:	200001cc 	.word	0x200001cc
 8001f24:	080095a0 	.word	0x080095a0
 8001f28:	08001409 	.word	0x08001409
 8001f2c:	200001d0 	.word	0x200001d0
 8001f30:	080095ac 	.word	0x080095ac
 8001f34:	08000d7d 	.word	0x08000d7d
 8001f38:	200001d8 	.word	0x200001d8
 8001f3c:	200001d4 	.word	0x200001d4
 8001f40:	080010cd 	.word	0x080010cd
 8001f44:	080095c0 	.word	0x080095c0
 8001f48:	200001dc 	.word	0x200001dc
 8001f4c:	200001ec 	.word	0x200001ec
 8001f50:	20000174 	.word	0x20000174

08001f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b094      	sub	sp, #80	@ 0x50
 8001f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f5a:	f107 0320 	add.w	r3, r7, #32
 8001f5e:	2230      	movs	r2, #48	@ 0x30
 8001f60:	2100      	movs	r1, #0
 8001f62:	4618      	mov	r0, r3
 8001f64:	f006 fab6 	bl	80084d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f68:	f107 030c 	add.w	r3, r7, #12
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
 8001f7c:	4b29      	ldr	r3, [pc, #164]	@ (8002024 <SystemClock_Config+0xd0>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	4a28      	ldr	r2, [pc, #160]	@ (8002024 <SystemClock_Config+0xd0>)
 8001f82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f88:	4b26      	ldr	r3, [pc, #152]	@ (8002024 <SystemClock_Config+0xd0>)
 8001f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f94:	2300      	movs	r3, #0
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	4b23      	ldr	r3, [pc, #140]	@ (8002028 <SystemClock_Config+0xd4>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a22      	ldr	r2, [pc, #136]	@ (8002028 <SystemClock_Config+0xd4>)
 8001f9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fa2:	6013      	str	r3, [r2, #0]
 8001fa4:	4b20      	ldr	r3, [pc, #128]	@ (8002028 <SystemClock_Config+0xd4>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001fb0:	230a      	movs	r3, #10
 8001fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fb8:	2310      	movs	r3, #16
 8001fba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001fcc:	2332      	movs	r3, #50	@ 0x32
 8001fce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001fd0:	2304      	movs	r3, #4
 8001fd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fd4:	2307      	movs	r3, #7
 8001fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fd8:	f107 0320 	add.w	r3, r7, #32
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 ff6b 	bl	8002eb8 <HAL_RCC_OscConfig>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fe8:	f000 fa34 	bl	8002454 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fec:	230f      	movs	r3, #15
 8001fee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001ff8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001ffc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001ffe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002002:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002004:	f107 030c 	add.w	r3, r7, #12
 8002008:	2100      	movs	r1, #0
 800200a:	4618      	mov	r0, r3
 800200c:	f001 f9cc 	bl	80033a8 <HAL_RCC_ClockConfig>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8002016:	f000 fa1d 	bl	8002454 <Error_Handler>
  }
}
 800201a:	bf00      	nop
 800201c:	3750      	adds	r7, #80	@ 0x50
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	40023800 	.word	0x40023800
 8002028:	40007000 	.word	0x40007000

0800202c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002030:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <MX_RTC_Init+0x44>)
 8002032:	4a10      	ldr	r2, [pc, #64]	@ (8002074 <MX_RTC_Init+0x48>)
 8002034:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8002036:	4b0e      	ldr	r3, [pc, #56]	@ (8002070 <MX_RTC_Init+0x44>)
 8002038:	2240      	movs	r2, #64	@ 0x40
 800203a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800203c:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <MX_RTC_Init+0x44>)
 800203e:	227f      	movs	r2, #127	@ 0x7f
 8002040:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002042:	4b0b      	ldr	r3, [pc, #44]	@ (8002070 <MX_RTC_Init+0x44>)
 8002044:	22ff      	movs	r2, #255	@ 0xff
 8002046:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002048:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <MX_RTC_Init+0x44>)
 800204a:	2200      	movs	r2, #0
 800204c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800204e:	4b08      	ldr	r3, [pc, #32]	@ (8002070 <MX_RTC_Init+0x44>)
 8002050:	2200      	movs	r2, #0
 8002052:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002054:	4b06      	ldr	r3, [pc, #24]	@ (8002070 <MX_RTC_Init+0x44>)
 8002056:	2200      	movs	r2, #0
 8002058:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800205a:	4805      	ldr	r0, [pc, #20]	@ (8002070 <MX_RTC_Init+0x44>)
 800205c:	f001 fcd8 	bl	8003a10 <HAL_RTC_Init>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002066:	f000 f9f5 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000154 	.word	0x20000154
 8002074:	40002800 	.word	0x40002800

08002078 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800207c:	4b11      	ldr	r3, [pc, #68]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 800207e:	4a12      	ldr	r2, [pc, #72]	@ (80020c8 <MX_USART2_UART_Init+0x50>)
 8002080:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002082:	4b10      	ldr	r3, [pc, #64]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002084:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002088:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800208a:	4b0e      	ldr	r3, [pc, #56]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002090:	4b0c      	ldr	r3, [pc, #48]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002096:	4b0b      	ldr	r3, [pc, #44]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800209c:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 800209e:	220c      	movs	r2, #12
 80020a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020a2:	4b08      	ldr	r3, [pc, #32]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020ae:	4805      	ldr	r0, [pc, #20]	@ (80020c4 <MX_USART2_UART_Init+0x4c>)
 80020b0:	f002 fa5c 	bl	800456c <HAL_UART_Init>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ba:	f000 f9cb 	bl	8002454 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000174 	.word	0x20000174
 80020c8:	40004400 	.word	0x40004400

080020cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08c      	sub	sp, #48	@ 0x30
 80020d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d2:	f107 031c 	add.w	r3, r7, #28
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	60da      	str	r2, [r3, #12]
 80020e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020e2:	2300      	movs	r3, #0
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	4ba2      	ldr	r3, [pc, #648]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 80020e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ea:	4aa1      	ldr	r2, [pc, #644]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 80020ec:	f043 0310 	orr.w	r3, r3, #16
 80020f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f2:	4b9f      	ldr	r3, [pc, #636]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f6:	f003 0310 	and.w	r3, r3, #16
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020fe:	2300      	movs	r3, #0
 8002100:	617b      	str	r3, [r7, #20]
 8002102:	4b9b      	ldr	r3, [pc, #620]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	4a9a      	ldr	r2, [pc, #616]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	6313      	str	r3, [r2, #48]	@ 0x30
 800210e:	4b98      	ldr	r3, [pc, #608]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	f003 0304 	and.w	r3, r3, #4
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b94      	ldr	r3, [pc, #592]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	4a93      	ldr	r2, [pc, #588]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002128:	6313      	str	r3, [r2, #48]	@ 0x30
 800212a:	4b91      	ldr	r3, [pc, #580]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b8d      	ldr	r3, [pc, #564]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	4a8c      	ldr	r2, [pc, #560]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002140:	f043 0301 	orr.w	r3, r3, #1
 8002144:	6313      	str	r3, [r2, #48]	@ 0x30
 8002146:	4b8a      	ldr	r3, [pc, #552]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	4b86      	ldr	r3, [pc, #536]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	4a85      	ldr	r2, [pc, #532]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 800215c:	f043 0302 	orr.w	r3, r3, #2
 8002160:	6313      	str	r3, [r2, #48]	@ 0x30
 8002162:	4b83      	ldr	r3, [pc, #524]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f003 0302 	and.w	r3, r3, #2
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b7f      	ldr	r3, [pc, #508]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4a7e      	ldr	r2, [pc, #504]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002178:	f043 0308 	orr.w	r3, r3, #8
 800217c:	6313      	str	r3, [r2, #48]	@ 0x30
 800217e:	4b7c      	ldr	r3, [pc, #496]	@ (8002370 <MX_GPIO_Init+0x2a4>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	f003 0308 	and.w	r3, r3, #8
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800218a:	2200      	movs	r2, #0
 800218c:	2108      	movs	r1, #8
 800218e:	4879      	ldr	r0, [pc, #484]	@ (8002374 <MX_GPIO_Init+0x2a8>)
 8002190:	f000 fe78 	bl	8002e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002194:	2201      	movs	r2, #1
 8002196:	2101      	movs	r1, #1
 8002198:	4877      	ldr	r0, [pc, #476]	@ (8002378 <MX_GPIO_Init+0x2ac>)
 800219a:	f000 fe73 	bl	8002e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800219e:	2200      	movs	r2, #0
 80021a0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80021a4:	4875      	ldr	r0, [pc, #468]	@ (800237c <MX_GPIO_Init+0x2b0>)
 80021a6:	f000 fe6d 	bl	8002e84 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80021aa:	2308      	movs	r3, #8
 80021ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ae:	2301      	movs	r3, #1
 80021b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b6:	2300      	movs	r3, #0
 80021b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 031c 	add.w	r3, r7, #28
 80021be:	4619      	mov	r1, r3
 80021c0:	486c      	ldr	r0, [pc, #432]	@ (8002374 <MX_GPIO_Init+0x2a8>)
 80021c2:	f000 fcc3 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80021c6:	2301      	movs	r3, #1
 80021c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 031c 	add.w	r3, r7, #28
 80021da:	4619      	mov	r1, r3
 80021dc:	4866      	ldr	r0, [pc, #408]	@ (8002378 <MX_GPIO_Init+0x2ac>)
 80021de:	f000 fcb5 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80021e2:	2308      	movs	r3, #8
 80021e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e6:	2302      	movs	r3, #2
 80021e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80021f2:	2305      	movs	r3, #5
 80021f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80021f6:	f107 031c 	add.w	r3, r7, #28
 80021fa:	4619      	mov	r1, r3
 80021fc:	485e      	ldr	r0, [pc, #376]	@ (8002378 <MX_GPIO_Init+0x2ac>)
 80021fe:	f000 fca5 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002202:	2301      	movs	r3, #1
 8002204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002206:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800220a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 031c 	add.w	r3, r7, #28
 8002214:	4619      	mov	r1, r3
 8002216:	485a      	ldr	r0, [pc, #360]	@ (8002380 <MX_GPIO_Init+0x2b4>)
 8002218:	f000 fc98 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800221c:	2310      	movs	r3, #16
 800221e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002220:	2302      	movs	r3, #2
 8002222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800222c:	2306      	movs	r3, #6
 800222e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002230:	f107 031c 	add.w	r3, r7, #28
 8002234:	4619      	mov	r1, r3
 8002236:	4852      	ldr	r0, [pc, #328]	@ (8002380 <MX_GPIO_Init+0x2b4>)
 8002238:	f000 fc88 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800223c:	23e0      	movs	r3, #224	@ 0xe0
 800223e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800224c:	2305      	movs	r3, #5
 800224e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	4619      	mov	r1, r3
 8002256:	484a      	ldr	r0, [pc, #296]	@ (8002380 <MX_GPIO_Init+0x2b4>)
 8002258:	f000 fc78 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800225c:	2304      	movs	r3, #4
 800225e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002260:	2300      	movs	r3, #0
 8002262:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002268:	f107 031c 	add.w	r3, r7, #28
 800226c:	4619      	mov	r1, r3
 800226e:	4845      	ldr	r0, [pc, #276]	@ (8002384 <MX_GPIO_Init+0x2b8>)
 8002270:	f000 fc6c 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002274:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002278:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002282:	2300      	movs	r3, #0
 8002284:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002286:	2305      	movs	r3, #5
 8002288:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800228a:	f107 031c 	add.w	r3, r7, #28
 800228e:	4619      	mov	r1, r3
 8002290:	483c      	ldr	r0, [pc, #240]	@ (8002384 <MX_GPIO_Init+0x2b8>)
 8002292:	f000 fc5b 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002296:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800229a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229c:	2301      	movs	r3, #1
 800229e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a4:	2300      	movs	r3, #0
 80022a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	4619      	mov	r1, r3
 80022ae:	4833      	ldr	r0, [pc, #204]	@ (800237c <MX_GPIO_Init+0x2b0>)
 80022b0:	f000 fc4c 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80022b4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80022b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80022c6:	2306      	movs	r3, #6
 80022c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022ca:	f107 031c 	add.w	r3, r7, #28
 80022ce:	4619      	mov	r1, r3
 80022d0:	4829      	ldr	r0, [pc, #164]	@ (8002378 <MX_GPIO_Init+0x2ac>)
 80022d2:	f000 fc3b 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80022d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80022da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022dc:	2300      	movs	r3, #0
 80022de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80022e4:	f107 031c 	add.w	r3, r7, #28
 80022e8:	4619      	mov	r1, r3
 80022ea:	4825      	ldr	r0, [pc, #148]	@ (8002380 <MX_GPIO_Init+0x2b4>)
 80022ec:	f000 fc2e 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80022f0:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80022f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002302:	230a      	movs	r3, #10
 8002304:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f107 031c 	add.w	r3, r7, #28
 800230a:	4619      	mov	r1, r3
 800230c:	481c      	ldr	r0, [pc, #112]	@ (8002380 <MX_GPIO_Init+0x2b4>)
 800230e:	f000 fc1d 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002312:	2320      	movs	r3, #32
 8002314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800231e:	f107 031c 	add.w	r3, r7, #28
 8002322:	4619      	mov	r1, r3
 8002324:	4815      	ldr	r0, [pc, #84]	@ (800237c <MX_GPIO_Init+0x2b0>)
 8002326:	f000 fc11 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800232a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800232e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002330:	2312      	movs	r3, #18
 8002332:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002338:	2300      	movs	r3, #0
 800233a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800233c:	2304      	movs	r3, #4
 800233e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002340:	f107 031c 	add.w	r3, r7, #28
 8002344:	4619      	mov	r1, r3
 8002346:	480f      	ldr	r0, [pc, #60]	@ (8002384 <MX_GPIO_Init+0x2b8>)
 8002348:	f000 fc00 	bl	8002b4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800234c:	2302      	movs	r3, #2
 800234e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002350:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002356:	2300      	movs	r3, #0
 8002358:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800235a:	f107 031c 	add.w	r3, r7, #28
 800235e:	4619      	mov	r1, r3
 8002360:	4804      	ldr	r0, [pc, #16]	@ (8002374 <MX_GPIO_Init+0x2a8>)
 8002362:	f000 fbf3 	bl	8002b4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002366:	bf00      	nop
 8002368:	3730      	adds	r7, #48	@ 0x30
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023800 	.word	0x40023800
 8002374:	40021000 	.word	0x40021000
 8002378:	40020800 	.word	0x40020800
 800237c:	40020c00 	.word	0x40020c00
 8002380:	40020000 	.word	0x40020000
 8002384:	40020400 	.word	0x40020400

08002388 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler, so it executes in the interrupt context
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af02      	add	r7, sp, #8
 800238e:	6078      	str	r0, [r7, #4]
	// Dummy variable used to replace final character in data queue
	uint8_t dummy;

	// Add a small delay to allow timing for message transmission
	for(uint32_t i=0; i<4000; i++);
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	e002      	b.n	800239c <HAL_UART_RxCpltCallback+0x14>
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	3301      	adds	r3, #1
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80023a2:	d3f8      	bcc.n	8002396 <HAL_UART_RxCpltCallback+0xe>

	// Check if data is available via UART
	if(!xQueueIsQueueFullFromISR(q_data)) {
 80023a4:	4b1e      	ldr	r3, [pc, #120]	@ (8002420 <HAL_UART_RxCpltCallback+0x98>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f003 ff2c 	bl	8006206 <xQueueIsQueueFullFromISR>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_UART_RxCpltCallback+0x3c>
		// Enqueue data byte
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 80023b4:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <HAL_UART_RxCpltCallback+0x98>)
 80023b6:	6818      	ldr	r0, [r3, #0]
 80023b8:	2300      	movs	r3, #0
 80023ba:	2200      	movs	r2, #0
 80023bc:	4919      	ldr	r1, [pc, #100]	@ (8002424 <HAL_UART_RxCpltCallback+0x9c>)
 80023be:	f003 fbd1 	bl	8005b64 <xQueueGenericSendFromISR>
 80023c2:	e013      	b.n	80023ec <HAL_UART_RxCpltCallback+0x64>
	}
	// If no data available, check if last entered character is newline character
	else {
		if(user_data == '\n') {
 80023c4:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <HAL_UART_RxCpltCallback+0x9c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b0a      	cmp	r3, #10
 80023cc:	d10e      	bne.n	80023ec <HAL_UART_RxCpltCallback+0x64>
			// Replace last byte of data queue with '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 80023ce:	4b14      	ldr	r3, [pc, #80]	@ (8002420 <HAL_UART_RxCpltCallback+0x98>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f107 010b 	add.w	r1, r7, #11
 80023d6:	2200      	movs	r2, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f003 fd53 	bl	8005e84 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 80023de:	4b10      	ldr	r3, [pc, #64]	@ (8002420 <HAL_UART_RxCpltCallback+0x98>)
 80023e0:	6818      	ldr	r0, [r3, #0]
 80023e2:	2300      	movs	r3, #0
 80023e4:	2200      	movs	r2, #0
 80023e6:	490f      	ldr	r1, [pc, #60]	@ (8002424 <HAL_UART_RxCpltCallback+0x9c>)
 80023e8:	f003 fbbc 	bl	8005b64 <xQueueGenericSendFromISR>
		}
	}

	// Send notification to message handler task if user_data == '\n'
	if(user_data == '\n') {
 80023ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <HAL_UART_RxCpltCallback+0x9c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b0a      	cmp	r3, #10
 80023f4:	d10a      	bne.n	800240c <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_message_handler_task, 0, eNoAction, NULL);
 80023f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <HAL_UART_RxCpltCallback+0xa0>)
 80023f8:	6818      	ldr	r0, [r3, #0]
 80023fa:	2300      	movs	r3, #0
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	2300      	movs	r3, #0
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	2300      	movs	r3, #0
 8002404:	2200      	movs	r2, #0
 8002406:	2100      	movs	r1, #0
 8002408:	f004 fedc 	bl	80071c4 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in interrupt mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 800240c:	2201      	movs	r2, #1
 800240e:	4905      	ldr	r1, [pc, #20]	@ (8002424 <HAL_UART_RxCpltCallback+0x9c>)
 8002410:	4806      	ldr	r0, [pc, #24]	@ (800242c <HAL_UART_RxCpltCallback+0xa4>)
 8002412:	f002 f986 	bl	8004722 <HAL_UART_Receive_IT>

}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200001d8 	.word	0x200001d8
 8002424:	200001ec 	.word	0x200001ec
 8002428:	200001c0 	.word	0x200001c0
 800242c:	20000174 	.word	0x20000174

08002430 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a04      	ldr	r2, [pc, #16]	@ (8002450 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d101      	bne.n	8002446 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002442:	f000 f9ef 	bl	8002824 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002446:	bf00      	nop
 8002448:	3708      	adds	r7, #8
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40001000 	.word	0x40001000

08002454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002458:	b672      	cpsid	i
}
 800245a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <Error_Handler+0x8>

08002460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <HAL_MspInit+0x4c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	4a0f      	ldr	r2, [pc, #60]	@ (80024ac <HAL_MspInit+0x4c>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002474:	6453      	str	r3, [r2, #68]	@ 0x44
 8002476:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <HAL_MspInit+0x4c>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_MspInit+0x4c>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	4a08      	ldr	r2, [pc, #32]	@ (80024ac <HAL_MspInit+0x4c>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002490:	6413      	str	r3, [r2, #64]	@ 0x40
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_MspInit+0x4c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	40023800 	.word	0x40023800

080024b0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80024b8:	f107 0308 	add.w	r3, r7, #8
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a0c      	ldr	r2, [pc, #48]	@ (80024fc <HAL_RTC_MspInit+0x4c>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d111      	bne.n	80024f4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80024d0:	2302      	movs	r3, #2
 80024d2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80024d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80024d8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024da:	f107 0308 	add.w	r3, r7, #8
 80024de:	4618      	mov	r0, r3
 80024e0:	f001 f9b4 	bl	800384c <HAL_RCCEx_PeriphCLKConfig>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80024ea:	f7ff ffb3 	bl	8002454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80024ee:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <HAL_RTC_MspInit+0x50>)
 80024f0:	2201      	movs	r2, #1
 80024f2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80024f4:	bf00      	nop
 80024f6:	3718      	adds	r7, #24
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40002800 	.word	0x40002800
 8002500:	42470e3c 	.word	0x42470e3c

08002504 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b08a      	sub	sp, #40	@ 0x28
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1d      	ldr	r2, [pc, #116]	@ (8002598 <HAL_UART_MspInit+0x94>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d133      	bne.n	800258e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	4b1c      	ldr	r3, [pc, #112]	@ (800259c <HAL_UART_MspInit+0x98>)
 800252c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800252e:	4a1b      	ldr	r2, [pc, #108]	@ (800259c <HAL_UART_MspInit+0x98>)
 8002530:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002534:	6413      	str	r3, [r2, #64]	@ 0x40
 8002536:	4b19      	ldr	r3, [pc, #100]	@ (800259c <HAL_UART_MspInit+0x98>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	613b      	str	r3, [r7, #16]
 8002540:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	4b15      	ldr	r3, [pc, #84]	@ (800259c <HAL_UART_MspInit+0x98>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254a:	4a14      	ldr	r2, [pc, #80]	@ (800259c <HAL_UART_MspInit+0x98>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	6313      	str	r3, [r2, #48]	@ 0x30
 8002552:	4b12      	ldr	r3, [pc, #72]	@ (800259c <HAL_UART_MspInit+0x98>)
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800255e:	230c      	movs	r3, #12
 8002560:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002562:	2302      	movs	r3, #2
 8002564:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800256a:	2303      	movs	r3, #3
 800256c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800256e:	2307      	movs	r3, #7
 8002570:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002572:	f107 0314 	add.w	r3, r7, #20
 8002576:	4619      	mov	r1, r3
 8002578:	4809      	ldr	r0, [pc, #36]	@ (80025a0 <HAL_UART_MspInit+0x9c>)
 800257a:	f000 fae7 	bl	8002b4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 800257e:	2200      	movs	r2, #0
 8002580:	2106      	movs	r1, #6
 8002582:	2026      	movs	r0, #38	@ 0x26
 8002584:	f000 fa26 	bl	80029d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002588:	2026      	movs	r0, #38	@ 0x26
 800258a:	f000 fa3f 	bl	8002a0c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800258e:	bf00      	nop
 8002590:	3728      	adds	r7, #40	@ 0x28
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40004400 	.word	0x40004400
 800259c:	40023800 	.word	0x40023800
 80025a0:	40020000 	.word	0x40020000

080025a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b08e      	sub	sp, #56	@ 0x38
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80025b4:	2300      	movs	r3, #0
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4b33      	ldr	r3, [pc, #204]	@ (8002688 <HAL_InitTick+0xe4>)
 80025ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025bc:	4a32      	ldr	r2, [pc, #200]	@ (8002688 <HAL_InitTick+0xe4>)
 80025be:	f043 0310 	orr.w	r3, r3, #16
 80025c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80025c4:	4b30      	ldr	r3, [pc, #192]	@ (8002688 <HAL_InitTick+0xe4>)
 80025c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80025d0:	f107 0210 	add.w	r2, r7, #16
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f001 f904 	bl	80037e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80025e0:	6a3b      	ldr	r3, [r7, #32]
 80025e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80025e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d103      	bne.n	80025f2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80025ea:	f001 f8d5 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 80025ee:	6378      	str	r0, [r7, #52]	@ 0x34
 80025f0:	e004      	b.n	80025fc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80025f2:	f001 f8d1 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 80025f6:	4603      	mov	r3, r0
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80025fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025fe:	4a23      	ldr	r2, [pc, #140]	@ (800268c <HAL_InitTick+0xe8>)
 8002600:	fba2 2303 	umull	r2, r3, r2, r3
 8002604:	0c9b      	lsrs	r3, r3, #18
 8002606:	3b01      	subs	r3, #1
 8002608:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800260a:	4b21      	ldr	r3, [pc, #132]	@ (8002690 <HAL_InitTick+0xec>)
 800260c:	4a21      	ldr	r2, [pc, #132]	@ (8002694 <HAL_InitTick+0xf0>)
 800260e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002610:	4b1f      	ldr	r3, [pc, #124]	@ (8002690 <HAL_InitTick+0xec>)
 8002612:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002616:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002618:	4a1d      	ldr	r2, [pc, #116]	@ (8002690 <HAL_InitTick+0xec>)
 800261a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800261e:	4b1c      	ldr	r3, [pc, #112]	@ (8002690 <HAL_InitTick+0xec>)
 8002620:	2200      	movs	r2, #0
 8002622:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002624:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <HAL_InitTick+0xec>)
 8002626:	2200      	movs	r2, #0
 8002628:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800262a:	4b19      	ldr	r3, [pc, #100]	@ (8002690 <HAL_InitTick+0xec>)
 800262c:	2200      	movs	r2, #0
 800262e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002630:	4817      	ldr	r0, [pc, #92]	@ (8002690 <HAL_InitTick+0xec>)
 8002632:	f001 fcf9 	bl	8004028 <HAL_TIM_Base_Init>
 8002636:	4603      	mov	r3, r0
 8002638:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800263c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002640:	2b00      	cmp	r3, #0
 8002642:	d11b      	bne.n	800267c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002644:	4812      	ldr	r0, [pc, #72]	@ (8002690 <HAL_InitTick+0xec>)
 8002646:	f001 fd49 	bl	80040dc <HAL_TIM_Base_Start_IT>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002650:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002654:	2b00      	cmp	r3, #0
 8002656:	d111      	bne.n	800267c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002658:	2036      	movs	r0, #54	@ 0x36
 800265a:	f000 f9d7 	bl	8002a0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b0f      	cmp	r3, #15
 8002662:	d808      	bhi.n	8002676 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002664:	2200      	movs	r2, #0
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	2036      	movs	r0, #54	@ 0x36
 800266a:	f000 f9b3 	bl	80029d4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800266e:	4a0a      	ldr	r2, [pc, #40]	@ (8002698 <HAL_InitTick+0xf4>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	e002      	b.n	800267c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800267c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002680:	4618      	mov	r0, r3
 8002682:	3738      	adds	r7, #56	@ 0x38
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	40023800 	.word	0x40023800
 800268c:	431bde83 	.word	0x431bde83
 8002690:	200001f0 	.word	0x200001f0
 8002694:	40001000 	.word	0x40001000
 8002698:	20000068 	.word	0x20000068

0800269c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026a0:	bf00      	nop
 80026a2:	e7fd      	b.n	80026a0 <NMI_Handler+0x4>

080026a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <HardFault_Handler+0x4>

080026ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <MemManage_Handler+0x4>

080026b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026b8:	bf00      	nop
 80026ba:	e7fd      	b.n	80026b8 <BusFault_Handler+0x4>

080026bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <UsageFault_Handler+0x4>

080026c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
	...

080026d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80026d8:	4802      	ldr	r0, [pc, #8]	@ (80026e4 <USART2_IRQHandler+0x10>)
 80026da:	f002 f847 	bl	800476c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	20000174 	.word	0x20000174

080026e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80026ec:	4802      	ldr	r0, [pc, #8]	@ (80026f8 <TIM6_DAC_IRQHandler+0x10>)
 80026ee:	f001 fd65 	bl	80041bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200001f0 	.word	0x200001f0

080026fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002704:	4a14      	ldr	r2, [pc, #80]	@ (8002758 <_sbrk+0x5c>)
 8002706:	4b15      	ldr	r3, [pc, #84]	@ (800275c <_sbrk+0x60>)
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002710:	4b13      	ldr	r3, [pc, #76]	@ (8002760 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002718:	4b11      	ldr	r3, [pc, #68]	@ (8002760 <_sbrk+0x64>)
 800271a:	4a12      	ldr	r2, [pc, #72]	@ (8002764 <_sbrk+0x68>)
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800271e:	4b10      	ldr	r3, [pc, #64]	@ (8002760 <_sbrk+0x64>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	429a      	cmp	r2, r3
 800272a:	d207      	bcs.n	800273c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800272c:	f005 feda 	bl	80084e4 <__errno>
 8002730:	4603      	mov	r3, r0
 8002732:	220c      	movs	r2, #12
 8002734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800273a:	e009      	b.n	8002750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800273c:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002742:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <_sbrk+0x64>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	4a05      	ldr	r2, [pc, #20]	@ (8002760 <_sbrk+0x64>)
 800274c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20020000 	.word	0x20020000
 800275c:	00000400 	.word	0x00000400
 8002760:	20000238 	.word	0x20000238
 8002764:	20019530 	.word	0x20019530

08002768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800276c:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <SystemInit+0x20>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002772:	4a05      	ldr	r2, [pc, #20]	@ (8002788 <SystemInit+0x20>)
 8002774:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002778:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800278c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002790:	f7ff ffea 	bl	8002768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002794:	480c      	ldr	r0, [pc, #48]	@ (80027c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002796:	490d      	ldr	r1, [pc, #52]	@ (80027cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002798:	4a0d      	ldr	r2, [pc, #52]	@ (80027d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800279a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800279c:	e002      	b.n	80027a4 <LoopCopyDataInit>

0800279e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027a2:	3304      	adds	r3, #4

080027a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a8:	d3f9      	bcc.n	800279e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027aa:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027ac:	4c0a      	ldr	r4, [pc, #40]	@ (80027d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027b0:	e001      	b.n	80027b6 <LoopFillZerobss>

080027b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b4:	3204      	adds	r2, #4

080027b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b8:	d3fb      	bcc.n	80027b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027ba:	f005 fe99 	bl	80084f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027be:	f7ff fa9d 	bl	8001cfc <main>
  bx  lr    
 80027c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027cc:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 80027d0:	08009740 	.word	0x08009740
  ldr r2, =_sbss
 80027d4:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 80027d8:	20019530 	.word	0x20019530

080027dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027dc:	e7fe      	b.n	80027dc <ADC_IRQHandler>
	...

080027e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002820 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002820 <HAL_Init+0x40>)
 80027ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002820 <HAL_Init+0x40>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <HAL_Init+0x40>)
 80027f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027fc:	4b08      	ldr	r3, [pc, #32]	@ (8002820 <HAL_Init+0x40>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a07      	ldr	r2, [pc, #28]	@ (8002820 <HAL_Init+0x40>)
 8002802:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002806:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002808:	2003      	movs	r0, #3
 800280a:	f000 f8d8 	bl	80029be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280e:	200f      	movs	r0, #15
 8002810:	f7ff fec8 	bl	80025a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002814:	f7ff fe24 	bl	8002460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40023c00 	.word	0x40023c00

08002824 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002824:	b480      	push	{r7}
 8002826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002828:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_IncTick+0x20>)
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	461a      	mov	r2, r3
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_IncTick+0x24>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4413      	add	r3, r2
 8002834:	4a04      	ldr	r2, [pc, #16]	@ (8002848 <HAL_IncTick+0x24>)
 8002836:	6013      	str	r3, [r2, #0]
}
 8002838:	bf00      	nop
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	2000006c 	.word	0x2000006c
 8002848:	2000023c 	.word	0x2000023c

0800284c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
  return uwTick;
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <HAL_GetTick+0x14>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	4618      	mov	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	2000023c 	.word	0x2000023c

08002864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002874:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800287a:	68ba      	ldr	r2, [r7, #8]
 800287c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002880:	4013      	ands	r3, r2
 8002882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800288c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002896:	4a04      	ldr	r2, [pc, #16]	@ (80028a8 <__NVIC_SetPriorityGrouping+0x44>)
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	60d3      	str	r3, [r2, #12]
}
 800289c:	bf00      	nop
 800289e:	3714      	adds	r7, #20
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	e000ed00 	.word	0xe000ed00

080028ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b0:	4b04      	ldr	r3, [pc, #16]	@ (80028c4 <__NVIC_GetPriorityGrouping+0x18>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	0a1b      	lsrs	r3, r3, #8
 80028b6:	f003 0307 	and.w	r3, r3, #7
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr
 80028c4:	e000ed00 	.word	0xe000ed00

080028c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	4603      	mov	r3, r0
 80028d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	db0b      	blt.n	80028f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	f003 021f 	and.w	r2, r3, #31
 80028e0:	4907      	ldr	r1, [pc, #28]	@ (8002900 <__NVIC_EnableIRQ+0x38>)
 80028e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	2001      	movs	r0, #1
 80028ea:	fa00 f202 	lsl.w	r2, r0, r2
 80028ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028f2:	bf00      	nop
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	e000e100 	.word	0xe000e100

08002904 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002914:	2b00      	cmp	r3, #0
 8002916:	db0a      	blt.n	800292e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	b2da      	uxtb	r2, r3
 800291c:	490c      	ldr	r1, [pc, #48]	@ (8002950 <__NVIC_SetPriority+0x4c>)
 800291e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002922:	0112      	lsls	r2, r2, #4
 8002924:	b2d2      	uxtb	r2, r2
 8002926:	440b      	add	r3, r1
 8002928:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800292c:	e00a      	b.n	8002944 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4908      	ldr	r1, [pc, #32]	@ (8002954 <__NVIC_SetPriority+0x50>)
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	3b04      	subs	r3, #4
 800293c:	0112      	lsls	r2, r2, #4
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	440b      	add	r3, r1
 8002942:	761a      	strb	r2, [r3, #24]
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	e000e100 	.word	0xe000e100
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002958:	b480      	push	{r7}
 800295a:	b089      	sub	sp, #36	@ 0x24
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f1c3 0307 	rsb	r3, r3, #7
 8002972:	2b04      	cmp	r3, #4
 8002974:	bf28      	it	cs
 8002976:	2304      	movcs	r3, #4
 8002978:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	3304      	adds	r3, #4
 800297e:	2b06      	cmp	r3, #6
 8002980:	d902      	bls.n	8002988 <NVIC_EncodePriority+0x30>
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	3b03      	subs	r3, #3
 8002986:	e000      	b.n	800298a <NVIC_EncodePriority+0x32>
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800298c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43da      	mvns	r2, r3
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	401a      	ands	r2, r3
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029a0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43d9      	mvns	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b0:	4313      	orrs	r3, r2
         );
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3724      	adds	r7, #36	@ 0x24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029be:	b580      	push	{r7, lr}
 80029c0:	b082      	sub	sp, #8
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ff4c 	bl	8002864 <__NVIC_SetPriorityGrouping>
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}

080029d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b086      	sub	sp, #24
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	60b9      	str	r1, [r7, #8]
 80029de:	607a      	str	r2, [r7, #4]
 80029e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e6:	f7ff ff61 	bl	80028ac <__NVIC_GetPriorityGrouping>
 80029ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	68b9      	ldr	r1, [r7, #8]
 80029f0:	6978      	ldr	r0, [r7, #20]
 80029f2:	f7ff ffb1 	bl	8002958 <NVIC_EncodePriority>
 80029f6:	4602      	mov	r2, r0
 80029f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff ff80 	bl	8002904 <__NVIC_SetPriority>
}
 8002a04:	bf00      	nop
 8002a06:	3718      	adds	r7, #24
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff ff54 	bl	80028c8 <__NVIC_EnableIRQ>
}
 8002a20:	bf00      	nop
 8002a22:	3708      	adds	r7, #8
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a36:	f7ff ff09 	bl	800284c <HAL_GetTick>
 8002a3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d008      	beq.n	8002a5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2280      	movs	r2, #128	@ 0x80
 8002a4c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e052      	b.n	8002b00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f022 0216 	bic.w	r2, r2, #22
 8002a68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	695a      	ldr	r2, [r3, #20]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d103      	bne.n	8002a8a <HAL_DMA_Abort+0x62>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0208 	bic.w	r2, r2, #8
 8002a98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0201 	bic.w	r2, r2, #1
 8002aa8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002aaa:	e013      	b.n	8002ad4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aac:	f7ff fece 	bl	800284c <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	2b05      	cmp	r3, #5
 8002ab8:	d90c      	bls.n	8002ad4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2203      	movs	r2, #3
 8002ac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e015      	b.n	8002b00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1e4      	bne.n	8002aac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae6:	223f      	movs	r2, #63	@ 0x3f
 8002ae8:	409a      	lsls	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002afe:	2300      	movs	r3, #0
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3710      	adds	r7, #16
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d004      	beq.n	8002b26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2280      	movs	r2, #128	@ 0x80
 8002b20:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00c      	b.n	8002b40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2205      	movs	r2, #5
 8002b2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b3e:	2300      	movs	r3, #0
}
 8002b40:	4618      	mov	r0, r3
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b089      	sub	sp, #36	@ 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	2300      	movs	r3, #0
 8002b64:	61fb      	str	r3, [r7, #28]
 8002b66:	e16b      	b.n	8002e40 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b68:	2201      	movs	r2, #1
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4013      	ands	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b7c:	693a      	ldr	r2, [r7, #16]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	f040 815a 	bne.w	8002e3a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d005      	beq.n	8002b9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d130      	bne.n	8002c00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4013      	ands	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 0201 	and.w	r2, r3, #1
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf4:	69ba      	ldr	r2, [r7, #24]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f003 0303 	and.w	r3, r3, #3
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d017      	beq.n	8002c3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	005b      	lsls	r3, r3, #1
 8002c16:	2203      	movs	r2, #3
 8002c18:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1c:	43db      	mvns	r3, r3
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	4013      	ands	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f003 0303 	and.w	r3, r3, #3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d123      	bne.n	8002c90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	08da      	lsrs	r2, r3, #3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	3208      	adds	r2, #8
 8002c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0307 	and.w	r3, r3, #7
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	220f      	movs	r2, #15
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	43db      	mvns	r3, r3
 8002c66:	69ba      	ldr	r2, [r7, #24]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 0307 	and.w	r3, r3, #7
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	08da      	lsrs	r2, r3, #3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3208      	adds	r2, #8
 8002c8a:	69b9      	ldr	r1, [r7, #24]
 8002c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0203 	and.w	r2, r3, #3
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	69ba      	ldr	r2, [r7, #24]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 80b4 	beq.w	8002e3a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	4b60      	ldr	r3, [pc, #384]	@ (8002e58 <HAL_GPIO_Init+0x30c>)
 8002cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cda:	4a5f      	ldr	r2, [pc, #380]	@ (8002e58 <HAL_GPIO_Init+0x30c>)
 8002cdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ce2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e58 <HAL_GPIO_Init+0x30c>)
 8002ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cee:	4a5b      	ldr	r2, [pc, #364]	@ (8002e5c <HAL_GPIO_Init+0x310>)
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	089b      	lsrs	r3, r3, #2
 8002cf4:	3302      	adds	r3, #2
 8002cf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f003 0303 	and.w	r3, r3, #3
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	220f      	movs	r2, #15
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a52      	ldr	r2, [pc, #328]	@ (8002e60 <HAL_GPIO_Init+0x314>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d02b      	beq.n	8002d72 <HAL_GPIO_Init+0x226>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a51      	ldr	r2, [pc, #324]	@ (8002e64 <HAL_GPIO_Init+0x318>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d025      	beq.n	8002d6e <HAL_GPIO_Init+0x222>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a50      	ldr	r2, [pc, #320]	@ (8002e68 <HAL_GPIO_Init+0x31c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01f      	beq.n	8002d6a <HAL_GPIO_Init+0x21e>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a4f      	ldr	r2, [pc, #316]	@ (8002e6c <HAL_GPIO_Init+0x320>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d019      	beq.n	8002d66 <HAL_GPIO_Init+0x21a>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a4e      	ldr	r2, [pc, #312]	@ (8002e70 <HAL_GPIO_Init+0x324>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d013      	beq.n	8002d62 <HAL_GPIO_Init+0x216>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a4d      	ldr	r2, [pc, #308]	@ (8002e74 <HAL_GPIO_Init+0x328>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00d      	beq.n	8002d5e <HAL_GPIO_Init+0x212>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4a4c      	ldr	r2, [pc, #304]	@ (8002e78 <HAL_GPIO_Init+0x32c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d007      	beq.n	8002d5a <HAL_GPIO_Init+0x20e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	4a4b      	ldr	r2, [pc, #300]	@ (8002e7c <HAL_GPIO_Init+0x330>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d101      	bne.n	8002d56 <HAL_GPIO_Init+0x20a>
 8002d52:	2307      	movs	r3, #7
 8002d54:	e00e      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d56:	2308      	movs	r3, #8
 8002d58:	e00c      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d5a:	2306      	movs	r3, #6
 8002d5c:	e00a      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d5e:	2305      	movs	r3, #5
 8002d60:	e008      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d62:	2304      	movs	r3, #4
 8002d64:	e006      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d66:	2303      	movs	r3, #3
 8002d68:	e004      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	e002      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e000      	b.n	8002d74 <HAL_GPIO_Init+0x228>
 8002d72:	2300      	movs	r3, #0
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	f002 0203 	and.w	r2, r2, #3
 8002d7a:	0092      	lsls	r2, r2, #2
 8002d7c:	4093      	lsls	r3, r2
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d84:	4935      	ldr	r1, [pc, #212]	@ (8002e5c <HAL_GPIO_Init+0x310>)
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	089b      	lsrs	r3, r3, #2
 8002d8a:	3302      	adds	r3, #2
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002d92:	4b3b      	ldr	r3, [pc, #236]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	43db      	mvns	r3, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4013      	ands	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002db6:	4a32      	ldr	r2, [pc, #200]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dbc:	4b30      	ldr	r3, [pc, #192]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	43db      	mvns	r3, r3
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d003      	beq.n	8002de0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	693b      	ldr	r3, [r7, #16]
 8002ddc:	4313      	orrs	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002de0:	4a27      	ldr	r2, [pc, #156]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002de6:	4b26      	ldr	r3, [pc, #152]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4013      	ands	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d003      	beq.n	8002e0a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e0a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e10:	4b1b      	ldr	r3, [pc, #108]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e34:	4a12      	ldr	r2, [pc, #72]	@ (8002e80 <HAL_GPIO_Init+0x334>)
 8002e36:	69bb      	ldr	r3, [r7, #24]
 8002e38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2b0f      	cmp	r3, #15
 8002e44:	f67f ae90 	bls.w	8002b68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e48:	bf00      	nop
 8002e4a:	bf00      	nop
 8002e4c:	3724      	adds	r7, #36	@ 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800
 8002e5c:	40013800 	.word	0x40013800
 8002e60:	40020000 	.word	0x40020000
 8002e64:	40020400 	.word	0x40020400
 8002e68:	40020800 	.word	0x40020800
 8002e6c:	40020c00 	.word	0x40020c00
 8002e70:	40021000 	.word	0x40021000
 8002e74:	40021400 	.word	0x40021400
 8002e78:	40021800 	.word	0x40021800
 8002e7c:	40021c00 	.word	0x40021c00
 8002e80:	40013c00 	.word	0x40013c00

08002e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b083      	sub	sp, #12
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	807b      	strh	r3, [r7, #2]
 8002e90:	4613      	mov	r3, r2
 8002e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e94:	787b      	ldrb	r3, [r7, #1]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ea0:	e003      	b.n	8002eaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ea2:	887b      	ldrh	r3, [r7, #2]
 8002ea4:	041a      	lsls	r2, r3, #16
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	619a      	str	r2, [r3, #24]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
	...

08002eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b086      	sub	sp, #24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e267      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d075      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ed6:	4b88      	ldr	r3, [pc, #544]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	2b04      	cmp	r3, #4
 8002ee0:	d00c      	beq.n	8002efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ee2:	4b85      	ldr	r3, [pc, #532]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d112      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eee:	4b82      	ldr	r3, [pc, #520]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002efa:	d10b      	bne.n	8002f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002efc:	4b7e      	ldr	r3, [pc, #504]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d05b      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x108>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d157      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e242      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f1c:	d106      	bne.n	8002f2c <HAL_RCC_OscConfig+0x74>
 8002f1e:	4b76      	ldr	r3, [pc, #472]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a75      	ldr	r2, [pc, #468]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e01d      	b.n	8002f68 <HAL_RCC_OscConfig+0xb0>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f34:	d10c      	bne.n	8002f50 <HAL_RCC_OscConfig+0x98>
 8002f36:	4b70      	ldr	r3, [pc, #448]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a6f      	ldr	r2, [pc, #444]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4b6d      	ldr	r3, [pc, #436]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a6c      	ldr	r2, [pc, #432]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	e00b      	b.n	8002f68 <HAL_RCC_OscConfig+0xb0>
 8002f50:	4b69      	ldr	r3, [pc, #420]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a68      	ldr	r2, [pc, #416]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f5a:	6013      	str	r3, [r2, #0]
 8002f5c:	4b66      	ldr	r3, [pc, #408]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a65      	ldr	r2, [pc, #404]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d013      	beq.n	8002f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f70:	f7ff fc6c 	bl	800284c <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f78:	f7ff fc68 	bl	800284c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b64      	cmp	r3, #100	@ 0x64
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e207      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	4b5b      	ldr	r3, [pc, #364]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0xc0>
 8002f96:	e014      	b.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f98:	f7ff fc58 	bl	800284c <HAL_GetTick>
 8002f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f9e:	e008      	b.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa0:	f7ff fc54 	bl	800284c <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	2b64      	cmp	r3, #100	@ 0x64
 8002fac:	d901      	bls.n	8002fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002fae:	2303      	movs	r3, #3
 8002fb0:	e1f3      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	4b51      	ldr	r3, [pc, #324]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f0      	bne.n	8002fa0 <HAL_RCC_OscConfig+0xe8>
 8002fbe:	e000      	b.n	8002fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d063      	beq.n	8003096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fce:	4b4a      	ldr	r3, [pc, #296]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f003 030c 	and.w	r3, r3, #12
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00b      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fda:	4b47      	ldr	r3, [pc, #284]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fe2:	2b08      	cmp	r3, #8
 8002fe4:	d11c      	bne.n	8003020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002fe6:	4b44      	ldr	r3, [pc, #272]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d116      	bne.n	8003020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ff2:	4b41      	ldr	r3, [pc, #260]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d005      	beq.n	800300a <HAL_RCC_OscConfig+0x152>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d001      	beq.n	800300a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e1c7      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800300a:	4b3b      	ldr	r3, [pc, #236]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4937      	ldr	r1, [pc, #220]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	e03a      	b.n	8003096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003028:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <HAL_RCC_OscConfig+0x244>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800302e:	f7ff fc0d 	bl	800284c <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003036:	f7ff fc09 	bl	800284c <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e1a8      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003048:	4b2b      	ldr	r3, [pc, #172]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003054:	4b28      	ldr	r3, [pc, #160]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4925      	ldr	r1, [pc, #148]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 8003064:	4313      	orrs	r3, r2
 8003066:	600b      	str	r3, [r1, #0]
 8003068:	e015      	b.n	8003096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800306a:	4b24      	ldr	r3, [pc, #144]	@ (80030fc <HAL_RCC_OscConfig+0x244>)
 800306c:	2200      	movs	r2, #0
 800306e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7ff fbec 	bl	800284c <HAL_GetTick>
 8003074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003078:	f7ff fbe8 	bl	800284c <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e187      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800308a:	4b1b      	ldr	r3, [pc, #108]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1f0      	bne.n	8003078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d036      	beq.n	8003110 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d016      	beq.n	80030d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030aa:	4b15      	ldr	r3, [pc, #84]	@ (8003100 <HAL_RCC_OscConfig+0x248>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7ff fbcc 	bl	800284c <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030b6:	e008      	b.n	80030ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030b8:	f7ff fbc8 	bl	800284c <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	2b02      	cmp	r3, #2
 80030c4:	d901      	bls.n	80030ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80030c6:	2303      	movs	r3, #3
 80030c8:	e167      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ca:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_RCC_OscConfig+0x240>)
 80030cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d0f0      	beq.n	80030b8 <HAL_RCC_OscConfig+0x200>
 80030d6:	e01b      	b.n	8003110 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030d8:	4b09      	ldr	r3, [pc, #36]	@ (8003100 <HAL_RCC_OscConfig+0x248>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030de:	f7ff fbb5 	bl	800284c <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e4:	e00e      	b.n	8003104 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e6:	f7ff fbb1 	bl	800284c <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d907      	bls.n	8003104 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e150      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	42470000 	.word	0x42470000
 8003100:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003104:	4b88      	ldr	r3, [pc, #544]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003106:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003108:	f003 0302 	and.w	r3, r3, #2
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1ea      	bne.n	80030e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 8097 	beq.w	800324c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800311e:	2300      	movs	r3, #0
 8003120:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003122:	4b81      	ldr	r3, [pc, #516]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10f      	bne.n	800314e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60bb      	str	r3, [r7, #8]
 8003132:	4b7d      	ldr	r3, [pc, #500]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003136:	4a7c      	ldr	r2, [pc, #496]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800313c:	6413      	str	r3, [r2, #64]	@ 0x40
 800313e:	4b7a      	ldr	r3, [pc, #488]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314a:	2301      	movs	r3, #1
 800314c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314e:	4b77      	ldr	r3, [pc, #476]	@ (800332c <HAL_RCC_OscConfig+0x474>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d118      	bne.n	800318c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315a:	4b74      	ldr	r3, [pc, #464]	@ (800332c <HAL_RCC_OscConfig+0x474>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a73      	ldr	r2, [pc, #460]	@ (800332c <HAL_RCC_OscConfig+0x474>)
 8003160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003166:	f7ff fb71 	bl	800284c <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316e:	f7ff fb6d 	bl	800284c <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e10c      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	4b6a      	ldr	r3, [pc, #424]	@ (800332c <HAL_RCC_OscConfig+0x474>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x2ea>
 8003194:	4b64      	ldr	r3, [pc, #400]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a63      	ldr	r2, [pc, #396]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 800319a:	f043 0301 	orr.w	r3, r3, #1
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
 80031a0:	e01c      	b.n	80031dc <HAL_RCC_OscConfig+0x324>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b05      	cmp	r3, #5
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x30c>
 80031aa:	4b5f      	ldr	r3, [pc, #380]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031b0:	f043 0304 	orr.w	r3, r3, #4
 80031b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80031b6:	4b5c      	ldr	r3, [pc, #368]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ba:	4a5b      	ldr	r2, [pc, #364]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031c2:	e00b      	b.n	80031dc <HAL_RCC_OscConfig+0x324>
 80031c4:	4b58      	ldr	r3, [pc, #352]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c8:	4a57      	ldr	r2, [pc, #348]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031ca:	f023 0301 	bic.w	r3, r3, #1
 80031ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80031d0:	4b55      	ldr	r3, [pc, #340]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d4:	4a54      	ldr	r2, [pc, #336]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80031d6:	f023 0304 	bic.w	r3, r3, #4
 80031da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d015      	beq.n	8003210 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7ff fb32 	bl	800284c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ea:	e00a      	b.n	8003202 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031ec:	f7ff fb2e 	bl	800284c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e0cb      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003202:	4b49      	ldr	r3, [pc, #292]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ee      	beq.n	80031ec <HAL_RCC_OscConfig+0x334>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003210:	f7ff fb1c 	bl	800284c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7ff fb18 	bl	800284c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0b5      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800322e:	4b3e      	ldr	r3, [pc, #248]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1ee      	bne.n	8003218 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800323a:	7dfb      	ldrb	r3, [r7, #23]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d105      	bne.n	800324c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003240:	4b39      	ldr	r3, [pc, #228]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	4a38      	ldr	r2, [pc, #224]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003246:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800324a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 80a1 	beq.w	8003398 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003256:	4b34      	ldr	r3, [pc, #208]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
 800325e:	2b08      	cmp	r3, #8
 8003260:	d05c      	beq.n	800331c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	699b      	ldr	r3, [r3, #24]
 8003266:	2b02      	cmp	r3, #2
 8003268:	d141      	bne.n	80032ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326a:	4b31      	ldr	r3, [pc, #196]	@ (8003330 <HAL_RCC_OscConfig+0x478>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003270:	f7ff faec 	bl	800284c <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	e008      	b.n	800328a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003278:	f7ff fae8 	bl	800284c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	2b02      	cmp	r3, #2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e087      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800328a:	4b27      	ldr	r3, [pc, #156]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1f0      	bne.n	8003278 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	69da      	ldr	r2, [r3, #28]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a4:	019b      	lsls	r3, r3, #6
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ac:	085b      	lsrs	r3, r3, #1
 80032ae:	3b01      	subs	r3, #1
 80032b0:	041b      	lsls	r3, r3, #16
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032b8:	061b      	lsls	r3, r3, #24
 80032ba:	491b      	ldr	r1, [pc, #108]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80032bc:	4313      	orrs	r3, r2
 80032be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003330 <HAL_RCC_OscConfig+0x478>)
 80032c2:	2201      	movs	r2, #1
 80032c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c6:	f7ff fac1 	bl	800284c <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032cc:	e008      	b.n	80032e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ce:	f7ff fabd 	bl	800284c <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e05c      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032e0:	4b11      	ldr	r3, [pc, #68]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0f0      	beq.n	80032ce <HAL_RCC_OscConfig+0x416>
 80032ec:	e054      	b.n	8003398 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ee:	4b10      	ldr	r3, [pc, #64]	@ (8003330 <HAL_RCC_OscConfig+0x478>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f4:	f7ff faaa 	bl	800284c <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fc:	f7ff faa6 	bl	800284c <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e045      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800330e:	4b06      	ldr	r3, [pc, #24]	@ (8003328 <HAL_RCC_OscConfig+0x470>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f0      	bne.n	80032fc <HAL_RCC_OscConfig+0x444>
 800331a:	e03d      	b.n	8003398 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d107      	bne.n	8003334 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e038      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
 8003328:	40023800 	.word	0x40023800
 800332c:	40007000 	.word	0x40007000
 8003330:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003334:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <HAL_RCC_OscConfig+0x4ec>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d028      	beq.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d121      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	429a      	cmp	r2, r3
 800335c:	d11a      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003364:	4013      	ands	r3, r2
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800336a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800336c:	4293      	cmp	r3, r2
 800336e:	d111      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800337a:	085b      	lsrs	r3, r3, #1
 800337c:	3b01      	subs	r3, #1
 800337e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003390:	429a      	cmp	r2, r3
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e000      	b.n	800339a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800

080033a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0cc      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b68      	ldr	r3, [pc, #416]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d90c      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b65      	ldr	r3, [pc, #404]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	b2d2      	uxtb	r2, r2
 80033d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b63      	ldr	r3, [pc, #396]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0b8      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d020      	beq.n	8003432 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d005      	beq.n	8003408 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033fc:	4b59      	ldr	r3, [pc, #356]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	4a58      	ldr	r2, [pc, #352]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003406:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0308 	and.w	r3, r3, #8
 8003410:	2b00      	cmp	r3, #0
 8003412:	d005      	beq.n	8003420 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003414:	4b53      	ldr	r3, [pc, #332]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4a52      	ldr	r2, [pc, #328]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800341a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800341e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003420:	4b50      	ldr	r3, [pc, #320]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	494d      	ldr	r1, [pc, #308]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d044      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d107      	bne.n	8003456 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003446:	4b47      	ldr	r3, [pc, #284]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d119      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e07f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d003      	beq.n	8003466 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003462:	2b03      	cmp	r3, #3
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	4b3f      	ldr	r3, [pc, #252]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e06f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003476:	4b3b      	ldr	r3, [pc, #236]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e067      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003486:	4b37      	ldr	r3, [pc, #220]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4934      	ldr	r1, [pc, #208]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	4313      	orrs	r3, r2
 8003496:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003498:	f7ff f9d8 	bl	800284c <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7ff f9d4 	bl	800284c <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e04f      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	4b2b      	ldr	r3, [pc, #172]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	f003 020c 	and.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1eb      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034c8:	4b25      	ldr	r3, [pc, #148]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d20c      	bcs.n	80034f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b22      	ldr	r3, [pc, #136]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	b2d2      	uxtb	r2, r2
 80034dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034de:	4b20      	ldr	r3, [pc, #128]	@ (8003560 <HAL_RCC_ClockConfig+0x1b8>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0307 	and.w	r3, r3, #7
 80034e6:	683a      	ldr	r2, [r7, #0]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d001      	beq.n	80034f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e032      	b.n	8003556 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f003 0304 	and.w	r3, r3, #4
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d008      	beq.n	800350e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034fc:	4b19      	ldr	r3, [pc, #100]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4916      	ldr	r1, [pc, #88]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800351a:	4b12      	ldr	r3, [pc, #72]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	490e      	ldr	r1, [pc, #56]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 800352a:	4313      	orrs	r3, r2
 800352c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800352e:	f000 f821 	bl	8003574 <HAL_RCC_GetSysClockFreq>
 8003532:	4602      	mov	r2, r0
 8003534:	4b0b      	ldr	r3, [pc, #44]	@ (8003564 <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	091b      	lsrs	r3, r3, #4
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	490a      	ldr	r1, [pc, #40]	@ (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 8003540:	5ccb      	ldrb	r3, [r1, r3]
 8003542:	fa22 f303 	lsr.w	r3, r2, r3
 8003546:	4a09      	ldr	r2, [pc, #36]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800354a:	4b09      	ldr	r3, [pc, #36]	@ (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff f828 	bl	80025a4 <HAL_InitTick>

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40023c00 	.word	0x40023c00
 8003564:	40023800 	.word	0x40023800
 8003568:	080095e4 	.word	0x080095e4
 800356c:	20000064 	.word	0x20000064
 8003570:	20000068 	.word	0x20000068

08003574 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003574:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003578:	b094      	sub	sp, #80	@ 0x50
 800357a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800357c:	2300      	movs	r3, #0
 800357e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003580:	2300      	movs	r3, #0
 8003582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003584:	2300      	movs	r3, #0
 8003586:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003588:	2300      	movs	r3, #0
 800358a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800358c:	4b79      	ldr	r3, [pc, #484]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 030c 	and.w	r3, r3, #12
 8003594:	2b08      	cmp	r3, #8
 8003596:	d00d      	beq.n	80035b4 <HAL_RCC_GetSysClockFreq+0x40>
 8003598:	2b08      	cmp	r3, #8
 800359a:	f200 80e1 	bhi.w	8003760 <HAL_RCC_GetSysClockFreq+0x1ec>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d002      	beq.n	80035a8 <HAL_RCC_GetSysClockFreq+0x34>
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d003      	beq.n	80035ae <HAL_RCC_GetSysClockFreq+0x3a>
 80035a6:	e0db      	b.n	8003760 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035a8:	4b73      	ldr	r3, [pc, #460]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x204>)
 80035aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80035ac:	e0db      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80035ae:	4b73      	ldr	r3, [pc, #460]	@ (800377c <HAL_RCC_GetSysClockFreq+0x208>)
 80035b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80035b2:	e0d8      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80035b4:	4b6f      	ldr	r3, [pc, #444]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80035be:	4b6d      	ldr	r3, [pc, #436]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d063      	beq.n	8003692 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035ca:	4b6a      	ldr	r3, [pc, #424]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	099b      	lsrs	r3, r3, #6
 80035d0:	2200      	movs	r2, #0
 80035d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80035d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80035de:	2300      	movs	r3, #0
 80035e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80035e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80035e6:	4622      	mov	r2, r4
 80035e8:	462b      	mov	r3, r5
 80035ea:	f04f 0000 	mov.w	r0, #0
 80035ee:	f04f 0100 	mov.w	r1, #0
 80035f2:	0159      	lsls	r1, r3, #5
 80035f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035f8:	0150      	lsls	r0, r2, #5
 80035fa:	4602      	mov	r2, r0
 80035fc:	460b      	mov	r3, r1
 80035fe:	4621      	mov	r1, r4
 8003600:	1a51      	subs	r1, r2, r1
 8003602:	6139      	str	r1, [r7, #16]
 8003604:	4629      	mov	r1, r5
 8003606:	eb63 0301 	sbc.w	r3, r3, r1
 800360a:	617b      	str	r3, [r7, #20]
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003618:	4659      	mov	r1, fp
 800361a:	018b      	lsls	r3, r1, #6
 800361c:	4651      	mov	r1, sl
 800361e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003622:	4651      	mov	r1, sl
 8003624:	018a      	lsls	r2, r1, #6
 8003626:	4651      	mov	r1, sl
 8003628:	ebb2 0801 	subs.w	r8, r2, r1
 800362c:	4659      	mov	r1, fp
 800362e:	eb63 0901 	sbc.w	r9, r3, r1
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800363e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003642:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003646:	4690      	mov	r8, r2
 8003648:	4699      	mov	r9, r3
 800364a:	4623      	mov	r3, r4
 800364c:	eb18 0303 	adds.w	r3, r8, r3
 8003650:	60bb      	str	r3, [r7, #8]
 8003652:	462b      	mov	r3, r5
 8003654:	eb49 0303 	adc.w	r3, r9, r3
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003666:	4629      	mov	r1, r5
 8003668:	024b      	lsls	r3, r1, #9
 800366a:	4621      	mov	r1, r4
 800366c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003670:	4621      	mov	r1, r4
 8003672:	024a      	lsls	r2, r1, #9
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800367a:	2200      	movs	r2, #0
 800367c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800367e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003680:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003684:	f7fd fa02 	bl	8000a8c <__aeabi_uldivmod>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4613      	mov	r3, r2
 800368e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003690:	e058      	b.n	8003744 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003692:	4b38      	ldr	r3, [pc, #224]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	099b      	lsrs	r3, r3, #6
 8003698:	2200      	movs	r2, #0
 800369a:	4618      	mov	r0, r3
 800369c:	4611      	mov	r1, r2
 800369e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80036a2:	623b      	str	r3, [r7, #32]
 80036a4:	2300      	movs	r3, #0
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80036ac:	4642      	mov	r2, r8
 80036ae:	464b      	mov	r3, r9
 80036b0:	f04f 0000 	mov.w	r0, #0
 80036b4:	f04f 0100 	mov.w	r1, #0
 80036b8:	0159      	lsls	r1, r3, #5
 80036ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036be:	0150      	lsls	r0, r2, #5
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	4641      	mov	r1, r8
 80036c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80036ca:	4649      	mov	r1, r9
 80036cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80036d0:	f04f 0200 	mov.w	r2, #0
 80036d4:	f04f 0300 	mov.w	r3, #0
 80036d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80036dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80036e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80036e4:	ebb2 040a 	subs.w	r4, r2, sl
 80036e8:	eb63 050b 	sbc.w	r5, r3, fp
 80036ec:	f04f 0200 	mov.w	r2, #0
 80036f0:	f04f 0300 	mov.w	r3, #0
 80036f4:	00eb      	lsls	r3, r5, #3
 80036f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036fa:	00e2      	lsls	r2, r4, #3
 80036fc:	4614      	mov	r4, r2
 80036fe:	461d      	mov	r5, r3
 8003700:	4643      	mov	r3, r8
 8003702:	18e3      	adds	r3, r4, r3
 8003704:	603b      	str	r3, [r7, #0]
 8003706:	464b      	mov	r3, r9
 8003708:	eb45 0303 	adc.w	r3, r5, r3
 800370c:	607b      	str	r3, [r7, #4]
 800370e:	f04f 0200 	mov.w	r2, #0
 8003712:	f04f 0300 	mov.w	r3, #0
 8003716:	e9d7 4500 	ldrd	r4, r5, [r7]
 800371a:	4629      	mov	r1, r5
 800371c:	028b      	lsls	r3, r1, #10
 800371e:	4621      	mov	r1, r4
 8003720:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003724:	4621      	mov	r1, r4
 8003726:	028a      	lsls	r2, r1, #10
 8003728:	4610      	mov	r0, r2
 800372a:	4619      	mov	r1, r3
 800372c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800372e:	2200      	movs	r2, #0
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	61fa      	str	r2, [r7, #28]
 8003734:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003738:	f7fd f9a8 	bl	8000a8c <__aeabi_uldivmod>
 800373c:	4602      	mov	r2, r0
 800373e:	460b      	mov	r3, r1
 8003740:	4613      	mov	r3, r2
 8003742:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003744:	4b0b      	ldr	r3, [pc, #44]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x200>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	0c1b      	lsrs	r3, r3, #16
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	3301      	adds	r3, #1
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003754:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003756:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003758:	fbb2 f3f3 	udiv	r3, r2, r3
 800375c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800375e:	e002      	b.n	8003766 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003760:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <HAL_RCC_GetSysClockFreq+0x204>)
 8003762:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003764:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003766:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003768:	4618      	mov	r0, r3
 800376a:	3750      	adds	r7, #80	@ 0x50
 800376c:	46bd      	mov	sp, r7
 800376e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003772:	bf00      	nop
 8003774:	40023800 	.word	0x40023800
 8003778:	00f42400 	.word	0x00f42400
 800377c:	007a1200 	.word	0x007a1200

08003780 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003784:	4b03      	ldr	r3, [pc, #12]	@ (8003794 <HAL_RCC_GetHCLKFreq+0x14>)
 8003786:	681b      	ldr	r3, [r3, #0]
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	20000064 	.word	0x20000064

08003798 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800379c:	f7ff fff0 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037a0:	4602      	mov	r2, r0
 80037a2:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	0a9b      	lsrs	r3, r3, #10
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	4903      	ldr	r1, [pc, #12]	@ (80037bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ae:	5ccb      	ldrb	r3, [r1, r3]
 80037b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	080095f4 	.word	0x080095f4

080037c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80037c4:	f7ff ffdc 	bl	8003780 <HAL_RCC_GetHCLKFreq>
 80037c8:	4602      	mov	r2, r0
 80037ca:	4b05      	ldr	r3, [pc, #20]	@ (80037e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	0b5b      	lsrs	r3, r3, #13
 80037d0:	f003 0307 	and.w	r3, r3, #7
 80037d4:	4903      	ldr	r1, [pc, #12]	@ (80037e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037d6:	5ccb      	ldrb	r3, [r1, r3]
 80037d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037dc:	4618      	mov	r0, r3
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40023800 	.word	0x40023800
 80037e4:	080095f4 	.word	0x080095f4

080037e8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	220f      	movs	r2, #15
 80037f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037f8:	4b12      	ldr	r3, [pc, #72]	@ (8003844 <HAL_RCC_GetClockConfig+0x5c>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0203 	and.w	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003804:	4b0f      	ldr	r3, [pc, #60]	@ (8003844 <HAL_RCC_GetClockConfig+0x5c>)
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003810:	4b0c      	ldr	r3, [pc, #48]	@ (8003844 <HAL_RCC_GetClockConfig+0x5c>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800381c:	4b09      	ldr	r3, [pc, #36]	@ (8003844 <HAL_RCC_GetClockConfig+0x5c>)
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	08db      	lsrs	r3, r3, #3
 8003822:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800382a:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <HAL_RCC_GetClockConfig+0x60>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0207 	and.w	r2, r3, #7
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	601a      	str	r2, [r3, #0]
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40023800 	.word	0x40023800
 8003848:	40023c00 	.word	0x40023c00

0800384c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d105      	bne.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003870:	2b00      	cmp	r3, #0
 8003872:	d035      	beq.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003874:	4b62      	ldr	r3, [pc, #392]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800387a:	f7fe ffe7 	bl	800284c <HAL_GetTick>
 800387e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003882:	f7fe ffe3 	bl	800284c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e0b0      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003894:	4b5b      	ldr	r3, [pc, #364]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1f0      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	019a      	lsls	r2, r3, #6
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	071b      	lsls	r3, r3, #28
 80038ac:	4955      	ldr	r1, [pc, #340]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80038b4:	4b52      	ldr	r3, [pc, #328]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80038b6:	2201      	movs	r2, #1
 80038b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80038ba:	f7fe ffc7 	bl	800284c <HAL_GetTick>
 80038be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038c0:	e008      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80038c2:	f7fe ffc3 	bl	800284c <HAL_GetTick>
 80038c6:	4602      	mov	r2, r0
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d901      	bls.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e090      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80038d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0f0      	beq.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8083 	beq.w	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	4b44      	ldr	r3, [pc, #272]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f6:	4a43      	ldr	r2, [pc, #268]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80038f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80038fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80038fe:	4b41      	ldr	r3, [pc, #260]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800390a:	4b3f      	ldr	r3, [pc, #252]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a3e      	ldr	r2, [pc, #248]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003914:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003916:	f7fe ff99 	bl	800284c <HAL_GetTick>
 800391a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800391c:	e008      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800391e:	f7fe ff95 	bl	800284c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b02      	cmp	r3, #2
 800392a:	d901      	bls.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800392c:	2303      	movs	r3, #3
 800392e:	e062      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003930:	4b35      	ldr	r3, [pc, #212]	@ (8003a08 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003938:	2b00      	cmp	r3, #0
 800393a:	d0f0      	beq.n	800391e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800393c:	4b31      	ldr	r3, [pc, #196]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800393e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003940:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003944:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d02f      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	429a      	cmp	r2, r3
 8003958:	d028      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800395a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800395c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800395e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003962:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003964:	4b29      	ldr	r3, [pc, #164]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003966:	2201      	movs	r2, #1
 8003968:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800396a:	4b28      	ldr	r3, [pc, #160]	@ (8003a0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003970:	4a24      	ldr	r2, [pc, #144]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003976:	4b23      	ldr	r3, [pc, #140]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b01      	cmp	r3, #1
 8003980:	d114      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003982:	f7fe ff63 	bl	800284c <HAL_GetTick>
 8003986:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003988:	e00a      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800398a:	f7fe ff5f 	bl	800284c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003998:	4293      	cmp	r3, r2
 800399a:	d901      	bls.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e02a      	b.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039a0:	4b18      	ldr	r3, [pc, #96]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a4:	f003 0302 	and.w	r3, r3, #2
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d0ee      	beq.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	68db      	ldr	r3, [r3, #12]
 80039b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039b8:	d10d      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80039ba:	4b12      	ldr	r3, [pc, #72]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80039ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ce:	490d      	ldr	r1, [pc, #52]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	608b      	str	r3, [r1, #8]
 80039d4:	e005      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80039d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	4a0a      	ldr	r2, [pc, #40]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039dc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80039e0:	6093      	str	r3, [r2, #8]
 80039e2:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ee:	4905      	ldr	r1, [pc, #20]	@ (8003a04 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80039f0:	4313      	orrs	r3, r2
 80039f2:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	42470068 	.word	0x42470068
 8003a04:	40023800 	.word	0x40023800
 8003a08:	40007000 	.word	0x40007000
 8003a0c:	42470e40 	.word	0x42470e40

08003a10 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e073      	b.n	8003b0e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	7f5b      	ldrb	r3, [r3, #29]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d105      	bne.n	8003a3c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fe fd3a 	bl	80024b0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2202      	movs	r2, #2
 8003a40:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b10      	cmp	r3, #16
 8003a4e:	d055      	beq.n	8003afc <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	22ca      	movs	r2, #202	@ 0xca
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2253      	movs	r2, #83	@ 0x53
 8003a5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fa49 	bl	8003ef8 <RTC_EnterInitMode>
 8003a66:	4603      	mov	r3, r0
 8003a68:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d12c      	bne.n	8003aca <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6812      	ldr	r2, [r2, #0]
 8003a7a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003a7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a82:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6899      	ldr	r1, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68d2      	ldr	r2, [r2, #12]
 8003aaa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	6919      	ldr	r1, [r3, #16]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	041a      	lsls	r2, r3, #16
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 fa50 	bl	8003f66 <RTC_ExitInitMode>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d110      	bne.n	8003af2 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ade:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699a      	ldr	r2, [r3, #24]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	22ff      	movs	r2, #255	@ 0xff
 8003af8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003afa:	e001      	b.n	8003b00 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003afc:	2300      	movs	r3, #0
 8003afe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d102      	bne.n	8003b0c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b16:	b590      	push	{r4, r7, lr}
 8003b18:	b087      	sub	sp, #28
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	60f8      	str	r0, [r7, #12]
 8003b1e:	60b9      	str	r1, [r7, #8]
 8003b20:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	7f1b      	ldrb	r3, [r3, #28]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_RTC_SetTime+0x1c>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e087      	b.n	8003c42 <HAL_RTC_SetTime+0x12c>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d126      	bne.n	8003b92 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d102      	bne.n	8003b58 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	2200      	movs	r2, #0
 8003b56:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 fa27 	bl	8003fb0 <RTC_ByteToBcd2>
 8003b62:	4603      	mov	r3, r0
 8003b64:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	785b      	ldrb	r3, [r3, #1]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fa20 	bl	8003fb0 <RTC_ByteToBcd2>
 8003b70:	4603      	mov	r3, r0
 8003b72:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b74:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	789b      	ldrb	r3, [r3, #2]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fa18 	bl	8003fb0 <RTC_ByteToBcd2>
 8003b80:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003b82:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	78db      	ldrb	r3, [r3, #3]
 8003b8a:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e018      	b.n	8003bc4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	785b      	ldrb	r3, [r3, #1]
 8003bb0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003bb2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003bb8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	78db      	ldrb	r3, [r3, #3]
 8003bbe:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	22ca      	movs	r2, #202	@ 0xca
 8003bca:	625a      	str	r2, [r3, #36]	@ 0x24
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2253      	movs	r2, #83	@ 0x53
 8003bd2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 f98f 	bl	8003ef8 <RTC_EnterInitMode>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003bde:	7cfb      	ldrb	r3, [r7, #19]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d120      	bne.n	8003c26 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003bee:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003bf2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003c02:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6899      	ldr	r1, [r3, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	431a      	orrs	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c1c:	68f8      	ldr	r0, [r7, #12]
 8003c1e:	f000 f9a2 	bl	8003f66 <RTC_ExitInitMode>
 8003c22:	4603      	mov	r3, r0
 8003c24:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003c26:	7cfb      	ldrb	r3, [r7, #19]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d102      	bne.n	8003c32 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	22ff      	movs	r2, #255	@ 0xff
 8003c38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	771a      	strb	r2, [r3, #28]

  return status;
 8003c40:	7cfb      	ldrb	r3, [r7, #19]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd90      	pop	{r4, r7, pc}

08003c4a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003c7c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003c80:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	0c1b      	lsrs	r3, r3, #16
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c8c:	b2da      	uxtb	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	0a1b      	lsrs	r3, r3, #8
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c9c:	b2da      	uxtb	r2, r3
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	0d9b      	lsrs	r3, r3, #22
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	b2da      	uxtb	r2, r3
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d11a      	bne.n	8003cfc <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	781b      	ldrb	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 f98e 	bl	8003fec <RTC_Bcd2ToByte>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	785b      	ldrb	r3, [r3, #1]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 f985 	bl	8003fec <RTC_Bcd2ToByte>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	789b      	ldrb	r3, [r3, #2]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 f97c 	bl	8003fec <RTC_Bcd2ToByte>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461a      	mov	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d06:	b590      	push	{r4, r7, lr}
 8003d08:	b087      	sub	sp, #28
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	7f1b      	ldrb	r3, [r3, #28]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_RTC_SetDate+0x1c>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e071      	b.n	8003e06 <HAL_RTC_SetDate+0x100>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10e      	bne.n	8003d52 <HAL_RTC_SetDate+0x4c>
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	785b      	ldrb	r3, [r3, #1]
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d008      	beq.n	8003d52 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	785b      	ldrb	r3, [r3, #1]
 8003d44:	f023 0310 	bic.w	r3, r3, #16
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	330a      	adds	r3, #10
 8003d4c:	b2da      	uxtb	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d11c      	bne.n	8003d92 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	78db      	ldrb	r3, [r3, #3]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f000 f927 	bl	8003fb0 <RTC_ByteToBcd2>
 8003d62:	4603      	mov	r3, r0
 8003d64:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	785b      	ldrb	r3, [r3, #1]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f000 f920 	bl	8003fb0 <RTC_ByteToBcd2>
 8003d70:	4603      	mov	r3, r0
 8003d72:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003d74:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	789b      	ldrb	r3, [r3, #2]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f918 	bl	8003fb0 <RTC_ByteToBcd2>
 8003d80:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003d82:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	617b      	str	r3, [r7, #20]
 8003d90:	e00e      	b.n	8003db0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	78db      	ldrb	r3, [r3, #3]
 8003d96:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	785b      	ldrb	r3, [r3, #1]
 8003d9c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003d9e:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003da0:	68ba      	ldr	r2, [r7, #8]
 8003da2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003da4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	22ca      	movs	r2, #202	@ 0xca
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2253      	movs	r2, #83	@ 0x53
 8003dbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f899 	bl	8003ef8 <RTC_EnterInitMode>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003dca:	7cfb      	ldrb	r3, [r7, #19]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10c      	bne.n	8003dea <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003dda:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003dde:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f8c0 	bl	8003f66 <RTC_ExitInitMode>
 8003de6:	4603      	mov	r3, r0
 8003de8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d102      	bne.n	8003df6 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2201      	movs	r2, #1
 8003df4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	22ff      	movs	r2, #255	@ 0xff
 8003dfc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	771a      	strb	r2, [r3, #28]

  return status;
 8003e04:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd90      	pop	{r4, r7, pc}

08003e0e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e0e:	b580      	push	{r7, lr}
 8003e10:	b086      	sub	sp, #24
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003e28:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	0a1b      	lsrs	r3, r3, #8
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	0b5b      	lsrs	r3, r3, #13
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d11a      	bne.n	8003ea2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	78db      	ldrb	r3, [r3, #3]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 f8bb 	bl	8003fec <RTC_Bcd2ToByte>
 8003e76:	4603      	mov	r3, r0
 8003e78:	461a      	mov	r2, r3
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	785b      	ldrb	r3, [r3, #1]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f8b2 	bl	8003fec <RTC_Bcd2ToByte>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	789b      	ldrb	r3, [r3, #2]
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f8a9 	bl	8003fec <RTC_Bcd2ToByte>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3718      	adds	r7, #24
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}

08003eac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8003ef4 <HAL_RTC_WaitForSynchro+0x48>)
 8003ebe:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ec0:	f7fe fcc4 	bl	800284c <HAL_GetTick>
 8003ec4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003ec6:	e009      	b.n	8003edc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ec8:	f7fe fcc0 	bl	800284c <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003ed6:	d901      	bls.n	8003edc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003ed8:	2303      	movs	r3, #3
 8003eda:	e007      	b.n	8003eec <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0ee      	beq.n	8003ec8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	00017f5f 	.word	0x00017f5f

08003ef8 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d122      	bne.n	8003f5c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f24:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f26:	f7fe fc91 	bl	800284c <HAL_GetTick>
 8003f2a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003f2c:	e00c      	b.n	8003f48 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f2e:	f7fe fc8d 	bl	800284c <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003f3c:	d904      	bls.n	8003f48 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2204      	movs	r2, #4
 8003f42:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d102      	bne.n	8003f5c <RTC_EnterInitMode+0x64>
 8003f56:	7bfb      	ldrb	r3, [r7, #15]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d1e8      	bne.n	8003f2e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3710      	adds	r7, #16
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	b084      	sub	sp, #16
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f80:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10a      	bne.n	8003fa6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f7ff ff8b 	bl	8003eac <HAL_RTC_WaitForSynchro>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d004      	beq.n	8003fa6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2204      	movs	r2, #4
 8003fa0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003fbe:	e005      	b.n	8003fcc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8003fc6:	79fb      	ldrb	r3, [r7, #7]
 8003fc8:	3b0a      	subs	r3, #10
 8003fca:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	2b09      	cmp	r3, #9
 8003fd0:	d8f6      	bhi.n	8003fc0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	79fb      	ldrb	r3, [r7, #7]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	b2db      	uxtb	r3, r3
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003ffa:	79fb      	ldrb	r3, [r7, #7]
 8003ffc:	091b      	lsrs	r3, r3, #4
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	461a      	mov	r2, r3
 8004002:	4613      	mov	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4413      	add	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	b2da      	uxtb	r2, r3
 8004010:	79fb      	ldrb	r3, [r7, #7]
 8004012:	f003 030f 	and.w	r3, r3, #15
 8004016:	b2db      	uxtb	r3, r3
 8004018:	4413      	add	r3, r2
 800401a:	b2db      	uxtb	r3, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	3714      	adds	r7, #20
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e041      	b.n	80040be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f839 	bl	80040c6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2202      	movs	r2, #2
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	3304      	adds	r3, #4
 8004064:	4619      	mov	r1, r3
 8004066:	4610      	mov	r0, r2
 8004068:	f000 f9c0 	bl	80043ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2201      	movs	r2, #1
 8004078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2201      	movs	r2, #1
 8004088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80040c6:	b480      	push	{r7}
 80040c8:	b083      	sub	sp, #12
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d001      	beq.n	80040f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e04e      	b.n	8004192 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0201 	orr.w	r2, r2, #1
 800410a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a23      	ldr	r2, [pc, #140]	@ (80041a0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d022      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800411e:	d01d      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1f      	ldr	r2, [pc, #124]	@ (80041a4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d018      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1e      	ldr	r2, [pc, #120]	@ (80041a8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d013      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1c      	ldr	r2, [pc, #112]	@ (80041ac <HAL_TIM_Base_Start_IT+0xd0>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d00e      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1b      	ldr	r2, [pc, #108]	@ (80041b0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a19      	ldr	r2, [pc, #100]	@ (80041b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_TIM_Base_Start_IT+0x80>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a18      	ldr	r2, [pc, #96]	@ (80041b8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d111      	bne.n	8004180 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2b06      	cmp	r3, #6
 800416c:	d010      	beq.n	8004190 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 0201 	orr.w	r2, r2, #1
 800417c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800417e:	e007      	b.n	8004190 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004190:	2300      	movs	r3, #0
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	40010000 	.word	0x40010000
 80041a4:	40000400 	.word	0x40000400
 80041a8:	40000800 	.word	0x40000800
 80041ac:	40000c00 	.word	0x40000c00
 80041b0:	40010400 	.word	0x40010400
 80041b4:	40014000 	.word	0x40014000
 80041b8:	40001800 	.word	0x40001800

080041bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d020      	beq.n	8004220 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f003 0302 	and.w	r3, r3, #2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d01b      	beq.n	8004220 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f06f 0202 	mvn.w	r2, #2
 80041f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0303 	and.w	r3, r3, #3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d003      	beq.n	800420e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f8d2 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 800420c:	e005      	b.n	800421a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f000 f8c4 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f000 f8d5 	bl	80043c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2200      	movs	r2, #0
 800421e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 0304 	and.w	r3, r3, #4
 8004226:	2b00      	cmp	r3, #0
 8004228:	d020      	beq.n	800426c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01b      	beq.n	800426c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f06f 0204 	mvn.w	r2, #4
 800423c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2202      	movs	r2, #2
 8004242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800424e:	2b00      	cmp	r3, #0
 8004250:	d003      	beq.n	800425a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f8ac 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 8004258:	e005      	b.n	8004266 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f000 f89e 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 f8af 	bl	80043c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d020      	beq.n	80042b8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f003 0308 	and.w	r3, r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01b      	beq.n	80042b8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f06f 0208 	mvn.w	r2, #8
 8004288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2204      	movs	r2, #4
 800428e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f003 0303 	and.w	r3, r3, #3
 800429a:	2b00      	cmp	r3, #0
 800429c:	d003      	beq.n	80042a6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f886 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 80042a4:	e005      	b.n	80042b2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f878 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	f000 f889 	bl	80043c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d020      	beq.n	8004304 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01b      	beq.n	8004304 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f06f 0210 	mvn.w	r2, #16
 80042d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2208      	movs	r2, #8
 80042da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f860 	bl	80043b0 <HAL_TIM_IC_CaptureCallback>
 80042f0:	e005      	b.n	80042fe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f852 	bl	800439c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 f863 	bl	80043c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f003 0301 	and.w	r3, r3, #1
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00c      	beq.n	8004328 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d007      	beq.n	8004328 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f06f 0201 	mvn.w	r2, #1
 8004320:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fe f884 	bl	8002430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00c      	beq.n	800434c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004344:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f906 	bl	8004558 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00c      	beq.n	8004370 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800435c:	2b00      	cmp	r3, #0
 800435e:	d007      	beq.n	8004370 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004368:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 f834 	bl	80043d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	f003 0320 	and.w	r3, r3, #32
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00c      	beq.n	8004394 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f003 0320 	and.w	r3, r3, #32
 8004380:	2b00      	cmp	r3, #0
 8004382:	d007      	beq.n	8004394 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0220 	mvn.w	r2, #32
 800438c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f000 f8d8 	bl	8004544 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004394:	bf00      	nop
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043a4:	bf00      	nop
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a46      	ldr	r2, [pc, #280]	@ (8004518 <TIM_Base_SetConfig+0x12c>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800440a:	d00f      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a43      	ldr	r2, [pc, #268]	@ (800451c <TIM_Base_SetConfig+0x130>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00b      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a42      	ldr	r2, [pc, #264]	@ (8004520 <TIM_Base_SetConfig+0x134>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d007      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a41      	ldr	r2, [pc, #260]	@ (8004524 <TIM_Base_SetConfig+0x138>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d003      	beq.n	800442c <TIM_Base_SetConfig+0x40>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a40      	ldr	r2, [pc, #256]	@ (8004528 <TIM_Base_SetConfig+0x13c>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d108      	bne.n	800443e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004432:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a35      	ldr	r2, [pc, #212]	@ (8004518 <TIM_Base_SetConfig+0x12c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d02b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444c:	d027      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a32      	ldr	r2, [pc, #200]	@ (800451c <TIM_Base_SetConfig+0x130>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d023      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a31      	ldr	r2, [pc, #196]	@ (8004520 <TIM_Base_SetConfig+0x134>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d01f      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a30      	ldr	r2, [pc, #192]	@ (8004524 <TIM_Base_SetConfig+0x138>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a2f      	ldr	r2, [pc, #188]	@ (8004528 <TIM_Base_SetConfig+0x13c>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d017      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a2e      	ldr	r2, [pc, #184]	@ (800452c <TIM_Base_SetConfig+0x140>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d013      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a2d      	ldr	r2, [pc, #180]	@ (8004530 <TIM_Base_SetConfig+0x144>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d00f      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a2c      	ldr	r2, [pc, #176]	@ (8004534 <TIM_Base_SetConfig+0x148>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00b      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a2b      	ldr	r2, [pc, #172]	@ (8004538 <TIM_Base_SetConfig+0x14c>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d007      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a2a      	ldr	r2, [pc, #168]	@ (800453c <TIM_Base_SetConfig+0x150>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_Base_SetConfig+0xb2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a29      	ldr	r2, [pc, #164]	@ (8004540 <TIM_Base_SetConfig+0x154>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d108      	bne.n	80044b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	689a      	ldr	r2, [r3, #8]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a10      	ldr	r2, [pc, #64]	@ (8004518 <TIM_Base_SetConfig+0x12c>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d003      	beq.n	80044e4 <TIM_Base_SetConfig+0xf8>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	4a12      	ldr	r2, [pc, #72]	@ (8004528 <TIM_Base_SetConfig+0x13c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d103      	bne.n	80044ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691a      	ldr	r2, [r3, #16]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d105      	bne.n	800450a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	f023 0201 	bic.w	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	611a      	str	r2, [r3, #16]
  }
}
 800450a:	bf00      	nop
 800450c:	3714      	adds	r7, #20
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40010400 	.word	0x40010400
 800452c:	40014000 	.word	0x40014000
 8004530:	40014400 	.word	0x40014400
 8004534:	40014800 	.word	0x40014800
 8004538:	40001800 	.word	0x40001800
 800453c:	40001c00 	.word	0x40001c00
 8004540:	40002000 	.word	0x40002000

08004544 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e042      	b.n	8004604 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b00      	cmp	r3, #0
 8004588:	d106      	bne.n	8004598 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7fd ffb6 	bl	8002504 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2224      	movs	r2, #36	@ 0x24
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68da      	ldr	r2, [r3, #12]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80045ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f000 fdbd 	bl	8005130 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	695a      	ldr	r2, [r3, #20]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	68da      	ldr	r2, [r3, #12]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2220      	movs	r2, #32
 80045f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2220      	movs	r2, #32
 80045f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	@ 0x28
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b20      	cmp	r3, #32
 800462a:	d175      	bne.n	8004718 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_UART_Transmit+0x2c>
 8004632:	88fb      	ldrh	r3, [r7, #6]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d101      	bne.n	800463c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e06e      	b.n	800471a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2200      	movs	r2, #0
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2221      	movs	r2, #33	@ 0x21
 8004646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800464a:	f7fe f8ff 	bl	800284c <HAL_GetTick>
 800464e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	88fa      	ldrh	r2, [r7, #6]
 8004654:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	88fa      	ldrh	r2, [r7, #6]
 800465a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004664:	d108      	bne.n	8004678 <HAL_UART_Transmit+0x6c>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800466e:	2300      	movs	r3, #0
 8004670:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	e003      	b.n	8004680 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800467c:	2300      	movs	r3, #0
 800467e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004680:	e02e      	b.n	80046e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	9300      	str	r3, [sp, #0]
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	2200      	movs	r2, #0
 800468a:	2180      	movs	r1, #128	@ 0x80
 800468c:	68f8      	ldr	r0, [r7, #12]
 800468e:	f000 fb1f 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e03a      	b.n	800471a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d10b      	bne.n	80046c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	881b      	ldrh	r3, [r3, #0]
 80046ae:	461a      	mov	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	3302      	adds	r3, #2
 80046be:	61bb      	str	r3, [r7, #24]
 80046c0:	e007      	b.n	80046d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	781a      	ldrb	r2, [r3, #0]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	3301      	adds	r3, #1
 80046d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046e4:	b29b      	uxth	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1cb      	bne.n	8004682 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2200      	movs	r2, #0
 80046f2:	2140      	movs	r1, #64	@ 0x40
 80046f4:	68f8      	ldr	r0, [r7, #12]
 80046f6:	f000 faeb 	bl	8004cd0 <UART_WaitOnFlagUntilTimeout>
 80046fa:	4603      	mov	r3, r0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004708:	2303      	movs	r3, #3
 800470a:	e006      	b.n	800471a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004714:	2300      	movs	r3, #0
 8004716:	e000      	b.n	800471a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004718:	2302      	movs	r3, #2
  }
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	60f8      	str	r0, [r7, #12]
 800472a:	60b9      	str	r1, [r7, #8]
 800472c:	4613      	mov	r3, r2
 800472e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b20      	cmp	r3, #32
 800473a:	d112      	bne.n	8004762 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d002      	beq.n	8004748 <HAL_UART_Receive_IT+0x26>
 8004742:	88fb      	ldrh	r3, [r7, #6]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004748:	2301      	movs	r3, #1
 800474a:	e00b      	b.n	8004764 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004752:	88fb      	ldrh	r3, [r7, #6]
 8004754:	461a      	mov	r2, r3
 8004756:	68b9      	ldr	r1, [r7, #8]
 8004758:	68f8      	ldr	r0, [r7, #12]
 800475a:	f000 fb12 	bl	8004d82 <UART_Start_Receive_IT>
 800475e:	4603      	mov	r3, r0
 8004760:	e000      	b.n	8004764 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004762:	2302      	movs	r3, #2
  }
}
 8004764:	4618      	mov	r0, r3
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b0ba      	sub	sp, #232	@ 0xe8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004792:	2300      	movs	r3, #0
 8004794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004798:	2300      	movs	r3, #0
 800479a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800479e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047a2:	f003 030f 	and.w	r3, r3, #15
 80047a6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80047aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10f      	bne.n	80047d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b6:	f003 0320 	and.w	r3, r3, #32
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_UART_IRQHandler+0x66>
 80047be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047c2:	f003 0320 	and.w	r3, r3, #32
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fbf2 	bl	8004fb4 <UART_Receive_IT>
      return;
 80047d0:	e25b      	b.n	8004c8a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80de 	beq.w	8004998 <HAL_UART_IRQHandler+0x22c>
 80047dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d106      	bne.n	80047f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047ec:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 80d1 	beq.w	8004998 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00b      	beq.n	800481a <HAL_UART_IRQHandler+0xae>
 8004802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d005      	beq.n	800481a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004812:	f043 0201 	orr.w	r2, r3, #1
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800481a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00b      	beq.n	800483e <HAL_UART_IRQHandler+0xd2>
 8004826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004836:	f043 0202 	orr.w	r2, r3, #2
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800483e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00b      	beq.n	8004862 <HAL_UART_IRQHandler+0xf6>
 800484a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800484e:	f003 0301 	and.w	r3, r3, #1
 8004852:	2b00      	cmp	r3, #0
 8004854:	d005      	beq.n	8004862 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485a:	f043 0204 	orr.w	r2, r3, #4
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004866:	f003 0308 	and.w	r3, r3, #8
 800486a:	2b00      	cmp	r3, #0
 800486c:	d011      	beq.n	8004892 <HAL_UART_IRQHandler+0x126>
 800486e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d105      	bne.n	8004886 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800487a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d005      	beq.n	8004892 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800488a:	f043 0208 	orr.w	r2, r3, #8
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 81f2 	beq.w	8004c80 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800489c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048a0:	f003 0320 	and.w	r3, r3, #32
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d008      	beq.n	80048ba <HAL_UART_IRQHandler+0x14e>
 80048a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fb7d 	bl	8004fb4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	695b      	ldr	r3, [r3, #20]
 80048c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048c4:	2b40      	cmp	r3, #64	@ 0x40
 80048c6:	bf0c      	ite	eq
 80048c8:	2301      	moveq	r3, #1
 80048ca:	2300      	movne	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d6:	f003 0308 	and.w	r3, r3, #8
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d103      	bne.n	80048e6 <HAL_UART_IRQHandler+0x17a>
 80048de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d04f      	beq.n	8004986 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 fa85 	bl	8004df6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f6:	2b40      	cmp	r3, #64	@ 0x40
 80048f8:	d141      	bne.n	800497e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	3314      	adds	r3, #20
 8004900:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004904:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004908:	e853 3f00 	ldrex	r3, [r3]
 800490c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004910:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004918:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3314      	adds	r3, #20
 8004922:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004926:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800492a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004932:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004936:	e841 2300 	strex	r3, r2, [r1]
 800493a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800493e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1d9      	bne.n	80048fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800494a:	2b00      	cmp	r3, #0
 800494c:	d013      	beq.n	8004976 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004952:	4a7e      	ldr	r2, [pc, #504]	@ (8004b4c <HAL_UART_IRQHandler+0x3e0>)
 8004954:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800495a:	4618      	mov	r0, r3
 800495c:	f7fe f8d4 	bl	8002b08 <HAL_DMA_Abort_IT>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d016      	beq.n	8004994 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800496a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800496c:	687a      	ldr	r2, [r7, #4]
 800496e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004970:	4610      	mov	r0, r2
 8004972:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004974:	e00e      	b.n	8004994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f994 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800497c:	e00a      	b.n	8004994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f990 	bl	8004ca4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	e006      	b.n	8004994 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f98c 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004992:	e175      	b.n	8004c80 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004994:	bf00      	nop
    return;
 8004996:	e173      	b.n	8004c80 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800499c:	2b01      	cmp	r3, #1
 800499e:	f040 814f 	bne.w	8004c40 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049a6:	f003 0310 	and.w	r3, r3, #16
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8148 	beq.w	8004c40 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	f000 8141 	beq.w	8004c40 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049be:	2300      	movs	r3, #0
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	60bb      	str	r3, [r7, #8]
 80049d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049de:	2b40      	cmp	r3, #64	@ 0x40
 80049e0:	f040 80b6 	bne.w	8004b50 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8145 	beq.w	8004c84 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80049fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a02:	429a      	cmp	r2, r3
 8004a04:	f080 813e 	bcs.w	8004c84 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a1a:	f000 8088 	beq.w	8004b2e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a28:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a2c:	e853 3f00 	ldrex	r3, [r3]
 8004a30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a34:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	330c      	adds	r3, #12
 8004a46:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004a4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a4e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a56:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a5a:	e841 2300 	strex	r3, r2, [r1]
 8004a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1d9      	bne.n	8004a1e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	3314      	adds	r3, #20
 8004a70:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a72:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a74:	e853 3f00 	ldrex	r3, [r3]
 8004a78:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004a7a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a7c:	f023 0301 	bic.w	r3, r3, #1
 8004a80:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3314      	adds	r3, #20
 8004a8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004a8e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004aa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1e1      	bne.n	8004a6a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3314      	adds	r3, #20
 8004aac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ab8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004abc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3314      	adds	r3, #20
 8004ac6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004aca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004acc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ace:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004ad0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004ad2:	e841 2300 	strex	r3, r2, [r1]
 8004ad6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004ad8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1e3      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2220      	movs	r2, #32
 8004ae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	330c      	adds	r3, #12
 8004af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004af6:	e853 3f00 	ldrex	r3, [r3]
 8004afa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004afc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004afe:	f023 0310 	bic.w	r3, r3, #16
 8004b02:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004b10:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004b12:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b14:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b16:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b18:	e841 2300 	strex	r3, r2, [r1]
 8004b1c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d1e3      	bne.n	8004aec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fd ff7d 	bl	8002a28 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2202      	movs	r2, #2
 8004b32:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	1ad3      	subs	r3, r2, r3
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	4619      	mov	r1, r3
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 f8b7 	bl	8004cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b4a:	e09b      	b.n	8004c84 <HAL_UART_IRQHandler+0x518>
 8004b4c:	08004ebd 	.word	0x08004ebd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b58:	b29b      	uxth	r3, r3
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	f000 808e 	beq.w	8004c88 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004b6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8089 	beq.w	8004c88 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	330c      	adds	r3, #12
 8004b7c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b80:	e853 3f00 	ldrex	r3, [r3]
 8004b84:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004b86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b88:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	330c      	adds	r3, #12
 8004b96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004b9a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004b9c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b9e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ba0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ba2:	e841 2300 	strex	r3, r2, [r1]
 8004ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d1e3      	bne.n	8004b76 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	3314      	adds	r3, #20
 8004bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	623b      	str	r3, [r7, #32]
   return(result);
 8004bbe:	6a3b      	ldr	r3, [r7, #32]
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3314      	adds	r3, #20
 8004bce:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004bd2:	633a      	str	r2, [r7, #48]	@ 0x30
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bda:	e841 2300 	strex	r3, r2, [r1]
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1e3      	bne.n	8004bae <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2220      	movs	r2, #32
 8004bea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	330c      	adds	r3, #12
 8004bfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0310 	bic.w	r3, r3, #16
 8004c0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004c18:	61fa      	str	r2, [r7, #28]
 8004c1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1c:	69b9      	ldr	r1, [r7, #24]
 8004c1e:	69fa      	ldr	r2, [r7, #28]
 8004c20:	e841 2300 	strex	r3, r2, [r1]
 8004c24:	617b      	str	r3, [r7, #20]
   return(result);
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1e3      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c32:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c36:	4619      	mov	r1, r3
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 f83d 	bl	8004cb8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c3e:	e023      	b.n	8004c88 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <HAL_UART_IRQHandler+0x4f4>
 8004c4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d003      	beq.n	8004c60 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f000 f943 	bl	8004ee4 <UART_Transmit_IT>
    return;
 8004c5e:	e014      	b.n	8004c8a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00e      	beq.n	8004c8a <HAL_UART_IRQHandler+0x51e>
 8004c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f983 	bl	8004f84 <UART_EndTransmit_IT>
    return;
 8004c7e:	e004      	b.n	8004c8a <HAL_UART_IRQHandler+0x51e>
    return;
 8004c80:	bf00      	nop
 8004c82:	e002      	b.n	8004c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8004c84:	bf00      	nop
 8004c86:	e000      	b.n	8004c8a <HAL_UART_IRQHandler+0x51e>
      return;
 8004c88:	bf00      	nop
  }
}
 8004c8a:	37e8      	adds	r7, #232	@ 0xe8
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b083      	sub	sp, #12
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c98:	bf00      	nop
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cac:	bf00      	nop
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr

08004cb8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004cc4:	bf00      	nop
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b086      	sub	sp, #24
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce0:	e03b      	b.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ce2:	6a3b      	ldr	r3, [r7, #32]
 8004ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ce8:	d037      	beq.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cea:	f7fd fdaf 	bl	800284c <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	6a3a      	ldr	r2, [r7, #32]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d302      	bcc.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cfa:	6a3b      	ldr	r3, [r7, #32]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e03a      	b.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f003 0304 	and.w	r3, r3, #4
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d023      	beq.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	2b80      	cmp	r3, #128	@ 0x80
 8004d16:	d020      	beq.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b40      	cmp	r3, #64	@ 0x40
 8004d1c:	d01d      	beq.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d116      	bne.n	8004d5a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	617b      	str	r3, [r7, #20]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f857 	bl	8004df6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2208      	movs	r2, #8
 8004d4c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
 8004d58:	e00f      	b.n	8004d7a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	4013      	ands	r3, r2
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	429a      	cmp	r2, r3
 8004d68:	bf0c      	ite	eq
 8004d6a:	2301      	moveq	r3, #1
 8004d6c:	2300      	movne	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d0b4      	beq.n	8004ce2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d78:	2300      	movs	r3, #0
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3718      	adds	r7, #24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d82:	b480      	push	{r7}
 8004d84:	b085      	sub	sp, #20
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	68ba      	ldr	r2, [r7, #8]
 8004d94:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	88fa      	ldrh	r2, [r7, #6]
 8004d9a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	88fa      	ldrh	r2, [r7, #6]
 8004da0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2222      	movs	r2, #34	@ 0x22
 8004dac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d007      	beq.n	8004dc8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68da      	ldr	r2, [r3, #12]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dc6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0201 	orr.w	r2, r2, #1
 8004dd6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68da      	ldr	r2, [r3, #12]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0220 	orr.w	r2, r2, #32
 8004de6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b095      	sub	sp, #84	@ 0x54
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	330c      	adds	r3, #12
 8004e1c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e1e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e22:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e24:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e26:	e841 2300 	strex	r3, r2, [r1]
 8004e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d1e5      	bne.n	8004dfe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3314      	adds	r3, #20
 8004e38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f023 0301 	bic.w	r3, r3, #1
 8004e48:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	3314      	adds	r3, #20
 8004e50:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e54:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e56:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e5a:	e841 2300 	strex	r3, r2, [r1]
 8004e5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1e5      	bne.n	8004e32 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d119      	bne.n	8004ea2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f023 0310 	bic.w	r3, r3, #16
 8004e84:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	330c      	adds	r3, #12
 8004e8c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e8e:	61ba      	str	r2, [r7, #24]
 8004e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6979      	ldr	r1, [r7, #20]
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	613b      	str	r3, [r7, #16]
   return(result);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e5      	bne.n	8004e6e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004eb0:	bf00      	nop
 8004eb2:	3754      	adds	r7, #84	@ 0x54
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f7ff fee4 	bl	8004ca4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b21      	cmp	r3, #33	@ 0x21
 8004ef6:	d13e      	bne.n	8004f76 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f00:	d114      	bne.n	8004f2c <UART_Transmit_IT+0x48>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d110      	bne.n	8004f2c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	881b      	ldrh	r3, [r3, #0]
 8004f14:	461a      	mov	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f1e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	1c9a      	adds	r2, r3, #2
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	621a      	str	r2, [r3, #32]
 8004f2a:	e008      	b.n	8004f3e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6a1b      	ldr	r3, [r3, #32]
 8004f30:	1c59      	adds	r1, r3, #1
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6211      	str	r1, [r2, #32]
 8004f36:	781a      	ldrb	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f42:	b29b      	uxth	r3, r3
 8004f44:	3b01      	subs	r3, #1
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	4619      	mov	r1, r3
 8004f4c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10f      	bne.n	8004f72 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f60:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f70:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e000      	b.n	8004f78 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f76:	2302      	movs	r3, #2
  }
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004f9a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f7ff fe73 	bl	8004c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3708      	adds	r7, #8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b08c      	sub	sp, #48	@ 0x30
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b22      	cmp	r3, #34	@ 0x22
 8004fc6:	f040 80ae 	bne.w	8005126 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fd2:	d117      	bne.n	8005004 <UART_Receive_IT+0x50>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d113      	bne.n	8005004 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff2:	b29a      	uxth	r2, r3
 8004ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ff6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffc:	1c9a      	adds	r2, r3, #2
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	629a      	str	r2, [r3, #40]	@ 0x28
 8005002:	e026      	b.n	8005052 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800500a:	2300      	movs	r3, #0
 800500c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005016:	d007      	beq.n	8005028 <UART_Receive_IT+0x74>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d10a      	bne.n	8005036 <UART_Receive_IT+0x82>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d106      	bne.n	8005036 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	b2da      	uxtb	r2, r3
 8005030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005032:	701a      	strb	r2, [r3, #0]
 8005034:	e008      	b.n	8005048 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	b2db      	uxtb	r3, r3
 800503e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005042:	b2da      	uxtb	r2, r3
 8005044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005046:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005056:	b29b      	uxth	r3, r3
 8005058:	3b01      	subs	r3, #1
 800505a:	b29b      	uxth	r3, r3
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	4619      	mov	r1, r3
 8005060:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005062:	2b00      	cmp	r3, #0
 8005064:	d15d      	bne.n	8005122 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0220 	bic.w	r2, r2, #32
 8005074:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68da      	ldr	r2, [r3, #12]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005084:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0201 	bic.w	r2, r2, #1
 8005094:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d135      	bne.n	8005118 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	330c      	adds	r3, #12
 80050b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	e853 3f00 	ldrex	r3, [r3]
 80050c0:	613b      	str	r3, [r7, #16]
   return(result);
 80050c2:	693b      	ldr	r3, [r7, #16]
 80050c4:	f023 0310 	bic.w	r3, r3, #16
 80050c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	330c      	adds	r3, #12
 80050d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d2:	623a      	str	r2, [r7, #32]
 80050d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d6:	69f9      	ldr	r1, [r7, #28]
 80050d8:	6a3a      	ldr	r2, [r7, #32]
 80050da:	e841 2300 	strex	r3, r2, [r1]
 80050de:	61bb      	str	r3, [r7, #24]
   return(result);
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d1e5      	bne.n	80050b2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d10a      	bne.n	800510a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050f4:	2300      	movs	r3, #0
 80050f6:	60fb      	str	r3, [r7, #12]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800510e:	4619      	mov	r1, r3
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f7ff fdd1 	bl	8004cb8 <HAL_UARTEx_RxEventCallback>
 8005116:	e002      	b.n	800511e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7fd f935 	bl	8002388 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	e002      	b.n	8005128 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	e000      	b.n	8005128 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005126:	2302      	movs	r3, #2
  }
}
 8005128:	4618      	mov	r0, r3
 800512a:	3730      	adds	r7, #48	@ 0x30
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005134:	b0c0      	sub	sp, #256	@ 0x100
 8005136:	af00      	add	r7, sp, #0
 8005138:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800513c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	691b      	ldr	r3, [r3, #16]
 8005144:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514c:	68d9      	ldr	r1, [r3, #12]
 800514e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	ea40 0301 	orr.w	r3, r0, r1
 8005158:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515e:	689a      	ldr	r2, [r3, #8]
 8005160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	431a      	orrs	r2, r3
 8005168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	431a      	orrs	r2, r3
 8005170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005188:	f021 010c 	bic.w	r1, r1, #12
 800518c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005196:	430b      	orrs	r3, r1
 8005198:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800519a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051aa:	6999      	ldr	r1, [r3, #24]
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	681a      	ldr	r2, [r3, #0]
 80051b2:	ea40 0301 	orr.w	r3, r0, r1
 80051b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	4b8f      	ldr	r3, [pc, #572]	@ (80053fc <UART_SetConfig+0x2cc>)
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d005      	beq.n	80051d0 <UART_SetConfig+0xa0>
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005400 <UART_SetConfig+0x2d0>)
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d104      	bne.n	80051da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051d0:	f7fe faf6 	bl	80037c0 <HAL_RCC_GetPCLK2Freq>
 80051d4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80051d8:	e003      	b.n	80051e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051da:	f7fe fadd 	bl	8003798 <HAL_RCC_GetPCLK1Freq>
 80051de:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e6:	69db      	ldr	r3, [r3, #28]
 80051e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051ec:	f040 810c 	bne.w	8005408 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f4:	2200      	movs	r2, #0
 80051f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051fa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005202:	4622      	mov	r2, r4
 8005204:	462b      	mov	r3, r5
 8005206:	1891      	adds	r1, r2, r2
 8005208:	65b9      	str	r1, [r7, #88]	@ 0x58
 800520a:	415b      	adcs	r3, r3
 800520c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800520e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005212:	4621      	mov	r1, r4
 8005214:	eb12 0801 	adds.w	r8, r2, r1
 8005218:	4629      	mov	r1, r5
 800521a:	eb43 0901 	adc.w	r9, r3, r1
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800522a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800522e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005232:	4690      	mov	r8, r2
 8005234:	4699      	mov	r9, r3
 8005236:	4623      	mov	r3, r4
 8005238:	eb18 0303 	adds.w	r3, r8, r3
 800523c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005240:	462b      	mov	r3, r5
 8005242:	eb49 0303 	adc.w	r3, r9, r3
 8005246:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005256:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800525a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800525e:	460b      	mov	r3, r1
 8005260:	18db      	adds	r3, r3, r3
 8005262:	653b      	str	r3, [r7, #80]	@ 0x50
 8005264:	4613      	mov	r3, r2
 8005266:	eb42 0303 	adc.w	r3, r2, r3
 800526a:	657b      	str	r3, [r7, #84]	@ 0x54
 800526c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005270:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005274:	f7fb fc0a 	bl	8000a8c <__aeabi_uldivmod>
 8005278:	4602      	mov	r2, r0
 800527a:	460b      	mov	r3, r1
 800527c:	4b61      	ldr	r3, [pc, #388]	@ (8005404 <UART_SetConfig+0x2d4>)
 800527e:	fba3 2302 	umull	r2, r3, r3, r2
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	011c      	lsls	r4, r3, #4
 8005286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800528a:	2200      	movs	r2, #0
 800528c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005290:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005294:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005298:	4642      	mov	r2, r8
 800529a:	464b      	mov	r3, r9
 800529c:	1891      	adds	r1, r2, r2
 800529e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052a0:	415b      	adcs	r3, r3
 80052a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052a8:	4641      	mov	r1, r8
 80052aa:	eb12 0a01 	adds.w	sl, r2, r1
 80052ae:	4649      	mov	r1, r9
 80052b0:	eb43 0b01 	adc.w	fp, r3, r1
 80052b4:	f04f 0200 	mov.w	r2, #0
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052c8:	4692      	mov	sl, r2
 80052ca:	469b      	mov	fp, r3
 80052cc:	4643      	mov	r3, r8
 80052ce:	eb1a 0303 	adds.w	r3, sl, r3
 80052d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052d6:	464b      	mov	r3, r9
 80052d8:	eb4b 0303 	adc.w	r3, fp, r3
 80052dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052f4:	460b      	mov	r3, r1
 80052f6:	18db      	adds	r3, r3, r3
 80052f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80052fa:	4613      	mov	r3, r2
 80052fc:	eb42 0303 	adc.w	r3, r2, r3
 8005300:	647b      	str	r3, [r7, #68]	@ 0x44
 8005302:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005306:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800530a:	f7fb fbbf 	bl	8000a8c <__aeabi_uldivmod>
 800530e:	4602      	mov	r2, r0
 8005310:	460b      	mov	r3, r1
 8005312:	4611      	mov	r1, r2
 8005314:	4b3b      	ldr	r3, [pc, #236]	@ (8005404 <UART_SetConfig+0x2d4>)
 8005316:	fba3 2301 	umull	r2, r3, r3, r1
 800531a:	095b      	lsrs	r3, r3, #5
 800531c:	2264      	movs	r2, #100	@ 0x64
 800531e:	fb02 f303 	mul.w	r3, r2, r3
 8005322:	1acb      	subs	r3, r1, r3
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800532a:	4b36      	ldr	r3, [pc, #216]	@ (8005404 <UART_SetConfig+0x2d4>)
 800532c:	fba3 2302 	umull	r2, r3, r3, r2
 8005330:	095b      	lsrs	r3, r3, #5
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005338:	441c      	add	r4, r3
 800533a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800533e:	2200      	movs	r2, #0
 8005340:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005344:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005348:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800534c:	4642      	mov	r2, r8
 800534e:	464b      	mov	r3, r9
 8005350:	1891      	adds	r1, r2, r2
 8005352:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005354:	415b      	adcs	r3, r3
 8005356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005358:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800535c:	4641      	mov	r1, r8
 800535e:	1851      	adds	r1, r2, r1
 8005360:	6339      	str	r1, [r7, #48]	@ 0x30
 8005362:	4649      	mov	r1, r9
 8005364:	414b      	adcs	r3, r1
 8005366:	637b      	str	r3, [r7, #52]	@ 0x34
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005374:	4659      	mov	r1, fp
 8005376:	00cb      	lsls	r3, r1, #3
 8005378:	4651      	mov	r1, sl
 800537a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537e:	4651      	mov	r1, sl
 8005380:	00ca      	lsls	r2, r1, #3
 8005382:	4610      	mov	r0, r2
 8005384:	4619      	mov	r1, r3
 8005386:	4603      	mov	r3, r0
 8005388:	4642      	mov	r2, r8
 800538a:	189b      	adds	r3, r3, r2
 800538c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005390:	464b      	mov	r3, r9
 8005392:	460a      	mov	r2, r1
 8005394:	eb42 0303 	adc.w	r3, r2, r3
 8005398:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053b0:	460b      	mov	r3, r1
 80053b2:	18db      	adds	r3, r3, r3
 80053b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053b6:	4613      	mov	r3, r2
 80053b8:	eb42 0303 	adc.w	r3, r2, r3
 80053bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053c6:	f7fb fb61 	bl	8000a8c <__aeabi_uldivmod>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005404 <UART_SetConfig+0x2d4>)
 80053d0:	fba3 1302 	umull	r1, r3, r3, r2
 80053d4:	095b      	lsrs	r3, r3, #5
 80053d6:	2164      	movs	r1, #100	@ 0x64
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	00db      	lsls	r3, r3, #3
 80053e0:	3332      	adds	r3, #50	@ 0x32
 80053e2:	4a08      	ldr	r2, [pc, #32]	@ (8005404 <UART_SetConfig+0x2d4>)
 80053e4:	fba2 2303 	umull	r2, r3, r2, r3
 80053e8:	095b      	lsrs	r3, r3, #5
 80053ea:	f003 0207 	and.w	r2, r3, #7
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4422      	add	r2, r4
 80053f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053f8:	e106      	b.n	8005608 <UART_SetConfig+0x4d8>
 80053fa:	bf00      	nop
 80053fc:	40011000 	.word	0x40011000
 8005400:	40011400 	.word	0x40011400
 8005404:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005408:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800540c:	2200      	movs	r2, #0
 800540e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005412:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005416:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800541a:	4642      	mov	r2, r8
 800541c:	464b      	mov	r3, r9
 800541e:	1891      	adds	r1, r2, r2
 8005420:	6239      	str	r1, [r7, #32]
 8005422:	415b      	adcs	r3, r3
 8005424:	627b      	str	r3, [r7, #36]	@ 0x24
 8005426:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800542a:	4641      	mov	r1, r8
 800542c:	1854      	adds	r4, r2, r1
 800542e:	4649      	mov	r1, r9
 8005430:	eb43 0501 	adc.w	r5, r3, r1
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	00eb      	lsls	r3, r5, #3
 800543e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005442:	00e2      	lsls	r2, r4, #3
 8005444:	4614      	mov	r4, r2
 8005446:	461d      	mov	r5, r3
 8005448:	4643      	mov	r3, r8
 800544a:	18e3      	adds	r3, r4, r3
 800544c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005450:	464b      	mov	r3, r9
 8005452:	eb45 0303 	adc.w	r3, r5, r3
 8005456:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005466:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800546a:	f04f 0200 	mov.w	r2, #0
 800546e:	f04f 0300 	mov.w	r3, #0
 8005472:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005476:	4629      	mov	r1, r5
 8005478:	008b      	lsls	r3, r1, #2
 800547a:	4621      	mov	r1, r4
 800547c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005480:	4621      	mov	r1, r4
 8005482:	008a      	lsls	r2, r1, #2
 8005484:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005488:	f7fb fb00 	bl	8000a8c <__aeabi_uldivmod>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4b60      	ldr	r3, [pc, #384]	@ (8005614 <UART_SetConfig+0x4e4>)
 8005492:	fba3 2302 	umull	r2, r3, r3, r2
 8005496:	095b      	lsrs	r3, r3, #5
 8005498:	011c      	lsls	r4, r3, #4
 800549a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800549e:	2200      	movs	r2, #0
 80054a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054ac:	4642      	mov	r2, r8
 80054ae:	464b      	mov	r3, r9
 80054b0:	1891      	adds	r1, r2, r2
 80054b2:	61b9      	str	r1, [r7, #24]
 80054b4:	415b      	adcs	r3, r3
 80054b6:	61fb      	str	r3, [r7, #28]
 80054b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054bc:	4641      	mov	r1, r8
 80054be:	1851      	adds	r1, r2, r1
 80054c0:	6139      	str	r1, [r7, #16]
 80054c2:	4649      	mov	r1, r9
 80054c4:	414b      	adcs	r3, r1
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	f04f 0200 	mov.w	r2, #0
 80054cc:	f04f 0300 	mov.w	r3, #0
 80054d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054d4:	4659      	mov	r1, fp
 80054d6:	00cb      	lsls	r3, r1, #3
 80054d8:	4651      	mov	r1, sl
 80054da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054de:	4651      	mov	r1, sl
 80054e0:	00ca      	lsls	r2, r1, #3
 80054e2:	4610      	mov	r0, r2
 80054e4:	4619      	mov	r1, r3
 80054e6:	4603      	mov	r3, r0
 80054e8:	4642      	mov	r2, r8
 80054ea:	189b      	adds	r3, r3, r2
 80054ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054f0:	464b      	mov	r3, r9
 80054f2:	460a      	mov	r2, r1
 80054f4:	eb42 0303 	adc.w	r3, r2, r3
 80054f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005506:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005508:	f04f 0200 	mov.w	r2, #0
 800550c:	f04f 0300 	mov.w	r3, #0
 8005510:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005514:	4649      	mov	r1, r9
 8005516:	008b      	lsls	r3, r1, #2
 8005518:	4641      	mov	r1, r8
 800551a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800551e:	4641      	mov	r1, r8
 8005520:	008a      	lsls	r2, r1, #2
 8005522:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005526:	f7fb fab1 	bl	8000a8c <__aeabi_uldivmod>
 800552a:	4602      	mov	r2, r0
 800552c:	460b      	mov	r3, r1
 800552e:	4611      	mov	r1, r2
 8005530:	4b38      	ldr	r3, [pc, #224]	@ (8005614 <UART_SetConfig+0x4e4>)
 8005532:	fba3 2301 	umull	r2, r3, r3, r1
 8005536:	095b      	lsrs	r3, r3, #5
 8005538:	2264      	movs	r2, #100	@ 0x64
 800553a:	fb02 f303 	mul.w	r3, r2, r3
 800553e:	1acb      	subs	r3, r1, r3
 8005540:	011b      	lsls	r3, r3, #4
 8005542:	3332      	adds	r3, #50	@ 0x32
 8005544:	4a33      	ldr	r2, [pc, #204]	@ (8005614 <UART_SetConfig+0x4e4>)
 8005546:	fba2 2303 	umull	r2, r3, r2, r3
 800554a:	095b      	lsrs	r3, r3, #5
 800554c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005550:	441c      	add	r4, r3
 8005552:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005556:	2200      	movs	r2, #0
 8005558:	673b      	str	r3, [r7, #112]	@ 0x70
 800555a:	677a      	str	r2, [r7, #116]	@ 0x74
 800555c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005560:	4642      	mov	r2, r8
 8005562:	464b      	mov	r3, r9
 8005564:	1891      	adds	r1, r2, r2
 8005566:	60b9      	str	r1, [r7, #8]
 8005568:	415b      	adcs	r3, r3
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005570:	4641      	mov	r1, r8
 8005572:	1851      	adds	r1, r2, r1
 8005574:	6039      	str	r1, [r7, #0]
 8005576:	4649      	mov	r1, r9
 8005578:	414b      	adcs	r3, r1
 800557a:	607b      	str	r3, [r7, #4]
 800557c:	f04f 0200 	mov.w	r2, #0
 8005580:	f04f 0300 	mov.w	r3, #0
 8005584:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005588:	4659      	mov	r1, fp
 800558a:	00cb      	lsls	r3, r1, #3
 800558c:	4651      	mov	r1, sl
 800558e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005592:	4651      	mov	r1, sl
 8005594:	00ca      	lsls	r2, r1, #3
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	4603      	mov	r3, r0
 800559c:	4642      	mov	r2, r8
 800559e:	189b      	adds	r3, r3, r2
 80055a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055a2:	464b      	mov	r3, r9
 80055a4:	460a      	mov	r2, r1
 80055a6:	eb42 0303 	adc.w	r3, r2, r3
 80055aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80055b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055c4:	4649      	mov	r1, r9
 80055c6:	008b      	lsls	r3, r1, #2
 80055c8:	4641      	mov	r1, r8
 80055ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ce:	4641      	mov	r1, r8
 80055d0:	008a      	lsls	r2, r1, #2
 80055d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055d6:	f7fb fa59 	bl	8000a8c <__aeabi_uldivmod>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	4b0d      	ldr	r3, [pc, #52]	@ (8005614 <UART_SetConfig+0x4e4>)
 80055e0:	fba3 1302 	umull	r1, r3, r3, r2
 80055e4:	095b      	lsrs	r3, r3, #5
 80055e6:	2164      	movs	r1, #100	@ 0x64
 80055e8:	fb01 f303 	mul.w	r3, r1, r3
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	3332      	adds	r3, #50	@ 0x32
 80055f2:	4a08      	ldr	r2, [pc, #32]	@ (8005614 <UART_SetConfig+0x4e4>)
 80055f4:	fba2 2303 	umull	r2, r3, r2, r3
 80055f8:	095b      	lsrs	r3, r3, #5
 80055fa:	f003 020f 	and.w	r2, r3, #15
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4422      	add	r2, r4
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800560e:	46bd      	mov	sp, r7
 8005610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005614:	51eb851f 	.word	0x51eb851f

08005618 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005618:	b480      	push	{r7}
 800561a:	b083      	sub	sp, #12
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f103 0208 	add.w	r2, r3, #8
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005630:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	f103 0208 	add.w	r2, r3, #8
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f103 0208 	add.w	r2, r3, #8
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800564c:	bf00      	nop
 800564e:	370c      	adds	r7, #12
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005658:	b480      	push	{r7}
 800565a:	b083      	sub	sp, #12
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2200      	movs	r2, #0
 8005664:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	683a      	ldr	r2, [r7, #0]
 800569c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	1c5a      	adds	r2, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	601a      	str	r2, [r3, #0]
}
 80056ae:	bf00      	nop
 80056b0:	3714      	adds	r7, #20
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80056ba:	b480      	push	{r7}
 80056bc:	b085      	sub	sp, #20
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
 80056c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056d0:	d103      	bne.n	80056da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e00c      	b.n	80056f4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3308      	adds	r3, #8
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	e002      	b.n	80056e8 <vListInsert+0x2e>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d2f6      	bcs.n	80056e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	1c5a      	adds	r2, r3, #1
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	601a      	str	r2, [r3, #0]
}
 8005720:	bf00      	nop
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6892      	ldr	r2, [r2, #8]
 8005742:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	6852      	ldr	r2, [r2, #4]
 800574c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	429a      	cmp	r2, r3
 8005756:	d103      	bne.n	8005760 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	1e5a      	subs	r2, r3, #1
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3714      	adds	r7, #20
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10b      	bne.n	80057ac <xQueueGenericReset+0x2c>
        __asm volatile
 8005794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005798:	f383 8811 	msr	BASEPRI, r3
 800579c:	f3bf 8f6f 	isb	sy
 80057a0:	f3bf 8f4f 	dsb	sy
 80057a4:	60bb      	str	r3, [r7, #8]
    }
 80057a6:	bf00      	nop
 80057a8:	bf00      	nop
 80057aa:	e7fd      	b.n	80057a8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80057ac:	f002 fb46 	bl	8007e3c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057b8:	68f9      	ldr	r1, [r7, #12]
 80057ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057bc:	fb01 f303 	mul.w	r3, r1, r3
 80057c0:	441a      	add	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057dc:	3b01      	subs	r3, #1
 80057de:	68f9      	ldr	r1, [r7, #12]
 80057e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057e2:	fb01 f303 	mul.w	r3, r1, r3
 80057e6:	441a      	add	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	22ff      	movs	r2, #255	@ 0xff
 80057f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	22ff      	movs	r2, #255	@ 0xff
 80057f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d114      	bne.n	800582c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	691b      	ldr	r3, [r3, #16]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01a      	beq.n	8005840 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	3310      	adds	r3, #16
 800580e:	4618      	mov	r0, r3
 8005810:	f001 f93a 	bl	8006a88 <xTaskRemoveFromEventList>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d012      	beq.n	8005840 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 800581a:	4b0d      	ldr	r3, [pc, #52]	@ (8005850 <xQueueGenericReset+0xd0>)
 800581c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	f3bf 8f4f 	dsb	sy
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	e009      	b.n	8005840 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	3310      	adds	r3, #16
 8005830:	4618      	mov	r0, r3
 8005832:	f7ff fef1 	bl	8005618 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	3324      	adds	r3, #36	@ 0x24
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff feec 	bl	8005618 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005840:	f002 fb2e 	bl	8007ea0 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8005844:	2301      	movs	r3, #1
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	e000ed04 	.word	0xe000ed04

08005854 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005854:	b580      	push	{r7, lr}
 8005856:	b08c      	sub	sp, #48	@ 0x30
 8005858:	af02      	add	r7, sp, #8
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	4613      	mov	r3, r2
 8005860:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10b      	bne.n	8005880 <xQueueGenericCreate+0x2c>
        __asm volatile
 8005868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800586c:	f383 8811 	msr	BASEPRI, r3
 8005870:	f3bf 8f6f 	isb	sy
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	61bb      	str	r3, [r7, #24]
    }
 800587a:	bf00      	nop
 800587c:	bf00      	nop
 800587e:	e7fd      	b.n	800587c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	68ba      	ldr	r2, [r7, #8]
 8005884:	fb02 f303 	mul.w	r3, r2, r3
 8005888:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d006      	beq.n	800589e <xQueueGenericCreate+0x4a>
 8005890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	fbb2 f3f3 	udiv	r3, r2, r3
 8005898:	68fa      	ldr	r2, [r7, #12]
 800589a:	429a      	cmp	r2, r3
 800589c:	d101      	bne.n	80058a2 <xQueueGenericCreate+0x4e>
 800589e:	2301      	movs	r3, #1
 80058a0:	e000      	b.n	80058a4 <xQueueGenericCreate+0x50>
 80058a2:	2300      	movs	r3, #0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10b      	bne.n	80058c0 <xQueueGenericCreate+0x6c>
        __asm volatile
 80058a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	617b      	str	r3, [r7, #20]
    }
 80058ba:	bf00      	nop
 80058bc:	bf00      	nop
 80058be:	e7fd      	b.n	80058bc <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80058c6:	d90b      	bls.n	80058e0 <xQueueGenericCreate+0x8c>
        __asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	613b      	str	r3, [r7, #16]
    }
 80058da:	bf00      	nop
 80058dc:	bf00      	nop
 80058de:	e7fd      	b.n	80058dc <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80058e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e2:	3350      	adds	r3, #80	@ 0x50
 80058e4:	4618      	mov	r0, r3
 80058e6:	f002 fbd3 	bl	8008090 <pvPortMalloc>
 80058ea:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80058ec:	6a3b      	ldr	r3, [r7, #32]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00d      	beq.n	800590e <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	3350      	adds	r3, #80	@ 0x50
 80058fa:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058fc:	79fa      	ldrb	r2, [r7, #7]
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	4613      	mov	r3, r2
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	68b9      	ldr	r1, [r7, #8]
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	f000 f805 	bl	8005918 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800590e:	6a3b      	ldr	r3, [r7, #32]
    }
 8005910:	4618      	mov	r0, r3
 8005912:	3728      	adds	r7, #40	@ 0x28
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	e002      	b.n	800593a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005934:	69bb      	ldr	r3, [r7, #24]
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	68ba      	ldr	r2, [r7, #8]
 8005944:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005946:	2101      	movs	r1, #1
 8005948:	69b8      	ldr	r0, [r7, #24]
 800594a:	f7ff ff19 	bl	8005780 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	78fa      	ldrb	r2, [r7, #3]
 8005952:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005956:	bf00      	nop
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08e      	sub	sp, #56	@ 0x38
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	607a      	str	r2, [r7, #4]
 800596c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800596e:	2300      	movs	r3, #0
 8005970:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8005976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10b      	bne.n	8005994 <xQueueGenericSend+0x34>
        __asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800598e:	bf00      	nop
 8005990:	bf00      	nop
 8005992:	e7fd      	b.n	8005990 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d103      	bne.n	80059a2 <xQueueGenericSend+0x42>
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d101      	bne.n	80059a6 <xQueueGenericSend+0x46>
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <xQueueGenericSend+0x48>
 80059a6:	2300      	movs	r3, #0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10b      	bne.n	80059c4 <xQueueGenericSend+0x64>
        __asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80059be:	bf00      	nop
 80059c0:	bf00      	nop
 80059c2:	e7fd      	b.n	80059c0 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d103      	bne.n	80059d2 <xQueueGenericSend+0x72>
 80059ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ce:	2b01      	cmp	r3, #1
 80059d0:	d101      	bne.n	80059d6 <xQueueGenericSend+0x76>
 80059d2:	2301      	movs	r3, #1
 80059d4:	e000      	b.n	80059d8 <xQueueGenericSend+0x78>
 80059d6:	2300      	movs	r3, #0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d10b      	bne.n	80059f4 <xQueueGenericSend+0x94>
        __asm volatile
 80059dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e0:	f383 8811 	msr	BASEPRI, r3
 80059e4:	f3bf 8f6f 	isb	sy
 80059e8:	f3bf 8f4f 	dsb	sy
 80059ec:	623b      	str	r3, [r7, #32]
    }
 80059ee:	bf00      	nop
 80059f0:	bf00      	nop
 80059f2:	e7fd      	b.n	80059f0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80059f4:	f001 f9e8 	bl	8006dc8 <xTaskGetSchedulerState>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d102      	bne.n	8005a04 <xQueueGenericSend+0xa4>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <xQueueGenericSend+0xa8>
 8005a04:	2301      	movs	r3, #1
 8005a06:	e000      	b.n	8005a0a <xQueueGenericSend+0xaa>
 8005a08:	2300      	movs	r3, #0
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10b      	bne.n	8005a26 <xQueueGenericSend+0xc6>
        __asm volatile
 8005a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	61fb      	str	r3, [r7, #28]
    }
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	e7fd      	b.n	8005a22 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005a26:	f002 fa09 	bl	8007e3c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a32:	429a      	cmp	r2, r3
 8005a34:	d302      	bcc.n	8005a3c <xQueueGenericSend+0xdc>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d129      	bne.n	8005a90 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a42:	f000 fad0 	bl	8005fe6 <prvCopyDataToQueue>
 8005a46:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d010      	beq.n	8005a72 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a52:	3324      	adds	r3, #36	@ 0x24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f001 f817 	bl	8006a88 <xTaskRemoveFromEventList>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d013      	beq.n	8005a88 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8005a60:	4b3f      	ldr	r3, [pc, #252]	@ (8005b60 <xQueueGenericSend+0x200>)
 8005a62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a66:	601a      	str	r2, [r3, #0]
 8005a68:	f3bf 8f4f 	dsb	sy
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	e00a      	b.n	8005a88 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8005a72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005a78:	4b39      	ldr	r3, [pc, #228]	@ (8005b60 <xQueueGenericSend+0x200>)
 8005a7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a7e:	601a      	str	r2, [r3, #0]
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005a88:	f002 fa0a 	bl	8007ea0 <vPortExitCritical>
                return pdPASS;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	e063      	b.n	8005b58 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005a96:	f002 fa03 	bl	8007ea0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e05c      	b.n	8005b58 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d106      	bne.n	8005ab2 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005aa4:	f107 0314 	add.w	r3, r7, #20
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f001 f851 	bl	8006b50 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005ab2:	f002 f9f5 	bl	8007ea0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005ab6:	f000 fdc3 	bl	8006640 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005aba:	f002 f9bf 	bl	8007e3c <vPortEnterCritical>
 8005abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005ac4:	b25b      	sxtb	r3, r3
 8005ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005aca:	d103      	bne.n	8005ad4 <xQueueGenericSend+0x174>
 8005acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ada:	b25b      	sxtb	r3, r3
 8005adc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ae0:	d103      	bne.n	8005aea <xQueueGenericSend+0x18a>
 8005ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aea:	f002 f9d9 	bl	8007ea0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005aee:	1d3a      	adds	r2, r7, #4
 8005af0:	f107 0314 	add.w	r3, r7, #20
 8005af4:	4611      	mov	r1, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f001 f840 	bl	8006b7c <xTaskCheckForTimeOut>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d124      	bne.n	8005b4c <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b02:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b04:	f000 fb67 	bl	80061d6 <prvIsQueueFull>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d018      	beq.n	8005b40 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	3310      	adds	r3, #16
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	4611      	mov	r1, r2
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 ff64 	bl	80069e4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005b1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b1e:	f000 faf2 	bl	8006106 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005b22:	f000 fd9b 	bl	800665c <xTaskResumeAll>
 8005b26:	4603      	mov	r3, r0
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f47f af7c 	bne.w	8005a26 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8005b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b60 <xQueueGenericSend+0x200>)
 8005b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	e772      	b.n	8005a26 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b42:	f000 fae0 	bl	8006106 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005b46:	f000 fd89 	bl	800665c <xTaskResumeAll>
 8005b4a:	e76c      	b.n	8005a26 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005b4c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b4e:	f000 fada 	bl	8006106 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005b52:	f000 fd83 	bl	800665c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005b56:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3738      	adds	r7, #56	@ 0x38
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	e000ed04 	.word	0xe000ed04

08005b64 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b090      	sub	sp, #64	@ 0x40
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	e7fd      	b.n	8005b90 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b94:	68bb      	ldr	r3, [r7, #8]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d103      	bne.n	8005ba2 <xQueueGenericSendFromISR+0x3e>
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <xQueueGenericSendFromISR+0x42>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e000      	b.n	8005ba8 <xQueueGenericSendFromISR+0x44>
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10b      	bne.n	8005bc4 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8005bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb0:	f383 8811 	msr	BASEPRI, r3
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	f3bf 8f4f 	dsb	sy
 8005bbc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005bbe:	bf00      	nop
 8005bc0:	bf00      	nop
 8005bc2:	e7fd      	b.n	8005bc0 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d103      	bne.n	8005bd2 <xQueueGenericSendFromISR+0x6e>
 8005bca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <xQueueGenericSendFromISR+0x72>
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e000      	b.n	8005bd8 <xQueueGenericSendFromISR+0x74>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d10b      	bne.n	8005bf4 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8005bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	623b      	str	r3, [r7, #32]
    }
 8005bee:	bf00      	nop
 8005bf0:	bf00      	nop
 8005bf2:	e7fd      	b.n	8005bf0 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005bf4:	f002 fa0a 	bl	800800c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8005bf8:	f3ef 8211 	mrs	r2, BASEPRI
 8005bfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c00:	f383 8811 	msr	BASEPRI, r3
 8005c04:	f3bf 8f6f 	isb	sy
 8005c08:	f3bf 8f4f 	dsb	sy
 8005c0c:	61fa      	str	r2, [r7, #28]
 8005c0e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8005c10:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c12:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d302      	bcc.n	8005c26 <xQueueGenericSendFromISR+0xc2>
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d13f      	bne.n	8005ca6 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005c26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c28:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	68b9      	ldr	r1, [r7, #8]
 8005c3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c3c:	f000 f9d3 	bl	8005fe6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005c40:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005c48:	d112      	bne.n	8005c70 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d026      	beq.n	8005ca0 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	3324      	adds	r3, #36	@ 0x24
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 ff16 	bl	8006a88 <xTaskRemoveFromEventList>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01e      	beq.n	8005ca0 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01b      	beq.n	8005ca0 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	601a      	str	r2, [r3, #0]
 8005c6e:	e017      	b.n	8005ca0 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8005c70:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005c74:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c76:	d10b      	bne.n	8005c90 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8005c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c7c:	f383 8811 	msr	BASEPRI, r3
 8005c80:	f3bf 8f6f 	isb	sy
 8005c84:	f3bf 8f4f 	dsb	sy
 8005c88:	617b      	str	r3, [r7, #20]
    }
 8005c8a:	bf00      	nop
 8005c8c:	bf00      	nop
 8005c8e:	e7fd      	b.n	8005c8c <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005c94:	3301      	adds	r3, #1
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	b25a      	sxtb	r2, r3
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8005ca4:	e001      	b.n	8005caa <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005caa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cac:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005cb4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3740      	adds	r7, #64	@ 0x40
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08c      	sub	sp, #48	@ 0x30
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10b      	bne.n	8005cf2 <xQueueReceive+0x32>
        __asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	623b      	str	r3, [r7, #32]
    }
 8005cec:	bf00      	nop
 8005cee:	bf00      	nop
 8005cf0:	e7fd      	b.n	8005cee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d103      	bne.n	8005d00 <xQueueReceive+0x40>
 8005cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <xQueueReceive+0x44>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <xQueueReceive+0x46>
 8005d04:	2300      	movs	r3, #0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <xQueueReceive+0x62>
        __asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	61fb      	str	r3, [r7, #28]
    }
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	e7fd      	b.n	8005d1e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d22:	f001 f851 	bl	8006dc8 <xTaskGetSchedulerState>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d102      	bne.n	8005d32 <xQueueReceive+0x72>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d101      	bne.n	8005d36 <xQueueReceive+0x76>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e000      	b.n	8005d38 <xQueueReceive+0x78>
 8005d36:	2300      	movs	r3, #0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d10b      	bne.n	8005d54 <xQueueReceive+0x94>
        __asm volatile
 8005d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d40:	f383 8811 	msr	BASEPRI, r3
 8005d44:	f3bf 8f6f 	isb	sy
 8005d48:	f3bf 8f4f 	dsb	sy
 8005d4c:	61bb      	str	r3, [r7, #24]
    }
 8005d4e:	bf00      	nop
 8005d50:	bf00      	nop
 8005d52:	e7fd      	b.n	8005d50 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005d54:	f002 f872 	bl	8007e3c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d01f      	beq.n	8005da4 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d68:	f000 f9a7 	bl	80060ba <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	1e5a      	subs	r2, r3, #1
 8005d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d72:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00f      	beq.n	8005d9c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	3310      	adds	r3, #16
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fe81 	bl	8006a88 <xTaskRemoveFromEventList>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d007      	beq.n	8005d9c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8005d8c:	4b3c      	ldr	r3, [pc, #240]	@ (8005e80 <xQueueReceive+0x1c0>)
 8005d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	f3bf 8f4f 	dsb	sy
 8005d98:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005d9c:	f002 f880 	bl	8007ea0 <vPortExitCritical>
                return pdPASS;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e069      	b.n	8005e78 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005daa:	f002 f879 	bl	8007ea0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005dae:	2300      	movs	r3, #0
 8005db0:	e062      	b.n	8005e78 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005db8:	f107 0310 	add.w	r3, r7, #16
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 fec7 	bl	8006b50 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005dc6:	f002 f86b 	bl	8007ea0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005dca:	f000 fc39 	bl	8006640 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005dce:	f002 f835 	bl	8007e3c <vPortEnterCritical>
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005dd8:	b25b      	sxtb	r3, r3
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005dde:	d103      	bne.n	8005de8 <xQueueReceive+0x128>
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005de8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dee:	b25b      	sxtb	r3, r3
 8005df0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005df4:	d103      	bne.n	8005dfe <xQueueReceive+0x13e>
 8005df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005dfe:	f002 f84f 	bl	8007ea0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e02:	1d3a      	adds	r2, r7, #4
 8005e04:	f107 0310 	add.w	r3, r7, #16
 8005e08:	4611      	mov	r1, r2
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f000 feb6 	bl	8006b7c <xTaskCheckForTimeOut>
 8005e10:	4603      	mov	r3, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d123      	bne.n	8005e5e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e16:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e18:	f000 f9c7 	bl	80061aa <prvIsQueueEmpty>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d017      	beq.n	8005e52 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e24:	3324      	adds	r3, #36	@ 0x24
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	4611      	mov	r1, r2
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f000 fdda 	bl	80069e4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8005e30:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e32:	f000 f968 	bl	8006106 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005e36:	f000 fc11 	bl	800665c <xTaskResumeAll>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d189      	bne.n	8005d54 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8005e40:	4b0f      	ldr	r3, [pc, #60]	@ (8005e80 <xQueueReceive+0x1c0>)
 8005e42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e46:	601a      	str	r2, [r3, #0]
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	f3bf 8f6f 	isb	sy
 8005e50:	e780      	b.n	8005d54 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005e52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e54:	f000 f957 	bl	8006106 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005e58:	f000 fc00 	bl	800665c <xTaskResumeAll>
 8005e5c:	e77a      	b.n	8005d54 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e60:	f000 f951 	bl	8006106 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8005e64:	f000 fbfa 	bl	800665c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e6a:	f000 f99e 	bl	80061aa <prvIsQueueEmpty>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f43f af6f 	beq.w	8005d54 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8005e76:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3730      	adds	r7, #48	@ 0x30
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b090      	sub	sp, #64	@ 0x40
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10b      	bne.n	8005eb2 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8005e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e9e:	f383 8811 	msr	BASEPRI, r3
 8005ea2:	f3bf 8f6f 	isb	sy
 8005ea6:	f3bf 8f4f 	dsb	sy
 8005eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005eac:	bf00      	nop
 8005eae:	bf00      	nop
 8005eb0:	e7fd      	b.n	8005eae <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d103      	bne.n	8005ec0 <xQueueReceiveFromISR+0x3c>
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d101      	bne.n	8005ec4 <xQueueReceiveFromISR+0x40>
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	e000      	b.n	8005ec6 <xQueueReceiveFromISR+0x42>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d10b      	bne.n	8005ee2 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8005eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ece:	f383 8811 	msr	BASEPRI, r3
 8005ed2:	f3bf 8f6f 	isb	sy
 8005ed6:	f3bf 8f4f 	dsb	sy
 8005eda:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	e7fd      	b.n	8005ede <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005ee2:	f002 f893 	bl	800800c <vPortValidateInterruptPriority>
        __asm volatile
 8005ee6:	f3ef 8211 	mrs	r2, BASEPRI
 8005eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eee:	f383 8811 	msr	BASEPRI, r3
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	f3bf 8f4f 	dsb	sy
 8005efa:	623a      	str	r2, [r7, #32]
 8005efc:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8005efe:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f00:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f06:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d03f      	beq.n	8005f8e <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005f0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f10:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f14:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005f1c:	f000 f8cd 	bl	80060ba <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f22:	1e5a      	subs	r2, r3, #1
 8005f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f26:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8005f28:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f30:	d112      	bne.n	8005f58 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d026      	beq.n	8005f88 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f3c:	3310      	adds	r3, #16
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 fda2 	bl	8006a88 <xTaskRemoveFromEventList>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01e      	beq.n	8005f88 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	601a      	str	r2, [r3, #0]
 8005f56:	e017      	b.n	8005f88 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005f58:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005f5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f5e:	d10b      	bne.n	8005f78 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	61bb      	str	r3, [r7, #24]
    }
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	e7fd      	b.n	8005f74 <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f7c:	3301      	adds	r3, #1
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	b25a      	sxtb	r2, r3
 8005f82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f8c:	e001      	b.n	8005f92 <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f94:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f383 8811 	msr	BASEPRI, r3
    }
 8005f9c:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005f9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	3740      	adds	r7, #64	@ 0x40
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10b      	bne.n	8005fce <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	60bb      	str	r3, [r7, #8]
    }
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	e7fd      	b.n	8005fca <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005fce:	f001 ff35 	bl	8007e3c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd6:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005fd8:	f001 ff62 	bl	8007ea0 <vPortExitCritical>

    return uxReturn;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3710      	adds	r7, #16
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}

08005fe6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b086      	sub	sp, #24
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10d      	bne.n	8006020 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d14d      	bne.n	80060a8 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	4618      	mov	r0, r3
 8006012:	f000 fef7 	bl	8006e04 <xTaskPriorityDisinherit>
 8006016:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	609a      	str	r2, [r3, #8]
 800601e:	e043      	b.n	80060a8 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d119      	bne.n	800605a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6858      	ldr	r0, [r3, #4]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800602e:	461a      	mov	r2, r3
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	f002 fa83 	bl	800853c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603e:	441a      	add	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	685a      	ldr	r2, [r3, #4]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	429a      	cmp	r2, r3
 800604e:	d32b      	bcc.n	80060a8 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	605a      	str	r2, [r3, #4]
 8006058:	e026      	b.n	80060a8 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	68d8      	ldr	r0, [r3, #12]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	461a      	mov	r2, r3
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	f002 fa69 	bl	800853c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	425b      	negs	r3, r3
 8006074:	441a      	add	r2, r3
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d207      	bcs.n	8006096 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608e:	425b      	negs	r3, r3
 8006090:	441a      	add	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d105      	bne.n	80060a8 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d002      	beq.n	80060a8 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	3b01      	subs	r3, #1
 80060a6:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80060b0:	697b      	ldr	r3, [r7, #20]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80060ba:	b580      	push	{r7, lr}
 80060bc:	b082      	sub	sp, #8
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
 80060c2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d018      	beq.n	80060fe <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060d4:	441a      	add	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68da      	ldr	r2, [r3, #12]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d303      	bcc.n	80060ee <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68d9      	ldr	r1, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f6:	461a      	mov	r2, r3
 80060f8:	6838      	ldr	r0, [r7, #0]
 80060fa:	f002 fa1f 	bl	800853c <memcpy>
    }
}
 80060fe:	bf00      	nop
 8006100:	3708      	adds	r7, #8
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}

08006106 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006106:	b580      	push	{r7, lr}
 8006108:	b084      	sub	sp, #16
 800610a:	af00      	add	r7, sp, #0
 800610c:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800610e:	f001 fe95 	bl	8007e3c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006118:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800611a:	e011      	b.n	8006140 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006120:	2b00      	cmp	r3, #0
 8006122:	d012      	beq.n	800614a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	3324      	adds	r3, #36	@ 0x24
 8006128:	4618      	mov	r0, r3
 800612a:	f000 fcad 	bl	8006a88 <xTaskRemoveFromEventList>
 800612e:	4603      	mov	r3, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	d001      	beq.n	8006138 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8006134:	f000 fd8a 	bl	8006c4c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8006138:	7bfb      	ldrb	r3, [r7, #15]
 800613a:	3b01      	subs	r3, #1
 800613c:	b2db      	uxtb	r3, r3
 800613e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8006140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006144:	2b00      	cmp	r3, #0
 8006146:	dce9      	bgt.n	800611c <prvUnlockQueue+0x16>
 8006148:	e000      	b.n	800614c <prvUnlockQueue+0x46>
                        break;
 800614a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	22ff      	movs	r2, #255	@ 0xff
 8006150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8006154:	f001 fea4 	bl	8007ea0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8006158:	f001 fe70 	bl	8007e3c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006162:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8006164:	e011      	b.n	800618a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d012      	beq.n	8006194 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	3310      	adds	r3, #16
 8006172:	4618      	mov	r0, r3
 8006174:	f000 fc88 	bl	8006a88 <xTaskRemoveFromEventList>
 8006178:	4603      	mov	r3, r0
 800617a:	2b00      	cmp	r3, #0
 800617c:	d001      	beq.n	8006182 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800617e:	f000 fd65 	bl	8006c4c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8006182:	7bbb      	ldrb	r3, [r7, #14]
 8006184:	3b01      	subs	r3, #1
 8006186:	b2db      	uxtb	r3, r3
 8006188:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800618a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800618e:	2b00      	cmp	r3, #0
 8006190:	dce9      	bgt.n	8006166 <prvUnlockQueue+0x60>
 8006192:	e000      	b.n	8006196 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8006194:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	22ff      	movs	r2, #255	@ 0xff
 800619a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800619e:	f001 fe7f 	bl	8007ea0 <vPortExitCritical>
}
 80061a2:	bf00      	nop
 80061a4:	3710      	adds	r7, #16
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80061b2:	f001 fe43 	bl	8007e3c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80061be:	2301      	movs	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e001      	b.n	80061c8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80061c4:	2300      	movs	r3, #0
 80061c6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80061c8:	f001 fe6a 	bl	8007ea0 <vPortExitCritical>

    return xReturn;
 80061cc:	68fb      	ldr	r3, [r7, #12]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3710      	adds	r7, #16
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80061de:	f001 fe2d 	bl	8007e3c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d102      	bne.n	80061f4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80061ee:	2301      	movs	r3, #1
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	e001      	b.n	80061f8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80061f4:	2300      	movs	r3, #0
 80061f6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80061f8:	f001 fe52 	bl	8007ea0 <vPortExitCritical>

    return xReturn;
 80061fc:	68fb      	ldr	r3, [r7, #12]
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8006206:	b480      	push	{r7}
 8006208:	b087      	sub	sp, #28
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d10b      	bne.n	8006230 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8006218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621c:	f383 8811 	msr	BASEPRI, r3
 8006220:	f3bf 8f6f 	isb	sy
 8006224:	f3bf 8f4f 	dsb	sy
 8006228:	60fb      	str	r3, [r7, #12]
    }
 800622a:	bf00      	nop
 800622c:	bf00      	nop
 800622e:	e7fd      	b.n	800622c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006238:	429a      	cmp	r2, r3
 800623a:	d102      	bne.n	8006242 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 800623c:	2301      	movs	r3, #1
 800623e:	617b      	str	r3, [r7, #20]
 8006240:	e001      	b.n	8006246 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8006242:	2300      	movs	r3, #0
 8006244:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006246:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8006248:	4618      	mov	r0, r3
 800624a:	371c      	adds	r7, #28
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8006254:	b480      	push	{r7}
 8006256:	b085      	sub	sp, #20
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800625e:	2300      	movs	r3, #0
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	e014      	b.n	800628e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006264:	4a0f      	ldr	r2, [pc, #60]	@ (80062a4 <vQueueAddToRegistry+0x50>)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d10b      	bne.n	8006288 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006270:	490c      	ldr	r1, [pc, #48]	@ (80062a4 <vQueueAddToRegistry+0x50>)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	683a      	ldr	r2, [r7, #0]
 8006276:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800627a:	4a0a      	ldr	r2, [pc, #40]	@ (80062a4 <vQueueAddToRegistry+0x50>)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	00db      	lsls	r3, r3, #3
 8006280:	4413      	add	r3, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8006286:	e006      	b.n	8006296 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2b07      	cmp	r3, #7
 8006292:	d9e7      	bls.n	8006264 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8006294:	bf00      	nop
 8006296:	bf00      	nop
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000240 	.word	0x20000240

080062a8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80062b8:	f001 fdc0 	bl	8007e3c <vPortEnterCritical>
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062c2:	b25b      	sxtb	r3, r3
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062c8:	d103      	bne.n	80062d2 <vQueueWaitForMessageRestricted+0x2a>
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062d8:	b25b      	sxtb	r3, r3
 80062da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062de:	d103      	bne.n	80062e8 <vQueueWaitForMessageRestricted+0x40>
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062e8:	f001 fdda 	bl	8007ea0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	3324      	adds	r3, #36	@ 0x24
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	68b9      	ldr	r1, [r7, #8]
 80062fc:	4618      	mov	r0, r3
 80062fe:	f000 fb97 	bl	8006a30 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8006302:	6978      	ldr	r0, [r7, #20]
 8006304:	f7ff feff 	bl	8006106 <prvUnlockQueue>
    }
 8006308:	bf00      	nop
 800630a:	3718      	adds	r7, #24
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8006310:	b580      	push	{r7, lr}
 8006312:	b08c      	sub	sp, #48	@ 0x30
 8006314:	af04      	add	r7, sp, #16
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	603b      	str	r3, [r7, #0]
 800631c:	4613      	mov	r3, r2
 800631e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006320:	88fb      	ldrh	r3, [r7, #6]
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4618      	mov	r0, r3
 8006326:	f001 feb3 	bl	8008090 <pvPortMalloc>
 800632a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00e      	beq.n	8006350 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006332:	2058      	movs	r0, #88	@ 0x58
 8006334:	f001 feac 	bl	8008090 <pvPortMalloc>
 8006338:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d003      	beq.n	8006348 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	631a      	str	r2, [r3, #48]	@ 0x30
 8006346:	e005      	b.n	8006354 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8006348:	6978      	ldr	r0, [r7, #20]
 800634a:	f001 ff83 	bl	8008254 <vPortFree>
 800634e:	e001      	b.n	8006354 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8006354:	69fb      	ldr	r3, [r7, #28]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d013      	beq.n	8006382 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800635a:	88fa      	ldrh	r2, [r7, #6]
 800635c:	2300      	movs	r3, #0
 800635e:	9303      	str	r3, [sp, #12]
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	9302      	str	r3, [sp, #8]
 8006364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006366:	9301      	str	r3, [sp, #4]
 8006368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636a:	9300      	str	r3, [sp, #0]
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	68b9      	ldr	r1, [r7, #8]
 8006370:	68f8      	ldr	r0, [r7, #12]
 8006372:	f000 f80e 	bl	8006392 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8006376:	69f8      	ldr	r0, [r7, #28]
 8006378:	f000 f8a2 	bl	80064c0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800637c:	2301      	movs	r3, #1
 800637e:	61bb      	str	r3, [r7, #24]
 8006380:	e002      	b.n	8006388 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006382:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006386:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8006388:	69bb      	ldr	r3, [r7, #24]
    }
 800638a:	4618      	mov	r0, r3
 800638c:	3720      	adds	r7, #32
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b088      	sub	sp, #32
 8006396:	af00      	add	r7, sp, #0
 8006398:	60f8      	str	r0, [r7, #12]
 800639a:	60b9      	str	r1, [r7, #8]
 800639c:	607a      	str	r2, [r7, #4]
 800639e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	461a      	mov	r2, r3
 80063aa:	21a5      	movs	r1, #165	@ 0xa5
 80063ac:	f002 f892 	bl	80084d4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063ba:	3b01      	subs	r3, #1
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	f023 0307 	bic.w	r3, r3, #7
 80063c8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <prvInitialiseNewTask+0x5a>
        __asm volatile
 80063d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d8:	f383 8811 	msr	BASEPRI, r3
 80063dc:	f3bf 8f6f 	isb	sy
 80063e0:	f3bf 8f4f 	dsb	sy
 80063e4:	617b      	str	r3, [r7, #20]
    }
 80063e6:	bf00      	nop
 80063e8:	bf00      	nop
 80063ea:	e7fd      	b.n	80063e8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d01f      	beq.n	8006432 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80063f2:	2300      	movs	r3, #0
 80063f4:	61fb      	str	r3, [r7, #28]
 80063f6:	e012      	b.n	800641e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	4413      	add	r3, r2
 80063fe:	7819      	ldrb	r1, [r3, #0]
 8006400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	3334      	adds	r3, #52	@ 0x34
 8006408:	460a      	mov	r2, r1
 800640a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800640c:	68ba      	ldr	r2, [r7, #8]
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d006      	beq.n	8006426 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	3301      	adds	r3, #1
 800641c:	61fb      	str	r3, [r7, #28]
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2b09      	cmp	r3, #9
 8006422:	d9e9      	bls.n	80063f8 <prvInitialiseNewTask+0x66>
 8006424:	e000      	b.n	8006428 <prvInitialiseNewTask+0x96>
            {
                break;
 8006426:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006430:	e003      	b.n	800643a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006432:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006434:	2200      	movs	r2, #0
 8006436:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	2b04      	cmp	r3, #4
 800643e:	d901      	bls.n	8006444 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006440:	2304      	movs	r3, #4
 8006442:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8006444:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006446:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006448:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800644a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800644c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800644e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	2200      	movs	r2, #0
 8006454:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006458:	3304      	adds	r3, #4
 800645a:	4618      	mov	r0, r3
 800645c:	f7ff f8fc 	bl	8005658 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006462:	3318      	adds	r3, #24
 8006464:	4618      	mov	r0, r3
 8006466:	f7ff f8f7 	bl	8005658 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800646a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800646e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	f1c3 0205 	rsb	r2, r3, #5
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800647e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8006480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006482:	3350      	adds	r3, #80	@ 0x50
 8006484:	2204      	movs	r2, #4
 8006486:	2100      	movs	r1, #0
 8006488:	4618      	mov	r0, r3
 800648a:	f002 f823 	bl	80084d4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	3354      	adds	r3, #84	@ 0x54
 8006492:	2201      	movs	r2, #1
 8006494:	2100      	movs	r1, #0
 8006496:	4618      	mov	r0, r3
 8006498:	f002 f81c 	bl	80084d4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800649c:	683a      	ldr	r2, [r7, #0]
 800649e:	68f9      	ldr	r1, [r7, #12]
 80064a0:	69b8      	ldr	r0, [r7, #24]
 80064a2:	f001 fb99 	bl	8007bd8 <pxPortInitialiseStack>
 80064a6:	4602      	mov	r2, r0
 80064a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064aa:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80064ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064b6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80064b8:	bf00      	nop
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}

080064c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b082      	sub	sp, #8
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80064c8:	f001 fcb8 	bl	8007e3c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80064cc:	4b2c      	ldr	r3, [pc, #176]	@ (8006580 <prvAddNewTaskToReadyList+0xc0>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	3301      	adds	r3, #1
 80064d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006580 <prvAddNewTaskToReadyList+0xc0>)
 80064d4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80064d6:	4b2b      	ldr	r3, [pc, #172]	@ (8006584 <prvAddNewTaskToReadyList+0xc4>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d109      	bne.n	80064f2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80064de:	4a29      	ldr	r2, [pc, #164]	@ (8006584 <prvAddNewTaskToReadyList+0xc4>)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80064e4:	4b26      	ldr	r3, [pc, #152]	@ (8006580 <prvAddNewTaskToReadyList+0xc0>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d110      	bne.n	800650e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80064ec:	f000 fbd2 	bl	8006c94 <prvInitialiseTaskLists>
 80064f0:	e00d      	b.n	800650e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80064f2:	4b25      	ldr	r3, [pc, #148]	@ (8006588 <prvAddNewTaskToReadyList+0xc8>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d109      	bne.n	800650e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80064fa:	4b22      	ldr	r3, [pc, #136]	@ (8006584 <prvAddNewTaskToReadyList+0xc4>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006504:	429a      	cmp	r2, r3
 8006506:	d802      	bhi.n	800650e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8006508:	4a1e      	ldr	r2, [pc, #120]	@ (8006584 <prvAddNewTaskToReadyList+0xc4>)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800650e:	4b1f      	ldr	r3, [pc, #124]	@ (800658c <prvAddNewTaskToReadyList+0xcc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	3301      	adds	r3, #1
 8006514:	4a1d      	ldr	r2, [pc, #116]	@ (800658c <prvAddNewTaskToReadyList+0xcc>)
 8006516:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006518:	4b1c      	ldr	r3, [pc, #112]	@ (800658c <prvAddNewTaskToReadyList+0xcc>)
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006524:	2201      	movs	r2, #1
 8006526:	409a      	lsls	r2, r3
 8006528:	4b19      	ldr	r3, [pc, #100]	@ (8006590 <prvAddNewTaskToReadyList+0xd0>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4313      	orrs	r3, r2
 800652e:	4a18      	ldr	r2, [pc, #96]	@ (8006590 <prvAddNewTaskToReadyList+0xd0>)
 8006530:	6013      	str	r3, [r2, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006536:	4613      	mov	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	4413      	add	r3, r2
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4a15      	ldr	r2, [pc, #84]	@ (8006594 <prvAddNewTaskToReadyList+0xd4>)
 8006540:	441a      	add	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f7ff f892 	bl	8005672 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800654e:	f001 fca7 	bl	8007ea0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8006552:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <prvAddNewTaskToReadyList+0xc8>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00e      	beq.n	8006578 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800655a:	4b0a      	ldr	r3, [pc, #40]	@ (8006584 <prvAddNewTaskToReadyList+0xc4>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006564:	429a      	cmp	r2, r3
 8006566:	d207      	bcs.n	8006578 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8006568:	4b0b      	ldr	r3, [pc, #44]	@ (8006598 <prvAddNewTaskToReadyList+0xd8>)
 800656a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8006578:	bf00      	nop
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000358 	.word	0x20000358
 8006584:	20000280 	.word	0x20000280
 8006588:	20000364 	.word	0x20000364
 800658c:	20000374 	.word	0x20000374
 8006590:	20000360 	.word	0x20000360
 8006594:	20000284 	.word	0x20000284
 8006598:	e000ed04 	.word	0xe000ed04

0800659c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b086      	sub	sp, #24
 80065a0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80065a2:	4b20      	ldr	r3, [pc, #128]	@ (8006624 <vTaskStartScheduler+0x88>)
 80065a4:	9301      	str	r3, [sp, #4]
 80065a6:	2300      	movs	r3, #0
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	2300      	movs	r3, #0
 80065ac:	2282      	movs	r2, #130	@ 0x82
 80065ae:	491e      	ldr	r1, [pc, #120]	@ (8006628 <vTaskStartScheduler+0x8c>)
 80065b0:	481e      	ldr	r0, [pc, #120]	@ (800662c <vTaskStartScheduler+0x90>)
 80065b2:	f7ff fead 	bl	8006310 <xTaskCreate>
 80065b6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d102      	bne.n	80065c4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80065be:	f000 ff6d 	bl	800749c <xTimerCreateTimerTask>
 80065c2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d116      	bne.n	80065f8 <vTaskStartScheduler+0x5c>
        __asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	60bb      	str	r3, [r7, #8]
    }
 80065dc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80065de:	4b14      	ldr	r3, [pc, #80]	@ (8006630 <vTaskStartScheduler+0x94>)
 80065e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80065e4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80065e6:	4b13      	ldr	r3, [pc, #76]	@ (8006634 <vTaskStartScheduler+0x98>)
 80065e8:	2201      	movs	r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80065ec:	4b12      	ldr	r3, [pc, #72]	@ (8006638 <vTaskStartScheduler+0x9c>)
 80065ee:	2200      	movs	r2, #0
 80065f0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80065f2:	f001 fb7f 	bl	8007cf4 <xPortStartScheduler>
 80065f6:	e00f      	b.n	8006618 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065fe:	d10b      	bne.n	8006618 <vTaskStartScheduler+0x7c>
        __asm volatile
 8006600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	607b      	str	r3, [r7, #4]
    }
 8006612:	bf00      	nop
 8006614:	bf00      	nop
 8006616:	e7fd      	b.n	8006614 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8006618:	4b08      	ldr	r3, [pc, #32]	@ (800663c <vTaskStartScheduler+0xa0>)
 800661a:	681b      	ldr	r3, [r3, #0]
}
 800661c:	bf00      	nop
 800661e:	3710      	adds	r7, #16
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	2000037c 	.word	0x2000037c
 8006628:	080095cc 	.word	0x080095cc
 800662c:	08006c65 	.word	0x08006c65
 8006630:	20000378 	.word	0x20000378
 8006634:	20000364 	.word	0x20000364
 8006638:	2000035c 	.word	0x2000035c
 800663c:	20000070 	.word	0x20000070

08006640 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8006644:	4b04      	ldr	r3, [pc, #16]	@ (8006658 <vTaskSuspendAll+0x18>)
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3301      	adds	r3, #1
 800664a:	4a03      	ldr	r2, [pc, #12]	@ (8006658 <vTaskSuspendAll+0x18>)
 800664c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800664e:	bf00      	nop
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	20000380 	.word	0x20000380

0800665c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006662:	2300      	movs	r3, #0
 8006664:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006666:	2300      	movs	r3, #0
 8006668:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800666a:	4b42      	ldr	r3, [pc, #264]	@ (8006774 <xTaskResumeAll+0x118>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d10b      	bne.n	800668a <xTaskResumeAll+0x2e>
        __asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	603b      	str	r3, [r7, #0]
    }
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800668a:	f001 fbd7 	bl	8007e3c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800668e:	4b39      	ldr	r3, [pc, #228]	@ (8006774 <xTaskResumeAll+0x118>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3b01      	subs	r3, #1
 8006694:	4a37      	ldr	r2, [pc, #220]	@ (8006774 <xTaskResumeAll+0x118>)
 8006696:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006698:	4b36      	ldr	r3, [pc, #216]	@ (8006774 <xTaskResumeAll+0x118>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d161      	bne.n	8006764 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066a0:	4b35      	ldr	r3, [pc, #212]	@ (8006778 <xTaskResumeAll+0x11c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d05d      	beq.n	8006764 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066a8:	e02e      	b.n	8006708 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066aa:	4b34      	ldr	r3, [pc, #208]	@ (800677c <xTaskResumeAll+0x120>)
 80066ac:	68db      	ldr	r3, [r3, #12]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	3318      	adds	r3, #24
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff f838 	bl	800572c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	3304      	adds	r3, #4
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff f833 	bl	800572c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ca:	2201      	movs	r2, #1
 80066cc:	409a      	lsls	r2, r3
 80066ce:	4b2c      	ldr	r3, [pc, #176]	@ (8006780 <xTaskResumeAll+0x124>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006780 <xTaskResumeAll+0x124>)
 80066d6:	6013      	str	r3, [r2, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4a27      	ldr	r2, [pc, #156]	@ (8006784 <xTaskResumeAll+0x128>)
 80066e6:	441a      	add	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4619      	mov	r1, r3
 80066ee:	4610      	mov	r0, r2
 80066f0:	f7fe ffbf 	bl	8005672 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f8:	4b23      	ldr	r3, [pc, #140]	@ (8006788 <xTaskResumeAll+0x12c>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	429a      	cmp	r2, r3
 8006700:	d302      	bcc.n	8006708 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8006702:	4b22      	ldr	r3, [pc, #136]	@ (800678c <xTaskResumeAll+0x130>)
 8006704:	2201      	movs	r2, #1
 8006706:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006708:	4b1c      	ldr	r3, [pc, #112]	@ (800677c <xTaskResumeAll+0x120>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1cc      	bne.n	80066aa <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d001      	beq.n	800671a <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8006716:	f000 fb3b 	bl	8006d90 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800671a:	4b1d      	ldr	r3, [pc, #116]	@ (8006790 <xTaskResumeAll+0x134>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d010      	beq.n	8006748 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8006726:	f000 f847 	bl	80067b8 <xTaskIncrementTick>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8006730:	4b16      	ldr	r3, [pc, #88]	@ (800678c <xTaskResumeAll+0x130>)
 8006732:	2201      	movs	r2, #1
 8006734:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3b01      	subs	r3, #1
 800673a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1f1      	bne.n	8006726 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8006742:	4b13      	ldr	r3, [pc, #76]	@ (8006790 <xTaskResumeAll+0x134>)
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8006748:	4b10      	ldr	r3, [pc, #64]	@ (800678c <xTaskResumeAll+0x130>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d009      	beq.n	8006764 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8006750:	2301      	movs	r3, #1
 8006752:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8006754:	4b0f      	ldr	r3, [pc, #60]	@ (8006794 <xTaskResumeAll+0x138>)
 8006756:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800675a:	601a      	str	r2, [r3, #0]
 800675c:	f3bf 8f4f 	dsb	sy
 8006760:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8006764:	f001 fb9c 	bl	8007ea0 <vPortExitCritical>

    return xAlreadyYielded;
 8006768:	68bb      	ldr	r3, [r7, #8]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3710      	adds	r7, #16
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20000380 	.word	0x20000380
 8006778:	20000358 	.word	0x20000358
 800677c:	20000318 	.word	0x20000318
 8006780:	20000360 	.word	0x20000360
 8006784:	20000284 	.word	0x20000284
 8006788:	20000280 	.word	0x20000280
 800678c:	2000036c 	.word	0x2000036c
 8006790:	20000368 	.word	0x20000368
 8006794:	e000ed04 	.word	0xe000ed04

08006798 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800679e:	4b05      	ldr	r3, [pc, #20]	@ (80067b4 <xTaskGetTickCount+0x1c>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80067a4:	687b      	ldr	r3, [r7, #4]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr
 80067b2:	bf00      	nop
 80067b4:	2000035c 	.word	0x2000035c

080067b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b086      	sub	sp, #24
 80067bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067c2:	4b4f      	ldr	r3, [pc, #316]	@ (8006900 <xTaskIncrementTick+0x148>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	f040 808f 	bne.w	80068ea <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067cc:	4b4d      	ldr	r3, [pc, #308]	@ (8006904 <xTaskIncrementTick+0x14c>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3301      	adds	r3, #1
 80067d2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80067d4:	4a4b      	ldr	r2, [pc, #300]	@ (8006904 <xTaskIncrementTick+0x14c>)
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d121      	bne.n	8006824 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80067e0:	4b49      	ldr	r3, [pc, #292]	@ (8006908 <xTaskIncrementTick+0x150>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d00b      	beq.n	8006802 <xTaskIncrementTick+0x4a>
        __asm volatile
 80067ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ee:	f383 8811 	msr	BASEPRI, r3
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	f3bf 8f4f 	dsb	sy
 80067fa:	603b      	str	r3, [r7, #0]
    }
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	e7fd      	b.n	80067fe <xTaskIncrementTick+0x46>
 8006802:	4b41      	ldr	r3, [pc, #260]	@ (8006908 <xTaskIncrementTick+0x150>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	4b40      	ldr	r3, [pc, #256]	@ (800690c <xTaskIncrementTick+0x154>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a3e      	ldr	r2, [pc, #248]	@ (8006908 <xTaskIncrementTick+0x150>)
 800680e:	6013      	str	r3, [r2, #0]
 8006810:	4a3e      	ldr	r2, [pc, #248]	@ (800690c <xTaskIncrementTick+0x154>)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	4b3e      	ldr	r3, [pc, #248]	@ (8006910 <xTaskIncrementTick+0x158>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3301      	adds	r3, #1
 800681c:	4a3c      	ldr	r2, [pc, #240]	@ (8006910 <xTaskIncrementTick+0x158>)
 800681e:	6013      	str	r3, [r2, #0]
 8006820:	f000 fab6 	bl	8006d90 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8006824:	4b3b      	ldr	r3, [pc, #236]	@ (8006914 <xTaskIncrementTick+0x15c>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	429a      	cmp	r2, r3
 800682c:	d348      	bcc.n	80068c0 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800682e:	4b36      	ldr	r3, [pc, #216]	@ (8006908 <xTaskIncrementTick+0x150>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006838:	4b36      	ldr	r3, [pc, #216]	@ (8006914 <xTaskIncrementTick+0x15c>)
 800683a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800683e:	601a      	str	r2, [r3, #0]
                    break;
 8006840:	e03e      	b.n	80068c0 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006842:	4b31      	ldr	r3, [pc, #196]	@ (8006908 <xTaskIncrementTick+0x150>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	429a      	cmp	r2, r3
 8006858:	d203      	bcs.n	8006862 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800685a:	4a2e      	ldr	r2, [pc, #184]	@ (8006914 <xTaskIncrementTick+0x15c>)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006860:	e02e      	b.n	80068c0 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	3304      	adds	r3, #4
 8006866:	4618      	mov	r0, r3
 8006868:	f7fe ff60 	bl	800572c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006870:	2b00      	cmp	r3, #0
 8006872:	d004      	beq.n	800687e <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	3318      	adds	r3, #24
 8006878:	4618      	mov	r0, r3
 800687a:	f7fe ff57 	bl	800572c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006882:	2201      	movs	r2, #1
 8006884:	409a      	lsls	r2, r3
 8006886:	4b24      	ldr	r3, [pc, #144]	@ (8006918 <xTaskIncrementTick+0x160>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4313      	orrs	r3, r2
 800688c:	4a22      	ldr	r2, [pc, #136]	@ (8006918 <xTaskIncrementTick+0x160>)
 800688e:	6013      	str	r3, [r2, #0]
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006894:	4613      	mov	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	4413      	add	r3, r2
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4a1f      	ldr	r2, [pc, #124]	@ (800691c <xTaskIncrementTick+0x164>)
 800689e:	441a      	add	r2, r3
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	3304      	adds	r3, #4
 80068a4:	4619      	mov	r1, r3
 80068a6:	4610      	mov	r0, r2
 80068a8:	f7fe fee3 	bl	8005672 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006920 <xTaskIncrementTick+0x168>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b6:	429a      	cmp	r2, r3
 80068b8:	d3b9      	bcc.n	800682e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 80068ba:	2301      	movs	r3, #1
 80068bc:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068be:	e7b6      	b.n	800682e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068c0:	4b17      	ldr	r3, [pc, #92]	@ (8006920 <xTaskIncrementTick+0x168>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c6:	4915      	ldr	r1, [pc, #84]	@ (800691c <xTaskIncrementTick+0x164>)
 80068c8:	4613      	mov	r3, r2
 80068ca:	009b      	lsls	r3, r3, #2
 80068cc:	4413      	add	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	440b      	add	r3, r1
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d901      	bls.n	80068dc <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 80068d8:	2301      	movs	r3, #1
 80068da:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80068dc:	4b11      	ldr	r3, [pc, #68]	@ (8006924 <xTaskIncrementTick+0x16c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d007      	beq.n	80068f4 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 80068e4:	2301      	movs	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	e004      	b.n	80068f4 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80068ea:	4b0f      	ldr	r3, [pc, #60]	@ (8006928 <xTaskIncrementTick+0x170>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	3301      	adds	r3, #1
 80068f0:	4a0d      	ldr	r2, [pc, #52]	@ (8006928 <xTaskIncrementTick+0x170>)
 80068f2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80068f4:	697b      	ldr	r3, [r7, #20]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	20000380 	.word	0x20000380
 8006904:	2000035c 	.word	0x2000035c
 8006908:	20000310 	.word	0x20000310
 800690c:	20000314 	.word	0x20000314
 8006910:	20000370 	.word	0x20000370
 8006914:	20000378 	.word	0x20000378
 8006918:	20000360 	.word	0x20000360
 800691c:	20000284 	.word	0x20000284
 8006920:	20000280 	.word	0x20000280
 8006924:	2000036c 	.word	0x2000036c
 8006928:	20000368 	.word	0x20000368

0800692c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800692c:	b480      	push	{r7}
 800692e:	b087      	sub	sp, #28
 8006930:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006932:	4b27      	ldr	r3, [pc, #156]	@ (80069d0 <vTaskSwitchContext+0xa4>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d003      	beq.n	8006942 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800693a:	4b26      	ldr	r3, [pc, #152]	@ (80069d4 <vTaskSwitchContext+0xa8>)
 800693c:	2201      	movs	r2, #1
 800693e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006940:	e040      	b.n	80069c4 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8006942:	4b24      	ldr	r3, [pc, #144]	@ (80069d4 <vTaskSwitchContext+0xa8>)
 8006944:	2200      	movs	r2, #0
 8006946:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006948:	4b23      	ldr	r3, [pc, #140]	@ (80069d8 <vTaskSwitchContext+0xac>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	fab3 f383 	clz	r3, r3
 8006954:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8006956:	7afb      	ldrb	r3, [r7, #11]
 8006958:	f1c3 031f 	rsb	r3, r3, #31
 800695c:	617b      	str	r3, [r7, #20]
 800695e:	491f      	ldr	r1, [pc, #124]	@ (80069dc <vTaskSwitchContext+0xb0>)
 8006960:	697a      	ldr	r2, [r7, #20]
 8006962:	4613      	mov	r3, r2
 8006964:	009b      	lsls	r3, r3, #2
 8006966:	4413      	add	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	440b      	add	r3, r1
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d10b      	bne.n	800698a <vTaskSwitchContext+0x5e>
        __asm volatile
 8006972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	607b      	str	r3, [r7, #4]
    }
 8006984:	bf00      	nop
 8006986:	bf00      	nop
 8006988:	e7fd      	b.n	8006986 <vTaskSwitchContext+0x5a>
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4613      	mov	r3, r2
 800698e:	009b      	lsls	r3, r3, #2
 8006990:	4413      	add	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4a11      	ldr	r2, [pc, #68]	@ (80069dc <vTaskSwitchContext+0xb0>)
 8006996:	4413      	add	r3, r2
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	605a      	str	r2, [r3, #4]
 80069a4:	693b      	ldr	r3, [r7, #16]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	3308      	adds	r3, #8
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d104      	bne.n	80069ba <vTaskSwitchContext+0x8e>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	605a      	str	r2, [r3, #4]
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	4a07      	ldr	r2, [pc, #28]	@ (80069e0 <vTaskSwitchContext+0xb4>)
 80069c2:	6013      	str	r3, [r2, #0]
}
 80069c4:	bf00      	nop
 80069c6:	371c      	adds	r7, #28
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	20000380 	.word	0x20000380
 80069d4:	2000036c 	.word	0x2000036c
 80069d8:	20000360 	.word	0x20000360
 80069dc:	20000284 	.word	0x20000284
 80069e0:	20000280 	.word	0x20000280

080069e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d10b      	bne.n	8006a0c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80069f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069f8:	f383 8811 	msr	BASEPRI, r3
 80069fc:	f3bf 8f6f 	isb	sy
 8006a00:	f3bf 8f4f 	dsb	sy
 8006a04:	60fb      	str	r3, [r7, #12]
    }
 8006a06:	bf00      	nop
 8006a08:	bf00      	nop
 8006a0a:	e7fd      	b.n	8006a08 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a0c:	4b07      	ldr	r3, [pc, #28]	@ (8006a2c <vTaskPlaceOnEventList+0x48>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	3318      	adds	r3, #24
 8006a12:	4619      	mov	r1, r3
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7fe fe50 	bl	80056ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a1a:	2101      	movs	r1, #1
 8006a1c:	6838      	ldr	r0, [r7, #0]
 8006a1e:	f000 fcd7 	bl	80073d0 <prvAddCurrentTaskToDelayedList>
}
 8006a22:	bf00      	nop
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}
 8006a2a:	bf00      	nop
 8006a2c:	20000280 	.word	0x20000280

08006a30 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d10b      	bne.n	8006a5a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	617b      	str	r3, [r7, #20]
    }
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop
 8006a58:	e7fd      	b.n	8006a56 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006a84 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3318      	adds	r3, #24
 8006a60:	4619      	mov	r1, r3
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7fe fe05 	bl	8005672 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d002      	beq.n	8006a74 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8006a6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006a72:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	68b8      	ldr	r0, [r7, #8]
 8006a78:	f000 fcaa 	bl	80073d0 <prvAddCurrentTaskToDelayedList>
    }
 8006a7c:	bf00      	nop
 8006a7e:	3718      	adds	r7, #24
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000280 	.word	0x20000280

08006a88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d10b      	bne.n	8006ab6 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60fb      	str	r3, [r7, #12]
    }
 8006ab0:	bf00      	nop
 8006ab2:	bf00      	nop
 8006ab4:	e7fd      	b.n	8006ab2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	3318      	adds	r3, #24
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7fe fe36 	bl	800572c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8006b38 <xTaskRemoveFromEventList+0xb0>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d11c      	bne.n	8006b02 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	3304      	adds	r3, #4
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fe fe2d 	bl	800572c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	409a      	lsls	r2, r3
 8006ada:	4b18      	ldr	r3, [pc, #96]	@ (8006b3c <xTaskRemoveFromEventList+0xb4>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	4a16      	ldr	r2, [pc, #88]	@ (8006b3c <xTaskRemoveFromEventList+0xb4>)
 8006ae2:	6013      	str	r3, [r2, #0]
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	4a13      	ldr	r2, [pc, #76]	@ (8006b40 <xTaskRemoveFromEventList+0xb8>)
 8006af2:	441a      	add	r2, r3
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	3304      	adds	r3, #4
 8006af8:	4619      	mov	r1, r3
 8006afa:	4610      	mov	r0, r2
 8006afc:	f7fe fdb9 	bl	8005672 <vListInsertEnd>
 8006b00:	e005      	b.n	8006b0e <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	3318      	adds	r3, #24
 8006b06:	4619      	mov	r1, r3
 8006b08:	480e      	ldr	r0, [pc, #56]	@ (8006b44 <xTaskRemoveFromEventList+0xbc>)
 8006b0a:	f7fe fdb2 	bl	8005672 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b0e:	693b      	ldr	r3, [r7, #16]
 8006b10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <xTaskRemoveFromEventList+0xc0>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b18:	429a      	cmp	r2, r3
 8006b1a:	d905      	bls.n	8006b28 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006b20:	4b0a      	ldr	r3, [pc, #40]	@ (8006b4c <xTaskRemoveFromEventList+0xc4>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	e001      	b.n	8006b2c <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006b2c:	697b      	ldr	r3, [r7, #20]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3718      	adds	r7, #24
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000380 	.word	0x20000380
 8006b3c:	20000360 	.word	0x20000360
 8006b40:	20000284 	.word	0x20000284
 8006b44:	20000318 	.word	0x20000318
 8006b48:	20000280 	.word	0x20000280
 8006b4c:	2000036c 	.word	0x2000036c

08006b50 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b50:	b480      	push	{r7}
 8006b52:	b083      	sub	sp, #12
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b58:	4b06      	ldr	r3, [pc, #24]	@ (8006b74 <vTaskInternalSetTimeOutState+0x24>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006b60:	4b05      	ldr	r3, [pc, #20]	@ (8006b78 <vTaskInternalSetTimeOutState+0x28>)
 8006b62:	681a      	ldr	r2, [r3, #0]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	605a      	str	r2, [r3, #4]
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr
 8006b74:	20000370 	.word	0x20000370
 8006b78:	2000035c 	.word	0x2000035c

08006b7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b088      	sub	sp, #32
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10b      	bne.n	8006ba4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	613b      	str	r3, [r7, #16]
    }
 8006b9e:	bf00      	nop
 8006ba0:	bf00      	nop
 8006ba2:	e7fd      	b.n	8006ba0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	60fb      	str	r3, [r7, #12]
    }
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	e7fd      	b.n	8006bbe <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8006bc2:	f001 f93b 	bl	8007e3c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8006c44 <xTaskCheckForTimeOut+0xc8>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	1ad3      	subs	r3, r2, r3
 8006bd4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bde:	d102      	bne.n	8006be6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006be0:	2300      	movs	r3, #0
 8006be2:	61fb      	str	r3, [r7, #28]
 8006be4:	e026      	b.n	8006c34 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	4b17      	ldr	r3, [pc, #92]	@ (8006c48 <xTaskCheckForTimeOut+0xcc>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d00a      	beq.n	8006c08 <xTaskCheckForTimeOut+0x8c>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d305      	bcc.n	8006c08 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	2200      	movs	r2, #0
 8006c04:	601a      	str	r2, [r3, #0]
 8006c06:	e015      	b.n	8006c34 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	697a      	ldr	r2, [r7, #20]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d20b      	bcs.n	8006c2a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	1ad2      	subs	r2, r2, r3
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f7ff ff96 	bl	8006b50 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006c24:	2300      	movs	r3, #0
 8006c26:	61fb      	str	r3, [r7, #28]
 8006c28:	e004      	b.n	8006c34 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006c30:	2301      	movs	r3, #1
 8006c32:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006c34:	f001 f934 	bl	8007ea0 <vPortExitCritical>

    return xReturn;
 8006c38:	69fb      	ldr	r3, [r7, #28]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}
 8006c42:	bf00      	nop
 8006c44:	2000035c 	.word	0x2000035c
 8006c48:	20000370 	.word	0x20000370

08006c4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006c50:	4b03      	ldr	r3, [pc, #12]	@ (8006c60 <vTaskMissedYield+0x14>)
 8006c52:	2201      	movs	r2, #1
 8006c54:	601a      	str	r2, [r3, #0]
}
 8006c56:	bf00      	nop
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	2000036c 	.word	0x2000036c

08006c64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b082      	sub	sp, #8
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006c6c:	f000 f852 	bl	8006d14 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006c70:	4b06      	ldr	r3, [pc, #24]	@ (8006c8c <prvIdleTask+0x28>)
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d9f9      	bls.n	8006c6c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8006c78:	4b05      	ldr	r3, [pc, #20]	@ (8006c90 <prvIdleTask+0x2c>)
 8006c7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	f3bf 8f4f 	dsb	sy
 8006c84:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006c88:	e7f0      	b.n	8006c6c <prvIdleTask+0x8>
 8006c8a:	bf00      	nop
 8006c8c:	20000284 	.word	0x20000284
 8006c90:	e000ed04 	.word	0xe000ed04

08006c94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	607b      	str	r3, [r7, #4]
 8006c9e:	e00c      	b.n	8006cba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006ca0:	687a      	ldr	r2, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	4a12      	ldr	r2, [pc, #72]	@ (8006cf4 <prvInitialiseTaskLists+0x60>)
 8006cac:	4413      	add	r3, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fe fcb2 	bl	8005618 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	607b      	str	r3, [r7, #4]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b04      	cmp	r3, #4
 8006cbe:	d9ef      	bls.n	8006ca0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006cc0:	480d      	ldr	r0, [pc, #52]	@ (8006cf8 <prvInitialiseTaskLists+0x64>)
 8006cc2:	f7fe fca9 	bl	8005618 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006cc6:	480d      	ldr	r0, [pc, #52]	@ (8006cfc <prvInitialiseTaskLists+0x68>)
 8006cc8:	f7fe fca6 	bl	8005618 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006ccc:	480c      	ldr	r0, [pc, #48]	@ (8006d00 <prvInitialiseTaskLists+0x6c>)
 8006cce:	f7fe fca3 	bl	8005618 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8006cd2:	480c      	ldr	r0, [pc, #48]	@ (8006d04 <prvInitialiseTaskLists+0x70>)
 8006cd4:	f7fe fca0 	bl	8005618 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006cd8:	480b      	ldr	r0, [pc, #44]	@ (8006d08 <prvInitialiseTaskLists+0x74>)
 8006cda:	f7fe fc9d 	bl	8005618 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006cde:	4b0b      	ldr	r3, [pc, #44]	@ (8006d0c <prvInitialiseTaskLists+0x78>)
 8006ce0:	4a05      	ldr	r2, [pc, #20]	@ (8006cf8 <prvInitialiseTaskLists+0x64>)
 8006ce2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8006d10 <prvInitialiseTaskLists+0x7c>)
 8006ce6:	4a05      	ldr	r2, [pc, #20]	@ (8006cfc <prvInitialiseTaskLists+0x68>)
 8006ce8:	601a      	str	r2, [r3, #0]
}
 8006cea:	bf00      	nop
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000284 	.word	0x20000284
 8006cf8:	200002e8 	.word	0x200002e8
 8006cfc:	200002fc 	.word	0x200002fc
 8006d00:	20000318 	.word	0x20000318
 8006d04:	2000032c 	.word	0x2000032c
 8006d08:	20000344 	.word	0x20000344
 8006d0c:	20000310 	.word	0x20000310
 8006d10:	20000314 	.word	0x20000314

08006d14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d1a:	e019      	b.n	8006d50 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006d1c:	f001 f88e 	bl	8007e3c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d20:	4b10      	ldr	r3, [pc, #64]	@ (8006d64 <prvCheckTasksWaitingTermination+0x50>)
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	3304      	adds	r3, #4
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fcfd 	bl	800572c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8006d32:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <prvCheckTasksWaitingTermination+0x54>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	4a0b      	ldr	r2, [pc, #44]	@ (8006d68 <prvCheckTasksWaitingTermination+0x54>)
 8006d3a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	3b01      	subs	r3, #1
 8006d42:	4a0a      	ldr	r2, [pc, #40]	@ (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d44:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006d46:	f001 f8ab 	bl	8007ea0 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f000 f810 	bl	8006d70 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d50:	4b06      	ldr	r3, [pc, #24]	@ (8006d6c <prvCheckTasksWaitingTermination+0x58>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e1      	bne.n	8006d1c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	2000032c 	.word	0x2000032c
 8006d68:	20000358 	.word	0x20000358
 8006d6c:	20000340 	.word	0x20000340

08006d70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f001 fa69 	bl	8008254 <vPortFree>
                vPortFree( pxTCB );
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f001 fa66 	bl	8008254 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006d88:	bf00      	nop
 8006d8a:	3708      	adds	r7, #8
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006d90:	b480      	push	{r7}
 8006d92:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d94:	4b0a      	ldr	r3, [pc, #40]	@ (8006dc0 <prvResetNextTaskUnblockTime+0x30>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d104      	bne.n	8006da8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006d9e:	4b09      	ldr	r3, [pc, #36]	@ (8006dc4 <prvResetNextTaskUnblockTime+0x34>)
 8006da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006da4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006da6:	e005      	b.n	8006db4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006da8:	4b05      	ldr	r3, [pc, #20]	@ (8006dc0 <prvResetNextTaskUnblockTime+0x30>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a04      	ldr	r2, [pc, #16]	@ (8006dc4 <prvResetNextTaskUnblockTime+0x34>)
 8006db2:	6013      	str	r3, [r2, #0]
}
 8006db4:	bf00      	nop
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	20000310 	.word	0x20000310
 8006dc4:	20000378 	.word	0x20000378

08006dc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8006dce:	4b0b      	ldr	r3, [pc, #44]	@ (8006dfc <xTaskGetSchedulerState+0x34>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d102      	bne.n	8006ddc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	607b      	str	r3, [r7, #4]
 8006dda:	e008      	b.n	8006dee <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ddc:	4b08      	ldr	r3, [pc, #32]	@ (8006e00 <xTaskGetSchedulerState+0x38>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d102      	bne.n	8006dea <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006de4:	2302      	movs	r3, #2
 8006de6:	607b      	str	r3, [r7, #4]
 8006de8:	e001      	b.n	8006dee <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006dea:	2300      	movs	r3, #0
 8006dec:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8006dee:	687b      	ldr	r3, [r7, #4]
    }
 8006df0:	4618      	mov	r0, r3
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr
 8006dfc:	20000364 	.word	0x20000364
 8006e00:	20000380 	.word	0x20000380

08006e04 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d065      	beq.n	8006ee6 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006e1a:	4b35      	ldr	r3, [pc, #212]	@ (8006ef0 <xTaskPriorityDisinherit+0xec>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d00b      	beq.n	8006e3c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	60fb      	str	r3, [r7, #12]
    }
 8006e36:	bf00      	nop
 8006e38:	bf00      	nop
 8006e3a:	e7fd      	b.n	8006e38 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006e3c:	693b      	ldr	r3, [r7, #16]
 8006e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10b      	bne.n	8006e5c <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8006e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	60bb      	str	r3, [r7, #8]
    }
 8006e56:	bf00      	nop
 8006e58:	bf00      	nop
 8006e5a:	e7fd      	b.n	8006e58 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e60:	1e5a      	subs	r2, r3, #1
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d039      	beq.n	8006ee6 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d135      	bne.n	8006ee6 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	3304      	adds	r3, #4
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f7fe fc54 	bl	800572c <uxListRemove>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d10a      	bne.n	8006ea0 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e8e:	2201      	movs	r2, #1
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	43da      	mvns	r2, r3
 8006e96:	4b17      	ldr	r3, [pc, #92]	@ (8006ef4 <xTaskPriorityDisinherit+0xf0>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	4a15      	ldr	r2, [pc, #84]	@ (8006ef4 <xTaskPriorityDisinherit+0xf0>)
 8006e9e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eac:	f1c3 0205 	rsb	r2, r3, #5
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb8:	2201      	movs	r2, #1
 8006eba:	409a      	lsls	r2, r3
 8006ebc:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef4 <xTaskPriorityDisinherit+0xf0>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8006ef4 <xTaskPriorityDisinherit+0xf0>)
 8006ec4:	6013      	str	r3, [r2, #0]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	4a09      	ldr	r2, [pc, #36]	@ (8006ef8 <xTaskPriorityDisinherit+0xf4>)
 8006ed4:	441a      	add	r2, r3
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	3304      	adds	r3, #4
 8006eda:	4619      	mov	r1, r3
 8006edc:	4610      	mov	r0, r2
 8006ede:	f7fe fbc8 	bl	8005672 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006ee6:	697b      	ldr	r3, [r7, #20]
    }
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}
 8006ef0:	20000280 	.word	0x20000280
 8006ef4:	20000360 	.word	0x20000360
 8006ef8:	20000284 	.word	0x20000284

08006efc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
 8006f08:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00b      	beq.n	8006f28 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	613b      	str	r3, [r7, #16]
    }
 8006f22:	bf00      	nop
 8006f24:	bf00      	nop
 8006f26:	e7fd      	b.n	8006f24 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006f28:	f000 ff88 	bl	8007e3c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006f2c:	4b31      	ldr	r3, [pc, #196]	@ (8006ff4 <xTaskGenericNotifyWait+0xf8>)
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	4413      	add	r3, r2
 8006f34:	3354      	adds	r3, #84	@ 0x54
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d022      	beq.n	8006f84 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8006f3e:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff4 <xTaskGenericNotifyWait+0xf8>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68fa      	ldr	r2, [r7, #12]
 8006f44:	3214      	adds	r2, #20
 8006f46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	43d2      	mvns	r2, r2
 8006f4e:	4011      	ands	r1, r2
 8006f50:	68fa      	ldr	r2, [r7, #12]
 8006f52:	3214      	adds	r2, #20
 8006f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006f58:	4b26      	ldr	r3, [pc, #152]	@ (8006ff4 <xTaskGenericNotifyWait+0xf8>)
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	3354      	adds	r3, #84	@ 0x54
 8006f62:	2201      	movs	r2, #1
 8006f64:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8006f66:	6a3b      	ldr	r3, [r7, #32]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f6c:	2101      	movs	r1, #1
 8006f6e:	6a38      	ldr	r0, [r7, #32]
 8006f70:	f000 fa2e 	bl	80073d0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8006f74:	4b20      	ldr	r3, [pc, #128]	@ (8006ff8 <xTaskGenericNotifyWait+0xfc>)
 8006f76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f7a:	601a      	str	r2, [r3, #0]
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006f84:	f000 ff8c 	bl	8007ea0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8006f88:	f000 ff58 	bl	8007e3c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8006f92:	4b18      	ldr	r3, [pc, #96]	@ (8006ff4 <xTaskGenericNotifyWait+0xf8>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	3214      	adds	r2, #20
 8006f9a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006fa2:	4b14      	ldr	r3, [pc, #80]	@ (8006ff4 <xTaskGenericNotifyWait+0xf8>)
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	4413      	add	r3, r2
 8006faa:	3354      	adds	r3, #84	@ 0x54
 8006fac:	781b      	ldrb	r3, [r3, #0]
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	2b02      	cmp	r3, #2
 8006fb2:	d002      	beq.n	8006fba <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	617b      	str	r3, [r7, #20]
 8006fb8:	e00e      	b.n	8006fd8 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8006fba:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff4 <xTaskGenericNotifyWait+0xf8>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	3214      	adds	r2, #20
 8006fc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	43d2      	mvns	r2, r2
 8006fca:	4011      	ands	r1, r2
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	3214      	adds	r2, #20
 8006fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006fd4:	2301      	movs	r3, #1
 8006fd6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006fd8:	4b06      	ldr	r3, [pc, #24]	@ (8006ff4 <xTaskGenericNotifyWait+0xf8>)
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	4413      	add	r3, r2
 8006fe0:	3354      	adds	r3, #84	@ 0x54
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006fe6:	f000 ff5b 	bl	8007ea0 <vPortExitCritical>

        return xReturn;
 8006fea:	697b      	ldr	r3, [r7, #20]
    }
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}
 8006ff4:	20000280 	.word	0x20000280
 8006ff8:	e000ed04 	.word	0xe000ed04

08006ffc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b08c      	sub	sp, #48	@ 0x30
 8007000:	af00      	add	r7, sp, #0
 8007002:	60f8      	str	r0, [r7, #12]
 8007004:	60b9      	str	r1, [r7, #8]
 8007006:	607a      	str	r2, [r7, #4]
 8007008:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800700a:	2301      	movs	r3, #1
 800700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00b      	beq.n	800702c <xTaskGenericNotify+0x30>
        __asm volatile
 8007014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007018:	f383 8811 	msr	BASEPRI, r3
 800701c:	f3bf 8f6f 	isb	sy
 8007020:	f3bf 8f4f 	dsb	sy
 8007024:	623b      	str	r3, [r7, #32]
    }
 8007026:	bf00      	nop
 8007028:	bf00      	nop
 800702a:	e7fd      	b.n	8007028 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10b      	bne.n	800704a <xTaskGenericNotify+0x4e>
        __asm volatile
 8007032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007036:	f383 8811 	msr	BASEPRI, r3
 800703a:	f3bf 8f6f 	isb	sy
 800703e:	f3bf 8f4f 	dsb	sy
 8007042:	61fb      	str	r3, [r7, #28]
    }
 8007044:	bf00      	nop
 8007046:	bf00      	nop
 8007048:	e7fd      	b.n	8007046 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 800704e:	f000 fef5 	bl	8007e3c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8007052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007054:	2b00      	cmp	r3, #0
 8007056:	d006      	beq.n	8007066 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8007058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	3214      	adds	r2, #20
 800705e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007064:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8007066:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	4413      	add	r3, r2
 800706c:	3354      	adds	r3, #84	@ 0x54
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007074:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	4413      	add	r3, r2
 800707a:	3354      	adds	r3, #84	@ 0x54
 800707c:	2202      	movs	r2, #2
 800707e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	2b04      	cmp	r3, #4
 8007084:	d83b      	bhi.n	80070fe <xTaskGenericNotify+0x102>
 8007086:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <xTaskGenericNotify+0x90>)
 8007088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708c:	0800711f 	.word	0x0800711f
 8007090:	080070a1 	.word	0x080070a1
 8007094:	080070bd 	.word	0x080070bd
 8007098:	080070d5 	.word	0x080070d5
 800709c:	080070e3 	.word	0x080070e3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80070a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070a2:	68ba      	ldr	r2, [r7, #8]
 80070a4:	3214      	adds	r2, #20
 80070a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	ea42 0103 	orr.w	r1, r2, r3
 80070b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	3214      	adds	r2, #20
 80070b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80070ba:	e033      	b.n	8007124 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80070bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	3214      	adds	r2, #20
 80070c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c6:	1c59      	adds	r1, r3, #1
 80070c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ca:	68ba      	ldr	r2, [r7, #8]
 80070cc:	3214      	adds	r2, #20
 80070ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80070d2:	e027      	b.n	8007124 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80070d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d6:	68ba      	ldr	r2, [r7, #8]
 80070d8:	3214      	adds	r2, #20
 80070da:	6879      	ldr	r1, [r7, #4]
 80070dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80070e0:	e020      	b.n	8007124 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80070e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070e6:	2b02      	cmp	r3, #2
 80070e8:	d006      	beq.n	80070f8 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	68ba      	ldr	r2, [r7, #8]
 80070ee:	3214      	adds	r2, #20
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80070f6:	e015      	b.n	8007124 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 80070fc:	e012      	b.n	8007124 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80070fe:	4b2c      	ldr	r3, [pc, #176]	@ (80071b0 <xTaskGenericNotify+0x1b4>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00d      	beq.n	8007122 <xTaskGenericNotify+0x126>
        __asm volatile
 8007106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710a:	f383 8811 	msr	BASEPRI, r3
 800710e:	f3bf 8f6f 	isb	sy
 8007112:	f3bf 8f4f 	dsb	sy
 8007116:	61bb      	str	r3, [r7, #24]
    }
 8007118:	bf00      	nop
 800711a:	bf00      	nop
 800711c:	e7fd      	b.n	800711a <xTaskGenericNotify+0x11e>
                    break;
 800711e:	bf00      	nop
 8007120:	e000      	b.n	8007124 <xTaskGenericNotify+0x128>

                    break;
 8007122:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007124:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007128:	2b01      	cmp	r3, #1
 800712a:	d13a      	bne.n	80071a2 <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800712c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800712e:	3304      	adds	r3, #4
 8007130:	4618      	mov	r0, r3
 8007132:	f7fe fafb 	bl	800572c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8007136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007138:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713a:	2201      	movs	r2, #1
 800713c:	409a      	lsls	r2, r3
 800713e:	4b1d      	ldr	r3, [pc, #116]	@ (80071b4 <xTaskGenericNotify+0x1b8>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4313      	orrs	r3, r2
 8007144:	4a1b      	ldr	r2, [pc, #108]	@ (80071b4 <xTaskGenericNotify+0x1b8>)
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800714c:	4613      	mov	r3, r2
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4a18      	ldr	r2, [pc, #96]	@ (80071b8 <xTaskGenericNotify+0x1bc>)
 8007156:	441a      	add	r2, r3
 8007158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715a:	3304      	adds	r3, #4
 800715c:	4619      	mov	r1, r3
 800715e:	4610      	mov	r0, r2
 8007160:	f7fe fa87 	bl	8005672 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00b      	beq.n	8007184 <xTaskGenericNotify+0x188>
        __asm volatile
 800716c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007170:	f383 8811 	msr	BASEPRI, r3
 8007174:	f3bf 8f6f 	isb	sy
 8007178:	f3bf 8f4f 	dsb	sy
 800717c:	617b      	str	r3, [r7, #20]
    }
 800717e:	bf00      	nop
 8007180:	bf00      	nop
 8007182:	e7fd      	b.n	8007180 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007188:	4b0c      	ldr	r3, [pc, #48]	@ (80071bc <xTaskGenericNotify+0x1c0>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800718e:	429a      	cmp	r2, r3
 8007190:	d907      	bls.n	80071a2 <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8007192:	4b0b      	ldr	r3, [pc, #44]	@ (80071c0 <xTaskGenericNotify+0x1c4>)
 8007194:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007198:	601a      	str	r2, [r3, #0]
 800719a:	f3bf 8f4f 	dsb	sy
 800719e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80071a2:	f000 fe7d 	bl	8007ea0 <vPortExitCritical>

        return xReturn;
 80071a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 80071a8:	4618      	mov	r0, r3
 80071aa:	3730      	adds	r7, #48	@ 0x30
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}
 80071b0:	2000035c 	.word	0x2000035c
 80071b4:	20000360 	.word	0x20000360
 80071b8:	20000284 	.word	0x20000284
 80071bc:	20000280 	.word	0x20000280
 80071c0:	e000ed04 	.word	0xe000ed04

080071c4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b090      	sub	sp, #64	@ 0x40
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80071d2:	2301      	movs	r3, #1
 80071d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10b      	bne.n	80071f4 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 80071ee:	bf00      	nop
 80071f0:	bf00      	nop
 80071f2:	e7fd      	b.n	80071f0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00b      	beq.n	8007212 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	e7fd      	b.n	800720e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007212:	f000 fefb 	bl	800800c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 800721a:	f3ef 8211 	mrs	r2, BASEPRI
 800721e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	627a      	str	r2, [r7, #36]	@ 0x24
 8007230:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8007232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007234:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8007236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007238:	2b00      	cmp	r3, #0
 800723a:	d006      	beq.n	800724a <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800723c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723e:	68ba      	ldr	r2, [r7, #8]
 8007240:	3214      	adds	r2, #20
 8007242:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007246:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007248:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800724a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	4413      	add	r3, r2
 8007250:	3354      	adds	r3, #84	@ 0x54
 8007252:	781b      	ldrb	r3, [r3, #0]
 8007254:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007258:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	4413      	add	r3, r2
 800725e:	3354      	adds	r3, #84	@ 0x54
 8007260:	2202      	movs	r2, #2
 8007262:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	2b04      	cmp	r3, #4
 8007268:	d83b      	bhi.n	80072e2 <xTaskGenericNotifyFromISR+0x11e>
 800726a:	a201      	add	r2, pc, #4	@ (adr r2, 8007270 <xTaskGenericNotifyFromISR+0xac>)
 800726c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007270:	08007303 	.word	0x08007303
 8007274:	08007285 	.word	0x08007285
 8007278:	080072a1 	.word	0x080072a1
 800727c:	080072b9 	.word	0x080072b9
 8007280:	080072c7 	.word	0x080072c7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	3214      	adds	r2, #20
 800728a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	ea42 0103 	orr.w	r1, r2, r3
 8007294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	3214      	adds	r2, #20
 800729a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800729e:	e033      	b.n	8007308 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80072a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	3214      	adds	r2, #20
 80072a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072aa:	1c59      	adds	r1, r3, #1
 80072ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ae:	68ba      	ldr	r2, [r7, #8]
 80072b0:	3214      	adds	r2, #20
 80072b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80072b6:	e027      	b.n	8007308 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80072b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072ba:	68ba      	ldr	r2, [r7, #8]
 80072bc:	3214      	adds	r2, #20
 80072be:	6879      	ldr	r1, [r7, #4]
 80072c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80072c4:	e020      	b.n	8007308 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80072c6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d006      	beq.n	80072dc <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80072ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072d0:	68ba      	ldr	r2, [r7, #8]
 80072d2:	3214      	adds	r2, #20
 80072d4:	6879      	ldr	r1, [r7, #4]
 80072d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80072da:	e015      	b.n	8007308 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80072dc:	2300      	movs	r3, #0
 80072de:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 80072e0:	e012      	b.n	8007308 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80072e2:	4b34      	ldr	r3, [pc, #208]	@ (80073b4 <xTaskGenericNotifyFromISR+0x1f0>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00d      	beq.n	8007306 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 80072ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ee:	f383 8811 	msr	BASEPRI, r3
 80072f2:	f3bf 8f6f 	isb	sy
 80072f6:	f3bf 8f4f 	dsb	sy
 80072fa:	61fb      	str	r3, [r7, #28]
    }
 80072fc:	bf00      	nop
 80072fe:	bf00      	nop
 8007300:	e7fd      	b.n	80072fe <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8007302:	bf00      	nop
 8007304:	e000      	b.n	8007308 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8007306:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007308:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800730c:	2b01      	cmp	r3, #1
 800730e:	d146      	bne.n	800739e <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 8007318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800731c:	f383 8811 	msr	BASEPRI, r3
 8007320:	f3bf 8f6f 	isb	sy
 8007324:	f3bf 8f4f 	dsb	sy
 8007328:	61bb      	str	r3, [r7, #24]
    }
 800732a:	bf00      	nop
 800732c:	bf00      	nop
 800732e:	e7fd      	b.n	800732c <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007330:	4b21      	ldr	r3, [pc, #132]	@ (80073b8 <xTaskGenericNotifyFromISR+0x1f4>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d11c      	bne.n	8007372 <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800733a:	3304      	adds	r3, #4
 800733c:	4618      	mov	r0, r3
 800733e:	f7fe f9f5 	bl	800572c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8007342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007346:	2201      	movs	r2, #1
 8007348:	409a      	lsls	r2, r3
 800734a:	4b1c      	ldr	r3, [pc, #112]	@ (80073bc <xTaskGenericNotifyFromISR+0x1f8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4313      	orrs	r3, r2
 8007350:	4a1a      	ldr	r2, [pc, #104]	@ (80073bc <xTaskGenericNotifyFromISR+0x1f8>)
 8007352:	6013      	str	r3, [r2, #0]
 8007354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007356:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007358:	4613      	mov	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	4413      	add	r3, r2
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	4a17      	ldr	r2, [pc, #92]	@ (80073c0 <xTaskGenericNotifyFromISR+0x1fc>)
 8007362:	441a      	add	r2, r3
 8007364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007366:	3304      	adds	r3, #4
 8007368:	4619      	mov	r1, r3
 800736a:	4610      	mov	r0, r2
 800736c:	f7fe f981 	bl	8005672 <vListInsertEnd>
 8007370:	e005      	b.n	800737e <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007374:	3318      	adds	r3, #24
 8007376:	4619      	mov	r1, r3
 8007378:	4812      	ldr	r0, [pc, #72]	@ (80073c4 <xTaskGenericNotifyFromISR+0x200>)
 800737a:	f7fe f97a 	bl	8005672 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800737e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007382:	4b11      	ldr	r3, [pc, #68]	@ (80073c8 <xTaskGenericNotifyFromISR+0x204>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007388:	429a      	cmp	r2, r3
 800738a:	d908      	bls.n	800739e <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800738c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800738e:	2b00      	cmp	r3, #0
 8007390:	d002      	beq.n	8007398 <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8007392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007394:	2201      	movs	r2, #1
 8007396:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8007398:	4b0c      	ldr	r3, [pc, #48]	@ (80073cc <xTaskGenericNotifyFromISR+0x208>)
 800739a:	2201      	movs	r2, #1
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073a0:	617b      	str	r3, [r7, #20]
        __asm volatile
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	f383 8811 	msr	BASEPRI, r3
    }
 80073a8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 80073aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 80073ac:	4618      	mov	r0, r3
 80073ae:	3740      	adds	r7, #64	@ 0x40
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	2000035c 	.word	0x2000035c
 80073b8:	20000380 	.word	0x20000380
 80073bc:	20000360 	.word	0x20000360
 80073c0:	20000284 	.word	0x20000284
 80073c4:	20000318 	.word	0x20000318
 80073c8:	20000280 	.word	0x20000280
 80073cc:	2000036c 	.word	0x2000036c

080073d0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b084      	sub	sp, #16
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80073da:	4b29      	ldr	r3, [pc, #164]	@ (8007480 <prvAddCurrentTaskToDelayedList+0xb0>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073e0:	4b28      	ldr	r3, [pc, #160]	@ (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	3304      	adds	r3, #4
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fe f9a0 	bl	800572c <uxListRemove>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d10b      	bne.n	800740a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80073f2:	4b24      	ldr	r3, [pc, #144]	@ (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073f8:	2201      	movs	r2, #1
 80073fa:	fa02 f303 	lsl.w	r3, r2, r3
 80073fe:	43da      	mvns	r2, r3
 8007400:	4b21      	ldr	r3, [pc, #132]	@ (8007488 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4013      	ands	r3, r2
 8007406:	4a20      	ldr	r2, [pc, #128]	@ (8007488 <prvAddCurrentTaskToDelayedList+0xb8>)
 8007408:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007410:	d10a      	bne.n	8007428 <prvAddCurrentTaskToDelayedList+0x58>
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d007      	beq.n	8007428 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007418:	4b1a      	ldr	r3, [pc, #104]	@ (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3304      	adds	r3, #4
 800741e:	4619      	mov	r1, r3
 8007420:	481a      	ldr	r0, [pc, #104]	@ (800748c <prvAddCurrentTaskToDelayedList+0xbc>)
 8007422:	f7fe f926 	bl	8005672 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8007426:	e026      	b.n	8007476 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007430:	4b14      	ldr	r3, [pc, #80]	@ (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	68ba      	ldr	r2, [r7, #8]
 8007436:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8007438:	68ba      	ldr	r2, [r7, #8]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	429a      	cmp	r2, r3
 800743e:	d209      	bcs.n	8007454 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007440:	4b13      	ldr	r3, [pc, #76]	@ (8007490 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	4b0f      	ldr	r3, [pc, #60]	@ (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3304      	adds	r3, #4
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f7fe f934 	bl	80056ba <vListInsert>
}
 8007452:	e010      	b.n	8007476 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007454:	4b0f      	ldr	r3, [pc, #60]	@ (8007494 <prvAddCurrentTaskToDelayedList+0xc4>)
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	4b0a      	ldr	r3, [pc, #40]	@ (8007484 <prvAddCurrentTaskToDelayedList+0xb4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	3304      	adds	r3, #4
 800745e:	4619      	mov	r1, r3
 8007460:	4610      	mov	r0, r2
 8007462:	f7fe f92a 	bl	80056ba <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8007466:	4b0c      	ldr	r3, [pc, #48]	@ (8007498 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	68ba      	ldr	r2, [r7, #8]
 800746c:	429a      	cmp	r2, r3
 800746e:	d202      	bcs.n	8007476 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8007470:	4a09      	ldr	r2, [pc, #36]	@ (8007498 <prvAddCurrentTaskToDelayedList+0xc8>)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	6013      	str	r3, [r2, #0]
}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	2000035c 	.word	0x2000035c
 8007484:	20000280 	.word	0x20000280
 8007488:	20000360 	.word	0x20000360
 800748c:	20000344 	.word	0x20000344
 8007490:	20000314 	.word	0x20000314
 8007494:	20000310 	.word	0x20000310
 8007498:	20000378 	.word	0x20000378

0800749c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80074a6:	f000 fb3f 	bl	8007b28 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80074aa:	4b12      	ldr	r3, [pc, #72]	@ (80074f4 <xTimerCreateTimerTask+0x58>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00b      	beq.n	80074ca <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80074b2:	4b11      	ldr	r3, [pc, #68]	@ (80074f8 <xTimerCreateTimerTask+0x5c>)
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	2302      	movs	r3, #2
 80074b8:	9300      	str	r3, [sp, #0]
 80074ba:	2300      	movs	r3, #0
 80074bc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80074c0:	490e      	ldr	r1, [pc, #56]	@ (80074fc <xTimerCreateTimerTask+0x60>)
 80074c2:	480f      	ldr	r0, [pc, #60]	@ (8007500 <xTimerCreateTimerTask+0x64>)
 80074c4:	f7fe ff24 	bl	8006310 <xTaskCreate>
 80074c8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10b      	bne.n	80074e8 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	603b      	str	r3, [r7, #0]
    }
 80074e2:	bf00      	nop
 80074e4:	bf00      	nop
 80074e6:	e7fd      	b.n	80074e4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80074e8:	687b      	ldr	r3, [r7, #4]
    }
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}
 80074f2:	bf00      	nop
 80074f4:	200003b4 	.word	0x200003b4
 80074f8:	200003b8 	.word	0x200003b8
 80074fc:	080095d4 	.word	0x080095d4
 8007500:	080076f9 	.word	0x080076f9

08007504 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007504:	b580      	push	{r7, lr}
 8007506:	b088      	sub	sp, #32
 8007508:	af02      	add	r7, sp, #8
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007512:	202c      	movs	r0, #44	@ 0x2c
 8007514:	f000 fdbc 	bl	8008090 <pvPortMalloc>
 8007518:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00d      	beq.n	800753c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	2200      	movs	r2, #0
 8007524:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	9301      	str	r3, [sp, #4]
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	9300      	str	r3, [sp, #0]
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	687a      	ldr	r2, [r7, #4]
 8007534:	68b9      	ldr	r1, [r7, #8]
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f000 f805 	bl	8007546 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800753c:	697b      	ldr	r3, [r7, #20]
        }
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8007546:	b580      	push	{r7, lr}
 8007548:	b086      	sub	sp, #24
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	607a      	str	r2, [r7, #4]
 8007552:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d10b      	bne.n	8007572 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 800755a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755e:	f383 8811 	msr	BASEPRI, r3
 8007562:	f3bf 8f6f 	isb	sy
 8007566:	f3bf 8f4f 	dsb	sy
 800756a:	617b      	str	r3, [r7, #20]
    }
 800756c:	bf00      	nop
 800756e:	bf00      	nop
 8007570:	e7fd      	b.n	800756e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01e      	beq.n	80075b6 <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8007578:	f000 fad6 	bl	8007b28 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	68ba      	ldr	r2, [r7, #8]
 8007586:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	6a3a      	ldr	r2, [r7, #32]
 8007592:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	3304      	adds	r3, #4
 8007598:	4618      	mov	r0, r3
 800759a:	f7fe f85d 	bl	8005658 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d008      	beq.n	80075b6 <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80075a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075aa:	f043 0304 	orr.w	r3, r3, #4
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 80075b6:	bf00      	nop
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}
	...

080075c0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08a      	sub	sp, #40	@ 0x28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80075ce:	2300      	movs	r3, #0
 80075d0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d10b      	bne.n	80075f0 <xTimerGenericCommand+0x30>
        __asm volatile
 80075d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075dc:	f383 8811 	msr	BASEPRI, r3
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	f3bf 8f4f 	dsb	sy
 80075e8:	623b      	str	r3, [r7, #32]
    }
 80075ea:	bf00      	nop
 80075ec:	bf00      	nop
 80075ee:	e7fd      	b.n	80075ec <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80075f0:	4b19      	ldr	r3, [pc, #100]	@ (8007658 <xTimerGenericCommand+0x98>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d02a      	beq.n	800764e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b05      	cmp	r3, #5
 8007608:	dc18      	bgt.n	800763c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800760a:	f7ff fbdd 	bl	8006dc8 <xTaskGetSchedulerState>
 800760e:	4603      	mov	r3, r0
 8007610:	2b02      	cmp	r3, #2
 8007612:	d109      	bne.n	8007628 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007614:	4b10      	ldr	r3, [pc, #64]	@ (8007658 <xTimerGenericCommand+0x98>)
 8007616:	6818      	ldr	r0, [r3, #0]
 8007618:	f107 0114 	add.w	r1, r7, #20
 800761c:	2300      	movs	r3, #0
 800761e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007620:	f7fe f99e 	bl	8005960 <xQueueGenericSend>
 8007624:	6278      	str	r0, [r7, #36]	@ 0x24
 8007626:	e012      	b.n	800764e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007628:	4b0b      	ldr	r3, [pc, #44]	@ (8007658 <xTimerGenericCommand+0x98>)
 800762a:	6818      	ldr	r0, [r3, #0]
 800762c:	f107 0114 	add.w	r1, r7, #20
 8007630:	2300      	movs	r3, #0
 8007632:	2200      	movs	r2, #0
 8007634:	f7fe f994 	bl	8005960 <xQueueGenericSend>
 8007638:	6278      	str	r0, [r7, #36]	@ 0x24
 800763a:	e008      	b.n	800764e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800763c:	4b06      	ldr	r3, [pc, #24]	@ (8007658 <xTimerGenericCommand+0x98>)
 800763e:	6818      	ldr	r0, [r3, #0]
 8007640:	f107 0114 	add.w	r1, r7, #20
 8007644:	2300      	movs	r3, #0
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	f7fe fa8c 	bl	8005b64 <xQueueGenericSendFromISR>
 800764c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800764e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007650:	4618      	mov	r0, r3
 8007652:	3728      	adds	r7, #40	@ 0x28
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}
 8007658:	200003b4 	.word	0x200003b4

0800765c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800765c:	b580      	push	{r7, lr}
 800765e:	b088      	sub	sp, #32
 8007660:	af02      	add	r7, sp, #8
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007666:	4b23      	ldr	r3, [pc, #140]	@ (80076f4 <prvProcessExpiredTimer+0x98>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	68db      	ldr	r3, [r3, #12]
 800766c:	68db      	ldr	r3, [r3, #12]
 800766e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	3304      	adds	r3, #4
 8007674:	4618      	mov	r0, r3
 8007676:	f7fe f859 	bl	800572c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d023      	beq.n	80076d0 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	699a      	ldr	r2, [r3, #24]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	18d1      	adds	r1, r2, r3
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	6978      	ldr	r0, [r7, #20]
 8007696:	f000 f8d5 	bl	8007844 <prvInsertTimerInActiveList>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d020      	beq.n	80076e2 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076a0:	2300      	movs	r3, #0
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	2300      	movs	r3, #0
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	2100      	movs	r1, #0
 80076aa:	6978      	ldr	r0, [r7, #20]
 80076ac:	f7ff ff88 	bl	80075c0 <xTimerGenericCommand>
 80076b0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d114      	bne.n	80076e2 <prvProcessExpiredTimer+0x86>
        __asm volatile
 80076b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076bc:	f383 8811 	msr	BASEPRI, r3
 80076c0:	f3bf 8f6f 	isb	sy
 80076c4:	f3bf 8f4f 	dsb	sy
 80076c8:	60fb      	str	r3, [r7, #12]
    }
 80076ca:	bf00      	nop
 80076cc:	bf00      	nop
 80076ce:	e7fd      	b.n	80076cc <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076d6:	f023 0301 	bic.w	r3, r3, #1
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	6a1b      	ldr	r3, [r3, #32]
 80076e6:	6978      	ldr	r0, [r7, #20]
 80076e8:	4798      	blx	r3
    }
 80076ea:	bf00      	nop
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	200003ac 	.word	0x200003ac

080076f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b084      	sub	sp, #16
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007700:	f107 0308 	add.w	r3, r7, #8
 8007704:	4618      	mov	r0, r3
 8007706:	f000 f859 	bl	80077bc <prvGetNextExpireTime>
 800770a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	4619      	mov	r1, r3
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 f805 	bl	8007720 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007716:	f000 f8d7 	bl	80078c8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800771a:	bf00      	nop
 800771c:	e7f0      	b.n	8007700 <prvTimerTask+0x8>
	...

08007720 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800772a:	f7fe ff89 	bl	8006640 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800772e:	f107 0308 	add.w	r3, r7, #8
 8007732:	4618      	mov	r0, r3
 8007734:	f000 f866 	bl	8007804 <prvSampleTimeNow>
 8007738:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d130      	bne.n	80077a2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <prvProcessTimerOrBlockTask+0x3c>
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	429a      	cmp	r2, r3
 800774c:	d806      	bhi.n	800775c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800774e:	f7fe ff85 	bl	800665c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007752:	68f9      	ldr	r1, [r7, #12]
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f7ff ff81 	bl	800765c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800775a:	e024      	b.n	80077a6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007762:	4b13      	ldr	r3, [pc, #76]	@ (80077b0 <prvProcessTimerOrBlockTask+0x90>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d101      	bne.n	8007770 <prvProcessTimerOrBlockTask+0x50>
 800776c:	2301      	movs	r3, #1
 800776e:	e000      	b.n	8007772 <prvProcessTimerOrBlockTask+0x52>
 8007770:	2300      	movs	r3, #0
 8007772:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007774:	4b0f      	ldr	r3, [pc, #60]	@ (80077b4 <prvProcessTimerOrBlockTask+0x94>)
 8007776:	6818      	ldr	r0, [r3, #0]
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	1ad3      	subs	r3, r2, r3
 800777e:	683a      	ldr	r2, [r7, #0]
 8007780:	4619      	mov	r1, r3
 8007782:	f7fe fd91 	bl	80062a8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007786:	f7fe ff69 	bl	800665c <xTaskResumeAll>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d10a      	bne.n	80077a6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8007790:	4b09      	ldr	r3, [pc, #36]	@ (80077b8 <prvProcessTimerOrBlockTask+0x98>)
 8007792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007796:	601a      	str	r2, [r3, #0]
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	f3bf 8f6f 	isb	sy
    }
 80077a0:	e001      	b.n	80077a6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80077a2:	f7fe ff5b 	bl	800665c <xTaskResumeAll>
    }
 80077a6:	bf00      	nop
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200003b0 	.word	0x200003b0
 80077b4:	200003b4 	.word	0x200003b4
 80077b8:	e000ed04 	.word	0xe000ed04

080077bc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80077c4:	4b0e      	ldr	r3, [pc, #56]	@ (8007800 <prvGetNextExpireTime+0x44>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d101      	bne.n	80077d2 <prvGetNextExpireTime+0x16>
 80077ce:	2201      	movs	r2, #1
 80077d0:	e000      	b.n	80077d4 <prvGetNextExpireTime+0x18>
 80077d2:	2200      	movs	r2, #0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d105      	bne.n	80077ec <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077e0:	4b07      	ldr	r3, [pc, #28]	@ (8007800 <prvGetNextExpireTime+0x44>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	68db      	ldr	r3, [r3, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	60fb      	str	r3, [r7, #12]
 80077ea:	e001      	b.n	80077f0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80077f0:	68fb      	ldr	r3, [r7, #12]
    }
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	200003ac 	.word	0x200003ac

08007804 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800780c:	f7fe ffc4 	bl	8006798 <xTaskGetTickCount>
 8007810:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007812:	4b0b      	ldr	r3, [pc, #44]	@ (8007840 <prvSampleTimeNow+0x3c>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	429a      	cmp	r2, r3
 800781a:	d205      	bcs.n	8007828 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800781c:	f000 f91e 	bl	8007a5c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	601a      	str	r2, [r3, #0]
 8007826:	e002      	b.n	800782e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800782e:	4a04      	ldr	r2, [pc, #16]	@ (8007840 <prvSampleTimeNow+0x3c>)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007834:	68fb      	ldr	r3, [r7, #12]
    }
 8007836:	4618      	mov	r0, r3
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}
 800783e:	bf00      	nop
 8007840:	200003bc 	.word	0x200003bc

08007844 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007844:	b580      	push	{r7, lr}
 8007846:	b086      	sub	sp, #24
 8007848:	af00      	add	r7, sp, #0
 800784a:	60f8      	str	r0, [r7, #12]
 800784c:	60b9      	str	r1, [r7, #8]
 800784e:	607a      	str	r2, [r7, #4]
 8007850:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	68ba      	ldr	r2, [r7, #8]
 800785a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	429a      	cmp	r2, r3
 8007868:	d812      	bhi.n	8007890 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800786a:	687a      	ldr	r2, [r7, #4]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	429a      	cmp	r2, r3
 8007876:	d302      	bcc.n	800787e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007878:	2301      	movs	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	e01b      	b.n	80078b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800787e:	4b10      	ldr	r3, [pc, #64]	@ (80078c0 <prvInsertTimerInActiveList+0x7c>)
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3304      	adds	r3, #4
 8007886:	4619      	mov	r1, r3
 8007888:	4610      	mov	r0, r2
 800788a:	f7fd ff16 	bl	80056ba <vListInsert>
 800788e:	e012      	b.n	80078b6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	429a      	cmp	r2, r3
 8007896:	d206      	bcs.n	80078a6 <prvInsertTimerInActiveList+0x62>
 8007898:	68ba      	ldr	r2, [r7, #8]
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d302      	bcc.n	80078a6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80078a0:	2301      	movs	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	e007      	b.n	80078b6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078a6:	4b07      	ldr	r3, [pc, #28]	@ (80078c4 <prvInsertTimerInActiveList+0x80>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	3304      	adds	r3, #4
 80078ae:	4619      	mov	r1, r3
 80078b0:	4610      	mov	r0, r2
 80078b2:	f7fd ff02 	bl	80056ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 80078b6:	697b      	ldr	r3, [r7, #20]
    }
 80078b8:	4618      	mov	r0, r3
 80078ba:	3718      	adds	r7, #24
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	200003b0 	.word	0x200003b0
 80078c4:	200003ac 	.word	0x200003ac

080078c8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08c      	sub	sp, #48	@ 0x30
 80078cc:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80078ce:	e0b2      	b.n	8007a36 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f2c0 80af 	blt.w	8007a36 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	695b      	ldr	r3, [r3, #20]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d004      	beq.n	80078ee <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	3304      	adds	r3, #4
 80078e8:	4618      	mov	r0, r3
 80078ea:	f7fd ff1f 	bl	800572c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80078ee:	1d3b      	adds	r3, r7, #4
 80078f0:	4618      	mov	r0, r3
 80078f2:	f7ff ff87 	bl	8007804 <prvSampleTimeNow>
 80078f6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b09      	cmp	r3, #9
 80078fc:	f200 8098 	bhi.w	8007a30 <prvProcessReceivedCommands+0x168>
 8007900:	a201      	add	r2, pc, #4	@ (adr r2, 8007908 <prvProcessReceivedCommands+0x40>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	08007931 	.word	0x08007931
 800790c:	08007931 	.word	0x08007931
 8007910:	08007931 	.word	0x08007931
 8007914:	080079a7 	.word	0x080079a7
 8007918:	080079bb 	.word	0x080079bb
 800791c:	08007a07 	.word	0x08007a07
 8007920:	08007931 	.word	0x08007931
 8007924:	08007931 	.word	0x08007931
 8007928:	080079a7 	.word	0x080079a7
 800792c:	080079bb 	.word	0x080079bb
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007932:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007936:	f043 0301 	orr.w	r3, r3, #1
 800793a:	b2da      	uxtb	r2, r3
 800793c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800793e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007946:	699b      	ldr	r3, [r3, #24]
 8007948:	18d1      	adds	r1, r2, r3
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	6a3a      	ldr	r2, [r7, #32]
 800794e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007950:	f7ff ff78 	bl	8007844 <prvInsertTimerInActiveList>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d06c      	beq.n	8007a34 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800795a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795c:	6a1b      	ldr	r3, [r3, #32]
 800795e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007960:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007964:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007968:	f003 0304 	and.w	r3, r3, #4
 800796c:	2b00      	cmp	r3, #0
 800796e:	d061      	beq.n	8007a34 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	441a      	add	r2, r3
 8007978:	2300      	movs	r3, #0
 800797a:	9300      	str	r3, [sp, #0]
 800797c:	2300      	movs	r3, #0
 800797e:	2100      	movs	r1, #0
 8007980:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007982:	f7ff fe1d 	bl	80075c0 <xTimerGenericCommand>
 8007986:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d152      	bne.n	8007a34 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007992:	f383 8811 	msr	BASEPRI, r3
 8007996:	f3bf 8f6f 	isb	sy
 800799a:	f3bf 8f4f 	dsb	sy
 800799e:	61bb      	str	r3, [r7, #24]
    }
 80079a0:	bf00      	nop
 80079a2:	bf00      	nop
 80079a4:	e7fd      	b.n	80079a2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079ac:	f023 0301 	bic.w	r3, r3, #1
 80079b0:	b2da      	uxtb	r2, r3
 80079b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079b4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80079b8:	e03d      	b.n	8007a36 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80079ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079c0:	f043 0301 	orr.w	r3, r3, #1
 80079c4:	b2da      	uxtb	r2, r3
 80079c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80079d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079d4:	699b      	ldr	r3, [r3, #24]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10b      	bne.n	80079f2 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	617b      	str	r3, [r7, #20]
    }
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	e7fd      	b.n	80079ee <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80079f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f4:	699a      	ldr	r2, [r3, #24]
 80079f6:	6a3b      	ldr	r3, [r7, #32]
 80079f8:	18d1      	adds	r1, r2, r3
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	6a3a      	ldr	r2, [r7, #32]
 80079fe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a00:	f7ff ff20 	bl	8007844 <prvInsertTimerInActiveList>
                        break;
 8007a04:	e017      	b.n	8007a36 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d103      	bne.n	8007a1c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8007a14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007a16:	f000 fc1d 	bl	8008254 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007a1a:	e00c      	b.n	8007a36 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a22:	f023 0301 	bic.w	r3, r3, #1
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007a2e:	e002      	b.n	8007a36 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007a30:	bf00      	nop
 8007a32:	e000      	b.n	8007a36 <prvProcessReceivedCommands+0x16e>
                        break;
 8007a34:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007a36:	4b08      	ldr	r3, [pc, #32]	@ (8007a58 <prvProcessReceivedCommands+0x190>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f107 0108 	add.w	r1, r7, #8
 8007a3e:	2200      	movs	r2, #0
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe f93d 	bl	8005cc0 <xQueueReceive>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	f47f af41 	bne.w	80078d0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8007a4e:	bf00      	nop
 8007a50:	bf00      	nop
 8007a52:	3728      	adds	r7, #40	@ 0x28
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	200003b4 	.word	0x200003b4

08007a5c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a62:	e049      	b.n	8007af8 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a64:	4b2e      	ldr	r3, [pc, #184]	@ (8007b20 <prvSwitchTimerLists+0xc4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8007b20 <prvSwitchTimerLists+0xc4>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3304      	adds	r3, #4
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f7fd fe55 	bl	800572c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
 8007a86:	68f8      	ldr	r0, [r7, #12]
 8007a88:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a90:	f003 0304 	and.w	r3, r3, #4
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d02f      	beq.n	8007af8 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	699b      	ldr	r3, [r3, #24]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d90e      	bls.n	8007ac8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	68fa      	ldr	r2, [r7, #12]
 8007ab4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8007b20 <prvSwitchTimerLists+0xc4>)
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	3304      	adds	r3, #4
 8007abe:	4619      	mov	r1, r3
 8007ac0:	4610      	mov	r0, r2
 8007ac2:	f7fd fdfa 	bl	80056ba <vListInsert>
 8007ac6:	e017      	b.n	8007af8 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ac8:	2300      	movs	r3, #0
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	2300      	movs	r3, #0
 8007ace:	693a      	ldr	r2, [r7, #16]
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff fd74 	bl	80075c0 <xTimerGenericCommand>
 8007ad8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d10b      	bne.n	8007af8 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8007ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ae4:	f383 8811 	msr	BASEPRI, r3
 8007ae8:	f3bf 8f6f 	isb	sy
 8007aec:	f3bf 8f4f 	dsb	sy
 8007af0:	603b      	str	r3, [r7, #0]
    }
 8007af2:	bf00      	nop
 8007af4:	bf00      	nop
 8007af6:	e7fd      	b.n	8007af4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007af8:	4b09      	ldr	r3, [pc, #36]	@ (8007b20 <prvSwitchTimerLists+0xc4>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1b0      	bne.n	8007a64 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007b02:	4b07      	ldr	r3, [pc, #28]	@ (8007b20 <prvSwitchTimerLists+0xc4>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007b08:	4b06      	ldr	r3, [pc, #24]	@ (8007b24 <prvSwitchTimerLists+0xc8>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	4a04      	ldr	r2, [pc, #16]	@ (8007b20 <prvSwitchTimerLists+0xc4>)
 8007b0e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007b10:	4a04      	ldr	r2, [pc, #16]	@ (8007b24 <prvSwitchTimerLists+0xc8>)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	6013      	str	r3, [r2, #0]
    }
 8007b16:	bf00      	nop
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop
 8007b20:	200003ac 	.word	0x200003ac
 8007b24:	200003b0 	.word	0x200003b0

08007b28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007b2c:	f000 f986 	bl	8007e3c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007b30:	4b12      	ldr	r3, [pc, #72]	@ (8007b7c <prvCheckForValidListAndQueue+0x54>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d11d      	bne.n	8007b74 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007b38:	4811      	ldr	r0, [pc, #68]	@ (8007b80 <prvCheckForValidListAndQueue+0x58>)
 8007b3a:	f7fd fd6d 	bl	8005618 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007b3e:	4811      	ldr	r0, [pc, #68]	@ (8007b84 <prvCheckForValidListAndQueue+0x5c>)
 8007b40:	f7fd fd6a 	bl	8005618 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007b44:	4b10      	ldr	r3, [pc, #64]	@ (8007b88 <prvCheckForValidListAndQueue+0x60>)
 8007b46:	4a0e      	ldr	r2, [pc, #56]	@ (8007b80 <prvCheckForValidListAndQueue+0x58>)
 8007b48:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007b4a:	4b10      	ldr	r3, [pc, #64]	@ (8007b8c <prvCheckForValidListAndQueue+0x64>)
 8007b4c:	4a0d      	ldr	r2, [pc, #52]	@ (8007b84 <prvCheckForValidListAndQueue+0x5c>)
 8007b4e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007b50:	2200      	movs	r2, #0
 8007b52:	210c      	movs	r1, #12
 8007b54:	200a      	movs	r0, #10
 8007b56:	f7fd fe7d 	bl	8005854 <xQueueGenericCreate>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	4a07      	ldr	r2, [pc, #28]	@ (8007b7c <prvCheckForValidListAndQueue+0x54>)
 8007b5e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007b60:	4b06      	ldr	r3, [pc, #24]	@ (8007b7c <prvCheckForValidListAndQueue+0x54>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d005      	beq.n	8007b74 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b68:	4b04      	ldr	r3, [pc, #16]	@ (8007b7c <prvCheckForValidListAndQueue+0x54>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4908      	ldr	r1, [pc, #32]	@ (8007b90 <prvCheckForValidListAndQueue+0x68>)
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fe fb70 	bl	8006254 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007b74:	f000 f994 	bl	8007ea0 <vPortExitCritical>
    }
 8007b78:	bf00      	nop
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	200003b4 	.word	0x200003b4
 8007b80:	20000384 	.word	0x20000384
 8007b84:	20000398 	.word	0x20000398
 8007b88:	200003ac 	.word	0x200003ac
 8007b8c:	200003b0 	.word	0x200003b0
 8007b90:	080095dc 	.word	0x080095dc

08007b94 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10b      	bne.n	8007bbe <pvTimerGetTimerID+0x2a>
        __asm volatile
 8007ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007baa:	f383 8811 	msr	BASEPRI, r3
 8007bae:	f3bf 8f6f 	isb	sy
 8007bb2:	f3bf 8f4f 	dsb	sy
 8007bb6:	60fb      	str	r3, [r7, #12]
    }
 8007bb8:	bf00      	nop
 8007bba:	bf00      	nop
 8007bbc:	e7fd      	b.n	8007bba <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007bbe:	f000 f93d 	bl	8007e3c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	69db      	ldr	r3, [r3, #28]
 8007bc6:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007bc8:	f000 f96a 	bl	8007ea0 <vPortExitCritical>

        return pvReturn;
 8007bcc:	693b      	ldr	r3, [r7, #16]
    }
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3718      	adds	r7, #24
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b085      	sub	sp, #20
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	3b04      	subs	r3, #4
 8007be8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007bf0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	3b04      	subs	r3, #4
 8007bf6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	f023 0201 	bic.w	r2, r3, #1
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	3b04      	subs	r3, #4
 8007c06:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007c08:	4a0c      	ldr	r2, [pc, #48]	@ (8007c3c <pxPortInitialiseStack+0x64>)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	3b14      	subs	r3, #20
 8007c12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007c14:	687a      	ldr	r2, [r7, #4]
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	3b04      	subs	r3, #4
 8007c1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	f06f 0202 	mvn.w	r2, #2
 8007c26:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	3b20      	subs	r3, #32
 8007c2c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
}
 8007c30:	4618      	mov	r0, r3
 8007c32:	3714      	adds	r7, #20
 8007c34:	46bd      	mov	sp, r7
 8007c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3a:	4770      	bx	lr
 8007c3c:	08007c41 	.word	0x08007c41

08007c40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007c40:	b480      	push	{r7}
 8007c42:	b085      	sub	sp, #20
 8007c44:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007c46:	2300      	movs	r3, #0
 8007c48:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007c4a:	4b13      	ldr	r3, [pc, #76]	@ (8007c98 <prvTaskExitError+0x58>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c52:	d00b      	beq.n	8007c6c <prvTaskExitError+0x2c>
        __asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	60fb      	str	r3, [r7, #12]
    }
 8007c66:	bf00      	nop
 8007c68:	bf00      	nop
 8007c6a:	e7fd      	b.n	8007c68 <prvTaskExitError+0x28>
        __asm volatile
 8007c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c70:	f383 8811 	msr	BASEPRI, r3
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	60bb      	str	r3, [r7, #8]
    }
 8007c7e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007c80:	bf00      	nop
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0fc      	beq.n	8007c82 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007c88:	bf00      	nop
 8007c8a:	bf00      	nop
 8007c8c:	3714      	adds	r7, #20
 8007c8e:	46bd      	mov	sp, r7
 8007c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c94:	4770      	bx	lr
 8007c96:	bf00      	nop
 8007c98:	20000074 	.word	0x20000074
 8007c9c:	00000000 	.word	0x00000000

08007ca0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007ca0:	4b07      	ldr	r3, [pc, #28]	@ (8007cc0 <pxCurrentTCBConst2>)
 8007ca2:	6819      	ldr	r1, [r3, #0]
 8007ca4:	6808      	ldr	r0, [r1, #0]
 8007ca6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007caa:	f380 8809 	msr	PSP, r0
 8007cae:	f3bf 8f6f 	isb	sy
 8007cb2:	f04f 0000 	mov.w	r0, #0
 8007cb6:	f380 8811 	msr	BASEPRI, r0
 8007cba:	4770      	bx	lr
 8007cbc:	f3af 8000 	nop.w

08007cc0 <pxCurrentTCBConst2>:
 8007cc0:	20000280 	.word	0x20000280
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007cc4:	bf00      	nop
 8007cc6:	bf00      	nop

08007cc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007cc8:	4808      	ldr	r0, [pc, #32]	@ (8007cec <prvPortStartFirstTask+0x24>)
 8007cca:	6800      	ldr	r0, [r0, #0]
 8007ccc:	6800      	ldr	r0, [r0, #0]
 8007cce:	f380 8808 	msr	MSP, r0
 8007cd2:	f04f 0000 	mov.w	r0, #0
 8007cd6:	f380 8814 	msr	CONTROL, r0
 8007cda:	b662      	cpsie	i
 8007cdc:	b661      	cpsie	f
 8007cde:	f3bf 8f4f 	dsb	sy
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	df00      	svc	0
 8007ce8:	bf00      	nop
 8007cea:	0000      	.short	0x0000
 8007cec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007cf0:	bf00      	nop
 8007cf2:	bf00      	nop

08007cf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b086      	sub	sp, #24
 8007cf8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007cfa:	4b47      	ldr	r3, [pc, #284]	@ (8007e18 <xPortStartScheduler+0x124>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a47      	ldr	r2, [pc, #284]	@ (8007e1c <xPortStartScheduler+0x128>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d10b      	bne.n	8007d1c <xPortStartScheduler+0x28>
        __asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	613b      	str	r3, [r7, #16]
    }
 8007d16:	bf00      	nop
 8007d18:	bf00      	nop
 8007d1a:	e7fd      	b.n	8007d18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007d1c:	4b3e      	ldr	r3, [pc, #248]	@ (8007e18 <xPortStartScheduler+0x124>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a3f      	ldr	r2, [pc, #252]	@ (8007e20 <xPortStartScheduler+0x12c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d10b      	bne.n	8007d3e <xPortStartScheduler+0x4a>
        __asm volatile
 8007d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d2a:	f383 8811 	msr	BASEPRI, r3
 8007d2e:	f3bf 8f6f 	isb	sy
 8007d32:	f3bf 8f4f 	dsb	sy
 8007d36:	60fb      	str	r3, [r7, #12]
    }
 8007d38:	bf00      	nop
 8007d3a:	bf00      	nop
 8007d3c:	e7fd      	b.n	8007d3a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007d3e:	4b39      	ldr	r3, [pc, #228]	@ (8007e24 <xPortStartScheduler+0x130>)
 8007d40:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	781b      	ldrb	r3, [r3, #0]
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	22ff      	movs	r2, #255	@ 0xff
 8007d4e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007d50:	697b      	ldr	r3, [r7, #20]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007d58:	78fb      	ldrb	r3, [r7, #3]
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007d60:	b2da      	uxtb	r2, r3
 8007d62:	4b31      	ldr	r3, [pc, #196]	@ (8007e28 <xPortStartScheduler+0x134>)
 8007d64:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007d66:	4b31      	ldr	r3, [pc, #196]	@ (8007e2c <xPortStartScheduler+0x138>)
 8007d68:	2207      	movs	r2, #7
 8007d6a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d6c:	e009      	b.n	8007d82 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8007d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8007e2c <xPortStartScheduler+0x138>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	4a2d      	ldr	r2, [pc, #180]	@ (8007e2c <xPortStartScheduler+0x138>)
 8007d76:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007d78:	78fb      	ldrb	r3, [r7, #3]
 8007d7a:	b2db      	uxtb	r3, r3
 8007d7c:	005b      	lsls	r3, r3, #1
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007d82:	78fb      	ldrb	r3, [r7, #3]
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d8a:	2b80      	cmp	r3, #128	@ 0x80
 8007d8c:	d0ef      	beq.n	8007d6e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007d8e:	4b27      	ldr	r3, [pc, #156]	@ (8007e2c <xPortStartScheduler+0x138>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f1c3 0307 	rsb	r3, r3, #7
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	d00b      	beq.n	8007db2 <xPortStartScheduler+0xbe>
        __asm volatile
 8007d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	60bb      	str	r3, [r7, #8]
    }
 8007dac:	bf00      	nop
 8007dae:	bf00      	nop
 8007db0:	e7fd      	b.n	8007dae <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007db2:	4b1e      	ldr	r3, [pc, #120]	@ (8007e2c <xPortStartScheduler+0x138>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	021b      	lsls	r3, r3, #8
 8007db8:	4a1c      	ldr	r2, [pc, #112]	@ (8007e2c <xPortStartScheduler+0x138>)
 8007dba:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8007e2c <xPortStartScheduler+0x138>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007dc4:	4a19      	ldr	r2, [pc, #100]	@ (8007e2c <xPortStartScheduler+0x138>)
 8007dc6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	b2da      	uxtb	r2, r3
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007dd0:	4b17      	ldr	r3, [pc, #92]	@ (8007e30 <xPortStartScheduler+0x13c>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a16      	ldr	r2, [pc, #88]	@ (8007e30 <xPortStartScheduler+0x13c>)
 8007dd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007dda:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8007ddc:	4b14      	ldr	r3, [pc, #80]	@ (8007e30 <xPortStartScheduler+0x13c>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	4a13      	ldr	r2, [pc, #76]	@ (8007e30 <xPortStartScheduler+0x13c>)
 8007de2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007de6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007de8:	f000 f8e0 	bl	8007fac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8007dec:	4b11      	ldr	r3, [pc, #68]	@ (8007e34 <xPortStartScheduler+0x140>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007df2:	f000 f8ff 	bl	8007ff4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007df6:	4b10      	ldr	r3, [pc, #64]	@ (8007e38 <xPortStartScheduler+0x144>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8007e38 <xPortStartScheduler+0x144>)
 8007dfc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007e00:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007e02:	f7ff ff61 	bl	8007cc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007e06:	f7fe fd91 	bl	800692c <vTaskSwitchContext>
    prvTaskExitError();
 8007e0a:	f7ff ff19 	bl	8007c40 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8007e0e:	2300      	movs	r3, #0
}
 8007e10:	4618      	mov	r0, r3
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	e000ed00 	.word	0xe000ed00
 8007e1c:	410fc271 	.word	0x410fc271
 8007e20:	410fc270 	.word	0x410fc270
 8007e24:	e000e400 	.word	0xe000e400
 8007e28:	200003c0 	.word	0x200003c0
 8007e2c:	200003c4 	.word	0x200003c4
 8007e30:	e000ed20 	.word	0xe000ed20
 8007e34:	20000074 	.word	0x20000074
 8007e38:	e000ef34 	.word	0xe000ef34

08007e3c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
        __asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	607b      	str	r3, [r7, #4]
    }
 8007e54:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8007e56:	4b10      	ldr	r3, [pc, #64]	@ (8007e98 <vPortEnterCritical+0x5c>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	4a0e      	ldr	r2, [pc, #56]	@ (8007e98 <vPortEnterCritical+0x5c>)
 8007e5e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8007e60:	4b0d      	ldr	r3, [pc, #52]	@ (8007e98 <vPortEnterCritical+0x5c>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	d110      	bne.n	8007e8a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007e68:	4b0c      	ldr	r3, [pc, #48]	@ (8007e9c <vPortEnterCritical+0x60>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d00b      	beq.n	8007e8a <vPortEnterCritical+0x4e>
        __asm volatile
 8007e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e76:	f383 8811 	msr	BASEPRI, r3
 8007e7a:	f3bf 8f6f 	isb	sy
 8007e7e:	f3bf 8f4f 	dsb	sy
 8007e82:	603b      	str	r3, [r7, #0]
    }
 8007e84:	bf00      	nop
 8007e86:	bf00      	nop
 8007e88:	e7fd      	b.n	8007e86 <vPortEnterCritical+0x4a>
    }
}
 8007e8a:	bf00      	nop
 8007e8c:	370c      	adds	r7, #12
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	20000074 	.word	0x20000074
 8007e9c:	e000ed04 	.word	0xe000ed04

08007ea0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007ea6:	4b12      	ldr	r3, [pc, #72]	@ (8007ef0 <vPortExitCritical+0x50>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d10b      	bne.n	8007ec6 <vPortExitCritical+0x26>
        __asm volatile
 8007eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007eb2:	f383 8811 	msr	BASEPRI, r3
 8007eb6:	f3bf 8f6f 	isb	sy
 8007eba:	f3bf 8f4f 	dsb	sy
 8007ebe:	607b      	str	r3, [r7, #4]
    }
 8007ec0:	bf00      	nop
 8007ec2:	bf00      	nop
 8007ec4:	e7fd      	b.n	8007ec2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef0 <vPortExitCritical+0x50>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	3b01      	subs	r3, #1
 8007ecc:	4a08      	ldr	r2, [pc, #32]	@ (8007ef0 <vPortExitCritical+0x50>)
 8007ece:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007ed0:	4b07      	ldr	r3, [pc, #28]	@ (8007ef0 <vPortExitCritical+0x50>)
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d105      	bne.n	8007ee4 <vPortExitCritical+0x44>
 8007ed8:	2300      	movs	r3, #0
 8007eda:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	f383 8811 	msr	BASEPRI, r3
    }
 8007ee2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007ee4:	bf00      	nop
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr
 8007ef0:	20000074 	.word	0x20000074
	...

08007f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007f00:	f3ef 8009 	mrs	r0, PSP
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	4b15      	ldr	r3, [pc, #84]	@ (8007f60 <pxCurrentTCBConst>)
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	f01e 0f10 	tst.w	lr, #16
 8007f10:	bf08      	it	eq
 8007f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1a:	6010      	str	r0, [r2, #0]
 8007f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007f20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007f24:	f380 8811 	msr	BASEPRI, r0
 8007f28:	f3bf 8f4f 	dsb	sy
 8007f2c:	f3bf 8f6f 	isb	sy
 8007f30:	f7fe fcfc 	bl	800692c <vTaskSwitchContext>
 8007f34:	f04f 0000 	mov.w	r0, #0
 8007f38:	f380 8811 	msr	BASEPRI, r0
 8007f3c:	bc09      	pop	{r0, r3}
 8007f3e:	6819      	ldr	r1, [r3, #0]
 8007f40:	6808      	ldr	r0, [r1, #0]
 8007f42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f46:	f01e 0f10 	tst.w	lr, #16
 8007f4a:	bf08      	it	eq
 8007f4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007f50:	f380 8809 	msr	PSP, r0
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	4770      	bx	lr
 8007f5a:	bf00      	nop
 8007f5c:	f3af 8000 	nop.w

08007f60 <pxCurrentTCBConst>:
 8007f60:	20000280 	.word	0x20000280
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8007f64:	bf00      	nop
 8007f66:	bf00      	nop

08007f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
        __asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	607b      	str	r3, [r7, #4]
    }
 8007f80:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8007f82:	f7fe fc19 	bl	80067b8 <xTaskIncrementTick>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d003      	beq.n	8007f94 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007f8c:	4b06      	ldr	r3, [pc, #24]	@ (8007fa8 <SysTick_Handler+0x40>)
 8007f8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	2300      	movs	r3, #0
 8007f96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	f383 8811 	msr	BASEPRI, r3
    }
 8007f9e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007fa0:	bf00      	nop
 8007fa2:	3708      	adds	r7, #8
 8007fa4:	46bd      	mov	sp, r7
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	e000ed04 	.word	0xe000ed04

08007fac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8007fac:	b480      	push	{r7}
 8007fae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe0 <vPortSetupTimerInterrupt+0x34>)
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007fe4 <vPortSetupTimerInterrupt+0x38>)
 8007fb8:	2200      	movs	r2, #0
 8007fba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8007fe8 <vPortSetupTimerInterrupt+0x3c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a0a      	ldr	r2, [pc, #40]	@ (8007fec <vPortSetupTimerInterrupt+0x40>)
 8007fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fc6:	099b      	lsrs	r3, r3, #6
 8007fc8:	4a09      	ldr	r2, [pc, #36]	@ (8007ff0 <vPortSetupTimerInterrupt+0x44>)
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007fce:	4b04      	ldr	r3, [pc, #16]	@ (8007fe0 <vPortSetupTimerInterrupt+0x34>)
 8007fd0:	2207      	movs	r2, #7
 8007fd2:	601a      	str	r2, [r3, #0]
}
 8007fd4:	bf00      	nop
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	e000e010 	.word	0xe000e010
 8007fe4:	e000e018 	.word	0xe000e018
 8007fe8:	20000064 	.word	0x20000064
 8007fec:	10624dd3 	.word	0x10624dd3
 8007ff0:	e000e014 	.word	0xe000e014

08007ff4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007ff4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008004 <vPortEnableVFP+0x10>
 8007ff8:	6801      	ldr	r1, [r0, #0]
 8007ffa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ffe:	6001      	str	r1, [r0, #0]
 8008000:	4770      	bx	lr
 8008002:	0000      	.short	0x0000
 8008004:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8008008:	bf00      	nop
 800800a:	bf00      	nop

0800800c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800800c:	b480      	push	{r7}
 800800e:	b085      	sub	sp, #20
 8008010:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008012:	f3ef 8305 	mrs	r3, IPSR
 8008016:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b0f      	cmp	r3, #15
 800801c:	d915      	bls.n	800804a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800801e:	4a18      	ldr	r2, [pc, #96]	@ (8008080 <vPortValidateInterruptPriority+0x74>)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4413      	add	r3, r2
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008028:	4b16      	ldr	r3, [pc, #88]	@ (8008084 <vPortValidateInterruptPriority+0x78>)
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	7afa      	ldrb	r2, [r7, #11]
 800802e:	429a      	cmp	r2, r3
 8008030:	d20b      	bcs.n	800804a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	607b      	str	r3, [r7, #4]
    }
 8008044:	bf00      	nop
 8008046:	bf00      	nop
 8008048:	e7fd      	b.n	8008046 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800804a:	4b0f      	ldr	r3, [pc, #60]	@ (8008088 <vPortValidateInterruptPriority+0x7c>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008052:	4b0e      	ldr	r3, [pc, #56]	@ (800808c <vPortValidateInterruptPriority+0x80>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	429a      	cmp	r2, r3
 8008058:	d90b      	bls.n	8008072 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	603b      	str	r3, [r7, #0]
    }
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <vPortValidateInterruptPriority+0x62>
    }
 8008072:	bf00      	nop
 8008074:	3714      	adds	r7, #20
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	e000e3f0 	.word	0xe000e3f0
 8008084:	200003c0 	.word	0x200003c0
 8008088:	e000ed0c 	.word	0xe000ed0c
 800808c:	200003c4 	.word	0x200003c4

08008090 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b08a      	sub	sp, #40	@ 0x28
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8008098:	2300      	movs	r3, #0
 800809a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800809c:	f7fe fad0 	bl	8006640 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80080a0:	4b66      	ldr	r3, [pc, #408]	@ (800823c <pvPortMalloc+0x1ac>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d101      	bne.n	80080ac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80080a8:	f000 f938 	bl	800831c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80080ac:	4b64      	ldr	r3, [pc, #400]	@ (8008240 <pvPortMalloc+0x1b0>)
 80080ae:	681a      	ldr	r2, [r3, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4013      	ands	r3, r2
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	f040 80a9 	bne.w	800820c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d02e      	beq.n	800811e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80080c0:	2208      	movs	r2, #8
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	429a      	cmp	r2, r3
 80080ca:	d228      	bcs.n	800811e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80080cc:	2208      	movs	r2, #8
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4413      	add	r3, r2
 80080d2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f003 0307 	and.w	r3, r3, #7
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d022      	beq.n	8008124 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f023 0307 	bic.w	r3, r3, #7
 80080e4:	3308      	adds	r3, #8
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d215      	bcs.n	8008118 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f023 0307 	bic.w	r3, r3, #7
 80080f2:	3308      	adds	r3, #8
 80080f4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d011      	beq.n	8008124 <pvPortMalloc+0x94>
        __asm volatile
 8008100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008104:	f383 8811 	msr	BASEPRI, r3
 8008108:	f3bf 8f6f 	isb	sy
 800810c:	f3bf 8f4f 	dsb	sy
 8008110:	617b      	str	r3, [r7, #20]
    }
 8008112:	bf00      	nop
 8008114:	bf00      	nop
 8008116:	e7fd      	b.n	8008114 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8008118:	2300      	movs	r3, #0
 800811a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800811c:	e002      	b.n	8008124 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	607b      	str	r3, [r7, #4]
 8008122:	e000      	b.n	8008126 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008124:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d06f      	beq.n	800820c <pvPortMalloc+0x17c>
 800812c:	4b45      	ldr	r3, [pc, #276]	@ (8008244 <pvPortMalloc+0x1b4>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	429a      	cmp	r2, r3
 8008134:	d86a      	bhi.n	800820c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008136:	4b44      	ldr	r3, [pc, #272]	@ (8008248 <pvPortMalloc+0x1b8>)
 8008138:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800813a:	4b43      	ldr	r3, [pc, #268]	@ (8008248 <pvPortMalloc+0x1b8>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008140:	e004      	b.n	800814c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8008142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008144:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8008146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800814c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	429a      	cmp	r2, r3
 8008154:	d903      	bls.n	800815e <pvPortMalloc+0xce>
 8008156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d1f1      	bne.n	8008142 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800815e:	4b37      	ldr	r3, [pc, #220]	@ (800823c <pvPortMalloc+0x1ac>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008164:	429a      	cmp	r2, r3
 8008166:	d051      	beq.n	800820c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008168:	6a3b      	ldr	r3, [r7, #32]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	2208      	movs	r2, #8
 800816e:	4413      	add	r3, r2
 8008170:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008174:	681a      	ldr	r2, [r3, #0]
 8008176:	6a3b      	ldr	r3, [r7, #32]
 8008178:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	1ad2      	subs	r2, r2, r3
 8008182:	2308      	movs	r3, #8
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	429a      	cmp	r2, r3
 8008188:	d920      	bls.n	80081cc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800818a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	4413      	add	r3, r2
 8008190:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008192:	69bb      	ldr	r3, [r7, #24]
 8008194:	f003 0307 	and.w	r3, r3, #7
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00b      	beq.n	80081b4 <pvPortMalloc+0x124>
        __asm volatile
 800819c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081a0:	f383 8811 	msr	BASEPRI, r3
 80081a4:	f3bf 8f6f 	isb	sy
 80081a8:	f3bf 8f4f 	dsb	sy
 80081ac:	613b      	str	r3, [r7, #16]
    }
 80081ae:	bf00      	nop
 80081b0:	bf00      	nop
 80081b2:	e7fd      	b.n	80081b0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80081b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081b6:	685a      	ldr	r2, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	1ad2      	subs	r2, r2, r3
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80081c6:	69b8      	ldr	r0, [r7, #24]
 80081c8:	f000 f90a 	bl	80083e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80081cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008244 <pvPortMalloc+0x1b4>)
 80081ce:	681a      	ldr	r2, [r3, #0]
 80081d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	4a1b      	ldr	r2, [pc, #108]	@ (8008244 <pvPortMalloc+0x1b4>)
 80081d8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80081da:	4b1a      	ldr	r3, [pc, #104]	@ (8008244 <pvPortMalloc+0x1b4>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	4b1b      	ldr	r3, [pc, #108]	@ (800824c <pvPortMalloc+0x1bc>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d203      	bcs.n	80081ee <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80081e6:	4b17      	ldr	r3, [pc, #92]	@ (8008244 <pvPortMalloc+0x1b4>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a18      	ldr	r2, [pc, #96]	@ (800824c <pvPortMalloc+0x1bc>)
 80081ec:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80081ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f0:	685a      	ldr	r2, [r3, #4]
 80081f2:	4b13      	ldr	r3, [pc, #76]	@ (8008240 <pvPortMalloc+0x1b0>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	431a      	orrs	r2, r3
 80081f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80081fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fe:	2200      	movs	r2, #0
 8008200:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8008202:	4b13      	ldr	r3, [pc, #76]	@ (8008250 <pvPortMalloc+0x1c0>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	3301      	adds	r3, #1
 8008208:	4a11      	ldr	r2, [pc, #68]	@ (8008250 <pvPortMalloc+0x1c0>)
 800820a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800820c:	f7fe fa26 	bl	800665c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008210:	69fb      	ldr	r3, [r7, #28]
 8008212:	f003 0307 	and.w	r3, r3, #7
 8008216:	2b00      	cmp	r3, #0
 8008218:	d00b      	beq.n	8008232 <pvPortMalloc+0x1a2>
        __asm volatile
 800821a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800821e:	f383 8811 	msr	BASEPRI, r3
 8008222:	f3bf 8f6f 	isb	sy
 8008226:	f3bf 8f4f 	dsb	sy
 800822a:	60fb      	str	r3, [r7, #12]
    }
 800822c:	bf00      	nop
 800822e:	bf00      	nop
 8008230:	e7fd      	b.n	800822e <pvPortMalloc+0x19e>
    return pvReturn;
 8008232:	69fb      	ldr	r3, [r7, #28]
}
 8008234:	4618      	mov	r0, r3
 8008236:	3728      	adds	r7, #40	@ 0x28
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	200193d0 	.word	0x200193d0
 8008240:	200193e4 	.word	0x200193e4
 8008244:	200193d4 	.word	0x200193d4
 8008248:	200193c8 	.word	0x200193c8
 800824c:	200193d8 	.word	0x200193d8
 8008250:	200193dc 	.word	0x200193dc

08008254 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b086      	sub	sp, #24
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d04f      	beq.n	8008306 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008266:	2308      	movs	r3, #8
 8008268:	425b      	negs	r3, r3
 800826a:	697a      	ldr	r2, [r7, #20]
 800826c:	4413      	add	r3, r2
 800826e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	685a      	ldr	r2, [r3, #4]
 8008278:	4b25      	ldr	r3, [pc, #148]	@ (8008310 <vPortFree+0xbc>)
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4013      	ands	r3, r2
 800827e:	2b00      	cmp	r3, #0
 8008280:	d10b      	bne.n	800829a <vPortFree+0x46>
        __asm volatile
 8008282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008286:	f383 8811 	msr	BASEPRI, r3
 800828a:	f3bf 8f6f 	isb	sy
 800828e:	f3bf 8f4f 	dsb	sy
 8008292:	60fb      	str	r3, [r7, #12]
    }
 8008294:	bf00      	nop
 8008296:	bf00      	nop
 8008298:	e7fd      	b.n	8008296 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00b      	beq.n	80082ba <vPortFree+0x66>
        __asm volatile
 80082a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082a6:	f383 8811 	msr	BASEPRI, r3
 80082aa:	f3bf 8f6f 	isb	sy
 80082ae:	f3bf 8f4f 	dsb	sy
 80082b2:	60bb      	str	r3, [r7, #8]
    }
 80082b4:	bf00      	nop
 80082b6:	bf00      	nop
 80082b8:	e7fd      	b.n	80082b6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	4b14      	ldr	r3, [pc, #80]	@ (8008310 <vPortFree+0xbc>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4013      	ands	r3, r2
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d01e      	beq.n	8008306 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80082c8:	693b      	ldr	r3, [r7, #16]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d11a      	bne.n	8008306 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	685a      	ldr	r2, [r3, #4]
 80082d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008310 <vPortFree+0xbc>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	43db      	mvns	r3, r3
 80082da:	401a      	ands	r2, r3
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80082e0:	f7fe f9ae 	bl	8006640 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	685a      	ldr	r2, [r3, #4]
 80082e8:	4b0a      	ldr	r3, [pc, #40]	@ (8008314 <vPortFree+0xc0>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4413      	add	r3, r2
 80082ee:	4a09      	ldr	r2, [pc, #36]	@ (8008314 <vPortFree+0xc0>)
 80082f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80082f2:	6938      	ldr	r0, [r7, #16]
 80082f4:	f000 f874 	bl	80083e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80082f8:	4b07      	ldr	r3, [pc, #28]	@ (8008318 <vPortFree+0xc4>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	3301      	adds	r3, #1
 80082fe:	4a06      	ldr	r2, [pc, #24]	@ (8008318 <vPortFree+0xc4>)
 8008300:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8008302:	f7fe f9ab 	bl	800665c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008306:	bf00      	nop
 8008308:	3718      	adds	r7, #24
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	200193e4 	.word	0x200193e4
 8008314:	200193d4 	.word	0x200193d4
 8008318:	200193e0 	.word	0x200193e0

0800831c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008322:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8008326:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8008328:	4b27      	ldr	r3, [pc, #156]	@ (80083c8 <prvHeapInit+0xac>)
 800832a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0307 	and.w	r3, r3, #7
 8008332:	2b00      	cmp	r3, #0
 8008334:	d00c      	beq.n	8008350 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	3307      	adds	r3, #7
 800833a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f023 0307 	bic.w	r3, r3, #7
 8008342:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008344:	68ba      	ldr	r2, [r7, #8]
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	1ad3      	subs	r3, r2, r3
 800834a:	4a1f      	ldr	r2, [pc, #124]	@ (80083c8 <prvHeapInit+0xac>)
 800834c:	4413      	add	r3, r2
 800834e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008354:	4a1d      	ldr	r2, [pc, #116]	@ (80083cc <prvHeapInit+0xb0>)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800835a:	4b1c      	ldr	r3, [pc, #112]	@ (80083cc <prvHeapInit+0xb0>)
 800835c:	2200      	movs	r2, #0
 800835e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	4413      	add	r3, r2
 8008366:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8008368:	2208      	movs	r2, #8
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0307 	bic.w	r3, r3, #7
 8008376:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	4a15      	ldr	r2, [pc, #84]	@ (80083d0 <prvHeapInit+0xb4>)
 800837c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800837e:	4b14      	ldr	r3, [pc, #80]	@ (80083d0 <prvHeapInit+0xb4>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	2200      	movs	r2, #0
 8008384:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8008386:	4b12      	ldr	r3, [pc, #72]	@ (80083d0 <prvHeapInit+0xb4>)
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	2200      	movs	r2, #0
 800838c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	1ad2      	subs	r2, r2, r3
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800839c:	4b0c      	ldr	r3, [pc, #48]	@ (80083d0 <prvHeapInit+0xb4>)
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	4a0a      	ldr	r2, [pc, #40]	@ (80083d4 <prvHeapInit+0xb8>)
 80083aa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	4a09      	ldr	r2, [pc, #36]	@ (80083d8 <prvHeapInit+0xbc>)
 80083b2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80083b4:	4b09      	ldr	r3, [pc, #36]	@ (80083dc <prvHeapInit+0xc0>)
 80083b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80083ba:	601a      	str	r2, [r3, #0]
}
 80083bc:	bf00      	nop
 80083be:	3714      	adds	r7, #20
 80083c0:	46bd      	mov	sp, r7
 80083c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c6:	4770      	bx	lr
 80083c8:	200003c8 	.word	0x200003c8
 80083cc:	200193c8 	.word	0x200193c8
 80083d0:	200193d0 	.word	0x200193d0
 80083d4:	200193d8 	.word	0x200193d8
 80083d8:	200193d4 	.word	0x200193d4
 80083dc:	200193e4 	.word	0x200193e4

080083e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80083e8:	4b28      	ldr	r3, [pc, #160]	@ (800848c <prvInsertBlockIntoFreeList+0xac>)
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	e002      	b.n	80083f4 <prvInsertBlockIntoFreeList+0x14>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	60fb      	str	r3, [r7, #12]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	687a      	ldr	r2, [r7, #4]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d8f7      	bhi.n	80083ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	4413      	add	r3, r2
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	429a      	cmp	r2, r3
 800840e:	d108      	bne.n	8008422 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	685a      	ldr	r2, [r3, #4]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	441a      	add	r2, r3
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	68ba      	ldr	r2, [r7, #8]
 800842c:	441a      	add	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	429a      	cmp	r2, r3
 8008434:	d118      	bne.n	8008468 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	4b15      	ldr	r3, [pc, #84]	@ (8008490 <prvInsertBlockIntoFreeList+0xb0>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	429a      	cmp	r2, r3
 8008440:	d00d      	beq.n	800845e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	685a      	ldr	r2, [r3, #4]
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	441a      	add	r2, r3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	681a      	ldr	r2, [r3, #0]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	601a      	str	r2, [r3, #0]
 800845c:	e008      	b.n	8008470 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800845e:	4b0c      	ldr	r3, [pc, #48]	@ (8008490 <prvInsertBlockIntoFreeList+0xb0>)
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	601a      	str	r2, [r3, #0]
 8008466:	e003      	b.n	8008470 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	429a      	cmp	r2, r3
 8008476:	d002      	beq.n	800847e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800847e:	bf00      	nop
 8008480:	3714      	adds	r7, #20
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop
 800848c:	200193c8 	.word	0x200193c8
 8008490:	200193d0 	.word	0x200193d0

08008494 <siprintf>:
 8008494:	b40e      	push	{r1, r2, r3}
 8008496:	b500      	push	{lr}
 8008498:	b09c      	sub	sp, #112	@ 0x70
 800849a:	ab1d      	add	r3, sp, #116	@ 0x74
 800849c:	9002      	str	r0, [sp, #8]
 800849e:	9006      	str	r0, [sp, #24]
 80084a0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80084a4:	4809      	ldr	r0, [pc, #36]	@ (80084cc <siprintf+0x38>)
 80084a6:	9107      	str	r1, [sp, #28]
 80084a8:	9104      	str	r1, [sp, #16]
 80084aa:	4909      	ldr	r1, [pc, #36]	@ (80084d0 <siprintf+0x3c>)
 80084ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80084b0:	9105      	str	r1, [sp, #20]
 80084b2:	6800      	ldr	r0, [r0, #0]
 80084b4:	9301      	str	r3, [sp, #4]
 80084b6:	a902      	add	r1, sp, #8
 80084b8:	f000 f9a2 	bl	8008800 <_svfiprintf_r>
 80084bc:	9b02      	ldr	r3, [sp, #8]
 80084be:	2200      	movs	r2, #0
 80084c0:	701a      	strb	r2, [r3, #0]
 80084c2:	b01c      	add	sp, #112	@ 0x70
 80084c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80084c8:	b003      	add	sp, #12
 80084ca:	4770      	bx	lr
 80084cc:	20000078 	.word	0x20000078
 80084d0:	ffff0208 	.word	0xffff0208

080084d4 <memset>:
 80084d4:	4402      	add	r2, r0
 80084d6:	4603      	mov	r3, r0
 80084d8:	4293      	cmp	r3, r2
 80084da:	d100      	bne.n	80084de <memset+0xa>
 80084dc:	4770      	bx	lr
 80084de:	f803 1b01 	strb.w	r1, [r3], #1
 80084e2:	e7f9      	b.n	80084d8 <memset+0x4>

080084e4 <__errno>:
 80084e4:	4b01      	ldr	r3, [pc, #4]	@ (80084ec <__errno+0x8>)
 80084e6:	6818      	ldr	r0, [r3, #0]
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	20000078 	.word	0x20000078

080084f0 <__libc_init_array>:
 80084f0:	b570      	push	{r4, r5, r6, lr}
 80084f2:	4d0d      	ldr	r5, [pc, #52]	@ (8008528 <__libc_init_array+0x38>)
 80084f4:	4c0d      	ldr	r4, [pc, #52]	@ (800852c <__libc_init_array+0x3c>)
 80084f6:	1b64      	subs	r4, r4, r5
 80084f8:	10a4      	asrs	r4, r4, #2
 80084fa:	2600      	movs	r6, #0
 80084fc:	42a6      	cmp	r6, r4
 80084fe:	d109      	bne.n	8008514 <__libc_init_array+0x24>
 8008500:	4d0b      	ldr	r5, [pc, #44]	@ (8008530 <__libc_init_array+0x40>)
 8008502:	4c0c      	ldr	r4, [pc, #48]	@ (8008534 <__libc_init_array+0x44>)
 8008504:	f000 fc66 	bl	8008dd4 <_init>
 8008508:	1b64      	subs	r4, r4, r5
 800850a:	10a4      	asrs	r4, r4, #2
 800850c:	2600      	movs	r6, #0
 800850e:	42a6      	cmp	r6, r4
 8008510:	d105      	bne.n	800851e <__libc_init_array+0x2e>
 8008512:	bd70      	pop	{r4, r5, r6, pc}
 8008514:	f855 3b04 	ldr.w	r3, [r5], #4
 8008518:	4798      	blx	r3
 800851a:	3601      	adds	r6, #1
 800851c:	e7ee      	b.n	80084fc <__libc_init_array+0xc>
 800851e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008522:	4798      	blx	r3
 8008524:	3601      	adds	r6, #1
 8008526:	e7f2      	b.n	800850e <__libc_init_array+0x1e>
 8008528:	08009738 	.word	0x08009738
 800852c:	08009738 	.word	0x08009738
 8008530:	08009738 	.word	0x08009738
 8008534:	0800973c 	.word	0x0800973c

08008538 <__retarget_lock_acquire_recursive>:
 8008538:	4770      	bx	lr

0800853a <__retarget_lock_release_recursive>:
 800853a:	4770      	bx	lr

0800853c <memcpy>:
 800853c:	440a      	add	r2, r1
 800853e:	4291      	cmp	r1, r2
 8008540:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008544:	d100      	bne.n	8008548 <memcpy+0xc>
 8008546:	4770      	bx	lr
 8008548:	b510      	push	{r4, lr}
 800854a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800854e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008552:	4291      	cmp	r1, r2
 8008554:	d1f9      	bne.n	800854a <memcpy+0xe>
 8008556:	bd10      	pop	{r4, pc}

08008558 <_free_r>:
 8008558:	b538      	push	{r3, r4, r5, lr}
 800855a:	4605      	mov	r5, r0
 800855c:	2900      	cmp	r1, #0
 800855e:	d041      	beq.n	80085e4 <_free_r+0x8c>
 8008560:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008564:	1f0c      	subs	r4, r1, #4
 8008566:	2b00      	cmp	r3, #0
 8008568:	bfb8      	it	lt
 800856a:	18e4      	addlt	r4, r4, r3
 800856c:	f000 f8e0 	bl	8008730 <__malloc_lock>
 8008570:	4a1d      	ldr	r2, [pc, #116]	@ (80085e8 <_free_r+0x90>)
 8008572:	6813      	ldr	r3, [r2, #0]
 8008574:	b933      	cbnz	r3, 8008584 <_free_r+0x2c>
 8008576:	6063      	str	r3, [r4, #4]
 8008578:	6014      	str	r4, [r2, #0]
 800857a:	4628      	mov	r0, r5
 800857c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008580:	f000 b8dc 	b.w	800873c <__malloc_unlock>
 8008584:	42a3      	cmp	r3, r4
 8008586:	d908      	bls.n	800859a <_free_r+0x42>
 8008588:	6820      	ldr	r0, [r4, #0]
 800858a:	1821      	adds	r1, r4, r0
 800858c:	428b      	cmp	r3, r1
 800858e:	bf01      	itttt	eq
 8008590:	6819      	ldreq	r1, [r3, #0]
 8008592:	685b      	ldreq	r3, [r3, #4]
 8008594:	1809      	addeq	r1, r1, r0
 8008596:	6021      	streq	r1, [r4, #0]
 8008598:	e7ed      	b.n	8008576 <_free_r+0x1e>
 800859a:	461a      	mov	r2, r3
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	b10b      	cbz	r3, 80085a4 <_free_r+0x4c>
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	d9fa      	bls.n	800859a <_free_r+0x42>
 80085a4:	6811      	ldr	r1, [r2, #0]
 80085a6:	1850      	adds	r0, r2, r1
 80085a8:	42a0      	cmp	r0, r4
 80085aa:	d10b      	bne.n	80085c4 <_free_r+0x6c>
 80085ac:	6820      	ldr	r0, [r4, #0]
 80085ae:	4401      	add	r1, r0
 80085b0:	1850      	adds	r0, r2, r1
 80085b2:	4283      	cmp	r3, r0
 80085b4:	6011      	str	r1, [r2, #0]
 80085b6:	d1e0      	bne.n	800857a <_free_r+0x22>
 80085b8:	6818      	ldr	r0, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	6053      	str	r3, [r2, #4]
 80085be:	4408      	add	r0, r1
 80085c0:	6010      	str	r0, [r2, #0]
 80085c2:	e7da      	b.n	800857a <_free_r+0x22>
 80085c4:	d902      	bls.n	80085cc <_free_r+0x74>
 80085c6:	230c      	movs	r3, #12
 80085c8:	602b      	str	r3, [r5, #0]
 80085ca:	e7d6      	b.n	800857a <_free_r+0x22>
 80085cc:	6820      	ldr	r0, [r4, #0]
 80085ce:	1821      	adds	r1, r4, r0
 80085d0:	428b      	cmp	r3, r1
 80085d2:	bf04      	itt	eq
 80085d4:	6819      	ldreq	r1, [r3, #0]
 80085d6:	685b      	ldreq	r3, [r3, #4]
 80085d8:	6063      	str	r3, [r4, #4]
 80085da:	bf04      	itt	eq
 80085dc:	1809      	addeq	r1, r1, r0
 80085de:	6021      	streq	r1, [r4, #0]
 80085e0:	6054      	str	r4, [r2, #4]
 80085e2:	e7ca      	b.n	800857a <_free_r+0x22>
 80085e4:	bd38      	pop	{r3, r4, r5, pc}
 80085e6:	bf00      	nop
 80085e8:	2001952c 	.word	0x2001952c

080085ec <sbrk_aligned>:
 80085ec:	b570      	push	{r4, r5, r6, lr}
 80085ee:	4e0f      	ldr	r6, [pc, #60]	@ (800862c <sbrk_aligned+0x40>)
 80085f0:	460c      	mov	r4, r1
 80085f2:	6831      	ldr	r1, [r6, #0]
 80085f4:	4605      	mov	r5, r0
 80085f6:	b911      	cbnz	r1, 80085fe <sbrk_aligned+0x12>
 80085f8:	f000 fba6 	bl	8008d48 <_sbrk_r>
 80085fc:	6030      	str	r0, [r6, #0]
 80085fe:	4621      	mov	r1, r4
 8008600:	4628      	mov	r0, r5
 8008602:	f000 fba1 	bl	8008d48 <_sbrk_r>
 8008606:	1c43      	adds	r3, r0, #1
 8008608:	d103      	bne.n	8008612 <sbrk_aligned+0x26>
 800860a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800860e:	4620      	mov	r0, r4
 8008610:	bd70      	pop	{r4, r5, r6, pc}
 8008612:	1cc4      	adds	r4, r0, #3
 8008614:	f024 0403 	bic.w	r4, r4, #3
 8008618:	42a0      	cmp	r0, r4
 800861a:	d0f8      	beq.n	800860e <sbrk_aligned+0x22>
 800861c:	1a21      	subs	r1, r4, r0
 800861e:	4628      	mov	r0, r5
 8008620:	f000 fb92 	bl	8008d48 <_sbrk_r>
 8008624:	3001      	adds	r0, #1
 8008626:	d1f2      	bne.n	800860e <sbrk_aligned+0x22>
 8008628:	e7ef      	b.n	800860a <sbrk_aligned+0x1e>
 800862a:	bf00      	nop
 800862c:	20019528 	.word	0x20019528

08008630 <_malloc_r>:
 8008630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008634:	1ccd      	adds	r5, r1, #3
 8008636:	f025 0503 	bic.w	r5, r5, #3
 800863a:	3508      	adds	r5, #8
 800863c:	2d0c      	cmp	r5, #12
 800863e:	bf38      	it	cc
 8008640:	250c      	movcc	r5, #12
 8008642:	2d00      	cmp	r5, #0
 8008644:	4606      	mov	r6, r0
 8008646:	db01      	blt.n	800864c <_malloc_r+0x1c>
 8008648:	42a9      	cmp	r1, r5
 800864a:	d904      	bls.n	8008656 <_malloc_r+0x26>
 800864c:	230c      	movs	r3, #12
 800864e:	6033      	str	r3, [r6, #0]
 8008650:	2000      	movs	r0, #0
 8008652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008656:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800872c <_malloc_r+0xfc>
 800865a:	f000 f869 	bl	8008730 <__malloc_lock>
 800865e:	f8d8 3000 	ldr.w	r3, [r8]
 8008662:	461c      	mov	r4, r3
 8008664:	bb44      	cbnz	r4, 80086b8 <_malloc_r+0x88>
 8008666:	4629      	mov	r1, r5
 8008668:	4630      	mov	r0, r6
 800866a:	f7ff ffbf 	bl	80085ec <sbrk_aligned>
 800866e:	1c43      	adds	r3, r0, #1
 8008670:	4604      	mov	r4, r0
 8008672:	d158      	bne.n	8008726 <_malloc_r+0xf6>
 8008674:	f8d8 4000 	ldr.w	r4, [r8]
 8008678:	4627      	mov	r7, r4
 800867a:	2f00      	cmp	r7, #0
 800867c:	d143      	bne.n	8008706 <_malloc_r+0xd6>
 800867e:	2c00      	cmp	r4, #0
 8008680:	d04b      	beq.n	800871a <_malloc_r+0xea>
 8008682:	6823      	ldr	r3, [r4, #0]
 8008684:	4639      	mov	r1, r7
 8008686:	4630      	mov	r0, r6
 8008688:	eb04 0903 	add.w	r9, r4, r3
 800868c:	f000 fb5c 	bl	8008d48 <_sbrk_r>
 8008690:	4581      	cmp	r9, r0
 8008692:	d142      	bne.n	800871a <_malloc_r+0xea>
 8008694:	6821      	ldr	r1, [r4, #0]
 8008696:	1a6d      	subs	r5, r5, r1
 8008698:	4629      	mov	r1, r5
 800869a:	4630      	mov	r0, r6
 800869c:	f7ff ffa6 	bl	80085ec <sbrk_aligned>
 80086a0:	3001      	adds	r0, #1
 80086a2:	d03a      	beq.n	800871a <_malloc_r+0xea>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	442b      	add	r3, r5
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	f8d8 3000 	ldr.w	r3, [r8]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	bb62      	cbnz	r2, 800870c <_malloc_r+0xdc>
 80086b2:	f8c8 7000 	str.w	r7, [r8]
 80086b6:	e00f      	b.n	80086d8 <_malloc_r+0xa8>
 80086b8:	6822      	ldr	r2, [r4, #0]
 80086ba:	1b52      	subs	r2, r2, r5
 80086bc:	d420      	bmi.n	8008700 <_malloc_r+0xd0>
 80086be:	2a0b      	cmp	r2, #11
 80086c0:	d917      	bls.n	80086f2 <_malloc_r+0xc2>
 80086c2:	1961      	adds	r1, r4, r5
 80086c4:	42a3      	cmp	r3, r4
 80086c6:	6025      	str	r5, [r4, #0]
 80086c8:	bf18      	it	ne
 80086ca:	6059      	strne	r1, [r3, #4]
 80086cc:	6863      	ldr	r3, [r4, #4]
 80086ce:	bf08      	it	eq
 80086d0:	f8c8 1000 	streq.w	r1, [r8]
 80086d4:	5162      	str	r2, [r4, r5]
 80086d6:	604b      	str	r3, [r1, #4]
 80086d8:	4630      	mov	r0, r6
 80086da:	f000 f82f 	bl	800873c <__malloc_unlock>
 80086de:	f104 000b 	add.w	r0, r4, #11
 80086e2:	1d23      	adds	r3, r4, #4
 80086e4:	f020 0007 	bic.w	r0, r0, #7
 80086e8:	1ac2      	subs	r2, r0, r3
 80086ea:	bf1c      	itt	ne
 80086ec:	1a1b      	subne	r3, r3, r0
 80086ee:	50a3      	strne	r3, [r4, r2]
 80086f0:	e7af      	b.n	8008652 <_malloc_r+0x22>
 80086f2:	6862      	ldr	r2, [r4, #4]
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	bf0c      	ite	eq
 80086f8:	f8c8 2000 	streq.w	r2, [r8]
 80086fc:	605a      	strne	r2, [r3, #4]
 80086fe:	e7eb      	b.n	80086d8 <_malloc_r+0xa8>
 8008700:	4623      	mov	r3, r4
 8008702:	6864      	ldr	r4, [r4, #4]
 8008704:	e7ae      	b.n	8008664 <_malloc_r+0x34>
 8008706:	463c      	mov	r4, r7
 8008708:	687f      	ldr	r7, [r7, #4]
 800870a:	e7b6      	b.n	800867a <_malloc_r+0x4a>
 800870c:	461a      	mov	r2, r3
 800870e:	685b      	ldr	r3, [r3, #4]
 8008710:	42a3      	cmp	r3, r4
 8008712:	d1fb      	bne.n	800870c <_malloc_r+0xdc>
 8008714:	2300      	movs	r3, #0
 8008716:	6053      	str	r3, [r2, #4]
 8008718:	e7de      	b.n	80086d8 <_malloc_r+0xa8>
 800871a:	230c      	movs	r3, #12
 800871c:	6033      	str	r3, [r6, #0]
 800871e:	4630      	mov	r0, r6
 8008720:	f000 f80c 	bl	800873c <__malloc_unlock>
 8008724:	e794      	b.n	8008650 <_malloc_r+0x20>
 8008726:	6005      	str	r5, [r0, #0]
 8008728:	e7d6      	b.n	80086d8 <_malloc_r+0xa8>
 800872a:	bf00      	nop
 800872c:	2001952c 	.word	0x2001952c

08008730 <__malloc_lock>:
 8008730:	4801      	ldr	r0, [pc, #4]	@ (8008738 <__malloc_lock+0x8>)
 8008732:	f7ff bf01 	b.w	8008538 <__retarget_lock_acquire_recursive>
 8008736:	bf00      	nop
 8008738:	20019524 	.word	0x20019524

0800873c <__malloc_unlock>:
 800873c:	4801      	ldr	r0, [pc, #4]	@ (8008744 <__malloc_unlock+0x8>)
 800873e:	f7ff befc 	b.w	800853a <__retarget_lock_release_recursive>
 8008742:	bf00      	nop
 8008744:	20019524 	.word	0x20019524

08008748 <__ssputs_r>:
 8008748:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800874c:	688e      	ldr	r6, [r1, #8]
 800874e:	461f      	mov	r7, r3
 8008750:	42be      	cmp	r6, r7
 8008752:	680b      	ldr	r3, [r1, #0]
 8008754:	4682      	mov	sl, r0
 8008756:	460c      	mov	r4, r1
 8008758:	4690      	mov	r8, r2
 800875a:	d82d      	bhi.n	80087b8 <__ssputs_r+0x70>
 800875c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008760:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008764:	d026      	beq.n	80087b4 <__ssputs_r+0x6c>
 8008766:	6965      	ldr	r5, [r4, #20]
 8008768:	6909      	ldr	r1, [r1, #16]
 800876a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800876e:	eba3 0901 	sub.w	r9, r3, r1
 8008772:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008776:	1c7b      	adds	r3, r7, #1
 8008778:	444b      	add	r3, r9
 800877a:	106d      	asrs	r5, r5, #1
 800877c:	429d      	cmp	r5, r3
 800877e:	bf38      	it	cc
 8008780:	461d      	movcc	r5, r3
 8008782:	0553      	lsls	r3, r2, #21
 8008784:	d527      	bpl.n	80087d6 <__ssputs_r+0x8e>
 8008786:	4629      	mov	r1, r5
 8008788:	f7ff ff52 	bl	8008630 <_malloc_r>
 800878c:	4606      	mov	r6, r0
 800878e:	b360      	cbz	r0, 80087ea <__ssputs_r+0xa2>
 8008790:	6921      	ldr	r1, [r4, #16]
 8008792:	464a      	mov	r2, r9
 8008794:	f7ff fed2 	bl	800853c <memcpy>
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800879e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087a2:	81a3      	strh	r3, [r4, #12]
 80087a4:	6126      	str	r6, [r4, #16]
 80087a6:	6165      	str	r5, [r4, #20]
 80087a8:	444e      	add	r6, r9
 80087aa:	eba5 0509 	sub.w	r5, r5, r9
 80087ae:	6026      	str	r6, [r4, #0]
 80087b0:	60a5      	str	r5, [r4, #8]
 80087b2:	463e      	mov	r6, r7
 80087b4:	42be      	cmp	r6, r7
 80087b6:	d900      	bls.n	80087ba <__ssputs_r+0x72>
 80087b8:	463e      	mov	r6, r7
 80087ba:	6820      	ldr	r0, [r4, #0]
 80087bc:	4632      	mov	r2, r6
 80087be:	4641      	mov	r1, r8
 80087c0:	f000 faa8 	bl	8008d14 <memmove>
 80087c4:	68a3      	ldr	r3, [r4, #8]
 80087c6:	1b9b      	subs	r3, r3, r6
 80087c8:	60a3      	str	r3, [r4, #8]
 80087ca:	6823      	ldr	r3, [r4, #0]
 80087cc:	4433      	add	r3, r6
 80087ce:	6023      	str	r3, [r4, #0]
 80087d0:	2000      	movs	r0, #0
 80087d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087d6:	462a      	mov	r2, r5
 80087d8:	f000 fac6 	bl	8008d68 <_realloc_r>
 80087dc:	4606      	mov	r6, r0
 80087de:	2800      	cmp	r0, #0
 80087e0:	d1e0      	bne.n	80087a4 <__ssputs_r+0x5c>
 80087e2:	6921      	ldr	r1, [r4, #16]
 80087e4:	4650      	mov	r0, sl
 80087e6:	f7ff feb7 	bl	8008558 <_free_r>
 80087ea:	230c      	movs	r3, #12
 80087ec:	f8ca 3000 	str.w	r3, [sl]
 80087f0:	89a3      	ldrh	r3, [r4, #12]
 80087f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80087f6:	81a3      	strh	r3, [r4, #12]
 80087f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80087fc:	e7e9      	b.n	80087d2 <__ssputs_r+0x8a>
	...

08008800 <_svfiprintf_r>:
 8008800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008804:	4698      	mov	r8, r3
 8008806:	898b      	ldrh	r3, [r1, #12]
 8008808:	061b      	lsls	r3, r3, #24
 800880a:	b09d      	sub	sp, #116	@ 0x74
 800880c:	4607      	mov	r7, r0
 800880e:	460d      	mov	r5, r1
 8008810:	4614      	mov	r4, r2
 8008812:	d510      	bpl.n	8008836 <_svfiprintf_r+0x36>
 8008814:	690b      	ldr	r3, [r1, #16]
 8008816:	b973      	cbnz	r3, 8008836 <_svfiprintf_r+0x36>
 8008818:	2140      	movs	r1, #64	@ 0x40
 800881a:	f7ff ff09 	bl	8008630 <_malloc_r>
 800881e:	6028      	str	r0, [r5, #0]
 8008820:	6128      	str	r0, [r5, #16]
 8008822:	b930      	cbnz	r0, 8008832 <_svfiprintf_r+0x32>
 8008824:	230c      	movs	r3, #12
 8008826:	603b      	str	r3, [r7, #0]
 8008828:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800882c:	b01d      	add	sp, #116	@ 0x74
 800882e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008832:	2340      	movs	r3, #64	@ 0x40
 8008834:	616b      	str	r3, [r5, #20]
 8008836:	2300      	movs	r3, #0
 8008838:	9309      	str	r3, [sp, #36]	@ 0x24
 800883a:	2320      	movs	r3, #32
 800883c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008840:	f8cd 800c 	str.w	r8, [sp, #12]
 8008844:	2330      	movs	r3, #48	@ 0x30
 8008846:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80089e4 <_svfiprintf_r+0x1e4>
 800884a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800884e:	f04f 0901 	mov.w	r9, #1
 8008852:	4623      	mov	r3, r4
 8008854:	469a      	mov	sl, r3
 8008856:	f813 2b01 	ldrb.w	r2, [r3], #1
 800885a:	b10a      	cbz	r2, 8008860 <_svfiprintf_r+0x60>
 800885c:	2a25      	cmp	r2, #37	@ 0x25
 800885e:	d1f9      	bne.n	8008854 <_svfiprintf_r+0x54>
 8008860:	ebba 0b04 	subs.w	fp, sl, r4
 8008864:	d00b      	beq.n	800887e <_svfiprintf_r+0x7e>
 8008866:	465b      	mov	r3, fp
 8008868:	4622      	mov	r2, r4
 800886a:	4629      	mov	r1, r5
 800886c:	4638      	mov	r0, r7
 800886e:	f7ff ff6b 	bl	8008748 <__ssputs_r>
 8008872:	3001      	adds	r0, #1
 8008874:	f000 80a7 	beq.w	80089c6 <_svfiprintf_r+0x1c6>
 8008878:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800887a:	445a      	add	r2, fp
 800887c:	9209      	str	r2, [sp, #36]	@ 0x24
 800887e:	f89a 3000 	ldrb.w	r3, [sl]
 8008882:	2b00      	cmp	r3, #0
 8008884:	f000 809f 	beq.w	80089c6 <_svfiprintf_r+0x1c6>
 8008888:	2300      	movs	r3, #0
 800888a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800888e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008892:	f10a 0a01 	add.w	sl, sl, #1
 8008896:	9304      	str	r3, [sp, #16]
 8008898:	9307      	str	r3, [sp, #28]
 800889a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800889e:	931a      	str	r3, [sp, #104]	@ 0x68
 80088a0:	4654      	mov	r4, sl
 80088a2:	2205      	movs	r2, #5
 80088a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088a8:	484e      	ldr	r0, [pc, #312]	@ (80089e4 <_svfiprintf_r+0x1e4>)
 80088aa:	f7f7 fca9 	bl	8000200 <memchr>
 80088ae:	9a04      	ldr	r2, [sp, #16]
 80088b0:	b9d8      	cbnz	r0, 80088ea <_svfiprintf_r+0xea>
 80088b2:	06d0      	lsls	r0, r2, #27
 80088b4:	bf44      	itt	mi
 80088b6:	2320      	movmi	r3, #32
 80088b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088bc:	0711      	lsls	r1, r2, #28
 80088be:	bf44      	itt	mi
 80088c0:	232b      	movmi	r3, #43	@ 0x2b
 80088c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80088c6:	f89a 3000 	ldrb.w	r3, [sl]
 80088ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80088cc:	d015      	beq.n	80088fa <_svfiprintf_r+0xfa>
 80088ce:	9a07      	ldr	r2, [sp, #28]
 80088d0:	4654      	mov	r4, sl
 80088d2:	2000      	movs	r0, #0
 80088d4:	f04f 0c0a 	mov.w	ip, #10
 80088d8:	4621      	mov	r1, r4
 80088da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088de:	3b30      	subs	r3, #48	@ 0x30
 80088e0:	2b09      	cmp	r3, #9
 80088e2:	d94b      	bls.n	800897c <_svfiprintf_r+0x17c>
 80088e4:	b1b0      	cbz	r0, 8008914 <_svfiprintf_r+0x114>
 80088e6:	9207      	str	r2, [sp, #28]
 80088e8:	e014      	b.n	8008914 <_svfiprintf_r+0x114>
 80088ea:	eba0 0308 	sub.w	r3, r0, r8
 80088ee:	fa09 f303 	lsl.w	r3, r9, r3
 80088f2:	4313      	orrs	r3, r2
 80088f4:	9304      	str	r3, [sp, #16]
 80088f6:	46a2      	mov	sl, r4
 80088f8:	e7d2      	b.n	80088a0 <_svfiprintf_r+0xa0>
 80088fa:	9b03      	ldr	r3, [sp, #12]
 80088fc:	1d19      	adds	r1, r3, #4
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	9103      	str	r1, [sp, #12]
 8008902:	2b00      	cmp	r3, #0
 8008904:	bfbb      	ittet	lt
 8008906:	425b      	neglt	r3, r3
 8008908:	f042 0202 	orrlt.w	r2, r2, #2
 800890c:	9307      	strge	r3, [sp, #28]
 800890e:	9307      	strlt	r3, [sp, #28]
 8008910:	bfb8      	it	lt
 8008912:	9204      	strlt	r2, [sp, #16]
 8008914:	7823      	ldrb	r3, [r4, #0]
 8008916:	2b2e      	cmp	r3, #46	@ 0x2e
 8008918:	d10a      	bne.n	8008930 <_svfiprintf_r+0x130>
 800891a:	7863      	ldrb	r3, [r4, #1]
 800891c:	2b2a      	cmp	r3, #42	@ 0x2a
 800891e:	d132      	bne.n	8008986 <_svfiprintf_r+0x186>
 8008920:	9b03      	ldr	r3, [sp, #12]
 8008922:	1d1a      	adds	r2, r3, #4
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	9203      	str	r2, [sp, #12]
 8008928:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800892c:	3402      	adds	r4, #2
 800892e:	9305      	str	r3, [sp, #20]
 8008930:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80089f4 <_svfiprintf_r+0x1f4>
 8008934:	7821      	ldrb	r1, [r4, #0]
 8008936:	2203      	movs	r2, #3
 8008938:	4650      	mov	r0, sl
 800893a:	f7f7 fc61 	bl	8000200 <memchr>
 800893e:	b138      	cbz	r0, 8008950 <_svfiprintf_r+0x150>
 8008940:	9b04      	ldr	r3, [sp, #16]
 8008942:	eba0 000a 	sub.w	r0, r0, sl
 8008946:	2240      	movs	r2, #64	@ 0x40
 8008948:	4082      	lsls	r2, r0
 800894a:	4313      	orrs	r3, r2
 800894c:	3401      	adds	r4, #1
 800894e:	9304      	str	r3, [sp, #16]
 8008950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008954:	4824      	ldr	r0, [pc, #144]	@ (80089e8 <_svfiprintf_r+0x1e8>)
 8008956:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800895a:	2206      	movs	r2, #6
 800895c:	f7f7 fc50 	bl	8000200 <memchr>
 8008960:	2800      	cmp	r0, #0
 8008962:	d036      	beq.n	80089d2 <_svfiprintf_r+0x1d2>
 8008964:	4b21      	ldr	r3, [pc, #132]	@ (80089ec <_svfiprintf_r+0x1ec>)
 8008966:	bb1b      	cbnz	r3, 80089b0 <_svfiprintf_r+0x1b0>
 8008968:	9b03      	ldr	r3, [sp, #12]
 800896a:	3307      	adds	r3, #7
 800896c:	f023 0307 	bic.w	r3, r3, #7
 8008970:	3308      	adds	r3, #8
 8008972:	9303      	str	r3, [sp, #12]
 8008974:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008976:	4433      	add	r3, r6
 8008978:	9309      	str	r3, [sp, #36]	@ 0x24
 800897a:	e76a      	b.n	8008852 <_svfiprintf_r+0x52>
 800897c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008980:	460c      	mov	r4, r1
 8008982:	2001      	movs	r0, #1
 8008984:	e7a8      	b.n	80088d8 <_svfiprintf_r+0xd8>
 8008986:	2300      	movs	r3, #0
 8008988:	3401      	adds	r4, #1
 800898a:	9305      	str	r3, [sp, #20]
 800898c:	4619      	mov	r1, r3
 800898e:	f04f 0c0a 	mov.w	ip, #10
 8008992:	4620      	mov	r0, r4
 8008994:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008998:	3a30      	subs	r2, #48	@ 0x30
 800899a:	2a09      	cmp	r2, #9
 800899c:	d903      	bls.n	80089a6 <_svfiprintf_r+0x1a6>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0c6      	beq.n	8008930 <_svfiprintf_r+0x130>
 80089a2:	9105      	str	r1, [sp, #20]
 80089a4:	e7c4      	b.n	8008930 <_svfiprintf_r+0x130>
 80089a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80089aa:	4604      	mov	r4, r0
 80089ac:	2301      	movs	r3, #1
 80089ae:	e7f0      	b.n	8008992 <_svfiprintf_r+0x192>
 80089b0:	ab03      	add	r3, sp, #12
 80089b2:	9300      	str	r3, [sp, #0]
 80089b4:	462a      	mov	r2, r5
 80089b6:	4b0e      	ldr	r3, [pc, #56]	@ (80089f0 <_svfiprintf_r+0x1f0>)
 80089b8:	a904      	add	r1, sp, #16
 80089ba:	4638      	mov	r0, r7
 80089bc:	f3af 8000 	nop.w
 80089c0:	1c42      	adds	r2, r0, #1
 80089c2:	4606      	mov	r6, r0
 80089c4:	d1d6      	bne.n	8008974 <_svfiprintf_r+0x174>
 80089c6:	89ab      	ldrh	r3, [r5, #12]
 80089c8:	065b      	lsls	r3, r3, #25
 80089ca:	f53f af2d 	bmi.w	8008828 <_svfiprintf_r+0x28>
 80089ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80089d0:	e72c      	b.n	800882c <_svfiprintf_r+0x2c>
 80089d2:	ab03      	add	r3, sp, #12
 80089d4:	9300      	str	r3, [sp, #0]
 80089d6:	462a      	mov	r2, r5
 80089d8:	4b05      	ldr	r3, [pc, #20]	@ (80089f0 <_svfiprintf_r+0x1f0>)
 80089da:	a904      	add	r1, sp, #16
 80089dc:	4638      	mov	r0, r7
 80089de:	f000 f879 	bl	8008ad4 <_printf_i>
 80089e2:	e7ed      	b.n	80089c0 <_svfiprintf_r+0x1c0>
 80089e4:	080096fd 	.word	0x080096fd
 80089e8:	08009707 	.word	0x08009707
 80089ec:	00000000 	.word	0x00000000
 80089f0:	08008749 	.word	0x08008749
 80089f4:	08009703 	.word	0x08009703

080089f8 <_printf_common>:
 80089f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089fc:	4616      	mov	r6, r2
 80089fe:	4698      	mov	r8, r3
 8008a00:	688a      	ldr	r2, [r1, #8]
 8008a02:	690b      	ldr	r3, [r1, #16]
 8008a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	bfb8      	it	lt
 8008a0c:	4613      	movlt	r3, r2
 8008a0e:	6033      	str	r3, [r6, #0]
 8008a10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a14:	4607      	mov	r7, r0
 8008a16:	460c      	mov	r4, r1
 8008a18:	b10a      	cbz	r2, 8008a1e <_printf_common+0x26>
 8008a1a:	3301      	adds	r3, #1
 8008a1c:	6033      	str	r3, [r6, #0]
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	0699      	lsls	r1, r3, #26
 8008a22:	bf42      	ittt	mi
 8008a24:	6833      	ldrmi	r3, [r6, #0]
 8008a26:	3302      	addmi	r3, #2
 8008a28:	6033      	strmi	r3, [r6, #0]
 8008a2a:	6825      	ldr	r5, [r4, #0]
 8008a2c:	f015 0506 	ands.w	r5, r5, #6
 8008a30:	d106      	bne.n	8008a40 <_printf_common+0x48>
 8008a32:	f104 0a19 	add.w	sl, r4, #25
 8008a36:	68e3      	ldr	r3, [r4, #12]
 8008a38:	6832      	ldr	r2, [r6, #0]
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	42ab      	cmp	r3, r5
 8008a3e:	dc26      	bgt.n	8008a8e <_printf_common+0x96>
 8008a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008a44:	6822      	ldr	r2, [r4, #0]
 8008a46:	3b00      	subs	r3, #0
 8008a48:	bf18      	it	ne
 8008a4a:	2301      	movne	r3, #1
 8008a4c:	0692      	lsls	r2, r2, #26
 8008a4e:	d42b      	bmi.n	8008aa8 <_printf_common+0xb0>
 8008a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a54:	4641      	mov	r1, r8
 8008a56:	4638      	mov	r0, r7
 8008a58:	47c8      	blx	r9
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	d01e      	beq.n	8008a9c <_printf_common+0xa4>
 8008a5e:	6823      	ldr	r3, [r4, #0]
 8008a60:	6922      	ldr	r2, [r4, #16]
 8008a62:	f003 0306 	and.w	r3, r3, #6
 8008a66:	2b04      	cmp	r3, #4
 8008a68:	bf02      	ittt	eq
 8008a6a:	68e5      	ldreq	r5, [r4, #12]
 8008a6c:	6833      	ldreq	r3, [r6, #0]
 8008a6e:	1aed      	subeq	r5, r5, r3
 8008a70:	68a3      	ldr	r3, [r4, #8]
 8008a72:	bf0c      	ite	eq
 8008a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a78:	2500      	movne	r5, #0
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	bfc4      	itt	gt
 8008a7e:	1a9b      	subgt	r3, r3, r2
 8008a80:	18ed      	addgt	r5, r5, r3
 8008a82:	2600      	movs	r6, #0
 8008a84:	341a      	adds	r4, #26
 8008a86:	42b5      	cmp	r5, r6
 8008a88:	d11a      	bne.n	8008ac0 <_printf_common+0xc8>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	e008      	b.n	8008aa0 <_printf_common+0xa8>
 8008a8e:	2301      	movs	r3, #1
 8008a90:	4652      	mov	r2, sl
 8008a92:	4641      	mov	r1, r8
 8008a94:	4638      	mov	r0, r7
 8008a96:	47c8      	blx	r9
 8008a98:	3001      	adds	r0, #1
 8008a9a:	d103      	bne.n	8008aa4 <_printf_common+0xac>
 8008a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa4:	3501      	adds	r5, #1
 8008aa6:	e7c6      	b.n	8008a36 <_printf_common+0x3e>
 8008aa8:	18e1      	adds	r1, r4, r3
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	2030      	movs	r0, #48	@ 0x30
 8008aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ab2:	4422      	add	r2, r4
 8008ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008abc:	3302      	adds	r3, #2
 8008abe:	e7c7      	b.n	8008a50 <_printf_common+0x58>
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	4641      	mov	r1, r8
 8008ac6:	4638      	mov	r0, r7
 8008ac8:	47c8      	blx	r9
 8008aca:	3001      	adds	r0, #1
 8008acc:	d0e6      	beq.n	8008a9c <_printf_common+0xa4>
 8008ace:	3601      	adds	r6, #1
 8008ad0:	e7d9      	b.n	8008a86 <_printf_common+0x8e>
	...

08008ad4 <_printf_i>:
 8008ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ad8:	7e0f      	ldrb	r7, [r1, #24]
 8008ada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008adc:	2f78      	cmp	r7, #120	@ 0x78
 8008ade:	4691      	mov	r9, r2
 8008ae0:	4680      	mov	r8, r0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	469a      	mov	sl, r3
 8008ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aea:	d807      	bhi.n	8008afc <_printf_i+0x28>
 8008aec:	2f62      	cmp	r7, #98	@ 0x62
 8008aee:	d80a      	bhi.n	8008b06 <_printf_i+0x32>
 8008af0:	2f00      	cmp	r7, #0
 8008af2:	f000 80d2 	beq.w	8008c9a <_printf_i+0x1c6>
 8008af6:	2f58      	cmp	r7, #88	@ 0x58
 8008af8:	f000 80b9 	beq.w	8008c6e <_printf_i+0x19a>
 8008afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b04:	e03a      	b.n	8008b7c <_printf_i+0xa8>
 8008b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b0a:	2b15      	cmp	r3, #21
 8008b0c:	d8f6      	bhi.n	8008afc <_printf_i+0x28>
 8008b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8008b14 <_printf_i+0x40>)
 8008b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b14:	08008b6d 	.word	0x08008b6d
 8008b18:	08008b81 	.word	0x08008b81
 8008b1c:	08008afd 	.word	0x08008afd
 8008b20:	08008afd 	.word	0x08008afd
 8008b24:	08008afd 	.word	0x08008afd
 8008b28:	08008afd 	.word	0x08008afd
 8008b2c:	08008b81 	.word	0x08008b81
 8008b30:	08008afd 	.word	0x08008afd
 8008b34:	08008afd 	.word	0x08008afd
 8008b38:	08008afd 	.word	0x08008afd
 8008b3c:	08008afd 	.word	0x08008afd
 8008b40:	08008c81 	.word	0x08008c81
 8008b44:	08008bab 	.word	0x08008bab
 8008b48:	08008c3b 	.word	0x08008c3b
 8008b4c:	08008afd 	.word	0x08008afd
 8008b50:	08008afd 	.word	0x08008afd
 8008b54:	08008ca3 	.word	0x08008ca3
 8008b58:	08008afd 	.word	0x08008afd
 8008b5c:	08008bab 	.word	0x08008bab
 8008b60:	08008afd 	.word	0x08008afd
 8008b64:	08008afd 	.word	0x08008afd
 8008b68:	08008c43 	.word	0x08008c43
 8008b6c:	6833      	ldr	r3, [r6, #0]
 8008b6e:	1d1a      	adds	r2, r3, #4
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6032      	str	r2, [r6, #0]
 8008b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e09d      	b.n	8008cbc <_printf_i+0x1e8>
 8008b80:	6833      	ldr	r3, [r6, #0]
 8008b82:	6820      	ldr	r0, [r4, #0]
 8008b84:	1d19      	adds	r1, r3, #4
 8008b86:	6031      	str	r1, [r6, #0]
 8008b88:	0606      	lsls	r6, r0, #24
 8008b8a:	d501      	bpl.n	8008b90 <_printf_i+0xbc>
 8008b8c:	681d      	ldr	r5, [r3, #0]
 8008b8e:	e003      	b.n	8008b98 <_printf_i+0xc4>
 8008b90:	0645      	lsls	r5, r0, #25
 8008b92:	d5fb      	bpl.n	8008b8c <_printf_i+0xb8>
 8008b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b98:	2d00      	cmp	r5, #0
 8008b9a:	da03      	bge.n	8008ba4 <_printf_i+0xd0>
 8008b9c:	232d      	movs	r3, #45	@ 0x2d
 8008b9e:	426d      	negs	r5, r5
 8008ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ba4:	4859      	ldr	r0, [pc, #356]	@ (8008d0c <_printf_i+0x238>)
 8008ba6:	230a      	movs	r3, #10
 8008ba8:	e011      	b.n	8008bce <_printf_i+0xfa>
 8008baa:	6821      	ldr	r1, [r4, #0]
 8008bac:	6833      	ldr	r3, [r6, #0]
 8008bae:	0608      	lsls	r0, r1, #24
 8008bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8008bb4:	d402      	bmi.n	8008bbc <_printf_i+0xe8>
 8008bb6:	0649      	lsls	r1, r1, #25
 8008bb8:	bf48      	it	mi
 8008bba:	b2ad      	uxthmi	r5, r5
 8008bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8008bbe:	4853      	ldr	r0, [pc, #332]	@ (8008d0c <_printf_i+0x238>)
 8008bc0:	6033      	str	r3, [r6, #0]
 8008bc2:	bf14      	ite	ne
 8008bc4:	230a      	movne	r3, #10
 8008bc6:	2308      	moveq	r3, #8
 8008bc8:	2100      	movs	r1, #0
 8008bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008bce:	6866      	ldr	r6, [r4, #4]
 8008bd0:	60a6      	str	r6, [r4, #8]
 8008bd2:	2e00      	cmp	r6, #0
 8008bd4:	bfa2      	ittt	ge
 8008bd6:	6821      	ldrge	r1, [r4, #0]
 8008bd8:	f021 0104 	bicge.w	r1, r1, #4
 8008bdc:	6021      	strge	r1, [r4, #0]
 8008bde:	b90d      	cbnz	r5, 8008be4 <_printf_i+0x110>
 8008be0:	2e00      	cmp	r6, #0
 8008be2:	d04b      	beq.n	8008c7c <_printf_i+0x1a8>
 8008be4:	4616      	mov	r6, r2
 8008be6:	fbb5 f1f3 	udiv	r1, r5, r3
 8008bea:	fb03 5711 	mls	r7, r3, r1, r5
 8008bee:	5dc7      	ldrb	r7, [r0, r7]
 8008bf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008bf4:	462f      	mov	r7, r5
 8008bf6:	42bb      	cmp	r3, r7
 8008bf8:	460d      	mov	r5, r1
 8008bfa:	d9f4      	bls.n	8008be6 <_printf_i+0x112>
 8008bfc:	2b08      	cmp	r3, #8
 8008bfe:	d10b      	bne.n	8008c18 <_printf_i+0x144>
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	07df      	lsls	r7, r3, #31
 8008c04:	d508      	bpl.n	8008c18 <_printf_i+0x144>
 8008c06:	6923      	ldr	r3, [r4, #16]
 8008c08:	6861      	ldr	r1, [r4, #4]
 8008c0a:	4299      	cmp	r1, r3
 8008c0c:	bfde      	ittt	le
 8008c0e:	2330      	movle	r3, #48	@ 0x30
 8008c10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c14:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008c18:	1b92      	subs	r2, r2, r6
 8008c1a:	6122      	str	r2, [r4, #16]
 8008c1c:	f8cd a000 	str.w	sl, [sp]
 8008c20:	464b      	mov	r3, r9
 8008c22:	aa03      	add	r2, sp, #12
 8008c24:	4621      	mov	r1, r4
 8008c26:	4640      	mov	r0, r8
 8008c28:	f7ff fee6 	bl	80089f8 <_printf_common>
 8008c2c:	3001      	adds	r0, #1
 8008c2e:	d14a      	bne.n	8008cc6 <_printf_i+0x1f2>
 8008c30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c34:	b004      	add	sp, #16
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	6823      	ldr	r3, [r4, #0]
 8008c3c:	f043 0320 	orr.w	r3, r3, #32
 8008c40:	6023      	str	r3, [r4, #0]
 8008c42:	4833      	ldr	r0, [pc, #204]	@ (8008d10 <_printf_i+0x23c>)
 8008c44:	2778      	movs	r7, #120	@ 0x78
 8008c46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c4a:	6823      	ldr	r3, [r4, #0]
 8008c4c:	6831      	ldr	r1, [r6, #0]
 8008c4e:	061f      	lsls	r7, r3, #24
 8008c50:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c54:	d402      	bmi.n	8008c5c <_printf_i+0x188>
 8008c56:	065f      	lsls	r7, r3, #25
 8008c58:	bf48      	it	mi
 8008c5a:	b2ad      	uxthmi	r5, r5
 8008c5c:	6031      	str	r1, [r6, #0]
 8008c5e:	07d9      	lsls	r1, r3, #31
 8008c60:	bf44      	itt	mi
 8008c62:	f043 0320 	orrmi.w	r3, r3, #32
 8008c66:	6023      	strmi	r3, [r4, #0]
 8008c68:	b11d      	cbz	r5, 8008c72 <_printf_i+0x19e>
 8008c6a:	2310      	movs	r3, #16
 8008c6c:	e7ac      	b.n	8008bc8 <_printf_i+0xf4>
 8008c6e:	4827      	ldr	r0, [pc, #156]	@ (8008d0c <_printf_i+0x238>)
 8008c70:	e7e9      	b.n	8008c46 <_printf_i+0x172>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	f023 0320 	bic.w	r3, r3, #32
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	e7f6      	b.n	8008c6a <_printf_i+0x196>
 8008c7c:	4616      	mov	r6, r2
 8008c7e:	e7bd      	b.n	8008bfc <_printf_i+0x128>
 8008c80:	6833      	ldr	r3, [r6, #0]
 8008c82:	6825      	ldr	r5, [r4, #0]
 8008c84:	6961      	ldr	r1, [r4, #20]
 8008c86:	1d18      	adds	r0, r3, #4
 8008c88:	6030      	str	r0, [r6, #0]
 8008c8a:	062e      	lsls	r6, r5, #24
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	d501      	bpl.n	8008c94 <_printf_i+0x1c0>
 8008c90:	6019      	str	r1, [r3, #0]
 8008c92:	e002      	b.n	8008c9a <_printf_i+0x1c6>
 8008c94:	0668      	lsls	r0, r5, #25
 8008c96:	d5fb      	bpl.n	8008c90 <_printf_i+0x1bc>
 8008c98:	8019      	strh	r1, [r3, #0]
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	6123      	str	r3, [r4, #16]
 8008c9e:	4616      	mov	r6, r2
 8008ca0:	e7bc      	b.n	8008c1c <_printf_i+0x148>
 8008ca2:	6833      	ldr	r3, [r6, #0]
 8008ca4:	1d1a      	adds	r2, r3, #4
 8008ca6:	6032      	str	r2, [r6, #0]
 8008ca8:	681e      	ldr	r6, [r3, #0]
 8008caa:	6862      	ldr	r2, [r4, #4]
 8008cac:	2100      	movs	r1, #0
 8008cae:	4630      	mov	r0, r6
 8008cb0:	f7f7 faa6 	bl	8000200 <memchr>
 8008cb4:	b108      	cbz	r0, 8008cba <_printf_i+0x1e6>
 8008cb6:	1b80      	subs	r0, r0, r6
 8008cb8:	6060      	str	r0, [r4, #4]
 8008cba:	6863      	ldr	r3, [r4, #4]
 8008cbc:	6123      	str	r3, [r4, #16]
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008cc4:	e7aa      	b.n	8008c1c <_printf_i+0x148>
 8008cc6:	6923      	ldr	r3, [r4, #16]
 8008cc8:	4632      	mov	r2, r6
 8008cca:	4649      	mov	r1, r9
 8008ccc:	4640      	mov	r0, r8
 8008cce:	47d0      	blx	sl
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d0ad      	beq.n	8008c30 <_printf_i+0x15c>
 8008cd4:	6823      	ldr	r3, [r4, #0]
 8008cd6:	079b      	lsls	r3, r3, #30
 8008cd8:	d413      	bmi.n	8008d02 <_printf_i+0x22e>
 8008cda:	68e0      	ldr	r0, [r4, #12]
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	4298      	cmp	r0, r3
 8008ce0:	bfb8      	it	lt
 8008ce2:	4618      	movlt	r0, r3
 8008ce4:	e7a6      	b.n	8008c34 <_printf_i+0x160>
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	4632      	mov	r2, r6
 8008cea:	4649      	mov	r1, r9
 8008cec:	4640      	mov	r0, r8
 8008cee:	47d0      	blx	sl
 8008cf0:	3001      	adds	r0, #1
 8008cf2:	d09d      	beq.n	8008c30 <_printf_i+0x15c>
 8008cf4:	3501      	adds	r5, #1
 8008cf6:	68e3      	ldr	r3, [r4, #12]
 8008cf8:	9903      	ldr	r1, [sp, #12]
 8008cfa:	1a5b      	subs	r3, r3, r1
 8008cfc:	42ab      	cmp	r3, r5
 8008cfe:	dcf2      	bgt.n	8008ce6 <_printf_i+0x212>
 8008d00:	e7eb      	b.n	8008cda <_printf_i+0x206>
 8008d02:	2500      	movs	r5, #0
 8008d04:	f104 0619 	add.w	r6, r4, #25
 8008d08:	e7f5      	b.n	8008cf6 <_printf_i+0x222>
 8008d0a:	bf00      	nop
 8008d0c:	0800970e 	.word	0x0800970e
 8008d10:	0800971f 	.word	0x0800971f

08008d14 <memmove>:
 8008d14:	4288      	cmp	r0, r1
 8008d16:	b510      	push	{r4, lr}
 8008d18:	eb01 0402 	add.w	r4, r1, r2
 8008d1c:	d902      	bls.n	8008d24 <memmove+0x10>
 8008d1e:	4284      	cmp	r4, r0
 8008d20:	4623      	mov	r3, r4
 8008d22:	d807      	bhi.n	8008d34 <memmove+0x20>
 8008d24:	1e43      	subs	r3, r0, #1
 8008d26:	42a1      	cmp	r1, r4
 8008d28:	d008      	beq.n	8008d3c <memmove+0x28>
 8008d2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d32:	e7f8      	b.n	8008d26 <memmove+0x12>
 8008d34:	4402      	add	r2, r0
 8008d36:	4601      	mov	r1, r0
 8008d38:	428a      	cmp	r2, r1
 8008d3a:	d100      	bne.n	8008d3e <memmove+0x2a>
 8008d3c:	bd10      	pop	{r4, pc}
 8008d3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d46:	e7f7      	b.n	8008d38 <memmove+0x24>

08008d48 <_sbrk_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d06      	ldr	r5, [pc, #24]	@ (8008d64 <_sbrk_r+0x1c>)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	f7f9 fcd2 	bl	80026fc <_sbrk>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_sbrk_r+0x1a>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_sbrk_r+0x1a>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	20019520 	.word	0x20019520

08008d68 <_realloc_r>:
 8008d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d6c:	4680      	mov	r8, r0
 8008d6e:	4615      	mov	r5, r2
 8008d70:	460c      	mov	r4, r1
 8008d72:	b921      	cbnz	r1, 8008d7e <_realloc_r+0x16>
 8008d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d78:	4611      	mov	r1, r2
 8008d7a:	f7ff bc59 	b.w	8008630 <_malloc_r>
 8008d7e:	b92a      	cbnz	r2, 8008d8c <_realloc_r+0x24>
 8008d80:	f7ff fbea 	bl	8008558 <_free_r>
 8008d84:	2400      	movs	r4, #0
 8008d86:	4620      	mov	r0, r4
 8008d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d8c:	f000 f81a 	bl	8008dc4 <_malloc_usable_size_r>
 8008d90:	4285      	cmp	r5, r0
 8008d92:	4606      	mov	r6, r0
 8008d94:	d802      	bhi.n	8008d9c <_realloc_r+0x34>
 8008d96:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008d9a:	d8f4      	bhi.n	8008d86 <_realloc_r+0x1e>
 8008d9c:	4629      	mov	r1, r5
 8008d9e:	4640      	mov	r0, r8
 8008da0:	f7ff fc46 	bl	8008630 <_malloc_r>
 8008da4:	4607      	mov	r7, r0
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d0ec      	beq.n	8008d84 <_realloc_r+0x1c>
 8008daa:	42b5      	cmp	r5, r6
 8008dac:	462a      	mov	r2, r5
 8008dae:	4621      	mov	r1, r4
 8008db0:	bf28      	it	cs
 8008db2:	4632      	movcs	r2, r6
 8008db4:	f7ff fbc2 	bl	800853c <memcpy>
 8008db8:	4621      	mov	r1, r4
 8008dba:	4640      	mov	r0, r8
 8008dbc:	f7ff fbcc 	bl	8008558 <_free_r>
 8008dc0:	463c      	mov	r4, r7
 8008dc2:	e7e0      	b.n	8008d86 <_realloc_r+0x1e>

08008dc4 <_malloc_usable_size_r>:
 8008dc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dc8:	1f18      	subs	r0, r3, #4
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	bfbc      	itt	lt
 8008dce:	580b      	ldrlt	r3, [r1, r0]
 8008dd0:	18c0      	addlt	r0, r0, r3
 8008dd2:	4770      	bx	lr

08008dd4 <_init>:
 8008dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dd6:	bf00      	nop
 8008dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dda:	bc08      	pop	{r3}
 8008ddc:	469e      	mov	lr, r3
 8008dde:	4770      	bx	lr

08008de0 <_fini>:
 8008de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008de2:	bf00      	nop
 8008de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008de6:	bc08      	pop	{r3}
 8008de8:	469e      	mov	lr, r3
 8008dea:	4770      	bx	lr
