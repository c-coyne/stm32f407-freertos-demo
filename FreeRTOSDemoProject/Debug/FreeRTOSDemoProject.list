
FreeRTOSDemoProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f80  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08006110  08006110  00007110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006190  08006190  00008018  2**0
                  CONTENTS
  4 .ARM          00000008  08006190  08006190  00007190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006198  08006198  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006198  08006198  00007198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800619c  0800619c  0000719c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080061a0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00008018  2**0
                  CONTENTS
 10 .bss          0001926c  20000018  20000018  00008018  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20019284  20019284  00008018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001335d  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f3e  00000000  00000000  0001b3a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  0001e2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000daf  00000000  00000000  0001f478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022a51  00000000  00000000  00020227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001456e  00000000  00000000  00042c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b45  00000000  00000000  000571e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ad2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004960  00000000  00000000  0012ad70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  0012f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080060f8 	.word	0x080060f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	080060f8 	.word	0x080060f8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <message_handler_task>:
 * @note The data queue (`q_data`) and print queue (`q_print`) must be initialized. The task must be   *
 *       notified when a new message is available.                                                     *
 * @note The processed message is sent to the print queue (`q_print`).                                 *
 ******************************************************************************************************/
void message_handler_task(void *param)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b08a      	sub	sp, #40	@ 0x28
 80004d4:	af02      	add	r7, sp, #8
 80004d6:	6078      	str	r0, [r7, #4]
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2300      	movs	r3, #0
 80004e0:	2200      	movs	r2, #0
 80004e2:	2100      	movs	r1, #0
 80004e4:	2000      	movs	r0, #0
 80004e6:	f004 fc67 	bl	8004db8 <xTaskGenericNotifyWait>
 80004ea:	61f8      	str	r0, [r7, #28]

		if(pdTRUE == ret) {
 80004ec:	69fb      	ldr	r3, [r7, #28]
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d1f2      	bne.n	80004d8 <message_handler_task+0x8>
			// Process the message stored in the input data queue
			process_message(&msg);
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	4618      	mov	r0, r3
 80004f8:	f000 f822 	bl	8000540 <process_message>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80004fc:	e7ec      	b.n	80004d8 <message_handler_task+0x8>
	...

08000500 <print_task>:
 * @note This function is intended to run as a FreeRTOS task.                                          *
 * @note The print queue (`q_print`) must be initialized and contain messages to print.                *
 * @note The received message is transmitted via UART.                                                 *
 ******************************************************************************************************/
void print_task(void *param)
{
 8000500:	b590      	push	{r4, r7, lr}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8000508:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <print_task+0x38>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	f107 010c 	add.w	r1, r7, #12
 8000510:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000514:	4618      	mov	r0, r3
 8000516:	f003 fb31 	bl	8003b7c <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 800051a:	68fc      	ldr	r4, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff fe56 	bl	80001d0 <strlen>
 8000524:	4603      	mov	r3, r0
 8000526:	b29a      	uxth	r2, r3
 8000528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800052c:	4621      	mov	r1, r4
 800052e:	4803      	ldr	r0, [pc, #12]	@ (800053c <print_task+0x3c>)
 8000530:	f001 ffca 	bl	80024c8 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8000534:	bf00      	nop
 8000536:	e7e7      	b.n	8000508 <print_task+0x8>
 8000538:	20000084 	.word	0x20000084
 800053c:	20000034 	.word	0x20000034

08000540 <process_message>:
 * @return void                                                                                        *
 *                                                                                                     *
 * @note This function is called by the `message_handler_task` when a notification is received.        *
 * @note The data queue (`q_data`) must be initialized and contain a message to process.               *
 ******************************************************************************************************/
void process_message(message_t *msg) {
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]

	extract_command(msg);
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f000 f811 	bl	8000570 <extract_command>

	xQueueSend(q_print, &msg_rcv, portMAX_DELAY);
 800054e:	4b06      	ldr	r3, [pc, #24]	@ (8000568 <process_message+0x28>)
 8000550:	6818      	ldr	r0, [r3, #0]
 8000552:	2300      	movs	r3, #0
 8000554:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000558:	4904      	ldr	r1, [pc, #16]	@ (800056c <process_message+0x2c>)
 800055a:	f003 f95f 	bl	800381c <xQueueGenericSend>

//	switch(curr_state) {
//		default:
//			break;
//	}
}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	20000084 	.word	0x20000084
 800056c:	20000000 	.word	0x20000000

08000570 <extract_command>:
 * @note This function is called by `process_message` to parse the incoming command message.           *
 * @note The data queue (`q_data`) must be initialized and contain a message to extract.               *
 * @note The extracted command is stored in the `msg` structure, with its payload and length fields    *
 *       populated.                                                                                    *
 ******************************************************************************************************/
int extract_command(message_t *msg) {
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	// Check if there is data in the data queue
	status = uxQueueMessagesWaiting(q_data);
 8000578:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <extract_command+0x70>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4618      	mov	r0, r3
 800057e:	f003 fc71 	bl	8003e64 <uxQueueMessagesWaiting>
 8000582:	4603      	mov	r3, r0
 8000584:	613b      	str	r3, [r7, #16]
	if(!status) {
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d102      	bne.n	8000592 <extract_command+0x22>
		return -1;
 800058c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000590:	e022      	b.n	80005d8 <extract_command+0x68>
	}

	// If data is available in the data queue, load it to the msg payload
	uint8_t i=0;
 8000592:	2300      	movs	r3, #0
 8000594:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 8000596:	4b12      	ldr	r3, [pc, #72]	@ (80005e0 <extract_command+0x70>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f107 010f 	add.w	r1, r7, #15
 800059e:	2200      	movs	r2, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f003 faeb 	bl	8003b7c <xQueueReceive>
 80005a6:	6138      	str	r0, [r7, #16]
		if(pdTRUE == status) {
 80005a8:	693b      	ldr	r3, [r7, #16]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d106      	bne.n	80005bc <extract_command+0x4c>
			msg->payload[i++] = item;
 80005ae:	7dfb      	ldrb	r3, [r7, #23]
 80005b0:	1c5a      	adds	r2, r3, #1
 80005b2:	75fa      	strb	r2, [r7, #23]
 80005b4:	461a      	mov	r2, r3
 80005b6:	7bf9      	ldrb	r1, [r7, #15]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\n');
 80005bc:	7bfb      	ldrb	r3, [r7, #15]
 80005be:	2b0a      	cmp	r3, #10
 80005c0:	d1e9      	bne.n	8000596 <extract_command+0x26>

	// Set final character in message payload to null character
	msg->payload[i-1] = '\0';
 80005c2:	7dfb      	ldrb	r3, [r7, #23]
 80005c4:	3b01      	subs	r3, #1
 80005c6:	687a      	ldr	r2, [r7, #4]
 80005c8:	2100      	movs	r1, #0
 80005ca:	54d1      	strb	r1, [r2, r3]
	// Save length of message without null character
	msg->len = i-1;
 80005cc:	7dfb      	ldrb	r3, [r7, #23]
 80005ce:	3b01      	subs	r3, #1
 80005d0:	461a      	mov	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	60da      	str	r2, [r3, #12]

	return 0;
 80005d6:	2300      	movs	r3, #0
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3718      	adds	r7, #24
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000088 	.word	0x20000088

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ea:	f000 fc45 	bl	8000e78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ee:	f000 f885 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f2:	f000 f917 	bl	8000824 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005f6:	f000 f8eb 	bl	80007d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  // Create message handler task and check that it was created successfully
  status = xTaskCreate(message_handler_task, "msg_task", 250, NULL, 2, &handle_message_handler_task);
 80005fa:	4b36      	ldr	r3, [pc, #216]	@ (80006d4 <main+0xf0>)
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22fa      	movs	r2, #250	@ 0xfa
 8000606:	4934      	ldr	r1, [pc, #208]	@ (80006d8 <main+0xf4>)
 8000608:	4834      	ldr	r0, [pc, #208]	@ (80006dc <main+0xf8>)
 800060a:	f003 fddf 	bl	80041cc <xTaskCreate>
 800060e:	6178      	str	r0, [r7, #20]
  configASSERT(pdPASS == status);
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00b      	beq.n	800062e <main+0x4a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0x46>

  // Create print task and check that it was created successfully
  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 800062e:	4b2c      	ldr	r3, [pc, #176]	@ (80006e0 <main+0xfc>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2302      	movs	r3, #2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22fa      	movs	r2, #250	@ 0xfa
 800063a:	492a      	ldr	r1, [pc, #168]	@ (80006e4 <main+0x100>)
 800063c:	482a      	ldr	r0, [pc, #168]	@ (80006e8 <main+0x104>)
 800063e:	f003 fdc5 	bl	80041cc <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]
  configASSERT(pdPASS == status);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00b      	beq.n	8000662 <main+0x7e>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	60fb      	str	r3, [r7, #12]
    }
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0x7a>

  // Create data queue and check that it was created successfully
  q_data = xQueueCreate(10, sizeof(char));
 8000662:	2200      	movs	r2, #0
 8000664:	2101      	movs	r1, #1
 8000666:	200a      	movs	r0, #10
 8000668:	f003 f852 	bl	8003710 <xQueueGenericCreate>
 800066c:	4603      	mov	r3, r0
 800066e:	4a1f      	ldr	r2, [pc, #124]	@ (80006ec <main+0x108>)
 8000670:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_data);
 8000672:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <main+0x108>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d10b      	bne.n	8000692 <main+0xae>
        __asm volatile
 800067a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800067e:	f383 8811 	msr	BASEPRI, r3
 8000682:	f3bf 8f6f 	isb	sy
 8000686:	f3bf 8f4f 	dsb	sy
 800068a:	60bb      	str	r3, [r7, #8]
    }
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	e7fd      	b.n	800068e <main+0xaa>

  // Create print queue and check that it was created successfully
  q_print = xQueueCreate(10, sizeof(size_t));
 8000692:	2200      	movs	r2, #0
 8000694:	2104      	movs	r1, #4
 8000696:	200a      	movs	r0, #10
 8000698:	f003 f83a 	bl	8003710 <xQueueGenericCreate>
 800069c:	4603      	mov	r3, r0
 800069e:	4a14      	ldr	r2, [pc, #80]	@ (80006f0 <main+0x10c>)
 80006a0:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_print);
 80006a2:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <main+0x10c>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10b      	bne.n	80006c2 <main+0xde>
        __asm volatile
 80006aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006ae:	f383 8811 	msr	BASEPRI, r3
 80006b2:	f3bf 8f6f 	isb	sy
 80006b6:	f3bf 8f4f 	dsb	sy
 80006ba:	607b      	str	r3, [r7, #4]
    }
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <main+0xda>

  // Prepare UART to receive a message
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	490b      	ldr	r1, [pc, #44]	@ (80006f4 <main+0x110>)
 80006c6:	480c      	ldr	r0, [pc, #48]	@ (80006f8 <main+0x114>)
 80006c8:	f001 ff89 	bl	80025de <HAL_UART_Receive_IT>

  // Start the kernel
  vTaskStartScheduler();
 80006cc:	f003 fec4 	bl	8004458 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	bf00      	nop
 80006d2:	e7fd      	b.n	80006d0 <main+0xec>
 80006d4:	2000007c 	.word	0x2000007c
 80006d8:	08006148 	.word	0x08006148
 80006dc:	080004d1 	.word	0x080004d1
 80006e0:	20000080 	.word	0x20000080
 80006e4:	08006154 	.word	0x08006154
 80006e8:	08000501 	.word	0x08000501
 80006ec:	20000088 	.word	0x20000088
 80006f0:	20000084 	.word	0x20000084
 80006f4:	2000008c 	.word	0x2000008c
 80006f8:	20000034 	.word	0x20000034

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	@ 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	2230      	movs	r2, #48	@ 0x30
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f005 fcba 	bl	8006084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	4b28      	ldr	r3, [pc, #160]	@ (80007c8 <SystemClock_Config+0xcc>)
 8000726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000728:	4a27      	ldr	r2, [pc, #156]	@ (80007c8 <SystemClock_Config+0xcc>)
 800072a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800072e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000730:	4b25      	ldr	r3, [pc, #148]	@ (80007c8 <SystemClock_Config+0xcc>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	4b22      	ldr	r3, [pc, #136]	@ (80007cc <SystemClock_Config+0xd0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a21      	ldr	r2, [pc, #132]	@ (80007cc <SystemClock_Config+0xd0>)
 8000746:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <SystemClock_Config+0xd0>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000758:	2302      	movs	r3, #2
 800075a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000760:	2310      	movs	r3, #16
 8000762:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000764:	2302      	movs	r3, #2
 8000766:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000768:	2300      	movs	r3, #0
 800076a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800076c:	2308      	movs	r3, #8
 800076e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000770:	2332      	movs	r3, #50	@ 0x32
 8000772:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000774:	2304      	movs	r3, #4
 8000776:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000778:	2307      	movs	r3, #7
 800077a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4618      	mov	r0, r3
 8000782:	f000 fee5 	bl	8001550 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 fa0e 	bl	8000bac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000790:	230f      	movs	r3, #15
 8000792:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000794:	2302      	movs	r3, #2
 8000796:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800079c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 f946 	bl	8001a40 <HAL_RCC_ClockConfig>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007ba:	f000 f9f7 	bl	8000bac <Error_Handler>
  }
}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	@ 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	40007000 	.word	0x40007000

080007d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007d6:	4a12      	ldr	r2, [pc, #72]	@ (8000820 <MX_USART2_UART_Init+0x50>)
 80007d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007f4:	4b09      	ldr	r3, [pc, #36]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007f6:	220c      	movs	r2, #12
 80007f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000800:	4b06      	ldr	r3, [pc, #24]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 8000802:	2200      	movs	r2, #0
 8000804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	@ (800081c <MX_USART2_UART_Init+0x4c>)
 8000808:	f001 fe0e 	bl	8002428 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000812:	f000 f9cb 	bl	8000bac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	20000034 	.word	0x20000034
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	@ 0x30
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	4ba2      	ldr	r3, [pc, #648]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4aa1      	ldr	r2, [pc, #644]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 8000844:	f043 0310 	orr.w	r3, r3, #16
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b9f      	ldr	r3, [pc, #636]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0310 	and.w	r3, r3, #16
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	4b9b      	ldr	r3, [pc, #620]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 8000860:	f043 0304 	orr.w	r3, r3, #4
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b98      	ldr	r3, [pc, #608]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0304 	and.w	r3, r3, #4
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b94      	ldr	r3, [pc, #592]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a93      	ldr	r2, [pc, #588]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b91      	ldr	r3, [pc, #580]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b8d      	ldr	r3, [pc, #564]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a8c      	ldr	r2, [pc, #560]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b8a      	ldr	r3, [pc, #552]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b86      	ldr	r3, [pc, #536]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a85      	ldr	r2, [pc, #532]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b83      	ldr	r3, [pc, #524]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b7f      	ldr	r3, [pc, #508]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a7e      	ldr	r2, [pc, #504]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 80008d0:	f043 0308 	orr.w	r3, r3, #8
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b7c      	ldr	r3, [pc, #496]	@ (8000ac8 <MX_GPIO_Init+0x2a4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0308 	and.w	r3, r3, #8
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	2108      	movs	r1, #8
 80008e6:	4879      	ldr	r0, [pc, #484]	@ (8000acc <MX_GPIO_Init+0x2a8>)
 80008e8:	f000 fe18 	bl	800151c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ec:	2201      	movs	r2, #1
 80008ee:	2101      	movs	r1, #1
 80008f0:	4877      	ldr	r0, [pc, #476]	@ (8000ad0 <MX_GPIO_Init+0x2ac>)
 80008f2:	f000 fe13 	bl	800151c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008f6:	2200      	movs	r2, #0
 80008f8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80008fc:	4875      	ldr	r0, [pc, #468]	@ (8000ad4 <MX_GPIO_Init+0x2b0>)
 80008fe:	f000 fe0d 	bl	800151c <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000902:	2308      	movs	r3, #8
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 031c 	add.w	r3, r7, #28
 8000916:	4619      	mov	r1, r3
 8000918:	486c      	ldr	r0, [pc, #432]	@ (8000acc <MX_GPIO_Init+0x2a8>)
 800091a:	f000 fc63 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800091e:	2301      	movs	r3, #1
 8000920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4866      	ldr	r0, [pc, #408]	@ (8000ad0 <MX_GPIO_Init+0x2ac>)
 8000936:	f000 fc55 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800093a:	2308      	movs	r3, #8
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	2300      	movs	r3, #0
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	485e      	ldr	r0, [pc, #376]	@ (8000ad0 <MX_GPIO_Init+0x2ac>)
 8000956:	f000 fc45 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800095a:	2301      	movs	r3, #1
 800095c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800095e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4619      	mov	r1, r3
 800096e:	485a      	ldr	r0, [pc, #360]	@ (8000ad8 <MX_GPIO_Init+0x2b4>)
 8000970:	f000 fc38 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000974:	2310      	movs	r3, #16
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000984:	2306      	movs	r3, #6
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4852      	ldr	r0, [pc, #328]	@ (8000ad8 <MX_GPIO_Init+0x2b4>)
 8000990:	f000 fc28 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000994:	23e0      	movs	r3, #224	@ 0xe0
 8000996:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009a4:	2305      	movs	r3, #5
 80009a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	484a      	ldr	r0, [pc, #296]	@ (8000ad8 <MX_GPIO_Init+0x2b4>)
 80009b0:	f000 fc18 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009b4:	2304      	movs	r3, #4
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4845      	ldr	r0, [pc, #276]	@ (8000adc <MX_GPIO_Init+0x2b8>)
 80009c8:	f000 fc0c 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009de:	2305      	movs	r3, #5
 80009e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	483c      	ldr	r0, [pc, #240]	@ (8000adc <MX_GPIO_Init+0x2b8>)
 80009ea:	f000 fbfb 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ee:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80009f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4833      	ldr	r0, [pc, #204]	@ (8000ad4 <MX_GPIO_Init+0x2b0>)
 8000a08:	f000 fbec 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a0c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a1e:	2306      	movs	r3, #6
 8000a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a22:	f107 031c 	add.w	r3, r7, #28
 8000a26:	4619      	mov	r1, r3
 8000a28:	4829      	ldr	r0, [pc, #164]	@ (8000ad0 <MX_GPIO_Init+0x2ac>)
 8000a2a:	f000 fbdb 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000a2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4825      	ldr	r0, [pc, #148]	@ (8000ad8 <MX_GPIO_Init+0x2b4>)
 8000a44:	f000 fbce 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000a48:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	481c      	ldr	r0, [pc, #112]	@ (8000ad8 <MX_GPIO_Init+0x2b4>)
 8000a66:	f000 fbbd 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a6a:	2320      	movs	r3, #32
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4815      	ldr	r0, [pc, #84]	@ (8000ad4 <MX_GPIO_Init+0x2b0>)
 8000a7e:	f000 fbb1 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a82:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a88:	2312      	movs	r3, #18
 8000a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a94:	2304      	movs	r3, #4
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a98:	f107 031c 	add.w	r3, r7, #28
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	480f      	ldr	r0, [pc, #60]	@ (8000adc <MX_GPIO_Init+0x2b8>)
 8000aa0:	f000 fba0 	bl	80011e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000aa8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000aac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	f107 031c 	add.w	r3, r7, #28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4804      	ldr	r0, [pc, #16]	@ (8000acc <MX_GPIO_Init+0x2a8>)
 8000aba:	f000 fb93 	bl	80011e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000abe:	bf00      	nop
 8000ac0:	3730      	adds	r7, #48	@ 0x30
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800
 8000acc:	40021000 	.word	0x40021000
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020400 	.word	0x40020400

08000ae0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler, so it executes in the interrupt context
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	6078      	str	r0, [r7, #4]
	// Dummy variable used to replace final character in data queue
	uint8_t dummy;

	// Add a small delay to allow timing for message transmission
	for(uint32_t i=0; i<4000; i++)
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e026      	b.n	8000b3c <HAL_UART_RxCpltCallback+0x5c>

	// Check if data is available via UART
	if(!xQueueIsQueueFullFromISR(q_data)) {
 8000aee:	4b22      	ldr	r3, [pc, #136]	@ (8000b78 <HAL_UART_RxCpltCallback+0x98>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4618      	mov	r0, r3
 8000af4:	f003 fae5 	bl	80040c2 <xQueueIsQueueFullFromISR>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d107      	bne.n	8000b0e <HAL_UART_RxCpltCallback+0x2e>
		// Enqueue data byte
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000afe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b78 <HAL_UART_RxCpltCallback+0x98>)
 8000b00:	6818      	ldr	r0, [r3, #0]
 8000b02:	2300      	movs	r3, #0
 8000b04:	2200      	movs	r2, #0
 8000b06:	491d      	ldr	r1, [pc, #116]	@ (8000b7c <HAL_UART_RxCpltCallback+0x9c>)
 8000b08:	f002 ff8a 	bl	8003a20 <xQueueGenericSendFromISR>
 8000b0c:	e013      	b.n	8000b36 <HAL_UART_RxCpltCallback+0x56>
	}
	// If no data available, check if last entered character is newline character
	else {
		if(user_data == '\n') {
 8000b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b7c <HAL_UART_RxCpltCallback+0x9c>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	2b0a      	cmp	r3, #10
 8000b16:	d10e      	bne.n	8000b36 <HAL_UART_RxCpltCallback+0x56>
			// Replace last byte of data queue with '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8000b18:	4b17      	ldr	r3, [pc, #92]	@ (8000b78 <HAL_UART_RxCpltCallback+0x98>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f107 010b 	add.w	r1, r7, #11
 8000b20:	2200      	movs	r2, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f003 f90c 	bl	8003d40 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8000b28:	4b13      	ldr	r3, [pc, #76]	@ (8000b78 <HAL_UART_RxCpltCallback+0x98>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4912      	ldr	r1, [pc, #72]	@ (8000b7c <HAL_UART_RxCpltCallback+0x9c>)
 8000b32:	f002 ff75 	bl	8003a20 <xQueueGenericSendFromISR>
	for(uint32_t i=0; i<4000; i++)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	3301      	adds	r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8000b42:	d3d4      	bcc.n	8000aee <HAL_UART_RxCpltCallback+0xe>
		}
	}

	// Send notification to message handler task if user_data == '\n'
	if(user_data == '\n') {
 8000b44:	4b0d      	ldr	r3, [pc, #52]	@ (8000b7c <HAL_UART_RxCpltCallback+0x9c>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b0a      	cmp	r3, #10
 8000b4c:	d10a      	bne.n	8000b64 <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_message_handler_task, 0, eNoAction, NULL);
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <HAL_UART_RxCpltCallback+0xa0>)
 8000b50:	6818      	ldr	r0, [r3, #0]
 8000b52:	2300      	movs	r3, #0
 8000b54:	9301      	str	r3, [sp, #4]
 8000b56:	2300      	movs	r3, #0
 8000b58:	9300      	str	r3, [sp, #0]
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f004 f9aa 	bl	8004eb8 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in interrupt mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8000b64:	2201      	movs	r2, #1
 8000b66:	4905      	ldr	r1, [pc, #20]	@ (8000b7c <HAL_UART_RxCpltCallback+0x9c>)
 8000b68:	4806      	ldr	r0, [pc, #24]	@ (8000b84 <HAL_UART_RxCpltCallback+0xa4>)
 8000b6a:	f001 fd38 	bl	80025de <HAL_UART_Receive_IT>

}
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000088 	.word	0x20000088
 8000b7c:	2000008c 	.word	0x2000008c
 8000b80:	2000007c 	.word	0x2000007c
 8000b84:	20000034 	.word	0x20000034

08000b88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a04      	ldr	r2, [pc, #16]	@ (8000ba8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d101      	bne.n	8000b9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b9a:	f000 f98f 	bl	8000ebc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40001000 	.word	0x40001000

08000bac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb0:	b672      	cpsid	i
}
 8000bb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <Error_Handler+0x8>

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b10      	ldr	r3, [pc, #64]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bce:	4b0d      	ldr	r3, [pc, #52]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b09      	ldr	r3, [pc, #36]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be2:	4a08      	ldr	r2, [pc, #32]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bea:	4b06      	ldr	r3, [pc, #24]	@ (8000c04 <HAL_MspInit+0x4c>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	@ 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a1d      	ldr	r2, [pc, #116]	@ (8000c9c <HAL_UART_MspInit+0x94>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d133      	bne.n	8000c92 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c32:	4a1b      	ldr	r2, [pc, #108]	@ (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c34:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c56:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_UART_MspInit+0x98>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c62:	230c      	movs	r3, #12
 8000c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c66:	2302      	movs	r3, #2
 8000c68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c72:	2307      	movs	r3, #7
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4809      	ldr	r0, [pc, #36]	@ (8000ca4 <HAL_UART_MspInit+0x9c>)
 8000c7e:	f000 fab1 	bl	80011e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2106      	movs	r1, #6
 8000c86:	2026      	movs	r0, #38	@ 0x26
 8000c88:	f000 f9f0 	bl	800106c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000c8c:	2026      	movs	r0, #38	@ 0x26
 8000c8e:	f000 fa09 	bl	80010a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	@ 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40004400 	.word	0x40004400
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	@ 0x38
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	4b33      	ldr	r3, [pc, #204]	@ (8000d8c <HAL_InitTick+0xe4>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc0:	4a32      	ldr	r2, [pc, #200]	@ (8000d8c <HAL_InitTick+0xe4>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cc8:	4b30      	ldr	r3, [pc, #192]	@ (8000d8c <HAL_InitTick+0xe4>)
 8000cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cd4:	f107 0210 	add.w	r2, r7, #16
 8000cd8:	f107 0314 	add.w	r3, r7, #20
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f001 f8ce 	bl	8001e80 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ce4:	6a3b      	ldr	r3, [r7, #32]
 8000ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d103      	bne.n	8000cf6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cee:	f001 f89f 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8000cf2:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cf4:	e004      	b.n	8000d00 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cf6:	f001 f89b 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	005b      	lsls	r3, r3, #1
 8000cfe:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d02:	4a23      	ldr	r2, [pc, #140]	@ (8000d90 <HAL_InitTick+0xe8>)
 8000d04:	fba2 2303 	umull	r2, r3, r2, r3
 8000d08:	0c9b      	lsrs	r3, r3, #18
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d0e:	4b21      	ldr	r3, [pc, #132]	@ (8000d94 <HAL_InitTick+0xec>)
 8000d10:	4a21      	ldr	r2, [pc, #132]	@ (8000d98 <HAL_InitTick+0xf0>)
 8000d12:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d14:	4b1f      	ldr	r3, [pc, #124]	@ (8000d94 <HAL_InitTick+0xec>)
 8000d16:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d1a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8000d94 <HAL_InitTick+0xec>)
 8000d1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d20:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d22:	4b1c      	ldr	r3, [pc, #112]	@ (8000d94 <HAL_InitTick+0xec>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d28:	4b1a      	ldr	r3, [pc, #104]	@ (8000d94 <HAL_InitTick+0xec>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <HAL_InitTick+0xec>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d34:	4817      	ldr	r0, [pc, #92]	@ (8000d94 <HAL_InitTick+0xec>)
 8000d36:	f001 f8d5 	bl	8001ee4 <HAL_TIM_Base_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d40:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d11b      	bne.n	8000d80 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d48:	4812      	ldr	r0, [pc, #72]	@ (8000d94 <HAL_InitTick+0xec>)
 8000d4a:	f001 f925 	bl	8001f98 <HAL_TIM_Base_Start_IT>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d111      	bne.n	8000d80 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d5c:	2036      	movs	r0, #54	@ 0x36
 8000d5e:	f000 f9a1 	bl	80010a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2b0f      	cmp	r3, #15
 8000d66:	d808      	bhi.n	8000d7a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	2036      	movs	r0, #54	@ 0x36
 8000d6e:	f000 f97d 	bl	800106c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d72:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <HAL_InitTick+0xf4>)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6013      	str	r3, [r2, #0]
 8000d78:	e002      	b.n	8000d80 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3738      	adds	r7, #56	@ 0x38
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	431bde83 	.word	0x431bde83
 8000d94:	20000090 	.word	0x20000090
 8000d98:	40001000 	.word	0x40001000
 8000d9c:	20000008 	.word	0x20000008

08000da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <NMI_Handler+0x4>

08000da8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <HardFault_Handler+0x4>

08000db0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <MemManage_Handler+0x4>

08000db8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <BusFault_Handler+0x4>

08000dc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dc4:	bf00      	nop
 8000dc6:	e7fd      	b.n	8000dc4 <UsageFault_Handler+0x4>

08000dc8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
	...

08000dd8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ddc:	4802      	ldr	r0, [pc, #8]	@ (8000de8 <USART2_IRQHandler+0x10>)
 8000dde:	f001 fc23 	bl	8002628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000034 	.word	0x20000034

08000dec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000df0:	4802      	ldr	r0, [pc, #8]	@ (8000dfc <TIM6_DAC_IRQHandler+0x10>)
 8000df2:	f001 f941 	bl	8002078 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000090 	.word	0x20000090

08000e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e04:	4b06      	ldr	r3, [pc, #24]	@ (8000e20 <SystemInit+0x20>)
 8000e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e0a:	4a05      	ldr	r2, [pc, #20]	@ (8000e20 <SystemInit+0x20>)
 8000e0c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e10:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e14:	bf00      	nop
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000ed00 	.word	0xe000ed00

08000e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e24:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e5c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e28:	f7ff ffea 	bl	8000e00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e2c:	480c      	ldr	r0, [pc, #48]	@ (8000e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e2e:	490d      	ldr	r1, [pc, #52]	@ (8000e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e30:	4a0d      	ldr	r2, [pc, #52]	@ (8000e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e34:	e002      	b.n	8000e3c <LoopCopyDataInit>

08000e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e3a:	3304      	adds	r3, #4

08000e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e40:	d3f9      	bcc.n	8000e36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e42:	4a0a      	ldr	r2, [pc, #40]	@ (8000e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e44:	4c0a      	ldr	r4, [pc, #40]	@ (8000e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e48:	e001      	b.n	8000e4e <LoopFillZerobss>

08000e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e4c:	3204      	adds	r2, #4

08000e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e50:	d3fb      	bcc.n	8000e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e52:	f005 f91f 	bl	8006094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e56:	f7ff fbc5 	bl	80005e4 <main>
  bx  lr    
 8000e5a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e5c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e64:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000e68:	080061a0 	.word	0x080061a0
  ldr r2, =_sbss
 8000e6c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000e70:	20019284 	.word	0x20019284

08000e74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e74:	e7fe      	b.n	8000e74 <ADC_IRQHandler>
	...

08000e78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000eb8 <HAL_Init+0x40>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0d      	ldr	r2, [pc, #52]	@ (8000eb8 <HAL_Init+0x40>)
 8000e82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e86:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb8 <HAL_Init+0x40>)
 8000e8e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e92:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e94:	4b08      	ldr	r3, [pc, #32]	@ (8000eb8 <HAL_Init+0x40>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a07      	ldr	r2, [pc, #28]	@ (8000eb8 <HAL_Init+0x40>)
 8000e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e9e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea0:	2003      	movs	r0, #3
 8000ea2:	f000 f8d8 	bl	8001056 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ea6:	200f      	movs	r0, #15
 8000ea8:	f7ff fefe 	bl	8000ca8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eac:	f7ff fe84 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023c00 	.word	0x40023c00

08000ebc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_IncTick+0x20>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	461a      	mov	r2, r3
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <HAL_IncTick+0x24>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	4a04      	ldr	r2, [pc, #16]	@ (8000ee0 <HAL_IncTick+0x24>)
 8000ece:	6013      	str	r3, [r2, #0]
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2000000c 	.word	0x2000000c
 8000ee0:	200000d8 	.word	0x200000d8

08000ee4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee8:	4b03      	ldr	r3, [pc, #12]	@ (8000ef8 <HAL_GetTick+0x14>)
 8000eea:	681b      	ldr	r3, [r3, #0]
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	200000d8 	.word	0x200000d8

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	@ (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	@ (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4907      	ldr	r1, [pc, #28]	@ (8000f98 <__NVIC_EnableIRQ+0x38>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000e100 	.word	0xe000e100

08000f9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	6039      	str	r1, [r7, #0]
 8000fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db0a      	blt.n	8000fc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	490c      	ldr	r1, [pc, #48]	@ (8000fe8 <__NVIC_SetPriority+0x4c>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	0112      	lsls	r2, r2, #4
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	440b      	add	r3, r1
 8000fc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc4:	e00a      	b.n	8000fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4908      	ldr	r1, [pc, #32]	@ (8000fec <__NVIC_SetPriority+0x50>)
 8000fcc:	79fb      	ldrb	r3, [r7, #7]
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	3b04      	subs	r3, #4
 8000fd4:	0112      	lsls	r2, r2, #4
 8000fd6:	b2d2      	uxtb	r2, r2
 8000fd8:	440b      	add	r3, r1
 8000fda:	761a      	strb	r2, [r3, #24]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000e100 	.word	0xe000e100
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b089      	sub	sp, #36	@ 0x24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	f1c3 0307 	rsb	r3, r3, #7
 800100a:	2b04      	cmp	r3, #4
 800100c:	bf28      	it	cs
 800100e:	2304      	movcs	r3, #4
 8001010:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3304      	adds	r3, #4
 8001016:	2b06      	cmp	r3, #6
 8001018:	d902      	bls.n	8001020 <NVIC_EncodePriority+0x30>
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	3b03      	subs	r3, #3
 800101e:	e000      	b.n	8001022 <NVIC_EncodePriority+0x32>
 8001020:	2300      	movs	r3, #0
 8001022:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001024:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43da      	mvns	r2, r3
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	401a      	ands	r2, r3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001038:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	43d9      	mvns	r1, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001048:	4313      	orrs	r3, r2
         );
}
 800104a:	4618      	mov	r0, r3
 800104c:	3724      	adds	r7, #36	@ 0x24
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr

08001056 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ff4c 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
 8001078:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107e:	f7ff ff61 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 8001082:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	68b9      	ldr	r1, [r7, #8]
 8001088:	6978      	ldr	r0, [r7, #20]
 800108a:	f7ff ffb1 	bl	8000ff0 <NVIC_EncodePriority>
 800108e:	4602      	mov	r2, r0
 8001090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001094:	4611      	mov	r1, r2
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff80 	bl	8000f9c <__NVIC_SetPriority>
}
 800109c:	bf00      	nop
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff54 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80010cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80010ce:	f7ff ff09 	bl	8000ee4 <HAL_GetTick>
 80010d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d008      	beq.n	80010f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2280      	movs	r2, #128	@ 0x80
 80010e4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e052      	b.n	8001198 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0216 	bic.w	r2, r2, #22
 8001100:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	695a      	ldr	r2, [r3, #20]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001110:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	2b00      	cmp	r3, #0
 8001118:	d103      	bne.n	8001122 <HAL_DMA_Abort+0x62>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800111e:	2b00      	cmp	r3, #0
 8001120:	d007      	beq.n	8001132 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681a      	ldr	r2, [r3, #0]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f022 0208 	bic.w	r2, r2, #8
 8001130:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f022 0201 	bic.w	r2, r2, #1
 8001140:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001142:	e013      	b.n	800116c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001144:	f7ff fece 	bl	8000ee4 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b05      	cmp	r3, #5
 8001150:	d90c      	bls.n	800116c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2220      	movs	r2, #32
 8001156:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2203      	movs	r2, #3
 800115c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2200      	movs	r2, #0
 8001164:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001168:	2303      	movs	r3, #3
 800116a:	e015      	b.n	8001198 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1e4      	bne.n	8001144 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800117e:	223f      	movs	r2, #63	@ 0x3f
 8001180:	409a      	lsls	r2, r3
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001196:	2300      	movs	r3, #0
}
 8001198:	4618      	mov	r0, r3
 800119a:	3710      	adds	r7, #16
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d004      	beq.n	80011be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2280      	movs	r2, #128	@ 0x80
 80011b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00c      	b.n	80011d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2205      	movs	r2, #5
 80011c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f022 0201 	bic.w	r2, r2, #1
 80011d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	4618      	mov	r0, r3
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b089      	sub	sp, #36	@ 0x24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	e16b      	b.n	80014d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001200:	2201      	movs	r2, #1
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4013      	ands	r3, r2
 8001212:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	429a      	cmp	r2, r3
 800121a:	f040 815a 	bne.w	80014d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b01      	cmp	r3, #1
 8001228:	d005      	beq.n	8001236 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001232:	2b02      	cmp	r3, #2
 8001234:	d130      	bne.n	8001298 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	2203      	movs	r2, #3
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	68da      	ldr	r2, [r3, #12]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	fa02 f303 	lsl.w	r3, r2, r3
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800126c:	2201      	movs	r2, #1
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	091b      	lsrs	r3, r3, #4
 8001282:	f003 0201 	and.w	r2, r3, #1
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69ba      	ldr	r2, [r7, #24]
 8001296:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0303 	and.w	r3, r3, #3
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	d017      	beq.n	80012d4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	2203      	movs	r2, #3
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4013      	ands	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	689a      	ldr	r2, [r3, #8]
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d123      	bne.n	8001328 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	f003 0307 	and.w	r3, r3, #7
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	220f      	movs	r2, #15
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	691a      	ldr	r2, [r3, #16]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4313      	orrs	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131a:	69fb      	ldr	r3, [r7, #28]
 800131c:	08da      	lsrs	r2, r3, #3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	3208      	adds	r2, #8
 8001322:	69b9      	ldr	r1, [r7, #24]
 8001324:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	2203      	movs	r2, #3
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0203 	and.w	r2, r3, #3
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4313      	orrs	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80b4 	beq.w	80014d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b60      	ldr	r3, [pc, #384]	@ (80014f0 <HAL_GPIO_Init+0x30c>)
 8001370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001372:	4a5f      	ldr	r2, [pc, #380]	@ (80014f0 <HAL_GPIO_Init+0x30c>)
 8001374:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001378:	6453      	str	r3, [r2, #68]	@ 0x44
 800137a:	4b5d      	ldr	r3, [pc, #372]	@ (80014f0 <HAL_GPIO_Init+0x30c>)
 800137c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001386:	4a5b      	ldr	r2, [pc, #364]	@ (80014f4 <HAL_GPIO_Init+0x310>)
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001392:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f003 0303 	and.w	r3, r3, #3
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	220f      	movs	r2, #15
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a52      	ldr	r2, [pc, #328]	@ (80014f8 <HAL_GPIO_Init+0x314>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d02b      	beq.n	800140a <HAL_GPIO_Init+0x226>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a51      	ldr	r2, [pc, #324]	@ (80014fc <HAL_GPIO_Init+0x318>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d025      	beq.n	8001406 <HAL_GPIO_Init+0x222>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a50      	ldr	r2, [pc, #320]	@ (8001500 <HAL_GPIO_Init+0x31c>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d01f      	beq.n	8001402 <HAL_GPIO_Init+0x21e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a4f      	ldr	r2, [pc, #316]	@ (8001504 <HAL_GPIO_Init+0x320>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d019      	beq.n	80013fe <HAL_GPIO_Init+0x21a>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a4e      	ldr	r2, [pc, #312]	@ (8001508 <HAL_GPIO_Init+0x324>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d013      	beq.n	80013fa <HAL_GPIO_Init+0x216>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a4d      	ldr	r2, [pc, #308]	@ (800150c <HAL_GPIO_Init+0x328>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d00d      	beq.n	80013f6 <HAL_GPIO_Init+0x212>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a4c      	ldr	r2, [pc, #304]	@ (8001510 <HAL_GPIO_Init+0x32c>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d007      	beq.n	80013f2 <HAL_GPIO_Init+0x20e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4a4b      	ldr	r2, [pc, #300]	@ (8001514 <HAL_GPIO_Init+0x330>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d101      	bne.n	80013ee <HAL_GPIO_Init+0x20a>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00e      	b.n	800140c <HAL_GPIO_Init+0x228>
 80013ee:	2308      	movs	r3, #8
 80013f0:	e00c      	b.n	800140c <HAL_GPIO_Init+0x228>
 80013f2:	2306      	movs	r3, #6
 80013f4:	e00a      	b.n	800140c <HAL_GPIO_Init+0x228>
 80013f6:	2305      	movs	r3, #5
 80013f8:	e008      	b.n	800140c <HAL_GPIO_Init+0x228>
 80013fa:	2304      	movs	r3, #4
 80013fc:	e006      	b.n	800140c <HAL_GPIO_Init+0x228>
 80013fe:	2303      	movs	r3, #3
 8001400:	e004      	b.n	800140c <HAL_GPIO_Init+0x228>
 8001402:	2302      	movs	r3, #2
 8001404:	e002      	b.n	800140c <HAL_GPIO_Init+0x228>
 8001406:	2301      	movs	r3, #1
 8001408:	e000      	b.n	800140c <HAL_GPIO_Init+0x228>
 800140a:	2300      	movs	r3, #0
 800140c:	69fa      	ldr	r2, [r7, #28]
 800140e:	f002 0203 	and.w	r2, r2, #3
 8001412:	0092      	lsls	r2, r2, #2
 8001414:	4093      	lsls	r3, r2
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4313      	orrs	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800141c:	4935      	ldr	r1, [pc, #212]	@ (80014f4 <HAL_GPIO_Init+0x310>)
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	089b      	lsrs	r3, r3, #2
 8001422:	3302      	adds	r3, #2
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800142a:	4b3b      	ldr	r3, [pc, #236]	@ (8001518 <HAL_GPIO_Init+0x334>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144e:	4a32      	ldr	r2, [pc, #200]	@ (8001518 <HAL_GPIO_Init+0x334>)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001454:	4b30      	ldr	r3, [pc, #192]	@ (8001518 <HAL_GPIO_Init+0x334>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d003      	beq.n	8001478 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001478:	4a27      	ldr	r2, [pc, #156]	@ (8001518 <HAL_GPIO_Init+0x334>)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800147e:	4b26      	ldr	r3, [pc, #152]	@ (8001518 <HAL_GPIO_Init+0x334>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	43db      	mvns	r3, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4013      	ands	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800149a:	69ba      	ldr	r2, [r7, #24]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001518 <HAL_GPIO_Init+0x334>)
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001518 <HAL_GPIO_Init+0x334>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d003      	beq.n	80014cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4313      	orrs	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014cc:	4a12      	ldr	r2, [pc, #72]	@ (8001518 <HAL_GPIO_Init+0x334>)
 80014ce:	69bb      	ldr	r3, [r7, #24]
 80014d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	3301      	adds	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	2b0f      	cmp	r3, #15
 80014dc:	f67f ae90 	bls.w	8001200 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3724      	adds	r7, #36	@ 0x24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40013800 	.word	0x40013800
 80014f8:	40020000 	.word	0x40020000
 80014fc:	40020400 	.word	0x40020400
 8001500:	40020800 	.word	0x40020800
 8001504:	40020c00 	.word	0x40020c00
 8001508:	40021000 	.word	0x40021000
 800150c:	40021400 	.word	0x40021400
 8001510:	40021800 	.word	0x40021800
 8001514:	40021c00 	.word	0x40021c00
 8001518:	40013c00 	.word	0x40013c00

0800151c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	807b      	strh	r3, [r7, #2]
 8001528:	4613      	mov	r3, r2
 800152a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800152c:	787b      	ldrb	r3, [r7, #1]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001538:	e003      	b.n	8001542 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800153a:	887b      	ldrh	r3, [r7, #2]
 800153c:	041a      	lsls	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	619a      	str	r2, [r3, #24]
}
 8001542:	bf00      	nop
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d101      	bne.n	8001562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e267      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	2b00      	cmp	r3, #0
 800156c:	d075      	beq.n	800165a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800156e:	4b88      	ldr	r3, [pc, #544]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b04      	cmp	r3, #4
 8001578:	d00c      	beq.n	8001594 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800157a:	4b85      	ldr	r3, [pc, #532]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001582:	2b08      	cmp	r3, #8
 8001584:	d112      	bne.n	80015ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001586:	4b82      	ldr	r3, [pc, #520]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800158e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001592:	d10b      	bne.n	80015ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001594:	4b7e      	ldr	r3, [pc, #504]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d05b      	beq.n	8001658 <HAL_RCC_OscConfig+0x108>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d157      	bne.n	8001658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e242      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015b4:	d106      	bne.n	80015c4 <HAL_RCC_OscConfig+0x74>
 80015b6:	4b76      	ldr	r3, [pc, #472]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a75      	ldr	r2, [pc, #468]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80015bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	e01d      	b.n	8001600 <HAL_RCC_OscConfig+0xb0>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015cc:	d10c      	bne.n	80015e8 <HAL_RCC_OscConfig+0x98>
 80015ce:	4b70      	ldr	r3, [pc, #448]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80015d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	4b6d      	ldr	r3, [pc, #436]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a6c      	ldr	r2, [pc, #432]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80015e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e4:	6013      	str	r3, [r2, #0]
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0xb0>
 80015e8:	4b69      	ldr	r3, [pc, #420]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a68      	ldr	r2, [pc, #416]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80015ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b66      	ldr	r3, [pc, #408]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a65      	ldr	r2, [pc, #404]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80015fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d013      	beq.n	8001630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001608:	f7ff fc6c 	bl	8000ee4 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001610:	f7ff fc68 	bl	8000ee4 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b64      	cmp	r3, #100	@ 0x64
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e207      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	4b5b      	ldr	r3, [pc, #364]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0xc0>
 800162e:	e014      	b.n	800165a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001630:	f7ff fc58 	bl	8000ee4 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fc54 	bl	8000ee4 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	@ 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e1f3      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164a:	4b51      	ldr	r3, [pc, #324]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1f0      	bne.n	8001638 <HAL_RCC_OscConfig+0xe8>
 8001656:	e000      	b.n	800165a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 0302 	and.w	r3, r3, #2
 8001662:	2b00      	cmp	r3, #0
 8001664:	d063      	beq.n	800172e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001666:	4b4a      	ldr	r3, [pc, #296]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b00      	cmp	r3, #0
 8001670:	d00b      	beq.n	800168a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001672:	4b47      	ldr	r3, [pc, #284]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800167a:	2b08      	cmp	r3, #8
 800167c:	d11c      	bne.n	80016b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167e:	4b44      	ldr	r3, [pc, #272]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d116      	bne.n	80016b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168a:	4b41      	ldr	r3, [pc, #260]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <HAL_RCC_OscConfig+0x152>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	2b01      	cmp	r3, #1
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e1c7      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4937      	ldr	r1, [pc, #220]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016b6:	e03a      	b.n	800172e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d020      	beq.n	8001702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c0:	4b34      	ldr	r3, [pc, #208]	@ (8001794 <HAL_RCC_OscConfig+0x244>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff fc0d 	bl	8000ee4 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ce:	f7ff fc09 	bl	8000ee4 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e1a8      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d0f0      	beq.n	80016ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ec:	4b28      	ldr	r3, [pc, #160]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	4925      	ldr	r1, [pc, #148]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	600b      	str	r3, [r1, #0]
 8001700:	e015      	b.n	800172e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001702:	4b24      	ldr	r3, [pc, #144]	@ (8001794 <HAL_RCC_OscConfig+0x244>)
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fbec 	bl	8000ee4 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001710:	f7ff fbe8 	bl	8000ee4 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b02      	cmp	r3, #2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e187      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001722:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0308 	and.w	r3, r3, #8
 8001736:	2b00      	cmp	r3, #0
 8001738:	d036      	beq.n	80017a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	695b      	ldr	r3, [r3, #20]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d016      	beq.n	8001770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <HAL_RCC_OscConfig+0x248>)
 8001744:	2201      	movs	r2, #1
 8001746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001748:	f7ff fbcc 	bl	8000ee4 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001750:	f7ff fbc8 	bl	8000ee4 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b02      	cmp	r3, #2
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e167      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_RCC_OscConfig+0x240>)
 8001764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d0f0      	beq.n	8001750 <HAL_RCC_OscConfig+0x200>
 800176e:	e01b      	b.n	80017a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001770:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_RCC_OscConfig+0x248>)
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff fbb5 	bl	8000ee4 <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800177c:	e00e      	b.n	800179c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800177e:	f7ff fbb1 	bl	8000ee4 <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d907      	bls.n	800179c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e150      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
 8001790:	40023800 	.word	0x40023800
 8001794:	42470000 	.word	0x42470000
 8001798:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179c:	4b88      	ldr	r3, [pc, #544]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 800179e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d1ea      	bne.n	800177e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0304 	and.w	r3, r3, #4
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	f000 8097 	beq.w	80018e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b6:	2300      	movs	r3, #0
 80017b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ba:	4b81      	ldr	r3, [pc, #516]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10f      	bne.n	80017e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	4b7d      	ldr	r3, [pc, #500]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	4a7c      	ldr	r2, [pc, #496]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 80017d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017d6:	4b7a      	ldr	r3, [pc, #488]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017e2:	2301      	movs	r3, #1
 80017e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b77      	ldr	r3, [pc, #476]	@ (80019c4 <HAL_RCC_OscConfig+0x474>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d118      	bne.n	8001824 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f2:	4b74      	ldr	r3, [pc, #464]	@ (80019c4 <HAL_RCC_OscConfig+0x474>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a73      	ldr	r2, [pc, #460]	@ (80019c4 <HAL_RCC_OscConfig+0x474>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fb71 	bl	8000ee4 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001804:	e008      	b.n	8001818 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001806:	f7ff fb6d 	bl	8000ee4 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d901      	bls.n	8001818 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001814:	2303      	movs	r3, #3
 8001816:	e10c      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001818:	4b6a      	ldr	r3, [pc, #424]	@ (80019c4 <HAL_RCC_OscConfig+0x474>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f0      	beq.n	8001806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b01      	cmp	r3, #1
 800182a:	d106      	bne.n	800183a <HAL_RCC_OscConfig+0x2ea>
 800182c:	4b64      	ldr	r3, [pc, #400]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 800182e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001830:	4a63      	ldr	r2, [pc, #396]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6713      	str	r3, [r2, #112]	@ 0x70
 8001838:	e01c      	b.n	8001874 <HAL_RCC_OscConfig+0x324>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b05      	cmp	r3, #5
 8001840:	d10c      	bne.n	800185c <HAL_RCC_OscConfig+0x30c>
 8001842:	4b5f      	ldr	r3, [pc, #380]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 8001844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001846:	4a5e      	ldr	r2, [pc, #376]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 8001848:	f043 0304 	orr.w	r3, r3, #4
 800184c:	6713      	str	r3, [r2, #112]	@ 0x70
 800184e:	4b5c      	ldr	r3, [pc, #368]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001852:	4a5b      	ldr	r2, [pc, #364]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 8001854:	f043 0301 	orr.w	r3, r3, #1
 8001858:	6713      	str	r3, [r2, #112]	@ 0x70
 800185a:	e00b      	b.n	8001874 <HAL_RCC_OscConfig+0x324>
 800185c:	4b58      	ldr	r3, [pc, #352]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 800185e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001860:	4a57      	ldr	r2, [pc, #348]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 8001862:	f023 0301 	bic.w	r3, r3, #1
 8001866:	6713      	str	r3, [r2, #112]	@ 0x70
 8001868:	4b55      	ldr	r3, [pc, #340]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 800186a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800186c:	4a54      	ldr	r2, [pc, #336]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 800186e:	f023 0304 	bic.w	r3, r3, #4
 8001872:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d015      	beq.n	80018a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fb32 	bl	8000ee4 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001882:	e00a      	b.n	800189a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7ff fb2e 	bl	8000ee4 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e0cb      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800189a:	4b49      	ldr	r3, [pc, #292]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d0ee      	beq.n	8001884 <HAL_RCC_OscConfig+0x334>
 80018a6:	e014      	b.n	80018d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018a8:	f7ff fb1c 	bl	8000ee4 <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ae:	e00a      	b.n	80018c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f7ff fb18 	bl	8000ee4 <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018be:	4293      	cmp	r3, r2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e0b5      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018c6:	4b3e      	ldr	r3, [pc, #248]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 80018c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1ee      	bne.n	80018b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018d8:	4b39      	ldr	r3, [pc, #228]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	4a38      	ldr	r2, [pc, #224]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 80018de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80a1 	beq.w	8001a30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018ee:	4b34      	ldr	r3, [pc, #208]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d05c      	beq.n	80019b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d141      	bne.n	8001986 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001902:	4b31      	ldr	r3, [pc, #196]	@ (80019c8 <HAL_RCC_OscConfig+0x478>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001908:	f7ff faec 	bl	8000ee4 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001910:	f7ff fae8 	bl	8000ee4 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e087      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001922:	4b27      	ldr	r3, [pc, #156]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	69da      	ldr	r2, [r3, #28]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6a1b      	ldr	r3, [r3, #32]
 8001936:	431a      	orrs	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800193c:	019b      	lsls	r3, r3, #6
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001944:	085b      	lsrs	r3, r3, #1
 8001946:	3b01      	subs	r3, #1
 8001948:	041b      	lsls	r3, r3, #16
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001950:	061b      	lsls	r3, r3, #24
 8001952:	491b      	ldr	r1, [pc, #108]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001958:	4b1b      	ldr	r3, [pc, #108]	@ (80019c8 <HAL_RCC_OscConfig+0x478>)
 800195a:	2201      	movs	r2, #1
 800195c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195e:	f7ff fac1 	bl	8000ee4 <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff fabd 	bl	8000ee4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e05c      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001978:	4b11      	ldr	r3, [pc, #68]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x416>
 8001984:	e054      	b.n	8001a30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001986:	4b10      	ldr	r3, [pc, #64]	@ (80019c8 <HAL_RCC_OscConfig+0x478>)
 8001988:	2200      	movs	r2, #0
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800198c:	f7ff faaa 	bl	8000ee4 <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff faa6 	bl	8000ee4 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e045      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a6:	4b06      	ldr	r3, [pc, #24]	@ (80019c0 <HAL_RCC_OscConfig+0x470>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1f0      	bne.n	8001994 <HAL_RCC_OscConfig+0x444>
 80019b2:	e03d      	b.n	8001a30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d107      	bne.n	80019cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e038      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40007000 	.word	0x40007000
 80019c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a3c <HAL_RCC_OscConfig+0x4ec>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d028      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d121      	bne.n	8001a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d11a      	bne.n	8001a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019f6:	68fa      	ldr	r2, [r7, #12]
 80019f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d111      	bne.n	8001a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a12:	085b      	lsrs	r3, r3, #1
 8001a14:	3b01      	subs	r3, #1
 8001a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d001      	beq.n	8001a30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a2c:	2301      	movs	r3, #1
 8001a2e:	e000      	b.n	8001a32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3718      	adds	r7, #24
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	40023800 	.word	0x40023800

08001a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d101      	bne.n	8001a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e0cc      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a54:	4b68      	ldr	r3, [pc, #416]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0307 	and.w	r3, r3, #7
 8001a5c:	683a      	ldr	r2, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	d90c      	bls.n	8001a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a62:	4b65      	ldr	r3, [pc, #404]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a64:	683a      	ldr	r2, [r7, #0]
 8001a66:	b2d2      	uxtb	r2, r2
 8001a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a6a:	4b63      	ldr	r3, [pc, #396]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	683a      	ldr	r2, [r7, #0]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d001      	beq.n	8001a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0b8      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d020      	beq.n	8001aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0304 	and.w	r3, r3, #4
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d005      	beq.n	8001aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a94:	4b59      	ldr	r3, [pc, #356]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a58      	ldr	r2, [pc, #352]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d005      	beq.n	8001ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aac:	4b53      	ldr	r3, [pc, #332]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	4a52      	ldr	r2, [pc, #328]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ab8:	4b50      	ldr	r3, [pc, #320]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	494d      	ldr	r1, [pc, #308]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0301 	and.w	r3, r3, #1
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d044      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b01      	cmp	r3, #1
 8001adc:	d107      	bne.n	8001aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	4b47      	ldr	r3, [pc, #284]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d119      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e07f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d003      	beq.n	8001afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afe:	4b3f      	ldr	r3, [pc, #252]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d109      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e06f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e067      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1e:	4b37      	ldr	r3, [pc, #220]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f023 0203 	bic.w	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4934      	ldr	r1, [pc, #208]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b30:	f7ff f9d8 	bl	8000ee4 <HAL_GetTick>
 8001b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff f9d4 	bl	8000ee4 <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e04f      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f003 020c 	and.w	r2, r3, #12
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d1eb      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b60:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	683a      	ldr	r2, [r7, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d20c      	bcs.n	8001b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b6e:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b70:	683a      	ldr	r2, [r7, #0]
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0307 	and.w	r3, r3, #7
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d001      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e032      	b.n	8001bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d008      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b94:	4b19      	ldr	r3, [pc, #100]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	4916      	ldr	r1, [pc, #88]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0308 	and.w	r3, r3, #8
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d009      	beq.n	8001bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bb2:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	490e      	ldr	r1, [pc, #56]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bc6:	f000 f821 	bl	8001c0c <HAL_RCC_GetSysClockFreq>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001bfc <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	490a      	ldr	r1, [pc, #40]	@ (8001c00 <HAL_RCC_ClockConfig+0x1c0>)
 8001bd8:	5ccb      	ldrb	r3, [r1, r3]
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	4a09      	ldr	r2, [pc, #36]	@ (8001c04 <HAL_RCC_ClockConfig+0x1c4>)
 8001be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001be2:	4b09      	ldr	r3, [pc, #36]	@ (8001c08 <HAL_RCC_ClockConfig+0x1c8>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff f85e 	bl	8000ca8 <HAL_InitTick>

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023c00 	.word	0x40023c00
 8001bfc:	40023800 	.word	0x40023800
 8001c00:	08006178 	.word	0x08006178
 8001c04:	20000004 	.word	0x20000004
 8001c08:	20000008 	.word	0x20000008

08001c0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c10:	b094      	sub	sp, #80	@ 0x50
 8001c12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	647b      	str	r3, [r7, #68]	@ 0x44
 8001c18:	2300      	movs	r3, #0
 8001c1a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c24:	4b79      	ldr	r3, [pc, #484]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 030c 	and.w	r3, r3, #12
 8001c2c:	2b08      	cmp	r3, #8
 8001c2e:	d00d      	beq.n	8001c4c <HAL_RCC_GetSysClockFreq+0x40>
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	f200 80e1 	bhi.w	8001df8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <HAL_RCC_GetSysClockFreq+0x34>
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d003      	beq.n	8001c46 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c3e:	e0db      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c40:	4b73      	ldr	r3, [pc, #460]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c42:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001c44:	e0db      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c46:	4b73      	ldr	r3, [pc, #460]	@ (8001e14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c4a:	e0d8      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c4c:	4b6f      	ldr	r3, [pc, #444]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c54:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c56:	4b6d      	ldr	r3, [pc, #436]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d063      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c62:	4b6a      	ldr	r3, [pc, #424]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	099b      	lsrs	r3, r3, #6
 8001c68:	2200      	movs	r2, #0
 8001c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c74:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c7a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c7e:	4622      	mov	r2, r4
 8001c80:	462b      	mov	r3, r5
 8001c82:	f04f 0000 	mov.w	r0, #0
 8001c86:	f04f 0100 	mov.w	r1, #0
 8001c8a:	0159      	lsls	r1, r3, #5
 8001c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c90:	0150      	lsls	r0, r2, #5
 8001c92:	4602      	mov	r2, r0
 8001c94:	460b      	mov	r3, r1
 8001c96:	4621      	mov	r1, r4
 8001c98:	1a51      	subs	r1, r2, r1
 8001c9a:	6139      	str	r1, [r7, #16]
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	eb63 0301 	sbc.w	r3, r3, r1
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	f04f 0200 	mov.w	r2, #0
 8001ca8:	f04f 0300 	mov.w	r3, #0
 8001cac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cb0:	4659      	mov	r1, fp
 8001cb2:	018b      	lsls	r3, r1, #6
 8001cb4:	4651      	mov	r1, sl
 8001cb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cba:	4651      	mov	r1, sl
 8001cbc:	018a      	lsls	r2, r1, #6
 8001cbe:	4651      	mov	r1, sl
 8001cc0:	ebb2 0801 	subs.w	r8, r2, r1
 8001cc4:	4659      	mov	r1, fp
 8001cc6:	eb63 0901 	sbc.w	r9, r3, r1
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001cde:	4690      	mov	r8, r2
 8001ce0:	4699      	mov	r9, r3
 8001ce2:	4623      	mov	r3, r4
 8001ce4:	eb18 0303 	adds.w	r3, r8, r3
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	462b      	mov	r3, r5
 8001cec:	eb49 0303 	adc.w	r3, r9, r3
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	f04f 0200 	mov.w	r2, #0
 8001cf6:	f04f 0300 	mov.w	r3, #0
 8001cfa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001cfe:	4629      	mov	r1, r5
 8001d00:	024b      	lsls	r3, r1, #9
 8001d02:	4621      	mov	r1, r4
 8001d04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d08:	4621      	mov	r1, r4
 8001d0a:	024a      	lsls	r2, r1, #9
 8001d0c:	4610      	mov	r0, r2
 8001d0e:	4619      	mov	r1, r3
 8001d10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d12:	2200      	movs	r2, #0
 8001d14:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d1c:	f7fe fa60 	bl	80001e0 <__aeabi_uldivmod>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4613      	mov	r3, r2
 8001d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001d28:	e058      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d2a:	4b38      	ldr	r3, [pc, #224]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	099b      	lsrs	r3, r3, #6
 8001d30:	2200      	movs	r2, #0
 8001d32:	4618      	mov	r0, r3
 8001d34:	4611      	mov	r1, r2
 8001d36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d3a:	623b      	str	r3, [r7, #32]
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d44:	4642      	mov	r2, r8
 8001d46:	464b      	mov	r3, r9
 8001d48:	f04f 0000 	mov.w	r0, #0
 8001d4c:	f04f 0100 	mov.w	r1, #0
 8001d50:	0159      	lsls	r1, r3, #5
 8001d52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d56:	0150      	lsls	r0, r2, #5
 8001d58:	4602      	mov	r2, r0
 8001d5a:	460b      	mov	r3, r1
 8001d5c:	4641      	mov	r1, r8
 8001d5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001d62:	4649      	mov	r1, r9
 8001d64:	eb63 0b01 	sbc.w	fp, r3, r1
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d7c:	ebb2 040a 	subs.w	r4, r2, sl
 8001d80:	eb63 050b 	sbc.w	r5, r3, fp
 8001d84:	f04f 0200 	mov.w	r2, #0
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	00eb      	lsls	r3, r5, #3
 8001d8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d92:	00e2      	lsls	r2, r4, #3
 8001d94:	4614      	mov	r4, r2
 8001d96:	461d      	mov	r5, r3
 8001d98:	4643      	mov	r3, r8
 8001d9a:	18e3      	adds	r3, r4, r3
 8001d9c:	603b      	str	r3, [r7, #0]
 8001d9e:	464b      	mov	r3, r9
 8001da0:	eb45 0303 	adc.w	r3, r5, r3
 8001da4:	607b      	str	r3, [r7, #4]
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001db2:	4629      	mov	r1, r5
 8001db4:	028b      	lsls	r3, r1, #10
 8001db6:	4621      	mov	r1, r4
 8001db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	028a      	lsls	r2, r1, #10
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
 8001dca:	61fa      	str	r2, [r7, #28]
 8001dcc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dd0:	f7fe fa06 	bl	80001e0 <__aeabi_uldivmod>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4613      	mov	r3, r2
 8001dda:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ddc:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	0c1b      	lsrs	r3, r3, #16
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	3301      	adds	r3, #1
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001dec:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001df6:	e002      	b.n	8001dfe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001df8:	4b05      	ldr	r3, [pc, #20]	@ (8001e10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3750      	adds	r7, #80	@ 0x50
 8001e04:	46bd      	mov	sp, r7
 8001e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	00f42400 	.word	0x00f42400
 8001e14:	007a1200 	.word	0x007a1200

08001e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e1c:	4b03      	ldr	r3, [pc, #12]	@ (8001e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	20000004 	.word	0x20000004

08001e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e34:	f7ff fff0 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	4b05      	ldr	r3, [pc, #20]	@ (8001e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	0a9b      	lsrs	r3, r3, #10
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	4903      	ldr	r1, [pc, #12]	@ (8001e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e46:	5ccb      	ldrb	r3, [r1, r3]
 8001e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40023800 	.word	0x40023800
 8001e54:	08006188 	.word	0x08006188

08001e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001e5c:	f7ff ffdc 	bl	8001e18 <HAL_RCC_GetHCLKFreq>
 8001e60:	4602      	mov	r2, r0
 8001e62:	4b05      	ldr	r3, [pc, #20]	@ (8001e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	0b5b      	lsrs	r3, r3, #13
 8001e68:	f003 0307 	and.w	r3, r3, #7
 8001e6c:	4903      	ldr	r1, [pc, #12]	@ (8001e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e6e:	5ccb      	ldrb	r3, [r1, r3]
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	08006188 	.word	0x08006188

08001e80 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	220f      	movs	r2, #15
 8001e8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e90:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0203 	and.w	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001e9e:	689b      	ldr	r3, [r3, #8]
 8001ea0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001eb4:	4b09      	ldr	r3, [pc, #36]	@ (8001edc <HAL_RCC_GetClockConfig+0x5c>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	08db      	lsrs	r3, r3, #3
 8001eba:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <HAL_RCC_GetClockConfig+0x60>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0207 	and.w	r2, r3, #7
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	601a      	str	r2, [r3, #0]
}
 8001ece:	bf00      	nop
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40023c00 	.word	0x40023c00

08001ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e041      	b.n	8001f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d106      	bne.n	8001f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f839 	bl	8001f82 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2202      	movs	r2, #2
 8001f14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3304      	adds	r3, #4
 8001f20:	4619      	mov	r1, r3
 8001f22:	4610      	mov	r0, r2
 8001f24:	f000 f9c0 	bl	80022a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2201      	movs	r2, #1
 8001f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2201      	movs	r2, #1
 8001f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2201      	movs	r2, #1
 8001f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	2201      	movs	r2, #1
 8001f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d001      	beq.n	8001fb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e04e      	b.n	800204e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68da      	ldr	r2, [r3, #12]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a23      	ldr	r2, [pc, #140]	@ (800205c <HAL_TIM_Base_Start_IT+0xc4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d022      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fda:	d01d      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8002060 <HAL_TIM_Base_Start_IT+0xc8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d018      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1e      	ldr	r2, [pc, #120]	@ (8002064 <HAL_TIM_Base_Start_IT+0xcc>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d013      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a1c      	ldr	r2, [pc, #112]	@ (8002068 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d00e      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a1b      	ldr	r2, [pc, #108]	@ (800206c <HAL_TIM_Base_Start_IT+0xd4>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d009      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a19      	ldr	r2, [pc, #100]	@ (8002070 <HAL_TIM_Base_Start_IT+0xd8>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d004      	beq.n	8002018 <HAL_TIM_Base_Start_IT+0x80>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a18      	ldr	r2, [pc, #96]	@ (8002074 <HAL_TIM_Base_Start_IT+0xdc>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d111      	bne.n	800203c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2b06      	cmp	r3, #6
 8002028:	d010      	beq.n	800204c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800203a:	e007      	b.n	800204c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f042 0201 	orr.w	r2, r2, #1
 800204a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3714      	adds	r7, #20
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop
 800205c:	40010000 	.word	0x40010000
 8002060:	40000400 	.word	0x40000400
 8002064:	40000800 	.word	0x40000800
 8002068:	40000c00 	.word	0x40000c00
 800206c:	40010400 	.word	0x40010400
 8002070:	40014000 	.word	0x40014000
 8002074:	40001800 	.word	0x40001800

08002078 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	691b      	ldr	r3, [r3, #16]
 800208e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d020      	beq.n	80020dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d01b      	beq.n	80020dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f06f 0202 	mvn.w	r2, #2
 80020ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d003      	beq.n	80020ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 f8d2 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 80020c8:	e005      	b.n	80020d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f8c4 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f8d5 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d020      	beq.n	8002128 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 0304 	and.w	r3, r3, #4
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d01b      	beq.n	8002128 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f06f 0204 	mvn.w	r2, #4
 80020f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2202      	movs	r2, #2
 80020fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f000 f8ac 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8002114:	e005      	b.n	8002122 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f89e 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	f000 f8af 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0308 	and.w	r3, r3, #8
 800212e:	2b00      	cmp	r3, #0
 8002130:	d020      	beq.n	8002174 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0308 	and.w	r3, r3, #8
 8002138:	2b00      	cmp	r3, #0
 800213a:	d01b      	beq.n	8002174 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0208 	mvn.w	r2, #8
 8002144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69db      	ldr	r3, [r3, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f000 f886 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 8002160:	e005      	b.n	800216e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f000 f878 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f889 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2200      	movs	r2, #0
 8002172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	f003 0310 	and.w	r3, r3, #16
 800217a:	2b00      	cmp	r3, #0
 800217c:	d020      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b00      	cmp	r3, #0
 8002186:	d01b      	beq.n	80021c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f06f 0210 	mvn.w	r2, #16
 8002190:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2208      	movs	r2, #8
 8002196:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d003      	beq.n	80021ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f860 	bl	800226c <HAL_TIM_IC_CaptureCallback>
 80021ac:	e005      	b.n	80021ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 f852 	bl	8002258 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f000 f863 	bl	8002280 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00c      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f06f 0201 	mvn.w	r2, #1
 80021dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fcd2 	bl	8000b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00c      	beq.n	8002208 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d007      	beq.n	8002208 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 f906 	bl	8002414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00c      	beq.n	800222c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002218:	2b00      	cmp	r3, #0
 800221a:	d007      	beq.n	800222c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 f834 	bl	8002294 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00c      	beq.n	8002250 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 0320 	and.w	r3, r3, #32
 800223c:	2b00      	cmp	r3, #0
 800223e:	d007      	beq.n	8002250 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f06f 0220 	mvn.w	r2, #32
 8002248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 f8d8 	bl	8002400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002250:	bf00      	nop
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a46      	ldr	r2, [pc, #280]	@ (80023d4 <TIM_Base_SetConfig+0x12c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022c6:	d00f      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a43      	ldr	r2, [pc, #268]	@ (80023d8 <TIM_Base_SetConfig+0x130>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d00b      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a42      	ldr	r2, [pc, #264]	@ (80023dc <TIM_Base_SetConfig+0x134>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d007      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a41      	ldr	r2, [pc, #260]	@ (80023e0 <TIM_Base_SetConfig+0x138>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d003      	beq.n	80022e8 <TIM_Base_SetConfig+0x40>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a40      	ldr	r2, [pc, #256]	@ (80023e4 <TIM_Base_SetConfig+0x13c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d108      	bne.n	80022fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	68fa      	ldr	r2, [r7, #12]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a35      	ldr	r2, [pc, #212]	@ (80023d4 <TIM_Base_SetConfig+0x12c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d02b      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002308:	d027      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a32      	ldr	r2, [pc, #200]	@ (80023d8 <TIM_Base_SetConfig+0x130>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d023      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a31      	ldr	r2, [pc, #196]	@ (80023dc <TIM_Base_SetConfig+0x134>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01f      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a30      	ldr	r2, [pc, #192]	@ (80023e0 <TIM_Base_SetConfig+0x138>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d01b      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a2f      	ldr	r2, [pc, #188]	@ (80023e4 <TIM_Base_SetConfig+0x13c>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d017      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a2e      	ldr	r2, [pc, #184]	@ (80023e8 <TIM_Base_SetConfig+0x140>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d013      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a2d      	ldr	r2, [pc, #180]	@ (80023ec <TIM_Base_SetConfig+0x144>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d00f      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a2c      	ldr	r2, [pc, #176]	@ (80023f0 <TIM_Base_SetConfig+0x148>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d00b      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a2b      	ldr	r2, [pc, #172]	@ (80023f4 <TIM_Base_SetConfig+0x14c>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d007      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a2a      	ldr	r2, [pc, #168]	@ (80023f8 <TIM_Base_SetConfig+0x150>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d003      	beq.n	800235a <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a29      	ldr	r2, [pc, #164]	@ (80023fc <TIM_Base_SetConfig+0x154>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d108      	bne.n	800236c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002360:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	4313      	orrs	r3, r2
 800236a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68fa      	ldr	r2, [r7, #12]
 800237e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a10      	ldr	r2, [pc, #64]	@ (80023d4 <TIM_Base_SetConfig+0x12c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d003      	beq.n	80023a0 <TIM_Base_SetConfig+0xf8>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <TIM_Base_SetConfig+0x13c>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d103      	bne.n	80023a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	f023 0201 	bic.w	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	611a      	str	r2, [r3, #16]
  }
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40010000 	.word	0x40010000
 80023d8:	40000400 	.word	0x40000400
 80023dc:	40000800 	.word	0x40000800
 80023e0:	40000c00 	.word	0x40000c00
 80023e4:	40010400 	.word	0x40010400
 80023e8:	40014000 	.word	0x40014000
 80023ec:	40014400 	.word	0x40014400
 80023f0:	40014800 	.word	0x40014800
 80023f4:	40001800 	.word	0x40001800
 80023f8:	40001c00 	.word	0x40001c00
 80023fc:	40002000 	.word	0x40002000

08002400 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e042      	b.n	80024c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d106      	bne.n	8002454 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7fe fbda 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2224      	movs	r2, #36	@ 0x24
 8002458:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68da      	ldr	r2, [r3, #12]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800246a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 fdbd 	bl	8002fec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002480:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	695a      	ldr	r2, [r3, #20]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002490:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68da      	ldr	r2, [r3, #12]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80024a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2220      	movs	r2, #32
 80024ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2220      	movs	r2, #32
 80024b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80024be:	2300      	movs	r3, #0
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}

080024c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08a      	sub	sp, #40	@ 0x28
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	2b20      	cmp	r3, #32
 80024e6:	d175      	bne.n	80025d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d002      	beq.n	80024f4 <HAL_UART_Transmit+0x2c>
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80024f4:	2301      	movs	r3, #1
 80024f6:	e06e      	b.n	80025d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2221      	movs	r2, #33	@ 0x21
 8002502:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002506:	f7fe fced 	bl	8000ee4 <HAL_GetTick>
 800250a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	88fa      	ldrh	r2, [r7, #6]
 8002516:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002520:	d108      	bne.n	8002534 <HAL_UART_Transmit+0x6c>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	691b      	ldr	r3, [r3, #16]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d104      	bne.n	8002534 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800252a:	2300      	movs	r3, #0
 800252c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	61bb      	str	r3, [r7, #24]
 8002532:	e003      	b.n	800253c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800253c:	e02e      	b.n	800259c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2200      	movs	r2, #0
 8002546:	2180      	movs	r1, #128	@ 0x80
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fb1f 	bl	8002b8c <UART_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d005      	beq.n	8002560 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2220      	movs	r2, #32
 8002558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e03a      	b.n	80025d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10b      	bne.n	800257e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002574:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	3302      	adds	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	e007      	b.n	800258e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	781a      	ldrb	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	3301      	adds	r3, #1
 800258c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002592:	b29b      	uxth	r3, r3
 8002594:	3b01      	subs	r3, #1
 8002596:	b29a      	uxth	r2, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1cb      	bne.n	800253e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2140      	movs	r1, #64	@ 0x40
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 faeb 	bl	8002b8c <UART_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e006      	b.n	80025d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	e000      	b.n	80025d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80025d4:	2302      	movs	r3, #2
  }
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	4613      	mov	r3, r2
 80025ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b20      	cmp	r3, #32
 80025f6:	d112      	bne.n	800261e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d002      	beq.n	8002604 <HAL_UART_Receive_IT+0x26>
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d101      	bne.n	8002608 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e00b      	b.n	8002620 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800260e:	88fb      	ldrh	r3, [r7, #6]
 8002610:	461a      	mov	r2, r3
 8002612:	68b9      	ldr	r1, [r7, #8]
 8002614:	68f8      	ldr	r0, [r7, #12]
 8002616:	f000 fb12 	bl	8002c3e <UART_Start_Receive_IT>
 800261a:	4603      	mov	r3, r0
 800261c:	e000      	b.n	8002620 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800261e:	2302      	movs	r3, #2
  }
}
 8002620:	4618      	mov	r0, r3
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0ba      	sub	sp, #232	@ 0xe8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800265a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002666:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800266e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002672:	f003 0320 	and.w	r3, r3, #32
 8002676:	2b00      	cmp	r3, #0
 8002678:	d009      	beq.n	800268e <HAL_UART_IRQHandler+0x66>
 800267a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800267e:	f003 0320 	and.w	r3, r3, #32
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 fbf2 	bl	8002e70 <UART_Receive_IT>
      return;
 800268c:	e25b      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800268e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 80de 	beq.w	8002854 <HAL_UART_IRQHandler+0x22c>
 8002698:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d106      	bne.n	80026b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	f000 80d1 	beq.w	8002854 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00b      	beq.n	80026d6 <HAL_UART_IRQHandler+0xae>
 80026be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80026c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d005      	beq.n	80026d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026da:	f003 0304 	and.w	r3, r3, #4
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_UART_IRQHandler+0xd2>
 80026e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d005      	beq.n	80026fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	f043 0202 	orr.w	r2, r3, #2
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_UART_IRQHandler+0xf6>
 8002706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002716:	f043 0204 	orr.w	r2, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800271e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002722:	f003 0308 	and.w	r3, r3, #8
 8002726:	2b00      	cmp	r3, #0
 8002728:	d011      	beq.n	800274e <HAL_UART_IRQHandler+0x126>
 800272a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800272e:	f003 0320 	and.w	r3, r3, #32
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002736:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002746:	f043 0208 	orr.w	r2, r3, #8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 81f2 	beq.w	8002b3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800275c:	f003 0320 	and.w	r3, r3, #32
 8002760:	2b00      	cmp	r3, #0
 8002762:	d008      	beq.n	8002776 <HAL_UART_IRQHandler+0x14e>
 8002764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002768:	f003 0320 	and.w	r3, r3, #32
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fb7d 	bl	8002e70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002780:	2b40      	cmp	r3, #64	@ 0x40
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
 800278a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d103      	bne.n	80027a2 <HAL_UART_IRQHandler+0x17a>
 800279a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d04f      	beq.n	8002842 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fa85 	bl	8002cb2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027b2:	2b40      	cmp	r3, #64	@ 0x40
 80027b4:	d141      	bne.n	800283a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	3314      	adds	r3, #20
 80027bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80027c4:	e853 3f00 	ldrex	r3, [r3]
 80027c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80027cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80027d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80027d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	3314      	adds	r3, #20
 80027de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80027e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80027e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80027ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80027f2:	e841 2300 	strex	r3, r2, [r1]
 80027f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80027fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1d9      	bne.n	80027b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002806:	2b00      	cmp	r3, #0
 8002808:	d013      	beq.n	8002832 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a08 <HAL_UART_IRQHandler+0x3e0>)
 8002810:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002816:	4618      	mov	r0, r3
 8002818:	f7fe fcc2 	bl	80011a0 <HAL_DMA_Abort_IT>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d016      	beq.n	8002850 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800282c:	4610      	mov	r0, r2
 800282e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002830:	e00e      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f994 	bl	8002b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002838:	e00a      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f990 	bl	8002b60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	e006      	b.n	8002850 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f98c 	bl	8002b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2200      	movs	r2, #0
 800284c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800284e:	e175      	b.n	8002b3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002850:	bf00      	nop
    return;
 8002852:	e173      	b.n	8002b3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002858:	2b01      	cmp	r3, #1
 800285a:	f040 814f 	bne.w	8002afc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800285e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8148 	beq.w	8002afc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800286c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 8141 	beq.w	8002afc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60bb      	str	r3, [r7, #8]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800289a:	2b40      	cmp	r3, #64	@ 0x40
 800289c:	f040 80b6 	bne.w	8002a0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8145 	beq.w	8002b40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80028ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028be:	429a      	cmp	r2, r3
 80028c0:	f080 813e 	bcs.w	8002b40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80028ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d6:	f000 8088 	beq.w	80029ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	330c      	adds	r3, #12
 80028e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80028e8:	e853 3f00 	ldrex	r3, [r3]
 80028ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80028f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80028f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80028f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002906:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800290a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800290e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002912:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002916:	e841 2300 	strex	r3, r2, [r1]
 800291a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800291e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1d9      	bne.n	80028da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	3314      	adds	r3, #20
 800292c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800292e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002930:	e853 3f00 	ldrex	r3, [r3]
 8002934:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002936:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	3314      	adds	r3, #20
 8002946:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800294a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800294e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002950:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002952:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002956:	e841 2300 	strex	r3, r2, [r1]
 800295a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800295c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1e1      	bne.n	8002926 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	3314      	adds	r3, #20
 8002968:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800296a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800296c:	e853 3f00 	ldrex	r3, [r3]
 8002970:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002978:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	3314      	adds	r3, #20
 8002982:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002986:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002988:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800298a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800298c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800298e:	e841 2300 	strex	r3, r2, [r1]
 8002992:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002994:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1e3      	bne.n	8002962 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	330c      	adds	r3, #12
 80029ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80029b2:	e853 3f00 	ldrex	r3, [r3]
 80029b6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80029b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80029ba:	f023 0310 	bic.w	r3, r3, #16
 80029be:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	330c      	adds	r3, #12
 80029c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80029cc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80029ce:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80029d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80029d4:	e841 2300 	strex	r3, r2, [r1]
 80029d8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80029da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1e3      	bne.n	80029a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fb6b 	bl	80010c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2202      	movs	r2, #2
 80029ee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	4619      	mov	r1, r3
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f000 f8b7 	bl	8002b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a06:	e09b      	b.n	8002b40 <HAL_UART_IRQHandler+0x518>
 8002a08:	08002d79 	.word	0x08002d79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a20:	b29b      	uxth	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 808e 	beq.w	8002b44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002a28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	f000 8089 	beq.w	8002b44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	330c      	adds	r3, #12
 8002a38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a3c:	e853 3f00 	ldrex	r3, [r3]
 8002a40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002a48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	330c      	adds	r3, #12
 8002a52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002a56:	647a      	str	r2, [r7, #68]	@ 0x44
 8002a58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002a5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002a5e:	e841 2300 	strex	r3, r2, [r1]
 8002a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002a64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1e3      	bne.n	8002a32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3314      	adds	r3, #20
 8002a70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a74:	e853 3f00 	ldrex	r3, [r3]
 8002a78:	623b      	str	r3, [r7, #32]
   return(result);
 8002a7a:	6a3b      	ldr	r3, [r7, #32]
 8002a7c:	f023 0301 	bic.w	r3, r3, #1
 8002a80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	3314      	adds	r3, #20
 8002a8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002a8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a96:	e841 2300 	strex	r3, r2, [r1]
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e3      	bne.n	8002a6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2220      	movs	r2, #32
 8002aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	330c      	adds	r3, #12
 8002ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	e853 3f00 	ldrex	r3, [r3]
 8002abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f023 0310 	bic.w	r3, r3, #16
 8002ac6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002ad4:	61fa      	str	r2, [r7, #28]
 8002ad6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ad8:	69b9      	ldr	r1, [r7, #24]
 8002ada:	69fa      	ldr	r2, [r7, #28]
 8002adc:	e841 2300 	strex	r3, r2, [r1]
 8002ae0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e3      	bne.n	8002ab0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2202      	movs	r2, #2
 8002aec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002aee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002af2:	4619      	mov	r1, r3
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f000 f83d 	bl	8002b74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002afa:	e023      	b.n	8002b44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002afc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d009      	beq.n	8002b1c <HAL_UART_IRQHandler+0x4f4>
 8002b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f943 	bl	8002da0 <UART_Transmit_IT>
    return;
 8002b1a:	e014      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <HAL_UART_IRQHandler+0x51e>
 8002b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002b2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 f983 	bl	8002e40 <UART_EndTransmit_IT>
    return;
 8002b3a:	e004      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
    return;
 8002b3c:	bf00      	nop
 8002b3e:	e002      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b40:	bf00      	nop
 8002b42:	e000      	b.n	8002b46 <HAL_UART_IRQHandler+0x51e>
      return;
 8002b44:	bf00      	nop
  }
}
 8002b46:	37e8      	adds	r7, #232	@ 0xe8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b68:	bf00      	nop
 8002b6a:	370c      	adds	r7, #12
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b72:	4770      	bx	lr

08002b74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b086      	sub	sp, #24
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b9c:	e03b      	b.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002ba4:	d037      	beq.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ba6:	f7fe f99d 	bl	8000ee4 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	6a3a      	ldr	r2, [r7, #32]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d302      	bcc.n	8002bbc <UART_WaitOnFlagUntilTimeout+0x30>
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d101      	bne.n	8002bc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e03a      	b.n	8002c36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d023      	beq.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bce:	68bb      	ldr	r3, [r7, #8]
 8002bd0:	2b80      	cmp	r3, #128	@ 0x80
 8002bd2:	d020      	beq.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b40      	cmp	r3, #64	@ 0x40
 8002bd8:	d01d      	beq.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b08      	cmp	r3, #8
 8002be6:	d116      	bne.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002be8:	2300      	movs	r3, #0
 8002bea:	617b      	str	r3, [r7, #20]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	617b      	str	r3, [r7, #20]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 f857 	bl	8002cb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2208      	movs	r2, #8
 8002c08:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e00f      	b.n	8002c36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4013      	ands	r3, r2
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	bf0c      	ite	eq
 8002c26:	2301      	moveq	r3, #1
 8002c28:	2300      	movne	r3, #0
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	79fb      	ldrb	r3, [r7, #7]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d0b4      	beq.n	8002b9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b085      	sub	sp, #20
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	4613      	mov	r3, r2
 8002c4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	68ba      	ldr	r2, [r7, #8]
 8002c50:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	88fa      	ldrh	r2, [r7, #6]
 8002c56:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	88fa      	ldrh	r2, [r7, #6]
 8002c5c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2222      	movs	r2, #34	@ 0x22
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d007      	beq.n	8002c84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68da      	ldr	r2, [r3, #12]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	695a      	ldr	r2, [r3, #20]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f042 0220 	orr.w	r2, r2, #32
 8002ca2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr

08002cb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b095      	sub	sp, #84	@ 0x54
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cc4:	e853 3f00 	ldrex	r3, [r3]
 8002cc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	330c      	adds	r3, #12
 8002cd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cda:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ce0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ce2:	e841 2300 	strex	r3, r2, [r1]
 8002ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1e5      	bne.n	8002cba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	3314      	adds	r3, #20
 8002cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	e853 3f00 	ldrex	r3, [r3]
 8002cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f023 0301 	bic.w	r3, r3, #1
 8002d04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3314      	adds	r3, #20
 8002d0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002d10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002d14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d16:	e841 2300 	strex	r3, r2, [r1]
 8002d1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1e5      	bne.n	8002cee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d119      	bne.n	8002d5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	330c      	adds	r3, #12
 8002d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	e853 3f00 	ldrex	r3, [r3]
 8002d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	f023 0310 	bic.w	r3, r3, #16
 8002d40:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	330c      	adds	r3, #12
 8002d48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d4a:	61ba      	str	r2, [r7, #24]
 8002d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d4e:	6979      	ldr	r1, [r7, #20]
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	e841 2300 	strex	r3, r2, [r1]
 8002d56:	613b      	str	r3, [r7, #16]
   return(result);
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1e5      	bne.n	8002d2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2220      	movs	r2, #32
 8002d62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d6c:	bf00      	nop
 8002d6e:	3754      	adds	r7, #84	@ 0x54
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff fee4 	bl	8002b60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b21      	cmp	r3, #33	@ 0x21
 8002db2:	d13e      	bne.n	8002e32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002dbc:	d114      	bne.n	8002de8 <UART_Transmit_IT+0x48>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d110      	bne.n	8002de8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	881b      	ldrh	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002dda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	1c9a      	adds	r2, r3, #2
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	621a      	str	r2, [r3, #32]
 8002de6:	e008      	b.n	8002dfa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a1b      	ldr	r3, [r3, #32]
 8002dec:	1c59      	adds	r1, r3, #1
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6211      	str	r1, [r2, #32]
 8002df2:	781a      	ldrb	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	4619      	mov	r1, r3
 8002e08:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d10f      	bne.n	8002e2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68da      	ldr	r2, [r3, #12]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68da      	ldr	r2, [r3, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	e000      	b.n	8002e34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002e32:	2302      	movs	r3, #2
  }
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3714      	adds	r7, #20
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fe73 	bl	8002b4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002e66:	2300      	movs	r3, #0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	@ 0x30
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b22      	cmp	r3, #34	@ 0x22
 8002e82:	f040 80ae 	bne.w	8002fe2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e8e:	d117      	bne.n	8002ec0 <UART_Receive_IT+0x50>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d113      	bne.n	8002ec0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002eae:	b29a      	uxth	r2, r3
 8002eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb8:	1c9a      	adds	r2, r3, #2
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ebe:	e026      	b.n	8002f0e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ed2:	d007      	beq.n	8002ee4 <UART_Receive_IT+0x74>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d10a      	bne.n	8002ef2 <UART_Receive_IT+0x82>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	691b      	ldr	r3, [r3, #16]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d106      	bne.n	8002ef2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002eee:	701a      	strb	r2, [r3, #0]
 8002ef0:	e008      	b.n	8002f04 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f02:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d15d      	bne.n	8002fde <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	68da      	ldr	r2, [r3, #12]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0220 	bic.w	r2, r2, #32
 8002f30:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f40:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d135      	bne.n	8002fd4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	330c      	adds	r3, #12
 8002f74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	e853 3f00 	ldrex	r3, [r3]
 8002f7c:	613b      	str	r3, [r7, #16]
   return(result);
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	f023 0310 	bic.w	r3, r3, #16
 8002f84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	330c      	adds	r3, #12
 8002f8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f8e:	623a      	str	r2, [r7, #32]
 8002f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f92:	69f9      	ldr	r1, [r7, #28]
 8002f94:	6a3a      	ldr	r2, [r7, #32]
 8002f96:	e841 2300 	strex	r3, r2, [r1]
 8002f9a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1e5      	bne.n	8002f6e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b10      	cmp	r3, #16
 8002fae:	d10a      	bne.n	8002fc6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	60fb      	str	r3, [r7, #12]
 8002fc4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002fca:	4619      	mov	r1, r3
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff fdd1 	bl	8002b74 <HAL_UARTEx_RxEventCallback>
 8002fd2:	e002      	b.n	8002fda <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f7fd fd83 	bl	8000ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e002      	b.n	8002fe4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	e000      	b.n	8002fe4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002fe2:	2302      	movs	r3, #2
  }
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	3730      	adds	r7, #48	@ 0x30
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ff0:	b0c0      	sub	sp, #256	@ 0x100
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003004:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003008:	68d9      	ldr	r1, [r3, #12]
 800300a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	ea40 0301 	orr.w	r3, r0, r1
 8003014:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	431a      	orrs	r2, r3
 8003024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	431a      	orrs	r2, r3
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003044:	f021 010c 	bic.w	r1, r1, #12
 8003048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003052:	430b      	orrs	r3, r1
 8003054:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	695b      	ldr	r3, [r3, #20]
 800305e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003066:	6999      	ldr	r1, [r3, #24]
 8003068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	ea40 0301 	orr.w	r3, r0, r1
 8003072:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b8f      	ldr	r3, [pc, #572]	@ (80032b8 <UART_SetConfig+0x2cc>)
 800307c:	429a      	cmp	r2, r3
 800307e:	d005      	beq.n	800308c <UART_SetConfig+0xa0>
 8003080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	4b8d      	ldr	r3, [pc, #564]	@ (80032bc <UART_SetConfig+0x2d0>)
 8003088:	429a      	cmp	r2, r3
 800308a:	d104      	bne.n	8003096 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800308c:	f7fe fee4 	bl	8001e58 <HAL_RCC_GetPCLK2Freq>
 8003090:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003094:	e003      	b.n	800309e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003096:	f7fe fecb 	bl	8001e30 <HAL_RCC_GetPCLK1Freq>
 800309a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800309e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030a8:	f040 810c 	bne.w	80032c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030b0:	2200      	movs	r2, #0
 80030b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80030b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80030ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80030be:	4622      	mov	r2, r4
 80030c0:	462b      	mov	r3, r5
 80030c2:	1891      	adds	r1, r2, r2
 80030c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80030c6:	415b      	adcs	r3, r3
 80030c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80030ce:	4621      	mov	r1, r4
 80030d0:	eb12 0801 	adds.w	r8, r2, r1
 80030d4:	4629      	mov	r1, r5
 80030d6:	eb43 0901 	adc.w	r9, r3, r1
 80030da:	f04f 0200 	mov.w	r2, #0
 80030de:	f04f 0300 	mov.w	r3, #0
 80030e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030ee:	4690      	mov	r8, r2
 80030f0:	4699      	mov	r9, r3
 80030f2:	4623      	mov	r3, r4
 80030f4:	eb18 0303 	adds.w	r3, r8, r3
 80030f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80030fc:	462b      	mov	r3, r5
 80030fe:	eb49 0303 	adc.w	r3, r9, r3
 8003102:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003106:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003112:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003116:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800311a:	460b      	mov	r3, r1
 800311c:	18db      	adds	r3, r3, r3
 800311e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003120:	4613      	mov	r3, r2
 8003122:	eb42 0303 	adc.w	r3, r2, r3
 8003126:	657b      	str	r3, [r7, #84]	@ 0x54
 8003128:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800312c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003130:	f7fd f856 	bl	80001e0 <__aeabi_uldivmod>
 8003134:	4602      	mov	r2, r0
 8003136:	460b      	mov	r3, r1
 8003138:	4b61      	ldr	r3, [pc, #388]	@ (80032c0 <UART_SetConfig+0x2d4>)
 800313a:	fba3 2302 	umull	r2, r3, r3, r2
 800313e:	095b      	lsrs	r3, r3, #5
 8003140:	011c      	lsls	r4, r3, #4
 8003142:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003146:	2200      	movs	r2, #0
 8003148:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800314c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003150:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003154:	4642      	mov	r2, r8
 8003156:	464b      	mov	r3, r9
 8003158:	1891      	adds	r1, r2, r2
 800315a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800315c:	415b      	adcs	r3, r3
 800315e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003160:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003164:	4641      	mov	r1, r8
 8003166:	eb12 0a01 	adds.w	sl, r2, r1
 800316a:	4649      	mov	r1, r9
 800316c:	eb43 0b01 	adc.w	fp, r3, r1
 8003170:	f04f 0200 	mov.w	r2, #0
 8003174:	f04f 0300 	mov.w	r3, #0
 8003178:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800317c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003180:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003184:	4692      	mov	sl, r2
 8003186:	469b      	mov	fp, r3
 8003188:	4643      	mov	r3, r8
 800318a:	eb1a 0303 	adds.w	r3, sl, r3
 800318e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003192:	464b      	mov	r3, r9
 8003194:	eb4b 0303 	adc.w	r3, fp, r3
 8003198:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80031a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80031ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80031b0:	460b      	mov	r3, r1
 80031b2:	18db      	adds	r3, r3, r3
 80031b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80031b6:	4613      	mov	r3, r2
 80031b8:	eb42 0303 	adc.w	r3, r2, r3
 80031bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80031be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80031c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80031c6:	f7fd f80b 	bl	80001e0 <__aeabi_uldivmod>
 80031ca:	4602      	mov	r2, r0
 80031cc:	460b      	mov	r3, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	4b3b      	ldr	r3, [pc, #236]	@ (80032c0 <UART_SetConfig+0x2d4>)
 80031d2:	fba3 2301 	umull	r2, r3, r3, r1
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	2264      	movs	r2, #100	@ 0x64
 80031da:	fb02 f303 	mul.w	r3, r2, r3
 80031de:	1acb      	subs	r3, r1, r3
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80031e6:	4b36      	ldr	r3, [pc, #216]	@ (80032c0 <UART_SetConfig+0x2d4>)
 80031e8:	fba3 2302 	umull	r2, r3, r3, r2
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80031f4:	441c      	add	r4, r3
 80031f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031fa:	2200      	movs	r2, #0
 80031fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003200:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003204:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003208:	4642      	mov	r2, r8
 800320a:	464b      	mov	r3, r9
 800320c:	1891      	adds	r1, r2, r2
 800320e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003210:	415b      	adcs	r3, r3
 8003212:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003214:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003218:	4641      	mov	r1, r8
 800321a:	1851      	adds	r1, r2, r1
 800321c:	6339      	str	r1, [r7, #48]	@ 0x30
 800321e:	4649      	mov	r1, r9
 8003220:	414b      	adcs	r3, r1
 8003222:	637b      	str	r3, [r7, #52]	@ 0x34
 8003224:	f04f 0200 	mov.w	r2, #0
 8003228:	f04f 0300 	mov.w	r3, #0
 800322c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003230:	4659      	mov	r1, fp
 8003232:	00cb      	lsls	r3, r1, #3
 8003234:	4651      	mov	r1, sl
 8003236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800323a:	4651      	mov	r1, sl
 800323c:	00ca      	lsls	r2, r1, #3
 800323e:	4610      	mov	r0, r2
 8003240:	4619      	mov	r1, r3
 8003242:	4603      	mov	r3, r0
 8003244:	4642      	mov	r2, r8
 8003246:	189b      	adds	r3, r3, r2
 8003248:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800324c:	464b      	mov	r3, r9
 800324e:	460a      	mov	r2, r1
 8003250:	eb42 0303 	adc.w	r3, r2, r3
 8003254:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003264:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003268:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800326c:	460b      	mov	r3, r1
 800326e:	18db      	adds	r3, r3, r3
 8003270:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003272:	4613      	mov	r3, r2
 8003274:	eb42 0303 	adc.w	r3, r2, r3
 8003278:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800327a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800327e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003282:	f7fc ffad 	bl	80001e0 <__aeabi_uldivmod>
 8003286:	4602      	mov	r2, r0
 8003288:	460b      	mov	r3, r1
 800328a:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <UART_SetConfig+0x2d4>)
 800328c:	fba3 1302 	umull	r1, r3, r3, r2
 8003290:	095b      	lsrs	r3, r3, #5
 8003292:	2164      	movs	r1, #100	@ 0x64
 8003294:	fb01 f303 	mul.w	r3, r1, r3
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	3332      	adds	r3, #50	@ 0x32
 800329e:	4a08      	ldr	r2, [pc, #32]	@ (80032c0 <UART_SetConfig+0x2d4>)
 80032a0:	fba2 2303 	umull	r2, r3, r2, r3
 80032a4:	095b      	lsrs	r3, r3, #5
 80032a6:	f003 0207 	and.w	r2, r3, #7
 80032aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4422      	add	r2, r4
 80032b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80032b4:	e106      	b.n	80034c4 <UART_SetConfig+0x4d8>
 80032b6:	bf00      	nop
 80032b8:	40011000 	.word	0x40011000
 80032bc:	40011400 	.word	0x40011400
 80032c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032c8:	2200      	movs	r2, #0
 80032ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80032d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80032d6:	4642      	mov	r2, r8
 80032d8:	464b      	mov	r3, r9
 80032da:	1891      	adds	r1, r2, r2
 80032dc:	6239      	str	r1, [r7, #32]
 80032de:	415b      	adcs	r3, r3
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80032e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032e6:	4641      	mov	r1, r8
 80032e8:	1854      	adds	r4, r2, r1
 80032ea:	4649      	mov	r1, r9
 80032ec:	eb43 0501 	adc.w	r5, r3, r1
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	00eb      	lsls	r3, r5, #3
 80032fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032fe:	00e2      	lsls	r2, r4, #3
 8003300:	4614      	mov	r4, r2
 8003302:	461d      	mov	r5, r3
 8003304:	4643      	mov	r3, r8
 8003306:	18e3      	adds	r3, r4, r3
 8003308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800330c:	464b      	mov	r3, r9
 800330e:	eb45 0303 	adc.w	r3, r5, r3
 8003312:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003322:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003332:	4629      	mov	r1, r5
 8003334:	008b      	lsls	r3, r1, #2
 8003336:	4621      	mov	r1, r4
 8003338:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800333c:	4621      	mov	r1, r4
 800333e:	008a      	lsls	r2, r1, #2
 8003340:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003344:	f7fc ff4c 	bl	80001e0 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4b60      	ldr	r3, [pc, #384]	@ (80034d0 <UART_SetConfig+0x4e4>)
 800334e:	fba3 2302 	umull	r2, r3, r3, r2
 8003352:	095b      	lsrs	r3, r3, #5
 8003354:	011c      	lsls	r4, r3, #4
 8003356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800335a:	2200      	movs	r2, #0
 800335c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003360:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003364:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003368:	4642      	mov	r2, r8
 800336a:	464b      	mov	r3, r9
 800336c:	1891      	adds	r1, r2, r2
 800336e:	61b9      	str	r1, [r7, #24]
 8003370:	415b      	adcs	r3, r3
 8003372:	61fb      	str	r3, [r7, #28]
 8003374:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003378:	4641      	mov	r1, r8
 800337a:	1851      	adds	r1, r2, r1
 800337c:	6139      	str	r1, [r7, #16]
 800337e:	4649      	mov	r1, r9
 8003380:	414b      	adcs	r3, r1
 8003382:	617b      	str	r3, [r7, #20]
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003390:	4659      	mov	r1, fp
 8003392:	00cb      	lsls	r3, r1, #3
 8003394:	4651      	mov	r1, sl
 8003396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800339a:	4651      	mov	r1, sl
 800339c:	00ca      	lsls	r2, r1, #3
 800339e:	4610      	mov	r0, r2
 80033a0:	4619      	mov	r1, r3
 80033a2:	4603      	mov	r3, r0
 80033a4:	4642      	mov	r2, r8
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033ac:	464b      	mov	r3, r9
 80033ae:	460a      	mov	r2, r1
 80033b0:	eb42 0303 	adc.w	r3, r2, r3
 80033b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80033d0:	4649      	mov	r1, r9
 80033d2:	008b      	lsls	r3, r1, #2
 80033d4:	4641      	mov	r1, r8
 80033d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033da:	4641      	mov	r1, r8
 80033dc:	008a      	lsls	r2, r1, #2
 80033de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80033e2:	f7fc fefd 	bl	80001e0 <__aeabi_uldivmod>
 80033e6:	4602      	mov	r2, r0
 80033e8:	460b      	mov	r3, r1
 80033ea:	4611      	mov	r1, r2
 80033ec:	4b38      	ldr	r3, [pc, #224]	@ (80034d0 <UART_SetConfig+0x4e4>)
 80033ee:	fba3 2301 	umull	r2, r3, r3, r1
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2264      	movs	r2, #100	@ 0x64
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	1acb      	subs	r3, r1, r3
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	3332      	adds	r3, #50	@ 0x32
 8003400:	4a33      	ldr	r2, [pc, #204]	@ (80034d0 <UART_SetConfig+0x4e4>)
 8003402:	fba2 2303 	umull	r2, r3, r2, r3
 8003406:	095b      	lsrs	r3, r3, #5
 8003408:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800340c:	441c      	add	r4, r3
 800340e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003412:	2200      	movs	r2, #0
 8003414:	673b      	str	r3, [r7, #112]	@ 0x70
 8003416:	677a      	str	r2, [r7, #116]	@ 0x74
 8003418:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800341c:	4642      	mov	r2, r8
 800341e:	464b      	mov	r3, r9
 8003420:	1891      	adds	r1, r2, r2
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	415b      	adcs	r3, r3
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800342c:	4641      	mov	r1, r8
 800342e:	1851      	adds	r1, r2, r1
 8003430:	6039      	str	r1, [r7, #0]
 8003432:	4649      	mov	r1, r9
 8003434:	414b      	adcs	r3, r1
 8003436:	607b      	str	r3, [r7, #4]
 8003438:	f04f 0200 	mov.w	r2, #0
 800343c:	f04f 0300 	mov.w	r3, #0
 8003440:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003444:	4659      	mov	r1, fp
 8003446:	00cb      	lsls	r3, r1, #3
 8003448:	4651      	mov	r1, sl
 800344a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800344e:	4651      	mov	r1, sl
 8003450:	00ca      	lsls	r2, r1, #3
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	4603      	mov	r3, r0
 8003458:	4642      	mov	r2, r8
 800345a:	189b      	adds	r3, r3, r2
 800345c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800345e:	464b      	mov	r3, r9
 8003460:	460a      	mov	r2, r1
 8003462:	eb42 0303 	adc.w	r3, r2, r3
 8003466:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	663b      	str	r3, [r7, #96]	@ 0x60
 8003472:	667a      	str	r2, [r7, #100]	@ 0x64
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003480:	4649      	mov	r1, r9
 8003482:	008b      	lsls	r3, r1, #2
 8003484:	4641      	mov	r1, r8
 8003486:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800348a:	4641      	mov	r1, r8
 800348c:	008a      	lsls	r2, r1, #2
 800348e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003492:	f7fc fea5 	bl	80001e0 <__aeabi_uldivmod>
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4b0d      	ldr	r3, [pc, #52]	@ (80034d0 <UART_SetConfig+0x4e4>)
 800349c:	fba3 1302 	umull	r1, r3, r3, r2
 80034a0:	095b      	lsrs	r3, r3, #5
 80034a2:	2164      	movs	r1, #100	@ 0x64
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	3332      	adds	r3, #50	@ 0x32
 80034ae:	4a08      	ldr	r2, [pc, #32]	@ (80034d0 <UART_SetConfig+0x4e4>)
 80034b0:	fba2 2303 	umull	r2, r3, r2, r3
 80034b4:	095b      	lsrs	r3, r3, #5
 80034b6:	f003 020f 	and.w	r2, r3, #15
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4422      	add	r2, r4
 80034c2:	609a      	str	r2, [r3, #8]
}
 80034c4:	bf00      	nop
 80034c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80034ca:	46bd      	mov	sp, r7
 80034cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034d0:	51eb851f 	.word	0x51eb851f

080034d4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f103 0208 	add.w	r2, r3, #8
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80034ec:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f103 0208 	add.w	r2, r3, #8
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f103 0208 	add.w	r2, r3, #8
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800352e:	b480      	push	{r7}
 8003530:	b085      	sub	sp, #20
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	683a      	ldr	r2, [r7, #0]
 8003552:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	601a      	str	r2, [r3, #0]
}
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003576:	b480      	push	{r7}
 8003578:	b085      	sub	sp, #20
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800358c:	d103      	bne.n	8003596 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	e00c      	b.n	80035b0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	3308      	adds	r3, #8
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	e002      	b.n	80035a4 <vListInsert+0x2e>
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d2f6      	bcs.n	800359e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	683a      	ldr	r2, [r7, #0]
 80035ca:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	1c5a      	adds	r2, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	601a      	str	r2, [r3, #0]
}
 80035dc:	bf00      	nop
 80035de:	3714      	adds	r7, #20
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6892      	ldr	r2, [r2, #8]
 80035fe:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	6852      	ldr	r2, [r2, #4]
 8003608:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	429a      	cmp	r2, r3
 8003612:	d103      	bne.n	800361c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	1e5a      	subs	r2, r3, #1
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <xQueueGenericReset+0x2c>
        __asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	60bb      	str	r3, [r7, #8]
    }
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003668:	f002 f9e0 	bl	8005a2c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003678:	fb01 f303 	mul.w	r3, r1, r3
 800367c:	441a      	add	r2, r3
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003698:	3b01      	subs	r3, #1
 800369a:	68f9      	ldr	r1, [r7, #12]
 800369c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800369e:	fb01 f303 	mul.w	r3, r1, r3
 80036a2:	441a      	add	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	22ff      	movs	r2, #255	@ 0xff
 80036ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	22ff      	movs	r2, #255	@ 0xff
 80036b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d114      	bne.n	80036e8 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01a      	beq.n	80036fc <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3310      	adds	r3, #16
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 f93a 	bl	8004944 <xTaskRemoveFromEventList>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d012      	beq.n	80036fc <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80036d6:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <xQueueGenericReset+0xd0>)
 80036d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036dc:	601a      	str	r2, [r3, #0]
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	e009      	b.n	80036fc <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3310      	adds	r3, #16
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fef1 	bl	80034d4 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	3324      	adds	r3, #36	@ 0x24
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7ff feec 	bl	80034d4 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80036fc:	f002 f9c8 	bl	8005a90 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003700:	2301      	movs	r3, #1
}
 8003702:	4618      	mov	r0, r3
 8003704:	3710      	adds	r7, #16
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	e000ed04 	.word	0xe000ed04

08003710 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003710:	b580      	push	{r7, lr}
 8003712:	b08c      	sub	sp, #48	@ 0x30
 8003714:	af02      	add	r7, sp, #8
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	4613      	mov	r3, r2
 800371c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d10b      	bne.n	800373c <xQueueGenericCreate+0x2c>
        __asm volatile
 8003724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003728:	f383 8811 	msr	BASEPRI, r3
 800372c:	f3bf 8f6f 	isb	sy
 8003730:	f3bf 8f4f 	dsb	sy
 8003734:	61bb      	str	r3, [r7, #24]
    }
 8003736:	bf00      	nop
 8003738:	bf00      	nop
 800373a:	e7fd      	b.n	8003738 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	fb02 f303 	mul.w	r3, r2, r3
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d006      	beq.n	800375a <xQueueGenericCreate+0x4a>
 800374c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	fbb2 f3f3 	udiv	r3, r2, r3
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	429a      	cmp	r2, r3
 8003758:	d101      	bne.n	800375e <xQueueGenericCreate+0x4e>
 800375a:	2301      	movs	r3, #1
 800375c:	e000      	b.n	8003760 <xQueueGenericCreate+0x50>
 800375e:	2300      	movs	r3, #0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d10b      	bne.n	800377c <xQueueGenericCreate+0x6c>
        __asm volatile
 8003764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003768:	f383 8811 	msr	BASEPRI, r3
 800376c:	f3bf 8f6f 	isb	sy
 8003770:	f3bf 8f4f 	dsb	sy
 8003774:	617b      	str	r3, [r7, #20]
    }
 8003776:	bf00      	nop
 8003778:	bf00      	nop
 800377a:	e7fd      	b.n	8003778 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800377c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800377e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003782:	d90b      	bls.n	800379c <xQueueGenericCreate+0x8c>
        __asm volatile
 8003784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003788:	f383 8811 	msr	BASEPRI, r3
 800378c:	f3bf 8f6f 	isb	sy
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	613b      	str	r3, [r7, #16]
    }
 8003796:	bf00      	nop
 8003798:	bf00      	nop
 800379a:	e7fd      	b.n	8003798 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	3350      	adds	r3, #80	@ 0x50
 80037a0:	4618      	mov	r0, r3
 80037a2:	f002 fa6d 	bl	8005c80 <pvPortMalloc>
 80037a6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80037a8:	6a3b      	ldr	r3, [r7, #32]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00d      	beq.n	80037ca <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037ae:	6a3b      	ldr	r3, [r7, #32]
 80037b0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3350      	adds	r3, #80	@ 0x50
 80037b6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037b8:	79fa      	ldrb	r2, [r7, #7]
 80037ba:	6a3b      	ldr	r3, [r7, #32]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	69fa      	ldr	r2, [r7, #28]
 80037c2:	68b9      	ldr	r1, [r7, #8]
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 f805 	bl	80037d4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80037ca:	6a3b      	ldr	r3, [r7, #32]
    }
 80037cc:	4618      	mov	r0, r3
 80037ce:	3728      	adds	r7, #40	@ 0x28
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
 80037e0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	e002      	b.n	80037f6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	68fa      	ldr	r2, [r7, #12]
 80037fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	68ba      	ldr	r2, [r7, #8]
 8003800:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003802:	2101      	movs	r1, #1
 8003804:	69b8      	ldr	r0, [r7, #24]
 8003806:	f7ff ff19 	bl	800363c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
	...

0800381c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08e      	sub	sp, #56	@ 0x38
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
 8003828:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800382a:	2300      	movs	r3, #0
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8003832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <xQueueGenericSend+0x34>
        __asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	e7fd      	b.n	800384c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d103      	bne.n	800385e <xQueueGenericSend+0x42>
 8003856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <xQueueGenericSend+0x46>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <xQueueGenericSend+0x48>
 8003862:	2300      	movs	r3, #0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <xQueueGenericSend+0x64>
        __asm volatile
 8003868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800387a:	bf00      	nop
 800387c:	bf00      	nop
 800387e:	e7fd      	b.n	800387c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d103      	bne.n	800388e <xQueueGenericSend+0x72>
 8003886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <xQueueGenericSend+0x76>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <xQueueGenericSend+0x78>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10b      	bne.n	80038b0 <xQueueGenericSend+0x94>
        __asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	623b      	str	r3, [r7, #32]
    }
 80038aa:	bf00      	nop
 80038ac:	bf00      	nop
 80038ae:	e7fd      	b.n	80038ac <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038b0:	f001 f9e8 	bl	8004c84 <xTaskGetSchedulerState>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <xQueueGenericSend+0xa4>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <xQueueGenericSend+0xa8>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <xQueueGenericSend+0xaa>
 80038c4:	2300      	movs	r3, #0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10b      	bne.n	80038e2 <xQueueGenericSend+0xc6>
        __asm volatile
 80038ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038ce:	f383 8811 	msr	BASEPRI, r3
 80038d2:	f3bf 8f6f 	isb	sy
 80038d6:	f3bf 8f4f 	dsb	sy
 80038da:	61fb      	str	r3, [r7, #28]
    }
 80038dc:	bf00      	nop
 80038de:	bf00      	nop
 80038e0:	e7fd      	b.n	80038de <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80038e2:	f002 f8a3 	bl	8005a2c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <xQueueGenericSend+0xdc>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d129      	bne.n	800394c <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038f8:	683a      	ldr	r2, [r7, #0]
 80038fa:	68b9      	ldr	r1, [r7, #8]
 80038fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038fe:	f000 fad0 	bl	8003ea2 <prvCopyDataToQueue>
 8003902:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003908:	2b00      	cmp	r3, #0
 800390a:	d010      	beq.n	800392e <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390e:	3324      	adds	r3, #36	@ 0x24
 8003910:	4618      	mov	r0, r3
 8003912:	f001 f817 	bl	8004944 <xTaskRemoveFromEventList>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d013      	beq.n	8003944 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 800391c:	4b3f      	ldr	r3, [pc, #252]	@ (8003a1c <xQueueGenericSend+0x200>)
 800391e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	f3bf 8f4f 	dsb	sy
 8003928:	f3bf 8f6f 	isb	sy
 800392c:	e00a      	b.n	8003944 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 800392e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d007      	beq.n	8003944 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8003934:	4b39      	ldr	r3, [pc, #228]	@ (8003a1c <xQueueGenericSend+0x200>)
 8003936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800393a:	601a      	str	r2, [r3, #0]
 800393c:	f3bf 8f4f 	dsb	sy
 8003940:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003944:	f002 f8a4 	bl	8005a90 <vPortExitCritical>
                return pdPASS;
 8003948:	2301      	movs	r3, #1
 800394a:	e063      	b.n	8003a14 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d103      	bne.n	800395a <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003952:	f002 f89d 	bl	8005a90 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003956:	2300      	movs	r3, #0
 8003958:	e05c      	b.n	8003a14 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800395a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800395c:	2b00      	cmp	r3, #0
 800395e:	d106      	bne.n	800396e <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003960:	f107 0314 	add.w	r3, r7, #20
 8003964:	4618      	mov	r0, r3
 8003966:	f001 f851 	bl	8004a0c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800396a:	2301      	movs	r3, #1
 800396c:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800396e:	f002 f88f 	bl	8005a90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003972:	f000 fdc3 	bl	80044fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003976:	f002 f859 	bl	8005a2c <vPortEnterCritical>
 800397a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800397c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003980:	b25b      	sxtb	r3, r3
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003986:	d103      	bne.n	8003990 <xQueueGenericSend+0x174>
 8003988:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003990:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003992:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003996:	b25b      	sxtb	r3, r3
 8003998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800399c:	d103      	bne.n	80039a6 <xQueueGenericSend+0x18a>
 800399e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039a0:	2200      	movs	r2, #0
 80039a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80039a6:	f002 f873 	bl	8005a90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039aa:	1d3a      	adds	r2, r7, #4
 80039ac:	f107 0314 	add.w	r3, r7, #20
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 f840 	bl	8004a38 <xTaskCheckForTimeOut>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d124      	bne.n	8003a08 <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039c0:	f000 fb67 	bl	8004092 <prvIsQueueFull>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d018      	beq.n	80039fc <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039cc:	3310      	adds	r3, #16
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	4611      	mov	r1, r2
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 ff64 	bl	80048a0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80039d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039da:	f000 faf2 	bl	8003fc2 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80039de:	f000 fd9b 	bl	8004518 <xTaskResumeAll>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f47f af7c 	bne.w	80038e2 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80039ea:	4b0c      	ldr	r3, [pc, #48]	@ (8003a1c <xQueueGenericSend+0x200>)
 80039ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	e772      	b.n	80038e2 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80039fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80039fe:	f000 fae0 	bl	8003fc2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003a02:	f000 fd89 	bl	8004518 <xTaskResumeAll>
 8003a06:	e76c      	b.n	80038e2 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003a08:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a0a:	f000 fada 	bl	8003fc2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003a0e:	f000 fd83 	bl	8004518 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003a12:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3738      	adds	r7, #56	@ 0x38
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	e000ed04 	.word	0xe000ed04

08003a20 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b090      	sub	sp, #64	@ 0x40
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8003a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10b      	bne.n	8003a50 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003a4a:	bf00      	nop
 8003a4c:	bf00      	nop
 8003a4e:	e7fd      	b.n	8003a4c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <xQueueGenericSendFromISR+0x3e>
 8003a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d101      	bne.n	8003a62 <xQueueGenericSendFromISR+0x42>
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <xQueueGenericSendFromISR+0x44>
 8003a62:	2300      	movs	r3, #0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d10b      	bne.n	8003a80 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003a7a:	bf00      	nop
 8003a7c:	bf00      	nop
 8003a7e:	e7fd      	b.n	8003a7c <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d103      	bne.n	8003a8e <xQueueGenericSendFromISR+0x6e>
 8003a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a8a:	2b01      	cmp	r3, #1
 8003a8c:	d101      	bne.n	8003a92 <xQueueGenericSendFromISR+0x72>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <xQueueGenericSendFromISR+0x74>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	623b      	str	r3, [r7, #32]
    }
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ab0:	f002 f8a4 	bl	8005bfc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003ab4:	f3ef 8211 	mrs	r2, BASEPRI
 8003ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003abc:	f383 8811 	msr	BASEPRI, r3
 8003ac0:	f3bf 8f6f 	isb	sy
 8003ac4:	f3bf 8f4f 	dsb	sy
 8003ac8:	61fa      	str	r2, [r7, #28]
 8003aca:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003acc:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ace:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	429a      	cmp	r2, r3
 8003ada:	d302      	bcc.n	8003ae2 <xQueueGenericSendFromISR+0xc2>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d13f      	bne.n	8003b62 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ae8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	68b9      	ldr	r1, [r7, #8]
 8003af6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003af8:	f000 f9d3 	bl	8003ea2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003afc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b04:	d112      	bne.n	8003b2c <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d026      	beq.n	8003b5c <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b10:	3324      	adds	r3, #36	@ 0x24
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 ff16 	bl	8004944 <xTaskRemoveFromEventList>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d01e      	beq.n	8003b5c <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d01b      	beq.n	8003b5c <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e017      	b.n	8003b5c <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003b2c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003b30:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b32:	d10b      	bne.n	8003b4c <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8003b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b38:	f383 8811 	msr	BASEPRI, r3
 8003b3c:	f3bf 8f6f 	isb	sy
 8003b40:	f3bf 8f4f 	dsb	sy
 8003b44:	617b      	str	r3, [r7, #20]
    }
 8003b46:	bf00      	nop
 8003b48:	bf00      	nop
 8003b4a:	e7fd      	b.n	8003b48 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003b50:	3301      	adds	r3, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	b25a      	sxtb	r2, r3
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8003b60:	e001      	b.n	8003b66 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b68:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003b70:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3740      	adds	r7, #64	@ 0x40
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b08c      	sub	sp, #48	@ 0x30
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	60b9      	str	r1, [r7, #8]
 8003b86:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d10b      	bne.n	8003bae <xQueueReceive+0x32>
        __asm volatile
 8003b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b9a:	f383 8811 	msr	BASEPRI, r3
 8003b9e:	f3bf 8f6f 	isb	sy
 8003ba2:	f3bf 8f4f 	dsb	sy
 8003ba6:	623b      	str	r3, [r7, #32]
    }
 8003ba8:	bf00      	nop
 8003baa:	bf00      	nop
 8003bac:	e7fd      	b.n	8003baa <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d103      	bne.n	8003bbc <xQueueReceive+0x40>
 8003bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <xQueueReceive+0x44>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <xQueueReceive+0x46>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10b      	bne.n	8003bde <xQueueReceive+0x62>
        __asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	61fb      	str	r3, [r7, #28]
    }
 8003bd8:	bf00      	nop
 8003bda:	bf00      	nop
 8003bdc:	e7fd      	b.n	8003bda <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bde:	f001 f851 	bl	8004c84 <xTaskGetSchedulerState>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d102      	bne.n	8003bee <xQueueReceive+0x72>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d101      	bne.n	8003bf2 <xQueueReceive+0x76>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <xQueueReceive+0x78>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10b      	bne.n	8003c10 <xQueueReceive+0x94>
        __asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	61bb      	str	r3, [r7, #24]
    }
 8003c0a:	bf00      	nop
 8003c0c:	bf00      	nop
 8003c0e:	e7fd      	b.n	8003c0c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003c10:	f001 ff0c 	bl	8005a2c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c18:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d01f      	beq.n	8003c60 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c24:	f000 f9a7 	bl	8003f76 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	1e5a      	subs	r2, r3, #1
 8003c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c2e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d00f      	beq.n	8003c58 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c3a:	3310      	adds	r3, #16
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fe81 	bl	8004944 <xTaskRemoveFromEventList>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d007      	beq.n	8003c58 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8003c48:	4b3c      	ldr	r3, [pc, #240]	@ (8003d3c <xQueueReceive+0x1c0>)
 8003c4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	f3bf 8f4f 	dsb	sy
 8003c54:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003c58:	f001 ff1a 	bl	8005a90 <vPortExitCritical>
                return pdPASS;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e069      	b.n	8003d34 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d103      	bne.n	8003c6e <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003c66:	f001 ff13 	bl	8005a90 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e062      	b.n	8003d34 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d106      	bne.n	8003c82 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c74:	f107 0310 	add.w	r3, r7, #16
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f000 fec7 	bl	8004a0c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003c82:	f001 ff05 	bl	8005a90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003c86:	f000 fc39 	bl	80044fc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c8a:	f001 fecf 	bl	8005a2c <vPortEnterCritical>
 8003c8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c90:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003c94:	b25b      	sxtb	r3, r3
 8003c96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c9a:	d103      	bne.n	8003ca4 <xQueueReceive+0x128>
 8003c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ca4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ca6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003caa:	b25b      	sxtb	r3, r3
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003cb0:	d103      	bne.n	8003cba <xQueueReceive+0x13e>
 8003cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003cba:	f001 fee9 	bl	8005a90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cbe:	1d3a      	adds	r2, r7, #4
 8003cc0:	f107 0310 	add.w	r3, r7, #16
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f000 feb6 	bl	8004a38 <xTaskCheckForTimeOut>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d123      	bne.n	8003d1a <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cd4:	f000 f9c7 	bl	8004066 <prvIsQueueEmpty>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d017      	beq.n	8003d0e <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce0:	3324      	adds	r3, #36	@ 0x24
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f000 fdda 	bl	80048a0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003cec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003cee:	f000 f968 	bl	8003fc2 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003cf2:	f000 fc11 	bl	8004518 <xTaskResumeAll>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d189      	bne.n	8003c10 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8003d3c <xQueueReceive+0x1c0>)
 8003cfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	f3bf 8f4f 	dsb	sy
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	e780      	b.n	8003c10 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003d0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d10:	f000 f957 	bl	8003fc2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003d14:	f000 fc00 	bl	8004518 <xTaskResumeAll>
 8003d18:	e77a      	b.n	8003c10 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003d1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d1c:	f000 f951 	bl	8003fc2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003d20:	f000 fbfa 	bl	8004518 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d26:	f000 f99e 	bl	8004066 <prvIsQueueEmpty>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	f43f af6f 	beq.w	8003c10 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003d32:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3730      	adds	r7, #48	@ 0x30
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	e000ed04 	.word	0xe000ed04

08003d40 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b090      	sub	sp, #64	@ 0x40
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8003d50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d103      	bne.n	8003d7c <xQueueReceiveFromISR+0x3c>
 8003d74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <xQueueReceiveFromISR+0x40>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <xQueueReceiveFromISR+0x42>
 8003d80:	2300      	movs	r3, #0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8003d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d8a:	f383 8811 	msr	BASEPRI, r3
 8003d8e:	f3bf 8f6f 	isb	sy
 8003d92:	f3bf 8f4f 	dsb	sy
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003d98:	bf00      	nop
 8003d9a:	bf00      	nop
 8003d9c:	e7fd      	b.n	8003d9a <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d9e:	f001 ff2d 	bl	8005bfc <vPortValidateInterruptPriority>
        __asm volatile
 8003da2:	f3ef 8211 	mrs	r2, BASEPRI
 8003da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003daa:	f383 8811 	msr	BASEPRI, r3
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f3bf 8f4f 	dsb	sy
 8003db6:	623a      	str	r2, [r7, #32]
 8003db8:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8003dba:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dbc:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc2:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d03f      	beq.n	8003e4a <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8003dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dd0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003dd4:	68b9      	ldr	r1, [r7, #8]
 8003dd6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003dd8:	f000 f8cd 	bl	8003f76 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dde:	1e5a      	subs	r2, r3, #1
 8003de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8003de4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003de8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003dec:	d112      	bne.n	8003e14 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d026      	beq.n	8003e44 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003df8:	3310      	adds	r3, #16
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f000 fda2 	bl	8004944 <xTaskRemoveFromEventList>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d01e      	beq.n	8003e44 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01b      	beq.n	8003e44 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	e017      	b.n	8003e44 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8003e14:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8003e18:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e1a:	d10b      	bne.n	8003e34 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 8003e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	61bb      	str	r3, [r7, #24]
    }
 8003e2e:	bf00      	nop
 8003e30:	bf00      	nop
 8003e32:	e7fd      	b.n	8003e30 <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e34:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e38:	3301      	adds	r3, #1
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	b25a      	sxtb	r2, r3
 8003e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8003e44:	2301      	movs	r3, #1
 8003e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e48:	e001      	b.n	8003e4e <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e50:	617b      	str	r3, [r7, #20]
        __asm volatile
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	f383 8811 	msr	BASEPRI, r3
    }
 8003e58:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003e5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3740      	adds	r7, #64	@ 0x40
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d10b      	bne.n	8003e8a <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8003e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e76:	f383 8811 	msr	BASEPRI, r3
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	f3bf 8f4f 	dsb	sy
 8003e82:	60bb      	str	r3, [r7, #8]
    }
 8003e84:	bf00      	nop
 8003e86:	bf00      	nop
 8003e88:	e7fd      	b.n	8003e86 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8003e8a:	f001 fdcf 	bl	8005a2c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e92:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003e94:	f001 fdfc 	bl	8005a90 <vPortExitCritical>

    return uxReturn;
 8003e98:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b086      	sub	sp, #24
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb6:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10d      	bne.n	8003edc <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d14d      	bne.n	8003f64 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fef7 	bl	8004cc0 <xTaskPriorityDisinherit>
 8003ed2:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	609a      	str	r2, [r3, #8]
 8003eda:	e043      	b.n	8003f64 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d119      	bne.n	8003f16 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6858      	ldr	r0, [r3, #4]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eea:	461a      	mov	r2, r3
 8003eec:	68b9      	ldr	r1, [r7, #8]
 8003eee:	f002 f8f5 	bl	80060dc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003efa:	441a      	add	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685a      	ldr	r2, [r3, #4]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d32b      	bcc.n	8003f64 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	605a      	str	r2, [r3, #4]
 8003f14:	e026      	b.n	8003f64 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	68d8      	ldr	r0, [r3, #12]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1e:	461a      	mov	r2, r3
 8003f20:	68b9      	ldr	r1, [r7, #8]
 8003f22:	f002 f8db 	bl	80060dc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	68da      	ldr	r2, [r3, #12]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2e:	425b      	negs	r3, r3
 8003f30:	441a      	add	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d207      	bcs.n	8003f52 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4a:	425b      	negs	r3, r3
 8003f4c:	441a      	add	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d105      	bne.n	8003f64 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d002      	beq.n	8003f64 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	1c5a      	adds	r2, r3, #1
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003f6c:	697b      	ldr	r3, [r7, #20]
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b082      	sub	sp, #8
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d018      	beq.n	8003fba <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68da      	ldr	r2, [r3, #12]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f90:	441a      	add	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	68da      	ldr	r2, [r3, #12]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d303      	bcc.n	8003faa <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	68d9      	ldr	r1, [r3, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	6838      	ldr	r0, [r7, #0]
 8003fb6:	f002 f891 	bl	80060dc <memcpy>
    }
}
 8003fba:	bf00      	nop
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003fca:	f001 fd2f 	bl	8005a2c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fd4:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fd6:	e011      	b.n	8003ffc <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d012      	beq.n	8004006 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3324      	adds	r3, #36	@ 0x24
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f000 fcad 	bl	8004944 <xTaskRemoveFromEventList>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003ff0:	f000 fd8a 	bl	8004b08 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ffc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004000:	2b00      	cmp	r3, #0
 8004002:	dce9      	bgt.n	8003fd8 <prvUnlockQueue+0x16>
 8004004:	e000      	b.n	8004008 <prvUnlockQueue+0x46>
                        break;
 8004006:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	22ff      	movs	r2, #255	@ 0xff
 800400c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004010:	f001 fd3e 	bl	8005a90 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004014:	f001 fd0a 	bl	8005a2c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800401e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004020:	e011      	b.n	8004046 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d012      	beq.n	8004050 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3310      	adds	r3, #16
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fc88 	bl	8004944 <xTaskRemoveFromEventList>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800403a:	f000 fd65 	bl	8004b08 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800403e:	7bbb      	ldrb	r3, [r7, #14]
 8004040:	3b01      	subs	r3, #1
 8004042:	b2db      	uxtb	r3, r3
 8004044:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004046:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800404a:	2b00      	cmp	r3, #0
 800404c:	dce9      	bgt.n	8004022 <prvUnlockQueue+0x60>
 800404e:	e000      	b.n	8004052 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004050:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	22ff      	movs	r2, #255	@ 0xff
 8004056:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800405a:	f001 fd19 	bl	8005a90 <vPortExitCritical>
}
 800405e:	bf00      	nop
 8004060:	3710      	adds	r7, #16
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}

08004066 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004066:	b580      	push	{r7, lr}
 8004068:	b084      	sub	sp, #16
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800406e:	f001 fcdd 	bl	8005a2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004076:	2b00      	cmp	r3, #0
 8004078:	d102      	bne.n	8004080 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800407a:	2301      	movs	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
 800407e:	e001      	b.n	8004084 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004084:	f001 fd04 	bl	8005a90 <vPortExitCritical>

    return xReturn;
 8004088:	68fb      	ldr	r3, [r7, #12]
}
 800408a:	4618      	mov	r0, r3
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b084      	sub	sp, #16
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800409a:	f001 fcc7 	bl	8005a2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d102      	bne.n	80040b0 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80040aa:	2301      	movs	r3, #1
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e001      	b.n	80040b4 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80040b4:	f001 fcec 	bl	8005a90 <vPortExitCritical>

    return xReturn;
 80040b8:	68fb      	ldr	r3, [r7, #12]
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80040c2:	b480      	push	{r7}
 80040c4:	b087      	sub	sp, #28
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10b      	bne.n	80040ec <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	60fb      	str	r3, [r7, #12]
    }
 80040e6:	bf00      	nop
 80040e8:	bf00      	nop
 80040ea:	e7fd      	b.n	80040e8 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d102      	bne.n	80040fe <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 80040f8:	2301      	movs	r3, #1
 80040fa:	617b      	str	r3, [r7, #20]
 80040fc:	e001      	b.n	8004102 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 80040fe:	2300      	movs	r3, #0
 8004100:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004102:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004104:	4618      	mov	r0, r3
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	e014      	b.n	800414a <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004120:	4a0f      	ldr	r2, [pc, #60]	@ (8004160 <vQueueAddToRegistry+0x50>)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d10b      	bne.n	8004144 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800412c:	490c      	ldr	r1, [pc, #48]	@ (8004160 <vQueueAddToRegistry+0x50>)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8004136:	4a0a      	ldr	r2, [pc, #40]	@ (8004160 <vQueueAddToRegistry+0x50>)
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	00db      	lsls	r3, r3, #3
 800413c:	4413      	add	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8004142:	e006      	b.n	8004152 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	60fb      	str	r3, [r7, #12]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2b07      	cmp	r3, #7
 800414e:	d9e7      	bls.n	8004120 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004150:	bf00      	nop
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	200000dc 	.word	0x200000dc

08004164 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004174:	f001 fc5a 	bl	8005a2c <vPortEnterCritical>
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800417e:	b25b      	sxtb	r3, r3
 8004180:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004184:	d103      	bne.n	800418e <vQueueWaitForMessageRestricted+0x2a>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004194:	b25b      	sxtb	r3, r3
 8004196:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800419a:	d103      	bne.n	80041a4 <vQueueWaitForMessageRestricted+0x40>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041a4:	f001 fc74 	bl	8005a90 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	3324      	adds	r3, #36	@ 0x24
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fb97 	bl	80048ec <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80041be:	6978      	ldr	r0, [r7, #20]
 80041c0:	f7ff feff 	bl	8003fc2 <prvUnlockQueue>
    }
 80041c4:	bf00      	nop
 80041c6:	3718      	adds	r7, #24
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08c      	sub	sp, #48	@ 0x30
 80041d0:	af04      	add	r7, sp, #16
 80041d2:	60f8      	str	r0, [r7, #12]
 80041d4:	60b9      	str	r1, [r7, #8]
 80041d6:	603b      	str	r3, [r7, #0]
 80041d8:	4613      	mov	r3, r2
 80041da:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041dc:	88fb      	ldrh	r3, [r7, #6]
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4618      	mov	r0, r3
 80041e2:	f001 fd4d 	bl	8005c80 <pvPortMalloc>
 80041e6:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00e      	beq.n	800420c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041ee:	2058      	movs	r0, #88	@ 0x58
 80041f0:	f001 fd46 	bl	8005c80 <pvPortMalloc>
 80041f4:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	631a      	str	r2, [r3, #48]	@ 0x30
 8004202:	e005      	b.n	8004210 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004204:	6978      	ldr	r0, [r7, #20]
 8004206:	f001 fe1d 	bl	8005e44 <vPortFree>
 800420a:	e001      	b.n	8004210 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d013      	beq.n	800423e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004216:	88fa      	ldrh	r2, [r7, #6]
 8004218:	2300      	movs	r3, #0
 800421a:	9303      	str	r3, [sp, #12]
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	9302      	str	r3, [sp, #8]
 8004220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004222:	9301      	str	r3, [sp, #4]
 8004224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	68f8      	ldr	r0, [r7, #12]
 800422e:	f000 f80e 	bl	800424e <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004232:	69f8      	ldr	r0, [r7, #28]
 8004234:	f000 f8a2 	bl	800437c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8004238:	2301      	movs	r3, #1
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	e002      	b.n	8004244 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800423e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004242:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004244:	69bb      	ldr	r3, [r7, #24]
    }
 8004246:	4618      	mov	r0, r3
 8004248:	3720      	adds	r7, #32
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}

0800424e <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b088      	sub	sp, #32
 8004252:	af00      	add	r7, sp, #0
 8004254:	60f8      	str	r0, [r7, #12]
 8004256:	60b9      	str	r1, [r7, #8]
 8004258:	607a      	str	r2, [r7, #4]
 800425a:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	461a      	mov	r2, r3
 8004266:	21a5      	movs	r1, #165	@ 0xa5
 8004268:	f001 ff0c 	bl	8006084 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004276:	3b01      	subs	r3, #1
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	f023 0307 	bic.w	r3, r3, #7
 8004284:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	617b      	str	r3, [r7, #20]
    }
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
 80042a6:	e7fd      	b.n	80042a4 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d01f      	beq.n	80042ee <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042ae:	2300      	movs	r3, #0
 80042b0:	61fb      	str	r3, [r7, #28]
 80042b2:	e012      	b.n	80042da <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	7819      	ldrb	r1, [r3, #0]
 80042bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	3334      	adds	r3, #52	@ 0x34
 80042c4:	460a      	mov	r2, r1
 80042c6:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	4413      	add	r3, r2
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d006      	beq.n	80042e2 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	3301      	adds	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b09      	cmp	r3, #9
 80042de:	d9e9      	bls.n	80042b4 <prvInitialiseNewTask+0x66>
 80042e0:	e000      	b.n	80042e4 <prvInitialiseNewTask+0x96>
            {
                break;
 80042e2:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042ec:	e003      	b.n	80042f6 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d901      	bls.n	8004300 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042fc:	2304      	movs	r3, #4
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004302:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004304:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8004306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004308:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800430a:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 800430c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430e:	2200      	movs	r2, #0
 8004310:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004314:	3304      	adds	r3, #4
 8004316:	4618      	mov	r0, r3
 8004318:	f7ff f8fc 	bl	8003514 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800431c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800431e:	3318      	adds	r3, #24
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff f8f7 	bl	8003514 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004326:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004328:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800432a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800432c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800432e:	f1c3 0205 	rsb	r2, r3, #5
 8004332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004334:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004338:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800433a:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 800433c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433e:	3350      	adds	r3, #80	@ 0x50
 8004340:	2204      	movs	r2, #4
 8004342:	2100      	movs	r1, #0
 8004344:	4618      	mov	r0, r3
 8004346:	f001 fe9d 	bl	8006084 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800434a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800434c:	3354      	adds	r3, #84	@ 0x54
 800434e:	2201      	movs	r2, #1
 8004350:	2100      	movs	r1, #0
 8004352:	4618      	mov	r0, r3
 8004354:	f001 fe96 	bl	8006084 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004358:	683a      	ldr	r2, [r7, #0]
 800435a:	68f9      	ldr	r1, [r7, #12]
 800435c:	69b8      	ldr	r0, [r7, #24]
 800435e:	f001 fa35 	bl	80057cc <pxPortInitialiseStack>
 8004362:	4602      	mov	r2, r0
 8004364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004366:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8004368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436a:	2b00      	cmp	r3, #0
 800436c:	d002      	beq.n	8004374 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800436e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004370:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004372:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004374:	bf00      	nop
 8004376:	3720      	adds	r7, #32
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004384:	f001 fb52 	bl	8005a2c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8004388:	4b2c      	ldr	r3, [pc, #176]	@ (800443c <prvAddNewTaskToReadyList+0xc0>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	3301      	adds	r3, #1
 800438e:	4a2b      	ldr	r2, [pc, #172]	@ (800443c <prvAddNewTaskToReadyList+0xc0>)
 8004390:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004392:	4b2b      	ldr	r3, [pc, #172]	@ (8004440 <prvAddNewTaskToReadyList+0xc4>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800439a:	4a29      	ldr	r2, [pc, #164]	@ (8004440 <prvAddNewTaskToReadyList+0xc4>)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80043a0:	4b26      	ldr	r3, [pc, #152]	@ (800443c <prvAddNewTaskToReadyList+0xc0>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d110      	bne.n	80043ca <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80043a8:	f000 fbd2 	bl	8004b50 <prvInitialiseTaskLists>
 80043ac:	e00d      	b.n	80043ca <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80043ae:	4b25      	ldr	r3, [pc, #148]	@ (8004444 <prvAddNewTaskToReadyList+0xc8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d109      	bne.n	80043ca <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043b6:	4b22      	ldr	r3, [pc, #136]	@ (8004440 <prvAddNewTaskToReadyList+0xc4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d802      	bhi.n	80043ca <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80043c4:	4a1e      	ldr	r2, [pc, #120]	@ (8004440 <prvAddNewTaskToReadyList+0xc4>)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80043ca:	4b1f      	ldr	r3, [pc, #124]	@ (8004448 <prvAddNewTaskToReadyList+0xcc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	3301      	adds	r3, #1
 80043d0:	4a1d      	ldr	r2, [pc, #116]	@ (8004448 <prvAddNewTaskToReadyList+0xcc>)
 80043d2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004448 <prvAddNewTaskToReadyList+0xcc>)
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043e0:	2201      	movs	r2, #1
 80043e2:	409a      	lsls	r2, r3
 80043e4:	4b19      	ldr	r3, [pc, #100]	@ (800444c <prvAddNewTaskToReadyList+0xd0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	4a18      	ldr	r2, [pc, #96]	@ (800444c <prvAddNewTaskToReadyList+0xd0>)
 80043ec:	6013      	str	r3, [r2, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4a15      	ldr	r2, [pc, #84]	@ (8004450 <prvAddNewTaskToReadyList+0xd4>)
 80043fc:	441a      	add	r2, r3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3304      	adds	r3, #4
 8004402:	4619      	mov	r1, r3
 8004404:	4610      	mov	r0, r2
 8004406:	f7ff f892 	bl	800352e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800440a:	f001 fb41 	bl	8005a90 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800440e:	4b0d      	ldr	r3, [pc, #52]	@ (8004444 <prvAddNewTaskToReadyList+0xc8>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00e      	beq.n	8004434 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004416:	4b0a      	ldr	r3, [pc, #40]	@ (8004440 <prvAddNewTaskToReadyList+0xc4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004420:	429a      	cmp	r2, r3
 8004422:	d207      	bcs.n	8004434 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004424:	4b0b      	ldr	r3, [pc, #44]	@ (8004454 <prvAddNewTaskToReadyList+0xd8>)
 8004426:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	f3bf 8f4f 	dsb	sy
 8004430:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004434:	bf00      	nop
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}
 800443c:	200001f4 	.word	0x200001f4
 8004440:	2000011c 	.word	0x2000011c
 8004444:	20000200 	.word	0x20000200
 8004448:	20000210 	.word	0x20000210
 800444c:	200001fc 	.word	0x200001fc
 8004450:	20000120 	.word	0x20000120
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b086      	sub	sp, #24
 800445c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800445e:	4b20      	ldr	r3, [pc, #128]	@ (80044e0 <vTaskStartScheduler+0x88>)
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	2300      	movs	r3, #0
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	2300      	movs	r3, #0
 8004468:	2282      	movs	r2, #130	@ 0x82
 800446a:	491e      	ldr	r1, [pc, #120]	@ (80044e4 <vTaskStartScheduler+0x8c>)
 800446c:	481e      	ldr	r0, [pc, #120]	@ (80044e8 <vTaskStartScheduler+0x90>)
 800446e:	f7ff fead 	bl	80041cc <xTaskCreate>
 8004472:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d102      	bne.n	8004480 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800447a:	f000 fe89 	bl	8005190 <xTimerCreateTimerTask>
 800447e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d116      	bne.n	80044b4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800448a:	f383 8811 	msr	BASEPRI, r3
 800448e:	f3bf 8f6f 	isb	sy
 8004492:	f3bf 8f4f 	dsb	sy
 8004496:	60bb      	str	r3, [r7, #8]
    }
 8004498:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800449a:	4b14      	ldr	r3, [pc, #80]	@ (80044ec <vTaskStartScheduler+0x94>)
 800449c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80044a0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80044a2:	4b13      	ldr	r3, [pc, #76]	@ (80044f0 <vTaskStartScheduler+0x98>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044a8:	4b12      	ldr	r3, [pc, #72]	@ (80044f4 <vTaskStartScheduler+0x9c>)
 80044aa:	2200      	movs	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80044ae:	f001 fa19 	bl	80058e4 <xPortStartScheduler>
 80044b2:	e00f      	b.n	80044d4 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044ba:	d10b      	bne.n	80044d4 <vTaskStartScheduler+0x7c>
        __asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	607b      	str	r3, [r7, #4]
    }
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	e7fd      	b.n	80044d0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80044d4:	4b08      	ldr	r3, [pc, #32]	@ (80044f8 <vTaskStartScheduler+0xa0>)
 80044d6:	681b      	ldr	r3, [r3, #0]
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	20000218 	.word	0x20000218
 80044e4:	08006160 	.word	0x08006160
 80044e8:	08004b21 	.word	0x08004b21
 80044ec:	20000214 	.word	0x20000214
 80044f0:	20000200 	.word	0x20000200
 80044f4:	200001f8 	.word	0x200001f8
 80044f8:	20000010 	.word	0x20000010

080044fc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004500:	4b04      	ldr	r3, [pc, #16]	@ (8004514 <vTaskSuspendAll+0x18>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3301      	adds	r3, #1
 8004506:	4a03      	ldr	r2, [pc, #12]	@ (8004514 <vTaskSuspendAll+0x18>)
 8004508:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800450a:	bf00      	nop
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	2000021c 	.word	0x2000021c

08004518 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800451e:	2300      	movs	r3, #0
 8004520:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004522:	2300      	movs	r3, #0
 8004524:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004526:	4b42      	ldr	r3, [pc, #264]	@ (8004630 <xTaskResumeAll+0x118>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d10b      	bne.n	8004546 <xTaskResumeAll+0x2e>
        __asm volatile
 800452e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004532:	f383 8811 	msr	BASEPRI, r3
 8004536:	f3bf 8f6f 	isb	sy
 800453a:	f3bf 8f4f 	dsb	sy
 800453e:	603b      	str	r3, [r7, #0]
    }
 8004540:	bf00      	nop
 8004542:	bf00      	nop
 8004544:	e7fd      	b.n	8004542 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004546:	f001 fa71 	bl	8005a2c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800454a:	4b39      	ldr	r3, [pc, #228]	@ (8004630 <xTaskResumeAll+0x118>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3b01      	subs	r3, #1
 8004550:	4a37      	ldr	r2, [pc, #220]	@ (8004630 <xTaskResumeAll+0x118>)
 8004552:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004554:	4b36      	ldr	r3, [pc, #216]	@ (8004630 <xTaskResumeAll+0x118>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d161      	bne.n	8004620 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800455c:	4b35      	ldr	r3, [pc, #212]	@ (8004634 <xTaskResumeAll+0x11c>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d05d      	beq.n	8004620 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004564:	e02e      	b.n	80045c4 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004566:	4b34      	ldr	r3, [pc, #208]	@ (8004638 <xTaskResumeAll+0x120>)
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3318      	adds	r3, #24
 8004572:	4618      	mov	r0, r3
 8004574:	f7ff f838 	bl	80035e8 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3304      	adds	r3, #4
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff f833 	bl	80035e8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004586:	2201      	movs	r2, #1
 8004588:	409a      	lsls	r2, r3
 800458a:	4b2c      	ldr	r3, [pc, #176]	@ (800463c <xTaskResumeAll+0x124>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4313      	orrs	r3, r2
 8004590:	4a2a      	ldr	r2, [pc, #168]	@ (800463c <xTaskResumeAll+0x124>)
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004598:	4613      	mov	r3, r2
 800459a:	009b      	lsls	r3, r3, #2
 800459c:	4413      	add	r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	4a27      	ldr	r2, [pc, #156]	@ (8004640 <xTaskResumeAll+0x128>)
 80045a2:	441a      	add	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	3304      	adds	r3, #4
 80045a8:	4619      	mov	r1, r3
 80045aa:	4610      	mov	r0, r2
 80045ac:	f7fe ffbf 	bl	800352e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b4:	4b23      	ldr	r3, [pc, #140]	@ (8004644 <xTaskResumeAll+0x12c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d302      	bcc.n	80045c4 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 80045be:	4b22      	ldr	r3, [pc, #136]	@ (8004648 <xTaskResumeAll+0x130>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045c4:	4b1c      	ldr	r3, [pc, #112]	@ (8004638 <xTaskResumeAll+0x120>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1cc      	bne.n	8004566 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d001      	beq.n	80045d6 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80045d2:	f000 fb3b 	bl	8004c4c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80045d6:	4b1d      	ldr	r3, [pc, #116]	@ (800464c <xTaskResumeAll+0x134>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d010      	beq.n	8004604 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80045e2:	f000 f847 	bl	8004674 <xTaskIncrementTick>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d002      	beq.n	80045f2 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 80045ec:	4b16      	ldr	r3, [pc, #88]	@ (8004648 <xTaskResumeAll+0x130>)
 80045ee:	2201      	movs	r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1f1      	bne.n	80045e2 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80045fe:	4b13      	ldr	r3, [pc, #76]	@ (800464c <xTaskResumeAll+0x134>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004604:	4b10      	ldr	r3, [pc, #64]	@ (8004648 <xTaskResumeAll+0x130>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d009      	beq.n	8004620 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800460c:	2301      	movs	r3, #1
 800460e:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004610:	4b0f      	ldr	r3, [pc, #60]	@ (8004650 <xTaskResumeAll+0x138>)
 8004612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004620:	f001 fa36 	bl	8005a90 <vPortExitCritical>

    return xAlreadyYielded;
 8004624:	68bb      	ldr	r3, [r7, #8]
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	2000021c 	.word	0x2000021c
 8004634:	200001f4 	.word	0x200001f4
 8004638:	200001b4 	.word	0x200001b4
 800463c:	200001fc 	.word	0x200001fc
 8004640:	20000120 	.word	0x20000120
 8004644:	2000011c 	.word	0x2000011c
 8004648:	20000208 	.word	0x20000208
 800464c:	20000204 	.word	0x20000204
 8004650:	e000ed04 	.word	0xe000ed04

08004654 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b083      	sub	sp, #12
 8004658:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800465a:	4b05      	ldr	r3, [pc, #20]	@ (8004670 <xTaskGetTickCount+0x1c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004660:	687b      	ldr	r3, [r7, #4]
}
 8004662:	4618      	mov	r0, r3
 8004664:	370c      	adds	r7, #12
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop
 8004670:	200001f8 	.word	0x200001f8

08004674 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b086      	sub	sp, #24
 8004678:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800467e:	4b4f      	ldr	r3, [pc, #316]	@ (80047bc <xTaskIncrementTick+0x148>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	f040 808f 	bne.w	80047a6 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004688:	4b4d      	ldr	r3, [pc, #308]	@ (80047c0 <xTaskIncrementTick+0x14c>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3301      	adds	r3, #1
 800468e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004690:	4a4b      	ldr	r2, [pc, #300]	@ (80047c0 <xTaskIncrementTick+0x14c>)
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d121      	bne.n	80046e0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800469c:	4b49      	ldr	r3, [pc, #292]	@ (80047c4 <xTaskIncrementTick+0x150>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <xTaskIncrementTick+0x4a>
        __asm volatile
 80046a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046aa:	f383 8811 	msr	BASEPRI, r3
 80046ae:	f3bf 8f6f 	isb	sy
 80046b2:	f3bf 8f4f 	dsb	sy
 80046b6:	603b      	str	r3, [r7, #0]
    }
 80046b8:	bf00      	nop
 80046ba:	bf00      	nop
 80046bc:	e7fd      	b.n	80046ba <xTaskIncrementTick+0x46>
 80046be:	4b41      	ldr	r3, [pc, #260]	@ (80047c4 <xTaskIncrementTick+0x150>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	4b40      	ldr	r3, [pc, #256]	@ (80047c8 <xTaskIncrementTick+0x154>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a3e      	ldr	r2, [pc, #248]	@ (80047c4 <xTaskIncrementTick+0x150>)
 80046ca:	6013      	str	r3, [r2, #0]
 80046cc:	4a3e      	ldr	r2, [pc, #248]	@ (80047c8 <xTaskIncrementTick+0x154>)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	4b3e      	ldr	r3, [pc, #248]	@ (80047cc <xTaskIncrementTick+0x158>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	3301      	adds	r3, #1
 80046d8:	4a3c      	ldr	r2, [pc, #240]	@ (80047cc <xTaskIncrementTick+0x158>)
 80046da:	6013      	str	r3, [r2, #0]
 80046dc:	f000 fab6 	bl	8004c4c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80046e0:	4b3b      	ldr	r3, [pc, #236]	@ (80047d0 <xTaskIncrementTick+0x15c>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	693a      	ldr	r2, [r7, #16]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d348      	bcc.n	800477c <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046ea:	4b36      	ldr	r3, [pc, #216]	@ (80047c4 <xTaskIncrementTick+0x150>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d104      	bne.n	80046fe <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f4:	4b36      	ldr	r3, [pc, #216]	@ (80047d0 <xTaskIncrementTick+0x15c>)
 80046f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80046fa:	601a      	str	r2, [r3, #0]
                    break;
 80046fc:	e03e      	b.n	800477c <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046fe:	4b31      	ldr	r3, [pc, #196]	@ (80047c4 <xTaskIncrementTick+0x150>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	429a      	cmp	r2, r3
 8004714:	d203      	bcs.n	800471e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004716:	4a2e      	ldr	r2, [pc, #184]	@ (80047d0 <xTaskIncrementTick+0x15c>)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800471c:	e02e      	b.n	800477c <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	3304      	adds	r3, #4
 8004722:	4618      	mov	r0, r3
 8004724:	f7fe ff60 	bl	80035e8 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472c:	2b00      	cmp	r3, #0
 800472e:	d004      	beq.n	800473a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	3318      	adds	r3, #24
 8004734:	4618      	mov	r0, r3
 8004736:	f7fe ff57 	bl	80035e8 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800473e:	2201      	movs	r2, #1
 8004740:	409a      	lsls	r2, r3
 8004742:	4b24      	ldr	r3, [pc, #144]	@ (80047d4 <xTaskIncrementTick+0x160>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4313      	orrs	r3, r2
 8004748:	4a22      	ldr	r2, [pc, #136]	@ (80047d4 <xTaskIncrementTick+0x160>)
 800474a:	6013      	str	r3, [r2, #0]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004750:	4613      	mov	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	009b      	lsls	r3, r3, #2
 8004758:	4a1f      	ldr	r2, [pc, #124]	@ (80047d8 <xTaskIncrementTick+0x164>)
 800475a:	441a      	add	r2, r3
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	3304      	adds	r3, #4
 8004760:	4619      	mov	r1, r3
 8004762:	4610      	mov	r0, r2
 8004764:	f7fe fee3 	bl	800352e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800476c:	4b1b      	ldr	r3, [pc, #108]	@ (80047dc <xTaskIncrementTick+0x168>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004772:	429a      	cmp	r2, r3
 8004774:	d3b9      	bcc.n	80046ea <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8004776:	2301      	movs	r3, #1
 8004778:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800477a:	e7b6      	b.n	80046ea <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800477c:	4b17      	ldr	r3, [pc, #92]	@ (80047dc <xTaskIncrementTick+0x168>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004782:	4915      	ldr	r1, [pc, #84]	@ (80047d8 <xTaskIncrementTick+0x164>)
 8004784:	4613      	mov	r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d901      	bls.n	8004798 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8004794:	2301      	movs	r3, #1
 8004796:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004798:	4b11      	ldr	r3, [pc, #68]	@ (80047e0 <xTaskIncrementTick+0x16c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d007      	beq.n	80047b0 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 80047a0:	2301      	movs	r3, #1
 80047a2:	617b      	str	r3, [r7, #20]
 80047a4:	e004      	b.n	80047b0 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80047a6:	4b0f      	ldr	r3, [pc, #60]	@ (80047e4 <xTaskIncrementTick+0x170>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3301      	adds	r3, #1
 80047ac:	4a0d      	ldr	r2, [pc, #52]	@ (80047e4 <xTaskIncrementTick+0x170>)
 80047ae:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80047b0:	697b      	ldr	r3, [r7, #20]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3718      	adds	r7, #24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	2000021c 	.word	0x2000021c
 80047c0:	200001f8 	.word	0x200001f8
 80047c4:	200001ac 	.word	0x200001ac
 80047c8:	200001b0 	.word	0x200001b0
 80047cc:	2000020c 	.word	0x2000020c
 80047d0:	20000214 	.word	0x20000214
 80047d4:	200001fc 	.word	0x200001fc
 80047d8:	20000120 	.word	0x20000120
 80047dc:	2000011c 	.word	0x2000011c
 80047e0:	20000208 	.word	0x20000208
 80047e4:	20000204 	.word	0x20000204

080047e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047ee:	4b27      	ldr	r3, [pc, #156]	@ (800488c <vTaskSwitchContext+0xa4>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d003      	beq.n	80047fe <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80047f6:	4b26      	ldr	r3, [pc, #152]	@ (8004890 <vTaskSwitchContext+0xa8>)
 80047f8:	2201      	movs	r2, #1
 80047fa:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80047fc:	e040      	b.n	8004880 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 80047fe:	4b24      	ldr	r3, [pc, #144]	@ (8004890 <vTaskSwitchContext+0xa8>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004804:	4b23      	ldr	r3, [pc, #140]	@ (8004894 <vTaskSwitchContext+0xac>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	fab3 f383 	clz	r3, r3
 8004810:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004812:	7afb      	ldrb	r3, [r7, #11]
 8004814:	f1c3 031f 	rsb	r3, r3, #31
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	491f      	ldr	r1, [pc, #124]	@ (8004898 <vTaskSwitchContext+0xb0>)
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4613      	mov	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	4413      	add	r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d10b      	bne.n	8004846 <vTaskSwitchContext+0x5e>
        __asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
    }
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	e7fd      	b.n	8004842 <vTaskSwitchContext+0x5a>
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4a11      	ldr	r2, [pc, #68]	@ (8004898 <vTaskSwitchContext+0xb0>)
 8004852:	4413      	add	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	605a      	str	r2, [r3, #4]
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	3308      	adds	r3, #8
 8004868:	429a      	cmp	r2, r3
 800486a:	d104      	bne.n	8004876 <vTaskSwitchContext+0x8e>
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	605a      	str	r2, [r3, #4]
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a07      	ldr	r2, [pc, #28]	@ (800489c <vTaskSwitchContext+0xb4>)
 800487e:	6013      	str	r3, [r2, #0]
}
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	2000021c 	.word	0x2000021c
 8004890:	20000208 	.word	0x20000208
 8004894:	200001fc 	.word	0x200001fc
 8004898:	20000120 	.word	0x20000120
 800489c:	2000011c 	.word	0x2000011c

080048a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
 80048a8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10b      	bne.n	80048c8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	60fb      	str	r3, [r7, #12]
    }
 80048c2:	bf00      	nop
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048c8:	4b07      	ldr	r3, [pc, #28]	@ (80048e8 <vTaskPlaceOnEventList+0x48>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	3318      	adds	r3, #24
 80048ce:	4619      	mov	r1, r3
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f7fe fe50 	bl	8003576 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048d6:	2101      	movs	r1, #1
 80048d8:	6838      	ldr	r0, [r7, #0]
 80048da:	f000 fbf3 	bl	80050c4 <prvAddCurrentTaskToDelayedList>
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	2000011c 	.word	0x2000011c

080048ec <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b086      	sub	sp, #24
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d10b      	bne.n	8004916 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80048fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	617b      	str	r3, [r7, #20]
    }
 8004910:	bf00      	nop
 8004912:	bf00      	nop
 8004914:	e7fd      	b.n	8004912 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004916:	4b0a      	ldr	r3, [pc, #40]	@ (8004940 <vTaskPlaceOnEventListRestricted+0x54>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	3318      	adds	r3, #24
 800491c:	4619      	mov	r1, r3
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7fe fe05 	bl	800352e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800492a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800492e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	68b8      	ldr	r0, [r7, #8]
 8004934:	f000 fbc6 	bl	80050c4 <prvAddCurrentTaskToDelayedList>
    }
 8004938:	bf00      	nop
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	2000011c 	.word	0x2000011c

08004944 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10b      	bne.n	8004972 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800495a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800495e:	f383 8811 	msr	BASEPRI, r3
 8004962:	f3bf 8f6f 	isb	sy
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	60fb      	str	r3, [r7, #12]
    }
 800496c:	bf00      	nop
 800496e:	bf00      	nop
 8004970:	e7fd      	b.n	800496e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	3318      	adds	r3, #24
 8004976:	4618      	mov	r0, r3
 8004978:	f7fe fe36 	bl	80035e8 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800497c:	4b1d      	ldr	r3, [pc, #116]	@ (80049f4 <xTaskRemoveFromEventList+0xb0>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d11c      	bne.n	80049be <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	3304      	adds	r3, #4
 8004988:	4618      	mov	r0, r3
 800498a:	f7fe fe2d 	bl	80035e8 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004992:	2201      	movs	r2, #1
 8004994:	409a      	lsls	r2, r3
 8004996:	4b18      	ldr	r3, [pc, #96]	@ (80049f8 <xTaskRemoveFromEventList+0xb4>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4313      	orrs	r3, r2
 800499c:	4a16      	ldr	r2, [pc, #88]	@ (80049f8 <xTaskRemoveFromEventList+0xb4>)
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049a4:	4613      	mov	r3, r2
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	4413      	add	r3, r2
 80049aa:	009b      	lsls	r3, r3, #2
 80049ac:	4a13      	ldr	r2, [pc, #76]	@ (80049fc <xTaskRemoveFromEventList+0xb8>)
 80049ae:	441a      	add	r2, r3
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	3304      	adds	r3, #4
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f7fe fdb9 	bl	800352e <vListInsertEnd>
 80049bc:	e005      	b.n	80049ca <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	3318      	adds	r3, #24
 80049c2:	4619      	mov	r1, r3
 80049c4:	480e      	ldr	r0, [pc, #56]	@ (8004a00 <xTaskRemoveFromEventList+0xbc>)
 80049c6:	f7fe fdb2 	bl	800352e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004a04 <xTaskRemoveFromEventList+0xc0>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d905      	bls.n	80049e4 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80049dc:	4b0a      	ldr	r3, [pc, #40]	@ (8004a08 <xTaskRemoveFromEventList+0xc4>)
 80049de:	2201      	movs	r2, #1
 80049e0:	601a      	str	r2, [r3, #0]
 80049e2:	e001      	b.n	80049e8 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 80049e4:	2300      	movs	r3, #0
 80049e6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80049e8:	697b      	ldr	r3, [r7, #20]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3718      	adds	r7, #24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	2000021c 	.word	0x2000021c
 80049f8:	200001fc 	.word	0x200001fc
 80049fc:	20000120 	.word	0x20000120
 8004a00:	200001b4 	.word	0x200001b4
 8004a04:	2000011c 	.word	0x2000011c
 8004a08:	20000208 	.word	0x20000208

08004a0c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <vTaskInternalSetTimeOutState+0x24>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004a1c:	4b05      	ldr	r3, [pc, #20]	@ (8004a34 <vTaskInternalSetTimeOutState+0x28>)
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	605a      	str	r2, [r3, #4]
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr
 8004a30:	2000020c 	.word	0x2000020c
 8004a34:	200001f8 	.word	0x200001f8

08004a38 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10b      	bne.n	8004a60 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	613b      	str	r3, [r7, #16]
    }
 8004a5a:	bf00      	nop
 8004a5c:	bf00      	nop
 8004a5e:	e7fd      	b.n	8004a5c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d10b      	bne.n	8004a7e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	60fb      	str	r3, [r7, #12]
    }
 8004a78:	bf00      	nop
 8004a7a:	bf00      	nop
 8004a7c:	e7fd      	b.n	8004a7a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8004a7e:	f000 ffd5 	bl	8005a2c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004a82:	4b1f      	ldr	r3, [pc, #124]	@ (8004b00 <xTaskCheckForTimeOut+0xc8>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a9a:	d102      	bne.n	8004aa2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	61fb      	str	r3, [r7, #28]
 8004aa0:	e026      	b.n	8004af0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	4b17      	ldr	r3, [pc, #92]	@ (8004b04 <xTaskCheckForTimeOut+0xcc>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d00a      	beq.n	8004ac4 <xTaskCheckForTimeOut+0x8c>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	69ba      	ldr	r2, [r7, #24]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d305      	bcc.n	8004ac4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]
 8004ac2:	e015      	b.n	8004af0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d20b      	bcs.n	8004ae6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	1ad2      	subs	r2, r2, r3
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f7ff ff96 	bl	8004a0c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	e004      	b.n	8004af0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004af0:	f000 ffce 	bl	8005a90 <vPortExitCritical>

    return xReturn;
 8004af4:	69fb      	ldr	r3, [r7, #28]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	200001f8 	.word	0x200001f8
 8004b04:	2000020c 	.word	0x2000020c

08004b08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004b0c:	4b03      	ldr	r3, [pc, #12]	@ (8004b1c <vTaskMissedYield+0x14>)
 8004b0e:	2201      	movs	r2, #1
 8004b10:	601a      	str	r2, [r3, #0]
}
 8004b12:	bf00      	nop
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	20000208 	.word	0x20000208

08004b20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b082      	sub	sp, #8
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004b28:	f000 f852 	bl	8004bd0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004b2c:	4b06      	ldr	r3, [pc, #24]	@ (8004b48 <prvIdleTask+0x28>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d9f9      	bls.n	8004b28 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8004b34:	4b05      	ldr	r3, [pc, #20]	@ (8004b4c <prvIdleTask+0x2c>)
 8004b36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	f3bf 8f4f 	dsb	sy
 8004b40:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004b44:	e7f0      	b.n	8004b28 <prvIdleTask+0x8>
 8004b46:	bf00      	nop
 8004b48:	20000120 	.word	0x20000120
 8004b4c:	e000ed04 	.word	0xe000ed04

08004b50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b56:	2300      	movs	r3, #0
 8004b58:	607b      	str	r3, [r7, #4]
 8004b5a:	e00c      	b.n	8004b76 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4413      	add	r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	4a12      	ldr	r2, [pc, #72]	@ (8004bb0 <prvInitialiseTaskLists+0x60>)
 8004b68:	4413      	add	r3, r2
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fe fcb2 	bl	80034d4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	3301      	adds	r3, #1
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2b04      	cmp	r3, #4
 8004b7a:	d9ef      	bls.n	8004b5c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004b7c:	480d      	ldr	r0, [pc, #52]	@ (8004bb4 <prvInitialiseTaskLists+0x64>)
 8004b7e:	f7fe fca9 	bl	80034d4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004b82:	480d      	ldr	r0, [pc, #52]	@ (8004bb8 <prvInitialiseTaskLists+0x68>)
 8004b84:	f7fe fca6 	bl	80034d4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004b88:	480c      	ldr	r0, [pc, #48]	@ (8004bbc <prvInitialiseTaskLists+0x6c>)
 8004b8a:	f7fe fca3 	bl	80034d4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004b8e:	480c      	ldr	r0, [pc, #48]	@ (8004bc0 <prvInitialiseTaskLists+0x70>)
 8004b90:	f7fe fca0 	bl	80034d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004b94:	480b      	ldr	r0, [pc, #44]	@ (8004bc4 <prvInitialiseTaskLists+0x74>)
 8004b96:	f7fe fc9d 	bl	80034d4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc8 <prvInitialiseTaskLists+0x78>)
 8004b9c:	4a05      	ldr	r2, [pc, #20]	@ (8004bb4 <prvInitialiseTaskLists+0x64>)
 8004b9e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bcc <prvInitialiseTaskLists+0x7c>)
 8004ba2:	4a05      	ldr	r2, [pc, #20]	@ (8004bb8 <prvInitialiseTaskLists+0x68>)
 8004ba4:	601a      	str	r2, [r3, #0]
}
 8004ba6:	bf00      	nop
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	20000120 	.word	0x20000120
 8004bb4:	20000184 	.word	0x20000184
 8004bb8:	20000198 	.word	0x20000198
 8004bbc:	200001b4 	.word	0x200001b4
 8004bc0:	200001c8 	.word	0x200001c8
 8004bc4:	200001e0 	.word	0x200001e0
 8004bc8:	200001ac 	.word	0x200001ac
 8004bcc:	200001b0 	.word	0x200001b0

08004bd0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004bd6:	e019      	b.n	8004c0c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004bd8:	f000 ff28 	bl	8005a2c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bdc:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <prvCheckTasksWaitingTermination+0x50>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3304      	adds	r3, #4
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fe fcfd 	bl	80035e8 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004bee:	4b0d      	ldr	r3, [pc, #52]	@ (8004c24 <prvCheckTasksWaitingTermination+0x54>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3b01      	subs	r3, #1
 8004bf4:	4a0b      	ldr	r2, [pc, #44]	@ (8004c24 <prvCheckTasksWaitingTermination+0x54>)
 8004bf6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <prvCheckTasksWaitingTermination+0x58>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	4a0a      	ldr	r2, [pc, #40]	@ (8004c28 <prvCheckTasksWaitingTermination+0x58>)
 8004c00:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004c02:	f000 ff45 	bl	8005a90 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f810 	bl	8004c2c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004c0c:	4b06      	ldr	r3, [pc, #24]	@ (8004c28 <prvCheckTasksWaitingTermination+0x58>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e1      	bne.n	8004bd8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004c14:	bf00      	nop
 8004c16:	bf00      	nop
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200001c8 	.word	0x200001c8
 8004c24:	200001f4 	.word	0x200001f4
 8004c28:	200001dc 	.word	0x200001dc

08004c2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b082      	sub	sp, #8
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f001 f903 	bl	8005e44 <vPortFree>
                vPortFree( pxTCB );
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f001 f900 	bl	8005e44 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004c44:	bf00      	nop
 8004c46:	3708      	adds	r7, #8
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c50:	4b0a      	ldr	r3, [pc, #40]	@ (8004c7c <prvResetNextTaskUnblockTime+0x30>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d104      	bne.n	8004c64 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004c5a:	4b09      	ldr	r3, [pc, #36]	@ (8004c80 <prvResetNextTaskUnblockTime+0x34>)
 8004c5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c60:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004c62:	e005      	b.n	8004c70 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c64:	4b05      	ldr	r3, [pc, #20]	@ (8004c7c <prvResetNextTaskUnblockTime+0x30>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a04      	ldr	r2, [pc, #16]	@ (8004c80 <prvResetNextTaskUnblockTime+0x34>)
 8004c6e:	6013      	str	r3, [r2, #0]
}
 8004c70:	bf00      	nop
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	200001ac 	.word	0x200001ac
 8004c80:	20000214 	.word	0x20000214

08004c84 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <xTaskGetSchedulerState+0x34>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d102      	bne.n	8004c98 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004c92:	2301      	movs	r3, #1
 8004c94:	607b      	str	r3, [r7, #4]
 8004c96:	e008      	b.n	8004caa <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c98:	4b08      	ldr	r3, [pc, #32]	@ (8004cbc <xTaskGetSchedulerState+0x38>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d102      	bne.n	8004ca6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	e001      	b.n	8004caa <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004caa:	687b      	ldr	r3, [r7, #4]
    }
 8004cac:	4618      	mov	r0, r3
 8004cae:	370c      	adds	r7, #12
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	20000200 	.word	0x20000200
 8004cbc:	2000021c 	.word	0x2000021c

08004cc0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b086      	sub	sp, #24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d065      	beq.n	8004da2 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004cd6:	4b35      	ldr	r3, [pc, #212]	@ (8004dac <xTaskPriorityDisinherit+0xec>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d00b      	beq.n	8004cf8 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	60fb      	str	r3, [r7, #12]
    }
 8004cf2:	bf00      	nop
 8004cf4:	bf00      	nop
 8004cf6:	e7fd      	b.n	8004cf4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10b      	bne.n	8004d18 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	60bb      	str	r3, [r7, #8]
    }
 8004d12:	bf00      	nop
 8004d14:	bf00      	nop
 8004d16:	e7fd      	b.n	8004d14 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d1c:	1e5a      	subs	r2, r3, #1
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d039      	beq.n	8004da2 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d135      	bne.n	8004da2 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	3304      	adds	r3, #4
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fe fc54 	bl	80035e8 <uxListRemove>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10a      	bne.n	8004d5c <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	43da      	mvns	r2, r3
 8004d52:	4b17      	ldr	r3, [pc, #92]	@ (8004db0 <xTaskPriorityDisinherit+0xf0>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4013      	ands	r3, r2
 8004d58:	4a15      	ldr	r2, [pc, #84]	@ (8004db0 <xTaskPriorityDisinherit+0xf0>)
 8004d5a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	f1c3 0205 	rsb	r2, r3, #5
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	2201      	movs	r2, #1
 8004d76:	409a      	lsls	r2, r3
 8004d78:	4b0d      	ldr	r3, [pc, #52]	@ (8004db0 <xTaskPriorityDisinherit+0xf0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8004db0 <xTaskPriorityDisinherit+0xf0>)
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d86:	4613      	mov	r3, r2
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	4a09      	ldr	r2, [pc, #36]	@ (8004db4 <xTaskPriorityDisinherit+0xf4>)
 8004d90:	441a      	add	r2, r3
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f7fe fbc8 	bl	800352e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004da2:	697b      	ldr	r3, [r7, #20]
    }
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	2000011c 	.word	0x2000011c
 8004db0:	200001fc 	.word	0x200001fc
 8004db4:	20000120 	.word	0x20000120

08004db8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b086      	sub	sp, #24
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
 8004dc4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00b      	beq.n	8004de4 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8004dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd0:	f383 8811 	msr	BASEPRI, r3
 8004dd4:	f3bf 8f6f 	isb	sy
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	613b      	str	r3, [r7, #16]
    }
 8004dde:	bf00      	nop
 8004de0:	bf00      	nop
 8004de2:	e7fd      	b.n	8004de0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004de4:	f000 fe22 	bl	8005a2c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004de8:	4b31      	ldr	r3, [pc, #196]	@ (8004eb0 <xTaskGenericNotifyWait+0xf8>)
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4413      	add	r3, r2
 8004df0:	3354      	adds	r3, #84	@ 0x54
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d022      	beq.n	8004e40 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004dfa:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb0 <xTaskGenericNotifyWait+0xf8>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	3214      	adds	r2, #20
 8004e02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	43d2      	mvns	r2, r2
 8004e0a:	4011      	ands	r1, r2
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	3214      	adds	r2, #20
 8004e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004e14:	4b26      	ldr	r3, [pc, #152]	@ (8004eb0 <xTaskGenericNotifyWait+0xf8>)
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3354      	adds	r3, #84	@ 0x54
 8004e1e:	2201      	movs	r2, #1
 8004e20:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004e22:	6a3b      	ldr	r3, [r7, #32]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00b      	beq.n	8004e40 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004e28:	2101      	movs	r1, #1
 8004e2a:	6a38      	ldr	r0, [r7, #32]
 8004e2c:	f000 f94a 	bl	80050c4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004e30:	4b20      	ldr	r3, [pc, #128]	@ (8004eb4 <xTaskGenericNotifyWait+0xfc>)
 8004e32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004e40:	f000 fe26 	bl	8005a90 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004e44:	f000 fdf2 	bl	8005a2c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004e4e:	4b18      	ldr	r3, [pc, #96]	@ (8004eb0 <xTaskGenericNotifyWait+0xf8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	3214      	adds	r2, #20
 8004e56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004e5e:	4b14      	ldr	r3, [pc, #80]	@ (8004eb0 <xTaskGenericNotifyWait+0xf8>)
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	3354      	adds	r3, #84	@ 0x54
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b02      	cmp	r3, #2
 8004e6e:	d002      	beq.n	8004e76 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
 8004e74:	e00e      	b.n	8004e94 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004e76:	4b0e      	ldr	r3, [pc, #56]	@ (8004eb0 <xTaskGenericNotifyWait+0xf8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68fa      	ldr	r2, [r7, #12]
 8004e7c:	3214      	adds	r2, #20
 8004e7e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	43d2      	mvns	r2, r2
 8004e86:	4011      	ands	r1, r2
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	3214      	adds	r2, #20
 8004e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004e94:	4b06      	ldr	r3, [pc, #24]	@ (8004eb0 <xTaskGenericNotifyWait+0xf8>)
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	3354      	adds	r3, #84	@ 0x54
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004ea2:	f000 fdf5 	bl	8005a90 <vPortExitCritical>

        return xReturn;
 8004ea6:	697b      	ldr	r3, [r7, #20]
    }
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	2000011c 	.word	0x2000011c
 8004eb4:	e000ed04 	.word	0xe000ed04

08004eb8 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b090      	sub	sp, #64	@ 0x40
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
 8004ec4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	e7fd      	b.n	8004f02 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f06:	f000 fe79 	bl	8005bfc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8004f0e:	f3ef 8211 	mrs	r2, BASEPRI
 8004f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f16:	f383 8811 	msr	BASEPRI, r3
 8004f1a:	f3bf 8f6f 	isb	sy
 8004f1e:	f3bf 8f4f 	dsb	sy
 8004f22:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f24:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8004f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f28:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8004f2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d006      	beq.n	8004f3e <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	3214      	adds	r2, #20
 8004f36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f3c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004f3e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	4413      	add	r3, r2
 8004f44:	3354      	adds	r3, #84	@ 0x54
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004f4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4413      	add	r3, r2
 8004f52:	3354      	adds	r3, #84	@ 0x54
 8004f54:	2202      	movs	r2, #2
 8004f56:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	2b04      	cmp	r3, #4
 8004f5c:	d83b      	bhi.n	8004fd6 <xTaskGenericNotifyFromISR+0x11e>
 8004f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f64 <xTaskGenericNotifyFromISR+0xac>)
 8004f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f64:	08004ff7 	.word	0x08004ff7
 8004f68:	08004f79 	.word	0x08004f79
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004fad 	.word	0x08004fad
 8004f74:	08004fbb 	.word	0x08004fbb
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	3214      	adds	r2, #20
 8004f7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	ea42 0103 	orr.w	r1, r2, r3
 8004f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	3214      	adds	r2, #20
 8004f8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004f92:	e033      	b.n	8004ffc <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	3214      	adds	r2, #20
 8004f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f9e:	1c59      	adds	r1, r3, #1
 8004fa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa2:	68ba      	ldr	r2, [r7, #8]
 8004fa4:	3214      	adds	r2, #20
 8004fa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004faa:	e027      	b.n	8004ffc <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004fac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	3214      	adds	r2, #20
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004fb8:	e020      	b.n	8004ffc <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004fba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004fbe:	2b02      	cmp	r3, #2
 8004fc0:	d006      	beq.n	8004fd0 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	3214      	adds	r2, #20
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004fce:	e015      	b.n	8004ffc <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 8004fd4:	e012      	b.n	8004ffc <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004fd6:	4b34      	ldr	r3, [pc, #208]	@ (80050a8 <xTaskGenericNotifyFromISR+0x1f0>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00d      	beq.n	8004ffa <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	61fb      	str	r3, [r7, #28]
    }
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	e7fd      	b.n	8004ff2 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8004ff6:	bf00      	nop
 8004ff8:	e000      	b.n	8004ffc <xTaskGenericNotifyFromISR+0x144>
                    break;
 8004ffa:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004ffc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005000:	2b01      	cmp	r3, #1
 8005002:	d146      	bne.n	8005092 <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00b      	beq.n	8005024 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 800500c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005010:	f383 8811 	msr	BASEPRI, r3
 8005014:	f3bf 8f6f 	isb	sy
 8005018:	f3bf 8f4f 	dsb	sy
 800501c:	61bb      	str	r3, [r7, #24]
    }
 800501e:	bf00      	nop
 8005020:	bf00      	nop
 8005022:	e7fd      	b.n	8005020 <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005024:	4b21      	ldr	r3, [pc, #132]	@ (80050ac <xTaskGenericNotifyFromISR+0x1f4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d11c      	bne.n	8005066 <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800502c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502e:	3304      	adds	r3, #4
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe fad9 	bl	80035e8 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503a:	2201      	movs	r2, #1
 800503c:	409a      	lsls	r2, r3
 800503e:	4b1c      	ldr	r3, [pc, #112]	@ (80050b0 <xTaskGenericNotifyFromISR+0x1f8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4313      	orrs	r3, r2
 8005044:	4a1a      	ldr	r2, [pc, #104]	@ (80050b0 <xTaskGenericNotifyFromISR+0x1f8>)
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504c:	4613      	mov	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4a17      	ldr	r2, [pc, #92]	@ (80050b4 <xTaskGenericNotifyFromISR+0x1fc>)
 8005056:	441a      	add	r2, r3
 8005058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505a:	3304      	adds	r3, #4
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f7fe fa65 	bl	800352e <vListInsertEnd>
 8005064:	e005      	b.n	8005072 <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005066:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005068:	3318      	adds	r3, #24
 800506a:	4619      	mov	r1, r3
 800506c:	4812      	ldr	r0, [pc, #72]	@ (80050b8 <xTaskGenericNotifyFromISR+0x200>)
 800506e:	f7fe fa5e 	bl	800352e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005076:	4b11      	ldr	r3, [pc, #68]	@ (80050bc <xTaskGenericNotifyFromISR+0x204>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507c:	429a      	cmp	r2, r3
 800507e:	d908      	bls.n	8005092 <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005080:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005082:	2b00      	cmp	r3, #0
 8005084:	d002      	beq.n	800508c <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005086:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005088:	2201      	movs	r2, #1
 800508a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800508c:	4b0c      	ldr	r3, [pc, #48]	@ (80050c0 <xTaskGenericNotifyFromISR+0x208>)
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005094:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f383 8811 	msr	BASEPRI, r3
    }
 800509c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800509e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 80050a0:	4618      	mov	r0, r3
 80050a2:	3740      	adds	r7, #64	@ 0x40
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	200001f8 	.word	0x200001f8
 80050ac:	2000021c 	.word	0x2000021c
 80050b0:	200001fc 	.word	0x200001fc
 80050b4:	20000120 	.word	0x20000120
 80050b8:	200001b4 	.word	0x200001b4
 80050bc:	2000011c 	.word	0x2000011c
 80050c0:	20000208 	.word	0x20000208

080050c4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80050ce:	4b29      	ldr	r3, [pc, #164]	@ (8005174 <prvAddCurrentTaskToDelayedList+0xb0>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80050d4:	4b28      	ldr	r3, [pc, #160]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3304      	adds	r3, #4
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe fa84 	bl	80035e8 <uxListRemove>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d10b      	bne.n	80050fe <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80050e6:	4b24      	ldr	r3, [pc, #144]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ec:	2201      	movs	r2, #1
 80050ee:	fa02 f303 	lsl.w	r3, r2, r3
 80050f2:	43da      	mvns	r2, r3
 80050f4:	4b21      	ldr	r3, [pc, #132]	@ (800517c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4013      	ands	r3, r2
 80050fa:	4a20      	ldr	r2, [pc, #128]	@ (800517c <prvAddCurrentTaskToDelayedList+0xb8>)
 80050fc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005104:	d10a      	bne.n	800511c <prvAddCurrentTaskToDelayedList+0x58>
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d007      	beq.n	800511c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800510c:	4b1a      	ldr	r3, [pc, #104]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3304      	adds	r3, #4
 8005112:	4619      	mov	r1, r3
 8005114:	481a      	ldr	r0, [pc, #104]	@ (8005180 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005116:	f7fe fa0a 	bl	800352e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800511a:	e026      	b.n	800516a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800511c:	68fa      	ldr	r2, [r7, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4413      	add	r3, r2
 8005122:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005124:	4b14      	ldr	r3, [pc, #80]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	429a      	cmp	r2, r3
 8005132:	d209      	bcs.n	8005148 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005134:	4b13      	ldr	r3, [pc, #76]	@ (8005184 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	4b0f      	ldr	r3, [pc, #60]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	3304      	adds	r3, #4
 800513e:	4619      	mov	r1, r3
 8005140:	4610      	mov	r0, r2
 8005142:	f7fe fa18 	bl	8003576 <vListInsert>
}
 8005146:	e010      	b.n	800516a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005148:	4b0f      	ldr	r3, [pc, #60]	@ (8005188 <prvAddCurrentTaskToDelayedList+0xc4>)
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	4b0a      	ldr	r3, [pc, #40]	@ (8005178 <prvAddCurrentTaskToDelayedList+0xb4>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3304      	adds	r3, #4
 8005152:	4619      	mov	r1, r3
 8005154:	4610      	mov	r0, r2
 8005156:	f7fe fa0e 	bl	8003576 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800515a:	4b0c      	ldr	r3, [pc, #48]	@ (800518c <prvAddCurrentTaskToDelayedList+0xc8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	429a      	cmp	r2, r3
 8005162:	d202      	bcs.n	800516a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005164:	4a09      	ldr	r2, [pc, #36]	@ (800518c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005166:	68bb      	ldr	r3, [r7, #8]
 8005168:	6013      	str	r3, [r2, #0]
}
 800516a:	bf00      	nop
 800516c:	3710      	adds	r7, #16
 800516e:	46bd      	mov	sp, r7
 8005170:	bd80      	pop	{r7, pc}
 8005172:	bf00      	nop
 8005174:	200001f8 	.word	0x200001f8
 8005178:	2000011c 	.word	0x2000011c
 800517c:	200001fc 	.word	0x200001fc
 8005180:	200001e0 	.word	0x200001e0
 8005184:	200001b0 	.word	0x200001b0
 8005188:	200001ac 	.word	0x200001ac
 800518c:	20000214 	.word	0x20000214

08005190 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005196:	2300      	movs	r3, #0
 8005198:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800519a:	f000 fae1 	bl	8005760 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800519e:	4b12      	ldr	r3, [pc, #72]	@ (80051e8 <xTimerCreateTimerTask+0x58>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d00b      	beq.n	80051be <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 80051a6:	4b11      	ldr	r3, [pc, #68]	@ (80051ec <xTimerCreateTimerTask+0x5c>)
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	2302      	movs	r3, #2
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	2300      	movs	r3, #0
 80051b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80051b4:	490e      	ldr	r1, [pc, #56]	@ (80051f0 <xTimerCreateTimerTask+0x60>)
 80051b6:	480f      	ldr	r0, [pc, #60]	@ (80051f4 <xTimerCreateTimerTask+0x64>)
 80051b8:	f7ff f808 	bl	80041cc <xTaskCreate>
 80051bc:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	603b      	str	r3, [r7, #0]
    }
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80051dc:	687b      	ldr	r3, [r7, #4]
    }
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000250 	.word	0x20000250
 80051ec:	20000254 	.word	0x20000254
 80051f0:	08006168 	.word	0x08006168
 80051f4:	08005331 	.word	0x08005331

080051f8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08a      	sub	sp, #40	@ 0x28
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8005206:	2300      	movs	r3, #0
 8005208:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10b      	bne.n	8005228 <xTimerGenericCommand+0x30>
        __asm volatile
 8005210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	623b      	str	r3, [r7, #32]
    }
 8005222:	bf00      	nop
 8005224:	bf00      	nop
 8005226:	e7fd      	b.n	8005224 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005228:	4b19      	ldr	r3, [pc, #100]	@ (8005290 <xTimerGenericCommand+0x98>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d02a      	beq.n	8005286 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b05      	cmp	r3, #5
 8005240:	dc18      	bgt.n	8005274 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005242:	f7ff fd1f 	bl	8004c84 <xTaskGetSchedulerState>
 8005246:	4603      	mov	r3, r0
 8005248:	2b02      	cmp	r3, #2
 800524a:	d109      	bne.n	8005260 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800524c:	4b10      	ldr	r3, [pc, #64]	@ (8005290 <xTimerGenericCommand+0x98>)
 800524e:	6818      	ldr	r0, [r3, #0]
 8005250:	f107 0114 	add.w	r1, r7, #20
 8005254:	2300      	movs	r3, #0
 8005256:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005258:	f7fe fae0 	bl	800381c <xQueueGenericSend>
 800525c:	6278      	str	r0, [r7, #36]	@ 0x24
 800525e:	e012      	b.n	8005286 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005260:	4b0b      	ldr	r3, [pc, #44]	@ (8005290 <xTimerGenericCommand+0x98>)
 8005262:	6818      	ldr	r0, [r3, #0]
 8005264:	f107 0114 	add.w	r1, r7, #20
 8005268:	2300      	movs	r3, #0
 800526a:	2200      	movs	r2, #0
 800526c:	f7fe fad6 	bl	800381c <xQueueGenericSend>
 8005270:	6278      	str	r0, [r7, #36]	@ 0x24
 8005272:	e008      	b.n	8005286 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005274:	4b06      	ldr	r3, [pc, #24]	@ (8005290 <xTimerGenericCommand+0x98>)
 8005276:	6818      	ldr	r0, [r3, #0]
 8005278:	f107 0114 	add.w	r1, r7, #20
 800527c:	2300      	movs	r3, #0
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	f7fe fbce 	bl	8003a20 <xQueueGenericSendFromISR>
 8005284:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005288:	4618      	mov	r0, r3
 800528a:	3728      	adds	r7, #40	@ 0x28
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}
 8005290:	20000250 	.word	0x20000250

08005294 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005294:	b580      	push	{r7, lr}
 8005296:	b088      	sub	sp, #32
 8005298:	af02      	add	r7, sp, #8
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800529e:	4b23      	ldr	r3, [pc, #140]	@ (800532c <prvProcessExpiredTimer+0x98>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	3304      	adds	r3, #4
 80052ac:	4618      	mov	r0, r3
 80052ae:	f7fe f99b 	bl	80035e8 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052b8:	f003 0304 	and.w	r3, r3, #4
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d023      	beq.n	8005308 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	18d1      	adds	r1, r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	6978      	ldr	r0, [r7, #20]
 80052ce:	f000 f8d5 	bl	800547c <prvInsertTimerInActiveList>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d020      	beq.n	800531a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052d8:	2300      	movs	r3, #0
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	2300      	movs	r3, #0
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	2100      	movs	r1, #0
 80052e2:	6978      	ldr	r0, [r7, #20]
 80052e4:	f7ff ff88 	bl	80051f8 <xTimerGenericCommand>
 80052e8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d114      	bne.n	800531a <prvProcessExpiredTimer+0x86>
        __asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	60fb      	str	r3, [r7, #12]
    }
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	e7fd      	b.n	8005304 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800530e:	f023 0301 	bic.w	r3, r3, #1
 8005312:	b2da      	uxtb	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	6978      	ldr	r0, [r7, #20]
 8005320:	4798      	blx	r3
    }
 8005322:	bf00      	nop
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	20000248 	.word	0x20000248

08005330 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005338:	f107 0308 	add.w	r3, r7, #8
 800533c:	4618      	mov	r0, r3
 800533e:	f000 f859 	bl	80053f4 <prvGetNextExpireTime>
 8005342:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4619      	mov	r1, r3
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f805 	bl	8005358 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800534e:	f000 f8d7 	bl	8005500 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005352:	bf00      	nop
 8005354:	e7f0      	b.n	8005338 <prvTimerTask+0x8>
	...

08005358 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005362:	f7ff f8cb 	bl	80044fc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005366:	f107 0308 	add.w	r3, r7, #8
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f866 	bl	800543c <prvSampleTimeNow>
 8005370:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d130      	bne.n	80053da <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d10a      	bne.n	8005394 <prvProcessTimerOrBlockTask+0x3c>
 800537e:	687a      	ldr	r2, [r7, #4]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	429a      	cmp	r2, r3
 8005384:	d806      	bhi.n	8005394 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005386:	f7ff f8c7 	bl	8004518 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800538a:	68f9      	ldr	r1, [r7, #12]
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff ff81 	bl	8005294 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005392:	e024      	b.n	80053de <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d008      	beq.n	80053ac <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800539a:	4b13      	ldr	r3, [pc, #76]	@ (80053e8 <prvProcessTimerOrBlockTask+0x90>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <prvProcessTimerOrBlockTask+0x50>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <prvProcessTimerOrBlockTask+0x52>
 80053a8:	2300      	movs	r3, #0
 80053aa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053ac:	4b0f      	ldr	r3, [pc, #60]	@ (80053ec <prvProcessTimerOrBlockTask+0x94>)
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	687a      	ldr	r2, [r7, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	4619      	mov	r1, r3
 80053ba:	f7fe fed3 	bl	8004164 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80053be:	f7ff f8ab 	bl	8004518 <xTaskResumeAll>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10a      	bne.n	80053de <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80053c8:	4b09      	ldr	r3, [pc, #36]	@ (80053f0 <prvProcessTimerOrBlockTask+0x98>)
 80053ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80053ce:	601a      	str	r2, [r3, #0]
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	f3bf 8f6f 	isb	sy
    }
 80053d8:	e001      	b.n	80053de <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80053da:	f7ff f89d 	bl	8004518 <xTaskResumeAll>
    }
 80053de:	bf00      	nop
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	2000024c 	.word	0x2000024c
 80053ec:	20000250 	.word	0x20000250
 80053f0:	e000ed04 	.word	0xe000ed04

080053f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053fc:	4b0e      	ldr	r3, [pc, #56]	@ (8005438 <prvGetNextExpireTime+0x44>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <prvGetNextExpireTime+0x16>
 8005406:	2201      	movs	r2, #1
 8005408:	e000      	b.n	800540c <prvGetNextExpireTime+0x18>
 800540a:	2200      	movs	r2, #0
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d105      	bne.n	8005424 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005418:	4b07      	ldr	r3, [pc, #28]	@ (8005438 <prvGetNextExpireTime+0x44>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	60fb      	str	r3, [r7, #12]
 8005422:	e001      	b.n	8005428 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005424:	2300      	movs	r3, #0
 8005426:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005428:	68fb      	ldr	r3, [r7, #12]
    }
 800542a:	4618      	mov	r0, r3
 800542c:	3714      	adds	r7, #20
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000248 	.word	0x20000248

0800543c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005444:	f7ff f906 	bl	8004654 <xTaskGetTickCount>
 8005448:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800544a:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <prvSampleTimeNow+0x3c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	429a      	cmp	r2, r3
 8005452:	d205      	bcs.n	8005460 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005454:	f000 f91e 	bl	8005694 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	601a      	str	r2, [r3, #0]
 800545e:	e002      	b.n	8005466 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005466:	4a04      	ldr	r2, [pc, #16]	@ (8005478 <prvSampleTimeNow+0x3c>)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800546c:	68fb      	ldr	r3, [r7, #12]
    }
 800546e:	4618      	mov	r0, r3
 8005470:	3710      	adds	r7, #16
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000258 	.word	0x20000258

0800547c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
 8005488:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800549a:	68ba      	ldr	r2, [r7, #8]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d812      	bhi.n	80054c8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	1ad2      	subs	r2, r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d302      	bcc.n	80054b6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80054b0:	2301      	movs	r3, #1
 80054b2:	617b      	str	r3, [r7, #20]
 80054b4:	e01b      	b.n	80054ee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054b6:	4b10      	ldr	r3, [pc, #64]	@ (80054f8 <prvInsertTimerInActiveList+0x7c>)
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3304      	adds	r3, #4
 80054be:	4619      	mov	r1, r3
 80054c0:	4610      	mov	r0, r2
 80054c2:	f7fe f858 	bl	8003576 <vListInsert>
 80054c6:	e012      	b.n	80054ee <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d206      	bcs.n	80054de <prvInsertTimerInActiveList+0x62>
 80054d0:	68ba      	ldr	r2, [r7, #8]
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d302      	bcc.n	80054de <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80054d8:	2301      	movs	r3, #1
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e007      	b.n	80054ee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80054de:	4b07      	ldr	r3, [pc, #28]	@ (80054fc <prvInsertTimerInActiveList+0x80>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3304      	adds	r3, #4
 80054e6:	4619      	mov	r1, r3
 80054e8:	4610      	mov	r0, r2
 80054ea:	f7fe f844 	bl	8003576 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80054ee:	697b      	ldr	r3, [r7, #20]
    }
 80054f0:	4618      	mov	r0, r3
 80054f2:	3718      	adds	r7, #24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	2000024c 	.word	0x2000024c
 80054fc:	20000248 	.word	0x20000248

08005500 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005500:	b580      	push	{r7, lr}
 8005502:	b08c      	sub	sp, #48	@ 0x30
 8005504:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005506:	e0b2      	b.n	800566e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	f2c0 80af 	blt.w	800566e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d004      	beq.n	8005526 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	3304      	adds	r3, #4
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe f861 	bl	80035e8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005526:	1d3b      	adds	r3, r7, #4
 8005528:	4618      	mov	r0, r3
 800552a:	f7ff ff87 	bl	800543c <prvSampleTimeNow>
 800552e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	2b09      	cmp	r3, #9
 8005534:	f200 8098 	bhi.w	8005668 <prvProcessReceivedCommands+0x168>
 8005538:	a201      	add	r2, pc, #4	@ (adr r2, 8005540 <prvProcessReceivedCommands+0x40>)
 800553a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800553e:	bf00      	nop
 8005540:	08005569 	.word	0x08005569
 8005544:	08005569 	.word	0x08005569
 8005548:	08005569 	.word	0x08005569
 800554c:	080055df 	.word	0x080055df
 8005550:	080055f3 	.word	0x080055f3
 8005554:	0800563f 	.word	0x0800563f
 8005558:	08005569 	.word	0x08005569
 800555c:	08005569 	.word	0x08005569
 8005560:	080055df 	.word	0x080055df
 8005564:	080055f3 	.word	0x080055f3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800556e:	f043 0301 	orr.w	r3, r3, #1
 8005572:	b2da      	uxtb	r2, r3
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	18d1      	adds	r1, r2, r3
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005588:	f7ff ff78 	bl	800547c <prvInsertTimerInActiveList>
 800558c:	4603      	mov	r3, r0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d06c      	beq.n	800566c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005594:	6a1b      	ldr	r3, [r3, #32]
 8005596:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005598:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800559a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055a0:	f003 0304 	and.w	r3, r3, #4
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d061      	beq.n	800566c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	441a      	add	r2, r3
 80055b0:	2300      	movs	r3, #0
 80055b2:	9300      	str	r3, [sp, #0]
 80055b4:	2300      	movs	r3, #0
 80055b6:	2100      	movs	r1, #0
 80055b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055ba:	f7ff fe1d 	bl	80051f8 <xTimerGenericCommand>
 80055be:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d152      	bne.n	800566c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 80055c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	61bb      	str	r3, [r7, #24]
    }
 80055d8:	bf00      	nop
 80055da:	bf00      	nop
 80055dc:	e7fd      	b.n	80055da <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055e4:	f023 0301 	bic.w	r3, r3, #1
 80055e8:	b2da      	uxtb	r2, r3
 80055ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80055f0:	e03d      	b.n	800566e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055f8:	f043 0301 	orr.w	r3, r3, #1
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005600:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800560a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10b      	bne.n	800562a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8005612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005616:	f383 8811 	msr	BASEPRI, r3
 800561a:	f3bf 8f6f 	isb	sy
 800561e:	f3bf 8f4f 	dsb	sy
 8005622:	617b      	str	r3, [r7, #20]
    }
 8005624:	bf00      	nop
 8005626:	bf00      	nop
 8005628:	e7fd      	b.n	8005626 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800562a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562c:	699a      	ldr	r2, [r3, #24]
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	18d1      	adds	r1, r2, r3
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	6a3a      	ldr	r2, [r7, #32]
 8005636:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005638:	f7ff ff20 	bl	800547c <prvInsertTimerInActiveList>
                        break;
 800563c:	e017      	b.n	800566e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005640:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d103      	bne.n	8005654 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800564c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800564e:	f000 fbf9 	bl	8005e44 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005652:	e00c      	b.n	800566e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005656:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800565a:	f023 0301 	bic.w	r3, r3, #1
 800565e:	b2da      	uxtb	r2, r3
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005666:	e002      	b.n	800566e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005668:	bf00      	nop
 800566a:	e000      	b.n	800566e <prvProcessReceivedCommands+0x16e>
                        break;
 800566c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800566e:	4b08      	ldr	r3, [pc, #32]	@ (8005690 <prvProcessReceivedCommands+0x190>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f107 0108 	add.w	r1, r7, #8
 8005676:	2200      	movs	r2, #0
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe fa7f 	bl	8003b7c <xQueueReceive>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	f47f af41 	bne.w	8005508 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005686:	bf00      	nop
 8005688:	bf00      	nop
 800568a:	3728      	adds	r7, #40	@ 0x28
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}
 8005690:	20000250 	.word	0x20000250

08005694 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005694:	b580      	push	{r7, lr}
 8005696:	b088      	sub	sp, #32
 8005698:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800569a:	e049      	b.n	8005730 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800569c:	4b2e      	ldr	r3, [pc, #184]	@ (8005758 <prvSwitchTimerLists+0xc4>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a6:	4b2c      	ldr	r3, [pc, #176]	@ (8005758 <prvSwitchTimerLists+0xc4>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	3304      	adds	r3, #4
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7fd ff97 	bl	80035e8 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	68f8      	ldr	r0, [r7, #12]
 80056c0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056c8:	f003 0304 	and.w	r3, r3, #4
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d02f      	beq.n	8005730 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	699b      	ldr	r3, [r3, #24]
 80056d4:	693a      	ldr	r2, [r7, #16]
 80056d6:	4413      	add	r3, r2
 80056d8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80056da:	68ba      	ldr	r2, [r7, #8]
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d90e      	bls.n	8005700 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005758 <prvSwitchTimerLists+0xc4>)
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3304      	adds	r3, #4
 80056f6:	4619      	mov	r1, r3
 80056f8:	4610      	mov	r0, r2
 80056fa:	f7fd ff3c 	bl	8003576 <vListInsert>
 80056fe:	e017      	b.n	8005730 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005700:	2300      	movs	r3, #0
 8005702:	9300      	str	r3, [sp, #0]
 8005704:	2300      	movs	r3, #0
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	2100      	movs	r1, #0
 800570a:	68f8      	ldr	r0, [r7, #12]
 800570c:	f7ff fd74 	bl	80051f8 <xTimerGenericCommand>
 8005710:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	603b      	str	r3, [r7, #0]
    }
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	e7fd      	b.n	800572c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005730:	4b09      	ldr	r3, [pc, #36]	@ (8005758 <prvSwitchTimerLists+0xc4>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1b0      	bne.n	800569c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800573a:	4b07      	ldr	r3, [pc, #28]	@ (8005758 <prvSwitchTimerLists+0xc4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005740:	4b06      	ldr	r3, [pc, #24]	@ (800575c <prvSwitchTimerLists+0xc8>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a04      	ldr	r2, [pc, #16]	@ (8005758 <prvSwitchTimerLists+0xc4>)
 8005746:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005748:	4a04      	ldr	r2, [pc, #16]	@ (800575c <prvSwitchTimerLists+0xc8>)
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	6013      	str	r3, [r2, #0]
    }
 800574e:	bf00      	nop
 8005750:	3718      	adds	r7, #24
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	20000248 	.word	0x20000248
 800575c:	2000024c 	.word	0x2000024c

08005760 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005760:	b580      	push	{r7, lr}
 8005762:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005764:	f000 f962 	bl	8005a2c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005768:	4b12      	ldr	r3, [pc, #72]	@ (80057b4 <prvCheckForValidListAndQueue+0x54>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d11d      	bne.n	80057ac <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005770:	4811      	ldr	r0, [pc, #68]	@ (80057b8 <prvCheckForValidListAndQueue+0x58>)
 8005772:	f7fd feaf 	bl	80034d4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005776:	4811      	ldr	r0, [pc, #68]	@ (80057bc <prvCheckForValidListAndQueue+0x5c>)
 8005778:	f7fd feac 	bl	80034d4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800577c:	4b10      	ldr	r3, [pc, #64]	@ (80057c0 <prvCheckForValidListAndQueue+0x60>)
 800577e:	4a0e      	ldr	r2, [pc, #56]	@ (80057b8 <prvCheckForValidListAndQueue+0x58>)
 8005780:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005782:	4b10      	ldr	r3, [pc, #64]	@ (80057c4 <prvCheckForValidListAndQueue+0x64>)
 8005784:	4a0d      	ldr	r2, [pc, #52]	@ (80057bc <prvCheckForValidListAndQueue+0x5c>)
 8005786:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005788:	2200      	movs	r2, #0
 800578a:	210c      	movs	r1, #12
 800578c:	200a      	movs	r0, #10
 800578e:	f7fd ffbf 	bl	8003710 <xQueueGenericCreate>
 8005792:	4603      	mov	r3, r0
 8005794:	4a07      	ldr	r2, [pc, #28]	@ (80057b4 <prvCheckForValidListAndQueue+0x54>)
 8005796:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005798:	4b06      	ldr	r3, [pc, #24]	@ (80057b4 <prvCheckForValidListAndQueue+0x54>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80057a0:	4b04      	ldr	r3, [pc, #16]	@ (80057b4 <prvCheckForValidListAndQueue+0x54>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4908      	ldr	r1, [pc, #32]	@ (80057c8 <prvCheckForValidListAndQueue+0x68>)
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fe fcb2 	bl	8004110 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80057ac:	f000 f970 	bl	8005a90 <vPortExitCritical>
    }
 80057b0:	bf00      	nop
 80057b2:	bd80      	pop	{r7, pc}
 80057b4:	20000250 	.word	0x20000250
 80057b8:	20000220 	.word	0x20000220
 80057bc:	20000234 	.word	0x20000234
 80057c0:	20000248 	.word	0x20000248
 80057c4:	2000024c 	.word	0x2000024c
 80057c8:	08006170 	.word	0x08006170

080057cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3b04      	subs	r3, #4
 80057dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	3b04      	subs	r3, #4
 80057ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3b04      	subs	r3, #4
 80057fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80057fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005830 <pxPortInitialiseStack+0x64>)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	3b14      	subs	r3, #20
 8005806:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3b04      	subs	r3, #4
 8005812:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f06f 0202 	mvn.w	r2, #2
 800581a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	3b20      	subs	r3, #32
 8005820:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005822:	68fb      	ldr	r3, [r7, #12]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	08005835 	.word	0x08005835

08005834 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800583a:	2300      	movs	r3, #0
 800583c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800583e:	4b13      	ldr	r3, [pc, #76]	@ (800588c <prvTaskExitError+0x58>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005846:	d00b      	beq.n	8005860 <prvTaskExitError+0x2c>
        __asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60fb      	str	r3, [r7, #12]
    }
 800585a:	bf00      	nop
 800585c:	bf00      	nop
 800585e:	e7fd      	b.n	800585c <prvTaskExitError+0x28>
        __asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	60bb      	str	r3, [r7, #8]
    }
 8005872:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005874:	bf00      	nop
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d0fc      	beq.n	8005876 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800587c:	bf00      	nop
 800587e:	bf00      	nop
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	20000014 	.word	0x20000014

08005890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005890:	4b07      	ldr	r3, [pc, #28]	@ (80058b0 <pxCurrentTCBConst2>)
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	6808      	ldr	r0, [r1, #0]
 8005896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800589a:	f380 8809 	msr	PSP, r0
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f04f 0000 	mov.w	r0, #0
 80058a6:	f380 8811 	msr	BASEPRI, r0
 80058aa:	4770      	bx	lr
 80058ac:	f3af 8000 	nop.w

080058b0 <pxCurrentTCBConst2>:
 80058b0:	2000011c 	.word	0x2000011c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80058b4:	bf00      	nop
 80058b6:	bf00      	nop

080058b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80058b8:	4808      	ldr	r0, [pc, #32]	@ (80058dc <prvPortStartFirstTask+0x24>)
 80058ba:	6800      	ldr	r0, [r0, #0]
 80058bc:	6800      	ldr	r0, [r0, #0]
 80058be:	f380 8808 	msr	MSP, r0
 80058c2:	f04f 0000 	mov.w	r0, #0
 80058c6:	f380 8814 	msr	CONTROL, r0
 80058ca:	b662      	cpsie	i
 80058cc:	b661      	cpsie	f
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	df00      	svc	0
 80058d8:	bf00      	nop
 80058da:	0000      	.short	0x0000
 80058dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop

080058e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058ea:	4b47      	ldr	r3, [pc, #284]	@ (8005a08 <xPortStartScheduler+0x124>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a47      	ldr	r2, [pc, #284]	@ (8005a0c <xPortStartScheduler+0x128>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d10b      	bne.n	800590c <xPortStartScheduler+0x28>
        __asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	613b      	str	r3, [r7, #16]
    }
 8005906:	bf00      	nop
 8005908:	bf00      	nop
 800590a:	e7fd      	b.n	8005908 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800590c:	4b3e      	ldr	r3, [pc, #248]	@ (8005a08 <xPortStartScheduler+0x124>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a3f      	ldr	r2, [pc, #252]	@ (8005a10 <xPortStartScheduler+0x12c>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d10b      	bne.n	800592e <xPortStartScheduler+0x4a>
        __asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	60fb      	str	r3, [r7, #12]
    }
 8005928:	bf00      	nop
 800592a:	bf00      	nop
 800592c:	e7fd      	b.n	800592a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800592e:	4b39      	ldr	r3, [pc, #228]	@ (8005a14 <xPortStartScheduler+0x130>)
 8005930:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800593a:	697b      	ldr	r3, [r7, #20]
 800593c:	22ff      	movs	r2, #255	@ 0xff
 800593e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005948:	78fb      	ldrb	r3, [r7, #3]
 800594a:	b2db      	uxtb	r3, r3
 800594c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005950:	b2da      	uxtb	r2, r3
 8005952:	4b31      	ldr	r3, [pc, #196]	@ (8005a18 <xPortStartScheduler+0x134>)
 8005954:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005956:	4b31      	ldr	r3, [pc, #196]	@ (8005a1c <xPortStartScheduler+0x138>)
 8005958:	2207      	movs	r2, #7
 800595a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800595c:	e009      	b.n	8005972 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800595e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a1c <xPortStartScheduler+0x138>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	3b01      	subs	r3, #1
 8005964:	4a2d      	ldr	r2, [pc, #180]	@ (8005a1c <xPortStartScheduler+0x138>)
 8005966:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	b2db      	uxtb	r3, r3
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	b2db      	uxtb	r3, r3
 8005970:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005972:	78fb      	ldrb	r3, [r7, #3]
 8005974:	b2db      	uxtb	r3, r3
 8005976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800597a:	2b80      	cmp	r3, #128	@ 0x80
 800597c:	d0ef      	beq.n	800595e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800597e:	4b27      	ldr	r3, [pc, #156]	@ (8005a1c <xPortStartScheduler+0x138>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f1c3 0307 	rsb	r3, r3, #7
 8005986:	2b04      	cmp	r3, #4
 8005988:	d00b      	beq.n	80059a2 <xPortStartScheduler+0xbe>
        __asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	60bb      	str	r3, [r7, #8]
    }
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80059a2:	4b1e      	ldr	r3, [pc, #120]	@ (8005a1c <xPortStartScheduler+0x138>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	4a1c      	ldr	r2, [pc, #112]	@ (8005a1c <xPortStartScheduler+0x138>)
 80059aa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80059ac:	4b1b      	ldr	r3, [pc, #108]	@ (8005a1c <xPortStartScheduler+0x138>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059b4:	4a19      	ldr	r2, [pc, #100]	@ (8005a1c <xPortStartScheduler+0x138>)
 80059b6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	b2da      	uxtb	r2, r3
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80059c0:	4b17      	ldr	r3, [pc, #92]	@ (8005a20 <xPortStartScheduler+0x13c>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a16      	ldr	r2, [pc, #88]	@ (8005a20 <xPortStartScheduler+0x13c>)
 80059c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80059cc:	4b14      	ldr	r3, [pc, #80]	@ (8005a20 <xPortStartScheduler+0x13c>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a13      	ldr	r2, [pc, #76]	@ (8005a20 <xPortStartScheduler+0x13c>)
 80059d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059d6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80059d8:	f000 f8e0 	bl	8005b9c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80059dc:	4b11      	ldr	r3, [pc, #68]	@ (8005a24 <xPortStartScheduler+0x140>)
 80059de:	2200      	movs	r2, #0
 80059e0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80059e2:	f000 f8ff 	bl	8005be4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059e6:	4b10      	ldr	r3, [pc, #64]	@ (8005a28 <xPortStartScheduler+0x144>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a0f      	ldr	r2, [pc, #60]	@ (8005a28 <xPortStartScheduler+0x144>)
 80059ec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80059f0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80059f2:	f7ff ff61 	bl	80058b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80059f6:	f7fe fef7 	bl	80047e8 <vTaskSwitchContext>
    prvTaskExitError();
 80059fa:	f7ff ff1b 	bl	8005834 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	e000ed00 	.word	0xe000ed00
 8005a0c:	410fc271 	.word	0x410fc271
 8005a10:	410fc270 	.word	0x410fc270
 8005a14:	e000e400 	.word	0xe000e400
 8005a18:	2000025c 	.word	0x2000025c
 8005a1c:	20000260 	.word	0x20000260
 8005a20:	e000ed20 	.word	0xe000ed20
 8005a24:	20000014 	.word	0x20000014
 8005a28:	e000ef34 	.word	0xe000ef34

08005a2c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
        __asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	607b      	str	r3, [r7, #4]
    }
 8005a44:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005a46:	4b10      	ldr	r3, [pc, #64]	@ (8005a88 <vPortEnterCritical+0x5c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	3301      	adds	r3, #1
 8005a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8005a88 <vPortEnterCritical+0x5c>)
 8005a4e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005a50:	4b0d      	ldr	r3, [pc, #52]	@ (8005a88 <vPortEnterCritical+0x5c>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d110      	bne.n	8005a7a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a58:	4b0c      	ldr	r3, [pc, #48]	@ (8005a8c <vPortEnterCritical+0x60>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00b      	beq.n	8005a7a <vPortEnterCritical+0x4e>
        __asm volatile
 8005a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	603b      	str	r3, [r7, #0]
    }
 8005a74:	bf00      	nop
 8005a76:	bf00      	nop
 8005a78:	e7fd      	b.n	8005a76 <vPortEnterCritical+0x4a>
    }
}
 8005a7a:	bf00      	nop
 8005a7c:	370c      	adds	r7, #12
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	20000014 	.word	0x20000014
 8005a8c:	e000ed04 	.word	0xe000ed04

08005a90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b083      	sub	sp, #12
 8005a94:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005a96:	4b12      	ldr	r3, [pc, #72]	@ (8005ae0 <vPortExitCritical+0x50>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <vPortExitCritical+0x26>
        __asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	607b      	str	r3, [r7, #4]
    }
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae0 <vPortExitCritical+0x50>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3b01      	subs	r3, #1
 8005abc:	4a08      	ldr	r2, [pc, #32]	@ (8005ae0 <vPortExitCritical+0x50>)
 8005abe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005ac0:	4b07      	ldr	r3, [pc, #28]	@ (8005ae0 <vPortExitCritical+0x50>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <vPortExitCritical+0x44>
 8005ac8:	2300      	movs	r3, #0
 8005aca:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	f383 8811 	msr	BASEPRI, r3
    }
 8005ad2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20000014 	.word	0x20000014
	...

08005af0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005af0:	f3ef 8009 	mrs	r0, PSP
 8005af4:	f3bf 8f6f 	isb	sy
 8005af8:	4b15      	ldr	r3, [pc, #84]	@ (8005b50 <pxCurrentTCBConst>)
 8005afa:	681a      	ldr	r2, [r3, #0]
 8005afc:	f01e 0f10 	tst.w	lr, #16
 8005b00:	bf08      	it	eq
 8005b02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0a:	6010      	str	r0, [r2, #0]
 8005b0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b14:	f380 8811 	msr	BASEPRI, r0
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	f3bf 8f6f 	isb	sy
 8005b20:	f7fe fe62 	bl	80047e8 <vTaskSwitchContext>
 8005b24:	f04f 0000 	mov.w	r0, #0
 8005b28:	f380 8811 	msr	BASEPRI, r0
 8005b2c:	bc09      	pop	{r0, r3}
 8005b2e:	6819      	ldr	r1, [r3, #0]
 8005b30:	6808      	ldr	r0, [r1, #0]
 8005b32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b36:	f01e 0f10 	tst.w	lr, #16
 8005b3a:	bf08      	it	eq
 8005b3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b40:	f380 8809 	msr	PSP, r0
 8005b44:	f3bf 8f6f 	isb	sy
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	f3af 8000 	nop.w

08005b50 <pxCurrentTCBConst>:
 8005b50:	2000011c 	.word	0x2000011c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop

08005b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b082      	sub	sp, #8
 8005b5c:	af00      	add	r7, sp, #0
        __asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
    }
 8005b70:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005b72:	f7fe fd7f 	bl	8004674 <xTaskIncrementTick>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b7c:	4b06      	ldr	r3, [pc, #24]	@ (8005b98 <SysTick_Handler+0x40>)
 8005b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	2300      	movs	r3, #0
 8005b86:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	f383 8811 	msr	BASEPRI, r3
    }
 8005b8e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005b90:	bf00      	nop
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	e000ed04 	.word	0xe000ed04

08005b9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <vPortSetupTimerInterrupt+0x34>)
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <vPortSetupTimerInterrupt+0x38>)
 8005ba8:	2200      	movs	r2, #0
 8005baa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005bac:	4b0a      	ldr	r3, [pc, #40]	@ (8005bd8 <vPortSetupTimerInterrupt+0x3c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bdc <vPortSetupTimerInterrupt+0x40>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	099b      	lsrs	r3, r3, #6
 8005bb8:	4a09      	ldr	r2, [pc, #36]	@ (8005be0 <vPortSetupTimerInterrupt+0x44>)
 8005bba:	3b01      	subs	r3, #1
 8005bbc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bbe:	4b04      	ldr	r3, [pc, #16]	@ (8005bd0 <vPortSetupTimerInterrupt+0x34>)
 8005bc0:	2207      	movs	r2, #7
 8005bc2:	601a      	str	r2, [r3, #0]
}
 8005bc4:	bf00      	nop
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	e000e010 	.word	0xe000e010
 8005bd4:	e000e018 	.word	0xe000e018
 8005bd8:	20000004 	.word	0x20000004
 8005bdc:	10624dd3 	.word	0x10624dd3
 8005be0:	e000e014 	.word	0xe000e014

08005be4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005be4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005bf4 <vPortEnableVFP+0x10>
 8005be8:	6801      	ldr	r1, [r0, #0]
 8005bea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bee:	6001      	str	r1, [r0, #0]
 8005bf0:	4770      	bx	lr
 8005bf2:	0000      	.short	0x0000
 8005bf4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005bf8:	bf00      	nop
 8005bfa:	bf00      	nop

08005bfc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005c02:	f3ef 8305 	mrs	r3, IPSR
 8005c06:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b0f      	cmp	r3, #15
 8005c0c:	d915      	bls.n	8005c3a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c0e:	4a18      	ldr	r2, [pc, #96]	@ (8005c70 <vPortValidateInterruptPriority+0x74>)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4413      	add	r3, r2
 8005c14:	781b      	ldrb	r3, [r3, #0]
 8005c16:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c18:	4b16      	ldr	r3, [pc, #88]	@ (8005c74 <vPortValidateInterruptPriority+0x78>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	7afa      	ldrb	r2, [r7, #11]
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	d20b      	bcs.n	8005c3a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	607b      	str	r3, [r7, #4]
    }
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	e7fd      	b.n	8005c36 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c78 <vPortValidateInterruptPriority+0x7c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c42:	4b0e      	ldr	r3, [pc, #56]	@ (8005c7c <vPortValidateInterruptPriority+0x80>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	429a      	cmp	r2, r3
 8005c48:	d90b      	bls.n	8005c62 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8005c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c4e:	f383 8811 	msr	BASEPRI, r3
 8005c52:	f3bf 8f6f 	isb	sy
 8005c56:	f3bf 8f4f 	dsb	sy
 8005c5a:	603b      	str	r3, [r7, #0]
    }
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	e7fd      	b.n	8005c5e <vPortValidateInterruptPriority+0x62>
    }
 8005c62:	bf00      	nop
 8005c64:	3714      	adds	r7, #20
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	e000e3f0 	.word	0xe000e3f0
 8005c74:	2000025c 	.word	0x2000025c
 8005c78:	e000ed0c 	.word	0xe000ed0c
 8005c7c:	20000260 	.word	0x20000260

08005c80 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	@ 0x28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005c8c:	f7fe fc36 	bl	80044fc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005c90:	4b66      	ldr	r3, [pc, #408]	@ (8005e2c <pvPortMalloc+0x1ac>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005c98:	f000 f938 	bl	8005f0c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c9c:	4b64      	ldr	r3, [pc, #400]	@ (8005e30 <pvPortMalloc+0x1b0>)
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f040 80a9 	bne.w	8005dfc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d02e      	beq.n	8005d0e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005cb0:	2208      	movs	r2, #8
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d228      	bcs.n	8005d0e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8005cbc:	2208      	movs	r2, #8
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4413      	add	r3, r2
 8005cc2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f003 0307 	and.w	r3, r3, #7
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d022      	beq.n	8005d14 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f023 0307 	bic.w	r3, r3, #7
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d215      	bcs.n	8005d08 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f023 0307 	bic.w	r3, r3, #7
 8005ce2:	3308      	adds	r3, #8
 8005ce4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	f003 0307 	and.w	r3, r3, #7
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d011      	beq.n	8005d14 <pvPortMalloc+0x94>
        __asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	617b      	str	r3, [r7, #20]
    }
 8005d02:	bf00      	nop
 8005d04:	bf00      	nop
 8005d06:	e7fd      	b.n	8005d04 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d0c:	e002      	b.n	8005d14 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	607b      	str	r3, [r7, #4]
 8005d12:	e000      	b.n	8005d16 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d14:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d06f      	beq.n	8005dfc <pvPortMalloc+0x17c>
 8005d1c:	4b45      	ldr	r3, [pc, #276]	@ (8005e34 <pvPortMalloc+0x1b4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d86a      	bhi.n	8005dfc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005d26:	4b44      	ldr	r3, [pc, #272]	@ (8005e38 <pvPortMalloc+0x1b8>)
 8005d28:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005d2a:	4b43      	ldr	r3, [pc, #268]	@ (8005e38 <pvPortMalloc+0x1b8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d30:	e004      	b.n	8005d3c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d903      	bls.n	8005d4e <pvPortMalloc+0xce>
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d1f1      	bne.n	8005d32 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005d4e:	4b37      	ldr	r3, [pc, #220]	@ (8005e2c <pvPortMalloc+0x1ac>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d051      	beq.n	8005dfc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d58:	6a3b      	ldr	r3, [r7, #32]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2208      	movs	r2, #8
 8005d5e:	4413      	add	r3, r2
 8005d60:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	685a      	ldr	r2, [r3, #4]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	1ad2      	subs	r2, r2, r3
 8005d72:	2308      	movs	r3, #8
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d920      	bls.n	8005dbc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	4413      	add	r3, r2
 8005d80:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	f003 0307 	and.w	r3, r3, #7
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d00b      	beq.n	8005da4 <pvPortMalloc+0x124>
        __asm volatile
 8005d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d90:	f383 8811 	msr	BASEPRI, r3
 8005d94:	f3bf 8f6f 	isb	sy
 8005d98:	f3bf 8f4f 	dsb	sy
 8005d9c:	613b      	str	r3, [r7, #16]
    }
 8005d9e:	bf00      	nop
 8005da0:	bf00      	nop
 8005da2:	e7fd      	b.n	8005da0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da6:	685a      	ldr	r2, [r3, #4]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	1ad2      	subs	r2, r2, r3
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005db6:	69b8      	ldr	r0, [r7, #24]
 8005db8:	f000 f90a 	bl	8005fd0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8005e34 <pvPortMalloc+0x1b4>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e34 <pvPortMalloc+0x1b4>)
 8005dc8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dca:	4b1a      	ldr	r3, [pc, #104]	@ (8005e34 <pvPortMalloc+0x1b4>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	4b1b      	ldr	r3, [pc, #108]	@ (8005e3c <pvPortMalloc+0x1bc>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d203      	bcs.n	8005dde <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dd6:	4b17      	ldr	r3, [pc, #92]	@ (8005e34 <pvPortMalloc+0x1b4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a18      	ldr	r2, [pc, #96]	@ (8005e3c <pvPortMalloc+0x1bc>)
 8005ddc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	4b13      	ldr	r3, [pc, #76]	@ (8005e30 <pvPortMalloc+0x1b0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dea:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	2200      	movs	r2, #0
 8005df0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005df2:	4b13      	ldr	r3, [pc, #76]	@ (8005e40 <pvPortMalloc+0x1c0>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	3301      	adds	r3, #1
 8005df8:	4a11      	ldr	r2, [pc, #68]	@ (8005e40 <pvPortMalloc+0x1c0>)
 8005dfa:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005dfc:	f7fe fb8c 	bl	8004518 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f003 0307 	and.w	r3, r3, #7
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00b      	beq.n	8005e22 <pvPortMalloc+0x1a2>
        __asm volatile
 8005e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0e:	f383 8811 	msr	BASEPRI, r3
 8005e12:	f3bf 8f6f 	isb	sy
 8005e16:	f3bf 8f4f 	dsb	sy
 8005e1a:	60fb      	str	r3, [r7, #12]
    }
 8005e1c:	bf00      	nop
 8005e1e:	bf00      	nop
 8005e20:	e7fd      	b.n	8005e1e <pvPortMalloc+0x19e>
    return pvReturn;
 8005e22:	69fb      	ldr	r3, [r7, #28]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	3728      	adds	r7, #40	@ 0x28
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	bd80      	pop	{r7, pc}
 8005e2c:	2001926c 	.word	0x2001926c
 8005e30:	20019280 	.word	0x20019280
 8005e34:	20019270 	.word	0x20019270
 8005e38:	20019264 	.word	0x20019264
 8005e3c:	20019274 	.word	0x20019274
 8005e40:	20019278 	.word	0x20019278

08005e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d04f      	beq.n	8005ef6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005e56:	2308      	movs	r3, #8
 8005e58:	425b      	negs	r3, r3
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4413      	add	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	4b25      	ldr	r3, [pc, #148]	@ (8005f00 <vPortFree+0xbc>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10b      	bne.n	8005e8a <vPortFree+0x46>
        __asm volatile
 8005e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e76:	f383 8811 	msr	BASEPRI, r3
 8005e7a:	f3bf 8f6f 	isb	sy
 8005e7e:	f3bf 8f4f 	dsb	sy
 8005e82:	60fb      	str	r3, [r7, #12]
    }
 8005e84:	bf00      	nop
 8005e86:	bf00      	nop
 8005e88:	e7fd      	b.n	8005e86 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <vPortFree+0x66>
        __asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	60bb      	str	r3, [r7, #8]
    }
 8005ea4:	bf00      	nop
 8005ea6:	bf00      	nop
 8005ea8:	e7fd      	b.n	8005ea6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	685a      	ldr	r2, [r3, #4]
 8005eae:	4b14      	ldr	r3, [pc, #80]	@ (8005f00 <vPortFree+0xbc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01e      	beq.n	8005ef6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d11a      	bne.n	8005ef6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	685a      	ldr	r2, [r3, #4]
 8005ec4:	4b0e      	ldr	r3, [pc, #56]	@ (8005f00 <vPortFree+0xbc>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	401a      	ands	r2, r3
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005ed0:	f7fe fb14 	bl	80044fc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	685a      	ldr	r2, [r3, #4]
 8005ed8:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <vPortFree+0xc0>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4413      	add	r3, r2
 8005ede:	4a09      	ldr	r2, [pc, #36]	@ (8005f04 <vPortFree+0xc0>)
 8005ee0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ee2:	6938      	ldr	r0, [r7, #16]
 8005ee4:	f000 f874 	bl	8005fd0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005ee8:	4b07      	ldr	r3, [pc, #28]	@ (8005f08 <vPortFree+0xc4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3301      	adds	r3, #1
 8005eee:	4a06      	ldr	r2, [pc, #24]	@ (8005f08 <vPortFree+0xc4>)
 8005ef0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005ef2:	f7fe fb11 	bl	8004518 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005ef6:	bf00      	nop
 8005ef8:	3718      	adds	r7, #24
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20019280 	.word	0x20019280
 8005f04:	20019270 	.word	0x20019270
 8005f08:	2001927c 	.word	0x2001927c

08005f0c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b085      	sub	sp, #20
 8005f10:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f12:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8005f16:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005f18:	4b27      	ldr	r3, [pc, #156]	@ (8005fb8 <prvHeapInit+0xac>)
 8005f1a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d00c      	beq.n	8005f40 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	3307      	adds	r3, #7
 8005f2a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f023 0307 	bic.w	r3, r3, #7
 8005f32:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f34:	68ba      	ldr	r2, [r7, #8]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fb8 <prvHeapInit+0xac>)
 8005f3c:	4413      	add	r3, r2
 8005f3e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f44:	4a1d      	ldr	r2, [pc, #116]	@ (8005fbc <prvHeapInit+0xb0>)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8005fbc <prvHeapInit+0xb0>)
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	4413      	add	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005f58:	2208      	movs	r2, #8
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	1a9b      	subs	r3, r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f023 0307 	bic.w	r3, r3, #7
 8005f66:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	4a15      	ldr	r2, [pc, #84]	@ (8005fc0 <prvHeapInit+0xb4>)
 8005f6c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005f6e:	4b14      	ldr	r3, [pc, #80]	@ (8005fc0 <prvHeapInit+0xb4>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	2200      	movs	r2, #0
 8005f74:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005f76:	4b12      	ldr	r3, [pc, #72]	@ (8005fc0 <prvHeapInit+0xb4>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	68fa      	ldr	r2, [r7, #12]
 8005f86:	1ad2      	subs	r2, r2, r3
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fc0 <prvHeapInit+0xb4>)
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	4a0a      	ldr	r2, [pc, #40]	@ (8005fc4 <prvHeapInit+0xb8>)
 8005f9a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	4a09      	ldr	r2, [pc, #36]	@ (8005fc8 <prvHeapInit+0xbc>)
 8005fa2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fa4:	4b09      	ldr	r3, [pc, #36]	@ (8005fcc <prvHeapInit+0xc0>)
 8005fa6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005faa:	601a      	str	r2, [r3, #0]
}
 8005fac:	bf00      	nop
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	20000264 	.word	0x20000264
 8005fbc:	20019264 	.word	0x20019264
 8005fc0:	2001926c 	.word	0x2001926c
 8005fc4:	20019274 	.word	0x20019274
 8005fc8:	20019270 	.word	0x20019270
 8005fcc:	20019280 	.word	0x20019280

08005fd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b085      	sub	sp, #20
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fd8:	4b28      	ldr	r3, [pc, #160]	@ (800607c <prvInsertBlockIntoFreeList+0xac>)
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	e002      	b.n	8005fe4 <prvInsertBlockIntoFreeList+0x14>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	60fb      	str	r3, [r7, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	687a      	ldr	r2, [r7, #4]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d8f7      	bhi.n	8005fde <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	4413      	add	r3, r2
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d108      	bne.n	8006012 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	441a      	add	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	68ba      	ldr	r2, [r7, #8]
 800601c:	441a      	add	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d118      	bne.n	8006058 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	4b15      	ldr	r3, [pc, #84]	@ (8006080 <prvInsertBlockIntoFreeList+0xb0>)
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d00d      	beq.n	800604e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	441a      	add	r2, r3
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	e008      	b.n	8006060 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800604e:	4b0c      	ldr	r3, [pc, #48]	@ (8006080 <prvInsertBlockIntoFreeList+0xb0>)
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	601a      	str	r2, [r3, #0]
 8006056:	e003      	b.n	8006060 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	429a      	cmp	r2, r3
 8006066:	d002      	beq.n	800606e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	687a      	ldr	r2, [r7, #4]
 800606c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800606e:	bf00      	nop
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	20019264 	.word	0x20019264
 8006080:	2001926c 	.word	0x2001926c

08006084 <memset>:
 8006084:	4402      	add	r2, r0
 8006086:	4603      	mov	r3, r0
 8006088:	4293      	cmp	r3, r2
 800608a:	d100      	bne.n	800608e <memset+0xa>
 800608c:	4770      	bx	lr
 800608e:	f803 1b01 	strb.w	r1, [r3], #1
 8006092:	e7f9      	b.n	8006088 <memset+0x4>

08006094 <__libc_init_array>:
 8006094:	b570      	push	{r4, r5, r6, lr}
 8006096:	4d0d      	ldr	r5, [pc, #52]	@ (80060cc <__libc_init_array+0x38>)
 8006098:	4c0d      	ldr	r4, [pc, #52]	@ (80060d0 <__libc_init_array+0x3c>)
 800609a:	1b64      	subs	r4, r4, r5
 800609c:	10a4      	asrs	r4, r4, #2
 800609e:	2600      	movs	r6, #0
 80060a0:	42a6      	cmp	r6, r4
 80060a2:	d109      	bne.n	80060b8 <__libc_init_array+0x24>
 80060a4:	4d0b      	ldr	r5, [pc, #44]	@ (80060d4 <__libc_init_array+0x40>)
 80060a6:	4c0c      	ldr	r4, [pc, #48]	@ (80060d8 <__libc_init_array+0x44>)
 80060a8:	f000 f826 	bl	80060f8 <_init>
 80060ac:	1b64      	subs	r4, r4, r5
 80060ae:	10a4      	asrs	r4, r4, #2
 80060b0:	2600      	movs	r6, #0
 80060b2:	42a6      	cmp	r6, r4
 80060b4:	d105      	bne.n	80060c2 <__libc_init_array+0x2e>
 80060b6:	bd70      	pop	{r4, r5, r6, pc}
 80060b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060bc:	4798      	blx	r3
 80060be:	3601      	adds	r6, #1
 80060c0:	e7ee      	b.n	80060a0 <__libc_init_array+0xc>
 80060c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060c6:	4798      	blx	r3
 80060c8:	3601      	adds	r6, #1
 80060ca:	e7f2      	b.n	80060b2 <__libc_init_array+0x1e>
 80060cc:	08006198 	.word	0x08006198
 80060d0:	08006198 	.word	0x08006198
 80060d4:	08006198 	.word	0x08006198
 80060d8:	0800619c 	.word	0x0800619c

080060dc <memcpy>:
 80060dc:	440a      	add	r2, r1
 80060de:	4291      	cmp	r1, r2
 80060e0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80060e4:	d100      	bne.n	80060e8 <memcpy+0xc>
 80060e6:	4770      	bx	lr
 80060e8:	b510      	push	{r4, lr}
 80060ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060f2:	4291      	cmp	r1, r2
 80060f4:	d1f9      	bne.n	80060ea <memcpy+0xe>
 80060f6:	bd10      	pop	{r4, pc}

080060f8 <_init>:
 80060f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060fa:	bf00      	nop
 80060fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fe:	bc08      	pop	{r3}
 8006100:	469e      	mov	lr, r3
 8006102:	4770      	bx	lr

08006104 <_fini>:
 8006104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006106:	bf00      	nop
 8006108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800610a:	bc08      	pop	{r3}
 800610c:	469e      	mov	lr, r3
 800610e:	4770      	bx	lr
