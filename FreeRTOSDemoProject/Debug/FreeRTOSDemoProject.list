
FreeRTOSDemoProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e798  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f7c  0800e928  0800e928  0000f928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f8a4  0800f8a4  00011100  2**0
                  CONTENTS
  4 .ARM          00000008  0800f8a4  0800f8a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f8ac  0800f8ac  00011100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f8ac  0800f8ac  000108ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f8b0  0800f8b0  000108b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000100  20000000  0800f8b4  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011100  2**0
                  CONTENTS
 10 .bss          0001bd60  20000100  20000100  00011100  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2001be60  2001be60  00011100  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011100  2**0
                  CONTENTS, READONLY
 13 .debug_info   000209a8  00000000  00000000  00011130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004c31  00000000  00000000  00031ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bc0  00000000  00000000  00036710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001577  00000000  00000000  000382d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273a9  00000000  00000000  00039847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022d06  00000000  00000000  00060bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4c53  00000000  00000000  000838f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00168549  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007bb0  00000000  00000000  0016858c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000ae  00000000  00000000  0017013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e910 	.word	0x0800e910

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	0800e910 	.word	0x0800e910

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	2001a744 	.word	0x2001a744

08000264 <strcmp>:
 8000264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800026c:	2a01      	cmp	r2, #1
 800026e:	bf28      	it	cs
 8000270:	429a      	cmpcs	r2, r3
 8000272:	d0f7      	beq.n	8000264 <strcmp>
 8000274:	1ad0      	subs	r0, r2, r3
 8000276:	4770      	bx	lr

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
	...

08000290 <memchr>:
 8000290:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000294:	2a10      	cmp	r2, #16
 8000296:	db2b      	blt.n	80002f0 <memchr+0x60>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	d008      	beq.n	80002b0 <memchr+0x20>
 800029e:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a2:	3a01      	subs	r2, #1
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d02d      	beq.n	8000304 <memchr+0x74>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	b342      	cbz	r2, 8000300 <memchr+0x70>
 80002ae:	d1f6      	bne.n	800029e <memchr+0xe>
 80002b0:	b4f0      	push	{r4, r5, r6, r7}
 80002b2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002b6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ba:	f022 0407 	bic.w	r4, r2, #7
 80002be:	f07f 0700 	mvns.w	r7, #0
 80002c2:	2300      	movs	r3, #0
 80002c4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002c8:	3c08      	subs	r4, #8
 80002ca:	ea85 0501 	eor.w	r5, r5, r1
 80002ce:	ea86 0601 	eor.w	r6, r6, r1
 80002d2:	fa85 f547 	uadd8	r5, r5, r7
 80002d6:	faa3 f587 	sel	r5, r3, r7
 80002da:	fa86 f647 	uadd8	r6, r6, r7
 80002de:	faa5 f687 	sel	r6, r5, r7
 80002e2:	b98e      	cbnz	r6, 8000308 <memchr+0x78>
 80002e4:	d1ee      	bne.n	80002c4 <memchr+0x34>
 80002e6:	bcf0      	pop	{r4, r5, r6, r7}
 80002e8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ec:	f002 0207 	and.w	r2, r2, #7
 80002f0:	b132      	cbz	r2, 8000300 <memchr+0x70>
 80002f2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f6:	3a01      	subs	r2, #1
 80002f8:	ea83 0301 	eor.w	r3, r3, r1
 80002fc:	b113      	cbz	r3, 8000304 <memchr+0x74>
 80002fe:	d1f8      	bne.n	80002f2 <memchr+0x62>
 8000300:	2000      	movs	r0, #0
 8000302:	4770      	bx	lr
 8000304:	3801      	subs	r0, #1
 8000306:	4770      	bx	lr
 8000308:	2d00      	cmp	r5, #0
 800030a:	bf06      	itte	eq
 800030c:	4635      	moveq	r5, r6
 800030e:	3803      	subeq	r0, #3
 8000310:	3807      	subne	r0, #7
 8000312:	f015 0f01 	tst.w	r5, #1
 8000316:	d107      	bne.n	8000328 <memchr+0x98>
 8000318:	3001      	adds	r0, #1
 800031a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800031e:	bf02      	ittt	eq
 8000320:	3001      	addeq	r0, #1
 8000322:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000326:	3001      	addeq	r0, #1
 8000328:	bcf0      	pop	{r4, r5, r6, r7}
 800032a:	3801      	subs	r0, #1
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	@ 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d0c:	f000 b96a 	b.w	8000fe4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	460c      	mov	r4, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14e      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d34:	4694      	mov	ip, r2
 8000d36:	458c      	cmp	ip, r1
 8000d38:	4686      	mov	lr, r0
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	d962      	bls.n	8000e06 <__udivmoddi4+0xde>
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	4091      	lsls	r1, r2
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	4319      	orrs	r1, r3
 8000d52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f f68c 	uxth.w	r6, ip
 8000d5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb07 1114 	mls	r1, r7, r4, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb04 f106 	mul.w	r1, r4, r6
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d7e:	f080 8112 	bcs.w	8000fa6 <__udivmoddi4+0x27e>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 810f 	bls.w	8000fa6 <__udivmoddi4+0x27e>
 8000d88:	3c02      	subs	r4, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	fa1f f38e 	uxth.w	r3, lr
 8000d92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d96:	fb07 1110 	mls	r1, r7, r0, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f606 	mul.w	r6, r0, r6
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x94>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dae:	f080 80fc 	bcs.w	8000faa <__udivmoddi4+0x282>
 8000db2:	429e      	cmp	r6, r3
 8000db4:	f240 80f9 	bls.w	8000faa <__udivmoddi4+0x282>
 8000db8:	4463      	add	r3, ip
 8000dba:	3802      	subs	r0, #2
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa6>
 8000dc6:	40d3      	lsrs	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e9c5 3200 	strd	r3, r2, [r5]
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xba>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb4>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa6>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d146      	bne.n	8000e78 <__udivmoddi4+0x150>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xcc>
 8000dee:	4290      	cmp	r0, r2
 8000df0:	f0c0 80f0 	bcc.w	8000fd4 <__udivmoddi4+0x2ac>
 8000df4:	1a86      	subs	r6, r0, r2
 8000df6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0e6      	beq.n	8000dce <__udivmoddi4+0xa6>
 8000e00:	e9c5 6300 	strd	r6, r3, [r5]
 8000e04:	e7e3      	b.n	8000dce <__udivmoddi4+0xa6>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x204>
 8000e0c:	eba1 040c 	sub.w	r4, r1, ip
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb08 4416 	mls	r4, r8, r6, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb07 f006 	mul.w	r0, r7, r6
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x11c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x11a>
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	f200 80cd 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e42:	4626      	mov	r6, r4
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb00 f707 	mul.w	r7, r0, r7
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x148>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x146>
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	f200 80b0 	bhi.w	8000fce <__udivmoddi4+0x2a6>
 8000e6e:	4620      	mov	r0, r4
 8000e70:	1bdb      	subs	r3, r3, r7
 8000e72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0x9c>
 8000e78:	f1c1 0620 	rsb	r6, r1, #32
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e82:	431f      	orrs	r7, r3
 8000e84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e88:	fa04 f301 	lsl.w	r3, r4, r1
 8000e8c:	ea43 030c 	orr.w	r3, r3, ip
 8000e90:	40f4      	lsrs	r4, r6
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	0c38      	lsrs	r0, r7, #16
 8000e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eac:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb0:	45a1      	cmp	r9, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	d90a      	bls.n	8000ece <__udivmoddi4+0x1a6>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000ebe:	f080 8084 	bcs.w	8000fca <__udivmoddi4+0x2a2>
 8000ec2:	45a1      	cmp	r9, r4
 8000ec4:	f240 8081 	bls.w	8000fca <__udivmoddi4+0x2a2>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	eba4 0409 	sub.w	r4, r4, r9
 8000ed2:	fa1f f983 	uxth.w	r9, r3
 8000ed6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eda:	fb00 4413 	mls	r4, r0, r3, r4
 8000ede:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee6:	45a4      	cmp	ip, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1d2>
 8000eea:	193c      	adds	r4, r7, r4
 8000eec:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ef0:	d267      	bcs.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efe:	fba0 9302 	umull	r9, r3, r0, r2
 8000f02:	eba4 040c 	sub.w	r4, r4, ip
 8000f06:	429c      	cmp	r4, r3
 8000f08:	46ce      	mov	lr, r9
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	d351      	bcc.n	8000fb2 <__udivmoddi4+0x28a>
 8000f0e:	d04e      	beq.n	8000fae <__udivmoddi4+0x286>
 8000f10:	b155      	cbz	r5, 8000f28 <__udivmoddi4+0x200>
 8000f12:	ebb8 030e 	subs.w	r3, r8, lr
 8000f16:	eb64 040c 	sbc.w	r4, r4, ip
 8000f1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431e      	orrs	r6, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	e9c5 6400 	strd	r6, r4, [r5]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e750      	b.n	8000dce <__udivmoddi4+0xa6>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f103 	lsr.w	r1, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa24 f303 	lsr.w	r3, r4, r3
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f50:	fb08 3110 	mls	r1, r8, r0, r3
 8000f54:	0c23      	lsrs	r3, r4, #16
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f107 	mul.w	r1, r0, r7
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x24c>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f6a:	d22c      	bcs.n	8000fc6 <__udivmoddi4+0x29e>
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d92a      	bls.n	8000fc6 <__udivmoddi4+0x29e>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f84:	fb01 f307 	mul.w	r3, r1, r7
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x276>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f94:	d213      	bcs.n	8000fbe <__udivmoddi4+0x296>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d911      	bls.n	8000fbe <__udivmoddi4+0x296>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa4:	e739      	b.n	8000e1a <__udivmoddi4+0xf2>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	e6f0      	b.n	8000d8c <__udivmoddi4+0x64>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e706      	b.n	8000dbc <__udivmoddi4+0x94>
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d2ae      	bcs.n	8000f10 <__udivmoddi4+0x1e8>
 8000fb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7a8      	b.n	8000f10 <__udivmoddi4+0x1e8>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	e7ed      	b.n	8000f9e <__udivmoddi4+0x276>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e799      	b.n	8000efa <__udivmoddi4+0x1d2>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e7d4      	b.n	8000f74 <__udivmoddi4+0x24c>
 8000fca:	46d6      	mov	lr, sl
 8000fcc:	e77f      	b.n	8000ece <__udivmoddi4+0x1a6>
 8000fce:	4463      	add	r3, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e74d      	b.n	8000e70 <__udivmoddi4+0x148>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e70f      	b.n	8000dfc <__udivmoddi4+0xd4>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	e730      	b.n	8000e44 <__udivmoddi4+0x11c>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <acc_task>:
 * - xQueueSend(): Sends messages to a queue for printing messages to the user.						   *
 * - xEventGroupSetBits(): Sets event group bits for synchronizing with the LED task.				   *
 ******************************************************************************************************/

void acc_task(void* param)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08c      	sub	sp, #48	@ 0x30
 8000fec:	af02      	add	r7, sp, #8
 8000fee:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;
	int16_t acc_data[3];		// Array to hold accelerometer values
	char acc_flag[3] = {0};		// Array to hold new data flags
 8000ff0:	4b80      	ldr	r3, [pc, #512]	@ (80011f4 <acc_task+0x20c>)
 8000ff2:	881b      	ldrh	r3, [r3, #0]
 8000ff4:	81bb      	strh	r3, [r7, #12]
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	73bb      	strb	r3, [r7, #14]

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2300      	movs	r3, #0
 8001002:	2200      	movs	r2, #0
 8001004:	2100      	movs	r1, #0
 8001006:	2000      	movs	r0, #0
 8001008:	f009 fd2a 	bl	800aa60 <xTaskGenericNotifyWait>

		// Display Accelerometer menu for the user
		xQueueSend(q_print, &msg_acc_menu, portMAX_DELAY);
 800100c:	4b7a      	ldr	r3, [pc, #488]	@ (80011f8 <acc_task+0x210>)
 800100e:	6818      	ldr	r0, [r3, #0]
 8001010:	2300      	movs	r3, #0
 8001012:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001016:	4979      	ldr	r1, [pc, #484]	@ (80011fc <acc_task+0x214>)
 8001018:	f007 fe1e 	bl	8008c58 <xQueueGenericSend>

		// Wait for the user to make a selection
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001024:	9200      	str	r2, [sp, #0]
 8001026:	2200      	movs	r2, #0
 8001028:	2100      	movs	r1, #0
 800102a:	2000      	movs	r0, #0
 800102c:	f009 fd18 	bl	800aa60 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	61fb      	str	r3, [r7, #28]

		// Set all new data flags to 0
		for(int i=0; i<3; i++) {
 8001034:	2300      	movs	r3, #0
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24
 8001038:	e008      	b.n	800104c <acc_task+0x64>
			acc_flag[i] = 0;
 800103a:	f107 020c 	add.w	r2, r7, #12
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	4413      	add	r3, r2
 8001042:	2200      	movs	r2, #0
 8001044:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<3; i++) {
 8001046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001048:	3301      	adds	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	@ 0x24
 800104c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800104e:	2b02      	cmp	r3, #2
 8001050:	ddf3      	ble.n	800103a <acc_task+0x52>
		}

		// Process command
		if(msg->len <= 4) {
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	2b04      	cmp	r3, #4
 8001058:	f200 80b5 	bhi.w	80011c6 <acc_task+0x1de>
			if(!strcmp((char*)msg->payload, "X")) {
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	4968      	ldr	r1, [pc, #416]	@ (8001200 <acc_task+0x218>)
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff f8ff 	bl	8000264 <strcmp>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d115      	bne.n	8001098 <acc_task+0xb0>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 800106c:	f107 0310 	add.w	r3, r7, #16
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f901 	bl	8001278 <accelerometer_read>
				acc_flag[0] = 1; 									// Set X-axis new data flag
 8001076:	2301      	movs	r3, #1
 8001078:	733b      	strb	r3, [r7, #12]
				show_acc_data(acc_data, acc_flag);					// Show data
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4611      	mov	r1, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f000 f93d 	bl	8001304 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_X_BIT);	// Set X-axis event group bit for LED task synchronization
 800108a:	4b5e      	ldr	r3, [pc, #376]	@ (8001204 <acc_task+0x21c>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2101      	movs	r1, #1
 8001090:	4618      	mov	r0, r3
 8001092:	f007 fb89 	bl	80087a8 <xEventGroupSetBits>
 8001096:	e09e      	b.n	80011d6 <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "Y")) {
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	495b      	ldr	r1, [pc, #364]	@ (8001208 <acc_task+0x220>)
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff f8e1 	bl	8000264 <strcmp>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d115      	bne.n	80010d4 <acc_task+0xec>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 f8e3 	bl	8001278 <accelerometer_read>
				acc_flag[1] = 1; 									// Set Y-axis new data flag
 80010b2:	2301      	movs	r3, #1
 80010b4:	737b      	strb	r3, [r7, #13]
				show_acc_data(acc_data, acc_flag);					// Show data
 80010b6:	f107 020c 	add.w	r2, r7, #12
 80010ba:	f107 0310 	add.w	r3, r7, #16
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 f91f 	bl	8001304 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Y_BIT); 	// Set Y-axis event group bit for LED task synchronization
 80010c6:	4b4f      	ldr	r3, [pc, #316]	@ (8001204 <acc_task+0x21c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2102      	movs	r1, #2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f007 fb6b 	bl	80087a8 <xEventGroupSetBits>
 80010d2:	e080      	b.n	80011d6 <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "Z")) {
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	494d      	ldr	r1, [pc, #308]	@ (800120c <acc_task+0x224>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f8c3 	bl	8000264 <strcmp>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d115      	bne.n	8001110 <acc_task+0x128>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);						// Read data
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f8c5 	bl	8001278 <accelerometer_read>
				acc_flag[2] = 1; 									// Set Z-axis new data flag
 80010ee:	2301      	movs	r3, #1
 80010f0:	73bb      	strb	r3, [r7, #14]
				show_acc_data(acc_data, acc_flag);					// Show data
 80010f2:	f107 020c 	add.w	r2, r7, #12
 80010f6:	f107 0310 	add.w	r3, r7, #16
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f000 f901 	bl	8001304 <show_acc_data>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Z_BIT);	// Set Z-axis event group bit for LED task synchronization
 8001102:	4b40      	ldr	r3, [pc, #256]	@ (8001204 <acc_task+0x21c>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2104      	movs	r1, #4
 8001108:	4618      	mov	r0, r3
 800110a:	f007 fb4d 	bl	80087a8 <xEventGroupSetBits>
 800110e:	e062      	b.n	80011d6 <acc_task+0x1ee>
			}
			else if(!strcmp((char*)msg->payload, "All")) {
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	493f      	ldr	r1, [pc, #252]	@ (8001210 <acc_task+0x228>)
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f8a5 	bl	8000264 <strcmp>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d12e      	bne.n	800117e <acc_task+0x196>
				accelerometer_read(acc_data);						// Read data
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4618      	mov	r0, r3
 8001126:	f000 f8a7 	bl	8001278 <accelerometer_read>
				for(int i=0; i<3; i++) acc_flag[i] = 1; 			// Set new data flags for all axes
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
 800112e:	e008      	b.n	8001142 <acc_task+0x15a>
 8001130:	f107 020c 	add.w	r2, r7, #12
 8001134:	6a3b      	ldr	r3, [r7, #32]
 8001136:	4413      	add	r3, r2
 8001138:	2201      	movs	r2, #1
 800113a:	701a      	strb	r2, [r3, #0]
 800113c:	6a3b      	ldr	r3, [r7, #32]
 800113e:	3301      	adds	r3, #1
 8001140:	623b      	str	r3, [r7, #32]
 8001142:	6a3b      	ldr	r3, [r7, #32]
 8001144:	2b02      	cmp	r3, #2
 8001146:	ddf3      	ble.n	8001130 <acc_task+0x148>
				show_acc_data(acc_data, acc_flag);					// Show data
 8001148:	f107 020c 	add.w	r2, r7, #12
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f000 f8d6 	bl	8001304 <show_acc_data>
				// Set all event group bits for LED task synchronization
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_X_BIT);
 8001158:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <acc_task+0x21c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2101      	movs	r1, #1
 800115e:	4618      	mov	r0, r3
 8001160:	f007 fb22 	bl	80087a8 <xEventGroupSetBits>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Y_BIT);
 8001164:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <acc_task+0x21c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2102      	movs	r1, #2
 800116a:	4618      	mov	r0, r3
 800116c:	f007 fb1c 	bl	80087a8 <xEventGroupSetBits>
				xEventGroupSetBits(ledEventGroup, ACCEL_READ_Z_BIT);
 8001170:	4b24      	ldr	r3, [pc, #144]	@ (8001204 <acc_task+0x21c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2104      	movs	r1, #4
 8001176:	4618      	mov	r0, r3
 8001178:	f007 fb16 	bl	80087a8 <xEventGroupSetBits>
 800117c:	e02b      	b.n	80011d6 <acc_task+0x1ee>
			}
			else if (!strcmp((char*)msg->payload, "Main")) {
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	4924      	ldr	r1, [pc, #144]	@ (8001214 <acc_task+0x22c>)
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f86e 	bl	8000264 <strcmp>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d112      	bne.n	80011b4 <acc_task+0x1cc>
				// Update the system state
				curr_sys_state = sMainMenu;
 800118e:	4b22      	ldr	r3, [pc, #136]	@ (8001218 <acc_task+0x230>)
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]

				// Set event group bit to turn off all LEDs upon exiting accelerometer menu
				xEventGroupSetBits(ledEventGroup, TURN_OFF_LEDS_BIT);
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <acc_task+0x21c>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2108      	movs	r1, #8
 800119a:	4618      	mov	r0, r3
 800119c:	f007 fb04 	bl	80087a8 <xEventGroupSetBits>

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 80011a0:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <acc_task+0x234>)
 80011a2:	6818      	ldr	r0, [r3, #0]
 80011a4:	2300      	movs	r3, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2300      	movs	r3, #0
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	f009 fce1 	bl	800ab74 <xTaskGenericNotify>
 80011b2:	e010      	b.n	80011d6 <acc_task+0x1ee>
			}
			else {
				xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 80011b4:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <acc_task+0x210>)
 80011b6:	6818      	ldr	r0, [r3, #0]
 80011b8:	2300      	movs	r3, #0
 80011ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011be:	4918      	ldr	r1, [pc, #96]	@ (8001220 <acc_task+0x238>)
 80011c0:	f007 fd4a 	bl	8008c58 <xQueueGenericSend>
 80011c4:	e007      	b.n	80011d6 <acc_task+0x1ee>
			}
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 80011c6:	4b0c      	ldr	r3, [pc, #48]	@ (80011f8 <acc_task+0x210>)
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	2300      	movs	r3, #0
 80011cc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011d0:	4913      	ldr	r1, [pc, #76]	@ (8001220 <acc_task+0x238>)
 80011d2:	f007 fd41 	bl	8008c58 <xQueueGenericSend>
		}

		// Notify self / accelerometer task if not returning to the main menu
		if (sAccMenu == curr_sys_state)
 80011d6:	4b10      	ldr	r3, [pc, #64]	@ (8001218 <acc_task+0x230>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b02      	cmp	r3, #2
 80011dc:	f47f af0d 	bne.w	8000ffa <acc_task+0x12>
			xTaskNotify(handle_acc_task, 0, eNoAction);
 80011e0:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <acc_task+0x23c>)
 80011e2:	6818      	ldr	r0, [r3, #0]
 80011e4:	2300      	movs	r3, #0
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2300      	movs	r3, #0
 80011ea:	2200      	movs	r2, #0
 80011ec:	2100      	movs	r1, #0
 80011ee:	f009 fcc1 	bl	800ab74 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80011f2:	e702      	b.n	8000ffa <acc_task+0x12>
 80011f4:	0800ea80 	.word	0x0800ea80
 80011f8:	2000147c 	.word	0x2000147c
 80011fc:	20000004 	.word	0x20000004
 8001200:	0800ea68 	.word	0x0800ea68
 8001204:	20001498 	.word	0x20001498
 8001208:	0800ea6c 	.word	0x0800ea6c
 800120c:	0800ea70 	.word	0x0800ea70
 8001210:	0800ea74 	.word	0x0800ea74
 8001214:	0800ea78 	.word	0x0800ea78
 8001218:	200014a5 	.word	0x200014a5
 800121c:	20001460 	.word	0x20001460
 8001220:	20000000 	.word	0x20000000
 8001224:	20001474 	.word	0x20001474

08001228 <accelerometer_init>:
 * - Sends the configuration data over SPI to set the desired settings.								   *
 * - Pulls the chip select (CS) pin high to de-select the device.									   *
 ******************************************************************************************************/

void accelerometer_init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	// Configure CTRL_REG1_A: 100Hz, normal power mode, all axes enabled
	uint8_t configData = 0x57; // 0b01010111: 100Hz, normal power mode, all axes enabled
 800122e:	2357      	movs	r3, #87	@ 0x57
 8001230:	71fb      	strb	r3, [r7, #7]

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001232:	2200      	movs	r2, #0
 8001234:	2108      	movs	r1, #8
 8001236:	480e      	ldr	r0, [pc, #56]	@ (8001270 <accelerometer_init+0x48>)
 8001238:	f003 fa24 	bl	8004684 <HAL_GPIO_WritePin>

	// Send the register address
	uint8_t reg = LSM303DLHC_CTRL_REG1_A;
 800123c:	2320      	movs	r3, #32
 800123e:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8001240:	1db9      	adds	r1, r7, #6
 8001242:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001246:	2201      	movs	r2, #1
 8001248:	480a      	ldr	r0, [pc, #40]	@ (8001274 <accelerometer_init+0x4c>)
 800124a:	f004 fba8 	bl	800599e <HAL_SPI_Transmit>

	// Send the configuration data
	HAL_SPI_Transmit(&hspi1, &configData, 1, HAL_MAX_DELAY);
 800124e:	1df9      	adds	r1, r7, #7
 8001250:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001254:	2201      	movs	r2, #1
 8001256:	4807      	ldr	r0, [pc, #28]	@ (8001274 <accelerometer_init+0x4c>)
 8001258:	f004 fba1 	bl	800599e <HAL_SPI_Transmit>

	// Pull CS high to deselect the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 800125c:	2201      	movs	r2, #1
 800125e:	2108      	movs	r1, #8
 8001260:	4803      	ldr	r0, [pc, #12]	@ (8001270 <accelerometer_init+0x48>)
 8001262:	f003 fa0f 	bl	8004684 <HAL_GPIO_WritePin>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	200012e8 	.word	0x200012e8

08001278 <accelerometer_read>:
 * - Converts the received byte data to 16-bit integer values for each axis and stores them in the 	   *
 *   provided array.																				   *
 ******************************************************************************************************/

void accelerometer_read(int16_t *acc_data)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
	uint8_t sensor_reading[6];
	uint8_t reg = ACC_X_ADDR;
 8001280:	23a8      	movs	r3, #168	@ 0xa8
 8001282:	73fb      	strb	r3, [r7, #15]

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001284:	2200      	movs	r2, #0
 8001286:	2108      	movs	r1, #8
 8001288:	481c      	ldr	r0, [pc, #112]	@ (80012fc <accelerometer_read+0x84>)
 800128a:	f003 f9fb 	bl	8004684 <HAL_GPIO_WritePin>

	// Send the register address
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 800128e:	f107 010f 	add.w	r1, r7, #15
 8001292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001296:	2201      	movs	r2, #1
 8001298:	4819      	ldr	r0, [pc, #100]	@ (8001300 <accelerometer_read+0x88>)
 800129a:	f004 fb80 	bl	800599e <HAL_SPI_Transmit>

	// Receive the data
	HAL_SPI_Receive(&hspi1, sensor_reading, 6, HAL_MAX_DELAY);
 800129e:	f107 0110 	add.w	r1, r7, #16
 80012a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012a6:	2206      	movs	r2, #6
 80012a8:	4815      	ldr	r0, [pc, #84]	@ (8001300 <accelerometer_read+0x88>)
 80012aa:	f004 fcbb 	bl	8005c24 <HAL_SPI_Receive>

	// Pull CS high to de-select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 80012ae:	2201      	movs	r2, #1
 80012b0:	2108      	movs	r1, #8
 80012b2:	4812      	ldr	r0, [pc, #72]	@ (80012fc <accelerometer_read+0x84>)
 80012b4:	f003 f9e6 	bl	8004684 <HAL_GPIO_WritePin>

	// Convert the sensor reading
	acc_data[0] = (int16_t)(sensor_reading[1] << 8 | sensor_reading[0]); // x
 80012b8:	7c7b      	ldrb	r3, [r7, #17]
 80012ba:	021b      	lsls	r3, r3, #8
 80012bc:	b21a      	sxth	r2, r3
 80012be:	7c3b      	ldrb	r3, [r7, #16]
 80012c0:	b21b      	sxth	r3, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	b21a      	sxth	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	801a      	strh	r2, [r3, #0]
	acc_data[1] = (int16_t)(sensor_reading[3] << 8 | sensor_reading[2]); // y
 80012ca:	7cfb      	ldrb	r3, [r7, #19]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b219      	sxth	r1, r3
 80012d0:	7cbb      	ldrb	r3, [r7, #18]
 80012d2:	b21a      	sxth	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3302      	adds	r3, #2
 80012d8:	430a      	orrs	r2, r1
 80012da:	b212      	sxth	r2, r2
 80012dc:	801a      	strh	r2, [r3, #0]
	acc_data[2] = (int16_t)(sensor_reading[5] << 8 | sensor_reading[4]); // z
 80012de:	7d7b      	ldrb	r3, [r7, #21]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b219      	sxth	r1, r3
 80012e4:	7d3b      	ldrb	r3, [r7, #20]
 80012e6:	b21a      	sxth	r2, r3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3304      	adds	r3, #4
 80012ec:	430a      	orrs	r2, r1
 80012ee:	b212      	sxth	r2, r2
 80012f0:	801a      	strh	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	3718      	adds	r7, #24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000
 8001300:	200012e8 	.word	0x200012e8

08001304 <show_acc_data>:
 * - Formats and displays data in g values for the available axes based on flags.					   *
 * - Sends the formatted data to the print queue for display.										   *
 ******************************************************************************************************/

void show_acc_data(int16_t *acc_data, char *acc_flag)
{
 8001304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001306:	b097      	sub	sp, #92	@ 0x5c
 8001308:	af08      	add	r7, sp, #32
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
	// Set up buffer
	static char showacc[80];
	static char* acc = showacc;

	// Convert from raw sensor value to milli-g's [mg], using +/- 2g sensitivity
	int16_t x_mg = acc_data[0] * 2000 / 32768;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001314:	461a      	mov	r2, r3
 8001316:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	da02      	bge.n	8001328 <show_acc_data+0x24>
 8001322:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001326:	337f      	adds	r3, #127	@ 0x7f
 8001328:	13db      	asrs	r3, r3, #15
 800132a:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t y_mg = acc_data[1] * 2000 / 32768;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3302      	adds	r3, #2
 8001330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001334:	461a      	mov	r2, r3
 8001336:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800133a:	fb02 f303 	mul.w	r3, r2, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	da02      	bge.n	8001348 <show_acc_data+0x44>
 8001342:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001346:	337f      	adds	r3, #127	@ 0x7f
 8001348:	13db      	asrs	r3, r3, #15
 800134a:	86bb      	strh	r3, [r7, #52]	@ 0x34
	int16_t z_mg = acc_data[2] * 2000 / 32768;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3304      	adds	r3, #4
 8001350:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001354:	461a      	mov	r2, r3
 8001356:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	2b00      	cmp	r3, #0
 8001360:	da02      	bge.n	8001368 <show_acc_data+0x64>
 8001362:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001366:	337f      	adds	r3, #127	@ 0x7f
 8001368:	13db      	asrs	r3, r3, #15
 800136a:	867b      	strh	r3, [r7, #50]	@ 0x32

	// Variables to simulate floating point numbers
	int x_i, x_d, y_i, y_d, z_i, z_d;
	char x_s[2] = {"+"};
 800136c:	232b      	movs	r3, #43	@ 0x2b
 800136e:	82bb      	strh	r3, [r7, #20]
	char y_s[2] = {"+"};
 8001370:	232b      	movs	r3, #43	@ 0x2b
 8001372:	823b      	strh	r3, [r7, #16]
	char z_s[2] = {"+"};
 8001374:	232b      	movs	r3, #43	@ 0x2b
 8001376:	81bb      	strh	r3, [r7, #12]

	// Display the data that's available
	// All axes
	if((acc_flag[0] == 1) && (acc_flag[1] == 1) && (acc_flag[2] == 1)) {
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d141      	bne.n	8001404 <show_acc_data+0x100>
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	3301      	adds	r3, #1
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b01      	cmp	r3, #1
 8001388:	d13c      	bne.n	8001404 <show_acc_data+0x100>
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	3302      	adds	r3, #2
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d137      	bne.n	8001404 <show_acc_data+0x100>
		split_integer(x_mg, x_s, &x_i, &x_d);
 8001394:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001398:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800139c:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80013a0:	f107 0114 	add.w	r1, r7, #20
 80013a4:	f000 f894 	bl	80014d0 <split_integer>
		split_integer(y_mg, y_s, &y_i, &y_d);
 80013a8:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	@ 0x34
 80013ac:	f107 0320 	add.w	r3, r7, #32
 80013b0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80013b4:	f107 0110 	add.w	r1, r7, #16
 80013b8:	f000 f88a 	bl	80014d0 <split_integer>
		split_integer(z_mg, z_s, &z_i, &z_d);
 80013bc:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	@ 0x32
 80013c0:	f107 0318 	add.w	r3, r7, #24
 80013c4:	f107 021c 	add.w	r2, r7, #28
 80013c8:	f107 010c 	add.w	r1, r7, #12
 80013cc:	f000 f880 	bl	80014d0 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: X = %s%d.%d g, Y = %s%d.%d g, Z = %s%d.%d g\r\n", x_s, x_i, x_d, y_s, y_i, y_d, z_s, z_i, z_d);
 80013d0:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 80013d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80013d6:	6a39      	ldr	r1, [r7, #32]
 80013d8:	69f8      	ldr	r0, [r7, #28]
 80013da:	69bc      	ldr	r4, [r7, #24]
 80013dc:	f107 0514 	add.w	r5, r7, #20
 80013e0:	9406      	str	r4, [sp, #24]
 80013e2:	9005      	str	r0, [sp, #20]
 80013e4:	f107 000c 	add.w	r0, r7, #12
 80013e8:	9004      	str	r0, [sp, #16]
 80013ea:	9103      	str	r1, [sp, #12]
 80013ec:	9202      	str	r2, [sp, #8]
 80013ee:	f107 0210 	add.w	r2, r7, #16
 80013f2:	9201      	str	r2, [sp, #4]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4633      	mov	r3, r6
 80013f8:	462a      	mov	r2, r5
 80013fa:	492e      	ldr	r1, [pc, #184]	@ (80014b4 <show_acc_data+0x1b0>)
 80013fc:	482e      	ldr	r0, [pc, #184]	@ (80014b8 <show_acc_data+0x1b4>)
 80013fe:	f00c fcd1 	bl	800dda4 <siprintf>
 8001402:	e04b      	b.n	800149c <show_acc_data+0x198>
	}
	// X-axis only
	else if (acc_flag[0] == 1) {
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d114      	bne.n	8001436 <show_acc_data+0x132>
		split_integer(x_mg, x_s, &x_i, &x_d);
 800140c:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 8001410:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001414:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001418:	f107 0114 	add.w	r1, r7, #20
 800141c:	f000 f858 	bl	80014d0 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: X = %s%d.%d g\r\n", x_s, x_i, x_d);
 8001420:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001424:	f107 0214 	add.w	r2, r7, #20
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	460b      	mov	r3, r1
 800142c:	4923      	ldr	r1, [pc, #140]	@ (80014bc <show_acc_data+0x1b8>)
 800142e:	4822      	ldr	r0, [pc, #136]	@ (80014b8 <show_acc_data+0x1b4>)
 8001430:	f00c fcb8 	bl	800dda4 <siprintf>
 8001434:	e032      	b.n	800149c <show_acc_data+0x198>
	}
	// Y-axis only
	else if (acc_flag[1] == 1) {
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	3301      	adds	r3, #1
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d114      	bne.n	800146a <show_acc_data+0x166>
		split_integer(y_mg, y_s, &y_i, &y_d);
 8001440:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	@ 0x34
 8001444:	f107 0320 	add.w	r3, r7, #32
 8001448:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800144c:	f107 0110 	add.w	r1, r7, #16
 8001450:	f000 f83e 	bl	80014d0 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: Y = %s%d.%d g\r\n", y_s, y_i, y_d);
 8001454:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001456:	6a3b      	ldr	r3, [r7, #32]
 8001458:	f107 0210 	add.w	r2, r7, #16
 800145c:	9300      	str	r3, [sp, #0]
 800145e:	460b      	mov	r3, r1
 8001460:	4917      	ldr	r1, [pc, #92]	@ (80014c0 <show_acc_data+0x1bc>)
 8001462:	4815      	ldr	r0, [pc, #84]	@ (80014b8 <show_acc_data+0x1b4>)
 8001464:	f00c fc9e 	bl	800dda4 <siprintf>
 8001468:	e018      	b.n	800149c <show_acc_data+0x198>
	}
	// Z-axis only
	else if (acc_flag[2] == 1) {
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	3302      	adds	r3, #2
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d113      	bne.n	800149c <show_acc_data+0x198>
		split_integer(z_mg, z_s, &z_i, &z_d);
 8001474:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	@ 0x32
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	f107 021c 	add.w	r2, r7, #28
 8001480:	f107 010c 	add.w	r1, r7, #12
 8001484:	f000 f824 	bl	80014d0 <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: Z = %s%d.%d g\r\n", z_s, z_i, z_d);
 8001488:	69f9      	ldr	r1, [r7, #28]
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	f107 020c 	add.w	r2, r7, #12
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	460b      	mov	r3, r1
 8001494:	490b      	ldr	r1, [pc, #44]	@ (80014c4 <show_acc_data+0x1c0>)
 8001496:	4808      	ldr	r0, [pc, #32]	@ (80014b8 <show_acc_data+0x1b4>)
 8001498:	f00c fc84 	bl	800dda4 <siprintf>
	}

	// Populate the print queue
	xQueueSend(q_print, &acc, portMAX_DELAY);
 800149c:	4b0a      	ldr	r3, [pc, #40]	@ (80014c8 <show_acc_data+0x1c4>)
 800149e:	6818      	ldr	r0, [r3, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80014a6:	4909      	ldr	r1, [pc, #36]	@ (80014cc <show_acc_data+0x1c8>)
 80014a8:	f007 fbd6 	bl	8008c58 <xQueueGenericSend>
}
 80014ac:	bf00      	nop
 80014ae:	373c      	adds	r7, #60	@ 0x3c
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014b4:	0800ea84 	.word	0x0800ea84
 80014b8:	2000011c 	.word	0x2000011c
 80014bc:	0800eacc 	.word	0x0800eacc
 80014c0:	0800eaf4 	.word	0x0800eaf4
 80014c4:	0800eb1c 	.word	0x0800eb1c
 80014c8:	2000147c 	.word	0x2000147c
 80014cc:	20000008 	.word	0x20000008

080014d0 <split_integer>:
 * the hundreds part is always positive. If the hundreds part rounds up to exactly 1000, the 		   *
 * thousands part is incremented and the hundreds part is reset to 0.								   *
 ******************************************************************************************************/

void split_integer(int value, char* sign, int *thousands_part, int *hundreds_part)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
	// Evaluate the sign
	if(value < 0) {
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	da06      	bge.n	80014f2 <split_integer+0x22>
		strcpy(sign, "-");
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	4925      	ldr	r1, [pc, #148]	@ (800157c <split_integer+0xac>)
 80014e8:	461a      	mov	r2, r3
 80014ea:	460b      	mov	r3, r1
 80014ec:	881b      	ldrh	r3, [r3, #0]
 80014ee:	8013      	strh	r3, [r2, #0]
 80014f0:	e005      	b.n	80014fe <split_integer+0x2e>
	}
	else {
		strcpy(sign, "+");
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4922      	ldr	r1, [pc, #136]	@ (8001580 <split_integer+0xb0>)
 80014f6:	461a      	mov	r2, r3
 80014f8:	460b      	mov	r3, r1
 80014fa:	881b      	ldrh	r3, [r3, #0]
 80014fc:	8013      	strh	r3, [r2, #0]
	}

	// Calculate how many thousands
    *thousands_part = abs(value / 1000);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4a20      	ldr	r2, [pc, #128]	@ (8001584 <split_integer+0xb4>)
 8001502:	fb82 1203 	smull	r1, r2, r2, r3
 8001506:	1192      	asrs	r2, r2, #6
 8001508:	17db      	asrs	r3, r3, #31
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001510:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	601a      	str	r2, [r3, #0]

    // Calculate the remaining hundreds
    int remainder = value % 1000;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4a1a      	ldr	r2, [pc, #104]	@ (8001584 <split_integer+0xb4>)
 800151c:	fb82 1203 	smull	r1, r2, r2, r3
 8001520:	1191      	asrs	r1, r2, #6
 8001522:	17da      	asrs	r2, r3, #31
 8001524:	1a8a      	subs	r2, r1, r2
 8001526:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800152a:	fb01 f202 	mul.w	r2, r1, r2
 800152e:	1a9b      	subs	r3, r3, r2
 8001530:	617b      	str	r3, [r7, #20]

    // Ensure hundreds_part is positive
    *hundreds_part = abs((int)(remainder / 100.0));
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff f84e 	bl	80005d4 <__aeabi_i2d>
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <split_integer+0xb8>)
 800153e:	f7ff f9dd 	bl	80008fc <__aeabi_ddiv>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fb5d 	bl	8000c08 <__aeabi_d2iz>
 800154e:	4603      	mov	r3, r0
 8001550:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001554:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	601a      	str	r2, [r3, #0]

    // Adjust thousands_part if rounding up results in exactly 1000
    if (*hundreds_part == 10) {
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	2b0a      	cmp	r3, #10
 8001562:	d107      	bne.n	8001574 <split_integer+0xa4>
        *thousands_part += 1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	1c5a      	adds	r2, r3, #1
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	601a      	str	r2, [r3, #0]
        *hundreds_part = 0;
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
    }
}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	0800eb44 	.word	0x0800eb44
 8001580:	0800eb48 	.word	0x0800eb48
 8001584:	10624dd3 	.word	0x10624dd3
 8001588:	40590000 	.word	0x40590000

0800158c <led_task>:
 * @note The task must be notified when a new command is available.									   *
 * @note The function utilizes software timers to control LED effects.								   *
 ******************************************************************************************************/

void led_task(void *param)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af02      	add	r7, sp, #8
 8001592:	6078      	str	r0, [r7, #4]
	// Communication variables
	uint32_t msg_addr;
	message_t *msg;

	// LED timer parameters
	int freq = 2; // Frequency in Hz
 8001594:	2302      	movs	r3, #2
 8001596:	613b      	str	r3, [r7, #16]
	int period = 500; // Period in ms
 8001598:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24

	// FreeRTOS variables
	const TickType_t xTicksToWait = pdMS_TO_TICKS(EVENT_GROUP_WAIT_TIME); // Wait period for the event group
 800159e:	2364      	movs	r3, #100	@ 0x64
 80015a0:	623b      	str	r3, [r7, #32]
	uint32_t notificationValue;
	EventBits_t eventBits;

	while(1) {
		// Wait for task notification or timeout =========================================================================
		if (xTaskNotifyWait(0, 0, &notificationValue, xTicksToWait) == pdPASS) {										//
 80015a2:	f107 020c 	add.w	r2, r7, #12
 80015a6:	6a3b      	ldr	r3, [r7, #32]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	4613      	mov	r3, r2
 80015ac:	2200      	movs	r2, #0
 80015ae:	2100      	movs	r1, #0
 80015b0:	2000      	movs	r0, #0
 80015b2:	f009 fa55 	bl	800aa60 <xTaskGenericNotifyWait>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	f040 817a 	bne.w	80018b2 <led_task+0x326>
																														//
			// Display LED menu for the user																			//
			xQueueSend(q_print, &msg_led_menu, portMAX_DELAY);															//
 80015be:	4b9a      	ldr	r3, [pc, #616]	@ (8001828 <led_task+0x29c>)
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	2300      	movs	r3, #0
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015c8:	4998      	ldr	r1, [pc, #608]	@ (800182c <led_task+0x2a0>)
 80015ca:	f007 fb45 	bl	8008c58 <xQueueGenericSend>
																														//
			// Wait for the user to select their desired LED effect														//
			xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);															//
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015d6:	9200      	str	r2, [sp, #0]
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2000      	movs	r0, #0
 80015de:	f009 fa3f 	bl	800aa60 <xTaskGenericNotifyWait>
			msg = (message_t*)msg_addr;																					//
 80015e2:	697b      	ldr	r3, [r7, #20]
 80015e4:	61fb      	str	r3, [r7, #28]
																														//
			// Process command, adjust LED state, and set software timers accordingly									//
			if(msg->len <= 4) {																							//
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	f200 814c 	bhi.w	8001888 <led_task+0x2fc>
				if(!strcmp((char*)msg->payload, "None"))			// No effect										//
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	498f      	ldr	r1, [pc, #572]	@ (8001830 <led_task+0x2a4>)
 80015f4:	4618      	mov	r0, r3
 80015f6:	f7fe fe35 	bl	8000264 <strcmp>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d109      	bne.n	8001614 <led_task+0x88>
				{																										//
					set_led_timer(effectNone);																			//
 8001600:	2004      	movs	r0, #4
 8001602:	f000 fa25 	bl	8001a50 <set_led_timer>
					curr_led_state = sNone;																				//
 8001606:	4b8b      	ldr	r3, [pc, #556]	@ (8001834 <led_task+0x2a8>)
 8001608:	2204      	movs	r2, #4
 800160a:	701a      	strb	r2, [r3, #0]
					control_all_leds(LED_OFF);																			//
 800160c:	2000      	movs	r0, #0
 800160e:	f000 fa51 	bl	8001ab4 <control_all_leds>
 8001612:	e141      	b.n	8001898 <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E1")) {		// E1 effect										//
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	4988      	ldr	r1, [pc, #544]	@ (8001838 <led_task+0x2ac>)
 8001618:	4618      	mov	r0, r3
 800161a:	f7fe fe23 	bl	8000264 <strcmp>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d106      	bne.n	8001632 <led_task+0xa6>
					curr_led_state = sEffectE1;																			//
 8001624:	4b83      	ldr	r3, [pc, #524]	@ (8001834 <led_task+0x2a8>)
 8001626:	2200      	movs	r2, #0
 8001628:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE1);																			//
 800162a:	2000      	movs	r0, #0
 800162c:	f000 fa10 	bl	8001a50 <set_led_timer>
 8001630:	e132      	b.n	8001898 <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E2")) {		// E2 effect										//
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	4981      	ldr	r1, [pc, #516]	@ (800183c <led_task+0x2b0>)
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe fe14 	bl	8000264 <strcmp>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d106      	bne.n	8001650 <led_task+0xc4>
					curr_led_state = sEffectE2;																			//
 8001642:	4b7c      	ldr	r3, [pc, #496]	@ (8001834 <led_task+0x2a8>)
 8001644:	2201      	movs	r2, #1
 8001646:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE2);																			//
 8001648:	2001      	movs	r0, #1
 800164a:	f000 fa01 	bl	8001a50 <set_led_timer>
 800164e:	e123      	b.n	8001898 <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E3")) {		// E3 effect										//
 8001650:	69fb      	ldr	r3, [r7, #28]
 8001652:	497b      	ldr	r1, [pc, #492]	@ (8001840 <led_task+0x2b4>)
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fe05 	bl	8000264 <strcmp>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d106      	bne.n	800166e <led_task+0xe2>
					curr_led_state = sEffectE3;																			//
 8001660:	4b74      	ldr	r3, [pc, #464]	@ (8001834 <led_task+0x2a8>)
 8001662:	2202      	movs	r2, #2
 8001664:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE3);																			//
 8001666:	2002      	movs	r0, #2
 8001668:	f000 f9f2 	bl	8001a50 <set_led_timer>
 800166c:	e114      	b.n	8001898 <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "E4")) {		// E4 effect										//
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	4974      	ldr	r1, [pc, #464]	@ (8001844 <led_task+0x2b8>)
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe fdf6 	bl	8000264 <strcmp>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d106      	bne.n	800168c <led_task+0x100>
					curr_led_state = sEffectE4;																			//
 800167e:	4b6d      	ldr	r3, [pc, #436]	@ (8001834 <led_task+0x2a8>)
 8001680:	2203      	movs	r2, #3
 8001682:	701a      	strb	r2, [r3, #0]
					set_led_timer(effectE4);																			//
 8001684:	2003      	movs	r0, #3
 8001686:	f000 f9e3 	bl	8001a50 <set_led_timer>
 800168a:	e105      	b.n	8001898 <led_task+0x30c>
				}																										//
				else if (!strcmp((char*)msg->payload, "Tor")) {		// Toggle orange LED								//
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	496e      	ldr	r1, [pc, #440]	@ (8001848 <led_task+0x2bc>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe fde7 	bl	8000264 <strcmp>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10b      	bne.n	80016b4 <led_task+0x128>
					set_led_timer(effectNone);																			//
 800169c:	2004      	movs	r0, #4
 800169e:	f000 f9d7 	bl	8001a50 <set_led_timer>
					curr_led_state = sNone;																				//
 80016a2:	4b64      	ldr	r3, [pc, #400]	@ (8001834 <led_task+0x2a8>)
 80016a4:	2204      	movs	r2, #4
 80016a6:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(ORANGE_LED_PORT, ORANGE_LED_PIN);												//
 80016a8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016ac:	4867      	ldr	r0, [pc, #412]	@ (800184c <led_task+0x2c0>)
 80016ae:	f003 f802 	bl	80046b6 <HAL_GPIO_TogglePin>
 80016b2:	e0f1      	b.n	8001898 <led_task+0x30c>
				}																										// N
				else if (!strcmp((char*)msg->payload, "Tgr")) {		// Toggle green LED									// O
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	4966      	ldr	r1, [pc, #408]	@ (8001850 <led_task+0x2c4>)
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe fdd3 	bl	8000264 <strcmp>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d10b      	bne.n	80016dc <led_task+0x150>
					set_led_timer(effectNone);																			// T
 80016c4:	2004      	movs	r0, #4
 80016c6:	f000 f9c3 	bl	8001a50 <set_led_timer>
					curr_led_state = sNone;																				// I
 80016ca:	4b5a      	ldr	r3, [pc, #360]	@ (8001834 <led_task+0x2a8>)
 80016cc:	2204      	movs	r2, #4
 80016ce:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);													// F
 80016d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016d4:	485d      	ldr	r0, [pc, #372]	@ (800184c <led_task+0x2c0>)
 80016d6:	f002 ffee 	bl	80046b6 <HAL_GPIO_TogglePin>
 80016da:	e0dd      	b.n	8001898 <led_task+0x30c>
				}																										// I
				else if (!strcmp((char*)msg->payload, "Tbl")) {		// Toggle blue LED									// C
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	495d      	ldr	r1, [pc, #372]	@ (8001854 <led_task+0x2c8>)
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7fe fdbf 	bl	8000264 <strcmp>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d10b      	bne.n	8001704 <led_task+0x178>
					set_led_timer(effectNone);																			// A
 80016ec:	2004      	movs	r0, #4
 80016ee:	f000 f9af 	bl	8001a50 <set_led_timer>
					curr_led_state = sNone;																				// T
 80016f2:	4b50      	ldr	r3, [pc, #320]	@ (8001834 <led_task+0x2a8>)
 80016f4:	2204      	movs	r2, #4
 80016f6:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);													// I
 80016f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016fc:	4853      	ldr	r0, [pc, #332]	@ (800184c <led_task+0x2c0>)
 80016fe:	f002 ffda 	bl	80046b6 <HAL_GPIO_TogglePin>
 8001702:	e0c9      	b.n	8001898 <led_task+0x30c>
				}																										// O
				else if (!strcmp((char*)msg->payload, "Tre")) {		// Toggle red LED									// N
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	4954      	ldr	r1, [pc, #336]	@ (8001858 <led_task+0x2cc>)
 8001708:	4618      	mov	r0, r3
 800170a:	f7fe fdab 	bl	8000264 <strcmp>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10b      	bne.n	800172c <led_task+0x1a0>
					set_led_timer(effectNone);																			//
 8001714:	2004      	movs	r0, #4
 8001716:	f000 f99b 	bl	8001a50 <set_led_timer>
					curr_led_state = sNone;																				//
 800171a:	4b46      	ldr	r3, [pc, #280]	@ (8001834 <led_task+0x2a8>)
 800171c:	2204      	movs	r2, #4
 800171e:	701a      	strb	r2, [r3, #0]
					HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);														//
 8001720:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001724:	4849      	ldr	r0, [pc, #292]	@ (800184c <led_task+0x2c0>)
 8001726:	f002 ffc6 	bl	80046b6 <HAL_GPIO_TogglePin>
 800172a:	e0b5      	b.n	8001898 <led_task+0x30c>
				}																										//
				else if (parse_freq_string(msg, &freq)) {			// Frequency adjustment								//
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	4619      	mov	r1, r3
 8001732:	69f8      	ldr	r0, [r7, #28]
 8001734:	f000 fab2 	bl	8001c9c <parse_freq_string>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d055      	beq.n	80017ea <led_task+0x25e>
					// Check that there is an active effect																//
					if(sNone == curr_led_state) {																		//
 800173e:	4b3d      	ldr	r3, [pc, #244]	@ (8001834 <led_task+0x2a8>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b04      	cmp	r3, #4
 8001744:	d108      	bne.n	8001758 <led_task+0x1cc>
						xQueueSend(q_print, &msg_no_active_effect, portMAX_DELAY);										//
 8001746:	4b38      	ldr	r3, [pc, #224]	@ (8001828 <led_task+0x29c>)
 8001748:	6818      	ldr	r0, [r3, #0]
 800174a:	2300      	movs	r3, #0
 800174c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001750:	4942      	ldr	r1, [pc, #264]	@ (800185c <led_task+0x2d0>)
 8001752:	f007 fa81 	bl	8008c58 <xQueueGenericSend>
 8001756:	e09f      	b.n	8001898 <led_task+0x30c>
					}																									//
					// Check that frequency is between 1 and 10 Hz														//
					else if(freq > 10) {																				//
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	2b0a      	cmp	r3, #10
 800175c:	dd08      	ble.n	8001770 <led_task+0x1e4>
						xQueueSend(q_print, &msg_inv_freq, portMAX_DELAY);												//
 800175e:	4b32      	ldr	r3, [pc, #200]	@ (8001828 <led_task+0x29c>)
 8001760:	6818      	ldr	r0, [r3, #0]
 8001762:	2300      	movs	r3, #0
 8001764:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001768:	493d      	ldr	r1, [pc, #244]	@ (8001860 <led_task+0x2d4>)
 800176a:	f007 fa75 	bl	8008c58 <xQueueGenericSend>
 800176e:	e093      	b.n	8001898 <led_task+0x30c>
					}																									//
					// Change timer frequency																			//
					else {																								//
						period = (1.0 / freq) * 1000;																	//
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4618      	mov	r0, r3
 8001774:	f7fe ff2e 	bl	80005d4 <__aeabi_i2d>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	f04f 0000 	mov.w	r0, #0
 8001780:	4938      	ldr	r1, [pc, #224]	@ (8001864 <led_task+0x2d8>)
 8001782:	f7ff f8bb 	bl	80008fc <__aeabi_ddiv>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4610      	mov	r0, r2
 800178c:	4619      	mov	r1, r3
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b35      	ldr	r3, [pc, #212]	@ (8001868 <led_task+0x2dc>)
 8001794:	f7fe ff88 	bl	80006a8 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f7ff fa32 	bl	8000c08 <__aeabi_d2iz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	627b      	str	r3, [r7, #36]	@ 0x24
						if (xTimerChangePeriod(handle_led_timer[curr_led_state], pdMS_TO_TICKS(period), 0) != pdPASS) {	//
 80017a8:	4b22      	ldr	r3, [pc, #136]	@ (8001834 <led_task+0x2a8>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	461a      	mov	r2, r3
 80017ae:	4b2f      	ldr	r3, [pc, #188]	@ (800186c <led_task+0x2e0>)
 80017b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80017b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	4a2c      	ldr	r2, [pc, #176]	@ (8001870 <led_task+0x2e4>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	099a      	lsrs	r2, r3, #6
 80017c6:	2300      	movs	r3, #0
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	2300      	movs	r3, #0
 80017cc:	2104      	movs	r1, #4
 80017ce:	f009 fceb 	bl	800b1a8 <xTimerGenericCommand>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d05f      	beq.n	8001898 <led_task+0x30c>
							// If frequency update was not successful, notify the user									//
							xQueueSend(q_print, &msg_err_freq, portMAX_DELAY);											//
 80017d8:	4b13      	ldr	r3, [pc, #76]	@ (8001828 <led_task+0x29c>)
 80017da:	6818      	ldr	r0, [r3, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80017e2:	4924      	ldr	r1, [pc, #144]	@ (8001874 <led_task+0x2e8>)
 80017e4:	f007 fa38 	bl	8008c58 <xQueueGenericSend>
 80017e8:	e056      	b.n	8001898 <led_task+0x30c>
						}																								//
					}																									//
				}																										//
				else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu								//
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	4922      	ldr	r1, [pc, #136]	@ (8001878 <led_task+0x2ec>)
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fd38 	bl	8000264 <strcmp>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10c      	bne.n	8001814 <led_task+0x288>
					// Update the system state																			//
					curr_sys_state = sMainMenu;																			//
 80017fa:	4b20      	ldr	r3, [pc, #128]	@ (800187c <led_task+0x2f0>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	701a      	strb	r2, [r3, #0]
																														//
					// Notify the main menu task																		//
					xTaskNotify(handle_main_menu_task, 0, eNoAction);													//
 8001800:	4b1f      	ldr	r3, [pc, #124]	@ (8001880 <led_task+0x2f4>)
 8001802:	6818      	ldr	r0, [r3, #0]
 8001804:	2300      	movs	r3, #0
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	2300      	movs	r3, #0
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	f009 f9b1 	bl	800ab74 <xTaskGenericNotify>
 8001812:	e041      	b.n	8001898 <led_task+0x30c>
				}																										//
				else												// Invalid response									//
					xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);													//
 8001814:	4b04      	ldr	r3, [pc, #16]	@ (8001828 <led_task+0x29c>)
 8001816:	6818      	ldr	r0, [r3, #0]
 8001818:	2300      	movs	r3, #0
 800181a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800181e:	4919      	ldr	r1, [pc, #100]	@ (8001884 <led_task+0x2f8>)
 8001820:	f007 fa1a 	bl	8008c58 <xQueueGenericSend>
 8001824:	e038      	b.n	8001898 <led_task+0x30c>
 8001826:	bf00      	nop
 8001828:	2000147c 	.word	0x2000147c
 800182c:	2000001c 	.word	0x2000001c
 8001830:	0800ee04 	.word	0x0800ee04
 8001834:	20000020 	.word	0x20000020
 8001838:	0800ee0c 	.word	0x0800ee0c
 800183c:	0800ee10 	.word	0x0800ee10
 8001840:	0800ee14 	.word	0x0800ee14
 8001844:	0800ee18 	.word	0x0800ee18
 8001848:	0800ee1c 	.word	0x0800ee1c
 800184c:	40020c00 	.word	0x40020c00
 8001850:	0800ee20 	.word	0x0800ee20
 8001854:	0800ee24 	.word	0x0800ee24
 8001858:	0800ee28 	.word	0x0800ee28
 800185c:	20000010 	.word	0x20000010
 8001860:	20000018 	.word	0x20000018
 8001864:	3ff00000 	.word	0x3ff00000
 8001868:	408f4000 	.word	0x408f4000
 800186c:	20001484 	.word	0x20001484
 8001870:	10624dd3 	.word	0x10624dd3
 8001874:	20000014 	.word	0x20000014
 8001878:	0800ee2c 	.word	0x0800ee2c
 800187c:	200014a5 	.word	0x200014a5
 8001880:	20001460 	.word	0x20001460
 8001884:	2000000c 	.word	0x2000000c
			}																											//
			else {																										//
				// If user input is longer than 4 characters, notify user of invalid response							//
				xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);														//
 8001888:	4b5f      	ldr	r3, [pc, #380]	@ (8001a08 <led_task+0x47c>)
 800188a:	6818      	ldr	r0, [r3, #0]
 800188c:	2300      	movs	r3, #0
 800188e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001892:	495e      	ldr	r1, [pc, #376]	@ (8001a0c <led_task+0x480>)
 8001894:	f007 f9e0 	bl	8008c58 <xQueueGenericSend>
			}																											//
																														//
			// Notify self / led task if not returning to the main menu													//
			if (sLedMenu == curr_sys_state)																				//
 8001898:	4b5d      	ldr	r3, [pc, #372]	@ (8001a10 <led_task+0x484>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d108      	bne.n	80018b2 <led_task+0x326>
				xTaskNotify(handle_led_task, 0, eNoAction);																//
 80018a0:	4b5c      	ldr	r3, [pc, #368]	@ (8001a14 <led_task+0x488>)
 80018a2:	6818      	ldr	r0, [r3, #0]
 80018a4:	2300      	movs	r3, #0
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	2300      	movs	r3, #0
 80018aa:	2200      	movs	r2, #0
 80018ac:	2100      	movs	r1, #0
 80018ae:	f009 f961 	bl	800ab74 <xTaskGenericNotify>
		}	// ===========================================================================================================
		// If timeout, check for any LED event group bits set ------------------------------------------------------------
		eventBits =  xEventGroupWaitBits(																				//
 80018b2:	4b59      	ldr	r3, [pc, #356]	@ (8001a18 <led_task+0x48c>)
 80018b4:	6818      	ldr	r0, [r3, #0]
 80018b6:	2300      	movs	r3, #0
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2300      	movs	r3, #0
 80018bc:	2201      	movs	r2, #1
 80018be:	210f      	movs	r1, #15
 80018c0:	f006 fea0 	bl	8008604 <xEventGroupWaitBits>
 80018c4:	61b8      	str	r0, [r7, #24]
		             ACCEL_READ_X_BIT | ACCEL_READ_Y_BIT | ACCEL_READ_Z_BIT | TURN_OFF_LEDS_BIT,						//
		             pdTRUE,  // Clear bits on exit																		//
		             pdFALSE, // Wait for any bit to be set																//
		             0);      // Do not block																			//
																														//
		if ((eventBits & ACCEL_READ_X_BIT) && (eventBits & ACCEL_READ_Y_BIT) && (eventBits & ACCEL_READ_Z_BIT)) {		//
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d022      	beq.n	8001916 <led_task+0x38a>
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01d      	beq.n	8001916 <led_task+0x38a>
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d018      	beq.n	8001916 <led_task+0x38a>
			// Light all LED for x-, y-, and z-axis success																//
			set_led_timer(effectNone);																					//
 80018e4:	2004      	movs	r0, #4
 80018e6:	f000 f8b3 	bl	8001a50 <set_led_timer>
			curr_led_state = sNone;																						//
 80018ea:	4b4c      	ldr	r3, [pc, #304]	@ (8001a1c <led_task+0x490>)
 80018ec:	2204      	movs	r2, #4
 80018ee:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, SET);													//
 80018f0:	2201      	movs	r2, #1
 80018f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80018f6:	484a      	ldr	r0, [pc, #296]	@ (8001a20 <led_task+0x494>)
 80018f8:	f002 fec4 	bl	8004684 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, SET);														//
 80018fc:	2201      	movs	r2, #1
 80018fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001902:	4847      	ldr	r0, [pc, #284]	@ (8001a20 <led_task+0x494>)
 8001904:	f002 febe 	bl	8004684 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, SET);														//
 8001908:	2201      	movs	r2, #1
 800190a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800190e:	4844      	ldr	r0, [pc, #272]	@ (8001a20 <led_task+0x494>)
 8001910:	f002 feb8 	bl	8004684 <HAL_GPIO_WritePin>
 8001914:	e04c      	b.n	80019b0 <led_task+0x424>
		}																												//
		else if (eventBits & TURN_OFF_LEDS_BIT) {																		// E
 8001916:	69bb      	ldr	r3, [r7, #24]
 8001918:	f003 0308 	and.w	r3, r3, #8
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <led_task+0x3a8>
			// Turn off all LEDs																						// V
			set_led_timer(effectNone);																					// E
 8001920:	2004      	movs	r0, #4
 8001922:	f000 f895 	bl	8001a50 <set_led_timer>
			curr_led_state = sNone;																						// N
 8001926:	4b3d      	ldr	r3, [pc, #244]	@ (8001a1c <led_task+0x490>)
 8001928:	2204      	movs	r2, #4
 800192a:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					// T
 800192c:	2000      	movs	r0, #0
 800192e:	f000 f8c1 	bl	8001ab4 <control_all_leds>
 8001932:	e03d      	b.n	80019b0 <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_X_BIT) {																		// G
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d00f      	beq.n	800195e <led_task+0x3d2>
			// Light orange LED for x-axis success																		// R
			set_led_timer(effectNone);																					// O
 800193e:	2004      	movs	r0, #4
 8001940:	f000 f886 	bl	8001a50 <set_led_timer>
			curr_led_state = sNone;																						// U
 8001944:	4b35      	ldr	r3, [pc, #212]	@ (8001a1c <led_task+0x490>)
 8001946:	2204      	movs	r2, #4
 8001948:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					// P
 800194a:	2000      	movs	r0, #0
 800194c:	f000 f8b2 	bl	8001ab4 <control_all_leds>
			HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, SET);													//
 8001950:	2201      	movs	r2, #1
 8001952:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001956:	4832      	ldr	r0, [pc, #200]	@ (8001a20 <led_task+0x494>)
 8001958:	f002 fe94 	bl	8004684 <HAL_GPIO_WritePin>
 800195c:	e028      	b.n	80019b0 <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_Y_BIT) {																		//
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	f003 0302 	and.w	r3, r3, #2
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00f      	beq.n	8001988 <led_task+0x3fc>
			// Light blue LED for y-axis success																		//
			set_led_timer(effectNone);																					//
 8001968:	2004      	movs	r0, #4
 800196a:	f000 f871 	bl	8001a50 <set_led_timer>
			curr_led_state = sNone;																						//
 800196e:	4b2b      	ldr	r3, [pc, #172]	@ (8001a1c <led_task+0x490>)
 8001970:	2204      	movs	r2, #4
 8001972:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 8001974:	2000      	movs	r0, #0
 8001976:	f000 f89d 	bl	8001ab4 <control_all_leds>
			HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, SET);														//
 800197a:	2201      	movs	r2, #1
 800197c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001980:	4827      	ldr	r0, [pc, #156]	@ (8001a20 <led_task+0x494>)
 8001982:	f002 fe7f 	bl	8004684 <HAL_GPIO_WritePin>
 8001986:	e013      	b.n	80019b0 <led_task+0x424>
		}																												//
		else if (eventBits & ACCEL_READ_Z_BIT) {																		//
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00e      	beq.n	80019b0 <led_task+0x424>
			// Light green LED for z-axis success																		//
			set_led_timer(effectNone);																					//
 8001992:	2004      	movs	r0, #4
 8001994:	f000 f85c 	bl	8001a50 <set_led_timer>
			curr_led_state = sNone;																						//
 8001998:	4b20      	ldr	r3, [pc, #128]	@ (8001a1c <led_task+0x490>)
 800199a:	2204      	movs	r2, #4
 800199c:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 800199e:	2000      	movs	r0, #0
 80019a0:	f000 f888 	bl	8001ab4 <control_all_leds>
			HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, SET);														//
 80019a4:	2201      	movs	r2, #1
 80019a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019aa:	481d      	ldr	r0, [pc, #116]	@ (8001a20 <led_task+0x494>)
 80019ac:	f002 fe6a 	bl	8004684 <HAL_GPIO_WritePin>
		}	// -----------------------------------------------------------------------------------------------------------
		// ===============================================================================================================
		// Check if rtcSemaphore is available																			//
		if (xSemaphoreTake(rtcSemaphore, RTC_SEMAPHORE_WAIT_TIME) == pdTRUE) {											// S
 80019b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001a24 <led_task+0x498>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	210a      	movs	r1, #10
 80019b6:	4618      	mov	r0, r3
 80019b8:	f007 fc4e 	bl	8009258 <xQueueSemaphoreTake>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d10e      	bne.n	80019e0 <led_task+0x454>
			// Light red LED to indicate successful RTC configuration													// E
			set_led_timer(effectNone);																					// M
 80019c2:	2004      	movs	r0, #4
 80019c4:	f000 f844 	bl	8001a50 <set_led_timer>
			curr_led_state = sNone;																						// A
 80019c8:	4b14      	ldr	r3, [pc, #80]	@ (8001a1c <led_task+0x490>)
 80019ca:	2204      	movs	r2, #4
 80019cc:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					// P
 80019ce:	2000      	movs	r0, #0
 80019d0:	f000 f870 	bl	8001ab4 <control_all_leds>
			HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, SET);															// H
 80019d4:	2201      	movs	r2, #1
 80019d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80019da:	4811      	ldr	r0, [pc, #68]	@ (8001a20 <led_task+0x494>)
 80019dc:	f002 fe52 	bl	8004684 <HAL_GPIO_WritePin>
		} 																												// O
		if (xSemaphoreTake(ledOffSemaphore, RTC_SEMAPHORE_WAIT_TIME) == pdTRUE) {										// R
 80019e0:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <led_task+0x49c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	210a      	movs	r1, #10
 80019e6:	4618      	mov	r0, r3
 80019e8:	f007 fc36 	bl	8009258 <xQueueSemaphoreTake>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	f47f add7 	bne.w	80015a2 <led_task+0x16>
			// Turn off all LEDs																						// E
			set_led_timer(effectNone);																					// S
 80019f4:	2004      	movs	r0, #4
 80019f6:	f000 f82b 	bl	8001a50 <set_led_timer>
			curr_led_state = sNone;																						//
 80019fa:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <led_task+0x490>)
 80019fc:	2204      	movs	r2, #4
 80019fe:	701a      	strb	r2, [r3, #0]
			control_all_leds(LED_OFF);																					//
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 f857 	bl	8001ab4 <control_all_leds>
		if (xTaskNotifyWait(0, 0, &notificationValue, xTicksToWait) == pdPASS) {										//
 8001a06:	e5cc      	b.n	80015a2 <led_task+0x16>
 8001a08:	2000147c 	.word	0x2000147c
 8001a0c:	2000000c 	.word	0x2000000c
 8001a10:	200014a5 	.word	0x200014a5
 8001a14:	2000146c 	.word	0x2000146c
 8001a18:	20001498 	.word	0x20001498
 8001a1c:	20000020 	.word	0x20000020
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	2000149c 	.word	0x2000149c
 8001a28:	200014a0 	.word	0x200014a0

08001a2c <led_callback>:
 * @note The function assumes that the timer IDs correspond directly to the LED effects to be executed *
 *       and relies on proper timer setup and management by the calling code.						   *
 ******************************************************************************************************/

void led_callback(TimerHandle_t xTimer)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	// Get timer ID
	int id = (uint32_t)pvTimerGetTimerID(xTimer);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f009 fea1 	bl	800b77c <pvTimerGetTimerID>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	60fb      	str	r3, [r7, #12]

	// LED effects correspond to timer ID's
	int effect = id;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
	execute_led_effect(effect);
 8001a42:	68b8      	ldr	r0, [r7, #8]
 8001a44:	f000 f8c4 	bl	8001bd0 <execute_led_effect>
}
 8001a48:	bf00      	nop
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <set_led_timer>:
 * @note This function assumes that `handle_led_timer[]` array is properly initialized and contains    *
 *       valid FreeRTOS software timer handles for each LED effect.									   *
 ******************************************************************************************************/

void set_led_timer(led_effect_t effect)
{
 8001a50:	b590      	push	{r4, r7, lr}
 8001a52:	b087      	sub	sp, #28
 8001a54:	af02      	add	r7, sp, #8
 8001a56:	4603      	mov	r3, r0
 8001a58:	71fb      	strb	r3, [r7, #7]
	// Turn off all timers
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	e00e      	b.n	8001a7e <set_led_timer+0x2e>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 8001a60:	4a13      	ldr	r2, [pc, #76]	@ (8001ab0 <set_led_timer+0x60>)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a68:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	2200      	movs	r2, #0
 8001a72:	2103      	movs	r1, #3
 8001a74:	f009 fb98 	bl	800b1a8 <xTimerGenericCommand>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	60fb      	str	r3, [r7, #12]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	dded      	ble.n	8001a60 <set_led_timer+0x10>
	}

	// Start the selected timer
	if(effectNone != effect) {
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	d00e      	beq.n	8001aa8 <set_led_timer+0x58>
		xTimerStart(handle_led_timer[effect], portMAX_DELAY);
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	4a08      	ldr	r2, [pc, #32]	@ (8001ab0 <set_led_timer+0x60>)
 8001a8e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8001a92:	f008 fa1b 	bl	8009ecc <xTaskGetTickCount>
 8001a96:	4602      	mov	r2, r0
 8001a98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	4620      	mov	r0, r4
 8001aa4:	f009 fb80 	bl	800b1a8 <xTimerGenericCommand>
	}
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	20001484 	.word	0x20001484

08001ab4 <control_all_leds>:
 * 																									   *
 * @note This function assumes that the macros for each on-board LED are configured correctly.	       *
 ******************************************************************************************************/

void control_all_leds(int state)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, state);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ac6:	480f      	ldr	r0, [pc, #60]	@ (8001b04 <control_all_leds+0x50>)
 8001ac8:	f002 fddc 	bl	8004684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, state);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001ad6:	480b      	ldr	r0, [pc, #44]	@ (8001b04 <control_all_leds+0x50>)
 8001ad8:	f002 fdd4 	bl	8004684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, state);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ae6:	4807      	ldr	r0, [pc, #28]	@ (8001b04 <control_all_leds+0x50>)
 8001ae8:	f002 fdcc 	bl	8004684 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, state);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001af6:	4803      	ldr	r0, [pc, #12]	@ (8001b04 <control_all_leds+0x50>)
 8001af8:	f002 fdc4 	bl	8004684 <HAL_GPIO_WritePin>
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	40020c00 	.word	0x40020c00

08001b08 <control_led_group>:
 * @note The provided `led_mode` specifies which LED group should be turned on (ex. LED_EVEN). The	   *
 *       other LED group (ex. LED_ODD) will be turned off.											   *
 ******************************************************************************************************/

void control_led_group(int led_mode)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	// Turn on even LEDs
	if(LED_EVEN == led_mode) {
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d118      	bne.n	8001b48 <control_led_group+0x40>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 8001b16:	2200      	movs	r2, #0
 8001b18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b1c:	4818      	ldr	r0, [pc, #96]	@ (8001b80 <control_led_group+0x78>)
 8001b1e:	f002 fdb1 	bl	8004684 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 8001b22:	2201      	movs	r2, #1
 8001b24:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b28:	4815      	ldr	r0, [pc, #84]	@ (8001b80 <control_led_group+0x78>)
 8001b2a:	f002 fdab 	bl	8004684 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b34:	4812      	ldr	r0, [pc, #72]	@ (8001b80 <control_led_group+0x78>)
 8001b36:	f002 fda5 	bl	8004684 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b40:	480f      	ldr	r0, [pc, #60]	@ (8001b80 <control_led_group+0x78>)
 8001b42:	f002 fd9f 	bl	8004684 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
	}
}
 8001b46:	e017      	b.n	8001b78 <control_led_group+0x70>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001b4e:	480c      	ldr	r0, [pc, #48]	@ (8001b80 <control_led_group+0x78>)
 8001b50:	f002 fd98 	bl	8004684 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001b54:	2200      	movs	r2, #0
 8001b56:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001b5a:	4809      	ldr	r0, [pc, #36]	@ (8001b80 <control_led_group+0x78>)
 8001b5c:	f002 fd92 	bl	8004684 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
 8001b60:	2201      	movs	r2, #1
 8001b62:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b66:	4806      	ldr	r0, [pc, #24]	@ (8001b80 <control_led_group+0x78>)
 8001b68:	f002 fd8c 	bl	8004684 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b72:	4803      	ldr	r0, [pc, #12]	@ (8001b80 <control_led_group+0x78>)
 8001b74:	f002 fd86 	bl	8004684 <HAL_GPIO_WritePin>
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40020c00 	.word	0x40020c00

08001b84 <control_single_led>:
 * @note `config` dictates the LED states, ex. 0x05 = 0101 = Green and Red LEDs on, Orange and Blue    *
 *       LEDs off.																					   *
 ******************************************************************************************************/

void control_single_led(int config)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	// Orange		LD3			GPIO_PIN_13		0x2000  //
	// Red			LD5			GPIO_PIN_14		0x4000  //
	// Blue			LD6			GPIO_PIN_15		0x8000  //
	//////////////////////////////////////////////////////

	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e014      	b.n	8001bbc <control_single_led+0x38>
		HAL_GPIO_WritePin(GREEN_LED_PORT, (GREEN_LED_PIN << i), ((config >> i) & 0x1));
 8001b92:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9c:	b299      	uxth	r1, r3
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	fa42 f303 	asr.w	r3, r2, r3
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	f003 0301 	and.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <control_single_led+0x48>)
 8001bb2:	f002 fd67 	bl	8004684 <HAL_GPIO_WritePin>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	dde7      	ble.n	8001b92 <control_single_led+0xe>
	}
}
 8001bc2:	bf00      	nop
 8001bc4:	bf00      	nop
 8001bc6:	3710      	adds	r7, #16
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40020c00 	.word	0x40020c00

08001bd0 <execute_led_effect>:
 * @note This function assumes that functions `control_all_leds()`, `control_led_group()`, and 		   *
 *       `control_single_led()` are implemented to control the LEDs accordingly.			 		   *
 ******************************************************************************************************/

void execute_led_effect(int effect)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	// Flag used for effects E1 and E2
	static int flag = 1;
	// i and used for effects E3 and E4
	static int i = 0;

	switch(effect) {
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d854      	bhi.n	8001c88 <execute_led_effect+0xb8>
 8001bde:	a201      	add	r2, pc, #4	@ (adr r2, 8001be4 <execute_led_effect+0x14>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001bf5 	.word	0x08001bf5
 8001be8:	08001c19 	.word	0x08001c19
 8001bec:	08001c3d 	.word	0x08001c3d
 8001bf0:	08001c63 	.word	0x08001c63
		case effectE1:
			// Flash all LEDs in unison
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 8001bf4:	4b27      	ldr	r3, [pc, #156]	@ (8001c94 <execute_led_effect+0xc4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f083 0301 	eor.w	r3, r3, #1
 8001bfc:	4a25      	ldr	r2, [pc, #148]	@ (8001c94 <execute_led_effect+0xc4>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	4b24      	ldr	r3, [pc, #144]	@ (8001c94 <execute_led_effect+0xc4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <execute_led_effect+0x40>
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff ff53 	bl	8001ab4 <control_all_leds>
			break;
 8001c0e:	e03c      	b.n	8001c8a <execute_led_effect+0xba>
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 8001c10:	2001      	movs	r0, #1
 8001c12:	f7ff ff4f 	bl	8001ab4 <control_all_leds>
			break;
 8001c16:	e038      	b.n	8001c8a <execute_led_effect+0xba>
		case effectE2:
			// Flash even and odd LEDs back and forth
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 8001c18:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <execute_led_effect+0xc4>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f083 0301 	eor.w	r3, r3, #1
 8001c20:	4a1c      	ldr	r2, [pc, #112]	@ (8001c94 <execute_led_effect+0xc4>)
 8001c22:	6013      	str	r3, [r2, #0]
 8001c24:	4b1b      	ldr	r3, [pc, #108]	@ (8001c94 <execute_led_effect+0xc4>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <execute_led_effect+0x64>
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff ff6b 	bl	8001b08 <control_led_group>
			break;
 8001c32:	e02a      	b.n	8001c8a <execute_led_effect+0xba>
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 8001c34:	2001      	movs	r0, #1
 8001c36:	f7ff ff67 	bl	8001b08 <control_led_group>
			break;
 8001c3a:	e026      	b.n	8001c8a <execute_led_effect+0xba>
		case effectE3:
			// Move the illuminated LED around the circle of on-board LEDs
			control_single_led(0x1 << (i++ % 4));
 8001c3c:	4b16      	ldr	r3, [pc, #88]	@ (8001c98 <execute_led_effect+0xc8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	1c5a      	adds	r2, r3, #1
 8001c42:	4915      	ldr	r1, [pc, #84]	@ (8001c98 <execute_led_effect+0xc8>)
 8001c44:	600a      	str	r2, [r1, #0]
 8001c46:	425a      	negs	r2, r3
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	f002 0203 	and.w	r2, r2, #3
 8001c50:	bf58      	it	pl
 8001c52:	4253      	negpl	r3, r2
 8001c54:	2201      	movs	r2, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff ff92 	bl	8001b84 <control_single_led>
			break;
 8001c60:	e013      	b.n	8001c8a <execute_led_effect+0xba>
		case effectE4:
			// Move the illuminated LED around the circle of on-board LEDs in opposite direction of effect E3
			control_single_led(0x08 >> (i++ % 4));
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <execute_led_effect+0xc8>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	1c5a      	adds	r2, r3, #1
 8001c68:	490b      	ldr	r1, [pc, #44]	@ (8001c98 <execute_led_effect+0xc8>)
 8001c6a:	600a      	str	r2, [r1, #0]
 8001c6c:	425a      	negs	r2, r3
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	f002 0203 	and.w	r2, r2, #3
 8001c76:	bf58      	it	pl
 8001c78:	4253      	negpl	r3, r2
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	fa42 f303 	asr.w	r3, r2, r3
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff ff7f 	bl	8001b84 <control_single_led>
			break;
 8001c86:	e000      	b.n	8001c8a <execute_led_effect+0xba>
		default:
			break;
 8001c88:	bf00      	nop
	}
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	20000024 	.word	0x20000024
 8001c98:	2000016c 	.word	0x2000016c

08001c9c <parse_freq_string>:
 *       validate the value range explicitly. It relies on other components to handle invalid values.  *
 ******************************************************************************************************/


int parse_freq_string(message_t *msg, int *freq_Hz)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
    // Check if the input string is at least 2 characters long (F and one digit)
    int len = strlen((char *)msg->payload);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fae5 	bl	8000278 <strlen>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	60bb      	str	r3, [r7, #8]
    if (len < 2 || len > 4) return 0;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	dd02      	ble.n	8001cbe <parse_freq_string+0x22>
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	dd01      	ble.n	8001cc2 <parse_freq_string+0x26>
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e025      	b.n	8001d0e <parse_freq_string+0x72>

    // Check if the first character is 'F'
    if (msg->payload[0] != 'F') return 0;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b46      	cmp	r3, #70	@ 0x46
 8001cc8:	d001      	beq.n	8001cce <parse_freq_string+0x32>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	e01f      	b.n	8001d0e <parse_freq_string+0x72>

    // Check if the remaining characters are digits
    for (int i = 1; i < len; i++)
 8001cce:	2301      	movs	r3, #1
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	e010      	b.n	8001cf6 <parse_freq_string+0x5a>
    {
        if (!isdigit(msg->payload[i])) return 0;
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4413      	add	r3, r2
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	4a0e      	ldr	r2, [pc, #56]	@ (8001d18 <parse_freq_string+0x7c>)
 8001ce0:	4413      	add	r3, r2
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d101      	bne.n	8001cf0 <parse_freq_string+0x54>
 8001cec:	2300      	movs	r3, #0
 8001cee:	e00e      	b.n	8001d0e <parse_freq_string+0x72>
    for (int i = 1; i < len; i++)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	60fb      	str	r3, [r7, #12]
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	429a      	cmp	r2, r3
 8001cfc:	dbea      	blt.n	8001cd4 <parse_freq_string+0x38>
    }

    // Convert the numeric part to an integer
    *freq_Hz = freq_str_to_int(msg, len);
 8001cfe:	68b9      	ldr	r1, [r7, #8]
 8001d00:	6878      	ldr	r0, [r7, #4]
 8001d02:	f000 f80b 	bl	8001d1c <freq_str_to_int>
 8001d06:	4602      	mov	r2, r0
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	601a      	str	r2, [r3, #0]
    return 1;
 8001d0c:	2301      	movs	r3, #1
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	0800f76e 	.word	0x0800f76e

08001d1c <freq_str_to_int>:
 *       invalid formats or edge cases (e.g., non-numeric characters). It relies on proper validation  *
 *       by the calling function.																	   *
 ******************************************************************************************************/

int freq_str_to_int(message_t *msg, int len)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
	int ret = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<len; i++) {
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	e00f      	b.n	8001d50 <freq_str_to_int+0x34>
		ret = ret * 10 + (msg->payload[i] - '0'); // Convert from ASCII to an integer
 8001d30:	68fa      	ldr	r2, [r7, #12]
 8001d32:	4613      	mov	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	4413      	add	r3, r2
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	3b30      	subs	r3, #48	@ 0x30
 8001d46:	440b      	add	r3, r1
 8001d48:	60fb      	str	r3, [r7, #12]
	for(int i=1; i<len; i++) {
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68ba      	ldr	r2, [r7, #8]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	429a      	cmp	r2, r3
 8001d56:	dbeb      	blt.n	8001d30 <freq_str_to_int+0x14>
	}

	return ret;
 8001d58:	68fb      	ldr	r3, [r7, #12]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <motor_task>:
 * @note The print queue (`q_print`) and other required queues must be initialized.				 	   *
 * @note The task must be notified when a new command is available.									   *
 ******************************************************************************************************/

void motor_task(void *param)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b087      	sub	sp, #28
 8001d6c:	af02      	add	r7, sp, #8
 8001d6e:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2300      	movs	r3, #0
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2000      	movs	r0, #0
 8001d7e:	f008 fe6f 	bl	800aa60 <xTaskGenericNotifyWait>

		// Display motor manager menu for the user
		xQueueSend(q_print, &msg_motor_menu, portMAX_DELAY);
 8001d82:	4b63      	ldr	r3, [pc, #396]	@ (8001f10 <motor_task+0x1a8>)
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	2300      	movs	r3, #0
 8001d88:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d8c:	4961      	ldr	r1, [pc, #388]	@ (8001f14 <motor_task+0x1ac>)
 8001d8e:	f006 ff63 	bl	8008c58 <xQueueGenericSend>

		// Wait for the user to make a selection
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001d92:	f107 0308 	add.w	r3, r7, #8
 8001d96:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d9a:	9200      	str	r2, [sp, #0]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2000      	movs	r0, #0
 8001da2:	f008 fe5d 	bl	800aa60 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	60fb      	str	r3, [r7, #12]

		// Process command
		if(msg->len <= 5) {
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b05      	cmp	r3, #5
 8001db0:	d87b      	bhi.n	8001eaa <motor_task+0x142>
			if(!strcmp((char*)msg->payload, "Start")) {
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4958      	ldr	r1, [pc, #352]	@ (8001f18 <motor_task+0x1b0>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7fe fa54 	bl	8000264 <strcmp>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10f      	bne.n	8001de2 <motor_task+0x7a>
				// Set the motor state
				curr_motor_state = MOTOR_ACTIVE;
 8001dc2:	4b56      	ldr	r3, [pc, #344]	@ (8001f1c <motor_task+0x1b4>)
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]
				// Configure the H-bridge for forward rotation
				HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dce:	4854      	ldr	r0, [pc, #336]	@ (8001f20 <motor_task+0x1b8>)
 8001dd0:	f002 fc58 	bl	8004684 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dda:	4851      	ldr	r0, [pc, #324]	@ (8001f20 <motor_task+0x1b8>)
 8001ddc:	f002 fc52 	bl	8004684 <HAL_GPIO_WritePin>
 8001de0:	e06b      	b.n	8001eba <motor_task+0x152>
			}
			else if(!strcmp((char*)msg->payload, "Stop")) {
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	494f      	ldr	r1, [pc, #316]	@ (8001f24 <motor_task+0x1bc>)
 8001de6:	4618      	mov	r0, r3
 8001de8:	f7fe fa3c 	bl	8000264 <strcmp>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <motor_task+0x9e>
				// Set the motor state
				curr_motor_state = MOTOR_INACTIVE;
 8001df2:	4b4a      	ldr	r3, [pc, #296]	@ (8001f1c <motor_task+0x1b4>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
				// Pull both IN1 and IN2 low to stop current flow to the motor
				HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin|MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8001dfe:	4848      	ldr	r0, [pc, #288]	@ (8001f20 <motor_task+0x1b8>)
 8001e00:	f002 fc40 	bl	8004684 <HAL_GPIO_WritePin>
 8001e04:	e059      	b.n	8001eba <motor_task+0x152>
			}
			else if(!strcmp((char*)msg->payload, "Algo")) {
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4947      	ldr	r1, [pc, #284]	@ (8001f28 <motor_task+0x1c0>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fa2a 	bl	8000264 <strcmp>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d051      	beq.n	8001eba <motor_task+0x152>
				// execute "Algo" command
			}
			else if(!strcmp((char*)msg->payload, "Rec")) {
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4944      	ldr	r1, [pc, #272]	@ (8001f2c <motor_task+0x1c4>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7fe fa22 	bl	8000264 <strcmp>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d11b      	bne.n	8001e5e <motor_task+0xf6>
				// Set the motor state
				curr_motor_state = MOTOR_SPEED_REPORTING;
 8001e26:	4b3d      	ldr	r3, [pc, #244]	@ (8001f1c <motor_task+0x1b4>)
 8001e28:	2202      	movs	r2, #2
 8001e2a:	601a      	str	r2, [r3, #0]
				// Notify user of reporting
				xQueueSend(q_print, &msg_speed_report, portMAX_DELAY);
 8001e2c:	4b38      	ldr	r3, [pc, #224]	@ (8001f10 <motor_task+0x1a8>)
 8001e2e:	6818      	ldr	r0, [r3, #0]
 8001e30:	2300      	movs	r3, #0
 8001e32:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e36:	493e      	ldr	r1, [pc, #248]	@ (8001f30 <motor_task+0x1c8>)
 8001e38:	f006 ff0e 	bl	8008c58 <xQueueGenericSend>
				// Initialize report time counter
				report_counter = 1;
 8001e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8001f34 <motor_task+0x1cc>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]
				// Start the motor report timer
				xTimerStart(motor_report_timer, portMAX_DELAY);
 8001e42:	4b3d      	ldr	r3, [pc, #244]	@ (8001f38 <motor_task+0x1d0>)
 8001e44:	681c      	ldr	r4, [r3, #0]
 8001e46:	f008 f841 	bl	8009ecc <xTaskGetTickCount>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2300      	movs	r3, #0
 8001e54:	2101      	movs	r1, #1
 8001e56:	4620      	mov	r0, r4
 8001e58:	f009 f9a6 	bl	800b1a8 <xTimerGenericCommand>
 8001e5c:	e02d      	b.n	8001eba <motor_task+0x152>
			}
			else if(!strcmp((char*)msg->payload, "Speed")) {
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4936      	ldr	r1, [pc, #216]	@ (8001f3c <motor_task+0x1d4>)
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe f9fe 	bl	8000264 <strcmp>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d025      	beq.n	8001eba <motor_task+0x152>
				// execute "Speed" command
			}
			else if (!strcmp((char*)msg->payload, "Main")) {
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	4933      	ldr	r1, [pc, #204]	@ (8001f40 <motor_task+0x1d8>)
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe f9f6 	bl	8000264 <strcmp>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <motor_task+0x130>
				// Update the system state
				curr_sys_state = sMainMenu;
 8001e7e:	4b31      	ldr	r3, [pc, #196]	@ (8001f44 <motor_task+0x1dc>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	701a      	strb	r2, [r3, #0]

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8001e84:	4b30      	ldr	r3, [pc, #192]	@ (8001f48 <motor_task+0x1e0>)
 8001e86:	6818      	ldr	r0, [r3, #0]
 8001e88:	2300      	movs	r3, #0
 8001e8a:	9300      	str	r3, [sp, #0]
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2100      	movs	r1, #0
 8001e92:	f008 fe6f 	bl	800ab74 <xTaskGenericNotify>
 8001e96:	e010      	b.n	8001eba <motor_task+0x152>
			}
			else {
				xQueueSend(q_print, &msg_inv_motor, portMAX_DELAY);
 8001e98:	4b1d      	ldr	r3, [pc, #116]	@ (8001f10 <motor_task+0x1a8>)
 8001e9a:	6818      	ldr	r0, [r3, #0]
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ea2:	492a      	ldr	r1, [pc, #168]	@ (8001f4c <motor_task+0x1e4>)
 8001ea4:	f006 fed8 	bl	8008c58 <xQueueGenericSend>
 8001ea8:	e007      	b.n	8001eba <motor_task+0x152>
			}
		}
		else {
			// If user input is longer than 5 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_motor, portMAX_DELAY);
 8001eaa:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <motor_task+0x1a8>)
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eb4:	4925      	ldr	r1, [pc, #148]	@ (8001f4c <motor_task+0x1e4>)
 8001eb6:	f006 fecf 	bl	8008c58 <xQueueGenericSend>
		}

		// Notify self / motor task if not returning to the main menu
		if (sMotorMenu == curr_sys_state) {
 8001eba:	4b22      	ldr	r3, [pc, #136]	@ (8001f44 <motor_task+0x1dc>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b04      	cmp	r3, #4
 8001ec0:	f47f af56 	bne.w	8001d70 <motor_task+0x8>
			// Check if speed reporting is active
			if(MOTOR_SPEED_REPORTING == curr_motor_state) {
 8001ec4:	4b15      	ldr	r3, [pc, #84]	@ (8001f1c <motor_task+0x1b4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d117      	bne.n	8001efc <motor_task+0x194>
				// Wait for cancellation from the user before allowing next user input
				xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001ecc:	f107 0308 	add.w	r3, r7, #8
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	2000      	movs	r0, #0
 8001edc:	f008 fdc0 	bl	800aa60 <xTaskGenericNotifyWait>
				// Stop the motor report timer
				xTimerStop(motor_report_timer, portMAX_DELAY);
 8001ee0:	4b15      	ldr	r3, [pc, #84]	@ (8001f38 <motor_task+0x1d0>)
 8001ee2:	6818      	ldr	r0, [r3, #0]
 8001ee4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	2200      	movs	r2, #0
 8001eee:	2103      	movs	r1, #3
 8001ef0:	f009 f95a 	bl	800b1a8 <xTimerGenericCommand>
				// Report statistics and reset parameters
				print_summary_report();
 8001ef4:	f000 f96c 	bl	80021d0 <print_summary_report>
				initialize_parameters();
 8001ef8:	f000 f940 	bl	800217c <initialize_parameters>
			}
			xTaskNotify(handle_motor_task, 0, eNoAction);
 8001efc:	4b14      	ldr	r3, [pc, #80]	@ (8001f50 <motor_task+0x1e8>)
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	2300      	movs	r3, #0
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2300      	movs	r3, #0
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f008 fe33 	bl	800ab74 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001f0e:	e72f      	b.n	8001d70 <motor_task+0x8>
 8001f10:	2000147c 	.word	0x2000147c
 8001f14:	20000030 	.word	0x20000030
 8001f18:	0800f0bc 	.word	0x0800f0bc
 8001f1c:	2000017c 	.word	0x2000017c
 8001f20:	40020800 	.word	0x40020800
 8001f24:	0800f0c4 	.word	0x0800f0c4
 8001f28:	0800f0cc 	.word	0x0800f0cc
 8001f2c:	0800f0d4 	.word	0x0800f0d4
 8001f30:	2000002c 	.word	0x2000002c
 8001f34:	20000180 	.word	0x20000180
 8001f38:	20001494 	.word	0x20001494
 8001f3c:	0800f0d8 	.word	0x0800f0d8
 8001f40:	0800f0e0 	.word	0x0800f0e0
 8001f44:	200014a5 	.word	0x200014a5
 8001f48:	20001460 	.word	0x20001460
 8001f4c:	20000028 	.word	0x20000028
 8001f50:	20001478 	.word	0x20001478

08001f54 <motor_gpio_callback>:
		}
	}
}

void motor_gpio_callback(uint16_t GPIO_Pin)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b084      	sub	sp, #16
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	80fb      	strh	r3, [r7, #6]
    uint8_t a = HAL_GPIO_ReadPin(ENCODER_A_GPIO_Port, ENCODER_A_GPIO_Pin);
 8001f5e:	2110      	movs	r1, #16
 8001f60:	4822      	ldr	r0, [pc, #136]	@ (8001fec <motor_gpio_callback+0x98>)
 8001f62:	f002 fb77 	bl	8004654 <HAL_GPIO_ReadPin>
 8001f66:	4603      	mov	r3, r0
 8001f68:	73fb      	strb	r3, [r7, #15]
    uint8_t b = HAL_GPIO_ReadPin(ENCODER_B_GPIO_Port, ENCODER_B_GPIO_Pin);
 8001f6a:	2140      	movs	r1, #64	@ 0x40
 8001f6c:	481f      	ldr	r0, [pc, #124]	@ (8001fec <motor_gpio_callback+0x98>)
 8001f6e:	f002 fb71 	bl	8004654 <HAL_GPIO_ReadPin>
 8001f72:	4603      	mov	r3, r0
 8001f74:	73bb      	strb	r3, [r7, #14]

    if (GPIO_Pin == ENCODER_A_GPIO_Pin) {
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	2b10      	cmp	r3, #16
 8001f7a:	d118      	bne.n	8001fae <motor_gpio_callback+0x5a>
        if (a != last_a) {
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <motor_gpio_callback+0x9c>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	7bfa      	ldrb	r2, [r7, #15]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d02d      	beq.n	8001fe4 <motor_gpio_callback+0x90>
            if (a == b) {
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	7bbb      	ldrb	r3, [r7, #14]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d105      	bne.n	8001f9c <motor_gpio_callback+0x48>
                encoder_count++;
 8001f90:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <motor_gpio_callback+0xa0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	4a17      	ldr	r2, [pc, #92]	@ (8001ff4 <motor_gpio_callback+0xa0>)
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e004      	b.n	8001fa6 <motor_gpio_callback+0x52>
            } else {
                encoder_count--;
 8001f9c:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <motor_gpio_callback+0xa0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	3b01      	subs	r3, #1
 8001fa2:	4a14      	ldr	r2, [pc, #80]	@ (8001ff4 <motor_gpio_callback+0xa0>)
 8001fa4:	6013      	str	r3, [r2, #0]
            }
            last_a = a;
 8001fa6:	4a12      	ldr	r2, [pc, #72]	@ (8001ff0 <motor_gpio_callback+0x9c>)
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	7013      	strb	r3, [r2, #0]
                encoder_count++;
            }
            last_b = b;
        }
    }
}
 8001fac:	e01a      	b.n	8001fe4 <motor_gpio_callback+0x90>
    } else if (GPIO_Pin == ENCODER_B_GPIO_Pin) {
 8001fae:	88fb      	ldrh	r3, [r7, #6]
 8001fb0:	2b40      	cmp	r3, #64	@ 0x40
 8001fb2:	d117      	bne.n	8001fe4 <motor_gpio_callback+0x90>
        if (b != last_b) {
 8001fb4:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <motor_gpio_callback+0xa4>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	7bba      	ldrb	r2, [r7, #14]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d011      	beq.n	8001fe4 <motor_gpio_callback+0x90>
            if (a == b) {
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	7bbb      	ldrb	r3, [r7, #14]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d105      	bne.n	8001fd4 <motor_gpio_callback+0x80>
                encoder_count--;
 8001fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <motor_gpio_callback+0xa0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	3b01      	subs	r3, #1
 8001fce:	4a09      	ldr	r2, [pc, #36]	@ (8001ff4 <motor_gpio_callback+0xa0>)
 8001fd0:	6013      	str	r3, [r2, #0]
 8001fd2:	e004      	b.n	8001fde <motor_gpio_callback+0x8a>
                encoder_count++;
 8001fd4:	4b07      	ldr	r3, [pc, #28]	@ (8001ff4 <motor_gpio_callback+0xa0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a06      	ldr	r2, [pc, #24]	@ (8001ff4 <motor_gpio_callback+0xa0>)
 8001fdc:	6013      	str	r3, [r2, #0]
            last_b = b;
 8001fde:	4a06      	ldr	r2, [pc, #24]	@ (8001ff8 <motor_gpio_callback+0xa4>)
 8001fe0:	7bbb      	ldrb	r3, [r7, #14]
 8001fe2:	7013      	strb	r3, [r2, #0]
}
 8001fe4:	bf00      	nop
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	20000178 	.word	0x20000178
 8001ff4:	20000170 	.word	0x20000170
 8001ff8:	20000179 	.word	0x20000179
 8001ffc:	00000000 	.word	0x00000000

08002000 <motor_timer_callback>:

void motor_timer_callback(TIM_HandleTypeDef *htim)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a1c      	ldr	r2, [pc, #112]	@ (8002080 <motor_timer_callback+0x80>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d12d      	bne.n	800206e <motor_timer_callback+0x6e>
		static int32_t last_encoder_count = 0;
		int32_t delta_count = encoder_count - last_encoder_count;
 8002012:	4b1c      	ldr	r3, [pc, #112]	@ (8002084 <motor_timer_callback+0x84>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4b1c      	ldr	r3, [pc, #112]	@ (8002088 <motor_timer_callback+0x88>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	60fb      	str	r3, [r7, #12]

		// Calculate motor speed in RPM
		motor_speed = (delta_count / (float)ENCODER_COUNTS_PER_REV) * 6000.0 * (1 / (float)ENCODER_QUADRATURE);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	ee07 3a90 	vmov	s15, r3
 8002024:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002028:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800208c <motor_timer_callback+0x8c>
 800202c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002030:	ee16 0a90 	vmov	r0, s13
 8002034:	f7fe fae0 	bl	80005f8 <__aeabi_f2d>
 8002038:	a30f      	add	r3, pc, #60	@ (adr r3, 8002078 <motor_timer_callback+0x78>)
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	f7fe fb33 	bl	80006a8 <__aeabi_dmul>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4610      	mov	r0, r2
 8002048:	4619      	mov	r1, r3
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	4b10      	ldr	r3, [pc, #64]	@ (8002090 <motor_timer_callback+0x90>)
 8002050:	f7fe fb2a 	bl	80006a8 <__aeabi_dmul>
 8002054:	4602      	mov	r2, r0
 8002056:	460b      	mov	r3, r1
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f7fe fdfc 	bl	8000c58 <__aeabi_d2f>
 8002060:	4603      	mov	r3, r0
 8002062:	4a0c      	ldr	r2, [pc, #48]	@ (8002094 <motor_timer_callback+0x94>)
 8002064:	6013      	str	r3, [r2, #0]

		// Update last encoder count for the next period
		last_encoder_count = encoder_count;
 8002066:	4b07      	ldr	r3, [pc, #28]	@ (8002084 <motor_timer_callback+0x84>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a07      	ldr	r2, [pc, #28]	@ (8002088 <motor_timer_callback+0x88>)
 800206c:	6013      	str	r3, [r2, #0]
	}
}
 800206e:	bf00      	nop
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	00000000 	.word	0x00000000
 800207c:	40b77000 	.word	0x40b77000
 8002080:	40001400 	.word	0x40001400
 8002084:	20000170 	.word	0x20000170
 8002088:	20001134 	.word	0x20001134
 800208c:	44f00000 	.word	0x44f00000
 8002090:	3fe00000 	.word	0x3fe00000
 8002094:	20000174 	.word	0x20000174

08002098 <motor_report_callback>:

void motor_report_callback(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
	// Check for min speed
	if(motor_speed < min_speed) {
 800209c:	4b16      	ldr	r3, [pc, #88]	@ (80020f8 <motor_report_callback+0x60>)
 800209e:	ed93 7a00 	vldr	s14, [r3]
 80020a2:	4b16      	ldr	r3, [pc, #88]	@ (80020fc <motor_report_callback+0x64>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b0:	d503      	bpl.n	80020ba <motor_report_callback+0x22>
		min_speed = motor_speed;
 80020b2:	4b11      	ldr	r3, [pc, #68]	@ (80020f8 <motor_report_callback+0x60>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a11      	ldr	r2, [pc, #68]	@ (80020fc <motor_report_callback+0x64>)
 80020b8:	6013      	str	r3, [r2, #0]
	}
	// Check for max speed
	if(motor_speed > max_speed) {
 80020ba:	4b0f      	ldr	r3, [pc, #60]	@ (80020f8 <motor_report_callback+0x60>)
 80020bc:	ed93 7a00 	vldr	s14, [r3]
 80020c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002100 <motor_report_callback+0x68>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ce:	dd03      	ble.n	80020d8 <motor_report_callback+0x40>
		max_speed = motor_speed;
 80020d0:	4b09      	ldr	r3, [pc, #36]	@ (80020f8 <motor_report_callback+0x60>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <motor_report_callback+0x68>)
 80020d6:	6013      	str	r3, [r2, #0]
	}
	// Update time window, add data to array
	speed_values[duration++] = motor_speed;
 80020d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <motor_report_callback+0x6c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	4909      	ldr	r1, [pc, #36]	@ (8002104 <motor_report_callback+0x6c>)
 80020e0:	600a      	str	r2, [r1, #0]
 80020e2:	4a05      	ldr	r2, [pc, #20]	@ (80020f8 <motor_report_callback+0x60>)
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	4908      	ldr	r1, [pc, #32]	@ (8002108 <motor_report_callback+0x70>)
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	440b      	add	r3, r1
 80020ec:	601a      	str	r2, [r3, #0]
	// Print current speed
	print_motor_speed();
 80020ee:	f000 f80d 	bl	800210c <print_motor_speed>
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000174 	.word	0x20000174
 80020fc:	2000003c 	.word	0x2000003c
 8002100:	20000184 	.word	0x20000184
 8002104:	20000188 	.word	0x20000188
 8002108:	20000194 	.word	0x20000194

0800210c <print_motor_speed>:
/****************************************************
 *  Private functions                               *
 ****************************************************/

void print_motor_speed(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b084      	sub	sp, #16
 8002110:	af02      	add	r7, sp, #8
	static char *speed = showspeed;

	// Separate float into two integers
//	int speed_i = (int)motor_speed;
//	int speed_d = (int)((motor_speed * 100) - (speed_i * 100));
	int speed_i = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
	int speed_d = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	603b      	str	r3, [r7, #0]
	split_float_into_ints(&speed_i, &speed_d, motor_speed);
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <print_motor_speed+0x58>)
 800211c:	edd3 7a00 	vldr	s15, [r3]
 8002120:	463a      	mov	r2, r7
 8002122:	1d3b      	adds	r3, r7, #4
 8002124:	eeb0 0a67 	vmov.f32	s0, s15
 8002128:	4611      	mov	r1, r2
 800212a:	4618      	mov	r0, r3
 800212c:	f000 f972 	bl	8002414 <split_float_into_ints>

	// Display speed in RPM
	sprintf((char*)showspeed, " [%03ds] Motor speed: %03d.%02d RPM\n", report_counter++, speed_i, speed_d);
 8002130:	4b0d      	ldr	r3, [pc, #52]	@ (8002168 <print_motor_speed+0x5c>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	1c53      	adds	r3, r2, #1
 8002136:	490c      	ldr	r1, [pc, #48]	@ (8002168 <print_motor_speed+0x5c>)
 8002138:	600b      	str	r3, [r1, #0]
 800213a:	6879      	ldr	r1, [r7, #4]
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	460b      	mov	r3, r1
 8002142:	490a      	ldr	r1, [pc, #40]	@ (800216c <print_motor_speed+0x60>)
 8002144:	480a      	ldr	r0, [pc, #40]	@ (8002170 <print_motor_speed+0x64>)
 8002146:	f00b fe2d 	bl	800dda4 <siprintf>
	xQueueSend(q_print, &speed, portMAX_DELAY);
 800214a:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <print_motor_speed+0x68>)
 800214c:	6818      	ldr	r0, [r3, #0]
 800214e:	2300      	movs	r3, #0
 8002150:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002154:	4908      	ldr	r1, [pc, #32]	@ (8002178 <print_motor_speed+0x6c>)
 8002156:	f006 fd7f 	bl	8008c58 <xQueueGenericSend>
}
 800215a:	bf00      	nop
 800215c:	3708      	adds	r7, #8
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000174 	.word	0x20000174
 8002168:	20000180 	.word	0x20000180
 800216c:	0800f0e8 	.word	0x0800f0e8
 8002170:	20001138 	.word	0x20001138
 8002174:	2000147c 	.word	0x2000147c
 8002178:	20000040 	.word	0x20000040

0800217c <initialize_parameters>:
{

}

void initialize_parameters(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
	report_counter = 0;
 8002180:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <initialize_parameters+0x38>)
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
	duration = 0;
 8002186:	4b0c      	ldr	r3, [pc, #48]	@ (80021b8 <initialize_parameters+0x3c>)
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
	min_speed = MIN_SPEED_INITIALIZATION;
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <initialize_parameters+0x40>)
 800218e:	4a0c      	ldr	r2, [pc, #48]	@ (80021c0 <initialize_parameters+0x44>)
 8002190:	601a      	str	r2, [r3, #0]
	max_speed = MAX_SPEED_INITIALIZATION;
 8002192:	4b0c      	ldr	r3, [pc, #48]	@ (80021c4 <initialize_parameters+0x48>)
 8002194:	f04f 0200 	mov.w	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
	average = 0;
 800219a:	4b0b      	ldr	r3, [pc, #44]	@ (80021c8 <initialize_parameters+0x4c>)
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
	standard_dev = 0;
 80021a2:	4b0a      	ldr	r3, [pc, #40]	@ (80021cc <initialize_parameters+0x50>)
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	601a      	str	r2, [r3, #0]
}
 80021aa:	bf00      	nop
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr
 80021b4:	20000180 	.word	0x20000180
 80021b8:	20000188 	.word	0x20000188
 80021bc:	2000003c 	.word	0x2000003c
 80021c0:	447a0000 	.word	0x447a0000
 80021c4:	20000184 	.word	0x20000184
 80021c8:	2000018c 	.word	0x2000018c
 80021cc:	20000190 	.word	0x20000190

080021d0 <print_summary_report>:

void print_summary_report(void)
{
 80021d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021d2:	b091      	sub	sp, #68	@ 0x44
 80021d4:	af06      	add	r7, sp, #24
	// Send statistics header message
	xQueueSend(q_print, &msg_stat_header, portMAX_DELAY);
 80021d6:	4b40      	ldr	r3, [pc, #256]	@ (80022d8 <print_summary_report+0x108>)
 80021d8:	6818      	ldr	r0, [r3, #0]
 80021da:	2300      	movs	r3, #0
 80021dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80021e0:	493e      	ldr	r1, [pc, #248]	@ (80022dc <print_summary_report+0x10c>)
 80021e2:	f006 fd39 	bl	8008c58 <xQueueGenericSend>

	// Calculate statistics
	calculate_average(speed_values, duration);
 80021e6:	4b3e      	ldr	r3, [pc, #248]	@ (80022e0 <print_summary_report+0x110>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4619      	mov	r1, r3
 80021ec:	483d      	ldr	r0, [pc, #244]	@ (80022e4 <print_summary_report+0x114>)
 80021ee:	f000 f88b 	bl	8002308 <calculate_average>
	calculate_sd(speed_values, duration);
 80021f2:	4b3b      	ldr	r3, [pc, #236]	@ (80022e0 <print_summary_report+0x110>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4619      	mov	r1, r3
 80021f8:	483a      	ldr	r0, [pc, #232]	@ (80022e4 <print_summary_report+0x114>)
 80021fa:	f000 f8b7 	bl	800236c <calculate_sd>

	// Convert floats into two integer values for display
	int min_speed_i = 0, min_speed_d = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	627b      	str	r3, [r7, #36]	@ 0x24
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
	int max_speed_i = 0, max_speed_d = 0;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
 800220a:	2300      	movs	r3, #0
 800220c:	61bb      	str	r3, [r7, #24]
	int average_i = 0, average_d = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
	int standard_dev_i = 0, standard_dev_d = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	2300      	movs	r3, #0
 800221c:	60bb      	str	r3, [r7, #8]
	split_float_into_ints(&min_speed_i, &min_speed_d, min_speed);
 800221e:	4b32      	ldr	r3, [pc, #200]	@ (80022e8 <print_summary_report+0x118>)
 8002220:	edd3 7a00 	vldr	s15, [r3]
 8002224:	f107 0220 	add.w	r2, r7, #32
 8002228:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800222c:	eeb0 0a67 	vmov.f32	s0, s15
 8002230:	4611      	mov	r1, r2
 8002232:	4618      	mov	r0, r3
 8002234:	f000 f8ee 	bl	8002414 <split_float_into_ints>
	split_float_into_ints(&max_speed_i, &max_speed_d, max_speed);
 8002238:	4b2c      	ldr	r3, [pc, #176]	@ (80022ec <print_summary_report+0x11c>)
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	f107 0218 	add.w	r2, r7, #24
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	eeb0 0a67 	vmov.f32	s0, s15
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f8e1 	bl	8002414 <split_float_into_ints>
	split_float_into_ints(&average_i, &average_d, average);
 8002252:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <print_summary_report+0x120>)
 8002254:	edd3 7a00 	vldr	s15, [r3]
 8002258:	f107 0210 	add.w	r2, r7, #16
 800225c:	f107 0314 	add.w	r3, r7, #20
 8002260:	eeb0 0a67 	vmov.f32	s0, s15
 8002264:	4611      	mov	r1, r2
 8002266:	4618      	mov	r0, r3
 8002268:	f000 f8d4 	bl	8002414 <split_float_into_ints>
	split_float_into_ints(&standard_dev_i, &standard_dev_d, standard_dev);
 800226c:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <print_summary_report+0x124>)
 800226e:	edd3 7a00 	vldr	s15, [r3]
 8002272:	f107 0208 	add.w	r2, r7, #8
 8002276:	f107 030c 	add.w	r3, r7, #12
 800227a:	eeb0 0a67 	vmov.f32	s0, s15
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f000 f8c7 	bl	8002414 <split_float_into_ints>

	// Print results
	static char showstats[250];
	static char *stats = showstats;
	sprintf((char*)showstats,   "* Min speed:          %03d.%02d RPM   *"
 8002286:	6a7e      	ldr	r6, [r7, #36]	@ 0x24
 8002288:	6a3b      	ldr	r3, [r7, #32]
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	6979      	ldr	r1, [r7, #20]
 8002292:	6938      	ldr	r0, [r7, #16]
 8002294:	68fc      	ldr	r4, [r7, #12]
 8002296:	68bd      	ldr	r5, [r7, #8]
 8002298:	9505      	str	r5, [sp, #20]
 800229a:	9404      	str	r4, [sp, #16]
 800229c:	9003      	str	r0, [sp, #12]
 800229e:	9102      	str	r1, [sp, #8]
 80022a0:	9201      	str	r2, [sp, #4]
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4632      	mov	r2, r6
 80022a8:	4913      	ldr	r1, [pc, #76]	@ (80022f8 <print_summary_report+0x128>)
 80022aa:	4814      	ldr	r0, [pc, #80]	@ (80022fc <print_summary_report+0x12c>)
 80022ac:	f00b fd7a 	bl	800dda4 <siprintf>
							  "\n* Max speed:          %03d.%02d RPM   *"
			                  "\n* Average speed:      %03d.%02d RPM   *"
			                  "\n* Standard deviation: %03d.%02d RPM   *\n",
							  min_speed_i, min_speed_d, max_speed_i, max_speed_d, average_i, average_d, standard_dev_i, standard_dev_d);
	xQueueSend(q_print, &stats, portMAX_DELAY);
 80022b0:	4b09      	ldr	r3, [pc, #36]	@ (80022d8 <print_summary_report+0x108>)
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	2300      	movs	r3, #0
 80022b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022ba:	4911      	ldr	r1, [pc, #68]	@ (8002300 <print_summary_report+0x130>)
 80022bc:	f006 fccc 	bl	8008c58 <xQueueGenericSend>

	// Send statistics footer message
	xQueueSend(q_print, &msg_stat_footer, portMAX_DELAY);
 80022c0:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <print_summary_report+0x108>)
 80022c2:	6818      	ldr	r0, [r3, #0]
 80022c4:	2300      	movs	r3, #0
 80022c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80022ca:	490e      	ldr	r1, [pc, #56]	@ (8002304 <print_summary_report+0x134>)
 80022cc:	f006 fcc4 	bl	8008c58 <xQueueGenericSend>
}
 80022d0:	bf00      	nop
 80022d2:	372c      	adds	r7, #44	@ 0x2c
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022d8:	2000147c 	.word	0x2000147c
 80022dc:	20000034 	.word	0x20000034
 80022e0:	20000188 	.word	0x20000188
 80022e4:	20000194 	.word	0x20000194
 80022e8:	2000003c 	.word	0x2000003c
 80022ec:	20000184 	.word	0x20000184
 80022f0:	2000018c 	.word	0x2000018c
 80022f4:	20000190 	.word	0x20000190
 80022f8:	0800f110 	.word	0x0800f110
 80022fc:	20001160 	.word	0x20001160
 8002300:	20000044 	.word	0x20000044
 8002304:	20000038 	.word	0x20000038

08002308 <calculate_average>:

void calculate_average(float data[], int len)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
	float sum = 0.0;
 8002312:	f04f 0300 	mov.w	r3, #0
 8002316:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < len; ++i) {
 8002318:	2300      	movs	r3, #0
 800231a:	60bb      	str	r3, [r7, #8]
 800231c:	e00e      	b.n	800233c <calculate_average+0x34>
		sum += data[i];
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	ed97 7a03 	vldr	s14, [r7, #12]
 800232e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002332:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int i = 0; i < len; ++i) {
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	3301      	adds	r3, #1
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	dbec      	blt.n	800231e <calculate_average+0x16>
	}
	average = sum / len;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800234e:	edd7 6a03 	vldr	s13, [r7, #12]
 8002352:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002356:	4b04      	ldr	r3, [pc, #16]	@ (8002368 <calculate_average+0x60>)
 8002358:	edc3 7a00 	vstr	s15, [r3]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	2000018c 	.word	0x2000018c

0800236c <calculate_sd>:

// Note: calculate_average must be run first
void calculate_sd(float data[], int len)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
	for(int i = 0; i < len; i++) {
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
 800237a:	e022      	b.n	80023c2 <calculate_sd+0x56>
		standard_dev += ( (data[i]-average) * (data[i]-average) );
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	4413      	add	r3, r2
 8002384:	ed93 7a00 	vldr	s14, [r3]
 8002388:	4b20      	ldr	r3, [pc, #128]	@ (800240c <calculate_sd+0xa0>)
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	edd3 6a00 	vldr	s13, [r3]
 800239e:	4b1b      	ldr	r3, [pc, #108]	@ (800240c <calculate_sd+0xa0>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80023a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ac:	4b18      	ldr	r3, [pc, #96]	@ (8002410 <calculate_sd+0xa4>)
 80023ae:	edd3 7a00 	vldr	s15, [r3]
 80023b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b6:	4b16      	ldr	r3, [pc, #88]	@ (8002410 <calculate_sd+0xa4>)
 80023b8:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < len; i++) {
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3301      	adds	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	dbd8      	blt.n	800237c <calculate_sd+0x10>
	}
	standard_dev = sqrt(standard_dev / len);
 80023ca:	4b11      	ldr	r3, [pc, #68]	@ (8002410 <calculate_sd+0xa4>)
 80023cc:	ed93 7a00 	vldr	s14, [r3]
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023de:	ee16 0a90 	vmov	r0, s13
 80023e2:	f7fe f909 	bl	80005f8 <__aeabi_f2d>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	ec43 2b10 	vmov	d0, r2, r3
 80023ee:	f00c f989 	bl	800e704 <sqrt>
 80023f2:	ec53 2b10 	vmov	r2, r3, d0
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7fe fc2d 	bl	8000c58 <__aeabi_d2f>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a03      	ldr	r2, [pc, #12]	@ (8002410 <calculate_sd+0xa4>)
 8002402:	6013      	str	r3, [r2, #0]
}
 8002404:	bf00      	nop
 8002406:	3710      	adds	r7, #16
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	2000018c 	.word	0x2000018c
 8002410:	20000190 	.word	0x20000190

08002414 <split_float_into_ints>:

void split_float_into_ints(int *int_val, int *dec_val, float float_val)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	ed87 0a01 	vstr	s0, [r7, #4]
	// Separate float into two integers
	*int_val = (int)float_val;
 8002422:	edd7 7a01 	vldr	s15, [r7, #4]
 8002426:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800242a:	ee17 2a90 	vmov	r2, s15
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	601a      	str	r2, [r3, #0]
	*dec_val = (int)((float_val * 100) - (*int_val * 100));
 8002432:	edd7 7a01 	vldr	s15, [r7, #4]
 8002436:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800246c <split_float_into_ints+0x58>
 800243a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2264      	movs	r2, #100	@ 0x64
 8002444:	fb02 f303 	mul.w	r3, r2, r3
 8002448:	ee07 3a90 	vmov	s15, r3
 800244c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002454:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002458:	ee17 2a90 	vmov	r2, s15
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	601a      	str	r2, [r3, #0]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	42c80000 	.word	0x42c80000

08002470 <rtc_task>:
 * @note There are multiple state machines handled here: the overall system state machine and the	   *
 *       RTC-specific state machine.																   *
 ******************************************************************************************************/

void rtc_task(void *param)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b088      	sub	sp, #32
 8002474:	af02      	add	r7, sp, #8
 8002476:	6078      	str	r0, [r7, #4]
	message_t *msg;

	while(1) {

		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002478:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800247c:	9300      	str	r3, [sp, #0]
 800247e:	2300      	movs	r3, #0
 8002480:	2200      	movs	r2, #0
 8002482:	2100      	movs	r1, #0
 8002484:	2000      	movs	r0, #0
 8002486:	f008 faeb 	bl	800aa60 <xTaskGenericNotifyWait>

		while(curr_sys_state != sMainMenu) {
 800248a:	e218      	b.n	80028be <rtc_task+0x44e>

			switch(curr_sys_state) {
 800248c:	4bb5      	ldr	r3, [pc, #724]	@ (8002764 <rtc_task+0x2f4>)
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b06      	cmp	r3, #6
 8002492:	f000 8132 	beq.w	80026fa <rtc_task+0x28a>
 8002496:	2b06      	cmp	r3, #6
 8002498:	f300 81fb 	bgt.w	8002892 <rtc_task+0x422>
 800249c:	2b03      	cmp	r3, #3
 800249e:	d003      	beq.n	80024a8 <rtc_task+0x38>
 80024a0:	2b05      	cmp	r3, #5
 80024a2:	f000 8089 	beq.w	80025b8 <rtc_task+0x148>
 80024a6:	e1f4      	b.n	8002892 <rtc_task+0x422>
				/***** RTC main menu state *****/
				case sRtcMenu:
					// Display RTC menu for the user, show current time and date
					xQueueSend(q_print, &msg_rtc_menu_1, portMAX_DELAY);
 80024a8:	4baf      	ldr	r3, [pc, #700]	@ (8002768 <rtc_task+0x2f8>)
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	2300      	movs	r3, #0
 80024ae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024b2:	49ae      	ldr	r1, [pc, #696]	@ (800276c <rtc_task+0x2fc>)
 80024b4:	f006 fbd0 	bl	8008c58 <xQueueGenericSend>
					show_time_date();
 80024b8:	f000 faa4 	bl	8002a04 <show_time_date>
					xQueueSend(q_print, &msg_rtc_menu_2, portMAX_DELAY);
 80024bc:	4baa      	ldr	r3, [pc, #680]	@ (8002768 <rtc_task+0x2f8>)
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024c6:	49aa      	ldr	r1, [pc, #680]	@ (8002770 <rtc_task+0x300>)
 80024c8:	f006 fbc6 	bl	8008c58 <xQueueGenericSend>

					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 80024cc:	f107 0308 	add.w	r3, r7, #8
 80024d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80024d4:	9200      	str	r2, [sp, #0]
 80024d6:	2200      	movs	r2, #0
 80024d8:	2100      	movs	r1, #0
 80024da:	2000      	movs	r0, #0
 80024dc:	f008 fac0 	bl	800aa60 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	617b      	str	r3, [r7, #20]

					// Process command, update date / time accordingly
					if(msg->len <= 4) {
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	2b04      	cmp	r3, #4
 80024ea:	d859      	bhi.n	80025a0 <rtc_task+0x130>
						if(!strcmp((char*)msg->payload, "Date")) {			// Configure date
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	49a1      	ldr	r1, [pc, #644]	@ (8002774 <rtc_task+0x304>)
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7fd feb7 	bl	8000264 <strcmp>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10b      	bne.n	8002514 <rtc_task+0xa4>
							// Update the system state
							curr_sys_state = sRtcDateConfig;
 80024fc:	4b99      	ldr	r3, [pc, #612]	@ (8002764 <rtc_task+0x2f4>)
 80024fe:	2205      	movs	r2, #5
 8002500:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 8002502:	4b99      	ldr	r3, [pc, #612]	@ (8002768 <rtc_task+0x2f8>)
 8002504:	6818      	ldr	r0, [r3, #0]
 8002506:	2300      	movs	r3, #0
 8002508:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800250c:	499a      	ldr	r1, [pc, #616]	@ (8002778 <rtc_task+0x308>)
 800250e:	f006 fba3 	bl	8008c58 <xQueueGenericSend>
					else {
						// If user input is longer than 4 characters, notify user of invalid response
						curr_sys_state = sMainMenu;
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
					}
					break;
 8002512:	e1d4      	b.n	80028be <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Time")) {	// Configure time
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	4999      	ldr	r1, [pc, #612]	@ (800277c <rtc_task+0x30c>)
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd fea3 	bl	8000264 <strcmp>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d10b      	bne.n	800253c <rtc_task+0xcc>
							curr_sys_state = sRtcTimeConfig;
 8002524:	4b8f      	ldr	r3, [pc, #572]	@ (8002764 <rtc_task+0x2f4>)
 8002526:	2206      	movs	r2, #6
 8002528:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 800252a:	4b8f      	ldr	r3, [pc, #572]	@ (8002768 <rtc_task+0x2f8>)
 800252c:	6818      	ldr	r0, [r3, #0]
 800252e:	2300      	movs	r3, #0
 8002530:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002534:	4992      	ldr	r1, [pc, #584]	@ (8002780 <rtc_task+0x310>)
 8002536:	f006 fb8f 	bl	8008c58 <xQueueGenericSend>
					break;
 800253a:	e1c0      	b.n	80028be <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Rfsh")) {	// Refresh the date and time
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	4991      	ldr	r1, [pc, #580]	@ (8002784 <rtc_task+0x314>)
 8002540:	4618      	mov	r0, r3
 8002542:	f7fd fe8f 	bl	8000264 <strcmp>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d103      	bne.n	8002554 <rtc_task+0xe4>
							curr_sys_state = sRtcMenu;
 800254c:	4b85      	ldr	r3, [pc, #532]	@ (8002764 <rtc_task+0x2f4>)
 800254e:	2203      	movs	r2, #3
 8002550:	701a      	strb	r2, [r3, #0]
					break;
 8002552:	e1b4      	b.n	80028be <rtc_task+0x44e>
						else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	498c      	ldr	r1, [pc, #560]	@ (8002788 <rtc_task+0x318>)
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd fe83 	bl	8000264 <strcmp>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d10a      	bne.n	800257a <rtc_task+0x10a>
							curr_sys_state = sMainMenu;
 8002564:	4b7f      	ldr	r3, [pc, #508]	@ (8002764 <rtc_task+0x2f4>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
							xSemaphoreGive(ledOffSemaphore);
 800256a:	4b88      	ldr	r3, [pc, #544]	@ (800278c <rtc_task+0x31c>)
 800256c:	6818      	ldr	r0, [r3, #0]
 800256e:	2300      	movs	r3, #0
 8002570:	2200      	movs	r2, #0
 8002572:	2100      	movs	r1, #0
 8002574:	f006 fb70 	bl	8008c58 <xQueueGenericSend>
					break;
 8002578:	e1a1      	b.n	80028be <rtc_task+0x44e>
							curr_sys_state = sMainMenu;
 800257a:	4b7a      	ldr	r3, [pc, #488]	@ (8002764 <rtc_task+0x2f4>)
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8002580:	4b79      	ldr	r3, [pc, #484]	@ (8002768 <rtc_task+0x2f8>)
 8002582:	6818      	ldr	r0, [r3, #0]
 8002584:	2300      	movs	r3, #0
 8002586:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800258a:	4981      	ldr	r1, [pc, #516]	@ (8002790 <rtc_task+0x320>)
 800258c:	f006 fb64 	bl	8008c58 <xQueueGenericSend>
							xSemaphoreGive(ledOffSemaphore);
 8002590:	4b7e      	ldr	r3, [pc, #504]	@ (800278c <rtc_task+0x31c>)
 8002592:	6818      	ldr	r0, [r3, #0]
 8002594:	2300      	movs	r3, #0
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	f006 fb5d 	bl	8008c58 <xQueueGenericSend>
					break;
 800259e:	e18e      	b.n	80028be <rtc_task+0x44e>
						curr_sys_state = sMainMenu;
 80025a0:	4b70      	ldr	r3, [pc, #448]	@ (8002764 <rtc_task+0x2f4>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 80025a6:	4b70      	ldr	r3, [pc, #448]	@ (8002768 <rtc_task+0x2f8>)
 80025a8:	6818      	ldr	r0, [r3, #0]
 80025aa:	2300      	movs	r3, #0
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025b0:	4977      	ldr	r1, [pc, #476]	@ (8002790 <rtc_task+0x320>)
 80025b2:	f006 fb51 	bl	8008c58 <xQueueGenericSend>
					break;
 80025b6:	e182      	b.n	80028be <rtc_task+0x44e>
				/***** RTC date configuration state *****/
				case sRtcDateConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 80025b8:	f107 0308 	add.w	r3, r7, #8
 80025bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80025c0:	9200      	str	r2, [sp, #0]
 80025c2:	2200      	movs	r2, #0
 80025c4:	2100      	movs	r1, #0
 80025c6:	2000      	movs	r0, #0
 80025c8:	f008 fa4a 	bl	800aa60 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	617b      	str	r3, [r7, #20]

					// Configure month, date, year, or day of week accordingly
					switch(curr_rtc_state) {
 80025d0:	4b70      	ldr	r3, [pc, #448]	@ (8002794 <rtc_task+0x324>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	f200 816f 	bhi.w	80028b8 <rtc_task+0x448>
 80025da:	a201      	add	r2, pc, #4	@ (adr r2, 80025e0 <rtc_task+0x170>)
 80025dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e0:	080025f1 	.word	0x080025f1
 80025e4:	08002621 	.word	0x08002621
 80025e8:	08002651 	.word	0x08002651
 80025ec:	08002681 	.word	0x08002681
						case MONTH_CONFIG:									// Month config
							uint8_t m = getnumber(msg->payload, msg->len);
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	4619      	mov	r1, r3
 80025f8:	4610      	mov	r0, r2
 80025fa:	f000 f985 	bl	8002908 <getnumber>
 80025fe:	4603      	mov	r3, r0
 8002600:	733b      	strb	r3, [r7, #12]
							date.Month = m;
 8002602:	4a65      	ldr	r2, [pc, #404]	@ (8002798 <rtc_task+0x328>)
 8002604:	7b3b      	ldrb	r3, [r7, #12]
 8002606:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = DATE_CONFIG;
 8002608:	4b62      	ldr	r3, [pc, #392]	@ (8002794 <rtc_task+0x324>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 800260e:	4b56      	ldr	r3, [pc, #344]	@ (8002768 <rtc_task+0x2f8>)
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	2300      	movs	r3, #0
 8002614:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002618:	4960      	ldr	r1, [pc, #384]	@ (800279c <rtc_task+0x32c>)
 800261a:	f006 fb1d 	bl	8008c58 <xQueueGenericSend>
							break;
 800261e:	e06b      	b.n	80026f8 <rtc_task+0x288>
						case DATE_CONFIG:									// Date config
							uint8_t d = getnumber(msg->payload, msg->len);
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	4619      	mov	r1, r3
 8002628:	4610      	mov	r0, r2
 800262a:	f000 f96d 	bl	8002908 <getnumber>
 800262e:	4603      	mov	r3, r0
 8002630:	737b      	strb	r3, [r7, #13]
							date.Date = d;
 8002632:	4a59      	ldr	r2, [pc, #356]	@ (8002798 <rtc_task+0x328>)
 8002634:	7b7b      	ldrb	r3, [r7, #13]
 8002636:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = YEAR_CONFIG;
 8002638:	4b56      	ldr	r3, [pc, #344]	@ (8002794 <rtc_task+0x324>)
 800263a:	2202      	movs	r2, #2
 800263c:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 800263e:	4b4a      	ldr	r3, [pc, #296]	@ (8002768 <rtc_task+0x2f8>)
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002648:	4955      	ldr	r1, [pc, #340]	@ (80027a0 <rtc_task+0x330>)
 800264a:	f006 fb05 	bl	8008c58 <xQueueGenericSend>
							break;
 800264e:	e053      	b.n	80026f8 <rtc_task+0x288>
						case YEAR_CONFIG:									// Year config
							uint8_t y = getnumber(msg->payload, msg->len);
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4619      	mov	r1, r3
 8002658:	4610      	mov	r0, r2
 800265a:	f000 f955 	bl	8002908 <getnumber>
 800265e:	4603      	mov	r3, r0
 8002660:	73bb      	strb	r3, [r7, #14]
							date.Year = y;
 8002662:	4a4d      	ldr	r2, [pc, #308]	@ (8002798 <rtc_task+0x328>)
 8002664:	7bbb      	ldrb	r3, [r7, #14]
 8002666:	70d3      	strb	r3, [r2, #3]
							curr_rtc_state = DAY_CONFIG;
 8002668:	4b4a      	ldr	r3, [pc, #296]	@ (8002794 <rtc_task+0x324>)
 800266a:	2203      	movs	r2, #3
 800266c:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 800266e:	4b3e      	ldr	r3, [pc, #248]	@ (8002768 <rtc_task+0x2f8>)
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	2300      	movs	r3, #0
 8002674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002678:	494a      	ldr	r1, [pc, #296]	@ (80027a4 <rtc_task+0x334>)
 800267a:	f006 faed 	bl	8008c58 <xQueueGenericSend>
							break;
 800267e:	e03b      	b.n	80026f8 <rtc_task+0x288>
						case DAY_CONFIG:									// Day of week config
							uint8_t day = getnumber(msg->payload, msg->len);
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f000 f93d 	bl	8002908 <getnumber>
 800268e:	4603      	mov	r3, r0
 8002690:	73fb      	strb	r3, [r7, #15]
							date.WeekDay = day;
 8002692:	4a41      	ldr	r2, [pc, #260]	@ (8002798 <rtc_task+0x328>)
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	7013      	strb	r3, [r2, #0]

							// Check that the user entered a valid date entry, configure date
							if(!validate_rtc_information(NULL, &date)) {
 8002698:	493f      	ldr	r1, [pc, #252]	@ (8002798 <rtc_task+0x328>)
 800269a:	2000      	movs	r0, #0
 800269c:	f000 f955 	bl	800294a <validate_rtc_information>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d112      	bne.n	80026cc <rtc_task+0x25c>
								rtc_configure_date(&date); // Configure date
 80026a6:	483c      	ldr	r0, [pc, #240]	@ (8002798 <rtc_task+0x328>)
 80026a8:	f000 f99c 	bl	80029e4 <rtc_configure_date>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY); // Send confirmation to print queue
 80026ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002768 <rtc_task+0x2f8>)
 80026ae:	6818      	ldr	r0, [r3, #0]
 80026b0:	2300      	movs	r3, #0
 80026b2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026b6:	493c      	ldr	r1, [pc, #240]	@ (80027a8 <rtc_task+0x338>)
 80026b8:	f006 face 	bl	8008c58 <xQueueGenericSend>
								xSemaphoreGive(rtcSemaphore); // Give rtcSemaphore for led_task to light LED
 80026bc:	4b3b      	ldr	r3, [pc, #236]	@ (80027ac <rtc_task+0x33c>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	2300      	movs	r3, #0
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	f006 fac7 	bl	8008c58 <xQueueGenericSend>
 80026ca:	e00e      	b.n	80026ea <rtc_task+0x27a>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 80026cc:	4b26      	ldr	r3, [pc, #152]	@ (8002768 <rtc_task+0x2f8>)
 80026ce:	6818      	ldr	r0, [r3, #0]
 80026d0:	2300      	movs	r3, #0
 80026d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80026d6:	492e      	ldr	r1, [pc, #184]	@ (8002790 <rtc_task+0x320>)
 80026d8:	f006 fabe 	bl	8008c58 <xQueueGenericSend>
								// Give semaphore for led_task to turn LEDs off
								xSemaphoreGive(ledOffSemaphore);
 80026dc:	4b2b      	ldr	r3, [pc, #172]	@ (800278c <rtc_task+0x31c>)
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	2300      	movs	r3, #0
 80026e2:	2200      	movs	r2, #0
 80026e4:	2100      	movs	r1, #0
 80026e6:	f006 fab7 	bl	8008c58 <xQueueGenericSend>
							}

							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 80026ea:	4b1e      	ldr	r3, [pc, #120]	@ (8002764 <rtc_task+0x2f4>)
 80026ec:	2203      	movs	r2, #3
 80026ee:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 80026f0:	4b28      	ldr	r3, [pc, #160]	@ (8002794 <rtc_task+0x324>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
							break;
 80026f6:	bf00      	nop
					}
					break;
 80026f8:	e0de      	b.n	80028b8 <rtc_task+0x448>
				/***** RTC time configuration state *****/
				case sRtcTimeConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 80026fa:	f107 0308 	add.w	r3, r7, #8
 80026fe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002702:	9200      	str	r2, [sp, #0]
 8002704:	2200      	movs	r2, #0
 8002706:	2100      	movs	r1, #0
 8002708:	2000      	movs	r0, #0
 800270a:	f008 f9a9 	bl	800aa60 <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	617b      	str	r3, [r7, #20]

					// Configure hours, minutes, or seconds accordingly
					switch(curr_rtc_state) {
 8002712:	4b20      	ldr	r3, [pc, #128]	@ (8002794 <rtc_task+0x324>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b03      	cmp	r3, #3
 8002718:	f200 80d0 	bhi.w	80028bc <rtc_task+0x44c>
 800271c:	a201      	add	r2, pc, #4	@ (adr r2, 8002724 <rtc_task+0x2b4>)
 800271e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002722:	bf00      	nop
 8002724:	08002735 	.word	0x08002735
 8002728:	080027b9 	.word	0x080027b9
 800272c:	080027e9 	.word	0x080027e9
 8002730:	08002819 	.word	0x08002819
						case HH_CONFIG:
							uint8_t hour = getnumber(msg->payload, msg->len);
 8002734:	697a      	ldr	r2, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	4619      	mov	r1, r3
 800273c:	4610      	mov	r0, r2
 800273e:	f000 f8e3 	bl	8002908 <getnumber>
 8002742:	4603      	mov	r3, r0
 8002744:	743b      	strb	r3, [r7, #16]
							time.Hours = hour;
 8002746:	4a1a      	ldr	r2, [pc, #104]	@ (80027b0 <rtc_task+0x340>)
 8002748:	7c3b      	ldrb	r3, [r7, #16]
 800274a:	7013      	strb	r3, [r2, #0]
							curr_rtc_state = MM_CONFIG;
 800274c:	4b11      	ldr	r3, [pc, #68]	@ (8002794 <rtc_task+0x324>)
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 8002752:	4b05      	ldr	r3, [pc, #20]	@ (8002768 <rtc_task+0x2f8>)
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	2300      	movs	r3, #0
 8002758:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800275c:	4915      	ldr	r1, [pc, #84]	@ (80027b4 <rtc_task+0x344>)
 800275e:	f006 fa7b 	bl	8008c58 <xQueueGenericSend>
							break;
 8002762:	e095      	b.n	8002890 <rtc_task+0x420>
 8002764:	200014a5 	.word	0x200014a5
 8002768:	2000147c 	.word	0x2000147c
 800276c:	20000070 	.word	0x20000070
 8002770:	20000074 	.word	0x20000074
 8002774:	0800f3d4 	.word	0x0800f3d4
 8002778:	20000060 	.word	0x20000060
 800277c:	0800f3dc 	.word	0x0800f3dc
 8002780:	20000050 	.word	0x20000050
 8002784:	0800f3e4 	.word	0x0800f3e4
 8002788:	0800f3ec 	.word	0x0800f3ec
 800278c:	200014a0 	.word	0x200014a0
 8002790:	20000048 	.word	0x20000048
 8002794:	2000125c 	.word	0x2000125c
 8002798:	20001274 	.word	0x20001274
 800279c:	20000064 	.word	0x20000064
 80027a0:	20000068 	.word	0x20000068
 80027a4:	2000006c 	.word	0x2000006c
 80027a8:	2000004c 	.word	0x2000004c
 80027ac:	2000149c 	.word	0x2000149c
 80027b0:	20001260 	.word	0x20001260
 80027b4:	20000054 	.word	0x20000054
						case MM_CONFIG:
							uint8_t min = getnumber(msg->payload, msg->len);
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	4619      	mov	r1, r3
 80027c0:	4610      	mov	r0, r2
 80027c2:	f000 f8a1 	bl	8002908 <getnumber>
 80027c6:	4603      	mov	r3, r0
 80027c8:	747b      	strb	r3, [r7, #17]
							time.Minutes = min;
 80027ca:	4a44      	ldr	r2, [pc, #272]	@ (80028dc <rtc_task+0x46c>)
 80027cc:	7c7b      	ldrb	r3, [r7, #17]
 80027ce:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = SS_CONFIG;
 80027d0:	4b43      	ldr	r3, [pc, #268]	@ (80028e0 <rtc_task+0x470>)
 80027d2:	2202      	movs	r2, #2
 80027d4:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 80027d6:	4b43      	ldr	r3, [pc, #268]	@ (80028e4 <rtc_task+0x474>)
 80027d8:	6818      	ldr	r0, [r3, #0]
 80027da:	2300      	movs	r3, #0
 80027dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027e0:	4941      	ldr	r1, [pc, #260]	@ (80028e8 <rtc_task+0x478>)
 80027e2:	f006 fa39 	bl	8008c58 <xQueueGenericSend>
							break;
 80027e6:	e053      	b.n	8002890 <rtc_task+0x420>
						case SS_CONFIG:
							uint8_t sec = getnumber(msg->payload, msg->len);
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	4619      	mov	r1, r3
 80027f0:	4610      	mov	r0, r2
 80027f2:	f000 f889 	bl	8002908 <getnumber>
 80027f6:	4603      	mov	r3, r0
 80027f8:	74bb      	strb	r3, [r7, #18]
							time.Seconds = sec;
 80027fa:	4a38      	ldr	r2, [pc, #224]	@ (80028dc <rtc_task+0x46c>)
 80027fc:	7cbb      	ldrb	r3, [r7, #18]
 80027fe:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = AMPM_CONFIG;
 8002800:	4b37      	ldr	r3, [pc, #220]	@ (80028e0 <rtc_task+0x470>)
 8002802:	2203      	movs	r2, #3
 8002804:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ampm, portMAX_DELAY);
 8002806:	4b37      	ldr	r3, [pc, #220]	@ (80028e4 <rtc_task+0x474>)
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	2300      	movs	r3, #0
 800280c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002810:	4936      	ldr	r1, [pc, #216]	@ (80028ec <rtc_task+0x47c>)
 8002812:	f006 fa21 	bl	8008c58 <xQueueGenericSend>
							break;
 8002816:	e03b      	b.n	8002890 <rtc_task+0x420>
						case AMPM_CONFIG:
							uint8_t opt = getnumber(msg->payload, msg->len);
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	4619      	mov	r1, r3
 8002820:	4610      	mov	r0, r2
 8002822:	f000 f871 	bl	8002908 <getnumber>
 8002826:	4603      	mov	r3, r0
 8002828:	74fb      	strb	r3, [r7, #19]
							time.TimeFormat = opt; // Note: 0 = RTC_HOURFORMAT12_AM, 1 = RTC_HOURFORMAT12_PM
 800282a:	4a2c      	ldr	r2, [pc, #176]	@ (80028dc <rtc_task+0x46c>)
 800282c:	7cfb      	ldrb	r3, [r7, #19]
 800282e:	70d3      	strb	r3, [r2, #3]
							
							// Check that the user entered a valid date entry, configure time
							if(!validate_rtc_information(&time, NULL)) {
 8002830:	2100      	movs	r1, #0
 8002832:	482a      	ldr	r0, [pc, #168]	@ (80028dc <rtc_task+0x46c>)
 8002834:	f000 f889 	bl	800294a <validate_rtc_information>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d112      	bne.n	8002864 <rtc_task+0x3f4>
								rtc_configure_time(&time); // Configure time
 800283e:	4827      	ldr	r0, [pc, #156]	@ (80028dc <rtc_task+0x46c>)
 8002840:	f000 f8ba 	bl	80029b8 <rtc_configure_time>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY); // Send confirmation to print queue
 8002844:	4b27      	ldr	r3, [pc, #156]	@ (80028e4 <rtc_task+0x474>)
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	2300      	movs	r3, #0
 800284a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800284e:	4928      	ldr	r1, [pc, #160]	@ (80028f0 <rtc_task+0x480>)
 8002850:	f006 fa02 	bl	8008c58 <xQueueGenericSend>
								xSemaphoreGive(rtcSemaphore); // Give rtcSemaphore for led_task to light LED
 8002854:	4b27      	ldr	r3, [pc, #156]	@ (80028f4 <rtc_task+0x484>)
 8002856:	6818      	ldr	r0, [r3, #0]
 8002858:	2300      	movs	r3, #0
 800285a:	2200      	movs	r2, #0
 800285c:	2100      	movs	r1, #0
 800285e:	f006 f9fb 	bl	8008c58 <xQueueGenericSend>
 8002862:	e00e      	b.n	8002882 <rtc_task+0x412>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8002864:	4b1f      	ldr	r3, [pc, #124]	@ (80028e4 <rtc_task+0x474>)
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	2300      	movs	r3, #0
 800286a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800286e:	4922      	ldr	r1, [pc, #136]	@ (80028f8 <rtc_task+0x488>)
 8002870:	f006 f9f2 	bl	8008c58 <xQueueGenericSend>
								// Give semaphore for led_task to turn LEDs off
								xSemaphoreGive(ledOffSemaphore);
 8002874:	4b21      	ldr	r3, [pc, #132]	@ (80028fc <rtc_task+0x48c>)
 8002876:	6818      	ldr	r0, [r3, #0]
 8002878:	2300      	movs	r3, #0
 800287a:	2200      	movs	r2, #0
 800287c:	2100      	movs	r1, #0
 800287e:	f006 f9eb 	bl	8008c58 <xQueueGenericSend>
							}
							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 8002882:	4b1f      	ldr	r3, [pc, #124]	@ (8002900 <rtc_task+0x490>)
 8002884:	2203      	movs	r2, #3
 8002886:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 8002888:	4b15      	ldr	r3, [pc, #84]	@ (80028e0 <rtc_task+0x470>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
							break;
 800288e:	bf00      	nop
					}
					break;
 8002890:	e014      	b.n	80028bc <rtc_task+0x44c>
				default:
					// Return control to the main menu task
					curr_sys_state = sMainMenu;
 8002892:	4b1b      	ldr	r3, [pc, #108]	@ (8002900 <rtc_task+0x490>)
 8002894:	2200      	movs	r2, #0
 8002896:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8002898:	4b12      	ldr	r3, [pc, #72]	@ (80028e4 <rtc_task+0x474>)
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	2300      	movs	r3, #0
 800289e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028a2:	4915      	ldr	r1, [pc, #84]	@ (80028f8 <rtc_task+0x488>)
 80028a4:	f006 f9d8 	bl	8008c58 <xQueueGenericSend>
					// Give semaphore for led_task to turn LEDs off
					xSemaphoreGive(ledOffSemaphore);
 80028a8:	4b14      	ldr	r3, [pc, #80]	@ (80028fc <rtc_task+0x48c>)
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	2300      	movs	r3, #0
 80028ae:	2200      	movs	r2, #0
 80028b0:	2100      	movs	r1, #0
 80028b2:	f006 f9d1 	bl	8008c58 <xQueueGenericSend>
					break;
 80028b6:	e002      	b.n	80028be <rtc_task+0x44e>
					break;
 80028b8:	bf00      	nop
 80028ba:	e000      	b.n	80028be <rtc_task+0x44e>
					break;
 80028bc:	bf00      	nop
		while(curr_sys_state != sMainMenu) {
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <rtc_task+0x490>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f47f ade2 	bne.w	800248c <rtc_task+0x1c>
			}

		} // while end

		// Notify the main menu task
		xTaskNotify(handle_main_menu_task, 0, eNoAction);
 80028c8:	4b0e      	ldr	r3, [pc, #56]	@ (8002904 <rtc_task+0x494>)
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	2300      	movs	r3, #0
 80028ce:	9300      	str	r3, [sp, #0]
 80028d0:	2300      	movs	r3, #0
 80028d2:	2200      	movs	r2, #0
 80028d4:	2100      	movs	r1, #0
 80028d6:	f008 f94d 	bl	800ab74 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80028da:	e5cd      	b.n	8002478 <rtc_task+0x8>
 80028dc:	20001260 	.word	0x20001260
 80028e0:	2000125c 	.word	0x2000125c
 80028e4:	2000147c 	.word	0x2000147c
 80028e8:	20000058 	.word	0x20000058
 80028ec:	2000005c 	.word	0x2000005c
 80028f0:	2000004c 	.word	0x2000004c
 80028f4:	2000149c 	.word	0x2000149c
 80028f8:	20000048 	.word	0x20000048
 80028fc:	200014a0 	.word	0x200014a0
 8002900:	200014a5 	.word	0x200014a5
 8002904:	20001460 	.word	0x20001460

08002908 <getnumber>:
 * @note This function assumes only one or two digits in the ASCII number. If there are more than	   *
 *       two digits, it will only convert the first two to a number.								   *
  ******************************************************************************************************/

uint8_t getnumber(uint8_t *p, int len)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
	return (len > 1) ? ( ((p[0]-48) * 10) + (p[1]-48) ) : (p[0]-48);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	dd0e      	ble.n	8002936 <getnumber+0x2e>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	461a      	mov	r2, r3
 800291e:	0092      	lsls	r2, r2, #2
 8002920:	4413      	add	r3, r2
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	b2da      	uxtb	r2, r3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	3301      	adds	r3, #1
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	4413      	add	r3, r2
 800292e:	b2db      	uxtb	r3, r3
 8002930:	3b10      	subs	r3, #16
 8002932:	b2db      	uxtb	r3, r3
 8002934:	e003      	b.n	800293e <getnumber+0x36>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	3b30      	subs	r3, #48	@ 0x30
 800293c:	b2db      	uxtb	r3, r3
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <validate_rtc_information>:
 *       - Year should be in the range 0-99 (assumption is 21st century).							   *
 *       - Month should be in the range 1-12.														   *
  ******************************************************************************************************/

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
	if(time) {
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d011      	beq.n	800297e <validate_rtc_information+0x34>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) || (time->TimeFormat > 1) )
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	2b0c      	cmp	r3, #12
 8002960:	d80b      	bhi.n	800297a <validate_rtc_information+0x30>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	785b      	ldrb	r3, [r3, #1]
 8002966:	2b3b      	cmp	r3, #59	@ 0x3b
 8002968:	d807      	bhi.n	800297a <validate_rtc_information+0x30>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	789b      	ldrb	r3, [r3, #2]
 800296e:	2b3b      	cmp	r3, #59	@ 0x3b
 8002970:	d803      	bhi.n	800297a <validate_rtc_information+0x30>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	78db      	ldrb	r3, [r3, #3]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d901      	bls.n	800297e <validate_rtc_information+0x34>
			return 1;
 800297a:	2301      	movs	r3, #1
 800297c:	e015      	b.n	80029aa <validate_rtc_information+0x60>
	}
	if(date) {
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d011      	beq.n	80029a8 <validate_rtc_information+0x5e>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	789b      	ldrb	r3, [r3, #2]
 8002988:	2b1f      	cmp	r3, #31
 800298a:	d80b      	bhi.n	80029a4 <validate_rtc_information+0x5a>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b07      	cmp	r3, #7
 8002992:	d807      	bhi.n	80029a4 <validate_rtc_information+0x5a>
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	78db      	ldrb	r3, [r3, #3]
 8002998:	2b63      	cmp	r3, #99	@ 0x63
 800299a:	d803      	bhi.n	80029a4 <validate_rtc_information+0x5a>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	785b      	ldrb	r3, [r3, #1]
 80029a0:	2b0c      	cmp	r3, #12
 80029a2:	d901      	bls.n	80029a8 <validate_rtc_information+0x5e>
			return 1;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <validate_rtc_information+0x60>
	}

	return 0;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
	...

080029b8 <rtc_configure_time>:
 * @note The DayLightSaving defaults to RTC_DAYLIGHTSAVING_NONE (disable daylight saving).			   *
 * @note The StoreOperation defaults to RTC_STOREOPERATION_RESET.									   *														   *
  ******************************************************************************************************/

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b082      	sub	sp, #8
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 80029cc:	2200      	movs	r2, #0
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4803      	ldr	r0, [pc, #12]	@ (80029e0 <rtc_configure_time+0x28>)
 80029d2:	f002 fcd2 	bl	800537a <HAL_RTC_SetTime>
}
 80029d6:	bf00      	nop
 80029d8:	3708      	adds	r7, #8
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	200012c8 	.word	0x200012c8

080029e4 <rtc_configure_date>:
 * 																									   *
 * @note This function uses the HAL library to set the RTC date in binary format (RTC_FORMAT_BIN). 	   *
  ******************************************************************************************************/

void rtc_configure_date(RTC_DateTypeDef *date)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 80029ec:	2200      	movs	r2, #0
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4803      	ldr	r0, [pc, #12]	@ (8002a00 <rtc_configure_date+0x1c>)
 80029f2:	f002 fdba 	bl	800556a <HAL_RTC_SetDate>
}
 80029f6:	bf00      	nop
 80029f8:	3708      	adds	r7, #8
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200012c8 	.word	0x200012c8

08002a04 <show_time_date>:
 * 		 format "day, month-date-year". 															   *
 * @note The function assumes the presence of a queue `q_print` to send the formatted strings.		   *
  ******************************************************************************************************/

void show_time_date(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08c      	sub	sp, #48	@ 0x30
 8002a08:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8002a0a:	f107 0314 	add.w	r3, r7, #20
 8002a0e:	2204      	movs	r2, #4
 8002a10:	2100      	movs	r1, #0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f00b f9f6 	bl	800de04 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8002a18:	463b      	mov	r3, r7
 8002a1a:	2214      	movs	r2, #20
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f00b f9f0 	bl	800de04 <memset>

	// Get the RTC current time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8002a24:	463b      	mov	r3, r7
 8002a26:	2200      	movs	r2, #0
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4837      	ldr	r0, [pc, #220]	@ (8002b08 <show_time_date+0x104>)
 8002a2c:	f002 fd3f 	bl	80054ae <HAL_RTC_GetTime>

	// Get the RTC current date
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	2200      	movs	r2, #0
 8002a36:	4619      	mov	r1, r3
 8002a38:	4833      	ldr	r0, [pc, #204]	@ (8002b08 <show_time_date+0x104>)
 8002a3a:	f002 fe1a 	bl	8005672 <HAL_RTC_GetDate>

	// Get AM / PM
	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8002a3e:	78fb      	ldrb	r3, [r7, #3]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <show_time_date+0x44>
 8002a44:	4b31      	ldr	r3, [pc, #196]	@ (8002b0c <show_time_date+0x108>)
 8002a46:	e000      	b.n	8002a4a <show_time_date+0x46>
 8002a48:	4b31      	ldr	r3, [pc, #196]	@ (8002b10 <show_time_date+0x10c>)
 8002a4a:	61bb      	str	r3, [r7, #24]

	// Display time format: hh:mm:ss [AM/PM]
	sprintf((char*)showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time & Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8002a4c:	783b      	ldrb	r3, [r7, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	787b      	ldrb	r3, [r7, #1]
 8002a52:	461a      	mov	r2, r3
 8002a54:	78bb      	ldrb	r3, [r7, #2]
 8002a56:	4619      	mov	r1, r3
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	9302      	str	r3, [sp, #8]
 8002a5c:	9101      	str	r1, [sp, #4]
 8002a5e:	9200      	str	r2, [sp, #0]
 8002a60:	4603      	mov	r3, r0
 8002a62:	4a2c      	ldr	r2, [pc, #176]	@ (8002b14 <show_time_date+0x110>)
 8002a64:	492c      	ldr	r1, [pc, #176]	@ (8002b18 <show_time_date+0x114>)
 8002a66:	482d      	ldr	r0, [pc, #180]	@ (8002b1c <show_time_date+0x118>)
 8002a68:	f00b f99c 	bl	800dda4 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 8002a6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002b20 <show_time_date+0x11c>)
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	2300      	movs	r3, #0
 8002a72:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a76:	492b      	ldr	r1, [pc, #172]	@ (8002b24 <show_time_date+0x120>)
 8002a78:	f006 f8ee 	bl	8008c58 <xQueueGenericSend>

	// Convert the user input day of the week from a number to a string
	switch(rtc_date.WeekDay) {
 8002a7c:	7d3b      	ldrb	r3, [r7, #20]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d826      	bhi.n	8002ad2 <show_time_date+0xce>
 8002a84:	a201      	add	r2, pc, #4	@ (adr r2, 8002a8c <show_time_date+0x88>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002aa9 	.word	0x08002aa9
 8002a90:	08002aaf 	.word	0x08002aaf
 8002a94:	08002ab5 	.word	0x08002ab5
 8002a98:	08002abb 	.word	0x08002abb
 8002a9c:	08002ac1 	.word	0x08002ac1
 8002aa0:	08002ac7 	.word	0x08002ac7
 8002aa4:	08002acd 	.word	0x08002acd
		case 1:
			weekday = "Sunday";
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b28 <show_time_date+0x124>)
 8002aaa:	61fb      	str	r3, [r7, #28]
			break;
 8002aac:	e011      	b.n	8002ad2 <show_time_date+0xce>
		case 2:
			weekday = "Monday";
 8002aae:	4b1f      	ldr	r3, [pc, #124]	@ (8002b2c <show_time_date+0x128>)
 8002ab0:	61fb      	str	r3, [r7, #28]
			break;
 8002ab2:	e00e      	b.n	8002ad2 <show_time_date+0xce>
		case 3:
			weekday = "Tuesday";
 8002ab4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b30 <show_time_date+0x12c>)
 8002ab6:	61fb      	str	r3, [r7, #28]
			break;
 8002ab8:	e00b      	b.n	8002ad2 <show_time_date+0xce>
		case 4:
			weekday = "Wednesday";
 8002aba:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <show_time_date+0x130>)
 8002abc:	61fb      	str	r3, [r7, #28]
			break;
 8002abe:	e008      	b.n	8002ad2 <show_time_date+0xce>
		case 5:
			weekday = "Thursday";
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b38 <show_time_date+0x134>)
 8002ac2:	61fb      	str	r3, [r7, #28]
			break;
 8002ac4:	e005      	b.n	8002ad2 <show_time_date+0xce>
		case 6:
			weekday = "Friday";
 8002ac6:	4b1d      	ldr	r3, [pc, #116]	@ (8002b3c <show_time_date+0x138>)
 8002ac8:	61fb      	str	r3, [r7, #28]
			break;
 8002aca:	e002      	b.n	8002ad2 <show_time_date+0xce>
		case 7:
			weekday = "Saturday";
 8002acc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b40 <show_time_date+0x13c>)
 8002ace:	61fb      	str	r3, [r7, #28]
			break;
 8002ad0:	bf00      	nop
	}
	
	// Display date format: day, month-date-year
	sprintf((char*)showdate, "\t%s, %02d-%02d-%02d\n", weekday, rtc_date.Month, rtc_date.Date, rtc_date.Year + 2000);
 8002ad2:	7d7b      	ldrb	r3, [r7, #21]
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	7dbb      	ldrb	r3, [r7, #22]
 8002ad8:	461a      	mov	r2, r3
 8002ada:	7dfb      	ldrb	r3, [r7, #23]
 8002adc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	9200      	str	r2, [sp, #0]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	69fa      	ldr	r2, [r7, #28]
 8002ae8:	4916      	ldr	r1, [pc, #88]	@ (8002b44 <show_time_date+0x140>)
 8002aea:	4817      	ldr	r0, [pc, #92]	@ (8002b48 <show_time_date+0x144>)
 8002aec:	f00b f95a 	bl	800dda4 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 8002af0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b20 <show_time_date+0x11c>)
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	2300      	movs	r3, #0
 8002af6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002afa:	4914      	ldr	r1, [pc, #80]	@ (8002b4c <show_time_date+0x148>)
 8002afc:	f006 f8ac 	bl	8008c58 <xQueueGenericSend>
}
 8002b00:	bf00      	nop
 8002b02:	3720      	adds	r7, #32
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	200012c8 	.word	0x200012c8
 8002b0c:	0800f3f4 	.word	0x0800f3f4
 8002b10:	0800f3f8 	.word	0x0800f3f8
 8002b14:	0800f3fc 	.word	0x0800f3fc
 8002b18:	0800f414 	.word	0x0800f414
 8002b1c:	20001278 	.word	0x20001278
 8002b20:	2000147c 	.word	0x2000147c
 8002b24:	20000078 	.word	0x20000078
 8002b28:	0800f42c 	.word	0x0800f42c
 8002b2c:	0800f434 	.word	0x0800f434
 8002b30:	0800f43c 	.word	0x0800f43c
 8002b34:	0800f444 	.word	0x0800f444
 8002b38:	0800f450 	.word	0x0800f450
 8002b3c:	0800f45c 	.word	0x0800f45c
 8002b40:	0800f464 	.word	0x0800f464
 8002b44:	0800f470 	.word	0x0800f470
 8002b48:	200012a0 	.word	0x200012a0
 8002b4c:	2000007c 	.word	0x2000007c

08002b50 <main_menu_task>:
 *       command is available.                                                                         *
 * @note The main menu is displayed, and the user input is processed. Invalid inputs are handled and   *
 * an error message is sent to the print queue.                                                        *
 ******************************************************************************************************/
void main_menu_task(void *param)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	6078      	str	r0, [r7, #4]
	int option;

	while(1) {

		// Present the main menu to the user
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 8002b58:	4b3c      	ldr	r3, [pc, #240]	@ (8002c4c <main_menu_task+0xfc>)
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b62:	493b      	ldr	r1, [pc, #236]	@ (8002c50 <main_menu_task+0x100>)
 8002b64:	f006 f878 	bl	8008c58 <xQueueGenericSend>

		// Wait for user to select a menu option
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002b70:	9200      	str	r2, [sp, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	2100      	movs	r1, #0
 8002b76:	2000      	movs	r0, #0
 8002b78:	f007 ff72 	bl	800aa60 <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	617b      	str	r3, [r7, #20]

		if(msg->len == 1) {
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d14e      	bne.n	8002c26 <main_menu_task+0xd6>
			// Get user option, convert from ASCII to number
			option = msg->payload[0] - 48;
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	3b30      	subs	r3, #48	@ 0x30
 8002b8e:	613b      	str	r3, [r7, #16]
			switch(option) {
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	d83e      	bhi.n	8002c14 <main_menu_task+0xc4>
 8002b96:	a201      	add	r2, pc, #4	@ (adr r2, 8002b9c <main_menu_task+0x4c>)
 8002b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b9c:	08002bad 	.word	0x08002bad
 8002ba0:	08002bc7 	.word	0x08002bc7
 8002ba4:	08002be1 	.word	0x08002be1
 8002ba8:	08002bfb 	.word	0x08002bfb
				case 0:
					// User selection: LED menu
					curr_sys_state = sLedMenu;
 8002bac:	4b29      	ldr	r3, [pc, #164]	@ (8002c54 <main_menu_task+0x104>)
 8002bae:	2201      	movs	r2, #1
 8002bb0:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 8002bb2:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <main_menu_task+0x108>)
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	9300      	str	r3, [sp, #0]
 8002bba:	2300      	movs	r3, #0
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	f007 ffd8 	bl	800ab74 <xTaskGenericNotify>
					break;
 8002bc4:	e038      	b.n	8002c38 <main_menu_task+0xe8>
				case 1:
					curr_sys_state = sRtcMenu;
 8002bc6:	4b23      	ldr	r3, [pc, #140]	@ (8002c54 <main_menu_task+0x104>)
 8002bc8:	2203      	movs	r2, #3
 8002bca:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 8002bcc:	4b23      	ldr	r3, [pc, #140]	@ (8002c5c <main_menu_task+0x10c>)
 8002bce:	6818      	ldr	r0, [r3, #0]
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2100      	movs	r1, #0
 8002bda:	f007 ffcb 	bl	800ab74 <xTaskGenericNotify>
					break;
 8002bde:	e02b      	b.n	8002c38 <main_menu_task+0xe8>
				case 2:
					curr_sys_state = sAccMenu;
 8002be0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c54 <main_menu_task+0x104>)
 8002be2:	2202      	movs	r2, #2
 8002be4:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_acc_task, 0, eNoAction);
 8002be6:	4b1e      	ldr	r3, [pc, #120]	@ (8002c60 <main_menu_task+0x110>)
 8002be8:	6818      	ldr	r0, [r3, #0]
 8002bea:	2300      	movs	r3, #0
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	f007 ffbe 	bl	800ab74 <xTaskGenericNotify>
					break;
 8002bf8:	e01e      	b.n	8002c38 <main_menu_task+0xe8>
				case 3:
					curr_sys_state = sMotorMenu;
 8002bfa:	4b16      	ldr	r3, [pc, #88]	@ (8002c54 <main_menu_task+0x104>)
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_motor_task, 0, eNoAction);
 8002c00:	4b18      	ldr	r3, [pc, #96]	@ (8002c64 <main_menu_task+0x114>)
 8002c02:	6818      	ldr	r0, [r3, #0]
 8002c04:	2300      	movs	r3, #0
 8002c06:	9300      	str	r3, [sp, #0]
 8002c08:	2300      	movs	r3, #0
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	f007 ffb1 	bl	800ab74 <xTaskGenericNotify>
					break;
 8002c12:	e011      	b.n	8002c38 <main_menu_task+0xe8>
				default:
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8002c14:	4b0d      	ldr	r3, [pc, #52]	@ (8002c4c <main_menu_task+0xfc>)
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	2300      	movs	r3, #0
 8002c1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c1e:	4912      	ldr	r1, [pc, #72]	@ (8002c68 <main_menu_task+0x118>)
 8002c20:	f006 f81a 	bl	8008c58 <xQueueGenericSend>
					continue;
 8002c24:	e011      	b.n	8002c4a <main_menu_task+0xfa>
			}
		}
		// Handle invalid entry
		else {
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 8002c26:	4b09      	ldr	r3, [pc, #36]	@ (8002c4c <main_menu_task+0xfc>)
 8002c28:	6818      	ldr	r0, [r3, #0]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002c30:	490d      	ldr	r1, [pc, #52]	@ (8002c68 <main_menu_task+0x118>)
 8002c32:	f006 f811 	bl	8008c58 <xQueueGenericSend>
			continue;
 8002c36:	e008      	b.n	8002c4a <main_menu_task+0xfa>
		}

		// Wait for notification from another task before running again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002c38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	2200      	movs	r2, #0
 8002c42:	2100      	movs	r1, #0
 8002c44:	2000      	movs	r0, #0
 8002c46:	f007 ff0b 	bl	800aa60 <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 8002c4a:	e785      	b.n	8002b58 <main_menu_task+0x8>
 8002c4c:	2000147c 	.word	0x2000147c
 8002c50:	20000084 	.word	0x20000084
 8002c54:	200014a5 	.word	0x200014a5
 8002c58:	2000146c 	.word	0x2000146c
 8002c5c:	20001470 	.word	0x20001470
 8002c60:	20001474 	.word	0x20001474
 8002c64:	20001478 	.word	0x20001478
 8002c68:	20000080 	.word	0x20000080

08002c6c <message_handler_task>:
 * @note The data queue (`q_data`) and print queue (`q_print`) must be initialized. The task must be   *
 *       notified when a new message is available.                                                     *
 * @note The processed message is sent to the print queue (`q_print`).                                 *
 ******************************************************************************************************/
void message_handler_task(void *param)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b08a      	sub	sp, #40	@ 0x28
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	6078      	str	r0, [r7, #4]
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002c74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c78:	9300      	str	r3, [sp, #0]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2100      	movs	r1, #0
 8002c80:	2000      	movs	r0, #0
 8002c82:	f007 feed 	bl	800aa60 <xTaskGenericNotifyWait>
 8002c86:	61f8      	str	r0, [r7, #28]

		if(pdTRUE == ret) {
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d1f2      	bne.n	8002c74 <message_handler_task+0x8>
			// Process the message stored in the input data queue
			process_message(&msg);
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	4618      	mov	r0, r3
 8002c94:	f000 f822 	bl	8002cdc <process_message>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002c98:	e7ec      	b.n	8002c74 <message_handler_task+0x8>
	...

08002c9c <print_task>:
 * @note This function is intended to run as a FreeRTOS task.                                          *
 * @note The print queue (`q_print`) must be initialized and contain messages to print.                *
 * @note The received message is transmitted via UART.                                                 *
 ******************************************************************************************************/
void print_task(void *param)
{
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8002ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd4 <print_task+0x38>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f107 010c 	add.w	r1, r7, #12
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f006 f9bd 	bl	8009030 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 8002cb6:	68fc      	ldr	r4, [r7, #12]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f7fd fadc 	bl	8000278 <strlen>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	b29a      	uxth	r2, r3
 8002cc4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cc8:	4621      	mov	r1, r4
 8002cca:	4803      	ldr	r0, [pc, #12]	@ (8002cd8 <print_task+0x3c>)
 8002ccc:	f004 fc7c 	bl	80075c8 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8002cd0:	bf00      	nop
 8002cd2:	e7e7      	b.n	8002ca4 <print_task+0x8>
 8002cd4:	2000147c 	.word	0x2000147c
 8002cd8:	20001418 	.word	0x20001418

08002cdc <process_message>:
 * @return void                                                                                        *
 *                                                                                                     *
 * @note This function is called by the `message_handler_task` when a notification is received.        *
 * @note The data queue (`q_data`) must be initialized and contain a message to process.               *
 ******************************************************************************************************/
void process_message(message_t *msg) {
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	6078      	str	r0, [r7, #4]

	extract_command(msg);
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 f859 	bl	8002d9c <extract_command>

	switch(curr_sys_state) {
 8002cea:	4b26      	ldr	r3, [pc, #152]	@ (8002d84 <process_message+0xa8>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b06      	cmp	r3, #6
 8002cf0:	d842      	bhi.n	8002d78 <process_message+0x9c>
 8002cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf8 <process_message+0x1c>)
 8002cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf8:	08002d15 	.word	0x08002d15
 8002cfc:	08002d29 	.word	0x08002d29
 8002d00:	08002d3d 	.word	0x08002d3d
 8002d04:	08002d65 	.word	0x08002d65
 8002d08:	08002d51 	.word	0x08002d51
 8002d0c:	08002d65 	.word	0x08002d65
 8002d10:	08002d65 	.word	0x08002d65
		case sMainMenu:
			// Notify the main menu task and pass the message
			xTaskNotify(handle_main_menu_task, (uint32_t)msg, eSetValueWithOverwrite);
 8002d14:	4b1c      	ldr	r3, [pc, #112]	@ (8002d88 <process_message+0xac>)
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	2303      	movs	r3, #3
 8002d20:	2100      	movs	r1, #0
 8002d22:	f007 ff27 	bl	800ab74 <xTaskGenericNotify>
			break;
 8002d26:	e028      	b.n	8002d7a <process_message+0x9e>
		case sLedMenu:
			// Notify the led task and pass the message
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
 8002d28:	4b18      	ldr	r3, [pc, #96]	@ (8002d8c <process_message+0xb0>)
 8002d2a:	6818      	ldr	r0, [r3, #0]
 8002d2c:	687a      	ldr	r2, [r7, #4]
 8002d2e:	2300      	movs	r3, #0
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	2303      	movs	r3, #3
 8002d34:	2100      	movs	r1, #0
 8002d36:	f007 ff1d 	bl	800ab74 <xTaskGenericNotify>
			break;
 8002d3a:	e01e      	b.n	8002d7a <process_message+0x9e>
		case sAccMenu:
			// Notify the ACC task and pass the message
			xTaskNotify(handle_acc_task, (uint32_t)msg, eSetValueWithOverwrite);
 8002d3c:	4b14      	ldr	r3, [pc, #80]	@ (8002d90 <process_message+0xb4>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	2300      	movs	r3, #0
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	2303      	movs	r3, #3
 8002d48:	2100      	movs	r1, #0
 8002d4a:	f007 ff13 	bl	800ab74 <xTaskGenericNotify>
			break;
 8002d4e:	e014      	b.n	8002d7a <process_message+0x9e>
		case sMotorMenu:
			// Notify the motor task and pass the message
			xTaskNotify(handle_motor_task, (uint32_t)msg, eSetValueWithOverwrite);
 8002d50:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <process_message+0xb8>)
 8002d52:	6818      	ldr	r0, [r3, #0]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	2300      	movs	r3, #0
 8002d58:	9300      	str	r3, [sp, #0]
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	f007 ff09 	bl	800ab74 <xTaskGenericNotify>
			break;
 8002d62:	e00a      	b.n	8002d7a <process_message+0x9e>
		case sRtcMenu:
		case sRtcTimeConfig:
		case sRtcDateConfig:
			// Notify the RTC task and pass the message
			xTaskNotify(handle_rtc_task, (uint32_t)msg, eSetValueWithOverwrite);
 8002d64:	4b0c      	ldr	r3, [pc, #48]	@ (8002d98 <process_message+0xbc>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2303      	movs	r3, #3
 8002d70:	2100      	movs	r1, #0
 8002d72:	f007 feff 	bl	800ab74 <xTaskGenericNotify>
			break;
 8002d76:	e000      	b.n	8002d7a <process_message+0x9e>
		default:
			break;
 8002d78:	bf00      	nop
	}
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200014a5 	.word	0x200014a5
 8002d88:	20001460 	.word	0x20001460
 8002d8c:	2000146c 	.word	0x2000146c
 8002d90:	20001474 	.word	0x20001474
 8002d94:	20001478 	.word	0x20001478
 8002d98:	20001470 	.word	0x20001470

08002d9c <extract_command>:
 * @note This function is called by `process_message` to parse the incoming command message.           *
 * @note The data queue (`q_data`) must be initialized and contain a message to extract.               *
 * @note The extracted command is stored in the `msg` structure, with its payload and length fields    *
 *       populated.                                                                                    *
 ******************************************************************************************************/
int extract_command(message_t *msg) {
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	// Check if there is data in the data queue
	status = uxQueueMessagesWaiting(q_data);
 8002da4:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <extract_command+0x70>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4618      	mov	r0, r3
 8002daa:	f006 fc45 	bl	8009638 <uxQueueMessagesWaiting>
 8002dae:	4603      	mov	r3, r0
 8002db0:	613b      	str	r3, [r7, #16]
	if(!status) {
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <extract_command+0x22>
		return -1;
 8002db8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dbc:	e022      	b.n	8002e04 <extract_command+0x68>
	}

	// If data is available in the data queue, load it to the msg payload
	uint8_t i=0;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 8002dc2:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <extract_command+0x70>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f107 010f 	add.w	r1, r7, #15
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f006 f92f 	bl	8009030 <xQueueReceive>
 8002dd2:	6138      	str	r0, [r7, #16]
		if(pdTRUE == status) {
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d106      	bne.n	8002de8 <extract_command+0x4c>
			msg->payload[i++] = item;
 8002dda:	7dfb      	ldrb	r3, [r7, #23]
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	75fa      	strb	r2, [r7, #23]
 8002de0:	461a      	mov	r2, r3
 8002de2:	7bf9      	ldrb	r1, [r7, #15]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\n');
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b0a      	cmp	r3, #10
 8002dec:	d1e9      	bne.n	8002dc2 <extract_command+0x26>

	// Set final character in message payload to null character
	msg->payload[i-1] = '\0';
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	2100      	movs	r1, #0
 8002df6:	54d1      	strb	r1, [r2, r3]
	// Save length of message without null character
	msg->len = i-1;
 8002df8:	7dfb      	ldrb	r3, [r7, #23]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	60da      	str	r2, [r3, #12]

	return 0;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	20001480 	.word	0x20001480

08002e10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b090      	sub	sp, #64	@ 0x40
 8002e14:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e16:	f001 f8cb 	bl	8003fb0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e1a:	f000 f9c3 	bl	80031a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e1e:	f000 fbe5 	bl	80035ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002e22:	f000 fbb9 	bl	8003598 <MX_USART2_UART_Init>
  MX_RTC_Init();
 8002e26:	f000 fa29 	bl	800327c <MX_RTC_Init>
  MX_SPI1_Init();
 8002e2a:	f000 fa4d 	bl	80032c8 <MX_SPI1_Init>
  MX_TIM3_Init();
 8002e2e:	f000 fb05 	bl	800343c <MX_TIM3_Init>
  MX_TIM1_Init();
 8002e32:	f000 fa7f 	bl	8003334 <MX_TIM1_Init>
  MX_TIM7_Init();
 8002e36:	f000 fb79 	bl	800352c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CYCCNT counter
  DWT_CTRL |= (1 << 0);
 8002e3a:	4b9d      	ldr	r3, [pc, #628]	@ (80030b0 <main+0x2a0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a9c      	ldr	r2, [pc, #624]	@ (80030b0 <main+0x2a0>)
 8002e40:	f043 0301 	orr.w	r3, r3, #1
 8002e44:	6013      	str	r3, [r2, #0]

  // Start SEGGER recording
  SEGGER_SYSVIEW_Conf();
 8002e46:	f009 f9b3 	bl	800c1b0 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8002e4a:	f00a f9d5 	bl	800d1f8 <SEGGER_SYSVIEW_Start>

  // Initialize the accelerometer
  accelerometer_init();
 8002e4e:	f7fe f9eb 	bl	8001228 <accelerometer_init>

  // Create main menu task and check that it was created successfully
  status = xTaskCreate(main_menu_task, "main_menu_task", 250, NULL, 2, &handle_main_menu_task);
 8002e52:	4b98      	ldr	r3, [pc, #608]	@ (80030b4 <main+0x2a4>)
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	2302      	movs	r3, #2
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	22fa      	movs	r2, #250	@ 0xfa
 8002e5e:	4996      	ldr	r1, [pc, #600]	@ (80030b8 <main+0x2a8>)
 8002e60:	4896      	ldr	r0, [pc, #600]	@ (80030bc <main+0x2ac>)
 8002e62:	f006 fdbd 	bl	80099e0 <xTaskCreate>
 8002e66:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002e68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d00b      	beq.n	8002e86 <main+0x76>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002e80:	bf00      	nop
 8002e82:	bf00      	nop
 8002e84:	e7fd      	b.n	8002e82 <main+0x72>

  // Create message handler task and check that it was created successfully
  status = xTaskCreate(message_handler_task, "msg_task", 250, NULL, 2, &handle_message_handler_task);
 8002e86:	4b8e      	ldr	r3, [pc, #568]	@ (80030c0 <main+0x2b0>)
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	22fa      	movs	r2, #250	@ 0xfa
 8002e92:	498c      	ldr	r1, [pc, #560]	@ (80030c4 <main+0x2b4>)
 8002e94:	488c      	ldr	r0, [pc, #560]	@ (80030c8 <main+0x2b8>)
 8002e96:	f006 fda3 	bl	80099e0 <xTaskCreate>
 8002e9a:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d00b      	beq.n	8002eba <main+0xaa>
        __asm volatile
 8002ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ea6:	f383 8811 	msr	BASEPRI, r3
 8002eaa:	f3bf 8f6f 	isb	sy
 8002eae:	f3bf 8f4f 	dsb	sy
 8002eb2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002eb4:	bf00      	nop
 8002eb6:	bf00      	nop
 8002eb8:	e7fd      	b.n	8002eb6 <main+0xa6>

  // Create print task and check that it was created successfully
  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8002eba:	4b84      	ldr	r3, [pc, #528]	@ (80030cc <main+0x2bc>)
 8002ebc:	9301      	str	r3, [sp, #4]
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	22fa      	movs	r2, #250	@ 0xfa
 8002ec6:	4982      	ldr	r1, [pc, #520]	@ (80030d0 <main+0x2c0>)
 8002ec8:	4882      	ldr	r0, [pc, #520]	@ (80030d4 <main+0x2c4>)
 8002eca:	f006 fd89 	bl	80099e0 <xTaskCreate>
 8002ece:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d00b      	beq.n	8002eee <main+0xde>
        __asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	e7fd      	b.n	8002eea <main+0xda>

  // Create LED task and check that it was created successfully
  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 8002eee:	4b7a      	ldr	r3, [pc, #488]	@ (80030d8 <main+0x2c8>)
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	2302      	movs	r3, #2
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	22fa      	movs	r2, #250	@ 0xfa
 8002efa:	4978      	ldr	r1, [pc, #480]	@ (80030dc <main+0x2cc>)
 8002efc:	4878      	ldr	r0, [pc, #480]	@ (80030e0 <main+0x2d0>)
 8002efe:	f006 fd6f 	bl	80099e0 <xTaskCreate>
 8002f02:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d00b      	beq.n	8002f22 <main+0x112>
        __asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	623b      	str	r3, [r7, #32]
    }
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	e7fd      	b.n	8002f1e <main+0x10e>

  // Create RTC task and check that it was created successfully
  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 8002f22:	4b70      	ldr	r3, [pc, #448]	@ (80030e4 <main+0x2d4>)
 8002f24:	9301      	str	r3, [sp, #4]
 8002f26:	2302      	movs	r3, #2
 8002f28:	9300      	str	r3, [sp, #0]
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	22fa      	movs	r2, #250	@ 0xfa
 8002f2e:	496e      	ldr	r1, [pc, #440]	@ (80030e8 <main+0x2d8>)
 8002f30:	486e      	ldr	r0, [pc, #440]	@ (80030ec <main+0x2dc>)
 8002f32:	f006 fd55 	bl	80099e0 <xTaskCreate>
 8002f36:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d00b      	beq.n	8002f56 <main+0x146>
        __asm volatile
 8002f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f42:	f383 8811 	msr	BASEPRI, r3
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	f3bf 8f4f 	dsb	sy
 8002f4e:	61fb      	str	r3, [r7, #28]
    }
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	e7fd      	b.n	8002f52 <main+0x142>

  // Create accelerometer task and check that it was created successfully
  status = xTaskCreate(acc_task, "accelerometer_task", 250, NULL, 2, &handle_acc_task);
 8002f56:	4b66      	ldr	r3, [pc, #408]	@ (80030f0 <main+0x2e0>)
 8002f58:	9301      	str	r3, [sp, #4]
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	22fa      	movs	r2, #250	@ 0xfa
 8002f62:	4964      	ldr	r1, [pc, #400]	@ (80030f4 <main+0x2e4>)
 8002f64:	4864      	ldr	r0, [pc, #400]	@ (80030f8 <main+0x2e8>)
 8002f66:	f006 fd3b 	bl	80099e0 <xTaskCreate>
 8002f6a:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d00b      	beq.n	8002f8a <main+0x17a>
        __asm volatile
 8002f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f76:	f383 8811 	msr	BASEPRI, r3
 8002f7a:	f3bf 8f6f 	isb	sy
 8002f7e:	f3bf 8f4f 	dsb	sy
 8002f82:	61bb      	str	r3, [r7, #24]
    }
 8002f84:	bf00      	nop
 8002f86:	bf00      	nop
 8002f88:	e7fd      	b.n	8002f86 <main+0x176>

  // Create motor task and check that it was created successfully
  status = xTaskCreate(motor_task, "motor_task", 250, NULL, 2, &handle_motor_task);
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80030fc <main+0x2ec>)
 8002f8c:	9301      	str	r3, [sp, #4]
 8002f8e:	2302      	movs	r3, #2
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	2300      	movs	r3, #0
 8002f94:	22fa      	movs	r2, #250	@ 0xfa
 8002f96:	495a      	ldr	r1, [pc, #360]	@ (8003100 <main+0x2f0>)
 8002f98:	485a      	ldr	r0, [pc, #360]	@ (8003104 <main+0x2f4>)
 8002f9a:	f006 fd21 	bl	80099e0 <xTaskCreate>
 8002f9e:	6338      	str	r0, [r7, #48]	@ 0x30
  configASSERT(pdPASS == status);
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d00b      	beq.n	8002fbe <main+0x1ae>
        __asm volatile
 8002fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002faa:	f383 8811 	msr	BASEPRI, r3
 8002fae:	f3bf 8f6f 	isb	sy
 8002fb2:	f3bf 8f4f 	dsb	sy
 8002fb6:	617b      	str	r3, [r7, #20]
    }
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	e7fd      	b.n	8002fba <main+0x1aa>

  // Create data queue and check that it was created successfully
  q_data = xQueueCreate(10, sizeof(char));
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	200a      	movs	r0, #10
 8002fc4:	f005 fdbc 	bl	8008b40 <xQueueGenericCreate>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	4a4f      	ldr	r2, [pc, #316]	@ (8003108 <main+0x2f8>)
 8002fcc:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_data);
 8002fce:	4b4e      	ldr	r3, [pc, #312]	@ (8003108 <main+0x2f8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10b      	bne.n	8002fee <main+0x1de>
        __asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	613b      	str	r3, [r7, #16]
    }
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	e7fd      	b.n	8002fea <main+0x1da>

  // Create print queue and check that it was created successfully
  q_print = xQueueCreate(10, sizeof(size_t));
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2104      	movs	r1, #4
 8002ff2:	200a      	movs	r0, #10
 8002ff4:	f005 fda4 	bl	8008b40 <xQueueGenericCreate>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	4a44      	ldr	r2, [pc, #272]	@ (800310c <main+0x2fc>)
 8002ffc:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_print);
 8002ffe:	4b43      	ldr	r3, [pc, #268]	@ (800310c <main+0x2fc>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10b      	bne.n	800301e <main+0x20e>
        __asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	60fb      	str	r3, [r7, #12]
    }
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	e7fd      	b.n	800301a <main+0x20a>

  // Create an event group to synchronize accelerometer readings and LED triggers
  ledEventGroup = xEventGroupCreate();
 800301e:	f005 fad9 	bl	80085d4 <xEventGroupCreate>
 8003022:	4603      	mov	r3, r0
 8003024:	4a3a      	ldr	r2, [pc, #232]	@ (8003110 <main+0x300>)
 8003026:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != ledEventGroup);
 8003028:	4b39      	ldr	r3, [pc, #228]	@ (8003110 <main+0x300>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10b      	bne.n	8003048 <main+0x238>
        __asm volatile
 8003030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003034:	f383 8811 	msr	BASEPRI, r3
 8003038:	f3bf 8f6f 	isb	sy
 800303c:	f3bf 8f4f 	dsb	sy
 8003040:	60bb      	str	r3, [r7, #8]
    }
 8003042:	bf00      	nop
 8003044:	bf00      	nop
 8003046:	e7fd      	b.n	8003044 <main+0x234>

  // Create a binary semaphore to synchronize RTC configuration and LED triggers
  rtcSemaphore = xSemaphoreCreateBinary();
 8003048:	2203      	movs	r2, #3
 800304a:	2100      	movs	r1, #0
 800304c:	2001      	movs	r0, #1
 800304e:	f005 fd77 	bl	8008b40 <xQueueGenericCreate>
 8003052:	4603      	mov	r3, r0
 8003054:	4a2f      	ldr	r2, [pc, #188]	@ (8003114 <main+0x304>)
 8003056:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != rtcSemaphore);
 8003058:	4b2e      	ldr	r3, [pc, #184]	@ (8003114 <main+0x304>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d10b      	bne.n	8003078 <main+0x268>
        __asm volatile
 8003060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	607b      	str	r3, [r7, #4]
    }
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	e7fd      	b.n	8003074 <main+0x264>

  // Create a binary semaphore to synchronize LEDs off after exiting RTC menu
  ledOffSemaphore = xSemaphoreCreateBinary();
 8003078:	2203      	movs	r2, #3
 800307a:	2100      	movs	r1, #0
 800307c:	2001      	movs	r0, #1
 800307e:	f005 fd5f 	bl	8008b40 <xQueueGenericCreate>
 8003082:	4603      	mov	r3, r0
 8003084:	4a24      	ldr	r2, [pc, #144]	@ (8003118 <main+0x308>)
 8003086:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != ledOffSemaphore);
 8003088:	4b23      	ldr	r3, [pc, #140]	@ (8003118 <main+0x308>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <main+0x298>
        __asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	603b      	str	r3, [r7, #0]
    }
 80030a2:	bf00      	nop
 80030a4:	bf00      	nop
 80030a6:	e7fd      	b.n	80030a4 <main+0x294>

  // Create software timers for LED effects
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 80030a8:	2300      	movs	r3, #0
 80030aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80030ac:	e047      	b.n	800313e <main+0x32e>
 80030ae:	bf00      	nop
 80030b0:	e0001000 	.word	0xe0001000
 80030b4:	20001460 	.word	0x20001460
 80030b8:	0800f5d4 	.word	0x0800f5d4
 80030bc:	08002b51 	.word	0x08002b51
 80030c0:	20001464 	.word	0x20001464
 80030c4:	0800f5e4 	.word	0x0800f5e4
 80030c8:	08002c6d 	.word	0x08002c6d
 80030cc:	20001468 	.word	0x20001468
 80030d0:	0800f5f0 	.word	0x0800f5f0
 80030d4:	08002c9d 	.word	0x08002c9d
 80030d8:	2000146c 	.word	0x2000146c
 80030dc:	0800f5fc 	.word	0x0800f5fc
 80030e0:	0800158d 	.word	0x0800158d
 80030e4:	20001470 	.word	0x20001470
 80030e8:	0800f608 	.word	0x0800f608
 80030ec:	08002471 	.word	0x08002471
 80030f0:	20001474 	.word	0x20001474
 80030f4:	0800f614 	.word	0x0800f614
 80030f8:	08000fe9 	.word	0x08000fe9
 80030fc:	20001478 	.word	0x20001478
 8003100:	0800f628 	.word	0x0800f628
 8003104:	08001d69 	.word	0x08001d69
 8003108:	20001480 	.word	0x20001480
 800310c:	2000147c 	.word	0x2000147c
 8003110:	20001498 	.word	0x20001498
 8003114:	2000149c 	.word	0x2000149c
 8003118:	200014a0 	.word	0x200014a0
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)i, led_callback);
 800311c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800311e:	4a17      	ldr	r2, [pc, #92]	@ (800317c <main+0x36c>)
 8003120:	9200      	str	r2, [sp, #0]
 8003122:	2201      	movs	r2, #1
 8003124:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8003128:	4815      	ldr	r0, [pc, #84]	@ (8003180 <main+0x370>)
 800312a:	f007 ffdf 	bl	800b0ec <xTimerCreate>
 800312e:	4602      	mov	r2, r0
 8003130:	4914      	ldr	r1, [pc, #80]	@ (8003184 <main+0x374>)
 8003132:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003134:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 8003138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800313a:	3301      	adds	r3, #1
 800313c:	637b      	str	r3, [r7, #52]	@ 0x34
 800313e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003140:	2b03      	cmp	r3, #3
 8003142:	ddeb      	ble.n	800311c <main+0x30c>
  }

  // Create software timer for reporting motor speed
  motor_report_timer = xTimerCreate("motor_report_timer", pdMS_TO_TICKS(1000), pdTRUE, NULL, (void*)motor_report_callback);
 8003144:	4b10      	ldr	r3, [pc, #64]	@ (8003188 <main+0x378>)
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	2300      	movs	r3, #0
 800314a:	2201      	movs	r2, #1
 800314c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003150:	480e      	ldr	r0, [pc, #56]	@ (800318c <main+0x37c>)
 8003152:	f007 ffcb 	bl	800b0ec <xTimerCreate>
 8003156:	4603      	mov	r3, r0
 8003158:	4a0d      	ldr	r2, [pc, #52]	@ (8003190 <main+0x380>)
 800315a:	6013      	str	r3, [r2, #0]

  // Start the timer interrupt for motor velocity calculation timer
  HAL_TIM_Base_Start_IT(&htim7);
 800315c:	480d      	ldr	r0, [pc, #52]	@ (8003194 <main+0x384>)
 800315e:	f003 f9bb 	bl	80064d8 <HAL_TIM_Base_Start_IT>

  // Prepare UART to receive a message
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8003162:	2201      	movs	r2, #1
 8003164:	490c      	ldr	r1, [pc, #48]	@ (8003198 <main+0x388>)
 8003166:	480d      	ldr	r0, [pc, #52]	@ (800319c <main+0x38c>)
 8003168:	f004 fab9 	bl	80076de <HAL_UART_Receive_IT>

  // Start PWM generation
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800316c:	2100      	movs	r1, #0
 800316e:	480c      	ldr	r0, [pc, #48]	@ (80031a0 <main+0x390>)
 8003170:	f003 fa72 	bl	8006658 <HAL_TIM_PWM_Start>

  // Start the kernel
  vTaskStartScheduler();
 8003174:	f006 fd98 	bl	8009ca8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003178:	bf00      	nop
 800317a:	e7fd      	b.n	8003178 <main+0x368>
 800317c:	08001a2d 	.word	0x08001a2d
 8003180:	0800f634 	.word	0x0800f634
 8003184:	20001484 	.word	0x20001484
 8003188:	08002099 	.word	0x08002099
 800318c:	0800f640 	.word	0x0800f640
 8003190:	20001494 	.word	0x20001494
 8003194:	200013d0 	.word	0x200013d0
 8003198:	200014a4 	.word	0x200014a4
 800319c:	20001418 	.word	0x20001418
 80031a0:	20001388 	.word	0x20001388

080031a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b094      	sub	sp, #80	@ 0x50
 80031a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031aa:	f107 0320 	add.w	r3, r7, #32
 80031ae:	2230      	movs	r2, #48	@ 0x30
 80031b0:	2100      	movs	r1, #0
 80031b2:	4618      	mov	r0, r3
 80031b4:	f00a fe26 	bl	800de04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031b8:	f107 030c 	add.w	r3, r7, #12
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	609a      	str	r2, [r3, #8]
 80031c4:	60da      	str	r2, [r3, #12]
 80031c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
 80031cc:	4b29      	ldr	r3, [pc, #164]	@ (8003274 <SystemClock_Config+0xd0>)
 80031ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d0:	4a28      	ldr	r2, [pc, #160]	@ (8003274 <SystemClock_Config+0xd0>)
 80031d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80031d8:	4b26      	ldr	r3, [pc, #152]	@ (8003274 <SystemClock_Config+0xd0>)
 80031da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031e4:	2300      	movs	r3, #0
 80031e6:	607b      	str	r3, [r7, #4]
 80031e8:	4b23      	ldr	r3, [pc, #140]	@ (8003278 <SystemClock_Config+0xd4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a22      	ldr	r2, [pc, #136]	@ (8003278 <SystemClock_Config+0xd4>)
 80031ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b20      	ldr	r3, [pc, #128]	@ (8003278 <SystemClock_Config+0xd4>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031fc:	607b      	str	r3, [r7, #4]
 80031fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8003200:	230a      	movs	r3, #10
 8003202:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003204:	2301      	movs	r3, #1
 8003206:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003208:	2310      	movs	r3, #16
 800320a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800320c:	2301      	movs	r3, #1
 800320e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003210:	2302      	movs	r3, #2
 8003212:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003214:	2300      	movs	r3, #0
 8003216:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003218:	2308      	movs	r3, #8
 800321a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 800321c:	2332      	movs	r3, #50	@ 0x32
 800321e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003220:	2304      	movs	r3, #4
 8003222:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003224:	2307      	movs	r3, #7
 8003226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003228:	f107 0320 	add.w	r3, r7, #32
 800322c:	4618      	mov	r0, r3
 800322e:	f001 fa75 	bl	800471c <HAL_RCC_OscConfig>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003238:	f000 fbd2 	bl	80039e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800323c:	230f      	movs	r3, #15
 800323e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003240:	2302      	movs	r3, #2
 8003242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003244:	2300      	movs	r3, #0
 8003246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003248:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800324c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800324e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003252:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003254:	f107 030c 	add.w	r3, r7, #12
 8003258:	2100      	movs	r1, #0
 800325a:	4618      	mov	r0, r3
 800325c:	f001 fcd6 	bl	8004c0c <HAL_RCC_ClockConfig>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003266:	f000 fbbb 	bl	80039e0 <Error_Handler>
  }
}
 800326a:	bf00      	nop
 800326c:	3750      	adds	r7, #80	@ 0x50
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40023800 	.word	0x40023800
 8003278:	40007000 	.word	0x40007000

0800327c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003280:	4b0f      	ldr	r3, [pc, #60]	@ (80032c0 <MX_RTC_Init+0x44>)
 8003282:	4a10      	ldr	r2, [pc, #64]	@ (80032c4 <MX_RTC_Init+0x48>)
 8003284:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8003286:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <MX_RTC_Init+0x44>)
 8003288:	2240      	movs	r2, #64	@ 0x40
 800328a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800328c:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <MX_RTC_Init+0x44>)
 800328e:	227f      	movs	r2, #127	@ 0x7f
 8003290:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003292:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <MX_RTC_Init+0x44>)
 8003294:	22ff      	movs	r2, #255	@ 0xff
 8003296:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003298:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <MX_RTC_Init+0x44>)
 800329a:	2200      	movs	r2, #0
 800329c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800329e:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <MX_RTC_Init+0x44>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <MX_RTC_Init+0x44>)
 80032a6:	2200      	movs	r2, #0
 80032a8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80032aa:	4805      	ldr	r0, [pc, #20]	@ (80032c0 <MX_RTC_Init+0x44>)
 80032ac:	f001 ffe2 	bl	8005274 <HAL_RTC_Init>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80032b6:	f000 fb93 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80032ba:	bf00      	nop
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	200012c8 	.word	0x200012c8
 80032c4:	40002800 	.word	0x40002800

080032c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80032cc:	4b17      	ldr	r3, [pc, #92]	@ (800332c <MX_SPI1_Init+0x64>)
 80032ce:	4a18      	ldr	r2, [pc, #96]	@ (8003330 <MX_SPI1_Init+0x68>)
 80032d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80032d2:	4b16      	ldr	r3, [pc, #88]	@ (800332c <MX_SPI1_Init+0x64>)
 80032d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80032d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80032da:	4b14      	ldr	r3, [pc, #80]	@ (800332c <MX_SPI1_Init+0x64>)
 80032dc:	2200      	movs	r2, #0
 80032de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80032e0:	4b12      	ldr	r3, [pc, #72]	@ (800332c <MX_SPI1_Init+0x64>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80032e6:	4b11      	ldr	r3, [pc, #68]	@ (800332c <MX_SPI1_Init+0x64>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80032ec:	4b0f      	ldr	r3, [pc, #60]	@ (800332c <MX_SPI1_Init+0x64>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80032f2:	4b0e      	ldr	r3, [pc, #56]	@ (800332c <MX_SPI1_Init+0x64>)
 80032f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032fa:	4b0c      	ldr	r3, [pc, #48]	@ (800332c <MX_SPI1_Init+0x64>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003300:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <MX_SPI1_Init+0x64>)
 8003302:	2200      	movs	r2, #0
 8003304:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003306:	4b09      	ldr	r3, [pc, #36]	@ (800332c <MX_SPI1_Init+0x64>)
 8003308:	2200      	movs	r2, #0
 800330a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800330c:	4b07      	ldr	r3, [pc, #28]	@ (800332c <MX_SPI1_Init+0x64>)
 800330e:	2200      	movs	r2, #0
 8003310:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003312:	4b06      	ldr	r3, [pc, #24]	@ (800332c <MX_SPI1_Init+0x64>)
 8003314:	220a      	movs	r2, #10
 8003316:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003318:	4804      	ldr	r0, [pc, #16]	@ (800332c <MX_SPI1_Init+0x64>)
 800331a:	f002 fab7 	bl	800588c <HAL_SPI_Init>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d001      	beq.n	8003328 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003324:	f000 fb5c 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003328:	bf00      	nop
 800332a:	bd80      	pop	{r7, pc}
 800332c:	200012e8 	.word	0x200012e8
 8003330:	40013000 	.word	0x40013000

08003334 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b092      	sub	sp, #72	@ 0x48
 8003338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800333a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003344:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003348:	2200      	movs	r2, #0
 800334a:	601a      	str	r2, [r3, #0]
 800334c:	605a      	str	r2, [r3, #4]
 800334e:	609a      	str	r2, [r3, #8]
 8003350:	60da      	str	r2, [r3, #12]
 8003352:	611a      	str	r2, [r3, #16]
 8003354:	615a      	str	r2, [r3, #20]
 8003356:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003358:	1d3b      	adds	r3, r7, #4
 800335a:	2220      	movs	r2, #32
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f00a fd50 	bl	800de04 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003364:	4b33      	ldr	r3, [pc, #204]	@ (8003434 <MX_TIM1_Init+0x100>)
 8003366:	4a34      	ldr	r2, [pc, #208]	@ (8003438 <MX_TIM1_Init+0x104>)
 8003368:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800336a:	4b32      	ldr	r3, [pc, #200]	@ (8003434 <MX_TIM1_Init+0x100>)
 800336c:	2200      	movs	r2, #0
 800336e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003370:	4b30      	ldr	r3, [pc, #192]	@ (8003434 <MX_TIM1_Init+0x100>)
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003376:	4b2f      	ldr	r3, [pc, #188]	@ (8003434 <MX_TIM1_Init+0x100>)
 8003378:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800337c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800337e:	4b2d      	ldr	r3, [pc, #180]	@ (8003434 <MX_TIM1_Init+0x100>)
 8003380:	2200      	movs	r2, #0
 8003382:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003384:	4b2b      	ldr	r3, [pc, #172]	@ (8003434 <MX_TIM1_Init+0x100>)
 8003386:	2200      	movs	r2, #0
 8003388:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800338a:	4b2a      	ldr	r3, [pc, #168]	@ (8003434 <MX_TIM1_Init+0x100>)
 800338c:	2200      	movs	r2, #0
 800338e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003390:	4828      	ldr	r0, [pc, #160]	@ (8003434 <MX_TIM1_Init+0x100>)
 8003392:	f003 f911 	bl	80065b8 <HAL_TIM_PWM_Init>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d001      	beq.n	80033a0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800339c:	f000 fb20 	bl	80039e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a0:	2300      	movs	r3, #0
 80033a2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033a8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80033ac:	4619      	mov	r1, r3
 80033ae:	4821      	ldr	r0, [pc, #132]	@ (8003434 <MX_TIM1_Init+0x100>)
 80033b0:	f003 ffd8 	bl	8007364 <HAL_TIMEx_MasterConfigSynchronization>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80033ba:	f000 fb11 	bl	80039e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033be:	2360      	movs	r3, #96	@ 0x60
 80033c0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033c6:	2300      	movs	r3, #0
 80033c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033ca:	2300      	movs	r3, #0
 80033cc:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033ce:	2300      	movs	r3, #0
 80033d0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033d2:	2300      	movs	r3, #0
 80033d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033d6:	2300      	movs	r3, #0
 80033d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80033da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033de:	2200      	movs	r2, #0
 80033e0:	4619      	mov	r1, r3
 80033e2:	4814      	ldr	r0, [pc, #80]	@ (8003434 <MX_TIM1_Init+0x100>)
 80033e4:	f003 faf0 	bl	80069c8 <HAL_TIM_PWM_ConfigChannel>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d001      	beq.n	80033f2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80033ee:	f000 faf7 	bl	80039e0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003406:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800340a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800340c:	2300      	movs	r3, #0
 800340e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003410:	1d3b      	adds	r3, r7, #4
 8003412:	4619      	mov	r1, r3
 8003414:	4807      	ldr	r0, [pc, #28]	@ (8003434 <MX_TIM1_Init+0x100>)
 8003416:	f004 f821 	bl	800745c <HAL_TIMEx_ConfigBreakDeadTime>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8003420:	f000 fade 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003424:	4803      	ldr	r0, [pc, #12]	@ (8003434 <MX_TIM1_Init+0x100>)
 8003426:	f000 fbdb 	bl	8003be0 <HAL_TIM_MspPostInit>

}
 800342a:	bf00      	nop
 800342c:	3748      	adds	r7, #72	@ 0x48
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	20001340 	.word	0x20001340
 8003438:	40010000 	.word	0x40010000

0800343c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08e      	sub	sp, #56	@ 0x38
 8003440:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003442:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003446:	2200      	movs	r2, #0
 8003448:	601a      	str	r2, [r3, #0]
 800344a:	605a      	str	r2, [r3, #4]
 800344c:	609a      	str	r2, [r3, #8]
 800344e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003450:	f107 0320 	add.w	r3, r7, #32
 8003454:	2200      	movs	r2, #0
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800345a:	1d3b      	adds	r3, r7, #4
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
 8003468:	615a      	str	r2, [r3, #20]
 800346a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800346c:	4b2d      	ldr	r3, [pc, #180]	@ (8003524 <MX_TIM3_Init+0xe8>)
 800346e:	4a2e      	ldr	r2, [pc, #184]	@ (8003528 <MX_TIM3_Init+0xec>)
 8003470:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 24;
 8003472:	4b2c      	ldr	r3, [pc, #176]	@ (8003524 <MX_TIM3_Init+0xe8>)
 8003474:	2218      	movs	r2, #24
 8003476:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003478:	4b2a      	ldr	r3, [pc, #168]	@ (8003524 <MX_TIM3_Init+0xe8>)
 800347a:	2200      	movs	r2, #0
 800347c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800347e:	4b29      	ldr	r3, [pc, #164]	@ (8003524 <MX_TIM3_Init+0xe8>)
 8003480:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003484:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003486:	4b27      	ldr	r3, [pc, #156]	@ (8003524 <MX_TIM3_Init+0xe8>)
 8003488:	2200      	movs	r2, #0
 800348a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800348c:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <MX_TIM3_Init+0xe8>)
 800348e:	2280      	movs	r2, #128	@ 0x80
 8003490:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003492:	4824      	ldr	r0, [pc, #144]	@ (8003524 <MX_TIM3_Init+0xe8>)
 8003494:	f002 ffd0 	bl	8006438 <HAL_TIM_Base_Init>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800349e:	f000 fa9f 	bl	80039e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80034a8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80034ac:	4619      	mov	r1, r3
 80034ae:	481d      	ldr	r0, [pc, #116]	@ (8003524 <MX_TIM3_Init+0xe8>)
 80034b0:	f003 fb4c 	bl	8006b4c <HAL_TIM_ConfigClockSource>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80034ba:	f000 fa91 	bl	80039e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80034be:	4819      	ldr	r0, [pc, #100]	@ (8003524 <MX_TIM3_Init+0xe8>)
 80034c0:	f003 f87a 	bl	80065b8 <HAL_TIM_PWM_Init>
 80034c4:	4603      	mov	r3, r0
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d001      	beq.n	80034ce <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80034ca:	f000 fa89 	bl	80039e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ce:	2300      	movs	r3, #0
 80034d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034d2:	2300      	movs	r3, #0
 80034d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80034d6:	f107 0320 	add.w	r3, r7, #32
 80034da:	4619      	mov	r1, r3
 80034dc:	4811      	ldr	r0, [pc, #68]	@ (8003524 <MX_TIM3_Init+0xe8>)
 80034de:	f003 ff41 	bl	8007364 <HAL_TIMEx_MasterConfigSynchronization>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d001      	beq.n	80034ec <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80034e8:	f000 fa7a 	bl	80039e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034ec:	2360      	movs	r3, #96	@ 0x60
 80034ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 499;
 80034f0:	f240 13f3 	movw	r3, #499	@ 0x1f3
 80034f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034f6:	2300      	movs	r3, #0
 80034f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034fa:	2300      	movs	r3, #0
 80034fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034fe:	1d3b      	adds	r3, r7, #4
 8003500:	2200      	movs	r2, #0
 8003502:	4619      	mov	r1, r3
 8003504:	4807      	ldr	r0, [pc, #28]	@ (8003524 <MX_TIM3_Init+0xe8>)
 8003506:	f003 fa5f 	bl	80069c8 <HAL_TIM_PWM_ConfigChannel>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8003510:	f000 fa66 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003514:	4803      	ldr	r0, [pc, #12]	@ (8003524 <MX_TIM3_Init+0xe8>)
 8003516:	f000 fb63 	bl	8003be0 <HAL_TIM_MspPostInit>

}
 800351a:	bf00      	nop
 800351c:	3738      	adds	r7, #56	@ 0x38
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20001388 	.word	0x20001388
 8003528:	40000400 	.word	0x40000400

0800352c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003532:	463b      	mov	r3, r7
 8003534:	2200      	movs	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800353a:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <MX_TIM7_Init+0x64>)
 800353c:	4a15      	ldr	r2, [pc, #84]	@ (8003594 <MX_TIM7_Init+0x68>)
 800353e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2499;
 8003540:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <MX_TIM7_Init+0x64>)
 8003542:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8003546:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003548:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <MX_TIM7_Init+0x64>)
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 800354e:	4b10      	ldr	r3, [pc, #64]	@ (8003590 <MX_TIM7_Init+0x64>)
 8003550:	2263      	movs	r2, #99	@ 0x63
 8003552:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003554:	4b0e      	ldr	r3, [pc, #56]	@ (8003590 <MX_TIM7_Init+0x64>)
 8003556:	2200      	movs	r2, #0
 8003558:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800355a:	480d      	ldr	r0, [pc, #52]	@ (8003590 <MX_TIM7_Init+0x64>)
 800355c:	f002 ff6c 	bl	8006438 <HAL_TIM_Base_Init>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8003566:	f000 fa3b 	bl	80039e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800356a:	2300      	movs	r3, #0
 800356c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800356e:	2300      	movs	r3, #0
 8003570:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003572:	463b      	mov	r3, r7
 8003574:	4619      	mov	r1, r3
 8003576:	4806      	ldr	r0, [pc, #24]	@ (8003590 <MX_TIM7_Init+0x64>)
 8003578:	f003 fef4 	bl	8007364 <HAL_TIMEx_MasterConfigSynchronization>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8003582:	f000 fa2d 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	200013d0 	.word	0x200013d0
 8003594:	40001400 	.word	0x40001400

08003598 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800359c:	4b11      	ldr	r3, [pc, #68]	@ (80035e4 <MX_USART2_UART_Init+0x4c>)
 800359e:	4a12      	ldr	r2, [pc, #72]	@ (80035e8 <MX_USART2_UART_Init+0x50>)
 80035a0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80035a2:	4b10      	ldr	r3, [pc, #64]	@ (80035e4 <MX_USART2_UART_Init+0x4c>)
 80035a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80035a8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80035aa:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <MX_USART2_UART_Init+0x4c>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80035b0:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <MX_USART2_UART_Init+0x4c>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80035b6:	4b0b      	ldr	r3, [pc, #44]	@ (80035e4 <MX_USART2_UART_Init+0x4c>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80035bc:	4b09      	ldr	r3, [pc, #36]	@ (80035e4 <MX_USART2_UART_Init+0x4c>)
 80035be:	220c      	movs	r2, #12
 80035c0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035c2:	4b08      	ldr	r3, [pc, #32]	@ (80035e4 <MX_USART2_UART_Init+0x4c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80035c8:	4b06      	ldr	r3, [pc, #24]	@ (80035e4 <MX_USART2_UART_Init+0x4c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80035ce:	4805      	ldr	r0, [pc, #20]	@ (80035e4 <MX_USART2_UART_Init+0x4c>)
 80035d0:	f003 ffaa 	bl	8007528 <HAL_UART_Init>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80035da:	f000 fa01 	bl	80039e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80035de:	bf00      	nop
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	20001418 	.word	0x20001418
 80035e8:	40004400 	.word	0x40004400

080035ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08c      	sub	sp, #48	@ 0x30
 80035f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f2:	f107 031c 	add.w	r3, r7, #28
 80035f6:	2200      	movs	r2, #0
 80035f8:	601a      	str	r2, [r3, #0]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	609a      	str	r2, [r3, #8]
 80035fe:	60da      	str	r2, [r3, #12]
 8003600:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003602:	2300      	movs	r3, #0
 8003604:	61bb      	str	r3, [r7, #24]
 8003606:	4bac      	ldr	r3, [pc, #688]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360a:	4aab      	ldr	r2, [pc, #684]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 800360c:	f043 0310 	orr.w	r3, r3, #16
 8003610:	6313      	str	r3, [r2, #48]	@ 0x30
 8003612:	4ba9      	ldr	r3, [pc, #676]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	4ba5      	ldr	r3, [pc, #660]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003626:	4aa4      	ldr	r2, [pc, #656]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003628:	f043 0304 	orr.w	r3, r3, #4
 800362c:	6313      	str	r3, [r2, #48]	@ 0x30
 800362e:	4ba2      	ldr	r3, [pc, #648]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	613b      	str	r3, [r7, #16]
 800363e:	4b9e      	ldr	r3, [pc, #632]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003642:	4a9d      	ldr	r2, [pc, #628]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003644:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003648:	6313      	str	r3, [r2, #48]	@ 0x30
 800364a:	4b9b      	ldr	r3, [pc, #620]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b97      	ldr	r3, [pc, #604]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365e:	4a96      	ldr	r2, [pc, #600]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003660:	f043 0301 	orr.w	r3, r3, #1
 8003664:	6313      	str	r3, [r2, #48]	@ 0x30
 8003666:	4b94      	ldr	r3, [pc, #592]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	4b90      	ldr	r3, [pc, #576]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367a:	4a8f      	ldr	r2, [pc, #572]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	6313      	str	r3, [r2, #48]	@ 0x30
 8003682:	4b8d      	ldr	r3, [pc, #564]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	607b      	str	r3, [r7, #4]
 8003692:	4b89      	ldr	r3, [pc, #548]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003696:	4a88      	ldr	r2, [pc, #544]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 8003698:	f043 0308 	orr.w	r3, r3, #8
 800369c:	6313      	str	r3, [r2, #48]	@ 0x30
 800369e:	4b86      	ldr	r3, [pc, #536]	@ (80038b8 <MX_GPIO_Init+0x2cc>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80036aa:	2200      	movs	r2, #0
 80036ac:	2108      	movs	r1, #8
 80036ae:	4883      	ldr	r0, [pc, #524]	@ (80038bc <MX_GPIO_Init+0x2d0>)
 80036b0:	f000 ffe8 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80036b4:	2201      	movs	r2, #1
 80036b6:	2101      	movs	r1, #1
 80036b8:	4881      	ldr	r0, [pc, #516]	@ (80038c0 <MX_GPIO_Init+0x2d4>)
 80036ba:	f000 ffe3 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80036be:	2200      	movs	r2, #0
 80036c0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80036c4:	487f      	ldr	r0, [pc, #508]	@ (80038c4 <MX_GPIO_Init+0x2d8>)
 80036c6:	f000 ffdd 	bl	8004684 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MOTOR_IN1_Pin|MOTOR_IN2_Pin, GPIO_PIN_RESET);
 80036ca:	2200      	movs	r2, #0
 80036cc:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80036d0:	487b      	ldr	r0, [pc, #492]	@ (80038c0 <MX_GPIO_Init+0x2d4>)
 80036d2:	f000 ffd7 	bl	8004684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80036d6:	2308      	movs	r3, #8
 80036d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036da:	2301      	movs	r3, #1
 80036dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e2:	2300      	movs	r3, #0
 80036e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80036e6:	f107 031c 	add.w	r3, r7, #28
 80036ea:	4619      	mov	r1, r3
 80036ec:	4873      	ldr	r0, [pc, #460]	@ (80038bc <MX_GPIO_Init+0x2d0>)
 80036ee:	f000 fe15 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 80036f2:	2350      	movs	r3, #80	@ 0x50
 80036f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80036f6:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80036fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fc:	2300      	movs	r3, #0
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003700:	f107 031c 	add.w	r3, r7, #28
 8003704:	4619      	mov	r1, r3
 8003706:	486d      	ldr	r0, [pc, #436]	@ (80038bc <MX_GPIO_Init+0x2d0>)
 8003708:	f000 fe08 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin MOTOR_IN1_Pin MOTOR_IN2_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|MOTOR_IN1_Pin|MOTOR_IN2_Pin;
 800370c:	f240 3301 	movw	r3, #769	@ 0x301
 8003710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003712:	2301      	movs	r3, #1
 8003714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003716:	2300      	movs	r3, #0
 8003718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800371a:	2300      	movs	r3, #0
 800371c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800371e:	f107 031c 	add.w	r3, r7, #28
 8003722:	4619      	mov	r1, r3
 8003724:	4866      	ldr	r0, [pc, #408]	@ (80038c0 <MX_GPIO_Init+0x2d4>)
 8003726:	f000 fdf9 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800372a:	2308      	movs	r3, #8
 800372c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800372e:	2302      	movs	r3, #2
 8003730:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003732:	2300      	movs	r3, #0
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003736:	2300      	movs	r3, #0
 8003738:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800373a:	2305      	movs	r3, #5
 800373c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800373e:	f107 031c 	add.w	r3, r7, #28
 8003742:	4619      	mov	r1, r3
 8003744:	485e      	ldr	r0, [pc, #376]	@ (80038c0 <MX_GPIO_Init+0x2d4>)
 8003746:	f000 fde9 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800374a:	2301      	movs	r3, #1
 800374c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800374e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8003752:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003754:	2300      	movs	r3, #0
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003758:	f107 031c 	add.w	r3, r7, #28
 800375c:	4619      	mov	r1, r3
 800375e:	485a      	ldr	r0, [pc, #360]	@ (80038c8 <MX_GPIO_Init+0x2dc>)
 8003760:	f000 fddc 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003764:	2310      	movs	r3, #16
 8003766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003768:	2302      	movs	r3, #2
 800376a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800376c:	2300      	movs	r3, #0
 800376e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003770:	2300      	movs	r3, #0
 8003772:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003774:	2306      	movs	r3, #6
 8003776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003778:	f107 031c 	add.w	r3, r7, #28
 800377c:	4619      	mov	r1, r3
 800377e:	4852      	ldr	r0, [pc, #328]	@ (80038c8 <MX_GPIO_Init+0x2dc>)
 8003780:	f000 fdcc 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003784:	2304      	movs	r3, #4
 8003786:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003788:	2300      	movs	r3, #0
 800378a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003790:	f107 031c 	add.w	r3, r7, #28
 8003794:	4619      	mov	r1, r3
 8003796:	484d      	ldr	r0, [pc, #308]	@ (80038cc <MX_GPIO_Init+0x2e0>)
 8003798:	f000 fdc0 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800379c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80037a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037a2:	2302      	movs	r3, #2
 80037a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a6:	2300      	movs	r3, #0
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037aa:	2300      	movs	r3, #0
 80037ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80037ae:	2305      	movs	r3, #5
 80037b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80037b2:	f107 031c 	add.w	r3, r7, #28
 80037b6:	4619      	mov	r1, r3
 80037b8:	4844      	ldr	r0, [pc, #272]	@ (80038cc <MX_GPIO_Init+0x2e0>)
 80037ba:	f000 fdaf 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80037be:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80037c2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037c4:	2301      	movs	r3, #1
 80037c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037c8:	2300      	movs	r3, #0
 80037ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037cc:	2300      	movs	r3, #0
 80037ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037d0:	f107 031c 	add.w	r3, r7, #28
 80037d4:	4619      	mov	r1, r3
 80037d6:	483b      	ldr	r0, [pc, #236]	@ (80038c4 <MX_GPIO_Init+0x2d8>)
 80037d8:	f000 fda0 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80037dc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80037e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e2:	2302      	movs	r3, #2
 80037e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037ea:	2300      	movs	r3, #0
 80037ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80037ee:	2306      	movs	r3, #6
 80037f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037f2:	f107 031c 	add.w	r3, r7, #28
 80037f6:	4619      	mov	r1, r3
 80037f8:	4831      	ldr	r0, [pc, #196]	@ (80038c0 <MX_GPIO_Init+0x2d4>)
 80037fa:	f000 fd8f 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80037fe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003804:	2300      	movs	r3, #0
 8003806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800380c:	f107 031c 	add.w	r3, r7, #28
 8003810:	4619      	mov	r1, r3
 8003812:	482d      	ldr	r0, [pc, #180]	@ (80038c8 <MX_GPIO_Init+0x2dc>)
 8003814:	f000 fd82 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8003818:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800381c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381e:	2302      	movs	r3, #2
 8003820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003826:	2300      	movs	r3, #0
 8003828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800382a:	230a      	movs	r3, #10
 800382c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382e:	f107 031c 	add.w	r3, r7, #28
 8003832:	4619      	mov	r1, r3
 8003834:	4824      	ldr	r0, [pc, #144]	@ (80038c8 <MX_GPIO_Init+0x2dc>)
 8003836:	f000 fd71 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800383a:	2320      	movs	r3, #32
 800383c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800383e:	2300      	movs	r3, #0
 8003840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003842:	2300      	movs	r3, #0
 8003844:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003846:	f107 031c 	add.w	r3, r7, #28
 800384a:	4619      	mov	r1, r3
 800384c:	481d      	ldr	r0, [pc, #116]	@ (80038c4 <MX_GPIO_Init+0x2d8>)
 800384e:	f000 fd65 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003852:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003858:	2312      	movs	r3, #18
 800385a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800385c:	2301      	movs	r3, #1
 800385e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003860:	2302      	movs	r3, #2
 8003862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003864:	2304      	movs	r3, #4
 8003866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003868:	f107 031c 	add.w	r3, r7, #28
 800386c:	4619      	mov	r1, r3
 800386e:	4817      	ldr	r0, [pc, #92]	@ (80038cc <MX_GPIO_Init+0x2e0>)
 8003870:	f000 fd54 	bl	800431c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003874:	2302      	movs	r3, #2
 8003876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003878:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800387c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800387e:	2300      	movs	r3, #0
 8003880:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003882:	f107 031c 	add.w	r3, r7, #28
 8003886:	4619      	mov	r1, r3
 8003888:	480c      	ldr	r0, [pc, #48]	@ (80038bc <MX_GPIO_Init+0x2d0>)
 800388a:	f000 fd47 	bl	800431c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800388e:	2200      	movs	r2, #0
 8003890:	2100      	movs	r1, #0
 8003892:	200a      	movs	r0, #10
 8003894:	f000 fc86 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003898:	200a      	movs	r0, #10
 800389a:	f000 fc9f 	bl	80041dc <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800389e:	2200      	movs	r2, #0
 80038a0:	2100      	movs	r1, #0
 80038a2:	2017      	movs	r0, #23
 80038a4:	f000 fc7e 	bl	80041a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80038a8:	2017      	movs	r0, #23
 80038aa:	f000 fc97 	bl	80041dc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80038ae:	bf00      	nop
 80038b0:	3730      	adds	r7, #48	@ 0x30
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40021000 	.word	0x40021000
 80038c0:	40020800 	.word	0x40020800
 80038c4:	40020c00 	.word	0x40020c00
 80038c8:	40020000 	.word	0x40020000
 80038cc:	40020400 	.word	0x40020400

080038d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler, so it executes in the interrupt context
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b086      	sub	sp, #24
 80038d4:	af02      	add	r7, sp, #8
 80038d6:	6078      	str	r0, [r7, #4]
	// Dummy variable used to replace final character in data queue
	uint8_t dummy;

	// Add a small delay to allow timing for message transmission
	for(uint32_t i=0; i<4000; i++);
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e002      	b.n	80038e4 <HAL_UART_RxCpltCallback+0x14>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	3301      	adds	r3, #1
 80038e2:	60fb      	str	r3, [r7, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 80038ea:	d3f8      	bcc.n	80038de <HAL_UART_RxCpltCallback+0xe>

	// Check if data is available via UART
	if(!xQueueIsQueueFullFromISR(q_data)) {
 80038ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003968 <HAL_UART_RxCpltCallback+0x98>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f005 ffe8 	bl	80098c6 <xQueueIsQueueFullFromISR>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <HAL_UART_RxCpltCallback+0x3c>
		// Enqueue data byte
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 80038fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003968 <HAL_UART_RxCpltCallback+0x98>)
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	2300      	movs	r3, #0
 8003902:	2200      	movs	r2, #0
 8003904:	4919      	ldr	r1, [pc, #100]	@ (800396c <HAL_UART_RxCpltCallback+0x9c>)
 8003906:	f005 fad1 	bl	8008eac <xQueueGenericSendFromISR>
 800390a:	e013      	b.n	8003934 <HAL_UART_RxCpltCallback+0x64>
	}
	// If no data available, check if last entered character is newline character
	else {
		if(user_data == '\n') {
 800390c:	4b17      	ldr	r3, [pc, #92]	@ (800396c <HAL_UART_RxCpltCallback+0x9c>)
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b0a      	cmp	r3, #10
 8003914:	d10e      	bne.n	8003934 <HAL_UART_RxCpltCallback+0x64>
			// Replace last byte of data queue with '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 8003916:	4b14      	ldr	r3, [pc, #80]	@ (8003968 <HAL_UART_RxCpltCallback+0x98>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f107 010b 	add.w	r1, r7, #11
 800391e:	2200      	movs	r2, #0
 8003920:	4618      	mov	r0, r3
 8003922:	f005 fdd9 	bl	80094d8 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8003926:	4b10      	ldr	r3, [pc, #64]	@ (8003968 <HAL_UART_RxCpltCallback+0x98>)
 8003928:	6818      	ldr	r0, [r3, #0]
 800392a:	2300      	movs	r3, #0
 800392c:	2200      	movs	r2, #0
 800392e:	490f      	ldr	r1, [pc, #60]	@ (800396c <HAL_UART_RxCpltCallback+0x9c>)
 8003930:	f005 fabc 	bl	8008eac <xQueueGenericSendFromISR>
		}
	}

	// Send notification to message handler task if user_data == '\n'
	if(user_data == '\n') {
 8003934:	4b0d      	ldr	r3, [pc, #52]	@ (800396c <HAL_UART_RxCpltCallback+0x9c>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b0a      	cmp	r3, #10
 800393c:	d10a      	bne.n	8003954 <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_message_handler_task, 0, eNoAction, NULL);
 800393e:	4b0c      	ldr	r3, [pc, #48]	@ (8003970 <HAL_UART_RxCpltCallback+0xa0>)
 8003940:	6818      	ldr	r0, [r3, #0]
 8003942:	2300      	movs	r3, #0
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	2300      	movs	r3, #0
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2300      	movs	r3, #0
 800394c:	2200      	movs	r2, #0
 800394e:	2100      	movs	r1, #0
 8003950:	f007 fa06 	bl	800ad60 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in interrupt mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8003954:	2201      	movs	r2, #1
 8003956:	4905      	ldr	r1, [pc, #20]	@ (800396c <HAL_UART_RxCpltCallback+0x9c>)
 8003958:	4806      	ldr	r0, [pc, #24]	@ (8003974 <HAL_UART_RxCpltCallback+0xa4>)
 800395a:	f003 fec0 	bl	80076de <HAL_UART_Receive_IT>

}
 800395e:	bf00      	nop
 8003960:	3710      	adds	r7, #16
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20001480 	.word	0x20001480
 800396c:	200014a4 	.word	0x200014a4
 8003970:	20001464 	.word	0x20001464
 8003974:	20001418 	.word	0x20001418

08003978 <HAL_GPIO_EXTI_Callback>:

// This function is called from the GPIO interrupt handler, so it executes in the interrupt context
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ENCODER_A_GPIO_Pin) {
 8003982:	88fb      	ldrh	r3, [r7, #6]
 8003984:	2b10      	cmp	r3, #16
 8003986:	d103      	bne.n	8003990 <HAL_GPIO_EXTI_Callback+0x18>
		motor_gpio_callback(GPIO_Pin);
 8003988:	88fb      	ldrh	r3, [r7, #6]
 800398a:	4618      	mov	r0, r3
 800398c:	f7fe fae2 	bl	8001f54 <motor_gpio_callback>
	}
	if (GPIO_Pin == ENCODER_B_GPIO_Pin) {
 8003990:	88fb      	ldrh	r3, [r7, #6]
 8003992:	2b40      	cmp	r3, #64	@ 0x40
 8003994:	d103      	bne.n	800399e <HAL_GPIO_EXTI_Callback+0x26>
		motor_gpio_callback(GPIO_Pin);
 8003996:	88fb      	ldrh	r3, [r7, #6]
 8003998:	4618      	mov	r0, r3
 800399a:	f7fe fadb 	bl	8001f54 <motor_gpio_callback>
	}
}
 800399e:	bf00      	nop
 80039a0:	3708      	adds	r7, #8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
	...

080039a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a08      	ldr	r2, [pc, #32]	@ (80039d8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80039ba:	f000 fb1b 	bl	8003ff4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7) {
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a06      	ldr	r2, [pc, #24]	@ (80039dc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d102      	bne.n	80039ce <HAL_TIM_PeriodElapsedCallback+0x26>
	motor_timer_callback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f7fe fb19 	bl	8002000 <motor_timer_callback>
  }
  /* USER CODE END Callback 1 */
}
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40001000 	.word	0x40001000
 80039dc:	40001400 	.word	0x40001400

080039e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039e4:	b672      	cpsid	i
}
 80039e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039e8:	bf00      	nop
 80039ea:	e7fd      	b.n	80039e8 <Error_Handler+0x8>

080039ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b082      	sub	sp, #8
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
 80039f6:	4b10      	ldr	r3, [pc, #64]	@ (8003a38 <HAL_MspInit+0x4c>)
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	4a0f      	ldr	r2, [pc, #60]	@ (8003a38 <HAL_MspInit+0x4c>)
 80039fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a02:	4b0d      	ldr	r3, [pc, #52]	@ (8003a38 <HAL_MspInit+0x4c>)
 8003a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a0a:	607b      	str	r3, [r7, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a0e:	2300      	movs	r3, #0
 8003a10:	603b      	str	r3, [r7, #0]
 8003a12:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <HAL_MspInit+0x4c>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a16:	4a08      	ldr	r2, [pc, #32]	@ (8003a38 <HAL_MspInit+0x4c>)
 8003a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a1e:	4b06      	ldr	r3, [pc, #24]	@ (8003a38 <HAL_MspInit+0x4c>)
 8003a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a26:	603b      	str	r3, [r7, #0]
 8003a28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8003a2a:	f007 ffff 	bl	800ba2c <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40023800 	.word	0x40023800

08003a3c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003a44:	f107 0308 	add.w	r3, r7, #8
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	609a      	str	r2, [r3, #8]
 8003a50:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a0c      	ldr	r2, [pc, #48]	@ (8003a88 <HAL_RTC_MspInit+0x4c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d111      	bne.n	8003a80 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003a60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003a64:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a66:	f107 0308 	add.w	r3, r7, #8
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f001 fb20 	bl	80050b0 <HAL_RCCEx_PeriphCLKConfig>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003a76:	f7ff ffb3 	bl	80039e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003a7a:	4b04      	ldr	r3, [pc, #16]	@ (8003a8c <HAL_RTC_MspInit+0x50>)
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003a80:	bf00      	nop
 8003a82:	3718      	adds	r7, #24
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40002800 	.word	0x40002800
 8003a8c:	42470e3c 	.word	0x42470e3c

08003a90 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b08a      	sub	sp, #40	@ 0x28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a98:	f107 0314 	add.w	r3, r7, #20
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	609a      	str	r2, [r3, #8]
 8003aa4:	60da      	str	r2, [r3, #12]
 8003aa6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a19      	ldr	r2, [pc, #100]	@ (8003b14 <HAL_SPI_MspInit+0x84>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d12b      	bne.n	8003b0a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	4b18      	ldr	r3, [pc, #96]	@ (8003b18 <HAL_SPI_MspInit+0x88>)
 8003ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aba:	4a17      	ldr	r2, [pc, #92]	@ (8003b18 <HAL_SPI_MspInit+0x88>)
 8003abc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ac0:	6453      	str	r3, [r2, #68]	@ 0x44
 8003ac2:	4b15      	ldr	r3, [pc, #84]	@ (8003b18 <HAL_SPI_MspInit+0x88>)
 8003ac4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ac6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003aca:	613b      	str	r3, [r7, #16]
 8003acc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	4b11      	ldr	r3, [pc, #68]	@ (8003b18 <HAL_SPI_MspInit+0x88>)
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad6:	4a10      	ldr	r2, [pc, #64]	@ (8003b18 <HAL_SPI_MspInit+0x88>)
 8003ad8:	f043 0301 	orr.w	r3, r3, #1
 8003adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ade:	4b0e      	ldr	r3, [pc, #56]	@ (8003b18 <HAL_SPI_MspInit+0x88>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	60fb      	str	r3, [r7, #12]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003aea:	23e0      	movs	r3, #224	@ 0xe0
 8003aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aee:	2302      	movs	r3, #2
 8003af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af2:	2300      	movs	r3, #0
 8003af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af6:	2303      	movs	r3, #3
 8003af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003afa:	2305      	movs	r3, #5
 8003afc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afe:	f107 0314 	add.w	r3, r7, #20
 8003b02:	4619      	mov	r1, r3
 8003b04:	4805      	ldr	r0, [pc, #20]	@ (8003b1c <HAL_SPI_MspInit+0x8c>)
 8003b06:	f000 fc09 	bl	800431c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003b0a:	bf00      	nop
 8003b0c:	3728      	adds	r7, #40	@ 0x28
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40013000 	.word	0x40013000
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	40020000 	.word	0x40020000

08003b20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8003b5c <HAL_TIM_PWM_MspInit+0x3c>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d10d      	bne.n	8003b4e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
 8003b36:	4b0a      	ldr	r3, [pc, #40]	@ (8003b60 <HAL_TIM_PWM_MspInit+0x40>)
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	4a09      	ldr	r2, [pc, #36]	@ (8003b60 <HAL_TIM_PWM_MspInit+0x40>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b42:	4b07      	ldr	r3, [pc, #28]	@ (8003b60 <HAL_TIM_PWM_MspInit+0x40>)
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40010000 	.word	0x40010000
 8003b60:	40023800 	.word	0x40023800

08003b64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a18      	ldr	r2, [pc, #96]	@ (8003bd4 <HAL_TIM_Base_MspInit+0x70>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d10e      	bne.n	8003b94 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	4b17      	ldr	r3, [pc, #92]	@ (8003bd8 <HAL_TIM_Base_MspInit+0x74>)
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	4a16      	ldr	r2, [pc, #88]	@ (8003bd8 <HAL_TIM_Base_MspInit+0x74>)
 8003b80:	f043 0302 	orr.w	r3, r3, #2
 8003b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b86:	4b14      	ldr	r3, [pc, #80]	@ (8003bd8 <HAL_TIM_Base_MspInit+0x74>)
 8003b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003b92:	e01a      	b.n	8003bca <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM7)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a10      	ldr	r2, [pc, #64]	@ (8003bdc <HAL_TIM_Base_MspInit+0x78>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d115      	bne.n	8003bca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bd8 <HAL_TIM_Base_MspInit+0x74>)
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ba6:	4a0c      	ldr	r2, [pc, #48]	@ (8003bd8 <HAL_TIM_Base_MspInit+0x74>)
 8003ba8:	f043 0320 	orr.w	r3, r3, #32
 8003bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bae:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd8 <HAL_TIM_Base_MspInit+0x74>)
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003bba:	2200      	movs	r2, #0
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	2037      	movs	r0, #55	@ 0x37
 8003bc0:	f000 faf0 	bl	80041a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003bc4:	2037      	movs	r0, #55	@ 0x37
 8003bc6:	f000 fb09 	bl	80041dc <HAL_NVIC_EnableIRQ>
}
 8003bca:	bf00      	nop
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40000400 	.word	0x40000400
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	40001400 	.word	0x40001400

08003be0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	@ 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be8:	f107 0314 	add.w	r3, r7, #20
 8003bec:	2200      	movs	r2, #0
 8003bee:	601a      	str	r2, [r3, #0]
 8003bf0:	605a      	str	r2, [r3, #4]
 8003bf2:	609a      	str	r2, [r3, #8]
 8003bf4:	60da      	str	r2, [r3, #12]
 8003bf6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a24      	ldr	r2, [pc, #144]	@ (8003c90 <HAL_TIM_MspPostInit+0xb0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d11f      	bne.n	8003c42 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	613b      	str	r3, [r7, #16]
 8003c06:	4b23      	ldr	r3, [pc, #140]	@ (8003c94 <HAL_TIM_MspPostInit+0xb4>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	4a22      	ldr	r2, [pc, #136]	@ (8003c94 <HAL_TIM_MspPostInit+0xb4>)
 8003c0c:	f043 0310 	orr.w	r3, r3, #16
 8003c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c12:	4b20      	ldr	r3, [pc, #128]	@ (8003c94 <HAL_TIM_MspPostInit+0xb4>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	f003 0310 	and.w	r3, r3, #16
 8003c1a:	613b      	str	r3, [r7, #16]
 8003c1c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c24:	2302      	movs	r3, #2
 8003c26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003c30:	2301      	movs	r3, #1
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c34:	f107 0314 	add.w	r3, r7, #20
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4817      	ldr	r0, [pc, #92]	@ (8003c98 <HAL_TIM_MspPostInit+0xb8>)
 8003c3c:	f000 fb6e 	bl	800431c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003c40:	e022      	b.n	8003c88 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM3)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a15      	ldr	r2, [pc, #84]	@ (8003c9c <HAL_TIM_MspPostInit+0xbc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d11d      	bne.n	8003c88 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	4b10      	ldr	r3, [pc, #64]	@ (8003c94 <HAL_TIM_MspPostInit+0xb4>)
 8003c52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c54:	4a0f      	ldr	r2, [pc, #60]	@ (8003c94 <HAL_TIM_MspPostInit+0xb4>)
 8003c56:	f043 0304 	orr.w	r3, r3, #4
 8003c5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003c94 <HAL_TIM_MspPostInit+0xb4>)
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	60fb      	str	r3, [r7, #12]
 8003c66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003c68:	2340      	movs	r3, #64	@ 0x40
 8003c6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c6c:	2302      	movs	r3, #2
 8003c6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c74:	2300      	movs	r3, #0
 8003c76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c78:	2302      	movs	r3, #2
 8003c7a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	4619      	mov	r1, r3
 8003c82:	4807      	ldr	r0, [pc, #28]	@ (8003ca0 <HAL_TIM_MspPostInit+0xc0>)
 8003c84:	f000 fb4a 	bl	800431c <HAL_GPIO_Init>
}
 8003c88:	bf00      	nop
 8003c8a:	3728      	adds	r7, #40	@ 0x28
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40023800 	.word	0x40023800
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40000400 	.word	0x40000400
 8003ca0:	40020800 	.word	0x40020800

08003ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08a      	sub	sp, #40	@ 0x28
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cac:	f107 0314 	add.w	r3, r7, #20
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d38 <HAL_UART_MspInit+0x94>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d133      	bne.n	8003d2e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	4b1c      	ldr	r3, [pc, #112]	@ (8003d3c <HAL_UART_MspInit+0x98>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	4a1b      	ldr	r2, [pc, #108]	@ (8003d3c <HAL_UART_MspInit+0x98>)
 8003cd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cd6:	4b19      	ldr	r3, [pc, #100]	@ (8003d3c <HAL_UART_MspInit+0x98>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	60fb      	str	r3, [r7, #12]
 8003ce6:	4b15      	ldr	r3, [pc, #84]	@ (8003d3c <HAL_UART_MspInit+0x98>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	4a14      	ldr	r2, [pc, #80]	@ (8003d3c <HAL_UART_MspInit+0x98>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cf2:	4b12      	ldr	r3, [pc, #72]	@ (8003d3c <HAL_UART_MspInit+0x98>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003cfe:	230c      	movs	r3, #12
 8003d00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d02:	2302      	movs	r3, #2
 8003d04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d0e:	2307      	movs	r3, #7
 8003d10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d12:	f107 0314 	add.w	r3, r7, #20
 8003d16:	4619      	mov	r1, r3
 8003d18:	4809      	ldr	r0, [pc, #36]	@ (8003d40 <HAL_UART_MspInit+0x9c>)
 8003d1a:	f000 faff 	bl	800431c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8003d1e:	2200      	movs	r2, #0
 8003d20:	2106      	movs	r1, #6
 8003d22:	2026      	movs	r0, #38	@ 0x26
 8003d24:	f000 fa3e 	bl	80041a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d28:	2026      	movs	r0, #38	@ 0x26
 8003d2a:	f000 fa57 	bl	80041dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d2e:	bf00      	nop
 8003d30:	3728      	adds	r7, #40	@ 0x28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	40004400 	.word	0x40004400
 8003d3c:	40023800 	.word	0x40023800
 8003d40:	40020000 	.word	0x40020000

08003d44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	@ 0x38
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003d54:	2300      	movs	r3, #0
 8003d56:	60fb      	str	r3, [r7, #12]
 8003d58:	4b33      	ldr	r3, [pc, #204]	@ (8003e28 <HAL_InitTick+0xe4>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	4a32      	ldr	r2, [pc, #200]	@ (8003e28 <HAL_InitTick+0xe4>)
 8003d5e:	f043 0310 	orr.w	r3, r3, #16
 8003d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d64:	4b30      	ldr	r3, [pc, #192]	@ (8003e28 <HAL_InitTick+0xe4>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	f003 0310 	and.w	r3, r3, #16
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d70:	f107 0210 	add.w	r2, r7, #16
 8003d74:	f107 0314 	add.w	r3, r7, #20
 8003d78:	4611      	mov	r1, r2
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f001 f966 	bl	800504c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d80:	6a3b      	ldr	r3, [r7, #32]
 8003d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d103      	bne.n	8003d92 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d8a:	f001 f937 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8003d8e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003d90:	e004      	b.n	8003d9c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d92:	f001 f933 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 8003d96:	4603      	mov	r3, r0
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d9e:	4a23      	ldr	r2, [pc, #140]	@ (8003e2c <HAL_InitTick+0xe8>)
 8003da0:	fba2 2303 	umull	r2, r3, r2, r3
 8003da4:	0c9b      	lsrs	r3, r3, #18
 8003da6:	3b01      	subs	r3, #1
 8003da8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003daa:	4b21      	ldr	r3, [pc, #132]	@ (8003e30 <HAL_InitTick+0xec>)
 8003dac:	4a21      	ldr	r2, [pc, #132]	@ (8003e34 <HAL_InitTick+0xf0>)
 8003dae:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003db0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e30 <HAL_InitTick+0xec>)
 8003db2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003db6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003db8:	4a1d      	ldr	r2, [pc, #116]	@ (8003e30 <HAL_InitTick+0xec>)
 8003dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dbc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003e30 <HAL_InitTick+0xec>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8003e30 <HAL_InitTick+0xec>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003dca:	4b19      	ldr	r3, [pc, #100]	@ (8003e30 <HAL_InitTick+0xec>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003dd0:	4817      	ldr	r0, [pc, #92]	@ (8003e30 <HAL_InitTick+0xec>)
 8003dd2:	f002 fb31 	bl	8006438 <HAL_TIM_Base_Init>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8003ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d11b      	bne.n	8003e1c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003de4:	4812      	ldr	r0, [pc, #72]	@ (8003e30 <HAL_InitTick+0xec>)
 8003de6:	f002 fb77 	bl	80064d8 <HAL_TIM_Base_Start_IT>
 8003dea:	4603      	mov	r3, r0
 8003dec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003df0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d111      	bne.n	8003e1c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003df8:	2036      	movs	r0, #54	@ 0x36
 8003dfa:	f000 f9ef 	bl	80041dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2b0f      	cmp	r3, #15
 8003e02:	d808      	bhi.n	8003e16 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003e04:	2200      	movs	r2, #0
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	2036      	movs	r0, #54	@ 0x36
 8003e0a:	f000 f9cb 	bl	80041a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e38 <HAL_InitTick+0xf4>)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6013      	str	r3, [r2, #0]
 8003e14:	e002      	b.n	8003e1c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3738      	adds	r7, #56	@ 0x38
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	40023800 	.word	0x40023800
 8003e2c:	431bde83 	.word	0x431bde83
 8003e30:	200014a8 	.word	0x200014a8
 8003e34:	40001000 	.word	0x40001000
 8003e38:	2000008c 	.word	0x2000008c

08003e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e40:	bf00      	nop
 8003e42:	e7fd      	b.n	8003e40 <NMI_Handler+0x4>

08003e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <HardFault_Handler+0x4>

08003e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <MemManage_Handler+0x4>

08003e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <BusFault_Handler+0x4>

08003e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e60:	bf00      	nop
 8003e62:	e7fd      	b.n	8003e60 <UsageFault_Handler+0x4>

08003e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e68:	bf00      	nop
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr

08003e72 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8003e72:	b580      	push	{r7, lr}
 8003e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_A_Pin);
 8003e76:	2010      	movs	r0, #16
 8003e78:	f000 fc38 	bl	80046ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8003e7c:	bf00      	nop
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_B_Pin);
 8003e84:	2040      	movs	r0, #64	@ 0x40
 8003e86:	f000 fc31 	bl	80046ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
	...

08003e90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e94:	4802      	ldr	r0, [pc, #8]	@ (8003ea0 <USART2_IRQHandler+0x10>)
 8003e96:	f003 fc47 	bl	8007728 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20001418 	.word	0x20001418

08003ea4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003ea8:	4802      	ldr	r0, [pc, #8]	@ (8003eb4 <TIM6_DAC_IRQHandler+0x10>)
 8003eaa:	f002 fc9d 	bl	80067e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	200014a8 	.word	0x200014a8

08003eb8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003ebc:	4802      	ldr	r0, [pc, #8]	@ (8003ec8 <TIM7_IRQHandler+0x10>)
 8003ebe:	f002 fc93 	bl	80067e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003ec2:	bf00      	nop
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	200013d0 	.word	0x200013d0

08003ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ed4:	4a14      	ldr	r2, [pc, #80]	@ (8003f28 <_sbrk+0x5c>)
 8003ed6:	4b15      	ldr	r3, [pc, #84]	@ (8003f2c <_sbrk+0x60>)
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ee0:	4b13      	ldr	r3, [pc, #76]	@ (8003f30 <_sbrk+0x64>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d102      	bne.n	8003eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ee8:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <_sbrk+0x64>)
 8003eea:	4a12      	ldr	r2, [pc, #72]	@ (8003f34 <_sbrk+0x68>)
 8003eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eee:	4b10      	ldr	r3, [pc, #64]	@ (8003f30 <_sbrk+0x64>)
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d207      	bcs.n	8003f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003efc:	f009 ff8a 	bl	800de14 <__errno>
 8003f00:	4603      	mov	r3, r0
 8003f02:	220c      	movs	r2, #12
 8003f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f0a:	e009      	b.n	8003f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f0c:	4b08      	ldr	r3, [pc, #32]	@ (8003f30 <_sbrk+0x64>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f12:	4b07      	ldr	r3, [pc, #28]	@ (8003f30 <_sbrk+0x64>)
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4413      	add	r3, r2
 8003f1a:	4a05      	ldr	r2, [pc, #20]	@ (8003f30 <_sbrk+0x64>)
 8003f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	20020000 	.word	0x20020000
 8003f2c:	00000400 	.word	0x00000400
 8003f30:	200014f0 	.word	0x200014f0
 8003f34:	2001be60 	.word	0x2001be60

08003f38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f3c:	4b06      	ldr	r3, [pc, #24]	@ (8003f58 <SystemInit+0x20>)
 8003f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f42:	4a05      	ldr	r2, [pc, #20]	@ (8003f58 <SystemInit+0x20>)
 8003f44:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f48:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f4c:	bf00      	nop
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	e000ed00 	.word	0xe000ed00

08003f5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003f5c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003f60:	f7ff ffea 	bl	8003f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f64:	480c      	ldr	r0, [pc, #48]	@ (8003f98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f66:	490d      	ldr	r1, [pc, #52]	@ (8003f9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f68:	4a0d      	ldr	r2, [pc, #52]	@ (8003fa0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f6c:	e002      	b.n	8003f74 <LoopCopyDataInit>

08003f6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f72:	3304      	adds	r3, #4

08003f74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f78:	d3f9      	bcc.n	8003f6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f7c:	4c0a      	ldr	r4, [pc, #40]	@ (8003fa8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f80:	e001      	b.n	8003f86 <LoopFillZerobss>

08003f82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f84:	3204      	adds	r2, #4

08003f86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f88:	d3fb      	bcc.n	8003f82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f8a:	f009 ff49 	bl	800de20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f8e:	f7fe ff3f 	bl	8002e10 <main>
  bx  lr    
 8003f92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f9c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8003fa0:	0800f8b4 	.word	0x0800f8b4
  ldr r2, =_sbss
 8003fa4:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8003fa8:	2001be60 	.word	0x2001be60

08003fac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003fac:	e7fe      	b.n	8003fac <ADC_IRQHandler>
	...

08003fb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff0 <HAL_Init+0x40>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff0 <HAL_Init+0x40>)
 8003fba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003fbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff0 <HAL_Init+0x40>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff0 <HAL_Init+0x40>)
 8003fc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003fca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fcc:	4b08      	ldr	r3, [pc, #32]	@ (8003ff0 <HAL_Init+0x40>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a07      	ldr	r2, [pc, #28]	@ (8003ff0 <HAL_Init+0x40>)
 8003fd2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fd8:	2003      	movs	r0, #3
 8003fda:	f000 f8d8 	bl	800418e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fde:	200f      	movs	r0, #15
 8003fe0:	f7ff feb0 	bl	8003d44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fe4:	f7ff fd02 	bl	80039ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fe8:	2300      	movs	r3, #0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40023c00 	.word	0x40023c00

08003ff4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ff8:	4b06      	ldr	r3, [pc, #24]	@ (8004014 <HAL_IncTick+0x20>)
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b06      	ldr	r3, [pc, #24]	@ (8004018 <HAL_IncTick+0x24>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4413      	add	r3, r2
 8004004:	4a04      	ldr	r2, [pc, #16]	@ (8004018 <HAL_IncTick+0x24>)
 8004006:	6013      	str	r3, [r2, #0]
}
 8004008:	bf00      	nop
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000090 	.word	0x20000090
 8004018:	200014f4 	.word	0x200014f4

0800401c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800401c:	b480      	push	{r7}
 800401e:	af00      	add	r7, sp, #0
  return uwTick;
 8004020:	4b03      	ldr	r3, [pc, #12]	@ (8004030 <HAL_GetTick+0x14>)
 8004022:	681b      	ldr	r3, [r3, #0]
}
 8004024:	4618      	mov	r0, r3
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	200014f4 	.word	0x200014f4

08004034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004034:	b480      	push	{r7}
 8004036:	b085      	sub	sp, #20
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004044:	4b0c      	ldr	r3, [pc, #48]	@ (8004078 <__NVIC_SetPriorityGrouping+0x44>)
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004050:	4013      	ands	r3, r2
 8004052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800405c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004060:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004066:	4a04      	ldr	r2, [pc, #16]	@ (8004078 <__NVIC_SetPriorityGrouping+0x44>)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	60d3      	str	r3, [r2, #12]
}
 800406c:	bf00      	nop
 800406e:	3714      	adds	r7, #20
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr
 8004078:	e000ed00 	.word	0xe000ed00

0800407c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004080:	4b04      	ldr	r3, [pc, #16]	@ (8004094 <__NVIC_GetPriorityGrouping+0x18>)
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	0a1b      	lsrs	r3, r3, #8
 8004086:	f003 0307 	and.w	r3, r3, #7
}
 800408a:	4618      	mov	r0, r3
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	e000ed00 	.word	0xe000ed00

08004098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	4603      	mov	r3, r0
 80040a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	db0b      	blt.n	80040c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040aa:	79fb      	ldrb	r3, [r7, #7]
 80040ac:	f003 021f 	and.w	r2, r3, #31
 80040b0:	4907      	ldr	r1, [pc, #28]	@ (80040d0 <__NVIC_EnableIRQ+0x38>)
 80040b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b6:	095b      	lsrs	r3, r3, #5
 80040b8:	2001      	movs	r0, #1
 80040ba:	fa00 f202 	lsl.w	r2, r0, r2
 80040be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040c2:	bf00      	nop
 80040c4:	370c      	adds	r7, #12
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	e000e100 	.word	0xe000e100

080040d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	4603      	mov	r3, r0
 80040dc:	6039      	str	r1, [r7, #0]
 80040de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	db0a      	blt.n	80040fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	490c      	ldr	r1, [pc, #48]	@ (8004120 <__NVIC_SetPriority+0x4c>)
 80040ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040f2:	0112      	lsls	r2, r2, #4
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	440b      	add	r3, r1
 80040f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040fc:	e00a      	b.n	8004114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	b2da      	uxtb	r2, r3
 8004102:	4908      	ldr	r1, [pc, #32]	@ (8004124 <__NVIC_SetPriority+0x50>)
 8004104:	79fb      	ldrb	r3, [r7, #7]
 8004106:	f003 030f 	and.w	r3, r3, #15
 800410a:	3b04      	subs	r3, #4
 800410c:	0112      	lsls	r2, r2, #4
 800410e:	b2d2      	uxtb	r2, r2
 8004110:	440b      	add	r3, r1
 8004112:	761a      	strb	r2, [r3, #24]
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	e000e100 	.word	0xe000e100
 8004124:	e000ed00 	.word	0xe000ed00

08004128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004128:	b480      	push	{r7}
 800412a:	b089      	sub	sp, #36	@ 0x24
 800412c:	af00      	add	r7, sp, #0
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f1c3 0307 	rsb	r3, r3, #7
 8004142:	2b04      	cmp	r3, #4
 8004144:	bf28      	it	cs
 8004146:	2304      	movcs	r3, #4
 8004148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3304      	adds	r3, #4
 800414e:	2b06      	cmp	r3, #6
 8004150:	d902      	bls.n	8004158 <NVIC_EncodePriority+0x30>
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	3b03      	subs	r3, #3
 8004156:	e000      	b.n	800415a <NVIC_EncodePriority+0x32>
 8004158:	2300      	movs	r3, #0
 800415a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800415c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	fa02 f303 	lsl.w	r3, r2, r3
 8004166:	43da      	mvns	r2, r3
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	401a      	ands	r2, r3
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004170:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	fa01 f303 	lsl.w	r3, r1, r3
 800417a:	43d9      	mvns	r1, r3
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004180:	4313      	orrs	r3, r2
         );
}
 8004182:	4618      	mov	r0, r3
 8004184:	3724      	adds	r7, #36	@ 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr

0800418e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b082      	sub	sp, #8
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff ff4c 	bl	8004034 <__NVIC_SetPriorityGrouping>
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	4603      	mov	r3, r0
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
 80041b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041b6:	f7ff ff61 	bl	800407c <__NVIC_GetPriorityGrouping>
 80041ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	68b9      	ldr	r1, [r7, #8]
 80041c0:	6978      	ldr	r0, [r7, #20]
 80041c2:	f7ff ffb1 	bl	8004128 <NVIC_EncodePriority>
 80041c6:	4602      	mov	r2, r0
 80041c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7ff ff80 	bl	80040d4 <__NVIC_SetPriority>
}
 80041d4:	bf00      	nop
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80041e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff ff54 	bl	8004098 <__NVIC_EnableIRQ>
}
 80041f0:	bf00      	nop
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004204:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004206:	f7ff ff09 	bl	800401c <HAL_GetTick>
 800420a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d008      	beq.n	800422a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2280      	movs	r2, #128	@ 0x80
 800421c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e052      	b.n	80042d0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0216 	bic.w	r2, r2, #22
 8004238:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695a      	ldr	r2, [r3, #20]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004248:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	2b00      	cmp	r3, #0
 8004250:	d103      	bne.n	800425a <HAL_DMA_Abort+0x62>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004256:	2b00      	cmp	r3, #0
 8004258:	d007      	beq.n	800426a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0208 	bic.w	r2, r2, #8
 8004268:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0201 	bic.w	r2, r2, #1
 8004278:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800427a:	e013      	b.n	80042a4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800427c:	f7ff fece 	bl	800401c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	68bb      	ldr	r3, [r7, #8]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	2b05      	cmp	r3, #5
 8004288:	d90c      	bls.n	80042a4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2203      	movs	r2, #3
 8004294:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80042a0:	2303      	movs	r3, #3
 80042a2:	e015      	b.n	80042d0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1e4      	bne.n	800427c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042b6:	223f      	movs	r2, #63	@ 0x3f
 80042b8:	409a      	lsls	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3710      	adds	r7, #16
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d004      	beq.n	80042f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2280      	movs	r2, #128	@ 0x80
 80042f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e00c      	b.n	8004310 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2205      	movs	r2, #5
 80042fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0201 	bic.w	r2, r2, #1
 800430c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800430e:	2300      	movs	r3, #0
}
 8004310:	4618      	mov	r0, r3
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800431c:	b480      	push	{r7}
 800431e:	b089      	sub	sp, #36	@ 0x24
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004326:	2300      	movs	r3, #0
 8004328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800432a:	2300      	movs	r3, #0
 800432c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800432e:	2300      	movs	r3, #0
 8004330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004332:	2300      	movs	r3, #0
 8004334:	61fb      	str	r3, [r7, #28]
 8004336:	e16b      	b.n	8004610 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004338:	2201      	movs	r2, #1
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	697a      	ldr	r2, [r7, #20]
 8004348:	4013      	ands	r3, r2
 800434a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	429a      	cmp	r2, r3
 8004352:	f040 815a 	bne.w	800460a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f003 0303 	and.w	r3, r3, #3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d005      	beq.n	800436e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800436a:	2b02      	cmp	r3, #2
 800436c:	d130      	bne.n	80043d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	005b      	lsls	r3, r3, #1
 8004378:	2203      	movs	r2, #3
 800437a:	fa02 f303 	lsl.w	r3, r2, r3
 800437e:	43db      	mvns	r3, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	68da      	ldr	r2, [r3, #12]
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	fa02 f303 	lsl.w	r3, r2, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4313      	orrs	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80043a4:	2201      	movs	r2, #1
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ac:	43db      	mvns	r3, r3
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	4013      	ands	r3, r2
 80043b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	091b      	lsrs	r3, r3, #4
 80043ba:	f003 0201 	and.w	r2, r3, #1
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	fa02 f303 	lsl.w	r3, r2, r3
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4313      	orrs	r3, r2
 80043c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d017      	beq.n	800440c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	2203      	movs	r2, #3
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d123      	bne.n	8004460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	08da      	lsrs	r2, r3, #3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	3208      	adds	r2, #8
 8004420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	220f      	movs	r2, #15
 8004430:	fa02 f303 	lsl.w	r3, r2, r3
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	69fb      	ldr	r3, [r7, #28]
 8004442:	f003 0307 	and.w	r3, r3, #7
 8004446:	009b      	lsls	r3, r3, #2
 8004448:	fa02 f303 	lsl.w	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	4313      	orrs	r3, r2
 8004450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	08da      	lsrs	r2, r3, #3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	3208      	adds	r2, #8
 800445a:	69b9      	ldr	r1, [r7, #24]
 800445c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	2203      	movs	r2, #3
 800446c:	fa02 f303 	lsl.w	r3, r2, r3
 8004470:	43db      	mvns	r3, r3
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4013      	ands	r3, r2
 8004476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	f003 0203 	and.w	r2, r3, #3
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	4313      	orrs	r3, r2
 800448c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 80b4 	beq.w	800460a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
 80044a6:	4b60      	ldr	r3, [pc, #384]	@ (8004628 <HAL_GPIO_Init+0x30c>)
 80044a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044aa:	4a5f      	ldr	r2, [pc, #380]	@ (8004628 <HAL_GPIO_Init+0x30c>)
 80044ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80044b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80044b2:	4b5d      	ldr	r3, [pc, #372]	@ (8004628 <HAL_GPIO_Init+0x30c>)
 80044b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044ba:	60fb      	str	r3, [r7, #12]
 80044bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044be:	4a5b      	ldr	r2, [pc, #364]	@ (800462c <HAL_GPIO_Init+0x310>)
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	089b      	lsrs	r3, r3, #2
 80044c4:	3302      	adds	r3, #2
 80044c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	009b      	lsls	r3, r3, #2
 80044d4:	220f      	movs	r2, #15
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	43db      	mvns	r3, r3
 80044dc:	69ba      	ldr	r2, [r7, #24]
 80044de:	4013      	ands	r3, r2
 80044e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a52      	ldr	r2, [pc, #328]	@ (8004630 <HAL_GPIO_Init+0x314>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d02b      	beq.n	8004542 <HAL_GPIO_Init+0x226>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a51      	ldr	r2, [pc, #324]	@ (8004634 <HAL_GPIO_Init+0x318>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d025      	beq.n	800453e <HAL_GPIO_Init+0x222>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a50      	ldr	r2, [pc, #320]	@ (8004638 <HAL_GPIO_Init+0x31c>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d01f      	beq.n	800453a <HAL_GPIO_Init+0x21e>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a4f      	ldr	r2, [pc, #316]	@ (800463c <HAL_GPIO_Init+0x320>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d019      	beq.n	8004536 <HAL_GPIO_Init+0x21a>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a4e      	ldr	r2, [pc, #312]	@ (8004640 <HAL_GPIO_Init+0x324>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d013      	beq.n	8004532 <HAL_GPIO_Init+0x216>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a4d      	ldr	r2, [pc, #308]	@ (8004644 <HAL_GPIO_Init+0x328>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d00d      	beq.n	800452e <HAL_GPIO_Init+0x212>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a4c      	ldr	r2, [pc, #304]	@ (8004648 <HAL_GPIO_Init+0x32c>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d007      	beq.n	800452a <HAL_GPIO_Init+0x20e>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a4b      	ldr	r2, [pc, #300]	@ (800464c <HAL_GPIO_Init+0x330>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d101      	bne.n	8004526 <HAL_GPIO_Init+0x20a>
 8004522:	2307      	movs	r3, #7
 8004524:	e00e      	b.n	8004544 <HAL_GPIO_Init+0x228>
 8004526:	2308      	movs	r3, #8
 8004528:	e00c      	b.n	8004544 <HAL_GPIO_Init+0x228>
 800452a:	2306      	movs	r3, #6
 800452c:	e00a      	b.n	8004544 <HAL_GPIO_Init+0x228>
 800452e:	2305      	movs	r3, #5
 8004530:	e008      	b.n	8004544 <HAL_GPIO_Init+0x228>
 8004532:	2304      	movs	r3, #4
 8004534:	e006      	b.n	8004544 <HAL_GPIO_Init+0x228>
 8004536:	2303      	movs	r3, #3
 8004538:	e004      	b.n	8004544 <HAL_GPIO_Init+0x228>
 800453a:	2302      	movs	r3, #2
 800453c:	e002      	b.n	8004544 <HAL_GPIO_Init+0x228>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <HAL_GPIO_Init+0x228>
 8004542:	2300      	movs	r3, #0
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	f002 0203 	and.w	r2, r2, #3
 800454a:	0092      	lsls	r2, r2, #2
 800454c:	4093      	lsls	r3, r2
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	4313      	orrs	r3, r2
 8004552:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004554:	4935      	ldr	r1, [pc, #212]	@ (800462c <HAL_GPIO_Init+0x310>)
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	089b      	lsrs	r3, r3, #2
 800455a:	3302      	adds	r3, #2
 800455c:	69ba      	ldr	r2, [r7, #24]
 800455e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004562:	4b3b      	ldr	r3, [pc, #236]	@ (8004650 <HAL_GPIO_Init+0x334>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004586:	4a32      	ldr	r2, [pc, #200]	@ (8004650 <HAL_GPIO_Init+0x334>)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800458c:	4b30      	ldr	r3, [pc, #192]	@ (8004650 <HAL_GPIO_Init+0x334>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045b0:	4a27      	ldr	r2, [pc, #156]	@ (8004650 <HAL_GPIO_Init+0x334>)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045b6:	4b26      	ldr	r3, [pc, #152]	@ (8004650 <HAL_GPIO_Init+0x334>)
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	43db      	mvns	r3, r3
 80045c0:	69ba      	ldr	r2, [r7, #24]
 80045c2:	4013      	ands	r3, r2
 80045c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80045d2:	69ba      	ldr	r2, [r7, #24]
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80045da:	4a1d      	ldr	r2, [pc, #116]	@ (8004650 <HAL_GPIO_Init+0x334>)
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80045e0:	4b1b      	ldr	r3, [pc, #108]	@ (8004650 <HAL_GPIO_Init+0x334>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004604:	4a12      	ldr	r2, [pc, #72]	@ (8004650 <HAL_GPIO_Init+0x334>)
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3301      	adds	r3, #1
 800460e:	61fb      	str	r3, [r7, #28]
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	2b0f      	cmp	r3, #15
 8004614:	f67f ae90 	bls.w	8004338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004618:	bf00      	nop
 800461a:	bf00      	nop
 800461c:	3724      	adds	r7, #36	@ 0x24
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800
 800462c:	40013800 	.word	0x40013800
 8004630:	40020000 	.word	0x40020000
 8004634:	40020400 	.word	0x40020400
 8004638:	40020800 	.word	0x40020800
 800463c:	40020c00 	.word	0x40020c00
 8004640:	40021000 	.word	0x40021000
 8004644:	40021400 	.word	0x40021400
 8004648:	40021800 	.word	0x40021800
 800464c:	40021c00 	.word	0x40021c00
 8004650:	40013c00 	.word	0x40013c00

08004654 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	460b      	mov	r3, r1
 800465e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	887b      	ldrh	r3, [r7, #2]
 8004666:	4013      	ands	r3, r2
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800466c:	2301      	movs	r3, #1
 800466e:	73fb      	strb	r3, [r7, #15]
 8004670:	e001      	b.n	8004676 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004672:	2300      	movs	r3, #0
 8004674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004676:	7bfb      	ldrb	r3, [r7, #15]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	807b      	strh	r3, [r7, #2]
 8004690:	4613      	mov	r3, r2
 8004692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004694:	787b      	ldrb	r3, [r7, #1]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800469a:	887a      	ldrh	r2, [r7, #2]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046a0:	e003      	b.n	80046aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046a2:	887b      	ldrh	r3, [r7, #2]
 80046a4:	041a      	lsls	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	619a      	str	r2, [r3, #24]
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b085      	sub	sp, #20
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80046c8:	887a      	ldrh	r2, [r7, #2]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4013      	ands	r3, r2
 80046ce:	041a      	lsls	r2, r3, #16
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	43d9      	mvns	r1, r3
 80046d4:	887b      	ldrh	r3, [r7, #2]
 80046d6:	400b      	ands	r3, r1
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	619a      	str	r2, [r3, #24]
}
 80046de:	bf00      	nop
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
	...

080046ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b082      	sub	sp, #8
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046f6:	4b08      	ldr	r3, [pc, #32]	@ (8004718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	88fb      	ldrh	r3, [r7, #6]
 80046fc:	4013      	ands	r3, r2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d006      	beq.n	8004710 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004702:	4a05      	ldr	r2, [pc, #20]	@ (8004718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004708:	88fb      	ldrh	r3, [r7, #6]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff f934 	bl	8003978 <HAL_GPIO_EXTI_Callback>
  }
}
 8004710:	bf00      	nop
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40013c00 	.word	0x40013c00

0800471c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d101      	bne.n	800472e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e267      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d075      	beq.n	8004826 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800473a:	4b88      	ldr	r3, [pc, #544]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 030c 	and.w	r3, r3, #12
 8004742:	2b04      	cmp	r3, #4
 8004744:	d00c      	beq.n	8004760 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004746:	4b85      	ldr	r3, [pc, #532]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800474e:	2b08      	cmp	r3, #8
 8004750:	d112      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004752:	4b82      	ldr	r3, [pc, #520]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800475a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800475e:	d10b      	bne.n	8004778 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004760:	4b7e      	ldr	r3, [pc, #504]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d05b      	beq.n	8004824 <HAL_RCC_OscConfig+0x108>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d157      	bne.n	8004824 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	e242      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004780:	d106      	bne.n	8004790 <HAL_RCC_OscConfig+0x74>
 8004782:	4b76      	ldr	r3, [pc, #472]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a75      	ldr	r2, [pc, #468]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	e01d      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x98>
 800479a:	4b70      	ldr	r3, [pc, #448]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a6f      	ldr	r2, [pc, #444]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b6d      	ldr	r3, [pc, #436]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6c      	ldr	r2, [pc, #432]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0xb0>
 80047b4:	4b69      	ldr	r3, [pc, #420]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a68      	ldr	r2, [pc, #416]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	4b66      	ldr	r3, [pc, #408]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a65      	ldr	r2, [pc, #404]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d013      	beq.n	80047fc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d4:	f7ff fc22 	bl	800401c <HAL_GetTick>
 80047d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	e008      	b.n	80047ee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047dc:	f7ff fc1e 	bl	800401c <HAL_GetTick>
 80047e0:	4602      	mov	r2, r0
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	1ad3      	subs	r3, r2, r3
 80047e6:	2b64      	cmp	r3, #100	@ 0x64
 80047e8:	d901      	bls.n	80047ee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e207      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047ee:	4b5b      	ldr	r3, [pc, #364]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0f0      	beq.n	80047dc <HAL_RCC_OscConfig+0xc0>
 80047fa:	e014      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7ff fc0e 	bl	800401c <HAL_GetTick>
 8004800:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	e008      	b.n	8004816 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004804:	f7ff fc0a 	bl	800401c <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	2b64      	cmp	r3, #100	@ 0x64
 8004810:	d901      	bls.n	8004816 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004812:	2303      	movs	r3, #3
 8004814:	e1f3      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004816:	4b51      	ldr	r3, [pc, #324]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d1f0      	bne.n	8004804 <HAL_RCC_OscConfig+0xe8>
 8004822:	e000      	b.n	8004826 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004824:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d063      	beq.n	80048fa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004832:	4b4a      	ldr	r3, [pc, #296]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	f003 030c 	and.w	r3, r3, #12
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800483e:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004840:	689b      	ldr	r3, [r3, #8]
 8004842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004846:	2b08      	cmp	r3, #8
 8004848:	d11c      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800484a:	4b44      	ldr	r3, [pc, #272]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d116      	bne.n	8004884 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004856:	4b41      	ldr	r3, [pc, #260]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d005      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e1c7      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800486e:	4b3b      	ldr	r3, [pc, #236]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	00db      	lsls	r3, r3, #3
 800487c:	4937      	ldr	r1, [pc, #220]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 800487e:	4313      	orrs	r3, r2
 8004880:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004882:	e03a      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d020      	beq.n	80048ce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800488c:	4b34      	ldr	r3, [pc, #208]	@ (8004960 <HAL_RCC_OscConfig+0x244>)
 800488e:	2201      	movs	r2, #1
 8004890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004892:	f7ff fbc3 	bl	800401c <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004898:	e008      	b.n	80048ac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489a:	f7ff fbbf 	bl	800401c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	1ad3      	subs	r3, r2, r3
 80048a4:	2b02      	cmp	r3, #2
 80048a6:	d901      	bls.n	80048ac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048a8:	2303      	movs	r3, #3
 80048aa:	e1a8      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ac:	4b2b      	ldr	r3, [pc, #172]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f003 0302 	and.w	r3, r3, #2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d0f0      	beq.n	800489a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b8:	4b28      	ldr	r3, [pc, #160]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4925      	ldr	r1, [pc, #148]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
 80048cc:	e015      	b.n	80048fa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ce:	4b24      	ldr	r3, [pc, #144]	@ (8004960 <HAL_RCC_OscConfig+0x244>)
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048d4:	f7ff fba2 	bl	800401c <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048dc:	f7ff fb9e 	bl	800401c <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e187      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ee:	4b1b      	ldr	r3, [pc, #108]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d036      	beq.n	8004974 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d016      	beq.n	800493c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800490e:	4b15      	ldr	r3, [pc, #84]	@ (8004964 <HAL_RCC_OscConfig+0x248>)
 8004910:	2201      	movs	r2, #1
 8004912:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004914:	f7ff fb82 	bl	800401c <HAL_GetTick>
 8004918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	e008      	b.n	800492e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491c:	f7ff fb7e 	bl	800401c <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	2b02      	cmp	r3, #2
 8004928:	d901      	bls.n	800492e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800492a:	2303      	movs	r3, #3
 800492c:	e167      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800492e:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_RCC_OscConfig+0x240>)
 8004930:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d0f0      	beq.n	800491c <HAL_RCC_OscConfig+0x200>
 800493a:	e01b      	b.n	8004974 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800493c:	4b09      	ldr	r3, [pc, #36]	@ (8004964 <HAL_RCC_OscConfig+0x248>)
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004942:	f7ff fb6b 	bl	800401c <HAL_GetTick>
 8004946:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004948:	e00e      	b.n	8004968 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800494a:	f7ff fb67 	bl	800401c <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d907      	bls.n	8004968 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004958:	2303      	movs	r3, #3
 800495a:	e150      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
 800495c:	40023800 	.word	0x40023800
 8004960:	42470000 	.word	0x42470000
 8004964:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004968:	4b88      	ldr	r3, [pc, #544]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 800496a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d1ea      	bne.n	800494a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 8097 	beq.w	8004ab0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004982:	2300      	movs	r3, #0
 8004984:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004986:	4b81      	ldr	r3, [pc, #516]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10f      	bne.n	80049b2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004992:	2300      	movs	r3, #0
 8004994:	60bb      	str	r3, [r7, #8]
 8004996:	4b7d      	ldr	r3, [pc, #500]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	4a7c      	ldr	r2, [pc, #496]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80049a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80049a2:	4b7a      	ldr	r3, [pc, #488]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049aa:	60bb      	str	r3, [r7, #8]
 80049ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ae:	2301      	movs	r3, #1
 80049b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049b2:	4b77      	ldr	r3, [pc, #476]	@ (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d118      	bne.n	80049f0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049be:	4b74      	ldr	r3, [pc, #464]	@ (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a73      	ldr	r2, [pc, #460]	@ (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049ca:	f7ff fb27 	bl	800401c <HAL_GetTick>
 80049ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	e008      	b.n	80049e4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d2:	f7ff fb23 	bl	800401c <HAL_GetTick>
 80049d6:	4602      	mov	r2, r0
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d901      	bls.n	80049e4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049e0:	2303      	movs	r3, #3
 80049e2:	e10c      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e4:	4b6a      	ldr	r3, [pc, #424]	@ (8004b90 <HAL_RCC_OscConfig+0x474>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d0f0      	beq.n	80049d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d106      	bne.n	8004a06 <HAL_RCC_OscConfig+0x2ea>
 80049f8:	4b64      	ldr	r3, [pc, #400]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fc:	4a63      	ldr	r2, [pc, #396]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 80049fe:	f043 0301 	orr.w	r3, r3, #1
 8004a02:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a04:	e01c      	b.n	8004a40 <HAL_RCC_OscConfig+0x324>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	2b05      	cmp	r3, #5
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x30c>
 8004a0e:	4b5f      	ldr	r3, [pc, #380]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a12:	4a5e      	ldr	r2, [pc, #376]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a14:	f043 0304 	orr.w	r3, r3, #4
 8004a18:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	4a5b      	ldr	r2, [pc, #364]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a20:	f043 0301 	orr.w	r3, r3, #1
 8004a24:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a26:	e00b      	b.n	8004a40 <HAL_RCC_OscConfig+0x324>
 8004a28:	4b58      	ldr	r3, [pc, #352]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a2c:	4a57      	ldr	r2, [pc, #348]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a2e:	f023 0301 	bic.w	r3, r3, #1
 8004a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a34:	4b55      	ldr	r3, [pc, #340]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a38:	4a54      	ldr	r2, [pc, #336]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a3a:	f023 0304 	bic.w	r3, r3, #4
 8004a3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d015      	beq.n	8004a74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a48:	f7ff fae8 	bl	800401c <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a4e:	e00a      	b.n	8004a66 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	f7ff fae4 	bl	800401c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e0cb      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a66:	4b49      	ldr	r3, [pc, #292]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d0ee      	beq.n	8004a50 <HAL_RCC_OscConfig+0x334>
 8004a72:	e014      	b.n	8004a9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a74:	f7ff fad2 	bl	800401c <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7a:	e00a      	b.n	8004a92 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a7c:	f7ff face 	bl	800401c <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e0b5      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a92:	4b3e      	ldr	r3, [pc, #248]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1ee      	bne.n	8004a7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a9e:	7dfb      	ldrb	r3, [r7, #23]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d105      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aa4:	4b39      	ldr	r3, [pc, #228]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	4a38      	ldr	r2, [pc, #224]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004aaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004aae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 80a1 	beq.w	8004bfc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aba:	4b34      	ldr	r3, [pc, #208]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	f003 030c 	and.w	r3, r3, #12
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d05c      	beq.n	8004b80 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d141      	bne.n	8004b52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ace:	4b31      	ldr	r3, [pc, #196]	@ (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad4:	f7ff faa2 	bl	800401c <HAL_GetTick>
 8004ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004adc:	f7ff fa9e 	bl	800401c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e087      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aee:	4b27      	ldr	r3, [pc, #156]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1f0      	bne.n	8004adc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69da      	ldr	r2, [r3, #28]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b08:	019b      	lsls	r3, r3, #6
 8004b0a:	431a      	orrs	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	085b      	lsrs	r3, r3, #1
 8004b12:	3b01      	subs	r3, #1
 8004b14:	041b      	lsls	r3, r3, #16
 8004b16:	431a      	orrs	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1c:	061b      	lsls	r3, r3, #24
 8004b1e:	491b      	ldr	r1, [pc, #108]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b24:	4b1b      	ldr	r3, [pc, #108]	@ (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004b26:	2201      	movs	r2, #1
 8004b28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2a:	f7ff fa77 	bl	800401c <HAL_GetTick>
 8004b2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b30:	e008      	b.n	8004b44 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b32:	f7ff fa73 	bl	800401c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e05c      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b44:	4b11      	ldr	r3, [pc, #68]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <HAL_RCC_OscConfig+0x416>
 8004b50:	e054      	b.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b52:	4b10      	ldr	r3, [pc, #64]	@ (8004b94 <HAL_RCC_OscConfig+0x478>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7ff fa60 	bl	800401c <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b60:	f7ff fa5c 	bl	800401c <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b02      	cmp	r3, #2
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e045      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b72:	4b06      	ldr	r3, [pc, #24]	@ (8004b8c <HAL_RCC_OscConfig+0x470>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0x444>
 8004b7e:	e03d      	b.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d107      	bne.n	8004b98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e038      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	40007000 	.word	0x40007000
 8004b94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b98:	4b1b      	ldr	r3, [pc, #108]	@ (8004c08 <HAL_RCC_OscConfig+0x4ec>)
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d028      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d121      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d11a      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bc2:	68fa      	ldr	r2, [r7, #12]
 8004bc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bc8:	4013      	ands	r3, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d111      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bde:	085b      	lsrs	r3, r3, #1
 8004be0:	3b01      	subs	r3, #1
 8004be2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d107      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d001      	beq.n	8004bfc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004bf8:	2301      	movs	r3, #1
 8004bfa:	e000      	b.n	8004bfe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	40023800 	.word	0x40023800

08004c0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b084      	sub	sp, #16
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e0cc      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c20:	4b68      	ldr	r3, [pc, #416]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 0307 	and.w	r3, r3, #7
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d90c      	bls.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c2e:	4b65      	ldr	r3, [pc, #404]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	b2d2      	uxtb	r2, r2
 8004c34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c36:	4b63      	ldr	r3, [pc, #396]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0307 	and.w	r3, r3, #7
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d001      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e0b8      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d020      	beq.n	8004c96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0304 	and.w	r3, r3, #4
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d005      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c60:	4b59      	ldr	r3, [pc, #356]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4a58      	ldr	r2, [pc, #352]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0308 	and.w	r3, r3, #8
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c78:	4b53      	ldr	r3, [pc, #332]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	4a52      	ldr	r2, [pc, #328]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c84:	4b50      	ldr	r3, [pc, #320]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	494d      	ldr	r1, [pc, #308]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004c92:	4313      	orrs	r3, r2
 8004c94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d044      	beq.n	8004d2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d107      	bne.n	8004cba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004caa:	4b47      	ldr	r3, [pc, #284]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d119      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	e07f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d003      	beq.n	8004cca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cc6:	2b03      	cmp	r3, #3
 8004cc8:	d107      	bne.n	8004cda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cca:	4b3f      	ldr	r3, [pc, #252]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e06f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cda:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d101      	bne.n	8004cea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e067      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cea:	4b37      	ldr	r3, [pc, #220]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f023 0203 	bic.w	r2, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	4934      	ldr	r1, [pc, #208]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004cfc:	f7ff f98e 	bl	800401c <HAL_GetTick>
 8004d00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d02:	e00a      	b.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d04:	f7ff f98a 	bl	800401c <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d901      	bls.n	8004d1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e04f      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d1a:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 020c 	and.w	r2, r3, #12
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d1eb      	bne.n	8004d04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d2c:	4b25      	ldr	r3, [pc, #148]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0307 	and.w	r3, r3, #7
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d20c      	bcs.n	8004d54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d3a:	4b22      	ldr	r3, [pc, #136]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	b2d2      	uxtb	r2, r2
 8004d40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d42:	4b20      	ldr	r3, [pc, #128]	@ (8004dc4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	683a      	ldr	r2, [r7, #0]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d001      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e032      	b.n	8004dba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0304 	and.w	r3, r3, #4
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d60:	4b19      	ldr	r3, [pc, #100]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	4916      	ldr	r1, [pc, #88]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d009      	beq.n	8004d92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d7e:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	490e      	ldr	r1, [pc, #56]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d92:	f000 f821 	bl	8004dd8 <HAL_RCC_GetSysClockFreq>
 8004d96:	4602      	mov	r2, r0
 8004d98:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	091b      	lsrs	r3, r3, #4
 8004d9e:	f003 030f 	and.w	r3, r3, #15
 8004da2:	490a      	ldr	r1, [pc, #40]	@ (8004dcc <HAL_RCC_ClockConfig+0x1c0>)
 8004da4:	5ccb      	ldrb	r3, [r1, r3]
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	4a09      	ldr	r2, [pc, #36]	@ (8004dd0 <HAL_RCC_ClockConfig+0x1c4>)
 8004dac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004dae:	4b09      	ldr	r3, [pc, #36]	@ (8004dd4 <HAL_RCC_ClockConfig+0x1c8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7fe ffc6 	bl	8003d44 <HAL_InitTick>

  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	40023c00 	.word	0x40023c00
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	0800f730 	.word	0x0800f730
 8004dd0:	20000088 	.word	0x20000088
 8004dd4:	2000008c 	.word	0x2000008c

08004dd8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b094      	sub	sp, #80	@ 0x50
 8004dde:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	647b      	str	r3, [r7, #68]	@ 0x44
 8004de4:	2300      	movs	r3, #0
 8004de6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004de8:	2300      	movs	r3, #0
 8004dea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004dec:	2300      	movs	r3, #0
 8004dee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004df0:	4b79      	ldr	r3, [pc, #484]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f003 030c 	and.w	r3, r3, #12
 8004df8:	2b08      	cmp	r3, #8
 8004dfa:	d00d      	beq.n	8004e18 <HAL_RCC_GetSysClockFreq+0x40>
 8004dfc:	2b08      	cmp	r3, #8
 8004dfe:	f200 80e1 	bhi.w	8004fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <HAL_RCC_GetSysClockFreq+0x34>
 8004e06:	2b04      	cmp	r3, #4
 8004e08:	d003      	beq.n	8004e12 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e0a:	e0db      	b.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e0c:	4b73      	ldr	r3, [pc, #460]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004e0e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8004e10:	e0db      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e12:	4b73      	ldr	r3, [pc, #460]	@ (8004fe0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e14:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e16:	e0d8      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e18:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e20:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e22:	4b6d      	ldr	r3, [pc, #436]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d063      	beq.n	8004ef6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e2e:	4b6a      	ldr	r3, [pc, #424]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	099b      	lsrs	r3, r3, #6
 8004e34:	2200      	movs	r2, #0
 8004e36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e42:	2300      	movs	r3, #0
 8004e44:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	462b      	mov	r3, r5
 8004e4e:	f04f 0000 	mov.w	r0, #0
 8004e52:	f04f 0100 	mov.w	r1, #0
 8004e56:	0159      	lsls	r1, r3, #5
 8004e58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e5c:	0150      	lsls	r0, r2, #5
 8004e5e:	4602      	mov	r2, r0
 8004e60:	460b      	mov	r3, r1
 8004e62:	4621      	mov	r1, r4
 8004e64:	1a51      	subs	r1, r2, r1
 8004e66:	6139      	str	r1, [r7, #16]
 8004e68:	4629      	mov	r1, r5
 8004e6a:	eb63 0301 	sbc.w	r3, r3, r1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	f04f 0200 	mov.w	r2, #0
 8004e74:	f04f 0300 	mov.w	r3, #0
 8004e78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	018b      	lsls	r3, r1, #6
 8004e80:	4651      	mov	r1, sl
 8004e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e86:	4651      	mov	r1, sl
 8004e88:	018a      	lsls	r2, r1, #6
 8004e8a:	4651      	mov	r1, sl
 8004e8c:	ebb2 0801 	subs.w	r8, r2, r1
 8004e90:	4659      	mov	r1, fp
 8004e92:	eb63 0901 	sbc.w	r9, r3, r1
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eaa:	4690      	mov	r8, r2
 8004eac:	4699      	mov	r9, r3
 8004eae:	4623      	mov	r3, r4
 8004eb0:	eb18 0303 	adds.w	r3, r8, r3
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	462b      	mov	r3, r5
 8004eb8:	eb49 0303 	adc.w	r3, r9, r3
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eca:	4629      	mov	r1, r5
 8004ecc:	024b      	lsls	r3, r1, #9
 8004ece:	4621      	mov	r1, r4
 8004ed0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	024a      	lsls	r2, r1, #9
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ede:	2200      	movs	r2, #0
 8004ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ee2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ee4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ee8:	f7fb ff06 	bl	8000cf8 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ef4:	e058      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ef6:	4b38      	ldr	r3, [pc, #224]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	099b      	lsrs	r3, r3, #6
 8004efc:	2200      	movs	r2, #0
 8004efe:	4618      	mov	r0, r3
 8004f00:	4611      	mov	r1, r2
 8004f02:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f06:	623b      	str	r3, [r7, #32]
 8004f08:	2300      	movs	r3, #0
 8004f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f0c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f10:	4642      	mov	r2, r8
 8004f12:	464b      	mov	r3, r9
 8004f14:	f04f 0000 	mov.w	r0, #0
 8004f18:	f04f 0100 	mov.w	r1, #0
 8004f1c:	0159      	lsls	r1, r3, #5
 8004f1e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f22:	0150      	lsls	r0, r2, #5
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4641      	mov	r1, r8
 8004f2a:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f2e:	4649      	mov	r1, r9
 8004f30:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f40:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f44:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f48:	ebb2 040a 	subs.w	r4, r2, sl
 8004f4c:	eb63 050b 	sbc.w	r5, r3, fp
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	f04f 0300 	mov.w	r3, #0
 8004f58:	00eb      	lsls	r3, r5, #3
 8004f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f5e:	00e2      	lsls	r2, r4, #3
 8004f60:	4614      	mov	r4, r2
 8004f62:	461d      	mov	r5, r3
 8004f64:	4643      	mov	r3, r8
 8004f66:	18e3      	adds	r3, r4, r3
 8004f68:	603b      	str	r3, [r7, #0]
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	eb45 0303 	adc.w	r3, r5, r3
 8004f70:	607b      	str	r3, [r7, #4]
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f7e:	4629      	mov	r1, r5
 8004f80:	028b      	lsls	r3, r1, #10
 8004f82:	4621      	mov	r1, r4
 8004f84:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f88:	4621      	mov	r1, r4
 8004f8a:	028a      	lsls	r2, r1, #10
 8004f8c:	4610      	mov	r0, r2
 8004f8e:	4619      	mov	r1, r3
 8004f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f92:	2200      	movs	r2, #0
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	61fa      	str	r2, [r7, #28]
 8004f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f9c:	f7fb feac 	bl	8000cf8 <__aeabi_uldivmod>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8004fd8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	0c1b      	lsrs	r3, r3, #16
 8004fae:	f003 0303 	and.w	r3, r3, #3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	005b      	lsls	r3, r3, #1
 8004fb6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004fb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fc2:	e002      	b.n	8004fca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fc4:	4b05      	ldr	r3, [pc, #20]	@ (8004fdc <HAL_RCC_GetSysClockFreq+0x204>)
 8004fc6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3750      	adds	r7, #80	@ 0x50
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fd6:	bf00      	nop
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	00f42400 	.word	0x00f42400
 8004fe0:	007a1200 	.word	0x007a1200

08004fe4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fe8:	4b03      	ldr	r3, [pc, #12]	@ (8004ff8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fea:	681b      	ldr	r3, [r3, #0]
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	20000088 	.word	0x20000088

08004ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005000:	f7ff fff0 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 8005004:	4602      	mov	r2, r0
 8005006:	4b05      	ldr	r3, [pc, #20]	@ (800501c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	0a9b      	lsrs	r3, r3, #10
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	4903      	ldr	r1, [pc, #12]	@ (8005020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005012:	5ccb      	ldrb	r3, [r1, r3]
 8005014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40023800 	.word	0x40023800
 8005020:	0800f740 	.word	0x0800f740

08005024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005028:	f7ff ffdc 	bl	8004fe4 <HAL_RCC_GetHCLKFreq>
 800502c:	4602      	mov	r2, r0
 800502e:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	0b5b      	lsrs	r3, r3, #13
 8005034:	f003 0307 	and.w	r3, r3, #7
 8005038:	4903      	ldr	r1, [pc, #12]	@ (8005048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800503a:	5ccb      	ldrb	r3, [r1, r3]
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40023800 	.word	0x40023800
 8005048:	0800f740 	.word	0x0800f740

0800504c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	220f      	movs	r2, #15
 800505a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800505c:	4b12      	ldr	r3, [pc, #72]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f003 0203 	and.w	r2, r3, #3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005068:	4b0f      	ldr	r3, [pc, #60]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005074:	4b0c      	ldr	r3, [pc, #48]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005080:	4b09      	ldr	r3, [pc, #36]	@ (80050a8 <HAL_RCC_GetClockConfig+0x5c>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	08db      	lsrs	r3, r3, #3
 8005086:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800508e:	4b07      	ldr	r3, [pc, #28]	@ (80050ac <HAL_RCC_GetClockConfig+0x60>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0207 	and.w	r2, r3, #7
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	601a      	str	r2, [r3, #0]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800
 80050ac:	40023c00 	.word	0x40023c00

080050b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d105      	bne.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d035      	beq.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050d8:	4b62      	ldr	r3, [pc, #392]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050da:	2200      	movs	r2, #0
 80050dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050de:	f7fe ff9d 	bl	800401c <HAL_GetTick>
 80050e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050e4:	e008      	b.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050e6:	f7fe ff99 	bl	800401c <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d901      	bls.n	80050f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e0b0      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050f8:	4b5b      	ldr	r3, [pc, #364]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1f0      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	019a      	lsls	r2, r3, #6
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	071b      	lsls	r3, r3, #28
 8005110:	4955      	ldr	r1, [pc, #340]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005112:	4313      	orrs	r3, r2
 8005114:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005118:	4b52      	ldr	r3, [pc, #328]	@ (8005264 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800511a:	2201      	movs	r2, #1
 800511c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800511e:	f7fe ff7d 	bl	800401c <HAL_GetTick>
 8005122:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005124:	e008      	b.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005126:	f7fe ff79 	bl	800401c <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e090      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005138:	4b4b      	ldr	r3, [pc, #300]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	f000 8083 	beq.w	8005258 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
 8005156:	4b44      	ldr	r3, [pc, #272]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800515a:	4a43      	ldr	r2, [pc, #268]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800515c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005160:	6413      	str	r3, [r2, #64]	@ 0x40
 8005162:	4b41      	ldr	r3, [pc, #260]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800516a:	60fb      	str	r3, [r7, #12]
 800516c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800516e:	4b3f      	ldr	r3, [pc, #252]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a3e      	ldr	r2, [pc, #248]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005178:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800517a:	f7fe ff4f 	bl	800401c <HAL_GetTick>
 800517e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005180:	e008      	b.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005182:	f7fe ff4b 	bl	800401c <HAL_GetTick>
 8005186:	4602      	mov	r2, r0
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	2b02      	cmp	r3, #2
 800518e:	d901      	bls.n	8005194 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e062      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005194:	4b35      	ldr	r3, [pc, #212]	@ (800526c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800519c:	2b00      	cmp	r3, #0
 800519e:	d0f0      	beq.n	8005182 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051a0:	4b31      	ldr	r3, [pc, #196]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d02f      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80051b8:	693a      	ldr	r2, [r7, #16]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d028      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051be:	4b2a      	ldr	r3, [pc, #168]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051c8:	4b29      	ldr	r3, [pc, #164]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051ce:	4b28      	ldr	r3, [pc, #160]	@ (8005270 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051d4:	4a24      	ldr	r2, [pc, #144]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051da:	4b23      	ldr	r3, [pc, #140]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051de:	f003 0301 	and.w	r3, r3, #1
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d114      	bne.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80051e6:	f7fe ff19 	bl	800401c <HAL_GetTick>
 80051ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ec:	e00a      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051ee:	f7fe ff15 	bl	800401c <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d901      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e02a      	b.n	800525a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005204:	4b18      	ldr	r3, [pc, #96]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0ee      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800521c:	d10d      	bne.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800521e:	4b12      	ldr	r3, [pc, #72]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800522e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005232:	490d      	ldr	r1, [pc, #52]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005234:	4313      	orrs	r3, r2
 8005236:	608b      	str	r3, [r1, #8]
 8005238:	e005      	b.n	8005246 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800523a:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	4a0a      	ldr	r2, [pc, #40]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005240:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005244:	6093      	str	r3, [r2, #8]
 8005246:	4b08      	ldr	r3, [pc, #32]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005248:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	68db      	ldr	r3, [r3, #12]
 800524e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005252:	4905      	ldr	r1, [pc, #20]	@ (8005268 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005254:	4313      	orrs	r3, r2
 8005256:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	42470068 	.word	0x42470068
 8005268:	40023800 	.word	0x40023800
 800526c:	40007000 	.word	0x40007000
 8005270:	42470e40 	.word	0x42470e40

08005274 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d101      	bne.n	800528a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e073      	b.n	8005372 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	7f5b      	ldrb	r3, [r3, #29]
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	d105      	bne.n	80052a0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f7fe fbce 	bl	8003a3c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2202      	movs	r2, #2
 80052a4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0310 	and.w	r3, r3, #16
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d055      	beq.n	8005360 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	22ca      	movs	r2, #202	@ 0xca
 80052ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2253      	movs	r2, #83	@ 0x53
 80052c2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f000 fa49 	bl	800575c <RTC_EnterInitMode>
 80052ca:	4603      	mov	r3, r0
 80052cc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d12c      	bne.n	800532e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	6812      	ldr	r2, [r2, #0]
 80052de:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80052e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052e6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6899      	ldr	r1, [r3, #8]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	695b      	ldr	r3, [r3, #20]
 80052fc:	431a      	orrs	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	430a      	orrs	r2, r1
 8005304:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	68d2      	ldr	r2, [r2, #12]
 800530e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6919      	ldr	r1, [r3, #16]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	041a      	lsls	r2, r3, #16
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	430a      	orrs	r2, r1
 8005322:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fa50 	bl	80057ca <RTC_ExitInitMode>
 800532a:	4603      	mov	r3, r0
 800532c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800532e:	7bfb      	ldrb	r3, [r7, #15]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d110      	bne.n	8005356 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005342:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699a      	ldr	r2, [r3, #24]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	430a      	orrs	r2, r1
 8005354:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	22ff      	movs	r2, #255	@ 0xff
 800535c:	625a      	str	r2, [r3, #36]	@ 0x24
 800535e:	e001      	b.n	8005364 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005360:	2300      	movs	r3, #0
 8005362:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005364:	7bfb      	ldrb	r3, [r7, #15]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d102      	bne.n	8005370 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2201      	movs	r2, #1
 800536e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005370:	7bfb      	ldrb	r3, [r7, #15]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800537a:	b590      	push	{r4, r7, lr}
 800537c:	b087      	sub	sp, #28
 800537e:	af00      	add	r7, sp, #0
 8005380:	60f8      	str	r0, [r7, #12]
 8005382:	60b9      	str	r1, [r7, #8]
 8005384:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	7f1b      	ldrb	r3, [r3, #28]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d101      	bne.n	8005396 <HAL_RTC_SetTime+0x1c>
 8005392:	2302      	movs	r3, #2
 8005394:	e087      	b.n	80054a6 <HAL_RTC_SetTime+0x12c>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2201      	movs	r2, #1
 800539a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2202      	movs	r2, #2
 80053a0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d126      	bne.n	80053f6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d102      	bne.n	80053bc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	2200      	movs	r2, #0
 80053ba:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fa27 	bl	8005814 <RTC_ByteToBcd2>
 80053c6:	4603      	mov	r3, r0
 80053c8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	785b      	ldrb	r3, [r3, #1]
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fa20 	bl	8005814 <RTC_ByteToBcd2>
 80053d4:	4603      	mov	r3, r0
 80053d6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053d8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	789b      	ldrb	r3, [r3, #2]
 80053de:	4618      	mov	r0, r3
 80053e0:	f000 fa18 	bl	8005814 <RTC_ByteToBcd2>
 80053e4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80053e6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	78db      	ldrb	r3, [r3, #3]
 80053ee:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e018      	b.n	8005428 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	785b      	ldrb	r3, [r3, #1]
 8005414:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005416:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800541c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	78db      	ldrb	r3, [r3, #3]
 8005422:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	22ca      	movs	r2, #202	@ 0xca
 800542e:	625a      	str	r2, [r3, #36]	@ 0x24
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2253      	movs	r2, #83	@ 0x53
 8005436:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f98f 	bl	800575c <RTC_EnterInitMode>
 800543e:	4603      	mov	r3, r0
 8005440:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8005442:	7cfb      	ldrb	r3, [r7, #19]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d120      	bne.n	800548a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8005452:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005456:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005466:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6899      	ldr	r1, [r3, #8]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	691b      	ldr	r3, [r3, #16]
 8005476:	431a      	orrs	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	430a      	orrs	r2, r1
 800547e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005480:	68f8      	ldr	r0, [r7, #12]
 8005482:	f000 f9a2 	bl	80057ca <RTC_ExitInitMode>
 8005486:	4603      	mov	r3, r0
 8005488:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800548a:	7cfb      	ldrb	r3, [r7, #19]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d102      	bne.n	8005496 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2201      	movs	r2, #1
 8005494:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	22ff      	movs	r2, #255	@ 0xff
 800549c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]

  return status;
 80054a4:	7cfb      	ldrb	r3, [r7, #19]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd90      	pop	{r4, r7, pc}

080054ae <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054ae:	b580      	push	{r7, lr}
 80054b0:	b086      	sub	sp, #24
 80054b2:	af00      	add	r7, sp, #0
 80054b4:	60f8      	str	r0, [r7, #12]
 80054b6:	60b9      	str	r1, [r7, #8]
 80054b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80054e0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80054e4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	0c1b      	lsrs	r3, r3, #16
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	0a1b      	lsrs	r3, r3, #8
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005500:	b2da      	uxtb	r2, r3
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	b2db      	uxtb	r3, r3
 800550a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800550e:	b2da      	uxtb	r2, r3
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	0d9b      	lsrs	r3, r3, #22
 8005518:	b2db      	uxtb	r3, r3
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d11a      	bne.n	8005560 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	4618      	mov	r0, r3
 8005530:	f000 f98e 	bl	8005850 <RTC_Bcd2ToByte>
 8005534:	4603      	mov	r3, r0
 8005536:	461a      	mov	r2, r3
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	785b      	ldrb	r3, [r3, #1]
 8005540:	4618      	mov	r0, r3
 8005542:	f000 f985 	bl	8005850 <RTC_Bcd2ToByte>
 8005546:	4603      	mov	r3, r0
 8005548:	461a      	mov	r2, r3
 800554a:	68bb      	ldr	r3, [r7, #8]
 800554c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	789b      	ldrb	r3, [r3, #2]
 8005552:	4618      	mov	r0, r3
 8005554:	f000 f97c 	bl	8005850 <RTC_Bcd2ToByte>
 8005558:	4603      	mov	r3, r0
 800555a:	461a      	mov	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3718      	adds	r7, #24
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800556a:	b590      	push	{r4, r7, lr}
 800556c:	b087      	sub	sp, #28
 800556e:	af00      	add	r7, sp, #0
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	7f1b      	ldrb	r3, [r3, #28]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_RTC_SetDate+0x1c>
 8005582:	2302      	movs	r3, #2
 8005584:	e071      	b.n	800566a <HAL_RTC_SetDate+0x100>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2202      	movs	r2, #2
 8005590:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d10e      	bne.n	80055b6 <HAL_RTC_SetDate+0x4c>
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	785b      	ldrb	r3, [r3, #1]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d008      	beq.n	80055b6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	785b      	ldrb	r3, [r3, #1]
 80055a8:	f023 0310 	bic.w	r3, r3, #16
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	330a      	adds	r3, #10
 80055b0:	b2da      	uxtb	r2, r3
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d11c      	bne.n	80055f6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	78db      	ldrb	r3, [r3, #3]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f000 f927 	bl	8005814 <RTC_ByteToBcd2>
 80055c6:	4603      	mov	r3, r0
 80055c8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	785b      	ldrb	r3, [r3, #1]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f000 f920 	bl	8005814 <RTC_ByteToBcd2>
 80055d4:	4603      	mov	r3, r0
 80055d6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055d8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	789b      	ldrb	r3, [r3, #2]
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 f918 	bl	8005814 <RTC_ByteToBcd2>
 80055e4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80055e6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80055ea:	68bb      	ldr	r3, [r7, #8]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80055f0:	4313      	orrs	r3, r2
 80055f2:	617b      	str	r3, [r7, #20]
 80055f4:	e00e      	b.n	8005614 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	78db      	ldrb	r3, [r3, #3]
 80055fa:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	785b      	ldrb	r3, [r3, #1]
 8005600:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005602:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005604:	68ba      	ldr	r2, [r7, #8]
 8005606:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005608:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	22ca      	movs	r2, #202	@ 0xca
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2253      	movs	r2, #83	@ 0x53
 8005622:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005624:	68f8      	ldr	r0, [r7, #12]
 8005626:	f000 f899 	bl	800575c <RTC_EnterInitMode>
 800562a:	4603      	mov	r3, r0
 800562c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800562e:	7cfb      	ldrb	r3, [r7, #19]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10c      	bne.n	800564e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800563e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005642:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005644:	68f8      	ldr	r0, [r7, #12]
 8005646:	f000 f8c0 	bl	80057ca <RTC_ExitInitMode>
 800564a:	4603      	mov	r3, r0
 800564c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800564e:	7cfb      	ldrb	r3, [r7, #19]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	2201      	movs	r2, #1
 8005658:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	22ff      	movs	r2, #255	@ 0xff
 8005660:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	771a      	strb	r2, [r3, #28]

  return status;
 8005668:	7cfb      	ldrb	r3, [r7, #19]
}
 800566a:	4618      	mov	r0, r3
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	bd90      	pop	{r4, r7, pc}

08005672 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b086      	sub	sp, #24
 8005676:	af00      	add	r7, sp, #0
 8005678:	60f8      	str	r0, [r7, #12]
 800567a:	60b9      	str	r1, [r7, #8]
 800567c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800568c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005690:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005692:	697b      	ldr	r3, [r7, #20]
 8005694:	0c1b      	lsrs	r3, r3, #16
 8005696:	b2da      	uxtb	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	0a1b      	lsrs	r3, r3, #8
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	f003 031f 	and.w	r3, r3, #31
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	0b5b      	lsrs	r3, r3, #13
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	b2da      	uxtb	r2, r3
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d11a      	bne.n	8005706 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	78db      	ldrb	r3, [r3, #3]
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 f8bb 	bl	8005850 <RTC_Bcd2ToByte>
 80056da:	4603      	mov	r3, r0
 80056dc:	461a      	mov	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 f8b2 	bl	8005850 <RTC_Bcd2ToByte>
 80056ec:	4603      	mov	r3, r0
 80056ee:	461a      	mov	r2, r3
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	789b      	ldrb	r3, [r3, #2]
 80056f8:	4618      	mov	r0, r3
 80056fa:	f000 f8a9 	bl	8005850 <RTC_Bcd2ToByte>
 80056fe:	4603      	mov	r3, r0
 8005700:	461a      	mov	r2, r3
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a0d      	ldr	r2, [pc, #52]	@ (8005758 <HAL_RTC_WaitForSynchro+0x48>)
 8005722:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005724:	f7fe fc7a 	bl	800401c <HAL_GetTick>
 8005728:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800572a:	e009      	b.n	8005740 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800572c:	f7fe fc76 	bl	800401c <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800573a:	d901      	bls.n	8005740 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e007      	b.n	8005750 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0ee      	beq.n	800572c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	00017f5f 	.word	0x00017f5f

0800575c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005768:	2300      	movs	r3, #0
 800576a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005776:	2b00      	cmp	r3, #0
 8005778:	d122      	bne.n	80057c0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68da      	ldr	r2, [r3, #12]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005788:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800578a:	f7fe fc47 	bl	800401c <HAL_GetTick>
 800578e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005790:	e00c      	b.n	80057ac <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005792:	f7fe fc43 	bl	800401c <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80057a0:	d904      	bls.n	80057ac <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2204      	movs	r2, #4
 80057a6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d102      	bne.n	80057c0 <RTC_EnterInitMode+0x64>
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d1e8      	bne.n	8005792 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80057c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3710      	adds	r7, #16
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}

080057ca <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057ca:	b580      	push	{r7, lr}
 80057cc:	b084      	sub	sp, #16
 80057ce:	af00      	add	r7, sp, #0
 80057d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057d2:	2300      	movs	r3, #0
 80057d4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	68da      	ldr	r2, [r3, #12]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057e4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	f003 0320 	and.w	r3, r3, #32
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d10a      	bne.n	800580a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f7ff ff8b 	bl	8005710 <HAL_RTC_WaitForSynchro>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d004      	beq.n	800580a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2204      	movs	r2, #4
 8005804:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800580a:	7bfb      	ldrb	r3, [r7, #15]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	4603      	mov	r3, r0
 800581c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800581e:	2300      	movs	r3, #0
 8005820:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8005822:	e005      	b.n	8005830 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800582a:	79fb      	ldrb	r3, [r7, #7]
 800582c:	3b0a      	subs	r3, #10
 800582e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8005830:	79fb      	ldrb	r3, [r7, #7]
 8005832:	2b09      	cmp	r3, #9
 8005834:	d8f6      	bhi.n	8005824 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	b2db      	uxtb	r3, r3
 800583a:	011b      	lsls	r3, r3, #4
 800583c:	b2da      	uxtb	r2, r3
 800583e:	79fb      	ldrb	r3, [r7, #7]
 8005840:	4313      	orrs	r3, r2
 8005842:	b2db      	uxtb	r3, r3
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	4603      	mov	r3, r0
 8005858:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800585e:	79fb      	ldrb	r3, [r7, #7]
 8005860:	091b      	lsrs	r3, r3, #4
 8005862:	b2db      	uxtb	r3, r3
 8005864:	461a      	mov	r2, r3
 8005866:	4613      	mov	r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	4413      	add	r3, r2
 800586c:	005b      	lsls	r3, r3, #1
 800586e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	b2da      	uxtb	r2, r3
 8005874:	79fb      	ldrb	r3, [r7, #7]
 8005876:	f003 030f 	and.w	r3, r3, #15
 800587a:	b2db      	uxtb	r3, r3
 800587c:	4413      	add	r3, r2
 800587e:	b2db      	uxtb	r3, r3
}
 8005880:	4618      	mov	r0, r3
 8005882:	3714      	adds	r7, #20
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e07b      	b.n	8005996 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d108      	bne.n	80058b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058ae:	d009      	beq.n	80058c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	61da      	str	r2, [r3, #28]
 80058b6:	e005      	b.n	80058c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d106      	bne.n	80058e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f7fe f8d6 	bl	8003a90 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2202      	movs	r2, #2
 80058e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80058fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800590c:	431a      	orrs	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005916:	431a      	orrs	r2, r3
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	431a      	orrs	r2, r3
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	695b      	ldr	r3, [r3, #20]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	431a      	orrs	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005934:	431a      	orrs	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005948:	ea42 0103 	orr.w	r1, r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005950:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	430a      	orrs	r2, r1
 800595a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	0c1b      	lsrs	r3, r3, #16
 8005962:	f003 0104 	and.w	r1, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	f003 0210 	and.w	r2, r3, #16
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69da      	ldr	r2, [r3, #28]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005984:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3708      	adds	r7, #8
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b088      	sub	sp, #32
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	60f8      	str	r0, [r7, #12]
 80059a6:	60b9      	str	r1, [r7, #8]
 80059a8:	603b      	str	r3, [r7, #0]
 80059aa:	4613      	mov	r3, r2
 80059ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059ae:	2300      	movs	r3, #0
 80059b0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	d101      	bne.n	80059c0 <HAL_SPI_Transmit+0x22>
 80059bc:	2302      	movs	r3, #2
 80059be:	e12d      	b.n	8005c1c <HAL_SPI_Transmit+0x27e>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059c8:	f7fe fb28 	bl	800401c <HAL_GetTick>
 80059cc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80059ce:	88fb      	ldrh	r3, [r7, #6]
 80059d0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b01      	cmp	r3, #1
 80059dc:	d002      	beq.n	80059e4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80059de:	2302      	movs	r3, #2
 80059e0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059e2:	e116      	b.n	8005c12 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_SPI_Transmit+0x52>
 80059ea:	88fb      	ldrh	r3, [r7, #6]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80059f4:	e10d      	b.n	8005c12 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2203      	movs	r2, #3
 80059fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2200      	movs	r2, #0
 8005a02:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	88fa      	ldrh	r2, [r7, #6]
 8005a0e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	88fa      	ldrh	r2, [r7, #6]
 8005a14:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2200      	movs	r2, #0
 8005a26:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a3c:	d10f      	bne.n	8005a5e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681a      	ldr	r2, [r3, #0]
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005a5c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a68:	2b40      	cmp	r3, #64	@ 0x40
 8005a6a:	d007      	beq.n	8005a7c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	681a      	ldr	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a7a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	68db      	ldr	r3, [r3, #12]
 8005a80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a84:	d14f      	bne.n	8005b26 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d002      	beq.n	8005a94 <HAL_SPI_Transmit+0xf6>
 8005a8e:	8afb      	ldrh	r3, [r7, #22]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d142      	bne.n	8005b1a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a98:	881a      	ldrh	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa4:	1c9a      	adds	r2, r3, #2
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	b29a      	uxth	r2, r3
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005ab8:	e02f      	b.n	8005b1a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d112      	bne.n	8005aee <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005acc:	881a      	ldrh	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad8:	1c9a      	adds	r2, r3, #2
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	3b01      	subs	r3, #1
 8005ae6:	b29a      	uxth	r2, r3
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005aec:	e015      	b.n	8005b1a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aee:	f7fe fa95 	bl	800401c <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	683a      	ldr	r2, [r7, #0]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d803      	bhi.n	8005b06 <HAL_SPI_Transmit+0x168>
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b04:	d102      	bne.n	8005b0c <HAL_SPI_Transmit+0x16e>
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d106      	bne.n	8005b1a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8005b0c:	2303      	movs	r3, #3
 8005b0e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	2201      	movs	r2, #1
 8005b14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005b18:	e07b      	b.n	8005c12 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1ca      	bne.n	8005aba <HAL_SPI_Transmit+0x11c>
 8005b24:	e050      	b.n	8005bc8 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	685b      	ldr	r3, [r3, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d002      	beq.n	8005b34 <HAL_SPI_Transmit+0x196>
 8005b2e:	8afb      	ldrh	r3, [r7, #22]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d144      	bne.n	8005bbe <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	330c      	adds	r3, #12
 8005b3e:	7812      	ldrb	r2, [r2, #0]
 8005b40:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b46:	1c5a      	adds	r2, r3, #1
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005b5a:	e030      	b.n	8005bbe <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f003 0302 	and.w	r3, r3, #2
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d113      	bne.n	8005b92 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	7812      	ldrb	r2, [r2, #0]
 8005b76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	3b01      	subs	r3, #1
 8005b8a:	b29a      	uxth	r2, r3
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005b90:	e015      	b.n	8005bbe <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b92:	f7fe fa43 	bl	800401c <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	683a      	ldr	r2, [r7, #0]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	d803      	bhi.n	8005baa <HAL_SPI_Transmit+0x20c>
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ba8:	d102      	bne.n	8005bb0 <HAL_SPI_Transmit+0x212>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d106      	bne.n	8005bbe <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005bbc:	e029      	b.n	8005c12 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1c9      	bne.n	8005b5c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bc8:	69ba      	ldr	r2, [r7, #24]
 8005bca:	6839      	ldr	r1, [r7, #0]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 fbdf 	bl	8006390 <SPI_EndRxTxTransaction>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d10a      	bne.n	8005bfc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be6:	2300      	movs	r3, #0
 8005be8:	613b      	str	r3, [r7, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	77fb      	strb	r3, [r7, #31]
 8005c08:	e003      	b.n	8005c12 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005c1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3720      	adds	r7, #32
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}

08005c24 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b088      	sub	sp, #32
 8005c28:	af02      	add	r7, sp, #8
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	603b      	str	r3, [r7, #0]
 8005c30:	4613      	mov	r3, r2
 8005c32:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d002      	beq.n	8005c4a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005c44:	2302      	movs	r3, #2
 8005c46:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c48:	e0fb      	b.n	8005e42 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c52:	d112      	bne.n	8005c7a <HAL_SPI_Receive+0x56>
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d10e      	bne.n	8005c7a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c64:	88fa      	ldrh	r2, [r7, #6]
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f8ef 	bl	8005e54 <HAL_SPI_TransmitReceive>
 8005c76:	4603      	mov	r3, r0
 8005c78:	e0e8      	b.n	8005e4c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d101      	bne.n	8005c88 <HAL_SPI_Receive+0x64>
 8005c84:	2302      	movs	r3, #2
 8005c86:	e0e1      	b.n	8005e4c <HAL_SPI_Receive+0x228>
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c90:	f7fe f9c4 	bl	800401c <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d002      	beq.n	8005ca2 <HAL_SPI_Receive+0x7e>
 8005c9c:	88fb      	ldrh	r3, [r7, #6]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d102      	bne.n	8005ca8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005ca6:	e0cc      	b.n	8005e42 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2204      	movs	r2, #4
 8005cac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	68ba      	ldr	r2, [r7, #8]
 8005cba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	88fa      	ldrh	r2, [r7, #6]
 8005cc0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	88fa      	ldrh	r2, [r7, #6]
 8005cc6:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005cee:	d10f      	bne.n	8005d10 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005cfe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d0e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d1a:	2b40      	cmp	r3, #64	@ 0x40
 8005d1c:	d007      	beq.n	8005d2e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d2c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d16a      	bne.n	8005e0c <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d36:	e032      	b.n	8005d9e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b01      	cmp	r3, #1
 8005d44:	d115      	bne.n	8005d72 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f103 020c 	add.w	r2, r3, #12
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d52:	7812      	ldrb	r2, [r2, #0]
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b29a      	uxth	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d70:	e015      	b.n	8005d9e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d72:	f7fe f953 	bl	800401c <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	683a      	ldr	r2, [r7, #0]
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d803      	bhi.n	8005d8a <HAL_SPI_Receive+0x166>
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d88:	d102      	bne.n	8005d90 <HAL_SPI_Receive+0x16c>
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d106      	bne.n	8005d9e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005d9c:	e051      	b.n	8005e42 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1c7      	bne.n	8005d38 <HAL_SPI_Receive+0x114>
 8005da8:	e035      	b.n	8005e16 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0301 	and.w	r3, r3, #1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d113      	bne.n	8005de0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dc2:	b292      	uxth	r2, r2
 8005dc4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dca:	1c9a      	adds	r2, r3, #2
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	b29a      	uxth	r2, r3
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005dde:	e015      	b.n	8005e0c <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005de0:	f7fe f91c 	bl	800401c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	683a      	ldr	r2, [r7, #0]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d803      	bhi.n	8005df8 <HAL_SPI_Receive+0x1d4>
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005df6:	d102      	bne.n	8005dfe <HAL_SPI_Receive+0x1da>
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d106      	bne.n	8005e0c <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8005e0a:	e01a      	b.n	8005e42 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e10:	b29b      	uxth	r3, r3
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1c9      	bne.n	8005daa <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e16:	693a      	ldr	r2, [r7, #16]
 8005e18:	6839      	ldr	r1, [r7, #0]
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f000 fa52 	bl	80062c4 <SPI_EndRxTransaction>
 8005e20:	4603      	mov	r3, r0
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
 8005e38:	e003      	b.n	8005e42 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3718      	adds	r7, #24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	bd80      	pop	{r7, pc}

08005e54 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08c      	sub	sp, #48	@ 0x30
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e62:	2301      	movs	r3, #1
 8005e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e66:	2300      	movs	r3, #0
 8005e68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_SPI_TransmitReceive+0x26>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e198      	b.n	80061ac <HAL_SPI_TransmitReceive+0x358>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e82:	f7fe f8cb 	bl	800401c <HAL_GetTick>
 8005e86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005e98:	887b      	ldrh	r3, [r7, #2]
 8005e9a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e9c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d00f      	beq.n	8005ec4 <HAL_SPI_TransmitReceive+0x70>
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005eaa:	d107      	bne.n	8005ebc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d103      	bne.n	8005ebc <HAL_SPI_TransmitReceive+0x68>
 8005eb4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d003      	beq.n	8005ec4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005ec2:	e16d      	b.n	80061a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d005      	beq.n	8005ed6 <HAL_SPI_TransmitReceive+0x82>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <HAL_SPI_TransmitReceive+0x82>
 8005ed0:	887b      	ldrh	r3, [r7, #2]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d103      	bne.n	8005ede <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8005edc:	e160      	b.n	80061a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b04      	cmp	r3, #4
 8005ee8:	d003      	beq.n	8005ef2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	2205      	movs	r2, #5
 8005eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	887a      	ldrh	r2, [r7, #2]
 8005f02:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	887a      	ldrh	r2, [r7, #2]
 8005f08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	68ba      	ldr	r2, [r7, #8]
 8005f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	887a      	ldrh	r2, [r7, #2]
 8005f14:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	887a      	ldrh	r2, [r7, #2]
 8005f1a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2200      	movs	r2, #0
 8005f26:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f32:	2b40      	cmp	r3, #64	@ 0x40
 8005f34:	d007      	beq.n	8005f46 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f44:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f4e:	d17c      	bne.n	800604a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d002      	beq.n	8005f5e <HAL_SPI_TransmitReceive+0x10a>
 8005f58:	8b7b      	ldrh	r3, [r7, #26]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d16a      	bne.n	8006034 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f62:	881a      	ldrh	r2, [r3, #0]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f6e:	1c9a      	adds	r2, r3, #2
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f82:	e057      	b.n	8006034 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	f003 0302 	and.w	r3, r3, #2
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d11b      	bne.n	8005fca <HAL_SPI_TransmitReceive+0x176>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d016      	beq.n	8005fca <HAL_SPI_TransmitReceive+0x176>
 8005f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d113      	bne.n	8005fca <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa6:	881a      	ldrh	r2, [r3, #0]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb2:	1c9a      	adds	r2, r3, #2
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	689b      	ldr	r3, [r3, #8]
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d119      	bne.n	800600c <HAL_SPI_TransmitReceive+0x1b8>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d014      	beq.n	800600c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68da      	ldr	r2, [r3, #12]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fec:	b292      	uxth	r2, r2
 8005fee:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff4:	1c9a      	adds	r2, r3, #2
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006008:	2301      	movs	r3, #1
 800600a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800600c:	f7fe f806 	bl	800401c <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006018:	429a      	cmp	r2, r3
 800601a:	d80b      	bhi.n	8006034 <HAL_SPI_TransmitReceive+0x1e0>
 800601c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006022:	d007      	beq.n	8006034 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	2201      	movs	r2, #1
 800602e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006032:	e0b5      	b.n	80061a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006038:	b29b      	uxth	r3, r3
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1a2      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x130>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006042:	b29b      	uxth	r3, r3
 8006044:	2b00      	cmp	r3, #0
 8006046:	d19d      	bne.n	8005f84 <HAL_SPI_TransmitReceive+0x130>
 8006048:	e080      	b.n	800614c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d002      	beq.n	8006058 <HAL_SPI_TransmitReceive+0x204>
 8006052:	8b7b      	ldrh	r3, [r7, #26]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d16f      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800607e:	e05b      	b.n	8006138 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b02      	cmp	r3, #2
 800608c:	d11c      	bne.n	80060c8 <HAL_SPI_TransmitReceive+0x274>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006092:	b29b      	uxth	r3, r3
 8006094:	2b00      	cmp	r3, #0
 8006096:	d017      	beq.n	80060c8 <HAL_SPI_TransmitReceive+0x274>
 8006098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609a:	2b01      	cmp	r3, #1
 800609c:	d114      	bne.n	80060c8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	330c      	adds	r3, #12
 80060a8:	7812      	ldrb	r2, [r2, #0]
 80060aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060b0:	1c5a      	adds	r2, r3, #1
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29a      	uxth	r2, r3
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80060c4:	2300      	movs	r3, #0
 80060c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d119      	bne.n	800610a <HAL_SPI_TransmitReceive+0x2b6>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d014      	beq.n	800610a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	68da      	ldr	r2, [r3, #12]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	b2d2      	uxtb	r2, r2
 80060ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060f2:	1c5a      	adds	r2, r3, #1
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	3b01      	subs	r3, #1
 8006100:	b29a      	uxth	r2, r3
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006106:	2301      	movs	r3, #1
 8006108:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800610a:	f7fd ff87 	bl	800401c <HAL_GetTick>
 800610e:	4602      	mov	r2, r0
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	1ad3      	subs	r3, r2, r3
 8006114:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006116:	429a      	cmp	r2, r3
 8006118:	d803      	bhi.n	8006122 <HAL_SPI_TransmitReceive+0x2ce>
 800611a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006120:	d102      	bne.n	8006128 <HAL_SPI_TransmitReceive+0x2d4>
 8006122:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006124:	2b00      	cmp	r3, #0
 8006126:	d107      	bne.n	8006138 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2201      	movs	r2, #1
 8006132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8006136:	e033      	b.n	80061a0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800613c:	b29b      	uxth	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d19e      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x22c>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006146:	b29b      	uxth	r3, r3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d199      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800614c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800614e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f91d 	bl	8006390 <SPI_EndRxTxTransaction>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d006      	beq.n	800616a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2220      	movs	r2, #32
 8006166:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8006168:	e01a      	b.n	80061a0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10a      	bne.n	8006188 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	617b      	str	r3, [r7, #20]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	617b      	str	r3, [r7, #20]
 8006186:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800618c:	2b00      	cmp	r3, #0
 800618e:	d003      	beq.n	8006198 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006196:	e003      	b.n	80061a0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80061a8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3730      	adds	r7, #48	@ 0x30
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	4613      	mov	r3, r2
 80061c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80061c4:	f7fd ff2a 	bl	800401c <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061cc:	1a9b      	subs	r3, r3, r2
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	4413      	add	r3, r2
 80061d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80061d4:	f7fd ff22 	bl	800401c <HAL_GetTick>
 80061d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80061da:	4b39      	ldr	r3, [pc, #228]	@ (80062c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	015b      	lsls	r3, r3, #5
 80061e0:	0d1b      	lsrs	r3, r3, #20
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	fb02 f303 	mul.w	r3, r2, r3
 80061e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061ea:	e054      	b.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061f2:	d050      	beq.n	8006296 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061f4:	f7fd ff12 	bl	800401c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	69fa      	ldr	r2, [r7, #28]
 8006200:	429a      	cmp	r2, r3
 8006202:	d902      	bls.n	800620a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d13d      	bne.n	8006286 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006218:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006222:	d111      	bne.n	8006248 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800622c:	d004      	beq.n	8006238 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006236:	d107      	bne.n	8006248 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006246:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800624c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006250:	d10f      	bne.n	8006272 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006260:	601a      	str	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006270:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2200      	movs	r2, #0
 800627e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e017      	b.n	80062b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d101      	bne.n	8006290 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	3b01      	subs	r3, #1
 8006294:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4013      	ands	r3, r2
 80062a0:	68ba      	ldr	r2, [r7, #8]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	bf0c      	ite	eq
 80062a6:	2301      	moveq	r3, #1
 80062a8:	2300      	movne	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	79fb      	ldrb	r3, [r7, #7]
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d19b      	bne.n	80061ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80062b4:	2300      	movs	r3, #0
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3720      	adds	r7, #32
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000088 	.word	0x20000088

080062c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af02      	add	r7, sp, #8
 80062ca:	60f8      	str	r0, [r7, #12]
 80062cc:	60b9      	str	r1, [r7, #8]
 80062ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062d8:	d111      	bne.n	80062fe <SPI_EndRxTransaction+0x3a>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e2:	d004      	beq.n	80062ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ec:	d107      	bne.n	80062fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80062fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006306:	d12a      	bne.n	800635e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006310:	d012      	beq.n	8006338 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	9300      	str	r3, [sp, #0]
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	2200      	movs	r2, #0
 800631a:	2180      	movs	r1, #128	@ 0x80
 800631c:	68f8      	ldr	r0, [r7, #12]
 800631e:	f7ff ff49 	bl	80061b4 <SPI_WaitFlagStateUntilTimeout>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	d02d      	beq.n	8006384 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800632c:	f043 0220 	orr.w	r2, r3, #32
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e026      	b.n	8006386 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	2200      	movs	r2, #0
 8006340:	2101      	movs	r1, #1
 8006342:	68f8      	ldr	r0, [r7, #12]
 8006344:	f7ff ff36 	bl	80061b4 <SPI_WaitFlagStateUntilTimeout>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d01a      	beq.n	8006384 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006352:	f043 0220 	orr.w	r2, r3, #32
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e013      	b.n	8006386 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	9300      	str	r3, [sp, #0]
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	2200      	movs	r2, #0
 8006366:	2101      	movs	r1, #1
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f7ff ff23 	bl	80061b4 <SPI_WaitFlagStateUntilTimeout>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006378:	f043 0220 	orr.w	r2, r3, #32
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006380:	2303      	movs	r3, #3
 8006382:	e000      	b.n	8006386 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b088      	sub	sp, #32
 8006394:	af02      	add	r7, sp, #8
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	9300      	str	r3, [sp, #0]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	2201      	movs	r2, #1
 80063a4:	2102      	movs	r1, #2
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff ff04 	bl	80061b4 <SPI_WaitFlagStateUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e032      	b.n	8006428 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80063c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <SPI_EndRxTxTransaction+0xa0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006434 <SPI_EndRxTxTransaction+0xa4>)
 80063c8:	fba2 2303 	umull	r2, r3, r2, r3
 80063cc:	0d5b      	lsrs	r3, r3, #21
 80063ce:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80063d2:	fb02 f303 	mul.w	r3, r2, r3
 80063d6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80063e0:	d112      	bne.n	8006408 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	9300      	str	r3, [sp, #0]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2200      	movs	r2, #0
 80063ea:	2180      	movs	r1, #128	@ 0x80
 80063ec:	68f8      	ldr	r0, [r7, #12]
 80063ee:	f7ff fee1 	bl	80061b4 <SPI_WaitFlagStateUntilTimeout>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d016      	beq.n	8006426 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e00f      	b.n	8006428 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00a      	beq.n	8006424 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	3b01      	subs	r3, #1
 8006412:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800641e:	2b80      	cmp	r3, #128	@ 0x80
 8006420:	d0f2      	beq.n	8006408 <SPI_EndRxTxTransaction+0x78>
 8006422:	e000      	b.n	8006426 <SPI_EndRxTxTransaction+0x96>
        break;
 8006424:	bf00      	nop
  }

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3718      	adds	r7, #24
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	20000088 	.word	0x20000088
 8006434:	165e9f81 	.word	0x165e9f81

08006438 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e041      	b.n	80064ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f7fd fb80 	bl	8003b64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f000 fc58 	bl	8006d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
	...

080064d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064d8:	b480      	push	{r7}
 80064da:	b085      	sub	sp, #20
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d001      	beq.n	80064f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064ec:	2301      	movs	r3, #1
 80064ee:	e04e      	b.n	800658e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68da      	ldr	r2, [r3, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f042 0201 	orr.w	r2, r2, #1
 8006506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	4a23      	ldr	r2, [pc, #140]	@ (800659c <HAL_TIM_Base_Start_IT+0xc4>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d022      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800651a:	d01d      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a1f      	ldr	r2, [pc, #124]	@ (80065a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d018      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a1e      	ldr	r2, [pc, #120]	@ (80065a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d013      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a1c      	ldr	r2, [pc, #112]	@ (80065a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d00e      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a1b      	ldr	r2, [pc, #108]	@ (80065ac <HAL_TIM_Base_Start_IT+0xd4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d009      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a19      	ldr	r2, [pc, #100]	@ (80065b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d004      	beq.n	8006558 <HAL_TIM_Base_Start_IT+0x80>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a18      	ldr	r2, [pc, #96]	@ (80065b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d111      	bne.n	800657c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	689b      	ldr	r3, [r3, #8]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b06      	cmp	r3, #6
 8006568:	d010      	beq.n	800658c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f042 0201 	orr.w	r2, r2, #1
 8006578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657a:	e007      	b.n	800658c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f042 0201 	orr.w	r2, r2, #1
 800658a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3714      	adds	r7, #20
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	40010000 	.word	0x40010000
 80065a0:	40000400 	.word	0x40000400
 80065a4:	40000800 	.word	0x40000800
 80065a8:	40000c00 	.word	0x40000c00
 80065ac:	40010400 	.word	0x40010400
 80065b0:	40014000 	.word	0x40014000
 80065b4:	40001800 	.word	0x40001800

080065b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e041      	b.n	800664e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d106      	bne.n	80065e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7fd fa9e 	bl	8003b20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3304      	adds	r3, #4
 80065f4:	4619      	mov	r1, r3
 80065f6:	4610      	mov	r0, r2
 80065f8:	f000 fb98 	bl	8006d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2201      	movs	r2, #1
 8006640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3708      	adds	r7, #8
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
	...

08006658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b084      	sub	sp, #16
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
 8006660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d109      	bne.n	800667c <HAL_TIM_PWM_Start+0x24>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800666e:	b2db      	uxtb	r3, r3
 8006670:	2b01      	cmp	r3, #1
 8006672:	bf14      	ite	ne
 8006674:	2301      	movne	r3, #1
 8006676:	2300      	moveq	r3, #0
 8006678:	b2db      	uxtb	r3, r3
 800667a:	e022      	b.n	80066c2 <HAL_TIM_PWM_Start+0x6a>
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	2b04      	cmp	r3, #4
 8006680:	d109      	bne.n	8006696 <HAL_TIM_PWM_Start+0x3e>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b01      	cmp	r3, #1
 800668c:	bf14      	ite	ne
 800668e:	2301      	movne	r3, #1
 8006690:	2300      	moveq	r3, #0
 8006692:	b2db      	uxtb	r3, r3
 8006694:	e015      	b.n	80066c2 <HAL_TIM_PWM_Start+0x6a>
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b08      	cmp	r3, #8
 800669a:	d109      	bne.n	80066b0 <HAL_TIM_PWM_Start+0x58>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	bf14      	ite	ne
 80066a8:	2301      	movne	r3, #1
 80066aa:	2300      	moveq	r3, #0
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	e008      	b.n	80066c2 <HAL_TIM_PWM_Start+0x6a>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	bf14      	ite	ne
 80066bc:	2301      	movne	r3, #1
 80066be:	2300      	moveq	r3, #0
 80066c0:	b2db      	uxtb	r3, r3
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d001      	beq.n	80066ca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e07c      	b.n	80067c4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <HAL_TIM_PWM_Start+0x82>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2202      	movs	r2, #2
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80066d8:	e013      	b.n	8006702 <HAL_TIM_PWM_Start+0xaa>
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	2b04      	cmp	r3, #4
 80066de:	d104      	bne.n	80066ea <HAL_TIM_PWM_Start+0x92>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2202      	movs	r2, #2
 80066e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80066e8:	e00b      	b.n	8006702 <HAL_TIM_PWM_Start+0xaa>
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b08      	cmp	r3, #8
 80066ee:	d104      	bne.n	80066fa <HAL_TIM_PWM_Start+0xa2>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2202      	movs	r2, #2
 80066f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80066f8:	e003      	b.n	8006702 <HAL_TIM_PWM_Start+0xaa>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2202      	movs	r2, #2
 80066fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2201      	movs	r2, #1
 8006708:	6839      	ldr	r1, [r7, #0]
 800670a:	4618      	mov	r0, r3
 800670c:	f000 fe04 	bl	8007318 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2d      	ldr	r2, [pc, #180]	@ (80067cc <HAL_TIM_PWM_Start+0x174>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d004      	beq.n	8006724 <HAL_TIM_PWM_Start+0xcc>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a2c      	ldr	r2, [pc, #176]	@ (80067d0 <HAL_TIM_PWM_Start+0x178>)
 8006720:	4293      	cmp	r3, r2
 8006722:	d101      	bne.n	8006728 <HAL_TIM_PWM_Start+0xd0>
 8006724:	2301      	movs	r3, #1
 8006726:	e000      	b.n	800672a <HAL_TIM_PWM_Start+0xd2>
 8006728:	2300      	movs	r3, #0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d007      	beq.n	800673e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800673c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4a22      	ldr	r2, [pc, #136]	@ (80067cc <HAL_TIM_PWM_Start+0x174>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d022      	beq.n	800678e <HAL_TIM_PWM_Start+0x136>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006750:	d01d      	beq.n	800678e <HAL_TIM_PWM_Start+0x136>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a1f      	ldr	r2, [pc, #124]	@ (80067d4 <HAL_TIM_PWM_Start+0x17c>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d018      	beq.n	800678e <HAL_TIM_PWM_Start+0x136>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4a1d      	ldr	r2, [pc, #116]	@ (80067d8 <HAL_TIM_PWM_Start+0x180>)
 8006762:	4293      	cmp	r3, r2
 8006764:	d013      	beq.n	800678e <HAL_TIM_PWM_Start+0x136>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1c      	ldr	r2, [pc, #112]	@ (80067dc <HAL_TIM_PWM_Start+0x184>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d00e      	beq.n	800678e <HAL_TIM_PWM_Start+0x136>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a16      	ldr	r2, [pc, #88]	@ (80067d0 <HAL_TIM_PWM_Start+0x178>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d009      	beq.n	800678e <HAL_TIM_PWM_Start+0x136>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4a18      	ldr	r2, [pc, #96]	@ (80067e0 <HAL_TIM_PWM_Start+0x188>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d004      	beq.n	800678e <HAL_TIM_PWM_Start+0x136>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	4a16      	ldr	r2, [pc, #88]	@ (80067e4 <HAL_TIM_PWM_Start+0x18c>)
 800678a:	4293      	cmp	r3, r2
 800678c:	d111      	bne.n	80067b2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2b06      	cmp	r3, #6
 800679e:	d010      	beq.n	80067c2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067b0:	e007      	b.n	80067c2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	681a      	ldr	r2, [r3, #0]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0201 	orr.w	r2, r2, #1
 80067c0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	40010000 	.word	0x40010000
 80067d0:	40010400 	.word	0x40010400
 80067d4:	40000400 	.word	0x40000400
 80067d8:	40000800 	.word	0x40000800
 80067dc:	40000c00 	.word	0x40000c00
 80067e0:	40014000 	.word	0x40014000
 80067e4:	40001800 	.word	0x40001800

080067e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	691b      	ldr	r3, [r3, #16]
 80067fe:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	2b00      	cmp	r3, #0
 8006808:	d020      	beq.n	800684c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f003 0302 	and.w	r3, r3, #2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d01b      	beq.n	800684c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f06f 0202 	mvn.w	r2, #2
 800681c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f003 0303 	and.w	r3, r3, #3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 fa5b 	bl	8006cee <HAL_TIM_IC_CaptureCallback>
 8006838:	e005      	b.n	8006846 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fa4d 	bl	8006cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f000 fa5e 	bl	8006d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d020      	beq.n	8006898 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d01b      	beq.n	8006898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0204 	mvn.w	r2, #4
 8006868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800687a:	2b00      	cmp	r3, #0
 800687c:	d003      	beq.n	8006886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fa35 	bl	8006cee <HAL_TIM_IC_CaptureCallback>
 8006884:	e005      	b.n	8006892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f000 fa27 	bl	8006cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fa38 	bl	8006d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	f003 0308 	and.w	r3, r3, #8
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d020      	beq.n	80068e4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f003 0308 	and.w	r3, r3, #8
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d01b      	beq.n	80068e4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f06f 0208 	mvn.w	r2, #8
 80068b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2204      	movs	r2, #4
 80068ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa0f 	bl	8006cee <HAL_TIM_IC_CaptureCallback>
 80068d0:	e005      	b.n	80068de <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa01 	bl	8006cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 fa12 	bl	8006d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	f003 0310 	and.w	r3, r3, #16
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d020      	beq.n	8006930 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01b      	beq.n	8006930 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f06f 0210 	mvn.w	r2, #16
 8006900:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2208      	movs	r2, #8
 8006906:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 f9e9 	bl	8006cee <HAL_TIM_IC_CaptureCallback>
 800691c:	e005      	b.n	800692a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 f9db 	bl	8006cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 f9ec 	bl	8006d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00c      	beq.n	8006954 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b00      	cmp	r3, #0
 8006942:	d007      	beq.n	8006954 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f06f 0201 	mvn.w	r2, #1
 800694c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f7fd f82a 	bl	80039a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00c      	beq.n	8006978 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006964:	2b00      	cmp	r3, #0
 8006966:	d007      	beq.n	8006978 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 fdce 	bl	8007514 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00c      	beq.n	800699c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	d007      	beq.n	800699c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006994:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f9bd 	bl	8006d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	f003 0320 	and.w	r3, r3, #32
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d00c      	beq.n	80069c0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f003 0320 	and.w	r3, r3, #32
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d007      	beq.n	80069c0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f06f 0220 	mvn.w	r2, #32
 80069b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 fda0 	bl	8007500 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069c0:	bf00      	nop
 80069c2:	3710      	adds	r7, #16
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80069d4:	2300      	movs	r3, #0
 80069d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d101      	bne.n	80069e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80069e2:	2302      	movs	r3, #2
 80069e4:	e0ae      	b.n	8006b44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2201      	movs	r2, #1
 80069ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	f200 809f 	bhi.w	8006b34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80069f6:	a201      	add	r2, pc, #4	@ (adr r2, 80069fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a31 	.word	0x08006a31
 8006a00:	08006b35 	.word	0x08006b35
 8006a04:	08006b35 	.word	0x08006b35
 8006a08:	08006b35 	.word	0x08006b35
 8006a0c:	08006a71 	.word	0x08006a71
 8006a10:	08006b35 	.word	0x08006b35
 8006a14:	08006b35 	.word	0x08006b35
 8006a18:	08006b35 	.word	0x08006b35
 8006a1c:	08006ab3 	.word	0x08006ab3
 8006a20:	08006b35 	.word	0x08006b35
 8006a24:	08006b35 	.word	0x08006b35
 8006a28:	08006b35 	.word	0x08006b35
 8006a2c:	08006af3 	.word	0x08006af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fa24 	bl	8006e84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699a      	ldr	r2, [r3, #24]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0208 	orr.w	r2, r2, #8
 8006a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0204 	bic.w	r2, r2, #4
 8006a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6999      	ldr	r1, [r3, #24]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	691a      	ldr	r2, [r3, #16]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	619a      	str	r2, [r3, #24]
      break;
 8006a6e:	e064      	b.n	8006b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fa74 	bl	8006f64 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6999      	ldr	r1, [r3, #24]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	021a      	lsls	r2, r3, #8
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	619a      	str	r2, [r3, #24]
      break;
 8006ab0:	e043      	b.n	8006b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fac9 	bl	8007050 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69da      	ldr	r2, [r3, #28]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0208 	orr.w	r2, r2, #8
 8006acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0204 	bic.w	r2, r2, #4
 8006adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69d9      	ldr	r1, [r3, #28]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	691a      	ldr	r2, [r3, #16]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	61da      	str	r2, [r3, #28]
      break;
 8006af0:	e023      	b.n	8006b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68b9      	ldr	r1, [r7, #8]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 fb1d 	bl	8007138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69d9      	ldr	r1, [r3, #28]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	021a      	lsls	r2, r3, #8
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	61da      	str	r2, [r3, #28]
      break;
 8006b32:	e002      	b.n	8006b3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	75fb      	strb	r3, [r7, #23]
      break;
 8006b38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3718      	adds	r7, #24
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_TIM_ConfigClockSource+0x1c>
 8006b64:	2302      	movs	r3, #2
 8006b66:	e0b4      	b.n	8006cd2 <HAL_TIM_ConfigClockSource+0x186>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ba0:	d03e      	beq.n	8006c20 <HAL_TIM_ConfigClockSource+0xd4>
 8006ba2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ba6:	f200 8087 	bhi.w	8006cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bae:	f000 8086 	beq.w	8006cbe <HAL_TIM_ConfigClockSource+0x172>
 8006bb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bb6:	d87f      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb8:	2b70      	cmp	r3, #112	@ 0x70
 8006bba:	d01a      	beq.n	8006bf2 <HAL_TIM_ConfigClockSource+0xa6>
 8006bbc:	2b70      	cmp	r3, #112	@ 0x70
 8006bbe:	d87b      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc0:	2b60      	cmp	r3, #96	@ 0x60
 8006bc2:	d050      	beq.n	8006c66 <HAL_TIM_ConfigClockSource+0x11a>
 8006bc4:	2b60      	cmp	r3, #96	@ 0x60
 8006bc6:	d877      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc8:	2b50      	cmp	r3, #80	@ 0x50
 8006bca:	d03c      	beq.n	8006c46 <HAL_TIM_ConfigClockSource+0xfa>
 8006bcc:	2b50      	cmp	r3, #80	@ 0x50
 8006bce:	d873      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd0:	2b40      	cmp	r3, #64	@ 0x40
 8006bd2:	d058      	beq.n	8006c86 <HAL_TIM_ConfigClockSource+0x13a>
 8006bd4:	2b40      	cmp	r3, #64	@ 0x40
 8006bd6:	d86f      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006bd8:	2b30      	cmp	r3, #48	@ 0x30
 8006bda:	d064      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8006bdc:	2b30      	cmp	r3, #48	@ 0x30
 8006bde:	d86b      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006be0:	2b20      	cmp	r3, #32
 8006be2:	d060      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8006be4:	2b20      	cmp	r3, #32
 8006be6:	d867      	bhi.n	8006cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d05c      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8006bec:	2b10      	cmp	r3, #16
 8006bee:	d05a      	beq.n	8006ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8006bf0:	e062      	b.n	8006cb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c02:	f000 fb69 	bl	80072d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	609a      	str	r2, [r3, #8]
      break;
 8006c1e:	e04f      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c30:	f000 fb52 	bl	80072d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c42:	609a      	str	r2, [r3, #8]
      break;
 8006c44:	e03c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c52:	461a      	mov	r2, r3
 8006c54:	f000 fac6 	bl	80071e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2150      	movs	r1, #80	@ 0x50
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f000 fb1f 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006c64:	e02c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c72:	461a      	mov	r2, r3
 8006c74:	f000 fae5 	bl	8007242 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2160      	movs	r1, #96	@ 0x60
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f000 fb0f 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006c84:	e01c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c8e:	683b      	ldr	r3, [r7, #0]
 8006c90:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c92:	461a      	mov	r2, r3
 8006c94:	f000 faa6 	bl	80071e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2140      	movs	r1, #64	@ 0x40
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f000 faff 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006ca4:	e00c      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	683b      	ldr	r3, [r7, #0]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	f000 faf6 	bl	80072a2 <TIM_ITRx_SetConfig>
      break;
 8006cb6:	e003      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	73fb      	strb	r3, [r7, #15]
      break;
 8006cbc:	e000      	b.n	8006cc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b083      	sub	sp, #12
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d0a:	bf00      	nop
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d1e:	bf00      	nop
 8006d20:	370c      	adds	r7, #12
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
	...

08006d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a46      	ldr	r2, [pc, #280]	@ (8006e58 <TIM_Base_SetConfig+0x12c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d013      	beq.n	8006d6c <TIM_Base_SetConfig+0x40>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d4a:	d00f      	beq.n	8006d6c <TIM_Base_SetConfig+0x40>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a43      	ldr	r2, [pc, #268]	@ (8006e5c <TIM_Base_SetConfig+0x130>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00b      	beq.n	8006d6c <TIM_Base_SetConfig+0x40>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a42      	ldr	r2, [pc, #264]	@ (8006e60 <TIM_Base_SetConfig+0x134>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d007      	beq.n	8006d6c <TIM_Base_SetConfig+0x40>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a41      	ldr	r2, [pc, #260]	@ (8006e64 <TIM_Base_SetConfig+0x138>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d003      	beq.n	8006d6c <TIM_Base_SetConfig+0x40>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a40      	ldr	r2, [pc, #256]	@ (8006e68 <TIM_Base_SetConfig+0x13c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d108      	bne.n	8006d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a35      	ldr	r2, [pc, #212]	@ (8006e58 <TIM_Base_SetConfig+0x12c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d02b      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8c:	d027      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a32      	ldr	r2, [pc, #200]	@ (8006e5c <TIM_Base_SetConfig+0x130>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d023      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a31      	ldr	r2, [pc, #196]	@ (8006e60 <TIM_Base_SetConfig+0x134>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d01f      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a30      	ldr	r2, [pc, #192]	@ (8006e64 <TIM_Base_SetConfig+0x138>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d01b      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2f      	ldr	r2, [pc, #188]	@ (8006e68 <TIM_Base_SetConfig+0x13c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d017      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a2e      	ldr	r2, [pc, #184]	@ (8006e6c <TIM_Base_SetConfig+0x140>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d013      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	4a2d      	ldr	r2, [pc, #180]	@ (8006e70 <TIM_Base_SetConfig+0x144>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d00f      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	4a2c      	ldr	r2, [pc, #176]	@ (8006e74 <TIM_Base_SetConfig+0x148>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d00b      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	4a2b      	ldr	r2, [pc, #172]	@ (8006e78 <TIM_Base_SetConfig+0x14c>)
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d007      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8006e7c <TIM_Base_SetConfig+0x150>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d003      	beq.n	8006dde <TIM_Base_SetConfig+0xb2>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a29      	ldr	r2, [pc, #164]	@ (8006e80 <TIM_Base_SetConfig+0x154>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d108      	bne.n	8006df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	68db      	ldr	r3, [r3, #12]
 8006dea:	68fa      	ldr	r2, [r7, #12]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	695b      	ldr	r3, [r3, #20]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	689a      	ldr	r2, [r3, #8]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a10      	ldr	r2, [pc, #64]	@ (8006e58 <TIM_Base_SetConfig+0x12c>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d003      	beq.n	8006e24 <TIM_Base_SetConfig+0xf8>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a12      	ldr	r2, [pc, #72]	@ (8006e68 <TIM_Base_SetConfig+0x13c>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d103      	bne.n	8006e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	691a      	ldr	r2, [r3, #16]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d105      	bne.n	8006e4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	691b      	ldr	r3, [r3, #16]
 8006e42:	f023 0201 	bic.w	r2, r3, #1
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	611a      	str	r2, [r3, #16]
  }
}
 8006e4a:	bf00      	nop
 8006e4c:	3714      	adds	r7, #20
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop
 8006e58:	40010000 	.word	0x40010000
 8006e5c:	40000400 	.word	0x40000400
 8006e60:	40000800 	.word	0x40000800
 8006e64:	40000c00 	.word	0x40000c00
 8006e68:	40010400 	.word	0x40010400
 8006e6c:	40014000 	.word	0x40014000
 8006e70:	40014400 	.word	0x40014400
 8006e74:	40014800 	.word	0x40014800
 8006e78:	40001800 	.word	0x40001800
 8006e7c:	40001c00 	.word	0x40001c00
 8006e80:	40002000 	.word	0x40002000

08006e84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b087      	sub	sp, #28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	f023 0201 	bic.w	r2, r3, #1
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	699b      	ldr	r3, [r3, #24]
 8006eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006eb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	f023 0303 	bic.w	r3, r3, #3
 8006eba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68fa      	ldr	r2, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	f023 0302 	bic.w	r3, r3, #2
 8006ecc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	4a20      	ldr	r2, [pc, #128]	@ (8006f5c <TIM_OC1_SetConfig+0xd8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d003      	beq.n	8006ee8 <TIM_OC1_SetConfig+0x64>
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	4a1f      	ldr	r2, [pc, #124]	@ (8006f60 <TIM_OC1_SetConfig+0xdc>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d10c      	bne.n	8006f02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ee8:	697b      	ldr	r3, [r7, #20]
 8006eea:	f023 0308 	bic.w	r3, r3, #8
 8006eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	68db      	ldr	r3, [r3, #12]
 8006ef4:	697a      	ldr	r2, [r7, #20]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	f023 0304 	bic.w	r3, r3, #4
 8006f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a15      	ldr	r2, [pc, #84]	@ (8006f5c <TIM_OC1_SetConfig+0xd8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d003      	beq.n	8006f12 <TIM_OC1_SetConfig+0x8e>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a14      	ldr	r2, [pc, #80]	@ (8006f60 <TIM_OC1_SetConfig+0xdc>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d111      	bne.n	8006f36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	695b      	ldr	r3, [r3, #20]
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	699b      	ldr	r3, [r3, #24]
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	693a      	ldr	r2, [r7, #16]
 8006f3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	685a      	ldr	r2, [r3, #4]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	621a      	str	r2, [r3, #32]
}
 8006f50:	bf00      	nop
 8006f52:	371c      	adds	r7, #28
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr
 8006f5c:	40010000 	.word	0x40010000
 8006f60:	40010400 	.word	0x40010400

08006f64 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f64:	b480      	push	{r7}
 8006f66:	b087      	sub	sp, #28
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	6078      	str	r0, [r7, #4]
 8006f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a1b      	ldr	r3, [r3, #32]
 8006f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	f023 0210 	bic.w	r2, r3, #16
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	021b      	lsls	r3, r3, #8
 8006fa2:	68fa      	ldr	r2, [r7, #12]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	f023 0320 	bic.w	r3, r3, #32
 8006fae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	011b      	lsls	r3, r3, #4
 8006fb6:	697a      	ldr	r2, [r7, #20]
 8006fb8:	4313      	orrs	r3, r2
 8006fba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	4a22      	ldr	r2, [pc, #136]	@ (8007048 <TIM_OC2_SetConfig+0xe4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d003      	beq.n	8006fcc <TIM_OC2_SetConfig+0x68>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a21      	ldr	r2, [pc, #132]	@ (800704c <TIM_OC2_SetConfig+0xe8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d10d      	bne.n	8006fe8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	68db      	ldr	r3, [r3, #12]
 8006fd8:	011b      	lsls	r3, r3, #4
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fe6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	4a17      	ldr	r2, [pc, #92]	@ (8007048 <TIM_OC2_SetConfig+0xe4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d003      	beq.n	8006ff8 <TIM_OC2_SetConfig+0x94>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	4a16      	ldr	r2, [pc, #88]	@ (800704c <TIM_OC2_SetConfig+0xe8>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d113      	bne.n	8007020 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	695b      	ldr	r3, [r3, #20]
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	693a      	ldr	r2, [r7, #16]
 8007010:	4313      	orrs	r3, r2
 8007012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	693a      	ldr	r2, [r7, #16]
 800701c:	4313      	orrs	r3, r2
 800701e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	693a      	ldr	r2, [r7, #16]
 8007024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	685a      	ldr	r2, [r3, #4]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	697a      	ldr	r2, [r7, #20]
 8007038:	621a      	str	r2, [r3, #32]
}
 800703a:	bf00      	nop
 800703c:	371c      	adds	r7, #28
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop
 8007048:	40010000 	.word	0x40010000
 800704c:	40010400 	.word	0x40010400

08007050 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007050:	b480      	push	{r7}
 8007052:	b087      	sub	sp, #28
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800707e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f023 0303 	bic.w	r3, r3, #3
 8007086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	021b      	lsls	r3, r3, #8
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a21      	ldr	r2, [pc, #132]	@ (8007130 <TIM_OC3_SetConfig+0xe0>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_OC3_SetConfig+0x66>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a20      	ldr	r2, [pc, #128]	@ (8007134 <TIM_OC3_SetConfig+0xe4>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d10d      	bne.n	80070d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80070bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	68db      	ldr	r3, [r3, #12]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80070ca:	697b      	ldr	r3, [r7, #20]
 80070cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80070d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a16      	ldr	r2, [pc, #88]	@ (8007130 <TIM_OC3_SetConfig+0xe0>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d003      	beq.n	80070e2 <TIM_OC3_SetConfig+0x92>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a15      	ldr	r2, [pc, #84]	@ (8007134 <TIM_OC3_SetConfig+0xe4>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d113      	bne.n	800710a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80070e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80070f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	011b      	lsls	r3, r3, #4
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	011b      	lsls	r3, r3, #4
 8007104:	693a      	ldr	r2, [r7, #16]
 8007106:	4313      	orrs	r3, r2
 8007108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	685a      	ldr	r2, [r3, #4]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	621a      	str	r2, [r3, #32]
}
 8007124:	bf00      	nop
 8007126:	371c      	adds	r7, #28
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	40010000 	.word	0x40010000
 8007134:	40010400 	.word	0x40010400

08007138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007138:	b480      	push	{r7}
 800713a:	b087      	sub	sp, #28
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1b      	ldr	r3, [r3, #32]
 800714c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	685b      	ldr	r3, [r3, #4]
 8007158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800716e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	031b      	lsls	r3, r3, #12
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	4313      	orrs	r3, r2
 800718e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a12      	ldr	r2, [pc, #72]	@ (80071dc <TIM_OC4_SetConfig+0xa4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_OC4_SetConfig+0x68>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a11      	ldr	r2, [pc, #68]	@ (80071e0 <TIM_OC4_SetConfig+0xa8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d109      	bne.n	80071b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80071a0:	697b      	ldr	r3, [r7, #20]
 80071a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80071a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	695b      	ldr	r3, [r3, #20]
 80071ac:	019b      	lsls	r3, r3, #6
 80071ae:	697a      	ldr	r2, [r7, #20]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	697a      	ldr	r2, [r7, #20]
 80071b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685a      	ldr	r2, [r3, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	621a      	str	r2, [r3, #32]
}
 80071ce:	bf00      	nop
 80071d0:	371c      	adds	r7, #28
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr
 80071da:	bf00      	nop
 80071dc:	40010000 	.word	0x40010000
 80071e0:	40010400 	.word	0x40010400

080071e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b087      	sub	sp, #28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	60b9      	str	r1, [r7, #8]
 80071ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	6a1b      	ldr	r3, [r3, #32]
 80071f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f023 0201 	bic.w	r2, r3, #1
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800720e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	f023 030a 	bic.w	r3, r3, #10
 8007220:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007222:	697a      	ldr	r2, [r7, #20]
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	4313      	orrs	r3, r2
 8007228:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	621a      	str	r2, [r3, #32]
}
 8007236:	bf00      	nop
 8007238:	371c      	adds	r7, #28
 800723a:	46bd      	mov	sp, r7
 800723c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007240:	4770      	bx	lr

08007242 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007242:	b480      	push	{r7}
 8007244:	b087      	sub	sp, #28
 8007246:	af00      	add	r7, sp, #0
 8007248:	60f8      	str	r0, [r7, #12]
 800724a:	60b9      	str	r1, [r7, #8]
 800724c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	f023 0210 	bic.w	r2, r3, #16
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	699b      	ldr	r3, [r3, #24]
 8007264:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800726c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	031b      	lsls	r3, r3, #12
 8007272:	693a      	ldr	r2, [r7, #16]
 8007274:	4313      	orrs	r3, r2
 8007276:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800727e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	011b      	lsls	r3, r3, #4
 8007284:	697a      	ldr	r2, [r7, #20]
 8007286:	4313      	orrs	r3, r2
 8007288:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	693a      	ldr	r2, [r7, #16]
 800728e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	697a      	ldr	r2, [r7, #20]
 8007294:	621a      	str	r2, [r3, #32]
}
 8007296:	bf00      	nop
 8007298:	371c      	adds	r7, #28
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80072a2:	b480      	push	{r7}
 80072a4:	b085      	sub	sp, #20
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072ba:	683a      	ldr	r2, [r7, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4313      	orrs	r3, r2
 80072c0:	f043 0307 	orr.w	r3, r3, #7
 80072c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	609a      	str	r2, [r3, #8]
}
 80072cc:	bf00      	nop
 80072ce:	3714      	adds	r7, #20
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	689b      	ldr	r3, [r3, #8]
 80072ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	021a      	lsls	r2, r3, #8
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	431a      	orrs	r2, r3
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	4313      	orrs	r3, r2
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	4313      	orrs	r3, r2
 8007304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	609a      	str	r2, [r3, #8]
}
 800730c:	bf00      	nop
 800730e:	371c      	adds	r7, #28
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr

08007318 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007318:	b480      	push	{r7}
 800731a:	b087      	sub	sp, #28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f003 031f 	and.w	r3, r3, #31
 800732a:	2201      	movs	r2, #1
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	6a1a      	ldr	r2, [r3, #32]
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	43db      	mvns	r3, r3
 800733a:	401a      	ands	r2, r3
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6a1a      	ldr	r2, [r3, #32]
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f003 031f 	and.w	r3, r3, #31
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	fa01 f303 	lsl.w	r3, r1, r3
 8007350:	431a      	orrs	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	621a      	str	r2, [r3, #32]
}
 8007356:	bf00      	nop
 8007358:	371c      	adds	r7, #28
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
	...

08007364 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007374:	2b01      	cmp	r3, #1
 8007376:	d101      	bne.n	800737c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007378:	2302      	movs	r3, #2
 800737a:	e05a      	b.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2201      	movs	r2, #1
 8007380:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2202      	movs	r2, #2
 8007388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80073a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68fa      	ldr	r2, [r7, #12]
 80073b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a21      	ldr	r2, [pc, #132]	@ (8007440 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d022      	beq.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80073c8:	d01d      	beq.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a1d      	ldr	r2, [pc, #116]	@ (8007444 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d018      	beq.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	4a1b      	ldr	r2, [pc, #108]	@ (8007448 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d013      	beq.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a1a      	ldr	r2, [pc, #104]	@ (800744c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d00e      	beq.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	4a18      	ldr	r2, [pc, #96]	@ (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d009      	beq.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a17      	ldr	r2, [pc, #92]	@ (8007454 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d004      	beq.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a15      	ldr	r2, [pc, #84]	@ (8007458 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007402:	4293      	cmp	r3, r2
 8007404:	d10c      	bne.n	8007420 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800740c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	68ba      	ldr	r2, [r7, #8]
 8007414:	4313      	orrs	r3, r2
 8007416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68ba      	ldr	r2, [r7, #8]
 800741e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	40010000 	.word	0x40010000
 8007444:	40000400 	.word	0x40000400
 8007448:	40000800 	.word	0x40000800
 800744c:	40000c00 	.word	0x40000c00
 8007450:	40010400 	.word	0x40010400
 8007454:	40014000 	.word	0x40014000
 8007458:	40001800 	.word	0x40001800

0800745c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007466:	2300      	movs	r3, #0
 8007468:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007470:	2b01      	cmp	r3, #1
 8007472:	d101      	bne.n	8007478 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007474:	2302      	movs	r3, #2
 8007476:	e03d      	b.n	80074f4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2201      	movs	r2, #1
 800747c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	4313      	orrs	r3, r2
 800748c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	4313      	orrs	r3, r2
 800749a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	4313      	orrs	r3, r2
 80074d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	69db      	ldr	r3, [r3, #28]
 80074de:	4313      	orrs	r3, r2
 80074e0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80074f2:	2300      	movs	r3, #0
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	3714      	adds	r7, #20
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr

08007500 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007500:	b480      	push	{r7}
 8007502:	b083      	sub	sp, #12
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800751c:	bf00      	nop
 800751e:	370c      	adds	r7, #12
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr

08007528 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b082      	sub	sp, #8
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e042      	b.n	80075c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007540:	b2db      	uxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	d106      	bne.n	8007554 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fc fba8 	bl	8003ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2224      	movs	r2, #36	@ 0x24
 8007558:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68da      	ldr	r2, [r3, #12]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800756a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fdbd 	bl	80080ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007580:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695a      	ldr	r2, [r3, #20]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007590:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68da      	ldr	r2, [r3, #12]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80075a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2200      	movs	r2, #0
 80075a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2220      	movs	r2, #32
 80075ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2220      	movs	r2, #32
 80075b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	@ 0x28
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	d175      	bne.n	80076d4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d002      	beq.n	80075f4 <HAL_UART_Transmit+0x2c>
 80075ee:	88fb      	ldrh	r3, [r7, #6]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d101      	bne.n	80075f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80075f4:	2301      	movs	r3, #1
 80075f6:	e06e      	b.n	80076d6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2221      	movs	r2, #33	@ 0x21
 8007602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007606:	f7fc fd09 	bl	800401c <HAL_GetTick>
 800760a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	88fa      	ldrh	r2, [r7, #6]
 8007610:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	88fa      	ldrh	r2, [r7, #6]
 8007616:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007620:	d108      	bne.n	8007634 <HAL_UART_Transmit+0x6c>
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d104      	bne.n	8007634 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800762a:	2300      	movs	r3, #0
 800762c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	e003      	b.n	800763c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007638:	2300      	movs	r3, #0
 800763a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800763c:	e02e      	b.n	800769c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	2200      	movs	r2, #0
 8007646:	2180      	movs	r1, #128	@ 0x80
 8007648:	68f8      	ldr	r0, [r7, #12]
 800764a:	f000 fb1f 	bl	8007c8c <UART_WaitOnFlagUntilTimeout>
 800764e:	4603      	mov	r3, r0
 8007650:	2b00      	cmp	r3, #0
 8007652:	d005      	beq.n	8007660 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2220      	movs	r2, #32
 8007658:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e03a      	b.n	80076d6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10b      	bne.n	800767e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007666:	69bb      	ldr	r3, [r7, #24]
 8007668:	881b      	ldrh	r3, [r3, #0]
 800766a:	461a      	mov	r2, r3
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007674:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	3302      	adds	r3, #2
 800767a:	61bb      	str	r3, [r7, #24]
 800767c:	e007      	b.n	800768e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	781a      	ldrb	r2, [r3, #0]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	3301      	adds	r3, #1
 800768c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007692:	b29b      	uxth	r3, r3
 8007694:	3b01      	subs	r3, #1
 8007696:	b29a      	uxth	r2, r3
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1cb      	bne.n	800763e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2200      	movs	r2, #0
 80076ae:	2140      	movs	r1, #64	@ 0x40
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 faeb 	bl	8007c8c <UART_WaitOnFlagUntilTimeout>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d005      	beq.n	80076c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2220      	movs	r2, #32
 80076c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e006      	b.n	80076d6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	e000      	b.n	80076d6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80076d4:	2302      	movs	r3, #2
  }
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3720      	adds	r7, #32
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}

080076de <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076de:	b580      	push	{r7, lr}
 80076e0:	b084      	sub	sp, #16
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	4613      	mov	r3, r2
 80076ea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	2b20      	cmp	r3, #32
 80076f6:	d112      	bne.n	800771e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d002      	beq.n	8007704 <HAL_UART_Receive_IT+0x26>
 80076fe:	88fb      	ldrh	r3, [r7, #6]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d101      	bne.n	8007708 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e00b      	b.n	8007720 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800770e:	88fb      	ldrh	r3, [r7, #6]
 8007710:	461a      	mov	r2, r3
 8007712:	68b9      	ldr	r1, [r7, #8]
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f000 fb12 	bl	8007d3e <UART_Start_Receive_IT>
 800771a:	4603      	mov	r3, r0
 800771c:	e000      	b.n	8007720 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800771e:	2302      	movs	r3, #2
  }
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b0ba      	sub	sp, #232	@ 0xe8
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	68db      	ldr	r3, [r3, #12]
 8007740:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800774e:	2300      	movs	r3, #0
 8007750:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8007754:	2300      	movs	r3, #0
 8007756:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800775a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8007766:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10f      	bne.n	800778e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800776e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007772:	f003 0320 	and.w	r3, r3, #32
 8007776:	2b00      	cmp	r3, #0
 8007778:	d009      	beq.n	800778e <HAL_UART_IRQHandler+0x66>
 800777a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800777e:	f003 0320 	and.w	r3, r3, #32
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 fbf2 	bl	8007f70 <UART_Receive_IT>
      return;
 800778c:	e25b      	b.n	8007c46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800778e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007792:	2b00      	cmp	r3, #0
 8007794:	f000 80de 	beq.w	8007954 <HAL_UART_IRQHandler+0x22c>
 8007798:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d106      	bne.n	80077b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80077a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077a8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	f000 80d1 	beq.w	8007954 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80077b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <HAL_UART_IRQHandler+0xae>
 80077be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d005      	beq.n	80077d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077ce:	f043 0201 	orr.w	r2, r3, #1
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00b      	beq.n	80077fa <HAL_UART_IRQHandler+0xd2>
 80077e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d005      	beq.n	80077fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80077f2:	f043 0202 	orr.w	r2, r3, #2
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80077fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00b      	beq.n	800781e <HAL_UART_IRQHandler+0xf6>
 8007806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	2b00      	cmp	r3, #0
 8007810:	d005      	beq.n	800781e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007816:	f043 0204 	orr.w	r2, r3, #4
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800781e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007822:	f003 0308 	and.w	r3, r3, #8
 8007826:	2b00      	cmp	r3, #0
 8007828:	d011      	beq.n	800784e <HAL_UART_IRQHandler+0x126>
 800782a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800782e:	f003 0320 	and.w	r3, r3, #32
 8007832:	2b00      	cmp	r3, #0
 8007834:	d105      	bne.n	8007842 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800783a:	f003 0301 	and.w	r3, r3, #1
 800783e:	2b00      	cmp	r3, #0
 8007840:	d005      	beq.n	800784e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007846:	f043 0208 	orr.w	r2, r3, #8
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007852:	2b00      	cmp	r3, #0
 8007854:	f000 81f2 	beq.w	8007c3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800785c:	f003 0320 	and.w	r3, r3, #32
 8007860:	2b00      	cmp	r3, #0
 8007862:	d008      	beq.n	8007876 <HAL_UART_IRQHandler+0x14e>
 8007864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007868:	f003 0320 	and.w	r3, r3, #32
 800786c:	2b00      	cmp	r3, #0
 800786e:	d002      	beq.n	8007876 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fb7d 	bl	8007f70 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	695b      	ldr	r3, [r3, #20]
 800787c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007880:	2b40      	cmp	r3, #64	@ 0x40
 8007882:	bf0c      	ite	eq
 8007884:	2301      	moveq	r3, #1
 8007886:	2300      	movne	r3, #0
 8007888:	b2db      	uxtb	r3, r3
 800788a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007892:	f003 0308 	and.w	r3, r3, #8
 8007896:	2b00      	cmp	r3, #0
 8007898:	d103      	bne.n	80078a2 <HAL_UART_IRQHandler+0x17a>
 800789a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d04f      	beq.n	8007942 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fa85 	bl	8007db2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078b2:	2b40      	cmp	r3, #64	@ 0x40
 80078b4:	d141      	bne.n	800793a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3314      	adds	r3, #20
 80078bc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80078c4:	e853 3f00 	ldrex	r3, [r3]
 80078c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80078cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	3314      	adds	r3, #20
 80078de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80078e2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80078e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078f2:	e841 2300 	strex	r3, r2, [r1]
 80078f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d1d9      	bne.n	80078b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007906:	2b00      	cmp	r3, #0
 8007908:	d013      	beq.n	8007932 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800790e:	4a7e      	ldr	r2, [pc, #504]	@ (8007b08 <HAL_UART_IRQHandler+0x3e0>)
 8007910:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007916:	4618      	mov	r0, r3
 8007918:	f7fc fcde 	bl	80042d8 <HAL_DMA_Abort_IT>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d016      	beq.n	8007950 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800792c:	4610      	mov	r0, r2
 800792e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007930:	e00e      	b.n	8007950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 f994 	bl	8007c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007938:	e00a      	b.n	8007950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 f990 	bl	8007c60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007940:	e006      	b.n	8007950 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f98c 	bl	8007c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800794e:	e175      	b.n	8007c3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007950:	bf00      	nop
    return;
 8007952:	e173      	b.n	8007c3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007958:	2b01      	cmp	r3, #1
 800795a:	f040 814f 	bne.w	8007bfc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800795e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007962:	f003 0310 	and.w	r3, r3, #16
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 8148 	beq.w	8007bfc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800796c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007970:	f003 0310 	and.w	r3, r3, #16
 8007974:	2b00      	cmp	r3, #0
 8007976:	f000 8141 	beq.w	8007bfc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800797a:	2300      	movs	r3, #0
 800797c:	60bb      	str	r3, [r7, #8]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	60bb      	str	r3, [r7, #8]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	60bb      	str	r3, [r7, #8]
 800798e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800799a:	2b40      	cmp	r3, #64	@ 0x40
 800799c:	f040 80b6 	bne.w	8007b0c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	f000 8145 	beq.w	8007c40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80079ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079be:	429a      	cmp	r2, r3
 80079c0:	f080 813e 	bcs.w	8007c40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80079ca:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079d6:	f000 8088 	beq.w	8007aea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	330c      	adds	r3, #12
 80079e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80079e8:	e853 3f00 	ldrex	r3, [r3]
 80079ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80079f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80079f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	330c      	adds	r3, #12
 8007a02:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007a06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a0a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a12:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1d9      	bne.n	80079da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3314      	adds	r3, #20
 8007a2c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a38:	f023 0301 	bic.w	r3, r3, #1
 8007a3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3314      	adds	r3, #20
 8007a46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a4a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a4e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a50:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a52:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a56:	e841 2300 	strex	r3, r2, [r1]
 8007a5a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1e1      	bne.n	8007a26 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	3314      	adds	r3, #20
 8007a68:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	3314      	adds	r3, #20
 8007a82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a88:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e3      	bne.n	8007a62 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	330c      	adds	r3, #12
 8007aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ab2:	e853 3f00 	ldrex	r3, [r3]
 8007ab6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ab8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007aba:	f023 0310 	bic.w	r3, r3, #16
 8007abe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	330c      	adds	r3, #12
 8007ac8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007acc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007ace:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ad2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ad4:	e841 2300 	strex	r3, r2, [r1]
 8007ad8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ada:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d1e3      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fc fb87 	bl	80041f8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2202      	movs	r2, #2
 8007aee:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f000 f8b7 	bl	8007c74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b06:	e09b      	b.n	8007c40 <HAL_UART_IRQHandler+0x518>
 8007b08:	08007e79 	.word	0x08007e79
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	f000 808e 	beq.w	8007c44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8007b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	f000 8089 	beq.w	8007c44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	330c      	adds	r3, #12
 8007b38:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b3c:	e853 3f00 	ldrex	r3, [r3]
 8007b40:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	330c      	adds	r3, #12
 8007b52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007b56:	647a      	str	r2, [r7, #68]	@ 0x44
 8007b58:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b5c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e3      	bne.n	8007b32 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3314      	adds	r3, #20
 8007b70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	623b      	str	r3, [r7, #32]
   return(result);
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	f023 0301 	bic.w	r3, r3, #1
 8007b80:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3314      	adds	r3, #20
 8007b8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e3      	bne.n	8007b6a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	330c      	adds	r3, #12
 8007bb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb8:	693b      	ldr	r3, [r7, #16]
 8007bba:	e853 3f00 	ldrex	r3, [r3]
 8007bbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f023 0310 	bic.w	r3, r3, #16
 8007bc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	330c      	adds	r3, #12
 8007bd0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007bd4:	61fa      	str	r2, [r7, #28]
 8007bd6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd8:	69b9      	ldr	r1, [r7, #24]
 8007bda:	69fa      	ldr	r2, [r7, #28]
 8007bdc:	e841 2300 	strex	r3, r2, [r1]
 8007be0:	617b      	str	r3, [r7, #20]
   return(result);
 8007be2:	697b      	ldr	r3, [r7, #20]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d1e3      	bne.n	8007bb0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007bee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f83d 	bl	8007c74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007bfa:	e023      	b.n	8007c44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007bfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d009      	beq.n	8007c1c <HAL_UART_IRQHandler+0x4f4>
 8007c08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d003      	beq.n	8007c1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 f943 	bl	8007ea0 <UART_Transmit_IT>
    return;
 8007c1a:	e014      	b.n	8007c46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00e      	beq.n	8007c46 <HAL_UART_IRQHandler+0x51e>
 8007c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d008      	beq.n	8007c46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f000 f983 	bl	8007f40 <UART_EndTransmit_IT>
    return;
 8007c3a:	e004      	b.n	8007c46 <HAL_UART_IRQHandler+0x51e>
    return;
 8007c3c:	bf00      	nop
 8007c3e:	e002      	b.n	8007c46 <HAL_UART_IRQHandler+0x51e>
      return;
 8007c40:	bf00      	nop
 8007c42:	e000      	b.n	8007c46 <HAL_UART_IRQHandler+0x51e>
      return;
 8007c44:	bf00      	nop
  }
}
 8007c46:	37e8      	adds	r7, #232	@ 0xe8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	460b      	mov	r3, r1
 8007c7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b086      	sub	sp, #24
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	603b      	str	r3, [r7, #0]
 8007c98:	4613      	mov	r3, r2
 8007c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9c:	e03b      	b.n	8007d16 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c9e:	6a3b      	ldr	r3, [r7, #32]
 8007ca0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ca4:	d037      	beq.n	8007d16 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca6:	f7fc f9b9 	bl	800401c <HAL_GetTick>
 8007caa:	4602      	mov	r2, r0
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	6a3a      	ldr	r2, [r7, #32]
 8007cb2:	429a      	cmp	r2, r3
 8007cb4:	d302      	bcc.n	8007cbc <UART_WaitOnFlagUntilTimeout+0x30>
 8007cb6:	6a3b      	ldr	r3, [r7, #32]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d101      	bne.n	8007cc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007cbc:	2303      	movs	r3, #3
 8007cbe:	e03a      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f003 0304 	and.w	r3, r3, #4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d023      	beq.n	8007d16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	2b80      	cmp	r3, #128	@ 0x80
 8007cd2:	d020      	beq.n	8007d16 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2b40      	cmp	r3, #64	@ 0x40
 8007cd8:	d01d      	beq.n	8007d16 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0308 	and.w	r3, r3, #8
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d116      	bne.n	8007d16 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007ce8:	2300      	movs	r3, #0
 8007cea:	617b      	str	r3, [r7, #20]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	617b      	str	r3, [r7, #20]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f000 f857 	bl	8007db2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2208      	movs	r2, #8
 8007d08:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e00f      	b.n	8007d36 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	68ba      	ldr	r2, [r7, #8]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	bf0c      	ite	eq
 8007d26:	2301      	moveq	r3, #1
 8007d28:	2300      	movne	r3, #0
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	79fb      	ldrb	r3, [r7, #7]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d0b4      	beq.n	8007c9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b085      	sub	sp, #20
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	60f8      	str	r0, [r7, #12]
 8007d46:	60b9      	str	r1, [r7, #8]
 8007d48:	4613      	mov	r3, r2
 8007d4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	68ba      	ldr	r2, [r7, #8]
 8007d50:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	88fa      	ldrh	r2, [r7, #6]
 8007d56:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	88fa      	ldrh	r2, [r7, #6]
 8007d5c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2200      	movs	r2, #0
 8007d62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2222      	movs	r2, #34	@ 0x22
 8007d68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d007      	beq.n	8007d84 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	68da      	ldr	r2, [r3, #12]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d82:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	695a      	ldr	r2, [r3, #20]
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f042 0201 	orr.w	r2, r2, #1
 8007d92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	68da      	ldr	r2, [r3, #12]
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f042 0220 	orr.w	r2, r2, #32
 8007da2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007da4:	2300      	movs	r3, #0
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3714      	adds	r7, #20
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b095      	sub	sp, #84	@ 0x54
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	330c      	adds	r3, #12
 8007dc0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007dcc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	330c      	adds	r3, #12
 8007dd8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007dda:	643a      	str	r2, [r7, #64]	@ 0x40
 8007ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dde:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007de0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007de2:	e841 2300 	strex	r3, r2, [r1]
 8007de6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1e5      	bne.n	8007dba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	3314      	adds	r3, #20
 8007df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	e853 3f00 	ldrex	r3, [r3]
 8007dfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dfe:	69fb      	ldr	r3, [r7, #28]
 8007e00:	f023 0301 	bic.w	r3, r3, #1
 8007e04:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3314      	adds	r3, #20
 8007e0c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e10:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e12:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007e14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e16:	e841 2300 	strex	r3, r2, [r1]
 8007e1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d1e5      	bne.n	8007dee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d119      	bne.n	8007e5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	330c      	adds	r3, #12
 8007e30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	e853 3f00 	ldrex	r3, [r3]
 8007e38:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e3a:	68bb      	ldr	r3, [r7, #8]
 8007e3c:	f023 0310 	bic.w	r3, r3, #16
 8007e40:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	330c      	adds	r3, #12
 8007e48:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e4a:	61ba      	str	r2, [r7, #24]
 8007e4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4e:	6979      	ldr	r1, [r7, #20]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	e841 2300 	strex	r3, r2, [r1]
 8007e56:	613b      	str	r3, [r7, #16]
   return(result);
 8007e58:	693b      	ldr	r3, [r7, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d1e5      	bne.n	8007e2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2220      	movs	r2, #32
 8007e62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007e6c:	bf00      	nop
 8007e6e:	3754      	adds	r7, #84	@ 0x54
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e92:	68f8      	ldr	r0, [r7, #12]
 8007e94:	f7ff fee4 	bl	8007c60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e98:	bf00      	nop
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	2b21      	cmp	r3, #33	@ 0x21
 8007eb2:	d13e      	bne.n	8007f32 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	689b      	ldr	r3, [r3, #8]
 8007eb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ebc:	d114      	bne.n	8007ee8 <UART_Transmit_IT+0x48>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d110      	bne.n	8007ee8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	881b      	ldrh	r3, [r3, #0]
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007eda:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	1c9a      	adds	r2, r3, #2
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	621a      	str	r2, [r3, #32]
 8007ee6:	e008      	b.n	8007efa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	1c59      	adds	r1, r3, #1
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	6211      	str	r1, [r2, #32]
 8007ef2:	781a      	ldrb	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	3b01      	subs	r3, #1
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	4619      	mov	r1, r3
 8007f08:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d10f      	bne.n	8007f2e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68da      	ldr	r2, [r3, #12]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007f1c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	68da      	ldr	r2, [r3, #12]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f2c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e000      	b.n	8007f34 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007f32:	2302      	movs	r3, #2
  }
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68da      	ldr	r2, [r3, #12]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f56:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff fe73 	bl	8007c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b08c      	sub	sp, #48	@ 0x30
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007f7e:	b2db      	uxtb	r3, r3
 8007f80:	2b22      	cmp	r3, #34	@ 0x22
 8007f82:	f040 80ae 	bne.w	80080e2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f8e:	d117      	bne.n	8007fc0 <UART_Receive_IT+0x50>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d113      	bne.n	8007fc0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fa0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	685b      	ldr	r3, [r3, #4]
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007fae:	b29a      	uxth	r2, r3
 8007fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb8:	1c9a      	adds	r2, r3, #2
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fbe:	e026      	b.n	800800e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fd2:	d007      	beq.n	8007fe4 <UART_Receive_IT+0x74>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <UART_Receive_IT+0x82>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d106      	bne.n	8007ff2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	b2da      	uxtb	r2, r3
 8007fec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fee:	701a      	strb	r2, [r3, #0]
 8007ff0:	e008      	b.n	8008004 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ffe:	b2da      	uxtb	r2, r3
 8008000:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008002:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008008:	1c5a      	adds	r2, r3, #1
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008012:	b29b      	uxth	r3, r3
 8008014:	3b01      	subs	r3, #1
 8008016:	b29b      	uxth	r3, r3
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	4619      	mov	r1, r3
 800801c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800801e:	2b00      	cmp	r3, #0
 8008020:	d15d      	bne.n	80080de <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68da      	ldr	r2, [r3, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0220 	bic.w	r2, r2, #32
 8008030:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	68da      	ldr	r2, [r3, #12]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008040:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	695a      	ldr	r2, [r3, #20]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f022 0201 	bic.w	r2, r2, #1
 8008050:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2220      	movs	r2, #32
 8008056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2200      	movs	r2, #0
 800805e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008064:	2b01      	cmp	r3, #1
 8008066:	d135      	bne.n	80080d4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2200      	movs	r2, #0
 800806c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	330c      	adds	r3, #12
 8008074:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	e853 3f00 	ldrex	r3, [r3]
 800807c:	613b      	str	r3, [r7, #16]
   return(result);
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f023 0310 	bic.w	r3, r3, #16
 8008084:	627b      	str	r3, [r7, #36]	@ 0x24
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	330c      	adds	r3, #12
 800808c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800808e:	623a      	str	r2, [r7, #32]
 8008090:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008092:	69f9      	ldr	r1, [r7, #28]
 8008094:	6a3a      	ldr	r2, [r7, #32]
 8008096:	e841 2300 	strex	r3, r2, [r1]
 800809a:	61bb      	str	r3, [r7, #24]
   return(result);
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1e5      	bne.n	800806e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	2b10      	cmp	r3, #16
 80080ae:	d10a      	bne.n	80080c6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80080b0:	2300      	movs	r3, #0
 80080b2:	60fb      	str	r3, [r7, #12]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	60fb      	str	r3, [r7, #12]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	60fb      	str	r3, [r7, #12]
 80080c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f7ff fdd1 	bl	8007c74 <HAL_UARTEx_RxEventCallback>
 80080d2:	e002      	b.n	80080da <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f7fb fbfb 	bl	80038d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	e002      	b.n	80080e4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	e000      	b.n	80080e4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80080e2:	2302      	movs	r3, #2
  }
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3730      	adds	r7, #48	@ 0x30
 80080e8:	46bd      	mov	sp, r7
 80080ea:	bd80      	pop	{r7, pc}

080080ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080f0:	b0c0      	sub	sp, #256	@ 0x100
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008108:	68d9      	ldr	r1, [r3, #12]
 800810a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	ea40 0301 	orr.w	r3, r0, r1
 8008114:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	431a      	orrs	r2, r3
 8008124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008128:	695b      	ldr	r3, [r3, #20]
 800812a:	431a      	orrs	r2, r3
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	4313      	orrs	r3, r2
 8008134:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	68db      	ldr	r3, [r3, #12]
 8008140:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008144:	f021 010c 	bic.w	r1, r1, #12
 8008148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800814c:	681a      	ldr	r2, [r3, #0]
 800814e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008152:	430b      	orrs	r3, r1
 8008154:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008166:	6999      	ldr	r1, [r3, #24]
 8008168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800816c:	681a      	ldr	r2, [r3, #0]
 800816e:	ea40 0301 	orr.w	r3, r0, r1
 8008172:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	4b8f      	ldr	r3, [pc, #572]	@ (80083b8 <UART_SetConfig+0x2cc>)
 800817c:	429a      	cmp	r2, r3
 800817e:	d005      	beq.n	800818c <UART_SetConfig+0xa0>
 8008180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	4b8d      	ldr	r3, [pc, #564]	@ (80083bc <UART_SetConfig+0x2d0>)
 8008188:	429a      	cmp	r2, r3
 800818a:	d104      	bne.n	8008196 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800818c:	f7fc ff4a 	bl	8005024 <HAL_RCC_GetPCLK2Freq>
 8008190:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008194:	e003      	b.n	800819e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008196:	f7fc ff31 	bl	8004ffc <HAL_RCC_GetPCLK1Freq>
 800819a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800819e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80081a8:	f040 810c 	bne.w	80083c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80081ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081b0:	2200      	movs	r2, #0
 80081b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80081b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80081ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80081be:	4622      	mov	r2, r4
 80081c0:	462b      	mov	r3, r5
 80081c2:	1891      	adds	r1, r2, r2
 80081c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80081c6:	415b      	adcs	r3, r3
 80081c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80081ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80081ce:	4621      	mov	r1, r4
 80081d0:	eb12 0801 	adds.w	r8, r2, r1
 80081d4:	4629      	mov	r1, r5
 80081d6:	eb43 0901 	adc.w	r9, r3, r1
 80081da:	f04f 0200 	mov.w	r2, #0
 80081de:	f04f 0300 	mov.w	r3, #0
 80081e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80081e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081ee:	4690      	mov	r8, r2
 80081f0:	4699      	mov	r9, r3
 80081f2:	4623      	mov	r3, r4
 80081f4:	eb18 0303 	adds.w	r3, r8, r3
 80081f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80081fc:	462b      	mov	r3, r5
 80081fe:	eb49 0303 	adc.w	r3, r9, r3
 8008202:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008212:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008216:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800821a:	460b      	mov	r3, r1
 800821c:	18db      	adds	r3, r3, r3
 800821e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008220:	4613      	mov	r3, r2
 8008222:	eb42 0303 	adc.w	r3, r2, r3
 8008226:	657b      	str	r3, [r7, #84]	@ 0x54
 8008228:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800822c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008230:	f7f8 fd62 	bl	8000cf8 <__aeabi_uldivmod>
 8008234:	4602      	mov	r2, r0
 8008236:	460b      	mov	r3, r1
 8008238:	4b61      	ldr	r3, [pc, #388]	@ (80083c0 <UART_SetConfig+0x2d4>)
 800823a:	fba3 2302 	umull	r2, r3, r3, r2
 800823e:	095b      	lsrs	r3, r3, #5
 8008240:	011c      	lsls	r4, r3, #4
 8008242:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008246:	2200      	movs	r2, #0
 8008248:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800824c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008250:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008254:	4642      	mov	r2, r8
 8008256:	464b      	mov	r3, r9
 8008258:	1891      	adds	r1, r2, r2
 800825a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800825c:	415b      	adcs	r3, r3
 800825e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008260:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008264:	4641      	mov	r1, r8
 8008266:	eb12 0a01 	adds.w	sl, r2, r1
 800826a:	4649      	mov	r1, r9
 800826c:	eb43 0b01 	adc.w	fp, r3, r1
 8008270:	f04f 0200 	mov.w	r2, #0
 8008274:	f04f 0300 	mov.w	r3, #0
 8008278:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800827c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008280:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008284:	4692      	mov	sl, r2
 8008286:	469b      	mov	fp, r3
 8008288:	4643      	mov	r3, r8
 800828a:	eb1a 0303 	adds.w	r3, sl, r3
 800828e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008292:	464b      	mov	r3, r9
 8008294:	eb4b 0303 	adc.w	r3, fp, r3
 8008298:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800829c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80082a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80082ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80082b0:	460b      	mov	r3, r1
 80082b2:	18db      	adds	r3, r3, r3
 80082b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80082b6:	4613      	mov	r3, r2
 80082b8:	eb42 0303 	adc.w	r3, r2, r3
 80082bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80082be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80082c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80082c6:	f7f8 fd17 	bl	8000cf8 <__aeabi_uldivmod>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	4611      	mov	r1, r2
 80082d0:	4b3b      	ldr	r3, [pc, #236]	@ (80083c0 <UART_SetConfig+0x2d4>)
 80082d2:	fba3 2301 	umull	r2, r3, r3, r1
 80082d6:	095b      	lsrs	r3, r3, #5
 80082d8:	2264      	movs	r2, #100	@ 0x64
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	1acb      	subs	r3, r1, r3
 80082e0:	00db      	lsls	r3, r3, #3
 80082e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80082e6:	4b36      	ldr	r3, [pc, #216]	@ (80083c0 <UART_SetConfig+0x2d4>)
 80082e8:	fba3 2302 	umull	r2, r3, r3, r2
 80082ec:	095b      	lsrs	r3, r3, #5
 80082ee:	005b      	lsls	r3, r3, #1
 80082f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80082f4:	441c      	add	r4, r3
 80082f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082fa:	2200      	movs	r2, #0
 80082fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008300:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008304:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008308:	4642      	mov	r2, r8
 800830a:	464b      	mov	r3, r9
 800830c:	1891      	adds	r1, r2, r2
 800830e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008310:	415b      	adcs	r3, r3
 8008312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008314:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008318:	4641      	mov	r1, r8
 800831a:	1851      	adds	r1, r2, r1
 800831c:	6339      	str	r1, [r7, #48]	@ 0x30
 800831e:	4649      	mov	r1, r9
 8008320:	414b      	adcs	r3, r1
 8008322:	637b      	str	r3, [r7, #52]	@ 0x34
 8008324:	f04f 0200 	mov.w	r2, #0
 8008328:	f04f 0300 	mov.w	r3, #0
 800832c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008330:	4659      	mov	r1, fp
 8008332:	00cb      	lsls	r3, r1, #3
 8008334:	4651      	mov	r1, sl
 8008336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800833a:	4651      	mov	r1, sl
 800833c:	00ca      	lsls	r2, r1, #3
 800833e:	4610      	mov	r0, r2
 8008340:	4619      	mov	r1, r3
 8008342:	4603      	mov	r3, r0
 8008344:	4642      	mov	r2, r8
 8008346:	189b      	adds	r3, r3, r2
 8008348:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800834c:	464b      	mov	r3, r9
 800834e:	460a      	mov	r2, r1
 8008350:	eb42 0303 	adc.w	r3, r2, r3
 8008354:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	2200      	movs	r2, #0
 8008360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008364:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008368:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800836c:	460b      	mov	r3, r1
 800836e:	18db      	adds	r3, r3, r3
 8008370:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008372:	4613      	mov	r3, r2
 8008374:	eb42 0303 	adc.w	r3, r2, r3
 8008378:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800837a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800837e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008382:	f7f8 fcb9 	bl	8000cf8 <__aeabi_uldivmod>
 8008386:	4602      	mov	r2, r0
 8008388:	460b      	mov	r3, r1
 800838a:	4b0d      	ldr	r3, [pc, #52]	@ (80083c0 <UART_SetConfig+0x2d4>)
 800838c:	fba3 1302 	umull	r1, r3, r3, r2
 8008390:	095b      	lsrs	r3, r3, #5
 8008392:	2164      	movs	r1, #100	@ 0x64
 8008394:	fb01 f303 	mul.w	r3, r1, r3
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	00db      	lsls	r3, r3, #3
 800839c:	3332      	adds	r3, #50	@ 0x32
 800839e:	4a08      	ldr	r2, [pc, #32]	@ (80083c0 <UART_SetConfig+0x2d4>)
 80083a0:	fba2 2303 	umull	r2, r3, r2, r3
 80083a4:	095b      	lsrs	r3, r3, #5
 80083a6:	f003 0207 	and.w	r2, r3, #7
 80083aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4422      	add	r2, r4
 80083b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80083b4:	e106      	b.n	80085c4 <UART_SetConfig+0x4d8>
 80083b6:	bf00      	nop
 80083b8:	40011000 	.word	0x40011000
 80083bc:	40011400 	.word	0x40011400
 80083c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80083c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80083c8:	2200      	movs	r2, #0
 80083ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80083ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80083d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80083d6:	4642      	mov	r2, r8
 80083d8:	464b      	mov	r3, r9
 80083da:	1891      	adds	r1, r2, r2
 80083dc:	6239      	str	r1, [r7, #32]
 80083de:	415b      	adcs	r3, r3
 80083e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80083e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80083e6:	4641      	mov	r1, r8
 80083e8:	1854      	adds	r4, r2, r1
 80083ea:	4649      	mov	r1, r9
 80083ec:	eb43 0501 	adc.w	r5, r3, r1
 80083f0:	f04f 0200 	mov.w	r2, #0
 80083f4:	f04f 0300 	mov.w	r3, #0
 80083f8:	00eb      	lsls	r3, r5, #3
 80083fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80083fe:	00e2      	lsls	r2, r4, #3
 8008400:	4614      	mov	r4, r2
 8008402:	461d      	mov	r5, r3
 8008404:	4643      	mov	r3, r8
 8008406:	18e3      	adds	r3, r4, r3
 8008408:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800840c:	464b      	mov	r3, r9
 800840e:	eb45 0303 	adc.w	r3, r5, r3
 8008412:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008422:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008426:	f04f 0200 	mov.w	r2, #0
 800842a:	f04f 0300 	mov.w	r3, #0
 800842e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008432:	4629      	mov	r1, r5
 8008434:	008b      	lsls	r3, r1, #2
 8008436:	4621      	mov	r1, r4
 8008438:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800843c:	4621      	mov	r1, r4
 800843e:	008a      	lsls	r2, r1, #2
 8008440:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008444:	f7f8 fc58 	bl	8000cf8 <__aeabi_uldivmod>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	4b60      	ldr	r3, [pc, #384]	@ (80085d0 <UART_SetConfig+0x4e4>)
 800844e:	fba3 2302 	umull	r2, r3, r3, r2
 8008452:	095b      	lsrs	r3, r3, #5
 8008454:	011c      	lsls	r4, r3, #4
 8008456:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800845a:	2200      	movs	r2, #0
 800845c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008460:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008464:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008468:	4642      	mov	r2, r8
 800846a:	464b      	mov	r3, r9
 800846c:	1891      	adds	r1, r2, r2
 800846e:	61b9      	str	r1, [r7, #24]
 8008470:	415b      	adcs	r3, r3
 8008472:	61fb      	str	r3, [r7, #28]
 8008474:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008478:	4641      	mov	r1, r8
 800847a:	1851      	adds	r1, r2, r1
 800847c:	6139      	str	r1, [r7, #16]
 800847e:	4649      	mov	r1, r9
 8008480:	414b      	adcs	r3, r1
 8008482:	617b      	str	r3, [r7, #20]
 8008484:	f04f 0200 	mov.w	r2, #0
 8008488:	f04f 0300 	mov.w	r3, #0
 800848c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008490:	4659      	mov	r1, fp
 8008492:	00cb      	lsls	r3, r1, #3
 8008494:	4651      	mov	r1, sl
 8008496:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800849a:	4651      	mov	r1, sl
 800849c:	00ca      	lsls	r2, r1, #3
 800849e:	4610      	mov	r0, r2
 80084a0:	4619      	mov	r1, r3
 80084a2:	4603      	mov	r3, r0
 80084a4:	4642      	mov	r2, r8
 80084a6:	189b      	adds	r3, r3, r2
 80084a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80084ac:	464b      	mov	r3, r9
 80084ae:	460a      	mov	r2, r1
 80084b0:	eb42 0303 	adc.w	r3, r2, r3
 80084b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80084b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	2200      	movs	r2, #0
 80084c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80084c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80084c4:	f04f 0200 	mov.w	r2, #0
 80084c8:	f04f 0300 	mov.w	r3, #0
 80084cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80084d0:	4649      	mov	r1, r9
 80084d2:	008b      	lsls	r3, r1, #2
 80084d4:	4641      	mov	r1, r8
 80084d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80084da:	4641      	mov	r1, r8
 80084dc:	008a      	lsls	r2, r1, #2
 80084de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80084e2:	f7f8 fc09 	bl	8000cf8 <__aeabi_uldivmod>
 80084e6:	4602      	mov	r2, r0
 80084e8:	460b      	mov	r3, r1
 80084ea:	4611      	mov	r1, r2
 80084ec:	4b38      	ldr	r3, [pc, #224]	@ (80085d0 <UART_SetConfig+0x4e4>)
 80084ee:	fba3 2301 	umull	r2, r3, r3, r1
 80084f2:	095b      	lsrs	r3, r3, #5
 80084f4:	2264      	movs	r2, #100	@ 0x64
 80084f6:	fb02 f303 	mul.w	r3, r2, r3
 80084fa:	1acb      	subs	r3, r1, r3
 80084fc:	011b      	lsls	r3, r3, #4
 80084fe:	3332      	adds	r3, #50	@ 0x32
 8008500:	4a33      	ldr	r2, [pc, #204]	@ (80085d0 <UART_SetConfig+0x4e4>)
 8008502:	fba2 2303 	umull	r2, r3, r2, r3
 8008506:	095b      	lsrs	r3, r3, #5
 8008508:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800850c:	441c      	add	r4, r3
 800850e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008512:	2200      	movs	r2, #0
 8008514:	673b      	str	r3, [r7, #112]	@ 0x70
 8008516:	677a      	str	r2, [r7, #116]	@ 0x74
 8008518:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800851c:	4642      	mov	r2, r8
 800851e:	464b      	mov	r3, r9
 8008520:	1891      	adds	r1, r2, r2
 8008522:	60b9      	str	r1, [r7, #8]
 8008524:	415b      	adcs	r3, r3
 8008526:	60fb      	str	r3, [r7, #12]
 8008528:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800852c:	4641      	mov	r1, r8
 800852e:	1851      	adds	r1, r2, r1
 8008530:	6039      	str	r1, [r7, #0]
 8008532:	4649      	mov	r1, r9
 8008534:	414b      	adcs	r3, r1
 8008536:	607b      	str	r3, [r7, #4]
 8008538:	f04f 0200 	mov.w	r2, #0
 800853c:	f04f 0300 	mov.w	r3, #0
 8008540:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008544:	4659      	mov	r1, fp
 8008546:	00cb      	lsls	r3, r1, #3
 8008548:	4651      	mov	r1, sl
 800854a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800854e:	4651      	mov	r1, sl
 8008550:	00ca      	lsls	r2, r1, #3
 8008552:	4610      	mov	r0, r2
 8008554:	4619      	mov	r1, r3
 8008556:	4603      	mov	r3, r0
 8008558:	4642      	mov	r2, r8
 800855a:	189b      	adds	r3, r3, r2
 800855c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800855e:	464b      	mov	r3, r9
 8008560:	460a      	mov	r2, r1
 8008562:	eb42 0303 	adc.w	r3, r2, r3
 8008566:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2200      	movs	r2, #0
 8008570:	663b      	str	r3, [r7, #96]	@ 0x60
 8008572:	667a      	str	r2, [r7, #100]	@ 0x64
 8008574:	f04f 0200 	mov.w	r2, #0
 8008578:	f04f 0300 	mov.w	r3, #0
 800857c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008580:	4649      	mov	r1, r9
 8008582:	008b      	lsls	r3, r1, #2
 8008584:	4641      	mov	r1, r8
 8008586:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800858a:	4641      	mov	r1, r8
 800858c:	008a      	lsls	r2, r1, #2
 800858e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008592:	f7f8 fbb1 	bl	8000cf8 <__aeabi_uldivmod>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	4b0d      	ldr	r3, [pc, #52]	@ (80085d0 <UART_SetConfig+0x4e4>)
 800859c:	fba3 1302 	umull	r1, r3, r3, r2
 80085a0:	095b      	lsrs	r3, r3, #5
 80085a2:	2164      	movs	r1, #100	@ 0x64
 80085a4:	fb01 f303 	mul.w	r3, r1, r3
 80085a8:	1ad3      	subs	r3, r2, r3
 80085aa:	011b      	lsls	r3, r3, #4
 80085ac:	3332      	adds	r3, #50	@ 0x32
 80085ae:	4a08      	ldr	r2, [pc, #32]	@ (80085d0 <UART_SetConfig+0x4e4>)
 80085b0:	fba2 2303 	umull	r2, r3, r2, r3
 80085b4:	095b      	lsrs	r3, r3, #5
 80085b6:	f003 020f 	and.w	r2, r3, #15
 80085ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4422      	add	r2, r4
 80085c2:	609a      	str	r2, [r3, #8]
}
 80085c4:	bf00      	nop
 80085c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80085ca:	46bd      	mov	sp, r7
 80085cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80085d0:	51eb851f 	.word	0x51eb851f

080085d4 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    EventGroupHandle_t xEventGroupCreate( void )
    {
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
         * TickType_t alignment requirements the cast is safe.  In other cases,
         * where the natural word size of the architecture is less than
         * sizeof( TickType_t ), the TickType_t variables will be accessed in two
         * or more reads operations, and the alignment requirements is only that
         * of each individual read. */
        pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80085da:	201c      	movs	r0, #28
 80085dc:	f003 fbd8 	bl	800bd90 <pvPortMalloc>
 80085e0:	6078      	str	r0, [r7, #4]

        if( pxEventBits != NULL )
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d007      	beq.n	80085f8 <xEventGroupCreate+0x24>
        {
            pxEventBits->uxEventBits = 0;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	601a      	str	r2, [r3, #0]
            vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	3304      	adds	r3, #4
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 f986 	bl	8008904 <vListInitialise>
        else
        {
            traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
        }

        return pxEventBits;
 80085f8:	687b      	ldr	r3, [r7, #4]
    }
 80085fa:	4618      	mov	r0, r3
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
	...

08008604 <xEventGroupWaitBits>:
EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                 const EventBits_t uxBitsToWaitFor,
                                 const BaseType_t xClearOnExit,
                                 const BaseType_t xWaitForAllBits,
                                 TickType_t xTicksToWait )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b090      	sub	sp, #64	@ 0x40
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	603b      	str	r3, [r7, #0]
    EventGroup_t * pxEventBits = xEventGroup;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	637b      	str	r3, [r7, #52]	@ 0x34
    EventBits_t uxReturn, uxControlBits = 0;
 8008616:	2300      	movs	r3, #0
 8008618:	63bb      	str	r3, [r7, #56]	@ 0x38
    BaseType_t xWaitConditionMet, xAlreadyYielded;
    BaseType_t xTimeoutOccurred = pdFALSE;
 800861a:	2300      	movs	r3, #0
 800861c:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Check the user is not attempting to wait on the bits used by the kernel
     * itself, and that at least one bit is being requested. */
    configASSERT( xEventGroup );
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10b      	bne.n	800863c <xEventGroupWaitBits+0x38>
        __asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	623b      	str	r3, [r7, #32]
    }
 8008636:	bf00      	nop
 8008638:	bf00      	nop
 800863a:	e7fd      	b.n	8008638 <xEventGroupWaitBits+0x34>
    configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008642:	d30b      	bcc.n	800865c <xEventGroupWaitBits+0x58>
        __asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	61fb      	str	r3, [r7, #28]
    }
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	e7fd      	b.n	8008658 <xEventGroupWaitBits+0x54>
    configASSERT( uxBitsToWaitFor != 0 );
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <xEventGroupWaitBits+0x76>
        __asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	61bb      	str	r3, [r7, #24]
    }
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <xEventGroupWaitBits+0x72>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800867a:	f002 f811 	bl	800a6a0 <xTaskGetSchedulerState>
 800867e:	4603      	mov	r3, r0
 8008680:	2b00      	cmp	r3, #0
 8008682:	d102      	bne.n	800868a <xEventGroupWaitBits+0x86>
 8008684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <xEventGroupWaitBits+0x8a>
 800868a:	2301      	movs	r3, #1
 800868c:	e000      	b.n	8008690 <xEventGroupWaitBits+0x8c>
 800868e:	2300      	movs	r3, #0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d10b      	bne.n	80086ac <xEventGroupWaitBits+0xa8>
        __asm volatile
 8008694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008698:	f383 8811 	msr	BASEPRI, r3
 800869c:	f3bf 8f6f 	isb	sy
 80086a0:	f3bf 8f4f 	dsb	sy
 80086a4:	617b      	str	r3, [r7, #20]
    }
 80086a6:	bf00      	nop
 80086a8:	bf00      	nop
 80086aa:	e7fd      	b.n	80086a8 <xEventGroupWaitBits+0xa4>
        }
    #endif

    vTaskSuspendAll();
 80086ac:	f001 fb5e 	bl	8009d6c <vTaskSuspendAll>
    {
        const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80086b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Check to see if the wait condition is already met or not. */
        xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80086b6:	683a      	ldr	r2, [r7, #0]
 80086b8:	68b9      	ldr	r1, [r7, #8]
 80086ba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80086bc:	f000 f900 	bl	80088c0 <prvTestWaitCondition>
 80086c0:	62b8      	str	r0, [r7, #40]	@ 0x28

        if( xWaitConditionMet != pdFALSE )
 80086c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d00e      	beq.n	80086e6 <xEventGroupWaitBits+0xe2>
        {
            /* The wait condition has already been met so there is no need to
             * block. */
            uxReturn = uxCurrentEventBits;
 80086c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
            xTicksToWait = ( TickType_t ) 0;
 80086cc:	2300      	movs	r3, #0
 80086ce:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Clear the wait bits if requested to do so. */
            if( xClearOnExit != pdFALSE )
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d028      	beq.n	8008728 <xEventGroupWaitBits+0x124>
            {
                pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80086d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086d8:	681a      	ldr	r2, [r3, #0]
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	43db      	mvns	r3, r3
 80086de:	401a      	ands	r2, r3
 80086e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086e2:	601a      	str	r2, [r3, #0]
 80086e4:	e020      	b.n	8008728 <xEventGroupWaitBits+0x124>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else if( xTicksToWait == ( TickType_t ) 0 )
 80086e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d104      	bne.n	80086f6 <xEventGroupWaitBits+0xf2>
        {
            /* The wait condition has not been met, but no block time was
             * specified, so just return the current value. */
            uxReturn = uxCurrentEventBits;
 80086ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
            xTimeoutOccurred = pdTRUE;
 80086f0:	2301      	movs	r3, #1
 80086f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80086f4:	e018      	b.n	8008728 <xEventGroupWaitBits+0x124>
        {
            /* The task is going to block to wait for its required bits to be
             * set.  uxControlBits are used to remember the specified behaviour of
             * this call to xEventGroupWaitBits() - for use when the event bits
             * unblock the task. */
            if( xClearOnExit != pdFALSE )
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <xEventGroupWaitBits+0x100>
            {
                uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80086fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008702:	63bb      	str	r3, [r7, #56]	@ 0x38
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( xWaitForAllBits != pdFALSE )
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <xEventGroupWaitBits+0x10e>
            {
                uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800870a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800870c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008710:	63bb      	str	r3, [r7, #56]	@ 0x38
            }

            /* Store the bits that the calling task is waiting for in the
             * task's event list item so the kernel knows when a match is
             * found.  Then enter the blocked state. */
            vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8008712:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008714:	1d18      	adds	r0, r3, #4
 8008716:	68ba      	ldr	r2, [r7, #8]
 8008718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871a:	4313      	orrs	r3, r2
 800871c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800871e:	4619      	mov	r1, r3
 8008720:	f001 fd44 	bl	800a1ac <vTaskPlaceOnUnorderedEventList>

            /* This is obsolete as it will get set after the task unblocks, but
             * some compilers mistakenly generate a warning about the variable
             * being returned without being set if it is not done. */
            uxReturn = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	63fb      	str	r3, [r7, #60]	@ 0x3c

            traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
        }
    }
    xAlreadyYielded = xTaskResumeAll();
 8008728:	f001 fb2e 	bl	8009d88 <xTaskResumeAll>
 800872c:	6278      	str	r0, [r7, #36]	@ 0x24

    if( xTicksToWait != ( TickType_t ) 0 )
 800872e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008730:	2b00      	cmp	r3, #0
 8008732:	d031      	beq.n	8008798 <xEventGroupWaitBits+0x194>
    {
        if( xAlreadyYielded == pdFALSE )
 8008734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008736:	2b00      	cmp	r3, #0
 8008738:	d107      	bne.n	800874a <xEventGroupWaitBits+0x146>
        {
            portYIELD_WITHIN_API();
 800873a:	4b1a      	ldr	r3, [pc, #104]	@ (80087a4 <xEventGroupWaitBits+0x1a0>)
 800873c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008740:	601a      	str	r2, [r3, #0]
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	f3bf 8f6f 	isb	sy

        /* The task blocked to wait for its required bits to be set - at this
         * point either the required bits were set or the block time expired.  If
         * the required bits were set they will have been stored in the task's
         * event list item, and they should now be retrieved then cleared. */
        uxReturn = uxTaskResetEventItemValue();
 800874a:	f002 f95d 	bl	800aa08 <uxTaskResetEventItemValue>
 800874e:	63f8      	str	r0, [r7, #60]	@ 0x3c

        if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8008750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008752:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008756:	2b00      	cmp	r3, #0
 8008758:	d11a      	bne.n	8008790 <xEventGroupWaitBits+0x18c>
        {
            taskENTER_CRITICAL();
 800875a:	f003 f9e7 	bl	800bb2c <vPortEnterCritical>
            {
                /* The task timed out, just return the current event bit value. */
                uxReturn = pxEventBits->uxEventBits;
 800875e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	63fb      	str	r3, [r7, #60]	@ 0x3c

                /* It is possible that the event bits were updated between this
                 * task leaving the Blocked state and running again. */
                if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8008764:	683a      	ldr	r2, [r7, #0]
 8008766:	68b9      	ldr	r1, [r7, #8]
 8008768:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800876a:	f000 f8a9 	bl	80088c0 <prvTestWaitCondition>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d009      	beq.n	8008788 <xEventGroupWaitBits+0x184>
                {
                    if( xClearOnExit != pdFALSE )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d006      	beq.n	8008788 <xEventGroupWaitBits+0x184>
                    {
                        pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800877a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	43db      	mvns	r3, r3
 8008782:	401a      	ands	r2, r3
 8008784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008786:	601a      	str	r2, [r3, #0]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                xTimeoutOccurred = pdTRUE;
 8008788:	2301      	movs	r3, #1
 800878a:	633b      	str	r3, [r7, #48]	@ 0x30
            }
            taskEXIT_CRITICAL();
 800878c:	f003 fa00 	bl	800bb90 <vPortExitCritical>
        {
            /* The task unblocked because the bits were set. */
        }

        /* The task blocked so control bits may have been set. */
        uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008792:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008796:	63fb      	str	r3, [r7, #60]	@ 0x3c
    traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

    /* Prevent compiler warnings when trace macros are not used. */
    ( void ) xTimeoutOccurred;

    return uxReturn;
 8008798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800879a:	4618      	mov	r0, r3
 800879c:	3740      	adds	r7, #64	@ 0x40
 800879e:	46bd      	mov	sp, r7
 80087a0:	bd80      	pop	{r7, pc}
 80087a2:	bf00      	nop
 80087a4:	e000ed04 	.word	0xe000ed04

080087a8 <xEventGroupSetBits>:
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                const EventBits_t uxBitsToSet )
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b08e      	sub	sp, #56	@ 0x38
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
    ListItem_t * pxListItem, * pxNext;
    ListItem_t const * pxListEnd;
    List_t const * pxList;
    EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80087b2:	2300      	movs	r3, #0
 80087b4:	633b      	str	r3, [r7, #48]	@ 0x30
    EventGroup_t * pxEventBits = xEventGroup;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    BaseType_t xMatchFound = pdFALSE;
 80087ba:	2300      	movs	r3, #0
 80087bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Check the user is not attempting to set the bits used by the kernel
     * itself. */
    configASSERT( xEventGroup );
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d10b      	bne.n	80087dc <xEventGroupSetBits+0x34>
        __asm volatile
 80087c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c8:	f383 8811 	msr	BASEPRI, r3
 80087cc:	f3bf 8f6f 	isb	sy
 80087d0:	f3bf 8f4f 	dsb	sy
 80087d4:	613b      	str	r3, [r7, #16]
    }
 80087d6:	bf00      	nop
 80087d8:	bf00      	nop
 80087da:	e7fd      	b.n	80087d8 <xEventGroupSetBits+0x30>
    configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80087e2:	d30b      	bcc.n	80087fc <xEventGroupSetBits+0x54>
        __asm volatile
 80087e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087e8:	f383 8811 	msr	BASEPRI, r3
 80087ec:	f3bf 8f6f 	isb	sy
 80087f0:	f3bf 8f4f 	dsb	sy
 80087f4:	60fb      	str	r3, [r7, #12]
    }
 80087f6:	bf00      	nop
 80087f8:	bf00      	nop
 80087fa:	e7fd      	b.n	80087f8 <xEventGroupSetBits+0x50>

    pxList = &( pxEventBits->xTasksWaitingForBits );
 80087fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087fe:	3304      	adds	r3, #4
 8008800:	627b      	str	r3, [r7, #36]	@ 0x24
    pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008804:	3308      	adds	r3, #8
 8008806:	623b      	str	r3, [r7, #32]
    vTaskSuspendAll();
 8008808:	f001 fab0 	bl	8009d6c <vTaskSuspendAll>
    {
        traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

        pxListItem = listGET_HEAD_ENTRY( pxList );
 800880c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	637b      	str	r3, [r7, #52]	@ 0x34

        /* Set the bits. */
        pxEventBits->uxEventBits |= uxBitsToSet;
 8008812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	431a      	orrs	r2, r3
 800881a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800881c:	601a      	str	r2, [r3, #0]

        /* See if the new bit value should unblock any tasks. */
        while( pxListItem != pxListEnd )
 800881e:	e03c      	b.n	800889a <xEventGroupSetBits+0xf2>
        {
            pxNext = listGET_NEXT( pxListItem );
 8008820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	61fb      	str	r3, [r7, #28]
            uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8008826:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	61bb      	str	r3, [r7, #24]
            xMatchFound = pdFALSE;
 800882c:	2300      	movs	r3, #0
 800882e:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Split the bits waited for from the control bits. */
            uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8008830:	69bb      	ldr	r3, [r7, #24]
 8008832:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8008836:	617b      	str	r3, [r7, #20]
            uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800883e:	61bb      	str	r3, [r7, #24]

            if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008846:	2b00      	cmp	r3, #0
 8008848:	d108      	bne.n	800885c <xEventGroupSetBits+0xb4>
            {
                /* Just looking for single bit being set. */
                if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800884a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	4013      	ands	r3, r2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00b      	beq.n	800886e <xEventGroupSetBits+0xc6>
                {
                    xMatchFound = pdTRUE;
 8008856:	2301      	movs	r3, #1
 8008858:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800885a:	e008      	b.n	800886e <xEventGroupSetBits+0xc6>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800885c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	69bb      	ldr	r3, [r7, #24]
 8008862:	4013      	ands	r3, r2
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	429a      	cmp	r2, r3
 8008868:	d101      	bne.n	800886e <xEventGroupSetBits+0xc6>
            {
                /* All bits are set. */
                xMatchFound = pdTRUE;
 800886a:	2301      	movs	r3, #1
 800886c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            else
            {
                /* Need all bits to be set, but not all the bits were set. */
            }

            if( xMatchFound != pdFALSE )
 800886e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008870:	2b00      	cmp	r3, #0
 8008872:	d010      	beq.n	8008896 <xEventGroupSetBits+0xee>
            {
                /* The bits match.  Should the bits be cleared on exit? */
                if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800887a:	2b00      	cmp	r3, #0
 800887c:	d003      	beq.n	8008886 <xEventGroupSetBits+0xde>
                {
                    uxBitsToClear |= uxBitsWaitedFor;
 800887e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008880:	69bb      	ldr	r3, [r7, #24]
 8008882:	4313      	orrs	r3, r2
 8008884:	633b      	str	r3, [r7, #48]	@ 0x30
                /* Store the actual event flag value in the task's event list
                 * item before removing the task from the event list.  The
                 * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                 * that is was unblocked due to its required bits matching, rather
                 * than because it timed out. */
                vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8008886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800888e:	4619      	mov	r1, r3
 8008890:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8008892:	f001 fd61 	bl	800a358 <vTaskRemoveFromUnorderedEventList>
            }

            /* Move onto the next list item.  Note pxListItem->pxNext is not
             * used here as the list item may have been removed from the event list
             * and inserted into the ready/pending reading list. */
            pxListItem = pxNext;
 8008896:	69fb      	ldr	r3, [r7, #28]
 8008898:	637b      	str	r3, [r7, #52]	@ 0x34
        while( pxListItem != pxListEnd )
 800889a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800889c:	6a3b      	ldr	r3, [r7, #32]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d1be      	bne.n	8008820 <xEventGroupSetBits+0x78>
        }

        /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
         * bit was set in the control word. */
        pxEventBits->uxEventBits &= ~uxBitsToClear;
 80088a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a4:	681a      	ldr	r2, [r3, #0]
 80088a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088a8:	43db      	mvns	r3, r3
 80088aa:	401a      	ands	r2, r3
 80088ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ae:	601a      	str	r2, [r3, #0]
    }
    ( void ) xTaskResumeAll();
 80088b0:	f001 fa6a 	bl	8009d88 <xTaskResumeAll>

    return pxEventBits->uxEventBits;
 80088b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088b6:	681b      	ldr	r3, [r3, #0]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	3738      	adds	r7, #56	@ 0x38
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                        const EventBits_t uxBitsToWaitFor,
                                        const BaseType_t xWaitForAllBits )
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
    BaseType_t xWaitConditionMet = pdFALSE;
 80088cc:	2300      	movs	r3, #0
 80088ce:	617b      	str	r3, [r7, #20]

    if( xWaitForAllBits == pdFALSE )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d107      	bne.n	80088e6 <prvTestWaitCondition+0x26>
    {
        /* Task only has to wait for one bit within uxBitsToWaitFor to be
         * set.  Is one already set? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	4013      	ands	r3, r2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d00a      	beq.n	80088f6 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 80088e0:	2301      	movs	r3, #1
 80088e2:	617b      	str	r3, [r7, #20]
 80088e4:	e007      	b.n	80088f6 <prvTestWaitCondition+0x36>
    }
    else
    {
        /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
         * Are they set already? */
        if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	4013      	ands	r3, r2
 80088ec:	68ba      	ldr	r2, [r7, #8]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d101      	bne.n	80088f6 <prvTestWaitCondition+0x36>
        {
            xWaitConditionMet = pdTRUE;
 80088f2:	2301      	movs	r3, #1
 80088f4:	617b      	str	r3, [r7, #20]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    return xWaitConditionMet;
 80088f6:	697b      	ldr	r3, [r7, #20]
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	371c      	adds	r7, #28
 80088fc:	46bd      	mov	sp, r7
 80088fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008902:	4770      	bx	lr

08008904 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008904:	b480      	push	{r7}
 8008906:	b083      	sub	sp, #12
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f103 0208 	add.w	r2, r3, #8
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800891c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f103 0208 	add.w	r2, r3, #8
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	f103 0208 	add.w	r2, r3, #8
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008938:	bf00      	nop
 800893a:	370c      	adds	r7, #12
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr

08008944 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008952:	bf00      	nop
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800895e:	b480      	push	{r7}
 8008960:	b085      	sub	sp, #20
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
 8008966:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	68fa      	ldr	r2, [r7, #12]
 8008972:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	689a      	ldr	r2, [r3, #8]
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	683a      	ldr	r2, [r7, #0]
 8008982:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	683a      	ldr	r2, [r7, #0]
 8008988:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	1c5a      	adds	r2, r3, #1
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	601a      	str	r2, [r3, #0]
}
 800899a:	bf00      	nop
 800899c:	3714      	adds	r7, #20
 800899e:	46bd      	mov	sp, r7
 80089a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a4:	4770      	bx	lr

080089a6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80089a6:	b480      	push	{r7}
 80089a8:	b085      	sub	sp, #20
 80089aa:	af00      	add	r7, sp, #0
 80089ac:	6078      	str	r0, [r7, #4]
 80089ae:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80089bc:	d103      	bne.n	80089c6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	691b      	ldr	r3, [r3, #16]
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	e00c      	b.n	80089e0 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	3308      	adds	r3, #8
 80089ca:	60fb      	str	r3, [r7, #12]
 80089cc:	e002      	b.n	80089d4 <vListInsert+0x2e>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	60fb      	str	r3, [r7, #12]
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	685b      	ldr	r3, [r3, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	68ba      	ldr	r2, [r7, #8]
 80089dc:	429a      	cmp	r2, r3
 80089de:	d2f6      	bcs.n	80089ce <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	685a      	ldr	r2, [r3, #4]
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80089fc:	683b      	ldr	r3, [r7, #0]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	601a      	str	r2, [r3, #0]
}
 8008a0c:	bf00      	nop
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr

08008a18 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b085      	sub	sp, #20
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	691b      	ldr	r3, [r3, #16]
 8008a24:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	6892      	ldr	r2, [r2, #8]
 8008a2e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6852      	ldr	r2, [r2, #4]
 8008a38:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d103      	bne.n	8008a4c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	689a      	ldr	r2, [r3, #8]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	1e5a      	subs	r2, r3, #1
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b084      	sub	sp, #16
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
 8008a74:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d10b      	bne.n	8008a98 <xQueueGenericReset+0x2c>
        __asm volatile
 8008a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	60bb      	str	r3, [r7, #8]
    }
 8008a92:	bf00      	nop
 8008a94:	bf00      	nop
 8008a96:	e7fd      	b.n	8008a94 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8008a98:	f003 f848 	bl	800bb2c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008aa4:	68f9      	ldr	r1, [r7, #12]
 8008aa6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008aa8:	fb01 f303 	mul.w	r3, r1, r3
 8008aac:	441a      	add	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681a      	ldr	r2, [r3, #0]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681a      	ldr	r2, [r3, #0]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac8:	3b01      	subs	r3, #1
 8008aca:	68f9      	ldr	r1, [r7, #12]
 8008acc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008ace:	fb01 f303 	mul.w	r3, r1, r3
 8008ad2:	441a      	add	r2, r3
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	22ff      	movs	r2, #255	@ 0xff
 8008adc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	22ff      	movs	r2, #255	@ 0xff
 8008ae4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d114      	bne.n	8008b18 <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	691b      	ldr	r3, [r3, #16]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d01a      	beq.n	8008b2c <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	3310      	adds	r3, #16
 8008afa:	4618      	mov	r0, r3
 8008afc:	f001 fbc4 	bl	800a288 <xTaskRemoveFromEventList>
 8008b00:	4603      	mov	r3, r0
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d012      	beq.n	8008b2c <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8008b06:	4b0d      	ldr	r3, [pc, #52]	@ (8008b3c <xQueueGenericReset+0xd0>)
 8008b08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b0c:	601a      	str	r2, [r3, #0]
 8008b0e:	f3bf 8f4f 	dsb	sy
 8008b12:	f3bf 8f6f 	isb	sy
 8008b16:	e009      	b.n	8008b2c <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3310      	adds	r3, #16
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f7ff fef1 	bl	8008904 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	3324      	adds	r3, #36	@ 0x24
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7ff feec 	bl	8008904 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8008b2c:	f003 f830 	bl	800bb90 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8008b30:	2301      	movs	r3, #1
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3710      	adds	r7, #16
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	e000ed04 	.word	0xe000ed04

08008b40 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b08c      	sub	sp, #48	@ 0x30
 8008b44:	af02      	add	r7, sp, #8
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d10b      	bne.n	8008b6c <xQueueGenericCreate+0x2c>
        __asm volatile
 8008b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b58:	f383 8811 	msr	BASEPRI, r3
 8008b5c:	f3bf 8f6f 	isb	sy
 8008b60:	f3bf 8f4f 	dsb	sy
 8008b64:	61bb      	str	r3, [r7, #24]
    }
 8008b66:	bf00      	nop
 8008b68:	bf00      	nop
 8008b6a:	e7fd      	b.n	8008b68 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	68ba      	ldr	r2, [r7, #8]
 8008b70:	fb02 f303 	mul.w	r3, r2, r3
 8008b74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d006      	beq.n	8008b8a <xQueueGenericCreate+0x4a>
 8008b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b7e:	68bb      	ldr	r3, [r7, #8]
 8008b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	429a      	cmp	r2, r3
 8008b88:	d101      	bne.n	8008b8e <xQueueGenericCreate+0x4e>
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	e000      	b.n	8008b90 <xQueueGenericCreate+0x50>
 8008b8e:	2300      	movs	r3, #0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10b      	bne.n	8008bac <xQueueGenericCreate+0x6c>
        __asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	617b      	str	r3, [r7, #20]
    }
 8008ba6:	bf00      	nop
 8008ba8:	bf00      	nop
 8008baa:	e7fd      	b.n	8008ba8 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8008bb2:	d90b      	bls.n	8008bcc <xQueueGenericCreate+0x8c>
        __asm volatile
 8008bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bb8:	f383 8811 	msr	BASEPRI, r3
 8008bbc:	f3bf 8f6f 	isb	sy
 8008bc0:	f3bf 8f4f 	dsb	sy
 8008bc4:	613b      	str	r3, [r7, #16]
    }
 8008bc6:	bf00      	nop
 8008bc8:	bf00      	nop
 8008bca:	e7fd      	b.n	8008bc8 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bce:	3350      	adds	r3, #80	@ 0x50
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	f003 f8dd 	bl	800bd90 <pvPortMalloc>
 8008bd6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8008bd8:	6a3b      	ldr	r3, [r7, #32]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d00d      	beq.n	8008bfa <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008be2:	69fb      	ldr	r3, [r7, #28]
 8008be4:	3350      	adds	r3, #80	@ 0x50
 8008be6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008be8:	79fa      	ldrb	r2, [r7, #7]
 8008bea:	6a3b      	ldr	r3, [r7, #32]
 8008bec:	9300      	str	r3, [sp, #0]
 8008bee:	4613      	mov	r3, r2
 8008bf0:	69fa      	ldr	r2, [r7, #28]
 8008bf2:	68b9      	ldr	r1, [r7, #8]
 8008bf4:	68f8      	ldr	r0, [r7, #12]
 8008bf6:	f000 f805 	bl	8008c04 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008bfa:	6a3b      	ldr	r3, [r7, #32]
    }
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	3728      	adds	r7, #40	@ 0x28
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b084      	sub	sp, #16
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
 8008c10:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d103      	bne.n	8008c20 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	69ba      	ldr	r2, [r7, #24]
 8008c1c:	601a      	str	r2, [r3, #0]
 8008c1e:	e002      	b.n	8008c26 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008c20:	69bb      	ldr	r3, [r7, #24]
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008c26:	69bb      	ldr	r3, [r7, #24]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008c2c:	69bb      	ldr	r3, [r7, #24]
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008c32:	2101      	movs	r1, #1
 8008c34:	69b8      	ldr	r0, [r7, #24]
 8008c36:	f7ff ff19 	bl	8008a6c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8008c3a:	69bb      	ldr	r3, [r7, #24]
 8008c3c:	78fa      	ldrb	r2, [r7, #3]
 8008c3e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8008c42:	78fb      	ldrb	r3, [r7, #3]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	68f9      	ldr	r1, [r7, #12]
 8008c48:	2073      	movs	r0, #115	@ 0x73
 8008c4a:	f004 f91f 	bl	800ce8c <SEGGER_SYSVIEW_RecordU32x3>
}
 8008c4e:	bf00      	nop
 8008c50:	3710      	adds	r7, #16
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}
	...

08008c58 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b090      	sub	sp, #64	@ 0x40
 8008c5c:	af02      	add	r7, sp, #8
 8008c5e:	60f8      	str	r0, [r7, #12]
 8008c60:	60b9      	str	r1, [r7, #8]
 8008c62:	607a      	str	r2, [r7, #4]
 8008c64:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008c66:	2300      	movs	r3, #0
 8008c68:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <xQueueGenericSend+0x34>
        __asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8008c86:	bf00      	nop
 8008c88:	bf00      	nop
 8008c8a:	e7fd      	b.n	8008c88 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d103      	bne.n	8008c9a <xQueueGenericSend+0x42>
 8008c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d101      	bne.n	8008c9e <xQueueGenericSend+0x46>
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e000      	b.n	8008ca0 <xQueueGenericSend+0x48>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10b      	bne.n	8008cbc <xQueueGenericSend+0x64>
        __asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8008cb6:	bf00      	nop
 8008cb8:	bf00      	nop
 8008cba:	e7fd      	b.n	8008cb8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d103      	bne.n	8008cca <xQueueGenericSend+0x72>
 8008cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cc6:	2b01      	cmp	r3, #1
 8008cc8:	d101      	bne.n	8008cce <xQueueGenericSend+0x76>
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e000      	b.n	8008cd0 <xQueueGenericSend+0x78>
 8008cce:	2300      	movs	r3, #0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d10b      	bne.n	8008cec <xQueueGenericSend+0x94>
        __asm volatile
 8008cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	623b      	str	r3, [r7, #32]
    }
 8008ce6:	bf00      	nop
 8008ce8:	bf00      	nop
 8008cea:	e7fd      	b.n	8008ce8 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008cec:	f001 fcd8 	bl	800a6a0 <xTaskGetSchedulerState>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d102      	bne.n	8008cfc <xQueueGenericSend+0xa4>
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <xQueueGenericSend+0xa8>
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e000      	b.n	8008d02 <xQueueGenericSend+0xaa>
 8008d00:	2300      	movs	r3, #0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d10b      	bne.n	8008d1e <xQueueGenericSend+0xc6>
        __asm volatile
 8008d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d0a:	f383 8811 	msr	BASEPRI, r3
 8008d0e:	f3bf 8f6f 	isb	sy
 8008d12:	f3bf 8f4f 	dsb	sy
 8008d16:	61fb      	str	r3, [r7, #28]
    }
 8008d18:	bf00      	nop
 8008d1a:	bf00      	nop
 8008d1c:	e7fd      	b.n	8008d1a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008d1e:	f002 ff05 	bl	800bb2c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008d2a:	429a      	cmp	r2, r3
 8008d2c:	d302      	bcc.n	8008d34 <xQueueGenericSend+0xdc>
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d136      	bne.n	8008da2 <xQueueGenericSend+0x14a>
            {
                traceQUEUE_SEND( pxQueue );
 8008d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d36:	4618      	mov	r0, r3
 8008d38:	f004 fee2 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 8008d3c:	68ba      	ldr	r2, [r7, #8]
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	9300      	str	r3, [sp, #0]
 8008d44:	460b      	mov	r3, r1
 8008d46:	4601      	mov	r1, r0
 8008d48:	205a      	movs	r0, #90	@ 0x5a
 8008d4a:	f004 f915 	bl	800cf78 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008d4e:	683a      	ldr	r2, [r7, #0]
 8008d50:	68b9      	ldr	r1, [r7, #8]
 8008d52:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d54:	f000 fca7 	bl	80096a6 <prvCopyDataToQueue>
 8008d58:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d010      	beq.n	8008d84 <xQueueGenericSend+0x12c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	3324      	adds	r3, #36	@ 0x24
 8008d66:	4618      	mov	r0, r3
 8008d68:	f001 fa8e 	bl	800a288 <xTaskRemoveFromEventList>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d013      	beq.n	8008d9a <xQueueGenericSend+0x142>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8008d72:	4b4d      	ldr	r3, [pc, #308]	@ (8008ea8 <xQueueGenericSend+0x250>)
 8008d74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d78:	601a      	str	r2, [r3, #0]
 8008d7a:	f3bf 8f4f 	dsb	sy
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	e00a      	b.n	8008d9a <xQueueGenericSend+0x142>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8008d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d007      	beq.n	8008d9a <xQueueGenericSend+0x142>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8008d8a:	4b47      	ldr	r3, [pc, #284]	@ (8008ea8 <xQueueGenericSend+0x250>)
 8008d8c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8008d9a:	f002 fef9 	bl	800bb90 <vPortExitCritical>
                return pdPASS;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e07d      	b.n	8008e9e <xQueueGenericSend+0x246>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d110      	bne.n	8008dca <xQueueGenericSend+0x172>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8008da8:	f002 fef2 	bl	800bb90 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8008dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dae:	4618      	mov	r0, r3
 8008db0:	f004 fea6 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 8008db4:	68ba      	ldr	r2, [r7, #8]
 8008db6:	6879      	ldr	r1, [r7, #4]
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4601      	mov	r1, r0
 8008dc0:	205a      	movs	r0, #90	@ 0x5a
 8008dc2:	f004 f8d9 	bl	800cf78 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	e069      	b.n	8008e9e <xQueueGenericSend+0x246>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d106      	bne.n	8008dde <xQueueGenericSend+0x186>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8008dd0:	f107 0314 	add.w	r3, r7, #20
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	f001 fb27 	bl	800a428 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008dde:	f002 fed7 	bl	800bb90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008de2:	f000 ffc3 	bl	8009d6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008de6:	f002 fea1 	bl	800bb2c <vPortEnterCritical>
 8008dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008df0:	b25b      	sxtb	r3, r3
 8008df2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008df6:	d103      	bne.n	8008e00 <xQueueGenericSend+0x1a8>
 8008df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e06:	b25b      	sxtb	r3, r3
 8008e08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e0c:	d103      	bne.n	8008e16 <xQueueGenericSend+0x1be>
 8008e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008e16:	f002 febb 	bl	800bb90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008e1a:	1d3a      	adds	r2, r7, #4
 8008e1c:	f107 0314 	add.w	r3, r7, #20
 8008e20:	4611      	mov	r1, r2
 8008e22:	4618      	mov	r0, r3
 8008e24:	f001 fb16 	bl	800a454 <xTaskCheckForTimeOut>
 8008e28:	4603      	mov	r3, r0
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d124      	bne.n	8008e78 <xQueueGenericSend+0x220>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008e2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e30:	f000 fd31 	bl	8009896 <prvIsQueueFull>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d018      	beq.n	8008e6c <xQueueGenericSend+0x214>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e3c:	3310      	adds	r3, #16
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	4611      	mov	r1, r2
 8008e42:	4618      	mov	r0, r3
 8008e44:	f001 f98c 	bl	800a160 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008e48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e4a:	f000 fcbc 	bl	80097c6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008e4e:	f000 ff9b 	bl	8009d88 <xTaskResumeAll>
 8008e52:	4603      	mov	r3, r0
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	f47f af62 	bne.w	8008d1e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8008e5a:	4b13      	ldr	r3, [pc, #76]	@ (8008ea8 <xQueueGenericSend+0x250>)
 8008e5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e60:	601a      	str	r2, [r3, #0]
 8008e62:	f3bf 8f4f 	dsb	sy
 8008e66:	f3bf 8f6f 	isb	sy
 8008e6a:	e758      	b.n	8008d1e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008e6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e6e:	f000 fcaa 	bl	80097c6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8008e72:	f000 ff89 	bl	8009d88 <xTaskResumeAll>
 8008e76:	e752      	b.n	8008d1e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008e78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008e7a:	f000 fca4 	bl	80097c6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008e7e:	f000 ff83 	bl	8009d88 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8008e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e84:	4618      	mov	r0, r3
 8008e86:	f004 fe3b 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 8008e8a:	68ba      	ldr	r2, [r7, #8]
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	9300      	str	r3, [sp, #0]
 8008e92:	460b      	mov	r3, r1
 8008e94:	4601      	mov	r1, r0
 8008e96:	205a      	movs	r0, #90	@ 0x5a
 8008e98:	f004 f86e 	bl	800cf78 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8008e9c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3738      	adds	r7, #56	@ 0x38
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	e000ed04 	.word	0xe000ed04

08008eac <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b090      	sub	sp, #64	@ 0x40
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8008ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d10b      	bne.n	8008edc <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8008ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ec8:	f383 8811 	msr	BASEPRI, r3
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	f3bf 8f4f 	dsb	sy
 8008ed4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8008ed6:	bf00      	nop
 8008ed8:	bf00      	nop
 8008eda:	e7fd      	b.n	8008ed8 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d103      	bne.n	8008eea <xQueueGenericSendFromISR+0x3e>
 8008ee2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d101      	bne.n	8008eee <xQueueGenericSendFromISR+0x42>
 8008eea:	2301      	movs	r3, #1
 8008eec:	e000      	b.n	8008ef0 <xQueueGenericSendFromISR+0x44>
 8008eee:	2300      	movs	r3, #0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10b      	bne.n	8008f0c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8008f06:	bf00      	nop
 8008f08:	bf00      	nop
 8008f0a:	e7fd      	b.n	8008f08 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	d103      	bne.n	8008f1a <xQueueGenericSendFromISR+0x6e>
 8008f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d101      	bne.n	8008f1e <xQueueGenericSendFromISR+0x72>
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e000      	b.n	8008f20 <xQueueGenericSendFromISR+0x74>
 8008f1e:	2300      	movs	r3, #0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d10b      	bne.n	8008f3c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8008f24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f28:	f383 8811 	msr	BASEPRI, r3
 8008f2c:	f3bf 8f6f 	isb	sy
 8008f30:	f3bf 8f4f 	dsb	sy
 8008f34:	623b      	str	r3, [r7, #32]
    }
 8008f36:	bf00      	nop
 8008f38:	bf00      	nop
 8008f3a:	e7fd      	b.n	8008f38 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f3c:	f002 fee6 	bl	800bd0c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8008f40:	f3ef 8211 	mrs	r2, BASEPRI
 8008f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f48:	f383 8811 	msr	BASEPRI, r3
 8008f4c:	f3bf 8f6f 	isb	sy
 8008f50:	f3bf 8f4f 	dsb	sy
 8008f54:	61fa      	str	r2, [r7, #28]
 8008f56:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8008f58:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f5a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d302      	bcc.n	8008f6e <xQueueGenericSendFromISR+0xc2>
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d149      	bne.n	8009002 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8008f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f80:	4618      	mov	r0, r3
 8008f82:	f004 fdbd 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 8008f86:	4601      	mov	r1, r0
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	2060      	movs	r0, #96	@ 0x60
 8008f8e:	f003 ff23 	bl	800cdd8 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	68b9      	ldr	r1, [r7, #8]
 8008f96:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008f98:	f000 fb85 	bl	80096a6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8008f9c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008fa4:	d112      	bne.n	8008fcc <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d026      	beq.n	8008ffc <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb0:	3324      	adds	r3, #36	@ 0x24
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f001 f968 	bl	800a288 <xTaskRemoveFromEventList>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d01e      	beq.n	8008ffc <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d01b      	beq.n	8008ffc <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	601a      	str	r2, [r3, #0]
 8008fca:	e017      	b.n	8008ffc <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8008fcc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008fd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8008fd2:	d10b      	bne.n	8008fec <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8008fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd8:	f383 8811 	msr	BASEPRI, r3
 8008fdc:	f3bf 8f6f 	isb	sy
 8008fe0:	f3bf 8f4f 	dsb	sy
 8008fe4:	617b      	str	r3, [r7, #20]
    }
 8008fe6:	bf00      	nop
 8008fe8:	bf00      	nop
 8008fea:	e7fd      	b.n	8008fe8 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ff0:	3301      	adds	r3, #1
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	b25a      	sxtb	r2, r3
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8009000:	e00b      	b.n	800901a <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8009002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009004:	4618      	mov	r0, r3
 8009006:	f004 fd7b 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 800900a:	4601      	mov	r1, r0
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	461a      	mov	r2, r3
 8009010:	2060      	movs	r0, #96	@ 0x60
 8009012:	f003 fee1 	bl	800cdd8 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8009016:	2300      	movs	r3, #0
 8009018:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800901a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800901c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8009024:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009026:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009028:	4618      	mov	r0, r3
 800902a:	3740      	adds	r7, #64	@ 0x40
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8009030:	b590      	push	{r4, r7, lr}
 8009032:	b08f      	sub	sp, #60	@ 0x3c
 8009034:	af02      	add	r7, sp, #8
 8009036:	60f8      	str	r0, [r7, #12]
 8009038:	60b9      	str	r1, [r7, #8]
 800903a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800903c:	2300      	movs	r3, #0
 800903e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8009044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10b      	bne.n	8009062 <xQueueReceive+0x32>
        __asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	623b      	str	r3, [r7, #32]
    }
 800905c:	bf00      	nop
 800905e:	bf00      	nop
 8009060:	e7fd      	b.n	800905e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d103      	bne.n	8009070 <xQueueReceive+0x40>
 8009068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800906a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <xQueueReceive+0x44>
 8009070:	2301      	movs	r3, #1
 8009072:	e000      	b.n	8009076 <xQueueReceive+0x46>
 8009074:	2300      	movs	r3, #0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10b      	bne.n	8009092 <xQueueReceive+0x62>
        __asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	61fb      	str	r3, [r7, #28]
    }
 800908c:	bf00      	nop
 800908e:	bf00      	nop
 8009090:	e7fd      	b.n	800908e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009092:	f001 fb05 	bl	800a6a0 <xTaskGetSchedulerState>
 8009096:	4603      	mov	r3, r0
 8009098:	2b00      	cmp	r3, #0
 800909a:	d102      	bne.n	80090a2 <xQueueReceive+0x72>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <xQueueReceive+0x76>
 80090a2:	2301      	movs	r3, #1
 80090a4:	e000      	b.n	80090a8 <xQueueReceive+0x78>
 80090a6:	2300      	movs	r3, #0
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d10b      	bne.n	80090c4 <xQueueReceive+0x94>
        __asm volatile
 80090ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b0:	f383 8811 	msr	BASEPRI, r3
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	f3bf 8f4f 	dsb	sy
 80090bc:	61bb      	str	r3, [r7, #24]
    }
 80090be:	bf00      	nop
 80090c0:	bf00      	nop
 80090c2:	e7fd      	b.n	80090c0 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80090c4:	f002 fd32 	bl	800bb2c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090cc:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d02f      	beq.n	8009134 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090d4:	68b9      	ldr	r1, [r7, #8]
 80090d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090d8:	f000 fb4f 	bl	800977a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80090dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090de:	4618      	mov	r0, r3
 80090e0:	f004 fd0e 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 80090e4:	4604      	mov	r4, r0
 80090e6:	2000      	movs	r0, #0
 80090e8:	f004 fd0a 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 80090ec:	4602      	mov	r2, r0
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2101      	movs	r1, #1
 80090f2:	9100      	str	r1, [sp, #0]
 80090f4:	4621      	mov	r1, r4
 80090f6:	205c      	movs	r0, #92	@ 0x5c
 80090f8:	f003 ff3e 	bl	800cf78 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090fe:	1e5a      	subs	r2, r3, #1
 8009100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009102:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009106:	691b      	ldr	r3, [r3, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00f      	beq.n	800912c <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800910c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800910e:	3310      	adds	r3, #16
 8009110:	4618      	mov	r0, r3
 8009112:	f001 f8b9 	bl	800a288 <xTaskRemoveFromEventList>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d007      	beq.n	800912c <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800911c:	4b4d      	ldr	r3, [pc, #308]	@ (8009254 <xQueueReceive+0x224>)
 800911e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800912c:	f002 fd30 	bl	800bb90 <vPortExitCritical>
                return pdPASS;
 8009130:	2301      	movs	r3, #1
 8009132:	e08a      	b.n	800924a <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d113      	bne.n	8009162 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800913a:	f002 fd29 	bl	800bb90 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800913e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009140:	4618      	mov	r0, r3
 8009142:	f004 fcdd 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 8009146:	4604      	mov	r4, r0
 8009148:	2000      	movs	r0, #0
 800914a:	f004 fcd9 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 800914e:	4602      	mov	r2, r0
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2101      	movs	r1, #1
 8009154:	9100      	str	r1, [sp, #0]
 8009156:	4621      	mov	r1, r4
 8009158:	205c      	movs	r0, #92	@ 0x5c
 800915a:	f003 ff0d 	bl	800cf78 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800915e:	2300      	movs	r3, #0
 8009160:	e073      	b.n	800924a <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8009162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009164:	2b00      	cmp	r3, #0
 8009166:	d106      	bne.n	8009176 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8009168:	f107 0310 	add.w	r3, r7, #16
 800916c:	4618      	mov	r0, r3
 800916e:	f001 f95b 	bl	800a428 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8009172:	2301      	movs	r3, #1
 8009174:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8009176:	f002 fd0b 	bl	800bb90 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800917a:	f000 fdf7 	bl	8009d6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800917e:	f002 fcd5 	bl	800bb2c <vPortEnterCritical>
 8009182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009184:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009188:	b25b      	sxtb	r3, r3
 800918a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800918e:	d103      	bne.n	8009198 <xQueueReceive+0x168>
 8009190:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009192:	2200      	movs	r2, #0
 8009194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800919a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800919e:	b25b      	sxtb	r3, r3
 80091a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80091a4:	d103      	bne.n	80091ae <xQueueReceive+0x17e>
 80091a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80091ae:	f002 fcef 	bl	800bb90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80091b2:	1d3a      	adds	r2, r7, #4
 80091b4:	f107 0310 	add.w	r3, r7, #16
 80091b8:	4611      	mov	r1, r2
 80091ba:	4618      	mov	r0, r3
 80091bc:	f001 f94a 	bl	800a454 <xTaskCheckForTimeOut>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d124      	bne.n	8009210 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091c8:	f000 fb4f 	bl	800986a <prvIsQueueEmpty>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d018      	beq.n	8009204 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80091d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d4:	3324      	adds	r3, #36	@ 0x24
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	4611      	mov	r1, r2
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 ffc0 	bl	800a160 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80091e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091e2:	f000 faf0 	bl	80097c6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80091e6:	f000 fdcf 	bl	8009d88 <xTaskResumeAll>
 80091ea:	4603      	mov	r3, r0
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f47f af69 	bne.w	80090c4 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80091f2:	4b18      	ldr	r3, [pc, #96]	@ (8009254 <xQueueReceive+0x224>)
 80091f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091f8:	601a      	str	r2, [r3, #0]
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	f3bf 8f6f 	isb	sy
 8009202:	e75f      	b.n	80090c4 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8009204:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009206:	f000 fade 	bl	80097c6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800920a:	f000 fdbd 	bl	8009d88 <xTaskResumeAll>
 800920e:	e759      	b.n	80090c4 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8009210:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009212:	f000 fad8 	bl	80097c6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009216:	f000 fdb7 	bl	8009d88 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800921a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800921c:	f000 fb25 	bl	800986a <prvIsQueueEmpty>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	f43f af4e 	beq.w	80090c4 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922a:	4618      	mov	r0, r3
 800922c:	f004 fc68 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 8009230:	4604      	mov	r4, r0
 8009232:	2000      	movs	r0, #0
 8009234:	f004 fc64 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 8009238:	4602      	mov	r2, r0
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2101      	movs	r1, #1
 800923e:	9100      	str	r1, [sp, #0]
 8009240:	4621      	mov	r1, r4
 8009242:	205c      	movs	r0, #92	@ 0x5c
 8009244:	f003 fe98 	bl	800cf78 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8009248:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800924a:	4618      	mov	r0, r3
 800924c:	3734      	adds	r7, #52	@ 0x34
 800924e:	46bd      	mov	sp, r7
 8009250:	bd90      	pop	{r4, r7, pc}
 8009252:	bf00      	nop
 8009254:	e000ed04 	.word	0xe000ed04

08009258 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8009258:	b590      	push	{r4, r7, lr}
 800925a:	b091      	sub	sp, #68	@ 0x44
 800925c:	af02      	add	r7, sp, #8
 800925e:	6078      	str	r0, [r7, #4]
 8009260:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8009262:	2300      	movs	r3, #0
 8009264:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800926a:	2300      	movs	r3, #0
 800926c:	633b      	str	r3, [r7, #48]	@ 0x30
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800926e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10b      	bne.n	800928c <xQueueSemaphoreTake+0x34>
        __asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	623b      	str	r3, [r7, #32]
    }
 8009286:	bf00      	nop
 8009288:	bf00      	nop
 800928a:	e7fd      	b.n	8009288 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800928c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00b      	beq.n	80092ac <xQueueSemaphoreTake+0x54>
        __asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	61fb      	str	r3, [r7, #28]
    }
 80092a6:	bf00      	nop
 80092a8:	bf00      	nop
 80092aa:	e7fd      	b.n	80092a8 <xQueueSemaphoreTake+0x50>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092ac:	f001 f9f8 	bl	800a6a0 <xTaskGetSchedulerState>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d102      	bne.n	80092bc <xQueueSemaphoreTake+0x64>
 80092b6:	683b      	ldr	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d101      	bne.n	80092c0 <xQueueSemaphoreTake+0x68>
 80092bc:	2301      	movs	r3, #1
 80092be:	e000      	b.n	80092c2 <xQueueSemaphoreTake+0x6a>
 80092c0:	2300      	movs	r3, #0
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d10b      	bne.n	80092de <xQueueSemaphoreTake+0x86>
        __asm volatile
 80092c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ca:	f383 8811 	msr	BASEPRI, r3
 80092ce:	f3bf 8f6f 	isb	sy
 80092d2:	f3bf 8f4f 	dsb	sy
 80092d6:	61bb      	str	r3, [r7, #24]
    }
 80092d8:	bf00      	nop
 80092da:	bf00      	nop
 80092dc:	e7fd      	b.n	80092da <xQueueSemaphoreTake+0x82>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80092de:	f002 fc25 	bl	800bb2c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80092e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e6:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80092e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d034      	beq.n	8009358 <xQueueSemaphoreTake+0x100>
            {
                traceQUEUE_RECEIVE( pxQueue );
 80092ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80092f0:	4618      	mov	r0, r3
 80092f2:	f004 fc05 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 80092f6:	4604      	mov	r4, r0
 80092f8:	2000      	movs	r0, #0
 80092fa:	f004 fc01 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 80092fe:	4602      	mov	r2, r0
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	2101      	movs	r1, #1
 8009304:	9100      	str	r1, [sp, #0]
 8009306:	4621      	mov	r1, r4
 8009308:	205c      	movs	r0, #92	@ 0x5c
 800930a:	f003 fe35 	bl	800cf78 <SEGGER_SYSVIEW_RecordU32x4>

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800930e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009310:	1e5a      	subs	r2, r3, #1
 8009312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009314:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d104      	bne.n	8009328 <xQueueSemaphoreTake+0xd0>
                        {
                            /* Record the information required to implement
                             * priority inheritance should it become necessary. */
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800931e:	f001 fb8b 	bl	800aa38 <pvTaskIncrementMutexHeldCount>
 8009322:	4602      	mov	r2, r0
 8009324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009326:	609a      	str	r2, [r3, #8]
                    }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932a:	691b      	ldr	r3, [r3, #16]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d00f      	beq.n	8009350 <xQueueSemaphoreTake+0xf8>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009332:	3310      	adds	r3, #16
 8009334:	4618      	mov	r0, r3
 8009336:	f000 ffa7 	bl	800a288 <xTaskRemoveFromEventList>
 800933a:	4603      	mov	r3, r0
 800933c:	2b00      	cmp	r3, #0
 800933e:	d007      	beq.n	8009350 <xQueueSemaphoreTake+0xf8>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8009340:	4b64      	ldr	r3, [pc, #400]	@ (80094d4 <xQueueSemaphoreTake+0x27c>)
 8009342:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009346:	601a      	str	r2, [r3, #0]
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8009350:	f002 fc1e 	bl	800bb90 <vPortExitCritical>
                return pdPASS;
 8009354:	2301      	movs	r3, #1
 8009356:	e0b8      	b.n	80094ca <xQueueSemaphoreTake+0x272>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	2b00      	cmp	r3, #0
 800935c:	d122      	bne.n	80093a4 <xQueueSemaphoreTake+0x14c>
                    /* For inheritance to have occurred there must have been an
                     * initial timeout, and an adjusted timeout cannot become 0, as
                     * if it were 0 the function would have exited. */
                    #if ( configUSE_MUTEXES == 1 )
                        {
                            configASSERT( xInheritanceOccurred == pdFALSE );
 800935e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009360:	2b00      	cmp	r3, #0
 8009362:	d00b      	beq.n	800937c <xQueueSemaphoreTake+0x124>
        __asm volatile
 8009364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009368:	f383 8811 	msr	BASEPRI, r3
 800936c:	f3bf 8f6f 	isb	sy
 8009370:	f3bf 8f4f 	dsb	sy
 8009374:	617b      	str	r3, [r7, #20]
    }
 8009376:	bf00      	nop
 8009378:	bf00      	nop
 800937a:	e7fd      	b.n	8009378 <xQueueSemaphoreTake+0x120>
                        }
                    #endif /* configUSE_MUTEXES */

                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 800937c:	f002 fc08 	bl	800bb90 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8009380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009382:	4618      	mov	r0, r3
 8009384:	f004 fbbc 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 8009388:	4604      	mov	r4, r0
 800938a:	2000      	movs	r0, #0
 800938c:	f004 fbb8 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 8009390:	4602      	mov	r2, r0
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	2101      	movs	r1, #1
 8009396:	9100      	str	r1, [sp, #0]
 8009398:	4621      	mov	r1, r4
 800939a:	205c      	movs	r0, #92	@ 0x5c
 800939c:	f003 fdec 	bl	800cf78 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e092      	b.n	80094ca <xQueueSemaphoreTake+0x272>
                }
                else if( xEntryTimeSet == pdFALSE )
 80093a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <xQueueSemaphoreTake+0x160>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80093aa:	f107 030c 	add.w	r3, r7, #12
 80093ae:	4618      	mov	r0, r3
 80093b0:	f001 f83a 	bl	800a428 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80093b4:	2301      	movs	r3, #1
 80093b6:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80093b8:	f002 fbea 	bl	800bb90 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80093bc:	f000 fcd6 	bl	8009d6c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80093c0:	f002 fbb4 	bl	800bb2c <vPortEnterCritical>
 80093c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80093ca:	b25b      	sxtb	r3, r3
 80093cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093d0:	d103      	bne.n	80093da <xQueueSemaphoreTake+0x182>
 80093d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80093da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80093e0:	b25b      	sxtb	r3, r3
 80093e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093e6:	d103      	bne.n	80093f0 <xQueueSemaphoreTake+0x198>
 80093e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80093f0:	f002 fbce 	bl	800bb90 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093f4:	463a      	mov	r2, r7
 80093f6:	f107 030c 	add.w	r3, r7, #12
 80093fa:	4611      	mov	r1, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f001 f829 	bl	800a454 <xTaskCheckForTimeOut>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d132      	bne.n	800946e <xQueueSemaphoreTake+0x216>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009408:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800940a:	f000 fa2e 	bl	800986a <prvIsQueueEmpty>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d026      	beq.n	8009462 <xQueueSemaphoreTake+0x20a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                    {
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d109      	bne.n	8009430 <xQueueSemaphoreTake+0x1d8>
                        {
                            taskENTER_CRITICAL();
 800941c:	f002 fb86 	bl	800bb2c <vPortEnterCritical>
                            {
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009422:	689b      	ldr	r3, [r3, #8]
 8009424:	4618      	mov	r0, r3
 8009426:	f001 f959 	bl	800a6dc <xTaskPriorityInherit>
 800942a:	6338      	str	r0, [r7, #48]	@ 0x30
                            }
                            taskEXIT_CRITICAL();
 800942c:	f002 fbb0 	bl	800bb90 <vPortExitCritical>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009432:	3324      	adds	r3, #36	@ 0x24
 8009434:	683a      	ldr	r2, [r7, #0]
 8009436:	4611      	mov	r1, r2
 8009438:	4618      	mov	r0, r3
 800943a:	f000 fe91 	bl	800a160 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800943e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009440:	f000 f9c1 	bl	80097c6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8009444:	f000 fca0 	bl	8009d88 <xTaskResumeAll>
 8009448:	4603      	mov	r3, r0
 800944a:	2b00      	cmp	r3, #0
 800944c:	f47f af47 	bne.w	80092de <xQueueSemaphoreTake+0x86>
                {
                    portYIELD_WITHIN_API();
 8009450:	4b20      	ldr	r3, [pc, #128]	@ (80094d4 <xQueueSemaphoreTake+0x27c>)
 8009452:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009456:	601a      	str	r2, [r3, #0]
 8009458:	f3bf 8f4f 	dsb	sy
 800945c:	f3bf 8f6f 	isb	sy
 8009460:	e73d      	b.n	80092de <xQueueSemaphoreTake+0x86>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8009462:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009464:	f000 f9af 	bl	80097c6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8009468:	f000 fc8e 	bl	8009d88 <xTaskResumeAll>
 800946c:	e737      	b.n	80092de <xQueueSemaphoreTake+0x86>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 800946e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009470:	f000 f9a9 	bl	80097c6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8009474:	f000 fc88 	bl	8009d88 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009478:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800947a:	f000 f9f6 	bl	800986a <prvIsQueueEmpty>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	f43f af2c 	beq.w	80092de <xQueueSemaphoreTake+0x86>
                #if ( configUSE_MUTEXES == 1 )
                    {
                        /* xInheritanceOccurred could only have be set if
                         * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                         * test the mutex type again to check it is actually a mutex. */
                        if( xInheritanceOccurred != pdFALSE )
 8009486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00d      	beq.n	80094a8 <xQueueSemaphoreTake+0x250>
                        {
                            taskENTER_CRITICAL();
 800948c:	f002 fb4e 	bl	800bb2c <vPortEnterCritical>
                                /* This task blocking on the mutex caused another
                                 * task to inherit this task's priority.  Now this task
                                 * has timed out the priority should be disinherited
                                 * again, but only as low as the next highest priority
                                 * task that is waiting for the same mutex. */
                                uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009490:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009492:	f000 f8f0 	bl	8009676 <prvGetDisinheritPriorityAfterTimeout>
 8009496:	6278      	str	r0, [r7, #36]	@ 0x24
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800949e:	4618      	mov	r0, r3
 80094a0:	f001 fa18 	bl	800a8d4 <vTaskPriorityDisinheritAfterTimeout>
                            }
                            taskEXIT_CRITICAL();
 80094a4:	f002 fb74 	bl	800bb90 <vPortExitCritical>
                        }
                    }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80094a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094aa:	4618      	mov	r0, r3
 80094ac:	f004 fb28 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 80094b0:	4604      	mov	r4, r0
 80094b2:	2000      	movs	r0, #0
 80094b4:	f004 fb24 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 80094b8:	4602      	mov	r2, r0
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	2101      	movs	r1, #1
 80094be:	9100      	str	r1, [sp, #0]
 80094c0:	4621      	mov	r1, r4
 80094c2:	205c      	movs	r0, #92	@ 0x5c
 80094c4:	f003 fd58 	bl	800cf78 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80094c8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80094ca:	4618      	mov	r0, r3
 80094cc:	373c      	adds	r7, #60	@ 0x3c
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd90      	pop	{r4, r7, pc}
 80094d2:	bf00      	nop
 80094d4:	e000ed04 	.word	0xe000ed04

080094d8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80094d8:	b590      	push	{r4, r7, lr}
 80094da:	b091      	sub	sp, #68	@ 0x44
 80094dc:	af00      	add	r7, sp, #0
 80094de:	60f8      	str	r0, [r7, #12]
 80094e0:	60b9      	str	r1, [r7, #8]
 80094e2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80094e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10b      	bne.n	8009506 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 80094ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8009500:	bf00      	nop
 8009502:	bf00      	nop
 8009504:	e7fd      	b.n	8009502 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d103      	bne.n	8009514 <xQueueReceiveFromISR+0x3c>
 800950c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800950e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009510:	2b00      	cmp	r3, #0
 8009512:	d101      	bne.n	8009518 <xQueueReceiveFromISR+0x40>
 8009514:	2301      	movs	r3, #1
 8009516:	e000      	b.n	800951a <xQueueReceiveFromISR+0x42>
 8009518:	2300      	movs	r3, #0
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10b      	bne.n	8009536 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 800951e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009522:	f383 8811 	msr	BASEPRI, r3
 8009526:	f3bf 8f6f 	isb	sy
 800952a:	f3bf 8f4f 	dsb	sy
 800952e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8009530:	bf00      	nop
 8009532:	bf00      	nop
 8009534:	e7fd      	b.n	8009532 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009536:	f002 fbe9 	bl	800bd0c <vPortValidateInterruptPriority>
        __asm volatile
 800953a:	f3ef 8211 	mrs	r2, BASEPRI
 800953e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009542:	f383 8811 	msr	BASEPRI, r3
 8009546:	f3bf 8f6f 	isb	sy
 800954a:	f3bf 8f4f 	dsb	sy
 800954e:	623a      	str	r2, [r7, #32]
 8009550:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8009552:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009554:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800955a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800955c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800955e:	2b00      	cmp	r3, #0
 8009560:	d04e      	beq.n	8009600 <xQueueReceiveFromISR+0x128>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8009562:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009568:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );
 800956c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800956e:	4618      	mov	r0, r3
 8009570:	f004 fac6 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 8009574:	4604      	mov	r4, r0
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	4618      	mov	r0, r3
 800957a:	f004 fac1 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 800957e:	4602      	mov	r2, r0
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4621      	mov	r1, r4
 8009584:	2062      	movs	r0, #98	@ 0x62
 8009586:	f003 fc81 	bl	800ce8c <SEGGER_SYSVIEW_RecordU32x3>

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800958a:	68b9      	ldr	r1, [r7, #8]
 800958c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800958e:	f000 f8f4 	bl	800977a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009594:	1e5a      	subs	r2, r3, #1
 8009596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009598:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800959a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800959e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80095a2:	d112      	bne.n	80095ca <xQueueReceiveFromISR+0xf2>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a6:	691b      	ldr	r3, [r3, #16]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d026      	beq.n	80095fa <xQueueReceiveFromISR+0x122>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80095ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095ae:	3310      	adds	r3, #16
 80095b0:	4618      	mov	r0, r3
 80095b2:	f000 fe69 	bl	800a288 <xTaskRemoveFromEventList>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d01e      	beq.n	80095fa <xQueueReceiveFromISR+0x122>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d01b      	beq.n	80095fa <xQueueReceiveFromISR+0x122>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	2201      	movs	r2, #1
 80095c6:	601a      	str	r2, [r3, #0]
 80095c8:	e017      	b.n	80095fa <xQueueReceiveFromISR+0x122>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 80095ca:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80095ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80095d0:	d10b      	bne.n	80095ea <xQueueReceiveFromISR+0x112>
        __asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	61bb      	str	r3, [r7, #24]
    }
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	e7fd      	b.n	80095e6 <xQueueReceiveFromISR+0x10e>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80095ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80095ee:	3301      	adds	r3, #1
 80095f0:	b2db      	uxtb	r3, r3
 80095f2:	b25a      	sxtb	r2, r3
 80095f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 80095fa:	2301      	movs	r3, #1
 80095fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095fe:	e010      	b.n	8009622 <xQueueReceiveFromISR+0x14a>
        }
        else
        {
            xReturn = pdFAIL;
 8009600:	2300      	movs	r3, #0
 8009602:	63fb      	str	r3, [r7, #60]	@ 0x3c
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
 8009604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009606:	4618      	mov	r0, r3
 8009608:	f004 fa7a 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 800960c:	4604      	mov	r4, r0
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	4618      	mov	r0, r3
 8009612:	f004 fa75 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 8009616:	4602      	mov	r2, r0
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4621      	mov	r1, r4
 800961c:	2062      	movs	r0, #98	@ 0x62
 800961e:	f003 fc35 	bl	800ce8c <SEGGER_SYSVIEW_RecordU32x3>
 8009622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009624:	617b      	str	r3, [r7, #20]
        __asm volatile
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f383 8811 	msr	BASEPRI, r3
    }
 800962c:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800962e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009630:	4618      	mov	r0, r3
 8009632:	3744      	adds	r7, #68	@ 0x44
 8009634:	46bd      	mov	sp, r7
 8009636:	bd90      	pop	{r4, r7, pc}

08009638 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b084      	sub	sp, #16
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d10b      	bne.n	800965e <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	60bb      	str	r3, [r7, #8]
    }
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800965e:	f002 fa65 	bl	800bb2c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009666:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8009668:	f002 fa92 	bl	800bb90 <vPortExitCritical>

    return uxReturn;
 800966c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8009676:	b480      	push	{r7}
 8009678:	b085      	sub	sp, #20
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009682:	2b00      	cmp	r3, #0
 8009684:	d006      	beq.n	8009694 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f1c3 0305 	rsb	r3, r3, #5
 8009690:	60fb      	str	r3, [r7, #12]
 8009692:	e001      	b.n	8009698 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009694:	2300      	movs	r3, #0
 8009696:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8009698:	68fb      	ldr	r3, [r7, #12]
    }
 800969a:	4618      	mov	r0, r3
 800969c:	3714      	adds	r7, #20
 800969e:	46bd      	mov	sp, r7
 80096a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a4:	4770      	bx	lr

080096a6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80096a6:	b580      	push	{r7, lr}
 80096a8:	b086      	sub	sp, #24
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	60f8      	str	r0, [r7, #12]
 80096ae:	60b9      	str	r1, [r7, #8]
 80096b0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80096b2:	2300      	movs	r3, #0
 80096b4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80096ba:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d10d      	bne.n	80096e0 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d14d      	bne.n	8009768 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f001 f87d 	bl	800a7d0 <xTaskPriorityDisinherit>
 80096d6:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	609a      	str	r2, [r3, #8]
 80096de:	e043      	b.n	8009768 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d119      	bne.n	800971a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6858      	ldr	r0, [r3, #4]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096ee:	461a      	mov	r2, r3
 80096f0:	68b9      	ldr	r1, [r7, #8]
 80096f2:	f004 fbbb 	bl	800de6c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	685a      	ldr	r2, [r3, #4]
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096fe:	441a      	add	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	429a      	cmp	r2, r3
 800970e:	d32b      	bcc.n	8009768 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681a      	ldr	r2, [r3, #0]
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	605a      	str	r2, [r3, #4]
 8009718:	e026      	b.n	8009768 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	68d8      	ldr	r0, [r3, #12]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009722:	461a      	mov	r2, r3
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	f004 fba1 	bl	800de6c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009732:	425b      	negs	r3, r3
 8009734:	441a      	add	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	68da      	ldr	r2, [r3, #12]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	429a      	cmp	r2, r3
 8009744:	d207      	bcs.n	8009756 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	689a      	ldr	r2, [r3, #8]
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800974e:	425b      	negs	r3, r3
 8009750:	441a      	add	r2, r3
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b02      	cmp	r3, #2
 800975a:	d105      	bne.n	8009768 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d002      	beq.n	8009768 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	3b01      	subs	r3, #1
 8009766:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	1c5a      	adds	r2, r3, #1
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8009770:	697b      	ldr	r3, [r7, #20]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b082      	sub	sp, #8
 800977e:	af00      	add	r7, sp, #0
 8009780:	6078      	str	r0, [r7, #4]
 8009782:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009788:	2b00      	cmp	r3, #0
 800978a:	d018      	beq.n	80097be <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	68da      	ldr	r2, [r3, #12]
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009794:	441a      	add	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	68da      	ldr	r2, [r3, #12]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	429a      	cmp	r2, r3
 80097a4:	d303      	bcc.n	80097ae <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681a      	ldr	r2, [r3, #0]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68d9      	ldr	r1, [r3, #12]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097b6:	461a      	mov	r2, r3
 80097b8:	6838      	ldr	r0, [r7, #0]
 80097ba:	f004 fb57 	bl	800de6c <memcpy>
    }
}
 80097be:	bf00      	nop
 80097c0:	3708      	adds	r7, #8
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}

080097c6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80097c6:	b580      	push	{r7, lr}
 80097c8:	b084      	sub	sp, #16
 80097ca:	af00      	add	r7, sp, #0
 80097cc:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80097ce:	f002 f9ad 	bl	800bb2c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80097d8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80097da:	e011      	b.n	8009800 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d012      	beq.n	800980a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	3324      	adds	r3, #36	@ 0x24
 80097e8:	4618      	mov	r0, r3
 80097ea:	f000 fd4d 	bl	800a288 <xTaskRemoveFromEventList>
 80097ee:	4603      	mov	r3, r0
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d001      	beq.n	80097f8 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80097f4:	f000 fe96 	bl	800a524 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80097f8:	7bfb      	ldrb	r3, [r7, #15]
 80097fa:	3b01      	subs	r3, #1
 80097fc:	b2db      	uxtb	r3, r3
 80097fe:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8009800:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009804:	2b00      	cmp	r3, #0
 8009806:	dce9      	bgt.n	80097dc <prvUnlockQueue+0x16>
 8009808:	e000      	b.n	800980c <prvUnlockQueue+0x46>
                        break;
 800980a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	22ff      	movs	r2, #255	@ 0xff
 8009810:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8009814:	f002 f9bc 	bl	800bb90 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8009818:	f002 f988 	bl	800bb2c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009822:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8009824:	e011      	b.n	800984a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	691b      	ldr	r3, [r3, #16]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d012      	beq.n	8009854 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	3310      	adds	r3, #16
 8009832:	4618      	mov	r0, r3
 8009834:	f000 fd28 	bl	800a288 <xTaskRemoveFromEventList>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	d001      	beq.n	8009842 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800983e:	f000 fe71 	bl	800a524 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8009842:	7bbb      	ldrb	r3, [r7, #14]
 8009844:	3b01      	subs	r3, #1
 8009846:	b2db      	uxtb	r3, r3
 8009848:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800984a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800984e:	2b00      	cmp	r3, #0
 8009850:	dce9      	bgt.n	8009826 <prvUnlockQueue+0x60>
 8009852:	e000      	b.n	8009856 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8009854:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	22ff      	movs	r2, #255	@ 0xff
 800985a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800985e:	f002 f997 	bl	800bb90 <vPortExitCritical>
}
 8009862:	bf00      	nop
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b084      	sub	sp, #16
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8009872:	f002 f95b 	bl	800bb2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800987e:	2301      	movs	r3, #1
 8009880:	60fb      	str	r3, [r7, #12]
 8009882:	e001      	b.n	8009888 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8009884:	2300      	movs	r3, #0
 8009886:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8009888:	f002 f982 	bl	800bb90 <vPortExitCritical>

    return xReturn;
 800988c:	68fb      	ldr	r3, [r7, #12]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800989e:	f002 f945 	bl	800bb2c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098aa:	429a      	cmp	r2, r3
 80098ac:	d102      	bne.n	80098b4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80098ae:	2301      	movs	r3, #1
 80098b0:	60fb      	str	r3, [r7, #12]
 80098b2:	e001      	b.n	80098b8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80098b4:	2300      	movs	r3, #0
 80098b6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80098b8:	f002 f96a 	bl	800bb90 <vPortExitCritical>

    return xReturn;
 80098bc:	68fb      	ldr	r3, [r7, #12]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3710      	adds	r7, #16
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80098c6:	b480      	push	{r7}
 80098c8:	b087      	sub	sp, #28
 80098ca:	af00      	add	r7, sp, #0
 80098cc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10b      	bne.n	80098f0 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098dc:	f383 8811 	msr	BASEPRI, r3
 80098e0:	f3bf 8f6f 	isb	sy
 80098e4:	f3bf 8f4f 	dsb	sy
 80098e8:	60fb      	str	r3, [r7, #12]
    }
 80098ea:	bf00      	nop
 80098ec:	bf00      	nop
 80098ee:	e7fd      	b.n	80098ec <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80098f8:	429a      	cmp	r2, r3
 80098fa:	d102      	bne.n	8009902 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 80098fc:	2301      	movs	r3, #1
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	e001      	b.n	8009906 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8009902:	2300      	movs	r3, #0
 8009904:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8009906:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009908:	4618      	mov	r0, r3
 800990a:	371c      	adds	r7, #28
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800991e:	2300      	movs	r3, #0
 8009920:	60fb      	str	r3, [r7, #12]
 8009922:	e01e      	b.n	8009962 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009924:	4a13      	ldr	r2, [pc, #76]	@ (8009974 <vQueueAddToRegistry+0x60>)
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d115      	bne.n	800995c <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009930:	4910      	ldr	r1, [pc, #64]	@ (8009974 <vQueueAddToRegistry+0x60>)
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	683a      	ldr	r2, [r7, #0]
 8009936:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800993a:	4a0e      	ldr	r2, [pc, #56]	@ (8009974 <vQueueAddToRegistry+0x60>)
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	00db      	lsls	r3, r3, #3
 8009940:	4413      	add	r3, r2
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4618      	mov	r0, r3
 800994a:	f004 f8d9 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 800994e:	4601      	mov	r1, r0
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	2071      	movs	r0, #113	@ 0x71
 8009956:	f003 fa3f 	bl	800cdd8 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 800995a:	e006      	b.n	800996a <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	3301      	adds	r3, #1
 8009960:	60fb      	str	r3, [r7, #12]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2b07      	cmp	r3, #7
 8009966:	d9dd      	bls.n	8009924 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	3710      	adds	r7, #16
 800996e:	46bd      	mov	sp, r7
 8009970:	bd80      	pop	{r7, pc}
 8009972:	bf00      	nop
 8009974:	200014f8 	.word	0x200014f8

08009978 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8009978:	b580      	push	{r7, lr}
 800997a:	b086      	sub	sp, #24
 800997c:	af00      	add	r7, sp, #0
 800997e:	60f8      	str	r0, [r7, #12]
 8009980:	60b9      	str	r1, [r7, #8]
 8009982:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8009988:	f002 f8d0 	bl	800bb2c <vPortEnterCritical>
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009992:	b25b      	sxtb	r3, r3
 8009994:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009998:	d103      	bne.n	80099a2 <vQueueWaitForMessageRestricted+0x2a>
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	2200      	movs	r2, #0
 800999e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80099a8:	b25b      	sxtb	r3, r3
 80099aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80099ae:	d103      	bne.n	80099b8 <vQueueWaitForMessageRestricted+0x40>
 80099b0:	697b      	ldr	r3, [r7, #20]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099b8:	f002 f8ea 	bl	800bb90 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d106      	bne.n	80099d2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	3324      	adds	r3, #36	@ 0x24
 80099c8:	687a      	ldr	r2, [r7, #4]
 80099ca:	68b9      	ldr	r1, [r7, #8]
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 fc2b 	bl	800a228 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80099d2:	6978      	ldr	r0, [r7, #20]
 80099d4:	f7ff fef7 	bl	80097c6 <prvUnlockQueue>
    }
 80099d8:	bf00      	nop
 80099da:	3718      	adds	r7, #24
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b08c      	sub	sp, #48	@ 0x30
 80099e4:	af04      	add	r7, sp, #16
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	603b      	str	r3, [r7, #0]
 80099ec:	4613      	mov	r3, r2
 80099ee:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80099f0:	88fb      	ldrh	r3, [r7, #6]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4618      	mov	r0, r3
 80099f6:	f002 f9cb 	bl	800bd90 <pvPortMalloc>
 80099fa:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d00e      	beq.n	8009a20 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a02:	2058      	movs	r0, #88	@ 0x58
 8009a04:	f002 f9c4 	bl	800bd90 <pvPortMalloc>
 8009a08:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d003      	beq.n	8009a18 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8009a10:	69fb      	ldr	r3, [r7, #28]
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a16:	e005      	b.n	8009a24 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8009a18:	6978      	ldr	r0, [r7, #20]
 8009a1a:	f002 fa9b 	bl	800bf54 <vPortFree>
 8009a1e:	e001      	b.n	8009a24 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8009a20:	2300      	movs	r3, #0
 8009a22:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d013      	beq.n	8009a52 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a2a:	88fa      	ldrh	r2, [r7, #6]
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	9303      	str	r3, [sp, #12]
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	9302      	str	r3, [sp, #8]
 8009a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a36:	9301      	str	r3, [sp, #4]
 8009a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a3a:	9300      	str	r3, [sp, #0]
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	68b9      	ldr	r1, [r7, #8]
 8009a40:	68f8      	ldr	r0, [r7, #12]
 8009a42:	f000 f80e 	bl	8009a62 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8009a46:	69f8      	ldr	r0, [r7, #28]
 8009a48:	f000 f8a2 	bl	8009b90 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	61bb      	str	r3, [r7, #24]
 8009a50:	e002      	b.n	8009a58 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009a56:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8009a58:	69bb      	ldr	r3, [r7, #24]
    }
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3720      	adds	r7, #32
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}

08009a62 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8009a62:	b580      	push	{r7, lr}
 8009a64:	b088      	sub	sp, #32
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	60f8      	str	r0, [r7, #12]
 8009a6a:	60b9      	str	r1, [r7, #8]
 8009a6c:	607a      	str	r2, [r7, #4]
 8009a6e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a72:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	461a      	mov	r2, r3
 8009a7a:	21a5      	movs	r1, #165	@ 0xa5
 8009a7c:	f004 f9c2 	bl	800de04 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009a8a:	3b01      	subs	r3, #1
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	4413      	add	r3, r2
 8009a90:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009a92:	69bb      	ldr	r3, [r7, #24]
 8009a94:	f023 0307 	bic.w	r3, r3, #7
 8009a98:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009a9a:	69bb      	ldr	r3, [r7, #24]
 8009a9c:	f003 0307 	and.w	r3, r3, #7
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d00b      	beq.n	8009abc <prvInitialiseNewTask+0x5a>
        __asm volatile
 8009aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aa8:	f383 8811 	msr	BASEPRI, r3
 8009aac:	f3bf 8f6f 	isb	sy
 8009ab0:	f3bf 8f4f 	dsb	sy
 8009ab4:	617b      	str	r3, [r7, #20]
    }
 8009ab6:	bf00      	nop
 8009ab8:	bf00      	nop
 8009aba:	e7fd      	b.n	8009ab8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8009abc:	68bb      	ldr	r3, [r7, #8]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d01f      	beq.n	8009b02 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	61fb      	str	r3, [r7, #28]
 8009ac6:	e012      	b.n	8009aee <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ac8:	68ba      	ldr	r2, [r7, #8]
 8009aca:	69fb      	ldr	r3, [r7, #28]
 8009acc:	4413      	add	r3, r2
 8009ace:	7819      	ldrb	r1, [r3, #0]
 8009ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ad2:	69fb      	ldr	r3, [r7, #28]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	3334      	adds	r3, #52	@ 0x34
 8009ad8:	460a      	mov	r2, r1
 8009ada:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	69fb      	ldr	r3, [r7, #28]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	781b      	ldrb	r3, [r3, #0]
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d006      	beq.n	8009af6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	3301      	adds	r3, #1
 8009aec:	61fb      	str	r3, [r7, #28]
 8009aee:	69fb      	ldr	r3, [r7, #28]
 8009af0:	2b09      	cmp	r3, #9
 8009af2:	d9e9      	bls.n	8009ac8 <prvInitialiseNewTask+0x66>
 8009af4:	e000      	b.n	8009af8 <prvInitialiseNewTask+0x96>
            {
                break;
 8009af6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8009b00:	e003      	b.n	8009b0a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b04:	2200      	movs	r2, #0
 8009b06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b0c:	2b04      	cmp	r3, #4
 8009b0e:	d901      	bls.n	8009b14 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b10:	2304      	movs	r3, #4
 8009b12:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8009b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b16:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b18:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8009b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b1e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8009b20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b22:	2200      	movs	r2, #0
 8009b24:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b28:	3304      	adds	r3, #4
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f7fe ff0a 	bl	8008944 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b32:	3318      	adds	r3, #24
 8009b34:	4618      	mov	r0, r3
 8009b36:	f7fe ff05 	bl	8008944 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b3c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b3e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b42:	f1c3 0205 	rsb	r2, r3, #5
 8009b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b48:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b4e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8009b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b52:	3350      	adds	r3, #80	@ 0x50
 8009b54:	2204      	movs	r2, #4
 8009b56:	2100      	movs	r1, #0
 8009b58:	4618      	mov	r0, r3
 8009b5a:	f004 f953 	bl	800de04 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b60:	3354      	adds	r3, #84	@ 0x54
 8009b62:	2201      	movs	r2, #1
 8009b64:	2100      	movs	r1, #0
 8009b66:	4618      	mov	r0, r3
 8009b68:	f004 f94c 	bl	800de04 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b6c:	683a      	ldr	r2, [r7, #0]
 8009b6e:	68f9      	ldr	r1, [r7, #12]
 8009b70:	69b8      	ldr	r0, [r7, #24]
 8009b72:	f001 fe25 	bl	800b7c0 <pxPortInitialiseStack>
 8009b76:	4602      	mov	r2, r0
 8009b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b7a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8009b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d002      	beq.n	8009b88 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009b82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b86:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009b88:	bf00      	nop
 8009b8a:	3720      	adds	r7, #32
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}

08009b90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8009b90:	b5b0      	push	{r4, r5, r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af02      	add	r7, sp, #8
 8009b96:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8009b98:	f001 ffc8 	bl	800bb2c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8009b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8009c8c <prvAddNewTaskToReadyList+0xfc>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3301      	adds	r3, #1
 8009ba2:	4a3a      	ldr	r2, [pc, #232]	@ (8009c8c <prvAddNewTaskToReadyList+0xfc>)
 8009ba4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8009ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8009c90 <prvAddNewTaskToReadyList+0x100>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d109      	bne.n	8009bc2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8009bae:	4a38      	ldr	r2, [pc, #224]	@ (8009c90 <prvAddNewTaskToReadyList+0x100>)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009bb4:	4b35      	ldr	r3, [pc, #212]	@ (8009c8c <prvAddNewTaskToReadyList+0xfc>)
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d110      	bne.n	8009bde <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8009bbc:	f000 fcd6 	bl	800a56c <prvInitialiseTaskLists>
 8009bc0:	e00d      	b.n	8009bde <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8009bc2:	4b34      	ldr	r3, [pc, #208]	@ (8009c94 <prvAddNewTaskToReadyList+0x104>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d109      	bne.n	8009bde <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009bca:	4b31      	ldr	r3, [pc, #196]	@ (8009c90 <prvAddNewTaskToReadyList+0x100>)
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d802      	bhi.n	8009bde <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8009bd8:	4a2d      	ldr	r2, [pc, #180]	@ (8009c90 <prvAddNewTaskToReadyList+0x100>)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8009bde:	4b2e      	ldr	r3, [pc, #184]	@ (8009c98 <prvAddNewTaskToReadyList+0x108>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3301      	adds	r3, #1
 8009be4:	4a2c      	ldr	r2, [pc, #176]	@ (8009c98 <prvAddNewTaskToReadyList+0x108>)
 8009be6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009be8:	4b2b      	ldr	r3, [pc, #172]	@ (8009c98 <prvAddNewTaskToReadyList+0x108>)
 8009bea:	681a      	ldr	r2, [r3, #0]
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d016      	beq.n	8009c24 <prvAddNewTaskToReadyList+0x94>
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4618      	mov	r0, r3
 8009bfa:	f003 fe5b 	bl	800d8b4 <SEGGER_SYSVIEW_OnTaskCreate>
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c0e:	461d      	mov	r5, r3
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	461c      	mov	r4, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c1a:	1ae3      	subs	r3, r4, r3
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	462b      	mov	r3, r5
 8009c20:	f002 fb68 	bl	800c2f4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f003 fec8 	bl	800d9bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c30:	2201      	movs	r2, #1
 8009c32:	409a      	lsls	r2, r3
 8009c34:	4b19      	ldr	r3, [pc, #100]	@ (8009c9c <prvAddNewTaskToReadyList+0x10c>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4313      	orrs	r3, r2
 8009c3a:	4a18      	ldr	r2, [pc, #96]	@ (8009c9c <prvAddNewTaskToReadyList+0x10c>)
 8009c3c:	6013      	str	r3, [r2, #0]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c42:	4613      	mov	r3, r2
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4a15      	ldr	r2, [pc, #84]	@ (8009ca0 <prvAddNewTaskToReadyList+0x110>)
 8009c4c:	441a      	add	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	3304      	adds	r3, #4
 8009c52:	4619      	mov	r1, r3
 8009c54:	4610      	mov	r0, r2
 8009c56:	f7fe fe82 	bl	800895e <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8009c5a:	f001 ff99 	bl	800bb90 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8009c5e:	4b0d      	ldr	r3, [pc, #52]	@ (8009c94 <prvAddNewTaskToReadyList+0x104>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d00e      	beq.n	8009c84 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c66:	4b0a      	ldr	r3, [pc, #40]	@ (8009c90 <prvAddNewTaskToReadyList+0x100>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d207      	bcs.n	8009c84 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8009c74:	4b0b      	ldr	r3, [pc, #44]	@ (8009ca4 <prvAddNewTaskToReadyList+0x114>)
 8009c76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c7a:	601a      	str	r2, [r3, #0]
 8009c7c:	f3bf 8f4f 	dsb	sy
 8009c80:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8009c84:	bf00      	nop
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bdb0      	pop	{r4, r5, r7, pc}
 8009c8c:	20001610 	.word	0x20001610
 8009c90:	20001538 	.word	0x20001538
 8009c94:	2000161c 	.word	0x2000161c
 8009c98:	2000162c 	.word	0x2000162c
 8009c9c:	20001618 	.word	0x20001618
 8009ca0:	2000153c 	.word	0x2000153c
 8009ca4:	e000ed04 	.word	0xe000ed04

08009ca8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8009cae:	4b27      	ldr	r3, [pc, #156]	@ (8009d4c <vTaskStartScheduler+0xa4>)
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	2282      	movs	r2, #130	@ 0x82
 8009cba:	4925      	ldr	r1, [pc, #148]	@ (8009d50 <vTaskStartScheduler+0xa8>)
 8009cbc:	4825      	ldr	r0, [pc, #148]	@ (8009d54 <vTaskStartScheduler+0xac>)
 8009cbe:	f7ff fe8f 	bl	80099e0 <xTaskCreate>
 8009cc2:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d102      	bne.n	8009cd0 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8009cca:	f001 f9db 	bl	800b084 <xTimerCreateTimerTask>
 8009cce:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	d124      	bne.n	8009d20 <vTaskStartScheduler+0x78>
        __asm volatile
 8009cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cda:	f383 8811 	msr	BASEPRI, r3
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f3bf 8f4f 	dsb	sy
 8009ce6:	60bb      	str	r3, [r7, #8]
    }
 8009ce8:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8009cea:	4b1b      	ldr	r3, [pc, #108]	@ (8009d58 <vTaskStartScheduler+0xb0>)
 8009cec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cf0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8009cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8009d5c <vTaskStartScheduler+0xb4>)
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009cf8:	4b19      	ldr	r3, [pc, #100]	@ (8009d60 <vTaskStartScheduler+0xb8>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8009cfe:	4b19      	ldr	r3, [pc, #100]	@ (8009d64 <vTaskStartScheduler+0xbc>)
 8009d00:	681a      	ldr	r2, [r3, #0]
 8009d02:	4b12      	ldr	r3, [pc, #72]	@ (8009d4c <vTaskStartScheduler+0xa4>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	429a      	cmp	r2, r3
 8009d08:	d102      	bne.n	8009d10 <vTaskStartScheduler+0x68>
 8009d0a:	f003 fdb7 	bl	800d87c <SEGGER_SYSVIEW_OnIdle>
 8009d0e:	e004      	b.n	8009d1a <vTaskStartScheduler+0x72>
 8009d10:	4b14      	ldr	r3, [pc, #80]	@ (8009d64 <vTaskStartScheduler+0xbc>)
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	4618      	mov	r0, r3
 8009d16:	f003 fe0f 	bl	800d938 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8009d1a:	f001 fde3 	bl	800b8e4 <xPortStartScheduler>
 8009d1e:	e00f      	b.n	8009d40 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d26:	d10b      	bne.n	8009d40 <vTaskStartScheduler+0x98>
        __asm volatile
 8009d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d2c:	f383 8811 	msr	BASEPRI, r3
 8009d30:	f3bf 8f6f 	isb	sy
 8009d34:	f3bf 8f4f 	dsb	sy
 8009d38:	607b      	str	r3, [r7, #4]
    }
 8009d3a:	bf00      	nop
 8009d3c:	bf00      	nop
 8009d3e:	e7fd      	b.n	8009d3c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8009d40:	4b09      	ldr	r3, [pc, #36]	@ (8009d68 <vTaskStartScheduler+0xc0>)
 8009d42:	681b      	ldr	r3, [r3, #0]
}
 8009d44:	bf00      	nop
 8009d46:	3710      	adds	r7, #16
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	20001634 	.word	0x20001634
 8009d50:	0800f654 	.word	0x0800f654
 8009d54:	0800a53d 	.word	0x0800a53d
 8009d58:	20001630 	.word	0x20001630
 8009d5c:	2000161c 	.word	0x2000161c
 8009d60:	20001614 	.word	0x20001614
 8009d64:	20001538 	.word	0x20001538
 8009d68:	20000094 	.word	0x20000094

08009d6c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d6c:	b480      	push	{r7}
 8009d6e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8009d70:	4b04      	ldr	r3, [pc, #16]	@ (8009d84 <vTaskSuspendAll+0x18>)
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	3301      	adds	r3, #1
 8009d76:	4a03      	ldr	r2, [pc, #12]	@ (8009d84 <vTaskSuspendAll+0x18>)
 8009d78:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8009d7a:	bf00      	nop
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	20001638 	.word	0x20001638

08009d88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b084      	sub	sp, #16
 8009d8c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8009d92:	2300      	movs	r3, #0
 8009d94:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8009d96:	4b44      	ldr	r3, [pc, #272]	@ (8009ea8 <xTaskResumeAll+0x120>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10b      	bne.n	8009db6 <xTaskResumeAll+0x2e>
        __asm volatile
 8009d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009da2:	f383 8811 	msr	BASEPRI, r3
 8009da6:	f3bf 8f6f 	isb	sy
 8009daa:	f3bf 8f4f 	dsb	sy
 8009dae:	603b      	str	r3, [r7, #0]
    }
 8009db0:	bf00      	nop
 8009db2:	bf00      	nop
 8009db4:	e7fd      	b.n	8009db2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8009db6:	f001 feb9 	bl	800bb2c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8009dba:	4b3b      	ldr	r3, [pc, #236]	@ (8009ea8 <xTaskResumeAll+0x120>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3b01      	subs	r3, #1
 8009dc0:	4a39      	ldr	r2, [pc, #228]	@ (8009ea8 <xTaskResumeAll+0x120>)
 8009dc2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009dc4:	4b38      	ldr	r3, [pc, #224]	@ (8009ea8 <xTaskResumeAll+0x120>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d165      	bne.n	8009e98 <xTaskResumeAll+0x110>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009dcc:	4b37      	ldr	r3, [pc, #220]	@ (8009eac <xTaskResumeAll+0x124>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d061      	beq.n	8009e98 <xTaskResumeAll+0x110>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009dd4:	e032      	b.n	8009e3c <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dd6:	4b36      	ldr	r3, [pc, #216]	@ (8009eb0 <xTaskResumeAll+0x128>)
 8009dd8:	68db      	ldr	r3, [r3, #12]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	3318      	adds	r3, #24
 8009de2:	4618      	mov	r0, r3
 8009de4:	f7fe fe18 	bl	8008a18 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	3304      	adds	r3, #4
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fe fe13 	bl	8008a18 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	4618      	mov	r0, r3
 8009df6:	f003 fde1 	bl	800d9bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009dfe:	2201      	movs	r2, #1
 8009e00:	409a      	lsls	r2, r3
 8009e02:	4b2c      	ldr	r3, [pc, #176]	@ (8009eb4 <xTaskResumeAll+0x12c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4313      	orrs	r3, r2
 8009e08:	4a2a      	ldr	r2, [pc, #168]	@ (8009eb4 <xTaskResumeAll+0x12c>)
 8009e0a:	6013      	str	r3, [r2, #0]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e10:	4613      	mov	r3, r2
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	4a27      	ldr	r2, [pc, #156]	@ (8009eb8 <xTaskResumeAll+0x130>)
 8009e1a:	441a      	add	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3304      	adds	r3, #4
 8009e20:	4619      	mov	r1, r3
 8009e22:	4610      	mov	r0, r2
 8009e24:	f7fe fd9b 	bl	800895e <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e2c:	4b23      	ldr	r3, [pc, #140]	@ (8009ebc <xTaskResumeAll+0x134>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e32:	429a      	cmp	r2, r3
 8009e34:	d302      	bcc.n	8009e3c <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8009e36:	4b22      	ldr	r3, [pc, #136]	@ (8009ec0 <xTaskResumeAll+0x138>)
 8009e38:	2201      	movs	r2, #1
 8009e3a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8009eb0 <xTaskResumeAll+0x128>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1c8      	bne.n	8009dd6 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d001      	beq.n	8009e4e <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8009e4a:	f000 fc0d 	bl	800a668 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009e4e:	4b1d      	ldr	r3, [pc, #116]	@ (8009ec4 <xTaskResumeAll+0x13c>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d010      	beq.n	8009e7c <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8009e5a:	f000 f859 	bl	8009f10 <xTaskIncrementTick>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d002      	beq.n	8009e6a <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8009e64:	4b16      	ldr	r3, [pc, #88]	@ (8009ec0 <xTaskResumeAll+0x138>)
 8009e66:	2201      	movs	r2, #1
 8009e68:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1f1      	bne.n	8009e5a <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8009e76:	4b13      	ldr	r3, [pc, #76]	@ (8009ec4 <xTaskResumeAll+0x13c>)
 8009e78:	2200      	movs	r2, #0
 8009e7a:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8009e7c:	4b10      	ldr	r3, [pc, #64]	@ (8009ec0 <xTaskResumeAll+0x138>)
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d009      	beq.n	8009e98 <xTaskResumeAll+0x110>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8009e84:	2301      	movs	r3, #1
 8009e86:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8009e88:	4b0f      	ldr	r3, [pc, #60]	@ (8009ec8 <xTaskResumeAll+0x140>)
 8009e8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e8e:	601a      	str	r2, [r3, #0]
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8009e98:	f001 fe7a 	bl	800bb90 <vPortExitCritical>

    return xAlreadyYielded;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3710      	adds	r7, #16
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	20001638 	.word	0x20001638
 8009eac:	20001610 	.word	0x20001610
 8009eb0:	200015d0 	.word	0x200015d0
 8009eb4:	20001618 	.word	0x20001618
 8009eb8:	2000153c 	.word	0x2000153c
 8009ebc:	20001538 	.word	0x20001538
 8009ec0:	20001624 	.word	0x20001624
 8009ec4:	20001620 	.word	0x20001620
 8009ec8:	e000ed04 	.word	0xe000ed04

08009ecc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8009ed2:	4b05      	ldr	r3, [pc, #20]	@ (8009ee8 <xTaskGetTickCount+0x1c>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8009ed8:	687b      	ldr	r3, [r7, #4]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	370c      	adds	r7, #12
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
 8009ee6:	bf00      	nop
 8009ee8:	20001614 	.word	0x20001614

08009eec <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ef2:	f001 ff0b 	bl	800bd0c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8009efa:	4b04      	ldr	r3, [pc, #16]	@ (8009f0c <xTaskGetTickCountFromISR+0x20>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8009f00:	683b      	ldr	r3, [r7, #0]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3708      	adds	r7, #8
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	20001614 	.word	0x20001614

08009f10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b086      	sub	sp, #24
 8009f14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8009f16:	2300      	movs	r3, #0
 8009f18:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f1a:	4b51      	ldr	r3, [pc, #324]	@ (800a060 <xTaskIncrementTick+0x150>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	f040 8093 	bne.w	800a04a <xTaskIncrementTick+0x13a>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009f24:	4b4f      	ldr	r3, [pc, #316]	@ (800a064 <xTaskIncrementTick+0x154>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	3301      	adds	r3, #1
 8009f2a:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8009f2c:	4a4d      	ldr	r2, [pc, #308]	@ (800a064 <xTaskIncrementTick+0x154>)
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009f32:	693b      	ldr	r3, [r7, #16]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d121      	bne.n	8009f7c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8009f38:	4b4b      	ldr	r3, [pc, #300]	@ (800a068 <xTaskIncrementTick+0x158>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00b      	beq.n	8009f5a <xTaskIncrementTick+0x4a>
        __asm volatile
 8009f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f46:	f383 8811 	msr	BASEPRI, r3
 8009f4a:	f3bf 8f6f 	isb	sy
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	603b      	str	r3, [r7, #0]
    }
 8009f54:	bf00      	nop
 8009f56:	bf00      	nop
 8009f58:	e7fd      	b.n	8009f56 <xTaskIncrementTick+0x46>
 8009f5a:	4b43      	ldr	r3, [pc, #268]	@ (800a068 <xTaskIncrementTick+0x158>)
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	60fb      	str	r3, [r7, #12]
 8009f60:	4b42      	ldr	r3, [pc, #264]	@ (800a06c <xTaskIncrementTick+0x15c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a40      	ldr	r2, [pc, #256]	@ (800a068 <xTaskIncrementTick+0x158>)
 8009f66:	6013      	str	r3, [r2, #0]
 8009f68:	4a40      	ldr	r2, [pc, #256]	@ (800a06c <xTaskIncrementTick+0x15c>)
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6013      	str	r3, [r2, #0]
 8009f6e:	4b40      	ldr	r3, [pc, #256]	@ (800a070 <xTaskIncrementTick+0x160>)
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	3301      	adds	r3, #1
 8009f74:	4a3e      	ldr	r2, [pc, #248]	@ (800a070 <xTaskIncrementTick+0x160>)
 8009f76:	6013      	str	r3, [r2, #0]
 8009f78:	f000 fb76 	bl	800a668 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8009f7c:	4b3d      	ldr	r3, [pc, #244]	@ (800a074 <xTaskIncrementTick+0x164>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	429a      	cmp	r2, r3
 8009f84:	d34c      	bcc.n	800a020 <xTaskIncrementTick+0x110>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f86:	4b38      	ldr	r3, [pc, #224]	@ (800a068 <xTaskIncrementTick+0x158>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d104      	bne.n	8009f9a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009f90:	4b38      	ldr	r3, [pc, #224]	@ (800a074 <xTaskIncrementTick+0x164>)
 8009f92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f96:	601a      	str	r2, [r3, #0]
                    break;
 8009f98:	e042      	b.n	800a020 <xTaskIncrementTick+0x110>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f9a:	4b33      	ldr	r3, [pc, #204]	@ (800a068 <xTaskIncrementTick+0x158>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	685b      	ldr	r3, [r3, #4]
 8009fa8:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8009faa:	693a      	ldr	r2, [r7, #16]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d203      	bcs.n	8009fba <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8009fb2:	4a30      	ldr	r2, [pc, #192]	@ (800a074 <xTaskIncrementTick+0x164>)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009fb8:	e032      	b.n	800a020 <xTaskIncrementTick+0x110>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	3304      	adds	r3, #4
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fd2a 	bl	8008a18 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d004      	beq.n	8009fd6 <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	3318      	adds	r3, #24
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fe fd21 	bl	8008a18 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f003 fcef 	bl	800d9bc <SEGGER_SYSVIEW_OnTaskStartReady>
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe2:	2201      	movs	r2, #1
 8009fe4:	409a      	lsls	r2, r3
 8009fe6:	4b24      	ldr	r3, [pc, #144]	@ (800a078 <xTaskIncrementTick+0x168>)
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	4a22      	ldr	r2, [pc, #136]	@ (800a078 <xTaskIncrementTick+0x168>)
 8009fee:	6013      	str	r3, [r2, #0]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ff4:	4613      	mov	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	4413      	add	r3, r2
 8009ffa:	009b      	lsls	r3, r3, #2
 8009ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800a07c <xTaskIncrementTick+0x16c>)
 8009ffe:	441a      	add	r2, r3
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	3304      	adds	r3, #4
 800a004:	4619      	mov	r1, r3
 800a006:	4610      	mov	r0, r2
 800a008:	f7fe fca9 	bl	800895e <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a010:	4b1b      	ldr	r3, [pc, #108]	@ (800a080 <xTaskIncrementTick+0x170>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a016:	429a      	cmp	r2, r3
 800a018:	d3b5      	bcc.n	8009f86 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 800a01a:	2301      	movs	r3, #1
 800a01c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a01e:	e7b2      	b.n	8009f86 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a020:	4b17      	ldr	r3, [pc, #92]	@ (800a080 <xTaskIncrementTick+0x170>)
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a026:	4915      	ldr	r1, [pc, #84]	@ (800a07c <xTaskIncrementTick+0x16c>)
 800a028:	4613      	mov	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	440b      	add	r3, r1
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2b01      	cmp	r3, #1
 800a036:	d901      	bls.n	800a03c <xTaskIncrementTick+0x12c>
                {
                    xSwitchRequired = pdTRUE;
 800a038:	2301      	movs	r3, #1
 800a03a:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 800a03c:	4b11      	ldr	r3, [pc, #68]	@ (800a084 <xTaskIncrementTick+0x174>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d007      	beq.n	800a054 <xTaskIncrementTick+0x144>
                {
                    xSwitchRequired = pdTRUE;
 800a044:	2301      	movs	r3, #1
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	e004      	b.n	800a054 <xTaskIncrementTick+0x144>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800a04a:	4b0f      	ldr	r3, [pc, #60]	@ (800a088 <xTaskIncrementTick+0x178>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3301      	adds	r3, #1
 800a050:	4a0d      	ldr	r2, [pc, #52]	@ (800a088 <xTaskIncrementTick+0x178>)
 800a052:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800a054:	697b      	ldr	r3, [r7, #20]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3718      	adds	r7, #24
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	20001638 	.word	0x20001638
 800a064:	20001614 	.word	0x20001614
 800a068:	200015c8 	.word	0x200015c8
 800a06c:	200015cc 	.word	0x200015cc
 800a070:	20001628 	.word	0x20001628
 800a074:	20001630 	.word	0x20001630
 800a078:	20001618 	.word	0x20001618
 800a07c:	2000153c 	.word	0x2000153c
 800a080:	20001538 	.word	0x20001538
 800a084:	20001624 	.word	0x20001624
 800a088:	20001620 	.word	0x20001620

0800a08c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a092:	4b2d      	ldr	r3, [pc, #180]	@ (800a148 <vTaskSwitchContext+0xbc>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d003      	beq.n	800a0a2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800a09a:	4b2c      	ldr	r3, [pc, #176]	@ (800a14c <vTaskSwitchContext+0xc0>)
 800a09c:	2201      	movs	r2, #1
 800a09e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 800a0a0:	e04e      	b.n	800a140 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800a0a2:	4b2a      	ldr	r3, [pc, #168]	@ (800a14c <vTaskSwitchContext+0xc0>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0a8:	4b29      	ldr	r3, [pc, #164]	@ (800a150 <vTaskSwitchContext+0xc4>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	fab3 f383 	clz	r3, r3
 800a0b4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800a0b6:	7afb      	ldrb	r3, [r7, #11]
 800a0b8:	f1c3 031f 	rsb	r3, r3, #31
 800a0bc:	617b      	str	r3, [r7, #20]
 800a0be:	4925      	ldr	r1, [pc, #148]	@ (800a154 <vTaskSwitchContext+0xc8>)
 800a0c0:	697a      	ldr	r2, [r7, #20]
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	4413      	add	r3, r2
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	440b      	add	r3, r1
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d10b      	bne.n	800a0ea <vTaskSwitchContext+0x5e>
        __asm volatile
 800a0d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d6:	f383 8811 	msr	BASEPRI, r3
 800a0da:	f3bf 8f6f 	isb	sy
 800a0de:	f3bf 8f4f 	dsb	sy
 800a0e2:	607b      	str	r3, [r7, #4]
    }
 800a0e4:	bf00      	nop
 800a0e6:	bf00      	nop
 800a0e8:	e7fd      	b.n	800a0e6 <vTaskSwitchContext+0x5a>
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	4613      	mov	r3, r2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4a17      	ldr	r2, [pc, #92]	@ (800a154 <vTaskSwitchContext+0xc8>)
 800a0f6:	4413      	add	r3, r2
 800a0f8:	613b      	str	r3, [r7, #16]
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	685a      	ldr	r2, [r3, #4]
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	605a      	str	r2, [r3, #4]
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	685a      	ldr	r2, [r3, #4]
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	3308      	adds	r3, #8
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d104      	bne.n	800a11a <vTaskSwitchContext+0x8e>
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	685b      	ldr	r3, [r3, #4]
 800a114:	685a      	ldr	r2, [r3, #4]
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	605a      	str	r2, [r3, #4]
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	68db      	ldr	r3, [r3, #12]
 800a120:	4a0d      	ldr	r2, [pc, #52]	@ (800a158 <vTaskSwitchContext+0xcc>)
 800a122:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800a124:	4b0c      	ldr	r3, [pc, #48]	@ (800a158 <vTaskSwitchContext+0xcc>)
 800a126:	681a      	ldr	r2, [r3, #0]
 800a128:	4b0c      	ldr	r3, [pc, #48]	@ (800a15c <vTaskSwitchContext+0xd0>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d102      	bne.n	800a136 <vTaskSwitchContext+0xaa>
 800a130:	f003 fba4 	bl	800d87c <SEGGER_SYSVIEW_OnIdle>
}
 800a134:	e004      	b.n	800a140 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800a136:	4b08      	ldr	r3, [pc, #32]	@ (800a158 <vTaskSwitchContext+0xcc>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4618      	mov	r0, r3
 800a13c:	f003 fbfc 	bl	800d938 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800a140:	bf00      	nop
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}
 800a148:	20001638 	.word	0x20001638
 800a14c:	20001624 	.word	0x20001624
 800a150:	20001618 	.word	0x20001618
 800a154:	2000153c 	.word	0x2000153c
 800a158:	20001538 	.word	0x20001538
 800a15c:	20001634 	.word	0x20001634

0800a160 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b084      	sub	sp, #16
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d10b      	bne.n	800a188 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800a170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a174:	f383 8811 	msr	BASEPRI, r3
 800a178:	f3bf 8f6f 	isb	sy
 800a17c:	f3bf 8f4f 	dsb	sy
 800a180:	60fb      	str	r3, [r7, #12]
    }
 800a182:	bf00      	nop
 800a184:	bf00      	nop
 800a186:	e7fd      	b.n	800a184 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a188:	4b07      	ldr	r3, [pc, #28]	@ (800a1a8 <vTaskPlaceOnEventList+0x48>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	3318      	adds	r3, #24
 800a18e:	4619      	mov	r1, r3
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f7fe fc08 	bl	80089a6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a196:	2101      	movs	r1, #1
 800a198:	6838      	ldr	r0, [r7, #0]
 800a19a:	f000 fefb 	bl	800af94 <prvAddCurrentTaskToDelayedList>
}
 800a19e:	bf00      	nop
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	20001538 	.word	0x20001538

0800a1ac <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b086      	sub	sp, #24
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	607a      	str	r2, [r7, #4]
    configASSERT( pxEventList );
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10b      	bne.n	800a1d6 <vTaskPlaceOnUnorderedEventList+0x2a>
        __asm volatile
 800a1be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1c2:	f383 8811 	msr	BASEPRI, r3
 800a1c6:	f3bf 8f6f 	isb	sy
 800a1ca:	f3bf 8f4f 	dsb	sy
 800a1ce:	617b      	str	r3, [r7, #20]
    }
 800a1d0:	bf00      	nop
 800a1d2:	bf00      	nop
 800a1d4:	e7fd      	b.n	800a1d2 <vTaskPlaceOnUnorderedEventList+0x26>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != 0 );
 800a1d6:	4b12      	ldr	r3, [pc, #72]	@ (800a220 <vTaskPlaceOnUnorderedEventList+0x74>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d10b      	bne.n	800a1f6 <vTaskPlaceOnUnorderedEventList+0x4a>
        __asm volatile
 800a1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	613b      	str	r3, [r7, #16]
    }
 800a1f0:	bf00      	nop
 800a1f2:	bf00      	nop
 800a1f4:	e7fd      	b.n	800a1f2 <vTaskPlaceOnUnorderedEventList+0x46>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a1f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a224 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	68ba      	ldr	r2, [r7, #8]
 800a1fc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a200:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a202:	4b08      	ldr	r3, [pc, #32]	@ (800a224 <vTaskPlaceOnUnorderedEventList+0x78>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	3318      	adds	r3, #24
 800a208:	4619      	mov	r1, r3
 800a20a:	68f8      	ldr	r0, [r7, #12]
 800a20c:	f7fe fba7 	bl	800895e <vListInsertEnd>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a210:	2101      	movs	r1, #1
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 febe 	bl	800af94 <prvAddCurrentTaskToDelayedList>
}
 800a218:	bf00      	nop
 800a21a:	3718      	adds	r7, #24
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	20001638 	.word	0x20001638
 800a224:	20001538 	.word	0x20001538

0800a228 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800a228:	b580      	push	{r7, lr}
 800a22a:	b086      	sub	sp, #24
 800a22c:	af00      	add	r7, sp, #0
 800a22e:	60f8      	str	r0, [r7, #12]
 800a230:	60b9      	str	r1, [r7, #8]
 800a232:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10b      	bne.n	800a252 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800a23a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a23e:	f383 8811 	msr	BASEPRI, r3
 800a242:	f3bf 8f6f 	isb	sy
 800a246:	f3bf 8f4f 	dsb	sy
 800a24a:	617b      	str	r3, [r7, #20]
    }
 800a24c:	bf00      	nop
 800a24e:	bf00      	nop
 800a250:	e7fd      	b.n	800a24e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a252:	4b0c      	ldr	r3, [pc, #48]	@ (800a284 <vTaskPlaceOnEventListRestricted+0x5c>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	3318      	adds	r3, #24
 800a258:	4619      	mov	r1, r3
 800a25a:	68f8      	ldr	r0, [r7, #12]
 800a25c:	f7fe fb7f 	bl	800895e <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d002      	beq.n	800a26c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800a266:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a26a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800a26c:	2024      	movs	r0, #36	@ 0x24
 800a26e:	f002 fd59 	bl	800cd24 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a272:	6879      	ldr	r1, [r7, #4]
 800a274:	68b8      	ldr	r0, [r7, #8]
 800a276:	f000 fe8d 	bl	800af94 <prvAddCurrentTaskToDelayedList>
    }
 800a27a:	bf00      	nop
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}
 800a282:	bf00      	nop
 800a284:	20001538 	.word	0x20001538

0800a288 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b086      	sub	sp, #24
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68db      	ldr	r3, [r3, #12]
 800a294:	68db      	ldr	r3, [r3, #12]
 800a296:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10b      	bne.n	800a2b6 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800a29e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2a2:	f383 8811 	msr	BASEPRI, r3
 800a2a6:	f3bf 8f6f 	isb	sy
 800a2aa:	f3bf 8f4f 	dsb	sy
 800a2ae:	60fb      	str	r3, [r7, #12]
    }
 800a2b0:	bf00      	nop
 800a2b2:	bf00      	nop
 800a2b4:	e7fd      	b.n	800a2b2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	3318      	adds	r3, #24
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	f7fe fbac 	bl	8008a18 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2c0:	4b1f      	ldr	r3, [pc, #124]	@ (800a340 <xTaskRemoveFromEventList+0xb8>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d120      	bne.n	800a30a <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a2c8:	693b      	ldr	r3, [r7, #16]
 800a2ca:	3304      	adds	r3, #4
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fe fba3 	bl	8008a18 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	f003 fb71 	bl	800d9bc <SEGGER_SYSVIEW_OnTaskStartReady>
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2de:	2201      	movs	r2, #1
 800a2e0:	409a      	lsls	r2, r3
 800a2e2:	4b18      	ldr	r3, [pc, #96]	@ (800a344 <xTaskRemoveFromEventList+0xbc>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	4313      	orrs	r3, r2
 800a2e8:	4a16      	ldr	r2, [pc, #88]	@ (800a344 <xTaskRemoveFromEventList+0xbc>)
 800a2ea:	6013      	str	r3, [r2, #0]
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	4413      	add	r3, r2
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4a13      	ldr	r2, [pc, #76]	@ (800a348 <xTaskRemoveFromEventList+0xc0>)
 800a2fa:	441a      	add	r2, r3
 800a2fc:	693b      	ldr	r3, [r7, #16]
 800a2fe:	3304      	adds	r3, #4
 800a300:	4619      	mov	r1, r3
 800a302:	4610      	mov	r0, r2
 800a304:	f7fe fb2b 	bl	800895e <vListInsertEnd>
 800a308:	e005      	b.n	800a316 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a30a:	693b      	ldr	r3, [r7, #16]
 800a30c:	3318      	adds	r3, #24
 800a30e:	4619      	mov	r1, r3
 800a310:	480e      	ldr	r0, [pc, #56]	@ (800a34c <xTaskRemoveFromEventList+0xc4>)
 800a312:	f7fe fb24 	bl	800895e <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a31a:	4b0d      	ldr	r3, [pc, #52]	@ (800a350 <xTaskRemoveFromEventList+0xc8>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a320:	429a      	cmp	r2, r3
 800a322:	d905      	bls.n	800a330 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800a324:	2301      	movs	r3, #1
 800a326:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800a328:	4b0a      	ldr	r3, [pc, #40]	@ (800a354 <xTaskRemoveFromEventList+0xcc>)
 800a32a:	2201      	movs	r2, #1
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	e001      	b.n	800a334 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800a330:	2300      	movs	r3, #0
 800a332:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a334:	697b      	ldr	r3, [r7, #20]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3718      	adds	r7, #24
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
 800a33e:	bf00      	nop
 800a340:	20001638 	.word	0x20001638
 800a344:	20001618 	.word	0x20001618
 800a348:	2000153c 	.word	0x2000153c
 800a34c:	200015d0 	.word	0x200015d0
 800a350:	20001538 	.word	0x20001538
 800a354:	20001624 	.word	0x20001624

0800a358 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b086      	sub	sp, #24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	6039      	str	r1, [r7, #0]
    TCB_t * pxUnblockedTCB;

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != pdFALSE );
 800a362:	4b2c      	ldr	r3, [pc, #176]	@ (800a414 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10b      	bne.n	800a382 <vTaskRemoveFromUnorderedEventList+0x2a>
        __asm volatile
 800a36a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a36e:	f383 8811 	msr	BASEPRI, r3
 800a372:	f3bf 8f6f 	isb	sy
 800a376:	f3bf 8f4f 	dsb	sy
 800a37a:	613b      	str	r3, [r7, #16]
    }
 800a37c:	bf00      	nop
 800a37e:	bf00      	nop
 800a380:	e7fd      	b.n	800a37e <vTaskRemoveFromUnorderedEventList+0x26>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	601a      	str	r2, [r3, #0]

    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	68db      	ldr	r3, [r3, #12]
 800a390:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d10b      	bne.n	800a3b0 <vTaskRemoveFromUnorderedEventList+0x58>
        __asm volatile
 800a398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a39c:	f383 8811 	msr	BASEPRI, r3
 800a3a0:	f3bf 8f6f 	isb	sy
 800a3a4:	f3bf 8f4f 	dsb	sy
 800a3a8:	60fb      	str	r3, [r7, #12]
    }
 800a3aa:	bf00      	nop
 800a3ac:	bf00      	nop
 800a3ae:	e7fd      	b.n	800a3ac <vTaskRemoveFromUnorderedEventList+0x54>
    ( void ) uxListRemove( pxEventListItem );
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7fe fb31 	bl	8008a18 <uxListRemove>
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7fe fb2c 	bl	8008a18 <uxListRemove>
    prvAddTaskToReadyList( pxUnblockedTCB );
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	f003 fafa 	bl	800d9bc <SEGGER_SYSVIEW_OnTaskStartReady>
 800a3c8:	697b      	ldr	r3, [r7, #20]
 800a3ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	409a      	lsls	r2, r3
 800a3d0:	4b11      	ldr	r3, [pc, #68]	@ (800a418 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4313      	orrs	r3, r2
 800a3d6:	4a10      	ldr	r2, [pc, #64]	@ (800a418 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800a3d8:	6013      	str	r3, [r2, #0]
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3de:	4613      	mov	r3, r2
 800a3e0:	009b      	lsls	r3, r3, #2
 800a3e2:	4413      	add	r3, r2
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	4a0d      	ldr	r2, [pc, #52]	@ (800a41c <vTaskRemoveFromUnorderedEventList+0xc4>)
 800a3e8:	441a      	add	r2, r3
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	3304      	adds	r3, #4
 800a3ee:	4619      	mov	r1, r3
 800a3f0:	4610      	mov	r0, r2
 800a3f2:	f7fe fab4 	bl	800895e <vListInsertEnd>

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a3fa:	4b09      	ldr	r3, [pc, #36]	@ (800a420 <vTaskRemoveFromUnorderedEventList+0xc8>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a400:	429a      	cmp	r2, r3
 800a402:	d902      	bls.n	800a40a <vTaskRemoveFromUnorderedEventList+0xb2>
    {
        /* The unblocked task has a priority above that of the calling task, so
         * a context switch is required.  This function is called with the
         * scheduler suspended so xYieldPending is set so the context switch
         * occurs immediately that the scheduler is resumed (unsuspended). */
        xYieldPending = pdTRUE;
 800a404:	4b07      	ldr	r3, [pc, #28]	@ (800a424 <vTaskRemoveFromUnorderedEventList+0xcc>)
 800a406:	2201      	movs	r2, #1
 800a408:	601a      	str	r2, [r3, #0]
    }
}
 800a40a:	bf00      	nop
 800a40c:	3718      	adds	r7, #24
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	20001638 	.word	0x20001638
 800a418:	20001618 	.word	0x20001618
 800a41c:	2000153c 	.word	0x2000153c
 800a420:	20001538 	.word	0x20001538
 800a424:	20001624 	.word	0x20001624

0800a428 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a430:	4b06      	ldr	r3, [pc, #24]	@ (800a44c <vTaskInternalSetTimeOutState+0x24>)
 800a432:	681a      	ldr	r2, [r3, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800a438:	4b05      	ldr	r3, [pc, #20]	@ (800a450 <vTaskInternalSetTimeOutState+0x28>)
 800a43a:	681a      	ldr	r2, [r3, #0]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	605a      	str	r2, [r3, #4]
}
 800a440:	bf00      	nop
 800a442:	370c      	adds	r7, #12
 800a444:	46bd      	mov	sp, r7
 800a446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44a:	4770      	bx	lr
 800a44c:	20001628 	.word	0x20001628
 800a450:	20001614 	.word	0x20001614

0800a454 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b088      	sub	sp, #32
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d10b      	bne.n	800a47c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800a464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a468:	f383 8811 	msr	BASEPRI, r3
 800a46c:	f3bf 8f6f 	isb	sy
 800a470:	f3bf 8f4f 	dsb	sy
 800a474:	613b      	str	r3, [r7, #16]
    }
 800a476:	bf00      	nop
 800a478:	bf00      	nop
 800a47a:	e7fd      	b.n	800a478 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d10b      	bne.n	800a49a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	60fb      	str	r3, [r7, #12]
    }
 800a494:	bf00      	nop
 800a496:	bf00      	nop
 800a498:	e7fd      	b.n	800a496 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800a49a:	f001 fb47 	bl	800bb2c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800a49e:	4b1f      	ldr	r3, [pc, #124]	@ (800a51c <xTaskCheckForTimeOut+0xc8>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	69ba      	ldr	r2, [r7, #24]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800a4ae:	683b      	ldr	r3, [r7, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a4b6:	d102      	bne.n	800a4be <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	61fb      	str	r3, [r7, #28]
 800a4bc:	e026      	b.n	800a50c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	4b17      	ldr	r3, [pc, #92]	@ (800a520 <xTaskCheckForTimeOut+0xcc>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d00a      	beq.n	800a4e0 <xTaskCheckForTimeOut+0x8c>
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685b      	ldr	r3, [r3, #4]
 800a4ce:	69ba      	ldr	r2, [r7, #24]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d305      	bcc.n	800a4e0 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	601a      	str	r2, [r3, #0]
 800a4de:	e015      	b.n	800a50c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	697a      	ldr	r2, [r7, #20]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d20b      	bcs.n	800a502 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	1ad2      	subs	r2, r2, r3
 800a4f2:	683b      	ldr	r3, [r7, #0]
 800a4f4:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff ff96 	bl	800a428 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	61fb      	str	r3, [r7, #28]
 800a500:	e004      	b.n	800a50c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	2200      	movs	r2, #0
 800a506:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800a508:	2301      	movs	r3, #1
 800a50a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800a50c:	f001 fb40 	bl	800bb90 <vPortExitCritical>

    return xReturn;
 800a510:	69fb      	ldr	r3, [r7, #28]
}
 800a512:	4618      	mov	r0, r3
 800a514:	3720      	adds	r7, #32
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	20001614 	.word	0x20001614
 800a520:	20001628 	.word	0x20001628

0800a524 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a524:	b480      	push	{r7}
 800a526:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800a528:	4b03      	ldr	r3, [pc, #12]	@ (800a538 <vTaskMissedYield+0x14>)
 800a52a:	2201      	movs	r2, #1
 800a52c:	601a      	str	r2, [r3, #0]
}
 800a52e:	bf00      	nop
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr
 800a538:	20001624 	.word	0x20001624

0800a53c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b082      	sub	sp, #8
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800a544:	f000 f852 	bl	800a5ec <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a548:	4b06      	ldr	r3, [pc, #24]	@ (800a564 <prvIdleTask+0x28>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d9f9      	bls.n	800a544 <prvIdleTask+0x8>
                {
                    taskYIELD();
 800a550:	4b05      	ldr	r3, [pc, #20]	@ (800a568 <prvIdleTask+0x2c>)
 800a552:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a556:	601a      	str	r2, [r3, #0]
 800a558:	f3bf 8f4f 	dsb	sy
 800a55c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800a560:	e7f0      	b.n	800a544 <prvIdleTask+0x8>
 800a562:	bf00      	nop
 800a564:	2000153c 	.word	0x2000153c
 800a568:	e000ed04 	.word	0xe000ed04

0800a56c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a56c:	b580      	push	{r7, lr}
 800a56e:	b082      	sub	sp, #8
 800a570:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a572:	2300      	movs	r3, #0
 800a574:	607b      	str	r3, [r7, #4]
 800a576:	e00c      	b.n	800a592 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	4613      	mov	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4a12      	ldr	r2, [pc, #72]	@ (800a5cc <prvInitialiseTaskLists+0x60>)
 800a584:	4413      	add	r3, r2
 800a586:	4618      	mov	r0, r3
 800a588:	f7fe f9bc 	bl	8008904 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	3301      	adds	r3, #1
 800a590:	607b      	str	r3, [r7, #4]
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2b04      	cmp	r3, #4
 800a596:	d9ef      	bls.n	800a578 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800a598:	480d      	ldr	r0, [pc, #52]	@ (800a5d0 <prvInitialiseTaskLists+0x64>)
 800a59a:	f7fe f9b3 	bl	8008904 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800a59e:	480d      	ldr	r0, [pc, #52]	@ (800a5d4 <prvInitialiseTaskLists+0x68>)
 800a5a0:	f7fe f9b0 	bl	8008904 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800a5a4:	480c      	ldr	r0, [pc, #48]	@ (800a5d8 <prvInitialiseTaskLists+0x6c>)
 800a5a6:	f7fe f9ad 	bl	8008904 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800a5aa:	480c      	ldr	r0, [pc, #48]	@ (800a5dc <prvInitialiseTaskLists+0x70>)
 800a5ac:	f7fe f9aa 	bl	8008904 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 800a5b0:	480b      	ldr	r0, [pc, #44]	@ (800a5e0 <prvInitialiseTaskLists+0x74>)
 800a5b2:	f7fe f9a7 	bl	8008904 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800a5b6:	4b0b      	ldr	r3, [pc, #44]	@ (800a5e4 <prvInitialiseTaskLists+0x78>)
 800a5b8:	4a05      	ldr	r2, [pc, #20]	@ (800a5d0 <prvInitialiseTaskLists+0x64>)
 800a5ba:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a5e8 <prvInitialiseTaskLists+0x7c>)
 800a5be:	4a05      	ldr	r2, [pc, #20]	@ (800a5d4 <prvInitialiseTaskLists+0x68>)
 800a5c0:	601a      	str	r2, [r3, #0]
}
 800a5c2:	bf00      	nop
 800a5c4:	3708      	adds	r7, #8
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop
 800a5cc:	2000153c 	.word	0x2000153c
 800a5d0:	200015a0 	.word	0x200015a0
 800a5d4:	200015b4 	.word	0x200015b4
 800a5d8:	200015d0 	.word	0x200015d0
 800a5dc:	200015e4 	.word	0x200015e4
 800a5e0:	200015fc 	.word	0x200015fc
 800a5e4:	200015c8 	.word	0x200015c8
 800a5e8:	200015cc 	.word	0x200015cc

0800a5ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a5f2:	e019      	b.n	800a628 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800a5f4:	f001 fa9a 	bl	800bb2c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5f8:	4b10      	ldr	r3, [pc, #64]	@ (800a63c <prvCheckTasksWaitingTermination+0x50>)
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	68db      	ldr	r3, [r3, #12]
 800a5fe:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	3304      	adds	r3, #4
 800a604:	4618      	mov	r0, r3
 800a606:	f7fe fa07 	bl	8008a18 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800a60a:	4b0d      	ldr	r3, [pc, #52]	@ (800a640 <prvCheckTasksWaitingTermination+0x54>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	3b01      	subs	r3, #1
 800a610:	4a0b      	ldr	r2, [pc, #44]	@ (800a640 <prvCheckTasksWaitingTermination+0x54>)
 800a612:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800a614:	4b0b      	ldr	r3, [pc, #44]	@ (800a644 <prvCheckTasksWaitingTermination+0x58>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	3b01      	subs	r3, #1
 800a61a:	4a0a      	ldr	r2, [pc, #40]	@ (800a644 <prvCheckTasksWaitingTermination+0x58>)
 800a61c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800a61e:	f001 fab7 	bl	800bb90 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f000 f810 	bl	800a648 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a628:	4b06      	ldr	r3, [pc, #24]	@ (800a644 <prvCheckTasksWaitingTermination+0x58>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d1e1      	bne.n	800a5f4 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 800a630:	bf00      	nop
 800a632:	bf00      	nop
 800a634:	3708      	adds	r7, #8
 800a636:	46bd      	mov	sp, r7
 800a638:	bd80      	pop	{r7, pc}
 800a63a:	bf00      	nop
 800a63c:	200015e4 	.word	0x200015e4
 800a640:	20001610 	.word	0x20001610
 800a644:	200015f8 	.word	0x200015f8

0800a648 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800a648:	b580      	push	{r7, lr}
 800a64a:	b082      	sub	sp, #8
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a654:	4618      	mov	r0, r3
 800a656:	f001 fc7d 	bl	800bf54 <vPortFree>
                vPortFree( pxTCB );
 800a65a:	6878      	ldr	r0, [r7, #4]
 800a65c:	f001 fc7a 	bl	800bf54 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800a660:	bf00      	nop
 800a662:	3708      	adds	r7, #8
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a668:	b480      	push	{r7}
 800a66a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a66c:	4b0a      	ldr	r3, [pc, #40]	@ (800a698 <prvResetNextTaskUnblockTime+0x30>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d104      	bne.n	800a680 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800a676:	4b09      	ldr	r3, [pc, #36]	@ (800a69c <prvResetNextTaskUnblockTime+0x34>)
 800a678:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a67c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800a67e:	e005      	b.n	800a68c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a680:	4b05      	ldr	r3, [pc, #20]	@ (800a698 <prvResetNextTaskUnblockTime+0x30>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68db      	ldr	r3, [r3, #12]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a04      	ldr	r2, [pc, #16]	@ (800a69c <prvResetNextTaskUnblockTime+0x34>)
 800a68a:	6013      	str	r3, [r2, #0]
}
 800a68c:	bf00      	nop
 800a68e:	46bd      	mov	sp, r7
 800a690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a694:	4770      	bx	lr
 800a696:	bf00      	nop
 800a698:	200015c8 	.word	0x200015c8
 800a69c:	20001630 	.word	0x20001630

0800a6a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800a6a0:	b480      	push	{r7}
 800a6a2:	b083      	sub	sp, #12
 800a6a4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800a6a6:	4b0b      	ldr	r3, [pc, #44]	@ (800a6d4 <xTaskGetSchedulerState+0x34>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d102      	bne.n	800a6b4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	607b      	str	r3, [r7, #4]
 800a6b2:	e008      	b.n	800a6c6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a6b4:	4b08      	ldr	r3, [pc, #32]	@ (800a6d8 <xTaskGetSchedulerState+0x38>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d102      	bne.n	800a6c2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800a6bc:	2302      	movs	r3, #2
 800a6be:	607b      	str	r3, [r7, #4]
 800a6c0:	e001      	b.n	800a6c6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800a6c6:	687b      	ldr	r3, [r7, #4]
    }
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	370c      	adds	r7, #12
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d2:	4770      	bx	lr
 800a6d4:	2000161c 	.word	0x2000161c
 800a6d8:	20001638 	.word	0x20001638

0800a6dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	60fb      	str	r3, [r7, #12]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d063      	beq.n	800a7ba <xTaskPriorityInherit+0xde>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f6:	4b33      	ldr	r3, [pc, #204]	@ (800a7c4 <xTaskPriorityInherit+0xe8>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d253      	bcs.n	800a7a8 <xTaskPriorityInherit+0xcc>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	699b      	ldr	r3, [r3, #24]
 800a704:	2b00      	cmp	r3, #0
 800a706:	db06      	blt.n	800a716 <xTaskPriorityInherit+0x3a>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a708:	4b2e      	ldr	r3, [pc, #184]	@ (800a7c4 <xTaskPriorityInherit+0xe8>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a70e:	f1c3 0205 	rsb	r2, r3, #5
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a716:	68bb      	ldr	r3, [r7, #8]
 800a718:	6959      	ldr	r1, [r3, #20]
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a71e:	4613      	mov	r3, r2
 800a720:	009b      	lsls	r3, r3, #2
 800a722:	4413      	add	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4a28      	ldr	r2, [pc, #160]	@ (800a7c8 <xTaskPriorityInherit+0xec>)
 800a728:	4413      	add	r3, r2
 800a72a:	4299      	cmp	r1, r3
 800a72c:	d12f      	bne.n	800a78e <xTaskPriorityInherit+0xb2>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	3304      	adds	r3, #4
 800a732:	4618      	mov	r0, r3
 800a734:	f7fe f970 	bl	8008a18 <uxListRemove>
 800a738:	4603      	mov	r3, r0
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d10a      	bne.n	800a754 <xTaskPriorityInherit+0x78>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a742:	2201      	movs	r2, #1
 800a744:	fa02 f303 	lsl.w	r3, r2, r3
 800a748:	43da      	mvns	r2, r3
 800a74a:	4b20      	ldr	r3, [pc, #128]	@ (800a7cc <xTaskPriorityInherit+0xf0>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4013      	ands	r3, r2
 800a750:	4a1e      	ldr	r2, [pc, #120]	@ (800a7cc <xTaskPriorityInherit+0xf0>)
 800a752:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a754:	4b1b      	ldr	r3, [pc, #108]	@ (800a7c4 <xTaskPriorityInherit+0xe8>)
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvReaddTaskToReadyList( pxMutexHolderTCB );
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a762:	2201      	movs	r2, #1
 800a764:	409a      	lsls	r2, r3
 800a766:	4b19      	ldr	r3, [pc, #100]	@ (800a7cc <xTaskPriorityInherit+0xf0>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	4a17      	ldr	r2, [pc, #92]	@ (800a7cc <xTaskPriorityInherit+0xf0>)
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a774:	4613      	mov	r3, r2
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	4413      	add	r3, r2
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4a12      	ldr	r2, [pc, #72]	@ (800a7c8 <xTaskPriorityInherit+0xec>)
 800a77e:	441a      	add	r2, r3
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	3304      	adds	r3, #4
 800a784:	4619      	mov	r1, r3
 800a786:	4610      	mov	r0, r2
 800a788:	f7fe f8e9 	bl	800895e <vListInsertEnd>
 800a78c:	e004      	b.n	800a798 <xTaskPriorityInherit+0xbc>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a78e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7c4 <xTaskPriorityInherit+0xe8>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	4619      	mov	r1, r3
 800a79c:	2049      	movs	r0, #73	@ 0x49
 800a79e:	f002 fadf 	bl	800cd60 <SEGGER_SYSVIEW_RecordU32>

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	60fb      	str	r3, [r7, #12]
 800a7a6:	e008      	b.n	800a7ba <xTaskPriorityInherit+0xde>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a7ac:	4b05      	ldr	r3, [pc, #20]	@ (800a7c4 <xTaskPriorityInherit+0xe8>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d201      	bcs.n	800a7ba <xTaskPriorityInherit+0xde>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
    }
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}
 800a7c4:	20001538 	.word	0x20001538
 800a7c8:	2000153c 	.word	0x2000153c
 800a7cc:	20001618 	.word	0x20001618

0800a7d0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b086      	sub	sp, #24
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d06a      	beq.n	800a8bc <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800a7e6:	4b38      	ldr	r3, [pc, #224]	@ (800a8c8 <xTaskPriorityDisinherit+0xf8>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	693a      	ldr	r2, [r7, #16]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d00b      	beq.n	800a808 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 800a7f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7f4:	f383 8811 	msr	BASEPRI, r3
 800a7f8:	f3bf 8f6f 	isb	sy
 800a7fc:	f3bf 8f4f 	dsb	sy
 800a800:	60fb      	str	r3, [r7, #12]
    }
 800a802:	bf00      	nop
 800a804:	bf00      	nop
 800a806:	e7fd      	b.n	800a804 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d10b      	bne.n	800a828 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 800a810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a814:	f383 8811 	msr	BASEPRI, r3
 800a818:	f3bf 8f6f 	isb	sy
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	60bb      	str	r3, [r7, #8]
    }
 800a822:	bf00      	nop
 800a824:	bf00      	nop
 800a826:	e7fd      	b.n	800a824 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a82c:	1e5a      	subs	r2, r3, #1
 800a82e:	693b      	ldr	r3, [r7, #16]
 800a830:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a83a:	429a      	cmp	r2, r3
 800a83c:	d03e      	beq.n	800a8bc <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a842:	2b00      	cmp	r3, #0
 800a844:	d13a      	bne.n	800a8bc <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	3304      	adds	r3, #4
 800a84a:	4618      	mov	r0, r3
 800a84c:	f7fe f8e4 	bl	8008a18 <uxListRemove>
 800a850:	4603      	mov	r3, r0
 800a852:	2b00      	cmp	r3, #0
 800a854:	d10a      	bne.n	800a86c <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a85a:	2201      	movs	r2, #1
 800a85c:	fa02 f303 	lsl.w	r3, r2, r3
 800a860:	43da      	mvns	r2, r3
 800a862:	4b1a      	ldr	r3, [pc, #104]	@ (800a8cc <xTaskPriorityDisinherit+0xfc>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	4013      	ands	r3, r2
 800a868:	4a18      	ldr	r2, [pc, #96]	@ (800a8cc <xTaskPriorityDisinherit+0xfc>)
 800a86a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	4619      	mov	r1, r3
 800a870:	204a      	movs	r0, #74	@ 0x4a
 800a872:	f002 fa75 	bl	800cd60 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a87a:	693b      	ldr	r3, [r7, #16]
 800a87c:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a87e:	693b      	ldr	r3, [r7, #16]
 800a880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a882:	f1c3 0205 	rsb	r2, r3, #5
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a88e:	2201      	movs	r2, #1
 800a890:	409a      	lsls	r2, r3
 800a892:	4b0e      	ldr	r3, [pc, #56]	@ (800a8cc <xTaskPriorityDisinherit+0xfc>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4313      	orrs	r3, r2
 800a898:	4a0c      	ldr	r2, [pc, #48]	@ (800a8cc <xTaskPriorityDisinherit+0xfc>)
 800a89a:	6013      	str	r3, [r2, #0]
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	4413      	add	r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	4a09      	ldr	r2, [pc, #36]	@ (800a8d0 <xTaskPriorityDisinherit+0x100>)
 800a8aa:	441a      	add	r2, r3
 800a8ac:	693b      	ldr	r3, [r7, #16]
 800a8ae:	3304      	adds	r3, #4
 800a8b0:	4619      	mov	r1, r3
 800a8b2:	4610      	mov	r0, r2
 800a8b4:	f7fe f853 	bl	800895e <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800a8bc:	697b      	ldr	r3, [r7, #20]
    }
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3718      	adds	r7, #24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20001538 	.word	0x20001538
 800a8cc:	20001618 	.word	0x20001618
 800a8d0:	2000153c 	.word	0x2000153c

0800a8d4 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b088      	sub	sp, #32
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	f000 8083 	beq.w	800a9f4 <vTaskPriorityDisinheritAfterTimeout+0x120>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800a8ee:	69bb      	ldr	r3, [r7, #24]
 800a8f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10b      	bne.n	800a90e <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	60fb      	str	r3, [r7, #12]
    }
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
 800a90c:	e7fd      	b.n	800a90a <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a912:	683a      	ldr	r2, [r7, #0]
 800a914:	429a      	cmp	r2, r3
 800a916:	d902      	bls.n	800a91e <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	61fb      	str	r3, [r7, #28]
 800a91c:	e002      	b.n	800a924 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a922:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 800a924:	69bb      	ldr	r3, [r7, #24]
 800a926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a928:	69fa      	ldr	r2, [r7, #28]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d062      	beq.n	800a9f4 <vTaskPriorityDisinheritAfterTimeout+0x120>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a932:	697a      	ldr	r2, [r7, #20]
 800a934:	429a      	cmp	r2, r3
 800a936:	d15d      	bne.n	800a9f4 <vTaskPriorityDisinheritAfterTimeout+0x120>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800a938:	4b30      	ldr	r3, [pc, #192]	@ (800a9fc <vTaskPriorityDisinheritAfterTimeout+0x128>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	69ba      	ldr	r2, [r7, #24]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d10b      	bne.n	800a95a <vTaskPriorityDisinheritAfterTimeout+0x86>
        __asm volatile
 800a942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a946:	f383 8811 	msr	BASEPRI, r3
 800a94a:	f3bf 8f6f 	isb	sy
 800a94e:	f3bf 8f4f 	dsb	sy
 800a952:	60bb      	str	r3, [r7, #8]
    }
 800a954:	bf00      	nop
 800a956:	bf00      	nop
 800a958:	e7fd      	b.n	800a956 <vTaskPriorityDisinheritAfterTimeout+0x82>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	4619      	mov	r1, r3
 800a95e:	204a      	movs	r0, #74	@ 0x4a
 800a960:	f002 f9fe 	bl	800cd60 <SEGGER_SYSVIEW_RecordU32>
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a964:	69bb      	ldr	r3, [r7, #24]
 800a966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a968:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 800a96a:	69bb      	ldr	r3, [r7, #24]
 800a96c:	69fa      	ldr	r2, [r7, #28]
 800a96e:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	2b00      	cmp	r3, #0
 800a976:	db04      	blt.n	800a982 <vTaskPriorityDisinheritAfterTimeout+0xae>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a978:	69fb      	ldr	r3, [r7, #28]
 800a97a:	f1c3 0205 	rsb	r2, r3, #5
 800a97e:	69bb      	ldr	r3, [r7, #24]
 800a980:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a982:	69bb      	ldr	r3, [r7, #24]
 800a984:	6959      	ldr	r1, [r3, #20]
 800a986:	693a      	ldr	r2, [r7, #16]
 800a988:	4613      	mov	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	4413      	add	r3, r2
 800a98e:	009b      	lsls	r3, r3, #2
 800a990:	4a1b      	ldr	r2, [pc, #108]	@ (800aa00 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a992:	4413      	add	r3, r2
 800a994:	4299      	cmp	r1, r3
 800a996:	d12d      	bne.n	800a9f4 <vTaskPriorityDisinheritAfterTimeout+0x120>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a998:	69bb      	ldr	r3, [r7, #24]
 800a99a:	3304      	adds	r3, #4
 800a99c:	4618      	mov	r0, r3
 800a99e:	f7fe f83b 	bl	8008a18 <uxListRemove>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d10a      	bne.n	800a9be <vTaskPriorityDisinheritAfterTimeout+0xea>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800a9a8:	69bb      	ldr	r3, [r7, #24]
 800a9aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ac:	2201      	movs	r2, #1
 800a9ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a9b2:	43da      	mvns	r2, r3
 800a9b4:	4b13      	ldr	r3, [pc, #76]	@ (800aa04 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	4a12      	ldr	r2, [pc, #72]	@ (800aa04 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a9bc:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f002 fffb 	bl	800d9bc <SEGGER_SYSVIEW_OnTaskStartReady>
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	409a      	lsls	r2, r3
 800a9ce:	4b0d      	ldr	r3, [pc, #52]	@ (800aa04 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	4a0b      	ldr	r2, [pc, #44]	@ (800aa04 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800a9d6:	6013      	str	r3, [r2, #0]
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9dc:	4613      	mov	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	009b      	lsls	r3, r3, #2
 800a9e4:	4a06      	ldr	r2, [pc, #24]	@ (800aa00 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800a9e6:	441a      	add	r2, r3
 800a9e8:	69bb      	ldr	r3, [r7, #24]
 800a9ea:	3304      	adds	r3, #4
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4610      	mov	r0, r2
 800a9f0:	f7fd ffb5 	bl	800895e <vListInsertEnd>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800a9f4:	bf00      	nop
 800a9f6:	3720      	adds	r7, #32
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}
 800a9fc:	20001538 	.word	0x20001538
 800aa00:	2000153c 	.word	0x2000153c
 800aa04:	20001618 	.word	0x20001618

0800aa08 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b083      	sub	sp, #12
 800aa0c:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800aa0e:	4b09      	ldr	r3, [pc, #36]	@ (800aa34 <uxTaskResetEventItemValue+0x2c>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	699b      	ldr	r3, [r3, #24]
 800aa14:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aa16:	4b07      	ldr	r3, [pc, #28]	@ (800aa34 <uxTaskResetEventItemValue+0x2c>)
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aa1c:	4b05      	ldr	r3, [pc, #20]	@ (800aa34 <uxTaskResetEventItemValue+0x2c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f1c2 0205 	rsb	r2, r2, #5
 800aa24:	619a      	str	r2, [r3, #24]

    return uxReturn;
 800aa26:	687b      	ldr	r3, [r7, #4]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	20001538 	.word	0x20001538

0800aa38 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 800aa3c:	4b07      	ldr	r3, [pc, #28]	@ (800aa5c <pvTaskIncrementMutexHeldCount+0x24>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d004      	beq.n	800aa4e <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 800aa44:	4b05      	ldr	r3, [pc, #20]	@ (800aa5c <pvTaskIncrementMutexHeldCount+0x24>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa4a:	3201      	adds	r2, #1
 800aa4c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 800aa4e:	4b03      	ldr	r3, [pc, #12]	@ (800aa5c <pvTaskIncrementMutexHeldCount+0x24>)
 800aa50:	681b      	ldr	r3, [r3, #0]
    }
 800aa52:	4618      	mov	r0, r3
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr
 800aa5c:	20001538 	.word	0x20001538

0800aa60 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 800aa60:	b580      	push	{r7, lr}
 800aa62:	b088      	sub	sp, #32
 800aa64:	af02      	add	r7, sp, #8
 800aa66:	60f8      	str	r0, [r7, #12]
 800aa68:	60b9      	str	r1, [r7, #8]
 800aa6a:	607a      	str	r2, [r7, #4]
 800aa6c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d00b      	beq.n	800aa8c <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 800aa74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	613b      	str	r3, [r7, #16]
    }
 800aa86:	bf00      	nop
 800aa88:	bf00      	nop
 800aa8a:	e7fd      	b.n	800aa88 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 800aa8c:	f001 f84e 	bl	800bb2c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800aa90:	4b36      	ldr	r3, [pc, #216]	@ (800ab6c <xTaskGenericNotifyWait+0x10c>)
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	3354      	adds	r3, #84	@ 0x54
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	2b02      	cmp	r3, #2
 800aaa0:	d022      	beq.n	800aae8 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800aaa2:	4b32      	ldr	r3, [pc, #200]	@ (800ab6c <xTaskGenericNotifyWait+0x10c>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	68fa      	ldr	r2, [r7, #12]
 800aaa8:	3214      	adds	r2, #20
 800aaaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aaae:	68ba      	ldr	r2, [r7, #8]
 800aab0:	43d2      	mvns	r2, r2
 800aab2:	4011      	ands	r1, r2
 800aab4:	68fa      	ldr	r2, [r7, #12]
 800aab6:	3214      	adds	r2, #20
 800aab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 800aabc:	4b2b      	ldr	r3, [pc, #172]	@ (800ab6c <xTaskGenericNotifyWait+0x10c>)
 800aabe:	681a      	ldr	r2, [r3, #0]
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	4413      	add	r3, r2
 800aac4:	3354      	adds	r3, #84	@ 0x54
 800aac6:	2201      	movs	r2, #1
 800aac8:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d00b      	beq.n	800aae8 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800aad0:	2101      	movs	r1, #1
 800aad2:	6a38      	ldr	r0, [r7, #32]
 800aad4:	f000 fa5e 	bl	800af94 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 800aad8:	4b25      	ldr	r3, [pc, #148]	@ (800ab70 <xTaskGenericNotifyWait+0x110>)
 800aada:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aade:	601a      	str	r2, [r3, #0]
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800aae8:	f001 f852 	bl	800bb90 <vPortExitCritical>

        taskENTER_CRITICAL();
 800aaec:	f001 f81e 	bl	800bb2c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	6a3b      	ldr	r3, [r7, #32]
 800aaf4:	9300      	str	r3, [sp, #0]
 800aaf6:	4613      	mov	r3, r2
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	68b9      	ldr	r1, [r7, #8]
 800aafc:	2040      	movs	r0, #64	@ 0x40
 800aafe:	f002 fa3b 	bl	800cf78 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d007      	beq.n	800ab18 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800ab08:	4b18      	ldr	r3, [pc, #96]	@ (800ab6c <xTaskGenericNotifyWait+0x10c>)
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	3214      	adds	r2, #20
 800ab10:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800ab18:	4b14      	ldr	r3, [pc, #80]	@ (800ab6c <xTaskGenericNotifyWait+0x10c>)
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	3354      	adds	r3, #84	@ 0x54
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	b2db      	uxtb	r3, r3
 800ab26:	2b02      	cmp	r3, #2
 800ab28:	d002      	beq.n	800ab30 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	617b      	str	r3, [r7, #20]
 800ab2e:	e00e      	b.n	800ab4e <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800ab30:	4b0e      	ldr	r3, [pc, #56]	@ (800ab6c <xTaskGenericNotifyWait+0x10c>)
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	3214      	adds	r2, #20
 800ab38:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ab3c:	687a      	ldr	r2, [r7, #4]
 800ab3e:	43d2      	mvns	r2, r2
 800ab40:	4011      	ands	r1, r2
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	3214      	adds	r2, #20
 800ab46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 800ab4e:	4b07      	ldr	r3, [pc, #28]	@ (800ab6c <xTaskGenericNotifyWait+0x10c>)
 800ab50:	681a      	ldr	r2, [r3, #0]
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	4413      	add	r3, r2
 800ab56:	3354      	adds	r3, #84	@ 0x54
 800ab58:	2200      	movs	r2, #0
 800ab5a:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 800ab5c:	f001 f818 	bl	800bb90 <vPortExitCritical>

        return xReturn;
 800ab60:	697b      	ldr	r3, [r7, #20]
    }
 800ab62:	4618      	mov	r0, r3
 800ab64:	3718      	adds	r7, #24
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	20001538 	.word	0x20001538
 800ab70:	e000ed04 	.word	0xe000ed04

0800ab74 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 800ab74:	b580      	push	{r7, lr}
 800ab76:	b08e      	sub	sp, #56	@ 0x38
 800ab78:	af02      	add	r7, sp, #8
 800ab7a:	60f8      	str	r0, [r7, #12]
 800ab7c:	60b9      	str	r1, [r7, #8]
 800ab7e:	607a      	str	r2, [r7, #4]
 800ab80:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800ab82:	2301      	movs	r3, #1
 800ab84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d00b      	beq.n	800aba4 <xTaskGenericNotify+0x30>
        __asm volatile
 800ab8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab90:	f383 8811 	msr	BASEPRI, r3
 800ab94:	f3bf 8f6f 	isb	sy
 800ab98:	f3bf 8f4f 	dsb	sy
 800ab9c:	623b      	str	r3, [r7, #32]
    }
 800ab9e:	bf00      	nop
 800aba0:	bf00      	nop
 800aba2:	e7fd      	b.n	800aba0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d10b      	bne.n	800abc2 <xTaskGenericNotify+0x4e>
        __asm volatile
 800abaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abae:	f383 8811 	msr	BASEPRI, r3
 800abb2:	f3bf 8f6f 	isb	sy
 800abb6:	f3bf 8f4f 	dsb	sy
 800abba:	61fb      	str	r3, [r7, #28]
    }
 800abbc:	bf00      	nop
 800abbe:	bf00      	nop
 800abc0:	e7fd      	b.n	800abbe <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 800abc6:	f000 ffb1 	bl	800bb2c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800abca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d006      	beq.n	800abde <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800abd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800abd2:	68ba      	ldr	r2, [r7, #8]
 800abd4:	3214      	adds	r2, #20
 800abd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800abda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abdc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800abde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	4413      	add	r3, r2
 800abe4:	3354      	adds	r3, #84	@ 0x54
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800abec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	4413      	add	r3, r2
 800abf2:	3354      	adds	r3, #84	@ 0x54
 800abf4:	2202      	movs	r2, #2
 800abf6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800abf8:	78fb      	ldrb	r3, [r7, #3]
 800abfa:	2b04      	cmp	r3, #4
 800abfc:	d83b      	bhi.n	800ac76 <xTaskGenericNotify+0x102>
 800abfe:	a201      	add	r2, pc, #4	@ (adr r2, 800ac04 <xTaskGenericNotify+0x90>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800ac97 	.word	0x0800ac97
 800ac08:	0800ac19 	.word	0x0800ac19
 800ac0c:	0800ac35 	.word	0x0800ac35
 800ac10:	0800ac4d 	.word	0x0800ac4d
 800ac14:	0800ac5b 	.word	0x0800ac5b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800ac18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac1a:	68ba      	ldr	r2, [r7, #8]
 800ac1c:	3214      	adds	r2, #20
 800ac1e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	ea42 0103 	orr.w	r1, r2, r3
 800ac28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac2a:	68ba      	ldr	r2, [r7, #8]
 800ac2c:	3214      	adds	r2, #20
 800ac2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ac32:	e033      	b.n	800ac9c <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800ac34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac36:	68ba      	ldr	r2, [r7, #8]
 800ac38:	3214      	adds	r2, #20
 800ac3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac3e:	1c59      	adds	r1, r3, #1
 800ac40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac42:	68ba      	ldr	r2, [r7, #8]
 800ac44:	3214      	adds	r2, #20
 800ac46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ac4a:	e027      	b.n	800ac9c <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800ac4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	3214      	adds	r2, #20
 800ac52:	6879      	ldr	r1, [r7, #4]
 800ac54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ac58:	e020      	b.n	800ac9c <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ac5a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d006      	beq.n	800ac70 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800ac62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	3214      	adds	r2, #20
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800ac6e:	e015      	b.n	800ac9c <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 800ac70:	2300      	movs	r3, #0
 800ac72:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 800ac74:	e012      	b.n	800ac9c <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800ac76:	4b35      	ldr	r3, [pc, #212]	@ (800ad4c <xTaskGenericNotify+0x1d8>)
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d00d      	beq.n	800ac9a <xTaskGenericNotify+0x126>
        __asm volatile
 800ac7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac82:	f383 8811 	msr	BASEPRI, r3
 800ac86:	f3bf 8f6f 	isb	sy
 800ac8a:	f3bf 8f4f 	dsb	sy
 800ac8e:	61bb      	str	r3, [r7, #24]
    }
 800ac90:	bf00      	nop
 800ac92:	bf00      	nop
 800ac94:	e7fd      	b.n	800ac92 <xTaskGenericNotify+0x11e>
                    break;
 800ac96:	bf00      	nop
 800ac98:	e000      	b.n	800ac9c <xTaskGenericNotify+0x128>

                    break;
 800ac9a:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 800ac9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f002 ff2e 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 800aca4:	4601      	mov	r1, r0
 800aca6:	78fa      	ldrb	r2, [r7, #3]
 800aca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acaa:	9300      	str	r3, [sp, #0]
 800acac:	4613      	mov	r3, r2
 800acae:	687a      	ldr	r2, [r7, #4]
 800acb0:	203e      	movs	r0, #62	@ 0x3e
 800acb2:	f002 f961 	bl	800cf78 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800acb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800acba:	2b01      	cmp	r3, #1
 800acbc:	d13e      	bne.n	800ad3c <xTaskGenericNotify+0x1c8>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800acbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acc0:	3304      	adds	r3, #4
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fd fea8 	bl	8008a18 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 800acc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acca:	4618      	mov	r0, r3
 800accc:	f002 fe76 	bl	800d9bc <SEGGER_SYSVIEW_OnTaskStartReady>
 800acd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acd4:	2201      	movs	r2, #1
 800acd6:	409a      	lsls	r2, r3
 800acd8:	4b1d      	ldr	r3, [pc, #116]	@ (800ad50 <xTaskGenericNotify+0x1dc>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	4313      	orrs	r3, r2
 800acde:	4a1c      	ldr	r2, [pc, #112]	@ (800ad50 <xTaskGenericNotify+0x1dc>)
 800ace0:	6013      	str	r3, [r2, #0]
 800ace2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ace4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ace6:	4613      	mov	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	4a19      	ldr	r2, [pc, #100]	@ (800ad54 <xTaskGenericNotify+0x1e0>)
 800acf0:	441a      	add	r2, r3
 800acf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf4:	3304      	adds	r3, #4
 800acf6:	4619      	mov	r1, r3
 800acf8:	4610      	mov	r0, r2
 800acfa:	f7fd fe30 	bl	800895e <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800acfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d00b      	beq.n	800ad1e <xTaskGenericNotify+0x1aa>
        __asm volatile
 800ad06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad0a:	f383 8811 	msr	BASEPRI, r3
 800ad0e:	f3bf 8f6f 	isb	sy
 800ad12:	f3bf 8f4f 	dsb	sy
 800ad16:	617b      	str	r3, [r7, #20]
    }
 800ad18:	bf00      	nop
 800ad1a:	bf00      	nop
 800ad1c:	e7fd      	b.n	800ad1a <xTaskGenericNotify+0x1a6>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ad1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ad22:	4b0d      	ldr	r3, [pc, #52]	@ (800ad58 <xTaskGenericNotify+0x1e4>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d907      	bls.n	800ad3c <xTaskGenericNotify+0x1c8>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 800ad2c:	4b0b      	ldr	r3, [pc, #44]	@ (800ad5c <xTaskGenericNotify+0x1e8>)
 800ad2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800ad3c:	f000 ff28 	bl	800bb90 <vPortExitCritical>

        return xReturn;
 800ad40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800ad42:	4618      	mov	r0, r3
 800ad44:	3730      	adds	r7, #48	@ 0x30
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20001614 	.word	0x20001614
 800ad50:	20001618 	.word	0x20001618
 800ad54:	2000153c 	.word	0x2000153c
 800ad58:	20001538 	.word	0x20001538
 800ad5c:	e000ed04 	.word	0xe000ed04

0800ad60 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b092      	sub	sp, #72	@ 0x48
 800ad64:	af02      	add	r7, sp, #8
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	60b9      	str	r1, [r7, #8]
 800ad6a:	607a      	str	r2, [r7, #4]
 800ad6c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d10b      	bne.n	800ad90 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 800ad78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad7c:	f383 8811 	msr	BASEPRI, r3
 800ad80:	f3bf 8f6f 	isb	sy
 800ad84:	f3bf 8f4f 	dsb	sy
 800ad88:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 800ad8a:	bf00      	nop
 800ad8c:	bf00      	nop
 800ad8e:	e7fd      	b.n	800ad8c <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00b      	beq.n	800adae <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 800ad96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad9a:	f383 8811 	msr	BASEPRI, r3
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f3bf 8f4f 	dsb	sy
 800ada6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800ada8:	bf00      	nop
 800adaa:	bf00      	nop
 800adac:	e7fd      	b.n	800adaa <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800adae:	f000 ffad 	bl	800bd0c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 800adb6:	f3ef 8211 	mrs	r2, BASEPRI
 800adba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adbe:	f383 8811 	msr	BASEPRI, r3
 800adc2:	f3bf 8f6f 	isb	sy
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	627a      	str	r2, [r7, #36]	@ 0x24
 800adcc:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 800adce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800add0:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800add2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800add4:	2b00      	cmp	r3, #0
 800add6:	d006      	beq.n	800ade6 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800add8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	3214      	adds	r2, #20
 800adde:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ade2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ade4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800ade6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	4413      	add	r3, r2
 800adec:	3354      	adds	r3, #84	@ 0x54
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800adf4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	4413      	add	r3, r2
 800adfa:	3354      	adds	r3, #84	@ 0x54
 800adfc:	2202      	movs	r2, #2
 800adfe:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 800ae00:	78fb      	ldrb	r3, [r7, #3]
 800ae02:	2b04      	cmp	r3, #4
 800ae04:	d83b      	bhi.n	800ae7e <xTaskGenericNotifyFromISR+0x11e>
 800ae06:	a201      	add	r2, pc, #4	@ (adr r2, 800ae0c <xTaskGenericNotifyFromISR+0xac>)
 800ae08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae0c:	0800ae9f 	.word	0x0800ae9f
 800ae10:	0800ae21 	.word	0x0800ae21
 800ae14:	0800ae3d 	.word	0x0800ae3d
 800ae18:	0800ae55 	.word	0x0800ae55
 800ae1c:	0800ae63 	.word	0x0800ae63
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 800ae20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	3214      	adds	r2, #20
 800ae26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	ea42 0103 	orr.w	r1, r2, r3
 800ae30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae32:	68ba      	ldr	r2, [r7, #8]
 800ae34:	3214      	adds	r2, #20
 800ae36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ae3a:	e033      	b.n	800aea4 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800ae3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae3e:	68ba      	ldr	r2, [r7, #8]
 800ae40:	3214      	adds	r2, #20
 800ae42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae46:	1c59      	adds	r1, r3, #1
 800ae48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4a:	68ba      	ldr	r2, [r7, #8]
 800ae4c:	3214      	adds	r2, #20
 800ae4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ae52:	e027      	b.n	800aea4 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800ae54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae56:	68ba      	ldr	r2, [r7, #8]
 800ae58:	3214      	adds	r2, #20
 800ae5a:	6879      	ldr	r1, [r7, #4]
 800ae5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800ae60:	e020      	b.n	800aea4 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800ae62:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ae66:	2b02      	cmp	r3, #2
 800ae68:	d006      	beq.n	800ae78 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6c:	68ba      	ldr	r2, [r7, #8]
 800ae6e:	3214      	adds	r2, #20
 800ae70:	6879      	ldr	r1, [r7, #4]
 800ae72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800ae76:	e015      	b.n	800aea4 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 800ae7c:	e012      	b.n	800aea4 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 800ae7e:	4b3e      	ldr	r3, [pc, #248]	@ (800af78 <xTaskGenericNotifyFromISR+0x218>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d00d      	beq.n	800aea2 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 800ae86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	61fb      	str	r3, [r7, #28]
    }
 800ae98:	bf00      	nop
 800ae9a:	bf00      	nop
 800ae9c:	e7fd      	b.n	800ae9a <xTaskGenericNotifyFromISR+0x13a>
                    break;
 800ae9e:	bf00      	nop
 800aea0:	e000      	b.n	800aea4 <xTaskGenericNotifyFromISR+0x144>
                    break;
 800aea2:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 800aea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea6:	4618      	mov	r0, r3
 800aea8:	f002 fe2a 	bl	800db00 <SEGGER_SYSVIEW_ShrinkId>
 800aeac:	78f9      	ldrb	r1, [r7, #3]
 800aeae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800aeb0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800aeb2:	9201      	str	r2, [sp, #4]
 800aeb4:	9300      	str	r3, [sp, #0]
 800aeb6:	460b      	mov	r3, r1
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	4601      	mov	r1, r0
 800aebc:	203f      	movs	r0, #63	@ 0x3f
 800aebe:	f002 f8ed 	bl	800d09c <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800aec2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aec6:	2b01      	cmp	r3, #1
 800aec8:	d14a      	bne.n	800af60 <xTaskGenericNotifyFromISR+0x200>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800aeca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aecc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d00b      	beq.n	800aeea <xTaskGenericNotifyFromISR+0x18a>
        __asm volatile
 800aed2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aed6:	f383 8811 	msr	BASEPRI, r3
 800aeda:	f3bf 8f6f 	isb	sy
 800aede:	f3bf 8f4f 	dsb	sy
 800aee2:	61bb      	str	r3, [r7, #24]
    }
 800aee4:	bf00      	nop
 800aee6:	bf00      	nop
 800aee8:	e7fd      	b.n	800aee6 <xTaskGenericNotifyFromISR+0x186>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeea:	4b24      	ldr	r3, [pc, #144]	@ (800af7c <xTaskGenericNotifyFromISR+0x21c>)
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d120      	bne.n	800af34 <xTaskGenericNotifyFromISR+0x1d4>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef4:	3304      	adds	r3, #4
 800aef6:	4618      	mov	r0, r3
 800aef8:	f7fd fd8e 	bl	8008a18 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800aefc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aefe:	4618      	mov	r0, r3
 800af00:	f002 fd5c 	bl	800d9bc <SEGGER_SYSVIEW_OnTaskStartReady>
 800af04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af08:	2201      	movs	r2, #1
 800af0a:	409a      	lsls	r2, r3
 800af0c:	4b1c      	ldr	r3, [pc, #112]	@ (800af80 <xTaskGenericNotifyFromISR+0x220>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4313      	orrs	r3, r2
 800af12:	4a1b      	ldr	r2, [pc, #108]	@ (800af80 <xTaskGenericNotifyFromISR+0x220>)
 800af14:	6013      	str	r3, [r2, #0]
 800af16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af1a:	4613      	mov	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	4413      	add	r3, r2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4a18      	ldr	r2, [pc, #96]	@ (800af84 <xTaskGenericNotifyFromISR+0x224>)
 800af24:	441a      	add	r2, r3
 800af26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af28:	3304      	adds	r3, #4
 800af2a:	4619      	mov	r1, r3
 800af2c:	4610      	mov	r0, r2
 800af2e:	f7fd fd16 	bl	800895e <vListInsertEnd>
 800af32:	e005      	b.n	800af40 <xTaskGenericNotifyFromISR+0x1e0>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800af34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af36:	3318      	adds	r3, #24
 800af38:	4619      	mov	r1, r3
 800af3a:	4813      	ldr	r0, [pc, #76]	@ (800af88 <xTaskGenericNotifyFromISR+0x228>)
 800af3c:	f7fd fd0f 	bl	800895e <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af44:	4b11      	ldr	r3, [pc, #68]	@ (800af8c <xTaskGenericNotifyFromISR+0x22c>)
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d908      	bls.n	800af60 <xTaskGenericNotifyFromISR+0x200>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800af4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <xTaskGenericNotifyFromISR+0x1fa>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 800af54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af56:	2201      	movs	r2, #1
 800af58:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800af5a:	4b0d      	ldr	r3, [pc, #52]	@ (800af90 <xTaskGenericNotifyFromISR+0x230>)
 800af5c:	2201      	movs	r2, #1
 800af5e:	601a      	str	r2, [r3, #0]
 800af60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800af62:	617b      	str	r3, [r7, #20]
        __asm volatile
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	f383 8811 	msr	BASEPRI, r3
    }
 800af6a:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800af6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 800af6e:	4618      	mov	r0, r3
 800af70:	3740      	adds	r7, #64	@ 0x40
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20001614 	.word	0x20001614
 800af7c:	20001638 	.word	0x20001638
 800af80:	20001618 	.word	0x20001618
 800af84:	2000153c 	.word	0x2000153c
 800af88:	200015d0 	.word	0x200015d0
 800af8c:	20001538 	.word	0x20001538
 800af90:	20001624 	.word	0x20001624

0800af94 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800af9e:	4b32      	ldr	r3, [pc, #200]	@ (800b068 <prvAddCurrentTaskToDelayedList+0xd4>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800afa4:	4b31      	ldr	r3, [pc, #196]	@ (800b06c <prvAddCurrentTaskToDelayedList+0xd8>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	3304      	adds	r3, #4
 800afaa:	4618      	mov	r0, r3
 800afac:	f7fd fd34 	bl	8008a18 <uxListRemove>
 800afb0:	4603      	mov	r3, r0
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d10b      	bne.n	800afce <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800afb6:	4b2d      	ldr	r3, [pc, #180]	@ (800b06c <prvAddCurrentTaskToDelayedList+0xd8>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afbc:	2201      	movs	r2, #1
 800afbe:	fa02 f303 	lsl.w	r3, r2, r3
 800afc2:	43da      	mvns	r2, r3
 800afc4:	4b2a      	ldr	r3, [pc, #168]	@ (800b070 <prvAddCurrentTaskToDelayedList+0xdc>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4013      	ands	r3, r2
 800afca:	4a29      	ldr	r2, [pc, #164]	@ (800b070 <prvAddCurrentTaskToDelayedList+0xdc>)
 800afcc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afd4:	d110      	bne.n	800aff8 <prvAddCurrentTaskToDelayedList+0x64>
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d00d      	beq.n	800aff8 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800afdc:	4b23      	ldr	r3, [pc, #140]	@ (800b06c <prvAddCurrentTaskToDelayedList+0xd8>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	211b      	movs	r1, #27
 800afe2:	4618      	mov	r0, r3
 800afe4:	f002 fd2c 	bl	800da40 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800afe8:	4b20      	ldr	r3, [pc, #128]	@ (800b06c <prvAddCurrentTaskToDelayedList+0xd8>)
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	3304      	adds	r3, #4
 800afee:	4619      	mov	r1, r3
 800aff0:	4820      	ldr	r0, [pc, #128]	@ (800b074 <prvAddCurrentTaskToDelayedList+0xe0>)
 800aff2:	f7fd fcb4 	bl	800895e <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 800aff6:	e032      	b.n	800b05e <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 800aff8:	68fa      	ldr	r2, [r7, #12]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4413      	add	r3, r2
 800affe:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b000:	4b1a      	ldr	r3, [pc, #104]	@ (800b06c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	68ba      	ldr	r2, [r7, #8]
 800b006:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800b008:	68ba      	ldr	r2, [r7, #8]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d20f      	bcs.n	800b030 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 800b010:	4b16      	ldr	r3, [pc, #88]	@ (800b06c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	2104      	movs	r1, #4
 800b016:	4618      	mov	r0, r3
 800b018:	f002 fd12 	bl	800da40 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b01c:	4b16      	ldr	r3, [pc, #88]	@ (800b078 <prvAddCurrentTaskToDelayedList+0xe4>)
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	4b12      	ldr	r3, [pc, #72]	@ (800b06c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3304      	adds	r3, #4
 800b026:	4619      	mov	r1, r3
 800b028:	4610      	mov	r0, r2
 800b02a:	f7fd fcbc 	bl	80089a6 <vListInsert>
}
 800b02e:	e016      	b.n	800b05e <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 800b030:	4b0e      	ldr	r3, [pc, #56]	@ (800b06c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2104      	movs	r1, #4
 800b036:	4618      	mov	r0, r3
 800b038:	f002 fd02 	bl	800da40 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b03c:	4b0f      	ldr	r3, [pc, #60]	@ (800b07c <prvAddCurrentTaskToDelayedList+0xe8>)
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	4b0a      	ldr	r3, [pc, #40]	@ (800b06c <prvAddCurrentTaskToDelayedList+0xd8>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3304      	adds	r3, #4
 800b046:	4619      	mov	r1, r3
 800b048:	4610      	mov	r0, r2
 800b04a:	f7fd fcac 	bl	80089a6 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800b04e:	4b0c      	ldr	r3, [pc, #48]	@ (800b080 <prvAddCurrentTaskToDelayedList+0xec>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	429a      	cmp	r2, r3
 800b056:	d202      	bcs.n	800b05e <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 800b058:	4a09      	ldr	r2, [pc, #36]	@ (800b080 <prvAddCurrentTaskToDelayedList+0xec>)
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	6013      	str	r3, [r2, #0]
}
 800b05e:	bf00      	nop
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20001614 	.word	0x20001614
 800b06c:	20001538 	.word	0x20001538
 800b070:	20001618 	.word	0x20001618
 800b074:	200015fc 	.word	0x200015fc
 800b078:	200015cc 	.word	0x200015cc
 800b07c:	200015c8 	.word	0x200015c8
 800b080:	20001630 	.word	0x20001630

0800b084 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800b08a:	2300      	movs	r3, #0
 800b08c:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800b08e:	f000 fb3f 	bl	800b710 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800b092:	4b12      	ldr	r3, [pc, #72]	@ (800b0dc <xTimerCreateTimerTask+0x58>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d00b      	beq.n	800b0b2 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800b09a:	4b11      	ldr	r3, [pc, #68]	@ (800b0e0 <xTimerCreateTimerTask+0x5c>)
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	2302      	movs	r3, #2
 800b0a0:	9300      	str	r3, [sp, #0]
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800b0a8:	490e      	ldr	r1, [pc, #56]	@ (800b0e4 <xTimerCreateTimerTask+0x60>)
 800b0aa:	480f      	ldr	r0, [pc, #60]	@ (800b0e8 <xTimerCreateTimerTask+0x64>)
 800b0ac:	f7fe fc98 	bl	80099e0 <xTaskCreate>
 800b0b0:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d10b      	bne.n	800b0d0 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 800b0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	603b      	str	r3, [r7, #0]
    }
 800b0ca:	bf00      	nop
 800b0cc:	bf00      	nop
 800b0ce:	e7fd      	b.n	800b0cc <xTimerCreateTimerTask+0x48>
        return xReturn;
 800b0d0:	687b      	ldr	r3, [r7, #4]
    }
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3708      	adds	r7, #8
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}
 800b0da:	bf00      	nop
 800b0dc:	2000166c 	.word	0x2000166c
 800b0e0:	20001670 	.word	0x20001670
 800b0e4:	0800f65c 	.word	0x0800f65c
 800b0e8:	0800b2e1 	.word	0x0800b2e1

0800b0ec <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 800b0ec:	b580      	push	{r7, lr}
 800b0ee:	b088      	sub	sp, #32
 800b0f0:	af02      	add	r7, sp, #8
 800b0f2:	60f8      	str	r0, [r7, #12]
 800b0f4:	60b9      	str	r1, [r7, #8]
 800b0f6:	607a      	str	r2, [r7, #4]
 800b0f8:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b0fa:	202c      	movs	r0, #44	@ 0x2c
 800b0fc:	f000 fe48 	bl	800bd90 <pvPortMalloc>
 800b100:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d00d      	beq.n	800b124 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	2200      	movs	r2, #0
 800b10c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	9301      	str	r3, [sp, #4]
 800b114:	6a3b      	ldr	r3, [r7, #32]
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	687a      	ldr	r2, [r7, #4]
 800b11c:	68b9      	ldr	r1, [r7, #8]
 800b11e:	68f8      	ldr	r0, [r7, #12]
 800b120:	f000 f805 	bl	800b12e <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800b124:	697b      	ldr	r3, [r7, #20]
        }
 800b126:	4618      	mov	r0, r3
 800b128:	3718      	adds	r7, #24
 800b12a:	46bd      	mov	sp, r7
 800b12c:	bd80      	pop	{r7, pc}

0800b12e <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 800b12e:	b580      	push	{r7, lr}
 800b130:	b086      	sub	sp, #24
 800b132:	af00      	add	r7, sp, #0
 800b134:	60f8      	str	r0, [r7, #12]
 800b136:	60b9      	str	r1, [r7, #8]
 800b138:	607a      	str	r2, [r7, #4]
 800b13a:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d10b      	bne.n	800b15a <prvInitialiseNewTimer+0x2c>
        __asm volatile
 800b142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b146:	f383 8811 	msr	BASEPRI, r3
 800b14a:	f3bf 8f6f 	isb	sy
 800b14e:	f3bf 8f4f 	dsb	sy
 800b152:	617b      	str	r3, [r7, #20]
    }
 800b154:	bf00      	nop
 800b156:	bf00      	nop
 800b158:	e7fd      	b.n	800b156 <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800b15a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d01e      	beq.n	800b19e <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 800b160:	f000 fad6 	bl	800b710 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800b164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b16c:	68ba      	ldr	r2, [r7, #8]
 800b16e:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 800b170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b172:	683a      	ldr	r2, [r7, #0]
 800b174:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b178:	6a3a      	ldr	r2, [r7, #32]
 800b17a:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b17e:	3304      	adds	r3, #4
 800b180:	4618      	mov	r0, r3
 800b182:	f7fd fbdf 	bl	8008944 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d008      	beq.n	800b19e <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b18c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b18e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b192:	f043 0304 	orr.w	r3, r3, #4
 800b196:	b2da      	uxtb	r2, r3
 800b198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b19a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 800b19e:	bf00      	nop
 800b1a0:	3718      	adds	r7, #24
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
	...

0800b1a8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b08a      	sub	sp, #40	@ 0x28
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
 800b1b4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d10b      	bne.n	800b1d8 <xTimerGenericCommand+0x30>
        __asm volatile
 800b1c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c4:	f383 8811 	msr	BASEPRI, r3
 800b1c8:	f3bf 8f6f 	isb	sy
 800b1cc:	f3bf 8f4f 	dsb	sy
 800b1d0:	623b      	str	r3, [r7, #32]
    }
 800b1d2:	bf00      	nop
 800b1d4:	bf00      	nop
 800b1d6:	e7fd      	b.n	800b1d4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800b1d8:	4b19      	ldr	r3, [pc, #100]	@ (800b240 <xTimerGenericCommand+0x98>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d02a      	beq.n	800b236 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 800b1e0:	68bb      	ldr	r3, [r7, #8]
 800b1e2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b05      	cmp	r3, #5
 800b1f0:	dc18      	bgt.n	800b224 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b1f2:	f7ff fa55 	bl	800a6a0 <xTaskGetSchedulerState>
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2b02      	cmp	r3, #2
 800b1fa:	d109      	bne.n	800b210 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b1fc:	4b10      	ldr	r3, [pc, #64]	@ (800b240 <xTimerGenericCommand+0x98>)
 800b1fe:	6818      	ldr	r0, [r3, #0]
 800b200:	f107 0114 	add.w	r1, r7, #20
 800b204:	2300      	movs	r3, #0
 800b206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b208:	f7fd fd26 	bl	8008c58 <xQueueGenericSend>
 800b20c:	6278      	str	r0, [r7, #36]	@ 0x24
 800b20e:	e012      	b.n	800b236 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b210:	4b0b      	ldr	r3, [pc, #44]	@ (800b240 <xTimerGenericCommand+0x98>)
 800b212:	6818      	ldr	r0, [r3, #0]
 800b214:	f107 0114 	add.w	r1, r7, #20
 800b218:	2300      	movs	r3, #0
 800b21a:	2200      	movs	r2, #0
 800b21c:	f7fd fd1c 	bl	8008c58 <xQueueGenericSend>
 800b220:	6278      	str	r0, [r7, #36]	@ 0x24
 800b222:	e008      	b.n	800b236 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b224:	4b06      	ldr	r3, [pc, #24]	@ (800b240 <xTimerGenericCommand+0x98>)
 800b226:	6818      	ldr	r0, [r3, #0]
 800b228:	f107 0114 	add.w	r1, r7, #20
 800b22c:	2300      	movs	r3, #0
 800b22e:	683a      	ldr	r2, [r7, #0]
 800b230:	f7fd fe3c 	bl	8008eac <xQueueGenericSendFromISR>
 800b234:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800b236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800b238:	4618      	mov	r0, r3
 800b23a:	3728      	adds	r7, #40	@ 0x28
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}
 800b240:	2000166c 	.word	0x2000166c

0800b244 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800b244:	b580      	push	{r7, lr}
 800b246:	b088      	sub	sp, #32
 800b248:	af02      	add	r7, sp, #8
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b24e:	4b23      	ldr	r3, [pc, #140]	@ (800b2dc <prvProcessExpiredTimer+0x98>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	68db      	ldr	r3, [r3, #12]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b258:	697b      	ldr	r3, [r7, #20]
 800b25a:	3304      	adds	r3, #4
 800b25c:	4618      	mov	r0, r3
 800b25e:	f7fd fbdb 	bl	8008a18 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b268:	f003 0304 	and.w	r3, r3, #4
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d023      	beq.n	800b2b8 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	699a      	ldr	r2, [r3, #24]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	18d1      	adds	r1, r2, r3
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	6978      	ldr	r0, [r7, #20]
 800b27e:	f000 f8d5 	bl	800b42c <prvInsertTimerInActiveList>
 800b282:	4603      	mov	r3, r0
 800b284:	2b00      	cmp	r3, #0
 800b286:	d020      	beq.n	800b2ca <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b288:	2300      	movs	r3, #0
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	2300      	movs	r3, #0
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	2100      	movs	r1, #0
 800b292:	6978      	ldr	r0, [r7, #20]
 800b294:	f7ff ff88 	bl	800b1a8 <xTimerGenericCommand>
 800b298:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d114      	bne.n	800b2ca <prvProcessExpiredTimer+0x86>
        __asm volatile
 800b2a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2a4:	f383 8811 	msr	BASEPRI, r3
 800b2a8:	f3bf 8f6f 	isb	sy
 800b2ac:	f3bf 8f4f 	dsb	sy
 800b2b0:	60fb      	str	r3, [r7, #12]
    }
 800b2b2:	bf00      	nop
 800b2b4:	bf00      	nop
 800b2b6:	e7fd      	b.n	800b2b4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b2be:	f023 0301 	bic.w	r3, r3, #1
 800b2c2:	b2da      	uxtb	r2, r3
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	6a1b      	ldr	r3, [r3, #32]
 800b2ce:	6978      	ldr	r0, [r7, #20]
 800b2d0:	4798      	blx	r3
    }
 800b2d2:	bf00      	nop
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	20001664 	.word	0x20001664

0800b2e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 800b2e0:	b580      	push	{r7, lr}
 800b2e2:	b084      	sub	sp, #16
 800b2e4:	af00      	add	r7, sp, #0
 800b2e6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b2e8:	f107 0308 	add.w	r3, r7, #8
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	f000 f859 	bl	800b3a4 <prvGetNextExpireTime>
 800b2f2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	4619      	mov	r1, r3
 800b2f8:	68f8      	ldr	r0, [r7, #12]
 800b2fa:	f000 f805 	bl	800b308 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800b2fe:	f000 f8d7 	bl	800b4b0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b302:	bf00      	nop
 800b304:	e7f0      	b.n	800b2e8 <prvTimerTask+0x8>
	...

0800b308 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800b312:	f7fe fd2b 	bl	8009d6c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b316:	f107 0308 	add.w	r3, r7, #8
 800b31a:	4618      	mov	r0, r3
 800b31c:	f000 f866 	bl	800b3ec <prvSampleTimeNow>
 800b320:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800b322:	68bb      	ldr	r3, [r7, #8]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d130      	bne.n	800b38a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b328:	683b      	ldr	r3, [r7, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10a      	bne.n	800b344 <prvProcessTimerOrBlockTask+0x3c>
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	429a      	cmp	r2, r3
 800b334:	d806      	bhi.n	800b344 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800b336:	f7fe fd27 	bl	8009d88 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b33a:	68f9      	ldr	r1, [r7, #12]
 800b33c:	6878      	ldr	r0, [r7, #4]
 800b33e:	f7ff ff81 	bl	800b244 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800b342:	e024      	b.n	800b38e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800b344:	683b      	ldr	r3, [r7, #0]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d008      	beq.n	800b35c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b34a:	4b13      	ldr	r3, [pc, #76]	@ (800b398 <prvProcessTimerOrBlockTask+0x90>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d101      	bne.n	800b358 <prvProcessTimerOrBlockTask+0x50>
 800b354:	2301      	movs	r3, #1
 800b356:	e000      	b.n	800b35a <prvProcessTimerOrBlockTask+0x52>
 800b358:	2300      	movs	r3, #0
 800b35a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b35c:	4b0f      	ldr	r3, [pc, #60]	@ (800b39c <prvProcessTimerOrBlockTask+0x94>)
 800b35e:	6818      	ldr	r0, [r3, #0]
 800b360:	687a      	ldr	r2, [r7, #4]
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	1ad3      	subs	r3, r2, r3
 800b366:	683a      	ldr	r2, [r7, #0]
 800b368:	4619      	mov	r1, r3
 800b36a:	f7fe fb05 	bl	8009978 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800b36e:	f7fe fd0b 	bl	8009d88 <xTaskResumeAll>
 800b372:	4603      	mov	r3, r0
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10a      	bne.n	800b38e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800b378:	4b09      	ldr	r3, [pc, #36]	@ (800b3a0 <prvProcessTimerOrBlockTask+0x98>)
 800b37a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b37e:	601a      	str	r2, [r3, #0]
 800b380:	f3bf 8f4f 	dsb	sy
 800b384:	f3bf 8f6f 	isb	sy
    }
 800b388:	e001      	b.n	800b38e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800b38a:	f7fe fcfd 	bl	8009d88 <xTaskResumeAll>
    }
 800b38e:	bf00      	nop
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20001668 	.word	0x20001668
 800b39c:	2000166c 	.word	0x2000166c
 800b3a0:	e000ed04 	.word	0xe000ed04

0800b3a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800b3e8 <prvGetNextExpireTime+0x44>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d101      	bne.n	800b3ba <prvGetNextExpireTime+0x16>
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	e000      	b.n	800b3bc <prvGetNextExpireTime+0x18>
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d105      	bne.n	800b3d4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b3c8:	4b07      	ldr	r3, [pc, #28]	@ (800b3e8 <prvGetNextExpireTime+0x44>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	68db      	ldr	r3, [r3, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	60fb      	str	r3, [r7, #12]
 800b3d2:	e001      	b.n	800b3d8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800b3d8:	68fb      	ldr	r3, [r7, #12]
    }
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3714      	adds	r7, #20
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr
 800b3e6:	bf00      	nop
 800b3e8:	20001664 	.word	0x20001664

0800b3ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800b3f4:	f7fe fd6a 	bl	8009ecc <xTaskGetTickCount>
 800b3f8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800b3fa:	4b0b      	ldr	r3, [pc, #44]	@ (800b428 <prvSampleTimeNow+0x3c>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	68fa      	ldr	r2, [r7, #12]
 800b400:	429a      	cmp	r2, r3
 800b402:	d205      	bcs.n	800b410 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800b404:	f000 f91e 	bl	800b644 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2201      	movs	r2, #1
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	e002      	b.n	800b416 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800b416:	4a04      	ldr	r2, [pc, #16]	@ (800b428 <prvSampleTimeNow+0x3c>)
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800b41c:	68fb      	ldr	r3, [r7, #12]
    }
 800b41e:	4618      	mov	r0, r3
 800b420:	3710      	adds	r7, #16
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20001674 	.word	0x20001674

0800b42c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	607a      	str	r2, [r7, #4]
 800b438:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800b43a:	2300      	movs	r3, #0
 800b43c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	68ba      	ldr	r2, [r7, #8]
 800b442:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	68fa      	ldr	r2, [r7, #12]
 800b448:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d812      	bhi.n	800b478 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	1ad2      	subs	r2, r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	699b      	ldr	r3, [r3, #24]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d302      	bcc.n	800b466 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800b460:	2301      	movs	r3, #1
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	e01b      	b.n	800b49e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b466:	4b10      	ldr	r3, [pc, #64]	@ (800b4a8 <prvInsertTimerInActiveList+0x7c>)
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	3304      	adds	r3, #4
 800b46e:	4619      	mov	r1, r3
 800b470:	4610      	mov	r0, r2
 800b472:	f7fd fa98 	bl	80089a6 <vListInsert>
 800b476:	e012      	b.n	800b49e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	429a      	cmp	r2, r3
 800b47e:	d206      	bcs.n	800b48e <prvInsertTimerInActiveList+0x62>
 800b480:	68ba      	ldr	r2, [r7, #8]
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	429a      	cmp	r2, r3
 800b486:	d302      	bcc.n	800b48e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800b488:	2301      	movs	r3, #1
 800b48a:	617b      	str	r3, [r7, #20]
 800b48c:	e007      	b.n	800b49e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b48e:	4b07      	ldr	r3, [pc, #28]	@ (800b4ac <prvInsertTimerInActiveList+0x80>)
 800b490:	681a      	ldr	r2, [r3, #0]
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	3304      	adds	r3, #4
 800b496:	4619      	mov	r1, r3
 800b498:	4610      	mov	r0, r2
 800b49a:	f7fd fa84 	bl	80089a6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 800b49e:	697b      	ldr	r3, [r7, #20]
    }
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	3718      	adds	r7, #24
 800b4a4:	46bd      	mov	sp, r7
 800b4a6:	bd80      	pop	{r7, pc}
 800b4a8:	20001668 	.word	0x20001668
 800b4ac:	20001664 	.word	0x20001664

0800b4b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08c      	sub	sp, #48	@ 0x30
 800b4b4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b4b6:	e0b2      	b.n	800b61e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	f2c0 80af 	blt.w	800b61e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4c6:	695b      	ldr	r3, [r3, #20]
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d004      	beq.n	800b4d6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ce:	3304      	adds	r3, #4
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7fd faa1 	bl	8008a18 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4d6:	1d3b      	adds	r3, r7, #4
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7ff ff87 	bl	800b3ec <prvSampleTimeNow>
 800b4de:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2b09      	cmp	r3, #9
 800b4e4:	f200 8098 	bhi.w	800b618 <prvProcessReceivedCommands+0x168>
 800b4e8:	a201      	add	r2, pc, #4	@ (adr r2, 800b4f0 <prvProcessReceivedCommands+0x40>)
 800b4ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ee:	bf00      	nop
 800b4f0:	0800b519 	.word	0x0800b519
 800b4f4:	0800b519 	.word	0x0800b519
 800b4f8:	0800b519 	.word	0x0800b519
 800b4fc:	0800b58f 	.word	0x0800b58f
 800b500:	0800b5a3 	.word	0x0800b5a3
 800b504:	0800b5ef 	.word	0x0800b5ef
 800b508:	0800b519 	.word	0x0800b519
 800b50c:	0800b519 	.word	0x0800b519
 800b510:	0800b58f 	.word	0x0800b58f
 800b514:	0800b5a3 	.word	0x0800b5a3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b51a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b51e:	f043 0301 	orr.w	r3, r3, #1
 800b522:	b2da      	uxtb	r2, r3
 800b524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b526:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b52a:	68fa      	ldr	r2, [r7, #12]
 800b52c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b52e:	699b      	ldr	r3, [r3, #24]
 800b530:	18d1      	adds	r1, r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	6a3a      	ldr	r2, [r7, #32]
 800b536:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b538:	f7ff ff78 	bl	800b42c <prvInsertTimerInActiveList>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d06c      	beq.n	800b61c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b548:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b54c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b550:	f003 0304 	and.w	r3, r3, #4
 800b554:	2b00      	cmp	r3, #0
 800b556:	d061      	beq.n	800b61c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	441a      	add	r2, r3
 800b560:	2300      	movs	r3, #0
 800b562:	9300      	str	r3, [sp, #0]
 800b564:	2300      	movs	r3, #0
 800b566:	2100      	movs	r1, #0
 800b568:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b56a:	f7ff fe1d 	bl	800b1a8 <xTimerGenericCommand>
 800b56e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d152      	bne.n	800b61c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800b576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b57a:	f383 8811 	msr	BASEPRI, r3
 800b57e:	f3bf 8f6f 	isb	sy
 800b582:	f3bf 8f4f 	dsb	sy
 800b586:	61bb      	str	r3, [r7, #24]
    }
 800b588:	bf00      	nop
 800b58a:	bf00      	nop
 800b58c:	e7fd      	b.n	800b58a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b590:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b594:	f023 0301 	bic.w	r3, r3, #1
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b5a0:	e03d      	b.n	800b61e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5a8:	f043 0301 	orr.w	r3, r3, #1
 800b5ac:	b2da      	uxtb	r2, r3
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10b      	bne.n	800b5da <prvProcessReceivedCommands+0x12a>
        __asm volatile
 800b5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	617b      	str	r3, [r7, #20]
    }
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop
 800b5d8:	e7fd      	b.n	800b5d6 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b5da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5dc:	699a      	ldr	r2, [r3, #24]
 800b5de:	6a3b      	ldr	r3, [r7, #32]
 800b5e0:	18d1      	adds	r1, r2, r3
 800b5e2:	6a3b      	ldr	r3, [r7, #32]
 800b5e4:	6a3a      	ldr	r2, [r7, #32]
 800b5e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b5e8:	f7ff ff20 	bl	800b42c <prvInsertTimerInActiveList>
                        break;
 800b5ec:	e017      	b.n	800b61e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b5f4:	f003 0302 	and.w	r3, r3, #2
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d103      	bne.n	800b604 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800b5fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b5fe:	f000 fca9 	bl	800bf54 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800b602:	e00c      	b.n	800b61e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b606:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b60a:	f023 0301 	bic.w	r3, r3, #1
 800b60e:	b2da      	uxtb	r2, r3
 800b610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b612:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800b616:	e002      	b.n	800b61e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800b618:	bf00      	nop
 800b61a:	e000      	b.n	800b61e <prvProcessReceivedCommands+0x16e>
                        break;
 800b61c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b61e:	4b08      	ldr	r3, [pc, #32]	@ (800b640 <prvProcessReceivedCommands+0x190>)
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f107 0108 	add.w	r1, r7, #8
 800b626:	2200      	movs	r2, #0
 800b628:	4618      	mov	r0, r3
 800b62a:	f7fd fd01 	bl	8009030 <xQueueReceive>
 800b62e:	4603      	mov	r3, r0
 800b630:	2b00      	cmp	r3, #0
 800b632:	f47f af41 	bne.w	800b4b8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800b636:	bf00      	nop
 800b638:	bf00      	nop
 800b63a:	3728      	adds	r7, #40	@ 0x28
 800b63c:	46bd      	mov	sp, r7
 800b63e:	bd80      	pop	{r7, pc}
 800b640:	2000166c 	.word	0x2000166c

0800b644 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800b644:	b580      	push	{r7, lr}
 800b646:	b088      	sub	sp, #32
 800b648:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b64a:	e049      	b.n	800b6e0 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b64c:	4b2e      	ldr	r3, [pc, #184]	@ (800b708 <prvSwitchTimerLists+0xc4>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b656:	4b2c      	ldr	r3, [pc, #176]	@ (800b708 <prvSwitchTimerLists+0xc4>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	68db      	ldr	r3, [r3, #12]
 800b65c:	68db      	ldr	r3, [r3, #12]
 800b65e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	3304      	adds	r3, #4
 800b664:	4618      	mov	r0, r3
 800b666:	f7fd f9d7 	bl	8008a18 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	6a1b      	ldr	r3, [r3, #32]
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800b678:	f003 0304 	and.w	r3, r3, #4
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d02f      	beq.n	800b6e0 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	699b      	ldr	r3, [r3, #24]
 800b684:	693a      	ldr	r2, [r7, #16]
 800b686:	4413      	add	r3, r2
 800b688:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	429a      	cmp	r2, r3
 800b690:	d90e      	bls.n	800b6b0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b69e:	4b1a      	ldr	r3, [pc, #104]	@ (800b708 <prvSwitchTimerLists+0xc4>)
 800b6a0:	681a      	ldr	r2, [r3, #0]
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3304      	adds	r3, #4
 800b6a6:	4619      	mov	r1, r3
 800b6a8:	4610      	mov	r0, r2
 800b6aa:	f7fd f97c 	bl	80089a6 <vListInsert>
 800b6ae:	e017      	b.n	800b6e0 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	9300      	str	r3, [sp, #0]
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	693a      	ldr	r2, [r7, #16]
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f7ff fd74 	bl	800b1a8 <xTimerGenericCommand>
 800b6c0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d10b      	bne.n	800b6e0 <prvSwitchTimerLists+0x9c>
        __asm volatile
 800b6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6cc:	f383 8811 	msr	BASEPRI, r3
 800b6d0:	f3bf 8f6f 	isb	sy
 800b6d4:	f3bf 8f4f 	dsb	sy
 800b6d8:	603b      	str	r3, [r7, #0]
    }
 800b6da:	bf00      	nop
 800b6dc:	bf00      	nop
 800b6de:	e7fd      	b.n	800b6dc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b6e0:	4b09      	ldr	r3, [pc, #36]	@ (800b708 <prvSwitchTimerLists+0xc4>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d1b0      	bne.n	800b64c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800b6ea:	4b07      	ldr	r3, [pc, #28]	@ (800b708 <prvSwitchTimerLists+0xc4>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 800b6f0:	4b06      	ldr	r3, [pc, #24]	@ (800b70c <prvSwitchTimerLists+0xc8>)
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a04      	ldr	r2, [pc, #16]	@ (800b708 <prvSwitchTimerLists+0xc4>)
 800b6f6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800b6f8:	4a04      	ldr	r2, [pc, #16]	@ (800b70c <prvSwitchTimerLists+0xc8>)
 800b6fa:	697b      	ldr	r3, [r7, #20]
 800b6fc:	6013      	str	r3, [r2, #0]
    }
 800b6fe:	bf00      	nop
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	20001664 	.word	0x20001664
 800b70c:	20001668 	.word	0x20001668

0800b710 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800b710:	b580      	push	{r7, lr}
 800b712:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800b714:	f000 fa0a 	bl	800bb2c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800b718:	4b12      	ldr	r3, [pc, #72]	@ (800b764 <prvCheckForValidListAndQueue+0x54>)
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d11d      	bne.n	800b75c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800b720:	4811      	ldr	r0, [pc, #68]	@ (800b768 <prvCheckForValidListAndQueue+0x58>)
 800b722:	f7fd f8ef 	bl	8008904 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800b726:	4811      	ldr	r0, [pc, #68]	@ (800b76c <prvCheckForValidListAndQueue+0x5c>)
 800b728:	f7fd f8ec 	bl	8008904 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800b72c:	4b10      	ldr	r3, [pc, #64]	@ (800b770 <prvCheckForValidListAndQueue+0x60>)
 800b72e:	4a0e      	ldr	r2, [pc, #56]	@ (800b768 <prvCheckForValidListAndQueue+0x58>)
 800b730:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800b732:	4b10      	ldr	r3, [pc, #64]	@ (800b774 <prvCheckForValidListAndQueue+0x64>)
 800b734:	4a0d      	ldr	r2, [pc, #52]	@ (800b76c <prvCheckForValidListAndQueue+0x5c>)
 800b736:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800b738:	2200      	movs	r2, #0
 800b73a:	210c      	movs	r1, #12
 800b73c:	200a      	movs	r0, #10
 800b73e:	f7fd f9ff 	bl	8008b40 <xQueueGenericCreate>
 800b742:	4603      	mov	r3, r0
 800b744:	4a07      	ldr	r2, [pc, #28]	@ (800b764 <prvCheckForValidListAndQueue+0x54>)
 800b746:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800b748:	4b06      	ldr	r3, [pc, #24]	@ (800b764 <prvCheckForValidListAndQueue+0x54>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d005      	beq.n	800b75c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b750:	4b04      	ldr	r3, [pc, #16]	@ (800b764 <prvCheckForValidListAndQueue+0x54>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4908      	ldr	r1, [pc, #32]	@ (800b778 <prvCheckForValidListAndQueue+0x68>)
 800b756:	4618      	mov	r0, r3
 800b758:	f7fe f8dc 	bl	8009914 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800b75c:	f000 fa18 	bl	800bb90 <vPortExitCritical>
    }
 800b760:	bf00      	nop
 800b762:	bd80      	pop	{r7, pc}
 800b764:	2000166c 	.word	0x2000166c
 800b768:	2000163c 	.word	0x2000163c
 800b76c:	20001650 	.word	0x20001650
 800b770:	20001664 	.word	0x20001664
 800b774:	20001668 	.word	0x20001668
 800b778:	0800f664 	.word	0x0800f664

0800b77c <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d10b      	bne.n	800b7a6 <pvTimerGetTimerID+0x2a>
        __asm volatile
 800b78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b792:	f383 8811 	msr	BASEPRI, r3
 800b796:	f3bf 8f6f 	isb	sy
 800b79a:	f3bf 8f4f 	dsb	sy
 800b79e:	60fb      	str	r3, [r7, #12]
    }
 800b7a0:	bf00      	nop
 800b7a2:	bf00      	nop
 800b7a4:	e7fd      	b.n	800b7a2 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800b7a6:	f000 f9c1 	bl	800bb2c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	69db      	ldr	r3, [r3, #28]
 800b7ae:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 800b7b0:	f000 f9ee 	bl	800bb90 <vPortExitCritical>

        return pvReturn;
 800b7b4:	693b      	ldr	r3, [r7, #16]
    }
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3718      	adds	r7, #24
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	bd80      	pop	{r7, pc}
	...

0800b7c0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b085      	sub	sp, #20
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	3b04      	subs	r3, #4
 800b7d0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b7d8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	3b04      	subs	r3, #4
 800b7de:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	f023 0201 	bic.w	r2, r3, #1
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3b04      	subs	r3, #4
 800b7ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800b7f0:	4a0c      	ldr	r2, [pc, #48]	@ (800b824 <pxPortInitialiseStack+0x64>)
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	3b14      	subs	r3, #20
 800b7fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800b7fc:	687a      	ldr	r2, [r7, #4]
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	3b04      	subs	r3, #4
 800b806:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f06f 0202 	mvn.w	r2, #2
 800b80e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	3b20      	subs	r3, #32
 800b814:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800b816:	68fb      	ldr	r3, [r7, #12]
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3714      	adds	r7, #20
 800b81c:	46bd      	mov	sp, r7
 800b81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b822:	4770      	bx	lr
 800b824:	0800b829 	.word	0x0800b829

0800b828 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b828:	b480      	push	{r7}
 800b82a:	b085      	sub	sp, #20
 800b82c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800b82e:	2300      	movs	r3, #0
 800b830:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800b832:	4b13      	ldr	r3, [pc, #76]	@ (800b880 <prvTaskExitError+0x58>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b83a:	d00b      	beq.n	800b854 <prvTaskExitError+0x2c>
        __asm volatile
 800b83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b840:	f383 8811 	msr	BASEPRI, r3
 800b844:	f3bf 8f6f 	isb	sy
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	60fb      	str	r3, [r7, #12]
    }
 800b84e:	bf00      	nop
 800b850:	bf00      	nop
 800b852:	e7fd      	b.n	800b850 <prvTaskExitError+0x28>
        __asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	60bb      	str	r3, [r7, #8]
    }
 800b866:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800b868:	bf00      	nop
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d0fc      	beq.n	800b86a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800b870:	bf00      	nop
 800b872:	bf00      	nop
 800b874:	3714      	adds	r7, #20
 800b876:	46bd      	mov	sp, r7
 800b878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	20000098 	.word	0x20000098
	...

0800b890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 800b890:	4b07      	ldr	r3, [pc, #28]	@ (800b8b0 <pxCurrentTCBConst2>)
 800b892:	6819      	ldr	r1, [r3, #0]
 800b894:	6808      	ldr	r0, [r1, #0]
 800b896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b89a:	f380 8809 	msr	PSP, r0
 800b89e:	f3bf 8f6f 	isb	sy
 800b8a2:	f04f 0000 	mov.w	r0, #0
 800b8a6:	f380 8811 	msr	BASEPRI, r0
 800b8aa:	4770      	bx	lr
 800b8ac:	f3af 8000 	nop.w

0800b8b0 <pxCurrentTCBConst2>:
 800b8b0:	20001538 	.word	0x20001538
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 800b8b4:	bf00      	nop
 800b8b6:	bf00      	nop

0800b8b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 800b8b8:	4808      	ldr	r0, [pc, #32]	@ (800b8dc <prvPortStartFirstTask+0x24>)
 800b8ba:	6800      	ldr	r0, [r0, #0]
 800b8bc:	6800      	ldr	r0, [r0, #0]
 800b8be:	f380 8808 	msr	MSP, r0
 800b8c2:	f04f 0000 	mov.w	r0, #0
 800b8c6:	f380 8814 	msr	CONTROL, r0
 800b8ca:	b662      	cpsie	i
 800b8cc:	b661      	cpsie	f
 800b8ce:	f3bf 8f4f 	dsb	sy
 800b8d2:	f3bf 8f6f 	isb	sy
 800b8d6:	df00      	svc	0
 800b8d8:	bf00      	nop
 800b8da:	0000      	.short	0x0000
 800b8dc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 800b8e0:	bf00      	nop
 800b8e2:	bf00      	nop

0800b8e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b8ea:	4b47      	ldr	r3, [pc, #284]	@ (800ba08 <xPortStartScheduler+0x124>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a47      	ldr	r2, [pc, #284]	@ (800ba0c <xPortStartScheduler+0x128>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d10b      	bne.n	800b90c <xPortStartScheduler+0x28>
        __asm volatile
 800b8f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f8:	f383 8811 	msr	BASEPRI, r3
 800b8fc:	f3bf 8f6f 	isb	sy
 800b900:	f3bf 8f4f 	dsb	sy
 800b904:	613b      	str	r3, [r7, #16]
    }
 800b906:	bf00      	nop
 800b908:	bf00      	nop
 800b90a:	e7fd      	b.n	800b908 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b90c:	4b3e      	ldr	r3, [pc, #248]	@ (800ba08 <xPortStartScheduler+0x124>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4a3f      	ldr	r2, [pc, #252]	@ (800ba10 <xPortStartScheduler+0x12c>)
 800b912:	4293      	cmp	r3, r2
 800b914:	d10b      	bne.n	800b92e <xPortStartScheduler+0x4a>
        __asm volatile
 800b916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	60fb      	str	r3, [r7, #12]
    }
 800b928:	bf00      	nop
 800b92a:	bf00      	nop
 800b92c:	e7fd      	b.n	800b92a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b92e:	4b39      	ldr	r3, [pc, #228]	@ (800ba14 <xPortStartScheduler+0x130>)
 800b930:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	b2db      	uxtb	r3, r3
 800b938:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	22ff      	movs	r2, #255	@ 0xff
 800b93e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	b2db      	uxtb	r3, r3
 800b946:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b948:	78fb      	ldrb	r3, [r7, #3]
 800b94a:	b2db      	uxtb	r3, r3
 800b94c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b950:	b2da      	uxtb	r2, r3
 800b952:	4b31      	ldr	r3, [pc, #196]	@ (800ba18 <xPortStartScheduler+0x134>)
 800b954:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b956:	4b31      	ldr	r3, [pc, #196]	@ (800ba1c <xPortStartScheduler+0x138>)
 800b958:	2207      	movs	r2, #7
 800b95a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b95c:	e009      	b.n	800b972 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800b95e:	4b2f      	ldr	r3, [pc, #188]	@ (800ba1c <xPortStartScheduler+0x138>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	3b01      	subs	r3, #1
 800b964:	4a2d      	ldr	r2, [pc, #180]	@ (800ba1c <xPortStartScheduler+0x138>)
 800b966:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b968:	78fb      	ldrb	r3, [r7, #3]
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	005b      	lsls	r3, r3, #1
 800b96e:	b2db      	uxtb	r3, r3
 800b970:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b972:	78fb      	ldrb	r3, [r7, #3]
 800b974:	b2db      	uxtb	r3, r3
 800b976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b97a:	2b80      	cmp	r3, #128	@ 0x80
 800b97c:	d0ef      	beq.n	800b95e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b97e:	4b27      	ldr	r3, [pc, #156]	@ (800ba1c <xPortStartScheduler+0x138>)
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	f1c3 0307 	rsb	r3, r3, #7
 800b986:	2b04      	cmp	r3, #4
 800b988:	d00b      	beq.n	800b9a2 <xPortStartScheduler+0xbe>
        __asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	60bb      	str	r3, [r7, #8]
    }
 800b99c:	bf00      	nop
 800b99e:	bf00      	nop
 800b9a0:	e7fd      	b.n	800b99e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b9a2:	4b1e      	ldr	r3, [pc, #120]	@ (800ba1c <xPortStartScheduler+0x138>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	021b      	lsls	r3, r3, #8
 800b9a8:	4a1c      	ldr	r2, [pc, #112]	@ (800ba1c <xPortStartScheduler+0x138>)
 800b9aa:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b9ac:	4b1b      	ldr	r3, [pc, #108]	@ (800ba1c <xPortStartScheduler+0x138>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b9b4:	4a19      	ldr	r2, [pc, #100]	@ (800ba1c <xPortStartScheduler+0x138>)
 800b9b6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800b9c0:	4b17      	ldr	r3, [pc, #92]	@ (800ba20 <xPortStartScheduler+0x13c>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	4a16      	ldr	r2, [pc, #88]	@ (800ba20 <xPortStartScheduler+0x13c>)
 800b9c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b9ca:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800b9cc:	4b14      	ldr	r3, [pc, #80]	@ (800ba20 <xPortStartScheduler+0x13c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4a13      	ldr	r2, [pc, #76]	@ (800ba20 <xPortStartScheduler+0x13c>)
 800b9d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b9d6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800b9d8:	f000 f968 	bl	800bcac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800b9dc:	4b11      	ldr	r3, [pc, #68]	@ (800ba24 <xPortStartScheduler+0x140>)
 800b9de:	2200      	movs	r2, #0
 800b9e0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800b9e2:	f000 f987 	bl	800bcf4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b9e6:	4b10      	ldr	r3, [pc, #64]	@ (800ba28 <xPortStartScheduler+0x144>)
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a0f      	ldr	r2, [pc, #60]	@ (800ba28 <xPortStartScheduler+0x144>)
 800b9ec:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b9f0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800b9f2:	f7ff ff61 	bl	800b8b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800b9f6:	f7fe fb49 	bl	800a08c <vTaskSwitchContext>
    prvTaskExitError();
 800b9fa:	f7ff ff15 	bl	800b828 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800b9fe:	2300      	movs	r3, #0
}
 800ba00:	4618      	mov	r0, r3
 800ba02:	3718      	adds	r7, #24
 800ba04:	46bd      	mov	sp, r7
 800ba06:	bd80      	pop	{r7, pc}
 800ba08:	e000ed00 	.word	0xe000ed00
 800ba0c:	410fc271 	.word	0x410fc271
 800ba10:	410fc270 	.word	0x410fc270
 800ba14:	e000e400 	.word	0xe000e400
 800ba18:	20001678 	.word	0x20001678
 800ba1c:	2000167c 	.word	0x2000167c
 800ba20:	e000ed20 	.word	0xe000ed20
 800ba24:	20000098 	.word	0x20000098
 800ba28:	e000ef34 	.word	0xe000ef34

0800ba2c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800ba2c:	b480      	push	{r7}
 800ba2e:	b087      	sub	sp, #28
 800ba30:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba32:	4b38      	ldr	r3, [pc, #224]	@ (800bb14 <vInitPrioGroupValue+0xe8>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a38      	ldr	r2, [pc, #224]	@ (800bb18 <vInitPrioGroupValue+0xec>)
 800ba38:	4293      	cmp	r3, r2
 800ba3a:	d10b      	bne.n	800ba54 <vInitPrioGroupValue+0x28>
        __asm volatile
 800ba3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba40:	f383 8811 	msr	BASEPRI, r3
 800ba44:	f3bf 8f6f 	isb	sy
 800ba48:	f3bf 8f4f 	dsb	sy
 800ba4c:	613b      	str	r3, [r7, #16]
    }
 800ba4e:	bf00      	nop
 800ba50:	bf00      	nop
 800ba52:	e7fd      	b.n	800ba50 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba54:	4b2f      	ldr	r3, [pc, #188]	@ (800bb14 <vInitPrioGroupValue+0xe8>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a30      	ldr	r2, [pc, #192]	@ (800bb1c <vInitPrioGroupValue+0xf0>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d10b      	bne.n	800ba76 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800ba5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba62:	f383 8811 	msr	BASEPRI, r3
 800ba66:	f3bf 8f6f 	isb	sy
 800ba6a:	f3bf 8f4f 	dsb	sy
 800ba6e:	60fb      	str	r3, [r7, #12]
    }
 800ba70:	bf00      	nop
 800ba72:	bf00      	nop
 800ba74:	e7fd      	b.n	800ba72 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba76:	4b2a      	ldr	r3, [pc, #168]	@ (800bb20 <vInitPrioGroupValue+0xf4>)
 800ba78:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	b2db      	uxtb	r3, r3
 800ba80:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	22ff      	movs	r2, #255	@ 0xff
 800ba86:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ba88:	697b      	ldr	r3, [r7, #20]
 800ba8a:	781b      	ldrb	r3, [r3, #0]
 800ba8c:	b2db      	uxtb	r3, r3
 800ba8e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ba90:	78fb      	ldrb	r3, [r7, #3]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	4b22      	ldr	r3, [pc, #136]	@ (800bb24 <vInitPrioGroupValue+0xf8>)
 800ba9c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ba9e:	4b22      	ldr	r3, [pc, #136]	@ (800bb28 <vInitPrioGroupValue+0xfc>)
 800baa0:	2207      	movs	r2, #7
 800baa2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baa4:	e009      	b.n	800baba <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800baa6:	4b20      	ldr	r3, [pc, #128]	@ (800bb28 <vInitPrioGroupValue+0xfc>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	3b01      	subs	r3, #1
 800baac:	4a1e      	ldr	r2, [pc, #120]	@ (800bb28 <vInitPrioGroupValue+0xfc>)
 800baae:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bab0:	78fb      	ldrb	r3, [r7, #3]
 800bab2:	b2db      	uxtb	r3, r3
 800bab4:	005b      	lsls	r3, r3, #1
 800bab6:	b2db      	uxtb	r3, r3
 800bab8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baba:	78fb      	ldrb	r3, [r7, #3]
 800babc:	b2db      	uxtb	r3, r3
 800babe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bac2:	2b80      	cmp	r3, #128	@ 0x80
 800bac4:	d0ef      	beq.n	800baa6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bac6:	4b18      	ldr	r3, [pc, #96]	@ (800bb28 <vInitPrioGroupValue+0xfc>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f1c3 0307 	rsb	r3, r3, #7
 800bace:	2b04      	cmp	r3, #4
 800bad0:	d00b      	beq.n	800baea <vInitPrioGroupValue+0xbe>
        __asm volatile
 800bad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bad6:	f383 8811 	msr	BASEPRI, r3
 800bada:	f3bf 8f6f 	isb	sy
 800bade:	f3bf 8f4f 	dsb	sy
 800bae2:	60bb      	str	r3, [r7, #8]
    }
 800bae4:	bf00      	nop
 800bae6:	bf00      	nop
 800bae8:	e7fd      	b.n	800bae6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800baea:	4b0f      	ldr	r3, [pc, #60]	@ (800bb28 <vInitPrioGroupValue+0xfc>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	021b      	lsls	r3, r3, #8
 800baf0:	4a0d      	ldr	r2, [pc, #52]	@ (800bb28 <vInitPrioGroupValue+0xfc>)
 800baf2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800baf4:	4b0c      	ldr	r3, [pc, #48]	@ (800bb28 <vInitPrioGroupValue+0xfc>)
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800bafc:	4a0a      	ldr	r2, [pc, #40]	@ (800bb28 <vInitPrioGroupValue+0xfc>)
 800bafe:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800bb08:	bf00      	nop
 800bb0a:	371c      	adds	r7, #28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr
 800bb14:	e000ed00 	.word	0xe000ed00
 800bb18:	410fc271 	.word	0x410fc271
 800bb1c:	410fc270 	.word	0x410fc270
 800bb20:	e000e400 	.word	0xe000e400
 800bb24:	20001678 	.word	0x20001678
 800bb28:	2000167c 	.word	0x2000167c

0800bb2c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b083      	sub	sp, #12
 800bb30:	af00      	add	r7, sp, #0
        __asm volatile
 800bb32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb36:	f383 8811 	msr	BASEPRI, r3
 800bb3a:	f3bf 8f6f 	isb	sy
 800bb3e:	f3bf 8f4f 	dsb	sy
 800bb42:	607b      	str	r3, [r7, #4]
    }
 800bb44:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800bb46:	4b10      	ldr	r3, [pc, #64]	@ (800bb88 <vPortEnterCritical+0x5c>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	3301      	adds	r3, #1
 800bb4c:	4a0e      	ldr	r2, [pc, #56]	@ (800bb88 <vPortEnterCritical+0x5c>)
 800bb4e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800bb50:	4b0d      	ldr	r3, [pc, #52]	@ (800bb88 <vPortEnterCritical+0x5c>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	2b01      	cmp	r3, #1
 800bb56:	d110      	bne.n	800bb7a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bb58:	4b0c      	ldr	r3, [pc, #48]	@ (800bb8c <vPortEnterCritical+0x60>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	b2db      	uxtb	r3, r3
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d00b      	beq.n	800bb7a <vPortEnterCritical+0x4e>
        __asm volatile
 800bb62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	603b      	str	r3, [r7, #0]
    }
 800bb74:	bf00      	nop
 800bb76:	bf00      	nop
 800bb78:	e7fd      	b.n	800bb76 <vPortEnterCritical+0x4a>
    }
}
 800bb7a:	bf00      	nop
 800bb7c:	370c      	adds	r7, #12
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	20000098 	.word	0x20000098
 800bb8c:	e000ed04 	.word	0xe000ed04

0800bb90 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800bb96:	4b12      	ldr	r3, [pc, #72]	@ (800bbe0 <vPortExitCritical+0x50>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d10b      	bne.n	800bbb6 <vPortExitCritical+0x26>
        __asm volatile
 800bb9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba2:	f383 8811 	msr	BASEPRI, r3
 800bba6:	f3bf 8f6f 	isb	sy
 800bbaa:	f3bf 8f4f 	dsb	sy
 800bbae:	607b      	str	r3, [r7, #4]
    }
 800bbb0:	bf00      	nop
 800bbb2:	bf00      	nop
 800bbb4:	e7fd      	b.n	800bbb2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800bbb6:	4b0a      	ldr	r3, [pc, #40]	@ (800bbe0 <vPortExitCritical+0x50>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3b01      	subs	r3, #1
 800bbbc:	4a08      	ldr	r2, [pc, #32]	@ (800bbe0 <vPortExitCritical+0x50>)
 800bbbe:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800bbc0:	4b07      	ldr	r3, [pc, #28]	@ (800bbe0 <vPortExitCritical+0x50>)
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d105      	bne.n	800bbd4 <vPortExitCritical+0x44>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	603b      	str	r3, [r7, #0]
        __asm volatile
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	f383 8811 	msr	BASEPRI, r3
    }
 800bbd2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	20000098 	.word	0x20000098
	...

0800bbf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 800bbf0:	f3ef 8009 	mrs	r0, PSP
 800bbf4:	f3bf 8f6f 	isb	sy
 800bbf8:	4b15      	ldr	r3, [pc, #84]	@ (800bc50 <pxCurrentTCBConst>)
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	f01e 0f10 	tst.w	lr, #16
 800bc00:	bf08      	it	eq
 800bc02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc0a:	6010      	str	r0, [r2, #0]
 800bc0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800bc14:	f380 8811 	msr	BASEPRI, r0
 800bc18:	f3bf 8f4f 	dsb	sy
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f7fe fa34 	bl	800a08c <vTaskSwitchContext>
 800bc24:	f04f 0000 	mov.w	r0, #0
 800bc28:	f380 8811 	msr	BASEPRI, r0
 800bc2c:	bc09      	pop	{r0, r3}
 800bc2e:	6819      	ldr	r1, [r3, #0]
 800bc30:	6808      	ldr	r0, [r1, #0]
 800bc32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc36:	f01e 0f10 	tst.w	lr, #16
 800bc3a:	bf08      	it	eq
 800bc3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc40:	f380 8809 	msr	PSP, r0
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	f3af 8000 	nop.w

0800bc50 <pxCurrentTCBConst>:
 800bc50:	20001538 	.word	0x20001538
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 800bc54:	bf00      	nop
 800bc56:	bf00      	nop

0800bc58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b082      	sub	sp, #8
 800bc5c:	af00      	add	r7, sp, #0
        __asm volatile
 800bc5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	607b      	str	r3, [r7, #4]
    }
 800bc70:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 800bc72:	f001 fd89 	bl	800d788 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 800bc76:	f7fe f94b 	bl	8009f10 <xTaskIncrementTick>
 800bc7a:	4603      	mov	r3, r0
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d006      	beq.n	800bc8e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 800bc80:	f001 fde0 	bl	800d844 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bc84:	4b08      	ldr	r3, [pc, #32]	@ (800bca8 <SysTick_Handler+0x50>)
 800bc86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc8a:	601a      	str	r2, [r3, #0]
 800bc8c:	e001      	b.n	800bc92 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800bc8e:	f001 fdbd 	bl	800d80c <SEGGER_SYSVIEW_RecordExitISR>
 800bc92:	2300      	movs	r3, #0
 800bc94:	603b      	str	r3, [r7, #0]
        __asm volatile
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	f383 8811 	msr	BASEPRI, r3
    }
 800bc9c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800bc9e:	bf00      	nop
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	e000ed04 	.word	0xe000ed04

0800bcac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800bcac:	b480      	push	{r7}
 800bcae:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bcb0:	4b0b      	ldr	r3, [pc, #44]	@ (800bce0 <vPortSetupTimerInterrupt+0x34>)
 800bcb2:	2200      	movs	r2, #0
 800bcb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcb6:	4b0b      	ldr	r3, [pc, #44]	@ (800bce4 <vPortSetupTimerInterrupt+0x38>)
 800bcb8:	2200      	movs	r2, #0
 800bcba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcbc:	4b0a      	ldr	r3, [pc, #40]	@ (800bce8 <vPortSetupTimerInterrupt+0x3c>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a0a      	ldr	r2, [pc, #40]	@ (800bcec <vPortSetupTimerInterrupt+0x40>)
 800bcc2:	fba2 2303 	umull	r2, r3, r2, r3
 800bcc6:	099b      	lsrs	r3, r3, #6
 800bcc8:	4a09      	ldr	r2, [pc, #36]	@ (800bcf0 <vPortSetupTimerInterrupt+0x44>)
 800bcca:	3b01      	subs	r3, #1
 800bccc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bcce:	4b04      	ldr	r3, [pc, #16]	@ (800bce0 <vPortSetupTimerInterrupt+0x34>)
 800bcd0:	2207      	movs	r2, #7
 800bcd2:	601a      	str	r2, [r3, #0]
}
 800bcd4:	bf00      	nop
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcdc:	4770      	bx	lr
 800bcde:	bf00      	nop
 800bce0:	e000e010 	.word	0xe000e010
 800bce4:	e000e018 	.word	0xe000e018
 800bce8:	20000088 	.word	0x20000088
 800bcec:	10624dd3 	.word	0x10624dd3
 800bcf0:	e000e014 	.word	0xe000e014

0800bcf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 800bcf4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800bd04 <vPortEnableVFP+0x10>
 800bcf8:	6801      	ldr	r1, [r0, #0]
 800bcfa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800bcfe:	6001      	str	r1, [r0, #0]
 800bd00:	4770      	bx	lr
 800bd02:	0000      	.short	0x0000
 800bd04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800bd08:	bf00      	nop
 800bd0a:	bf00      	nop

0800bd0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 800bd12:	f3ef 8305 	mrs	r3, IPSR
 800bd16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	2b0f      	cmp	r3, #15
 800bd1c:	d915      	bls.n	800bd4a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd1e:	4a18      	ldr	r2, [pc, #96]	@ (800bd80 <vPortValidateInterruptPriority+0x74>)
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	4413      	add	r3, r2
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd28:	4b16      	ldr	r3, [pc, #88]	@ (800bd84 <vPortValidateInterruptPriority+0x78>)
 800bd2a:	781b      	ldrb	r3, [r3, #0]
 800bd2c:	7afa      	ldrb	r2, [r7, #11]
 800bd2e:	429a      	cmp	r2, r3
 800bd30:	d20b      	bcs.n	800bd4a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 800bd32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd36:	f383 8811 	msr	BASEPRI, r3
 800bd3a:	f3bf 8f6f 	isb	sy
 800bd3e:	f3bf 8f4f 	dsb	sy
 800bd42:	607b      	str	r3, [r7, #4]
    }
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop
 800bd48:	e7fd      	b.n	800bd46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd4a:	4b0f      	ldr	r3, [pc, #60]	@ (800bd88 <vPortValidateInterruptPriority+0x7c>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800bd52:	4b0e      	ldr	r3, [pc, #56]	@ (800bd8c <vPortValidateInterruptPriority+0x80>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	429a      	cmp	r2, r3
 800bd58:	d90b      	bls.n	800bd72 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800bd5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd5e:	f383 8811 	msr	BASEPRI, r3
 800bd62:	f3bf 8f6f 	isb	sy
 800bd66:	f3bf 8f4f 	dsb	sy
 800bd6a:	603b      	str	r3, [r7, #0]
    }
 800bd6c:	bf00      	nop
 800bd6e:	bf00      	nop
 800bd70:	e7fd      	b.n	800bd6e <vPortValidateInterruptPriority+0x62>
    }
 800bd72:	bf00      	nop
 800bd74:	3714      	adds	r7, #20
 800bd76:	46bd      	mov	sp, r7
 800bd78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7c:	4770      	bx	lr
 800bd7e:	bf00      	nop
 800bd80:	e000e3f0 	.word	0xe000e3f0
 800bd84:	20001678 	.word	0x20001678
 800bd88:	e000ed0c 	.word	0xe000ed0c
 800bd8c:	2000167c 	.word	0x2000167c

0800bd90 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b08a      	sub	sp, #40	@ 0x28
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800bd9c:	f7fd ffe6 	bl	8009d6c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800bda0:	4b66      	ldr	r3, [pc, #408]	@ (800bf3c <pvPortMalloc+0x1ac>)
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d101      	bne.n	800bdac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 800bda8:	f000 f938 	bl	800c01c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bdac:	4b64      	ldr	r3, [pc, #400]	@ (800bf40 <pvPortMalloc+0x1b0>)
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	4013      	ands	r3, r2
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	f040 80a9 	bne.w	800bf0c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d02e      	beq.n	800be1e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800bdc0:	2208      	movs	r2, #8
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800bdc6:	687a      	ldr	r2, [r7, #4]
 800bdc8:	429a      	cmp	r2, r3
 800bdca:	d228      	bcs.n	800be1e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800bdcc:	2208      	movs	r2, #8
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f003 0307 	and.w	r3, r3, #7
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d022      	beq.n	800be24 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f023 0307 	bic.w	r3, r3, #7
 800bde4:	3308      	adds	r3, #8
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d215      	bcs.n	800be18 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f023 0307 	bic.w	r3, r3, #7
 800bdf2:	3308      	adds	r3, #8
 800bdf4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f003 0307 	and.w	r3, r3, #7
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d011      	beq.n	800be24 <pvPortMalloc+0x94>
        __asm volatile
 800be00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be04:	f383 8811 	msr	BASEPRI, r3
 800be08:	f3bf 8f6f 	isb	sy
 800be0c:	f3bf 8f4f 	dsb	sy
 800be10:	617b      	str	r3, [r7, #20]
    }
 800be12:	bf00      	nop
 800be14:	bf00      	nop
 800be16:	e7fd      	b.n	800be14 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 800be18:	2300      	movs	r3, #0
 800be1a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be1c:	e002      	b.n	800be24 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800be1e:	2300      	movs	r3, #0
 800be20:	607b      	str	r3, [r7, #4]
 800be22:	e000      	b.n	800be26 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be24:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d06f      	beq.n	800bf0c <pvPortMalloc+0x17c>
 800be2c:	4b45      	ldr	r3, [pc, #276]	@ (800bf44 <pvPortMalloc+0x1b4>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	687a      	ldr	r2, [r7, #4]
 800be32:	429a      	cmp	r2, r3
 800be34:	d86a      	bhi.n	800bf0c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800be36:	4b44      	ldr	r3, [pc, #272]	@ (800bf48 <pvPortMalloc+0x1b8>)
 800be38:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800be3a:	4b43      	ldr	r3, [pc, #268]	@ (800bf48 <pvPortMalloc+0x1b8>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be40:	e004      	b.n	800be4c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 800be42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be44:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800be46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be48:	681b      	ldr	r3, [r3, #0]
 800be4a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be4e:	685b      	ldr	r3, [r3, #4]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	429a      	cmp	r2, r3
 800be54:	d903      	bls.n	800be5e <pvPortMalloc+0xce>
 800be56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d1f1      	bne.n	800be42 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800be5e:	4b37      	ldr	r3, [pc, #220]	@ (800bf3c <pvPortMalloc+0x1ac>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be64:	429a      	cmp	r2, r3
 800be66:	d051      	beq.n	800bf0c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be68:	6a3b      	ldr	r3, [r7, #32]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2208      	movs	r2, #8
 800be6e:	4413      	add	r3, r2
 800be70:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be74:	681a      	ldr	r2, [r3, #0]
 800be76:	6a3b      	ldr	r3, [r7, #32]
 800be78:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be7c:	685a      	ldr	r2, [r3, #4]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	1ad2      	subs	r2, r2, r3
 800be82:	2308      	movs	r3, #8
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	429a      	cmp	r2, r3
 800be88:	d920      	bls.n	800becc <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4413      	add	r3, r2
 800be90:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	f003 0307 	and.w	r3, r3, #7
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d00b      	beq.n	800beb4 <pvPortMalloc+0x124>
        __asm volatile
 800be9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bea0:	f383 8811 	msr	BASEPRI, r3
 800bea4:	f3bf 8f6f 	isb	sy
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	613b      	str	r3, [r7, #16]
    }
 800beae:	bf00      	nop
 800beb0:	bf00      	nop
 800beb2:	e7fd      	b.n	800beb0 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800beb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beb6:	685a      	ldr	r2, [r3, #4]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	1ad2      	subs	r2, r2, r3
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bec6:	69b8      	ldr	r0, [r7, #24]
 800bec8:	f000 f90a 	bl	800c0e0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800becc:	4b1d      	ldr	r3, [pc, #116]	@ (800bf44 <pvPortMalloc+0x1b4>)
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	4a1b      	ldr	r2, [pc, #108]	@ (800bf44 <pvPortMalloc+0x1b4>)
 800bed8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800beda:	4b1a      	ldr	r3, [pc, #104]	@ (800bf44 <pvPortMalloc+0x1b4>)
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	4b1b      	ldr	r3, [pc, #108]	@ (800bf4c <pvPortMalloc+0x1bc>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d203      	bcs.n	800beee <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bee6:	4b17      	ldr	r3, [pc, #92]	@ (800bf44 <pvPortMalloc+0x1b4>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a18      	ldr	r2, [pc, #96]	@ (800bf4c <pvPortMalloc+0x1bc>)
 800beec:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800beee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bef0:	685a      	ldr	r2, [r3, #4]
 800bef2:	4b13      	ldr	r3, [pc, #76]	@ (800bf40 <pvPortMalloc+0x1b0>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	431a      	orrs	r2, r3
 800bef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800befc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800befe:	2200      	movs	r2, #0
 800bf00:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800bf02:	4b13      	ldr	r3, [pc, #76]	@ (800bf50 <pvPortMalloc+0x1c0>)
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	3301      	adds	r3, #1
 800bf08:	4a11      	ldr	r2, [pc, #68]	@ (800bf50 <pvPortMalloc+0x1c0>)
 800bf0a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800bf0c:	f7fd ff3c 	bl	8009d88 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	f003 0307 	and.w	r3, r3, #7
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d00b      	beq.n	800bf32 <pvPortMalloc+0x1a2>
        __asm volatile
 800bf1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf1e:	f383 8811 	msr	BASEPRI, r3
 800bf22:	f3bf 8f6f 	isb	sy
 800bf26:	f3bf 8f4f 	dsb	sy
 800bf2a:	60fb      	str	r3, [r7, #12]
    }
 800bf2c:	bf00      	nop
 800bf2e:	bf00      	nop
 800bf30:	e7fd      	b.n	800bf2e <pvPortMalloc+0x19e>
    return pvReturn;
 800bf32:	69fb      	ldr	r3, [r7, #28]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3728      	adds	r7, #40	@ 0x28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	2001a688 	.word	0x2001a688
 800bf40:	2001a69c 	.word	0x2001a69c
 800bf44:	2001a68c 	.word	0x2001a68c
 800bf48:	2001a680 	.word	0x2001a680
 800bf4c:	2001a690 	.word	0x2001a690
 800bf50:	2001a694 	.word	0x2001a694

0800bf54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800bf54:	b580      	push	{r7, lr}
 800bf56:	b086      	sub	sp, #24
 800bf58:	af00      	add	r7, sp, #0
 800bf5a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d04f      	beq.n	800c006 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800bf66:	2308      	movs	r3, #8
 800bf68:	425b      	negs	r3, r3
 800bf6a:	697a      	ldr	r2, [r7, #20]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800bf70:	697b      	ldr	r3, [r7, #20]
 800bf72:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf74:	693b      	ldr	r3, [r7, #16]
 800bf76:	685a      	ldr	r2, [r3, #4]
 800bf78:	4b25      	ldr	r3, [pc, #148]	@ (800c010 <vPortFree+0xbc>)
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d10b      	bne.n	800bf9a <vPortFree+0x46>
        __asm volatile
 800bf82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf86:	f383 8811 	msr	BASEPRI, r3
 800bf8a:	f3bf 8f6f 	isb	sy
 800bf8e:	f3bf 8f4f 	dsb	sy
 800bf92:	60fb      	str	r3, [r7, #12]
    }
 800bf94:	bf00      	nop
 800bf96:	bf00      	nop
 800bf98:	e7fd      	b.n	800bf96 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00b      	beq.n	800bfba <vPortFree+0x66>
        __asm volatile
 800bfa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	60bb      	str	r3, [r7, #8]
    }
 800bfb4:	bf00      	nop
 800bfb6:	bf00      	nop
 800bfb8:	e7fd      	b.n	800bfb6 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	4b14      	ldr	r3, [pc, #80]	@ (800c010 <vPortFree+0xbc>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	4013      	ands	r3, r2
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d01e      	beq.n	800c006 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d11a      	bne.n	800c006 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bfd0:	693b      	ldr	r3, [r7, #16]
 800bfd2:	685a      	ldr	r2, [r3, #4]
 800bfd4:	4b0e      	ldr	r3, [pc, #56]	@ (800c010 <vPortFree+0xbc>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	43db      	mvns	r3, r3
 800bfda:	401a      	ands	r2, r3
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 800bfe0:	f7fd fec4 	bl	8009d6c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800bfe4:	693b      	ldr	r3, [r7, #16]
 800bfe6:	685a      	ldr	r2, [r3, #4]
 800bfe8:	4b0a      	ldr	r3, [pc, #40]	@ (800c014 <vPortFree+0xc0>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4413      	add	r3, r2
 800bfee:	4a09      	ldr	r2, [pc, #36]	@ (800c014 <vPortFree+0xc0>)
 800bff0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bff2:	6938      	ldr	r0, [r7, #16]
 800bff4:	f000 f874 	bl	800c0e0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800bff8:	4b07      	ldr	r3, [pc, #28]	@ (800c018 <vPortFree+0xc4>)
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	3301      	adds	r3, #1
 800bffe:	4a06      	ldr	r2, [pc, #24]	@ (800c018 <vPortFree+0xc4>)
 800c000:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800c002:	f7fd fec1 	bl	8009d88 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800c006:	bf00      	nop
 800c008:	3718      	adds	r7, #24
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}
 800c00e:	bf00      	nop
 800c010:	2001a69c 	.word	0x2001a69c
 800c014:	2001a68c 	.word	0x2001a68c
 800c018:	2001a698 	.word	0x2001a698

0800c01c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800c01c:	b480      	push	{r7}
 800c01e:	b085      	sub	sp, #20
 800c020:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c022:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 800c026:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800c028:	4b27      	ldr	r3, [pc, #156]	@ (800c0c8 <prvHeapInit+0xac>)
 800c02a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	f003 0307 	and.w	r3, r3, #7
 800c032:	2b00      	cmp	r3, #0
 800c034:	d00c      	beq.n	800c050 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	3307      	adds	r3, #7
 800c03a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f023 0307 	bic.w	r3, r3, #7
 800c042:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c044:	68ba      	ldr	r2, [r7, #8]
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	1ad3      	subs	r3, r2, r3
 800c04a:	4a1f      	ldr	r2, [pc, #124]	@ (800c0c8 <prvHeapInit+0xac>)
 800c04c:	4413      	add	r3, r2
 800c04e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c054:	4a1d      	ldr	r2, [pc, #116]	@ (800c0cc <prvHeapInit+0xb0>)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800c05a:	4b1c      	ldr	r3, [pc, #112]	@ (800c0cc <prvHeapInit+0xb0>)
 800c05c:	2200      	movs	r2, #0
 800c05e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	4413      	add	r3, r2
 800c066:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800c068:	2208      	movs	r2, #8
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	1a9b      	subs	r3, r3, r2
 800c06e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c070:	68fb      	ldr	r3, [r7, #12]
 800c072:	f023 0307 	bic.w	r3, r3, #7
 800c076:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	4a15      	ldr	r2, [pc, #84]	@ (800c0d0 <prvHeapInit+0xb4>)
 800c07c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800c07e:	4b14      	ldr	r3, [pc, #80]	@ (800c0d0 <prvHeapInit+0xb4>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	2200      	movs	r2, #0
 800c084:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800c086:	4b12      	ldr	r3, [pc, #72]	@ (800c0d0 <prvHeapInit+0xb4>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	1ad2      	subs	r2, r2, r3
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c09c:	4b0c      	ldr	r3, [pc, #48]	@ (800c0d0 <prvHeapInit+0xb4>)
 800c09e:	681a      	ldr	r2, [r3, #0]
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	4a0a      	ldr	r2, [pc, #40]	@ (800c0d4 <prvHeapInit+0xb8>)
 800c0aa:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	4a09      	ldr	r2, [pc, #36]	@ (800c0d8 <prvHeapInit+0xbc>)
 800c0b2:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0b4:	4b09      	ldr	r3, [pc, #36]	@ (800c0dc <prvHeapInit+0xc0>)
 800c0b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c0ba:	601a      	str	r2, [r3, #0]
}
 800c0bc:	bf00      	nop
 800c0be:	3714      	adds	r7, #20
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr
 800c0c8:	20001680 	.word	0x20001680
 800c0cc:	2001a680 	.word	0x2001a680
 800c0d0:	2001a688 	.word	0x2001a688
 800c0d4:	2001a690 	.word	0x2001a690
 800c0d8:	2001a68c 	.word	0x2001a68c
 800c0dc:	2001a69c 	.word	0x2001a69c

0800c0e0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800c0e0:	b480      	push	{r7}
 800c0e2:	b085      	sub	sp, #20
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0e8:	4b28      	ldr	r3, [pc, #160]	@ (800c18c <prvInsertBlockIntoFreeList+0xac>)
 800c0ea:	60fb      	str	r3, [r7, #12]
 800c0ec:	e002      	b.n	800c0f4 <prvInsertBlockIntoFreeList+0x14>
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	60fb      	str	r3, [r7, #12]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	687a      	ldr	r2, [r7, #4]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d8f7      	bhi.n	800c0ee <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	68ba      	ldr	r2, [r7, #8]
 800c108:	4413      	add	r3, r2
 800c10a:	687a      	ldr	r2, [r7, #4]
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d108      	bne.n	800c122 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	685a      	ldr	r2, [r3, #4]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	685b      	ldr	r3, [r3, #4]
 800c118:	441a      	add	r2, r3
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	68ba      	ldr	r2, [r7, #8]
 800c12c:	441a      	add	r2, r3
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	429a      	cmp	r2, r3
 800c134:	d118      	bne.n	800c168 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	4b15      	ldr	r3, [pc, #84]	@ (800c190 <prvInsertBlockIntoFreeList+0xb0>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d00d      	beq.n	800c15e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	685b      	ldr	r3, [r3, #4]
 800c14c:	441a      	add	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	601a      	str	r2, [r3, #0]
 800c15c:	e008      	b.n	800c170 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c15e:	4b0c      	ldr	r3, [pc, #48]	@ (800c190 <prvInsertBlockIntoFreeList+0xb0>)
 800c160:	681a      	ldr	r2, [r3, #0]
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	601a      	str	r2, [r3, #0]
 800c166:	e003      	b.n	800c170 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681a      	ldr	r2, [r3, #0]
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800c170:	68fa      	ldr	r2, [r7, #12]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	429a      	cmp	r2, r3
 800c176:	d002      	beq.n	800c17e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800c17e:	bf00      	nop
 800c180:	3714      	adds	r7, #20
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr
 800c18a:	bf00      	nop
 800c18c:	2001a680 	.word	0x2001a680
 800c190:	2001a688 	.word	0x2001a688

0800c194 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800c194:	b580      	push	{r7, lr}
 800c196:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800c198:	4803      	ldr	r0, [pc, #12]	@ (800c1a8 <_cbSendSystemDesc+0x14>)
 800c19a:	f001 fa9f 	bl	800d6dc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800c19e:	4803      	ldr	r0, [pc, #12]	@ (800c1ac <_cbSendSystemDesc+0x18>)
 800c1a0:	f001 fa9c 	bl	800d6dc <SEGGER_SYSVIEW_SendSysDesc>
}
 800c1a4:	bf00      	nop
 800c1a6:	bd80      	pop	{r7, pc}
 800c1a8:	0800f66c 	.word	0x0800f66c
 800c1ac:	0800f6ac 	.word	0x0800f6ac

0800c1b0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800c1b4:	4b06      	ldr	r3, [pc, #24]	@ (800c1d0 <SEGGER_SYSVIEW_Conf+0x20>)
 800c1b6:	6818      	ldr	r0, [r3, #0]
 800c1b8:	4b05      	ldr	r3, [pc, #20]	@ (800c1d0 <SEGGER_SYSVIEW_Conf+0x20>)
 800c1ba:	6819      	ldr	r1, [r3, #0]
 800c1bc:	4b05      	ldr	r3, [pc, #20]	@ (800c1d4 <SEGGER_SYSVIEW_Conf+0x24>)
 800c1be:	4a06      	ldr	r2, [pc, #24]	@ (800c1d8 <SEGGER_SYSVIEW_Conf+0x28>)
 800c1c0:	f000 fd5c 	bl	800cc7c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800c1c4:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800c1c8:	f000 fd9c 	bl	800cd04 <SEGGER_SYSVIEW_SetRAMBase>
}
 800c1cc:	bf00      	nop
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	20000088 	.word	0x20000088
 800c1d4:	0800c195 	.word	0x0800c195
 800c1d8:	0800f748 	.word	0x0800f748

0800c1dc <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800c1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c1de:	b085      	sub	sp, #20
 800c1e0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	607b      	str	r3, [r7, #4]
 800c1e6:	e033      	b.n	800c250 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800c1e8:	491e      	ldr	r1, [pc, #120]	@ (800c264 <_cbSendTaskList+0x88>)
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	4613      	mov	r3, r2
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	440b      	add	r3, r1
 800c1f6:	6818      	ldr	r0, [r3, #0]
 800c1f8:	491a      	ldr	r1, [pc, #104]	@ (800c264 <_cbSendTaskList+0x88>)
 800c1fa:	687a      	ldr	r2, [r7, #4]
 800c1fc:	4613      	mov	r3, r2
 800c1fe:	009b      	lsls	r3, r3, #2
 800c200:	4413      	add	r3, r2
 800c202:	009b      	lsls	r3, r3, #2
 800c204:	440b      	add	r3, r1
 800c206:	3304      	adds	r3, #4
 800c208:	6819      	ldr	r1, [r3, #0]
 800c20a:	4c16      	ldr	r4, [pc, #88]	@ (800c264 <_cbSendTaskList+0x88>)
 800c20c:	687a      	ldr	r2, [r7, #4]
 800c20e:	4613      	mov	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	4413      	add	r3, r2
 800c214:	009b      	lsls	r3, r3, #2
 800c216:	4423      	add	r3, r4
 800c218:	3308      	adds	r3, #8
 800c21a:	681c      	ldr	r4, [r3, #0]
 800c21c:	4d11      	ldr	r5, [pc, #68]	@ (800c264 <_cbSendTaskList+0x88>)
 800c21e:	687a      	ldr	r2, [r7, #4]
 800c220:	4613      	mov	r3, r2
 800c222:	009b      	lsls	r3, r3, #2
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	442b      	add	r3, r5
 800c22a:	330c      	adds	r3, #12
 800c22c:	681d      	ldr	r5, [r3, #0]
 800c22e:	4e0d      	ldr	r6, [pc, #52]	@ (800c264 <_cbSendTaskList+0x88>)
 800c230:	687a      	ldr	r2, [r7, #4]
 800c232:	4613      	mov	r3, r2
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	4413      	add	r3, r2
 800c238:	009b      	lsls	r3, r3, #2
 800c23a:	4433      	add	r3, r6
 800c23c:	3310      	adds	r3, #16
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	9300      	str	r3, [sp, #0]
 800c242:	462b      	mov	r3, r5
 800c244:	4622      	mov	r2, r4
 800c246:	f000 f8bd 	bl	800c3c4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	3301      	adds	r3, #1
 800c24e:	607b      	str	r3, [r7, #4]
 800c250:	4b05      	ldr	r3, [pc, #20]	@ (800c268 <_cbSendTaskList+0x8c>)
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	687a      	ldr	r2, [r7, #4]
 800c256:	429a      	cmp	r2, r3
 800c258:	d3c6      	bcc.n	800c1e8 <_cbSendTaskList+0xc>
  }
}
 800c25a:	bf00      	nop
 800c25c:	bf00      	nop
 800c25e:	370c      	adds	r7, #12
 800c260:	46bd      	mov	sp, r7
 800c262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c264:	2001a6a0 	.word	0x2001a6a0
 800c268:	2001a740 	.word	0x2001a740

0800c26c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800c26c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c270:	b082      	sub	sp, #8
 800c272:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800c274:	f7fd fe3a 	bl	8009eec <xTaskGetTickCountFromISR>
 800c278:	4603      	mov	r3, r0
 800c27a:	2200      	movs	r2, #0
 800c27c:	469a      	mov	sl, r3
 800c27e:	4693      	mov	fp, r2
 800c280:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800c284:	e9d7 0100 	ldrd	r0, r1, [r7]
 800c288:	4602      	mov	r2, r0
 800c28a:	460b      	mov	r3, r1
 800c28c:	f04f 0a00 	mov.w	sl, #0
 800c290:	f04f 0b00 	mov.w	fp, #0
 800c294:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800c298:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800c29c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800c2a0:	4652      	mov	r2, sl
 800c2a2:	465b      	mov	r3, fp
 800c2a4:	1a14      	subs	r4, r2, r0
 800c2a6:	eb63 0501 	sbc.w	r5, r3, r1
 800c2aa:	f04f 0200 	mov.w	r2, #0
 800c2ae:	f04f 0300 	mov.w	r3, #0
 800c2b2:	00ab      	lsls	r3, r5, #2
 800c2b4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800c2b8:	00a2      	lsls	r2, r4, #2
 800c2ba:	4614      	mov	r4, r2
 800c2bc:	461d      	mov	r5, r3
 800c2be:	eb14 0800 	adds.w	r8, r4, r0
 800c2c2:	eb45 0901 	adc.w	r9, r5, r1
 800c2c6:	f04f 0200 	mov.w	r2, #0
 800c2ca:	f04f 0300 	mov.w	r3, #0
 800c2ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c2d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c2d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c2da:	4690      	mov	r8, r2
 800c2dc:	4699      	mov	r9, r3
 800c2de:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800c2e2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800c2e6:	4610      	mov	r0, r2
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800c2f4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800c2f4:	b580      	push	{r7, lr}
 800c2f6:	b086      	sub	sp, #24
 800c2f8:	af02      	add	r7, sp, #8
 800c2fa:	60f8      	str	r0, [r7, #12]
 800c2fc:	60b9      	str	r1, [r7, #8]
 800c2fe:	607a      	str	r2, [r7, #4]
 800c300:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800c302:	2205      	movs	r2, #5
 800c304:	492b      	ldr	r1, [pc, #172]	@ (800c3b4 <SYSVIEW_AddTask+0xc0>)
 800c306:	68b8      	ldr	r0, [r7, #8]
 800c308:	f001 fd6c 	bl	800dde4 <memcmp>
 800c30c:	4603      	mov	r3, r0
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d04b      	beq.n	800c3aa <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800c312:	4b29      	ldr	r3, [pc, #164]	@ (800c3b8 <SYSVIEW_AddTask+0xc4>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	2b07      	cmp	r3, #7
 800c318:	d903      	bls.n	800c322 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800c31a:	4828      	ldr	r0, [pc, #160]	@ (800c3bc <SYSVIEW_AddTask+0xc8>)
 800c31c:	f001 fce6 	bl	800dcec <SEGGER_SYSVIEW_Warn>
    return;
 800c320:	e044      	b.n	800c3ac <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800c322:	4b25      	ldr	r3, [pc, #148]	@ (800c3b8 <SYSVIEW_AddTask+0xc4>)
 800c324:	681a      	ldr	r2, [r3, #0]
 800c326:	4926      	ldr	r1, [pc, #152]	@ (800c3c0 <SYSVIEW_AddTask+0xcc>)
 800c328:	4613      	mov	r3, r2
 800c32a:	009b      	lsls	r3, r3, #2
 800c32c:	4413      	add	r3, r2
 800c32e:	009b      	lsls	r3, r3, #2
 800c330:	440b      	add	r3, r1
 800c332:	68fa      	ldr	r2, [r7, #12]
 800c334:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800c336:	4b20      	ldr	r3, [pc, #128]	@ (800c3b8 <SYSVIEW_AddTask+0xc4>)
 800c338:	681a      	ldr	r2, [r3, #0]
 800c33a:	4921      	ldr	r1, [pc, #132]	@ (800c3c0 <SYSVIEW_AddTask+0xcc>)
 800c33c:	4613      	mov	r3, r2
 800c33e:	009b      	lsls	r3, r3, #2
 800c340:	4413      	add	r3, r2
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	440b      	add	r3, r1
 800c346:	3304      	adds	r3, #4
 800c348:	68ba      	ldr	r2, [r7, #8]
 800c34a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800c34c:	4b1a      	ldr	r3, [pc, #104]	@ (800c3b8 <SYSVIEW_AddTask+0xc4>)
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	491b      	ldr	r1, [pc, #108]	@ (800c3c0 <SYSVIEW_AddTask+0xcc>)
 800c352:	4613      	mov	r3, r2
 800c354:	009b      	lsls	r3, r3, #2
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	440b      	add	r3, r1
 800c35c:	3308      	adds	r3, #8
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800c362:	4b15      	ldr	r3, [pc, #84]	@ (800c3b8 <SYSVIEW_AddTask+0xc4>)
 800c364:	681a      	ldr	r2, [r3, #0]
 800c366:	4916      	ldr	r1, [pc, #88]	@ (800c3c0 <SYSVIEW_AddTask+0xcc>)
 800c368:	4613      	mov	r3, r2
 800c36a:	009b      	lsls	r3, r3, #2
 800c36c:	4413      	add	r3, r2
 800c36e:	009b      	lsls	r3, r3, #2
 800c370:	440b      	add	r3, r1
 800c372:	330c      	adds	r3, #12
 800c374:	683a      	ldr	r2, [r7, #0]
 800c376:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800c378:	4b0f      	ldr	r3, [pc, #60]	@ (800c3b8 <SYSVIEW_AddTask+0xc4>)
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	4910      	ldr	r1, [pc, #64]	@ (800c3c0 <SYSVIEW_AddTask+0xcc>)
 800c37e:	4613      	mov	r3, r2
 800c380:	009b      	lsls	r3, r3, #2
 800c382:	4413      	add	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	440b      	add	r3, r1
 800c388:	3310      	adds	r3, #16
 800c38a:	69ba      	ldr	r2, [r7, #24]
 800c38c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800c38e:	4b0a      	ldr	r3, [pc, #40]	@ (800c3b8 <SYSVIEW_AddTask+0xc4>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3301      	adds	r3, #1
 800c394:	4a08      	ldr	r2, [pc, #32]	@ (800c3b8 <SYSVIEW_AddTask+0xc4>)
 800c396:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800c398:	69bb      	ldr	r3, [r7, #24]
 800c39a:	9300      	str	r3, [sp, #0]
 800c39c:	683b      	ldr	r3, [r7, #0]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	68b9      	ldr	r1, [r7, #8]
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f000 f80e 	bl	800c3c4 <SYSVIEW_SendTaskInfo>
 800c3a8:	e000      	b.n	800c3ac <SYSVIEW_AddTask+0xb8>
    return;
 800c3aa:	bf00      	nop

}
 800c3ac:	3710      	adds	r7, #16
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	0800f6bc 	.word	0x0800f6bc
 800c3b8:	2001a740 	.word	0x2001a740
 800c3bc:	0800f6c4 	.word	0x0800f6c4
 800c3c0:	2001a6a0 	.word	0x2001a6a0

0800c3c4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b08a      	sub	sp, #40	@ 0x28
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	60f8      	str	r0, [r7, #12]
 800c3cc:	60b9      	str	r1, [r7, #8]
 800c3ce:	607a      	str	r2, [r7, #4]
 800c3d0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800c3d2:	f107 0314 	add.w	r3, r7, #20
 800c3d6:	2214      	movs	r2, #20
 800c3d8:	2100      	movs	r1, #0
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f001 fd12 	bl	800de04 <memset>
  TaskInfo.TaskID     = TaskID;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800c3f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f2:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800c3f4:	f107 0314 	add.w	r3, r7, #20
 800c3f8:	4618      	mov	r0, r3
 800c3fa:	f001 f877 	bl	800d4ec <SEGGER_SYSVIEW_SendTaskInfo>
}
 800c3fe:	bf00      	nop
 800c400:	3728      	adds	r7, #40	@ 0x28
 800c402:	46bd      	mov	sp, r7
 800c404:	bd80      	pop	{r7, pc}
	...

0800c408 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800c408:	b580      	push	{r7, lr}
 800c40a:	b082      	sub	sp, #8
 800c40c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800c40e:	4b26      	ldr	r3, [pc, #152]	@ (800c4a8 <_DoInit+0xa0>)
 800c410:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800c412:	22a8      	movs	r2, #168	@ 0xa8
 800c414:	2100      	movs	r1, #0
 800c416:	6838      	ldr	r0, [r7, #0]
 800c418:	f001 fcf4 	bl	800de04 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2203      	movs	r2, #3
 800c420:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	2203      	movs	r2, #3
 800c426:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	4a20      	ldr	r2, [pc, #128]	@ (800c4ac <_DoInit+0xa4>)
 800c42c:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	4a1f      	ldr	r2, [pc, #124]	@ (800c4b0 <_DoInit+0xa8>)
 800c432:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800c434:	683b      	ldr	r3, [r7, #0]
 800c436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c43a:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800c43c:	683b      	ldr	r3, [r7, #0]
 800c43e:	2200      	movs	r2, #0
 800c440:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	2200      	movs	r2, #0
 800c446:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	2200      	movs	r2, #0
 800c44c:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	4a16      	ldr	r2, [pc, #88]	@ (800c4ac <_DoInit+0xa4>)
 800c452:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	4a17      	ldr	r2, [pc, #92]	@ (800c4b4 <_DoInit+0xac>)
 800c458:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	2210      	movs	r2, #16
 800c45e:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800c460:	683b      	ldr	r3, [r7, #0]
 800c462:	2200      	movs	r2, #0
 800c464:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	2200      	movs	r2, #0
 800c46a:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2200      	movs	r2, #0
 800c470:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800c472:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800c476:	2300      	movs	r3, #0
 800c478:	607b      	str	r3, [r7, #4]
 800c47a:	e00c      	b.n	800c496 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f1c3 030f 	rsb	r3, r3, #15
 800c482:	4a0d      	ldr	r2, [pc, #52]	@ (800c4b8 <_DoInit+0xb0>)
 800c484:	5cd1      	ldrb	r1, [r2, r3]
 800c486:	683a      	ldr	r2, [r7, #0]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	4413      	add	r3, r2
 800c48c:	460a      	mov	r2, r1
 800c48e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	3301      	adds	r3, #1
 800c494:	607b      	str	r3, [r7, #4]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b0f      	cmp	r3, #15
 800c49a:	d9ef      	bls.n	800c47c <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800c49c:	f3bf 8f5f 	dmb	sy
}
 800c4a0:	bf00      	nop
 800c4a2:	3708      	adds	r7, #8
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}
 800c4a8:	2001a744 	.word	0x2001a744
 800c4ac:	0800f714 	.word	0x0800f714
 800c4b0:	2001a7ec 	.word	0x2001a7ec
 800c4b4:	2001abec 	.word	0x2001abec
 800c4b8:	0800f750 	.word	0x0800f750

0800c4bc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b08c      	sub	sp, #48	@ 0x30
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	60f8      	str	r0, [r7, #12]
 800c4c4:	60b9      	str	r1, [r7, #8]
 800c4c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800c4c8:	4b3e      	ldr	r3, [pc, #248]	@ (800c5c4 <SEGGER_RTT_ReadNoLock+0x108>)
 800c4ca:	623b      	str	r3, [r7, #32]
 800c4cc:	6a3b      	ldr	r3, [r7, #32]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	2b53      	cmp	r3, #83	@ 0x53
 800c4d4:	d001      	beq.n	800c4da <SEGGER_RTT_ReadNoLock+0x1e>
 800c4d6:	f7ff ff97 	bl	800c408 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c4da:	68fa      	ldr	r2, [r7, #12]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	005b      	lsls	r3, r3, #1
 800c4e0:	4413      	add	r3, r2
 800c4e2:	00db      	lsls	r3, r3, #3
 800c4e4:	3360      	adds	r3, #96	@ 0x60
 800c4e6:	4a37      	ldr	r2, [pc, #220]	@ (800c5c4 <SEGGER_RTT_ReadNoLock+0x108>)
 800c4e8:	4413      	add	r3, r2
 800c4ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800c4f0:	69fb      	ldr	r3, [r7, #28]
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800c4f6:	69fb      	ldr	r3, [r7, #28]
 800c4f8:	68db      	ldr	r3, [r3, #12]
 800c4fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800c500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c502:	69bb      	ldr	r3, [r7, #24]
 800c504:	429a      	cmp	r2, r3
 800c506:	d92b      	bls.n	800c560 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	689a      	ldr	r2, [r3, #8]
 800c50c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c50e:	1ad3      	subs	r3, r2, r3
 800c510:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c512:	697a      	ldr	r2, [r7, #20]
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	4293      	cmp	r3, r2
 800c518:	bf28      	it	cs
 800c51a:	4613      	movcs	r3, r2
 800c51c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c51e:	69fb      	ldr	r3, [r7, #28]
 800c520:	685a      	ldr	r2, [r3, #4]
 800c522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c524:	4413      	add	r3, r2
 800c526:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c528:	697a      	ldr	r2, [r7, #20]
 800c52a:	6939      	ldr	r1, [r7, #16]
 800c52c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c52e:	f001 fc9d 	bl	800de6c <memcpy>
    NumBytesRead += NumBytesRem;
 800c532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	4413      	add	r3, r2
 800c538:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800c53a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	4413      	add	r3, r2
 800c540:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c54a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	4413      	add	r3, r2
 800c550:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	689b      	ldr	r3, [r3, #8]
 800c556:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c558:	429a      	cmp	r2, r3
 800c55a:	d101      	bne.n	800c560 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800c55c:	2300      	movs	r3, #0
 800c55e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800c560:	69ba      	ldr	r2, [r7, #24]
 800c562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c564:	1ad3      	subs	r3, r2, r3
 800c566:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800c568:	697a      	ldr	r2, [r7, #20]
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	4293      	cmp	r3, r2
 800c56e:	bf28      	it	cs
 800c570:	4613      	movcs	r3, r2
 800c572:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800c574:	697b      	ldr	r3, [r7, #20]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d019      	beq.n	800c5ae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	685a      	ldr	r2, [r3, #4]
 800c57e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c580:	4413      	add	r3, r2
 800c582:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800c584:	697a      	ldr	r2, [r7, #20]
 800c586:	6939      	ldr	r1, [r7, #16]
 800c588:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c58a:	f001 fc6f 	bl	800de6c <memcpy>
    NumBytesRead += NumBytesRem;
 800c58e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c590:	697b      	ldr	r3, [r7, #20]
 800c592:	4413      	add	r3, r2
 800c594:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800c596:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c598:	697b      	ldr	r3, [r7, #20]
 800c59a:	4413      	add	r3, r2
 800c59c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800c59e:	687a      	ldr	r2, [r7, #4]
 800c5a0:	697b      	ldr	r3, [r7, #20]
 800c5a2:	1ad3      	subs	r3, r2, r3
 800c5a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800c5a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5a8:	697b      	ldr	r3, [r7, #20]
 800c5aa:	4413      	add	r3, r2
 800c5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800c5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d002      	beq.n	800c5ba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c5b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800c5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3730      	adds	r7, #48	@ 0x30
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	2001a744 	.word	0x2001a744

0800c5c8 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b088      	sub	sp, #32
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	60f8      	str	r0, [r7, #12]
 800c5d0:	60b9      	str	r1, [r7, #8]
 800c5d2:	607a      	str	r2, [r7, #4]
 800c5d4:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800c5d6:	4b3d      	ldr	r3, [pc, #244]	@ (800c6cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c5d8:	61bb      	str	r3, [r7, #24]
 800c5da:	69bb      	ldr	r3, [r7, #24]
 800c5dc:	781b      	ldrb	r3, [r3, #0]
 800c5de:	b2db      	uxtb	r3, r3
 800c5e0:	2b53      	cmp	r3, #83	@ 0x53
 800c5e2:	d001      	beq.n	800c5e8 <SEGGER_RTT_AllocUpBuffer+0x20>
 800c5e4:	f7ff ff10 	bl	800c408 <_DoInit>
  SEGGER_RTT_LOCK();
 800c5e8:	f3ef 8311 	mrs	r3, BASEPRI
 800c5ec:	f04f 0120 	mov.w	r1, #32
 800c5f0:	f381 8811 	msr	BASEPRI, r1
 800c5f4:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c5f6:	4b35      	ldr	r3, [pc, #212]	@ (800c6cc <SEGGER_RTT_AllocUpBuffer+0x104>)
 800c5f8:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800c5fe:	6939      	ldr	r1, [r7, #16]
 800c600:	69fb      	ldr	r3, [r7, #28]
 800c602:	1c5a      	adds	r2, r3, #1
 800c604:	4613      	mov	r3, r2
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	4413      	add	r3, r2
 800c60a:	00db      	lsls	r3, r3, #3
 800c60c:	440b      	add	r3, r1
 800c60e:	3304      	adds	r3, #4
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d008      	beq.n	800c628 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	3301      	adds	r3, #1
 800c61a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800c61c:	693b      	ldr	r3, [r7, #16]
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	69fa      	ldr	r2, [r7, #28]
 800c622:	429a      	cmp	r2, r3
 800c624:	dbeb      	blt.n	800c5fe <SEGGER_RTT_AllocUpBuffer+0x36>
 800c626:	e000      	b.n	800c62a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800c628:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	691b      	ldr	r3, [r3, #16]
 800c62e:	69fa      	ldr	r2, [r7, #28]
 800c630:	429a      	cmp	r2, r3
 800c632:	da3f      	bge.n	800c6b4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800c634:	6939      	ldr	r1, [r7, #16]
 800c636:	69fb      	ldr	r3, [r7, #28]
 800c638:	1c5a      	adds	r2, r3, #1
 800c63a:	4613      	mov	r3, r2
 800c63c:	005b      	lsls	r3, r3, #1
 800c63e:	4413      	add	r3, r2
 800c640:	00db      	lsls	r3, r3, #3
 800c642:	440b      	add	r3, r1
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800c648:	6939      	ldr	r1, [r7, #16]
 800c64a:	69fb      	ldr	r3, [r7, #28]
 800c64c:	1c5a      	adds	r2, r3, #1
 800c64e:	4613      	mov	r3, r2
 800c650:	005b      	lsls	r3, r3, #1
 800c652:	4413      	add	r3, r2
 800c654:	00db      	lsls	r3, r3, #3
 800c656:	440b      	add	r3, r1
 800c658:	3304      	adds	r3, #4
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800c65e:	6939      	ldr	r1, [r7, #16]
 800c660:	69fa      	ldr	r2, [r7, #28]
 800c662:	4613      	mov	r3, r2
 800c664:	005b      	lsls	r3, r3, #1
 800c666:	4413      	add	r3, r2
 800c668:	00db      	lsls	r3, r3, #3
 800c66a:	440b      	add	r3, r1
 800c66c:	3320      	adds	r3, #32
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800c672:	6939      	ldr	r1, [r7, #16]
 800c674:	69fa      	ldr	r2, [r7, #28]
 800c676:	4613      	mov	r3, r2
 800c678:	005b      	lsls	r3, r3, #1
 800c67a:	4413      	add	r3, r2
 800c67c:	00db      	lsls	r3, r3, #3
 800c67e:	440b      	add	r3, r1
 800c680:	3328      	adds	r3, #40	@ 0x28
 800c682:	2200      	movs	r2, #0
 800c684:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800c686:	6939      	ldr	r1, [r7, #16]
 800c688:	69fa      	ldr	r2, [r7, #28]
 800c68a:	4613      	mov	r3, r2
 800c68c:	005b      	lsls	r3, r3, #1
 800c68e:	4413      	add	r3, r2
 800c690:	00db      	lsls	r3, r3, #3
 800c692:	440b      	add	r3, r1
 800c694:	3324      	adds	r3, #36	@ 0x24
 800c696:	2200      	movs	r2, #0
 800c698:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800c69a:	6939      	ldr	r1, [r7, #16]
 800c69c:	69fa      	ldr	r2, [r7, #28]
 800c69e:	4613      	mov	r3, r2
 800c6a0:	005b      	lsls	r3, r3, #1
 800c6a2:	4413      	add	r3, r2
 800c6a4:	00db      	lsls	r3, r3, #3
 800c6a6:	440b      	add	r3, r1
 800c6a8:	332c      	adds	r3, #44	@ 0x2c
 800c6aa:	683a      	ldr	r2, [r7, #0]
 800c6ac:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c6ae:	f3bf 8f5f 	dmb	sy
 800c6b2:	e002      	b.n	800c6ba <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800c6b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c6b8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800c6c0:	69fb      	ldr	r3, [r7, #28]
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3720      	adds	r7, #32
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}
 800c6ca:	bf00      	nop
 800c6cc:	2001a744 	.word	0x2001a744

0800c6d0 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b08a      	sub	sp, #40	@ 0x28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
 800c6dc:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800c6de:	4b21      	ldr	r3, [pc, #132]	@ (800c764 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c6e0:	623b      	str	r3, [r7, #32]
 800c6e2:	6a3b      	ldr	r3, [r7, #32]
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	b2db      	uxtb	r3, r3
 800c6e8:	2b53      	cmp	r3, #83	@ 0x53
 800c6ea:	d001      	beq.n	800c6f0 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800c6ec:	f7ff fe8c 	bl	800c408 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800c6f0:	4b1c      	ldr	r3, [pc, #112]	@ (800c764 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800c6f2:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2b02      	cmp	r3, #2
 800c6f8:	d82c      	bhi.n	800c754 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800c6fa:	f3ef 8311 	mrs	r3, BASEPRI
 800c6fe:	f04f 0120 	mov.w	r1, #32
 800c702:	f381 8811 	msr	BASEPRI, r1
 800c706:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800c708:	68fa      	ldr	r2, [r7, #12]
 800c70a:	4613      	mov	r3, r2
 800c70c:	005b      	lsls	r3, r3, #1
 800c70e:	4413      	add	r3, r2
 800c710:	00db      	lsls	r3, r3, #3
 800c712:	3360      	adds	r3, #96	@ 0x60
 800c714:	69fa      	ldr	r2, [r7, #28]
 800c716:	4413      	add	r3, r2
 800c718:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00e      	beq.n	800c73e <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	687a      	ldr	r2, [r7, #4]
 800c72a:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800c72c:	697b      	ldr	r3, [r7, #20]
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	2200      	movs	r2, #0
 800c736:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800c738:	697b      	ldr	r3, [r7, #20]
 800c73a:	2200      	movs	r2, #0
 800c73c:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c742:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800c744:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800c748:	69bb      	ldr	r3, [r7, #24]
 800c74a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800c74e:	2300      	movs	r3, #0
 800c750:	627b      	str	r3, [r7, #36]	@ 0x24
 800c752:	e002      	b.n	800c75a <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800c754:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c758:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800c75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3728      	adds	r7, #40	@ 0x28
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}
 800c764:	2001a744 	.word	0x2001a744

0800c768 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800c768:	b480      	push	{r7}
 800c76a:	b087      	sub	sp, #28
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	60f8      	str	r0, [r7, #12]
 800c770:	60b9      	str	r1, [r7, #8]
 800c772:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	1c5a      	adds	r2, r3, #1
 800c77c:	60fa      	str	r2, [r7, #12]
 800c77e:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2b80      	cmp	r3, #128	@ 0x80
 800c784:	d90a      	bls.n	800c79c <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800c786:	2380      	movs	r3, #128	@ 0x80
 800c788:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800c78a:	e007      	b.n	800c79c <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800c78c:	68ba      	ldr	r2, [r7, #8]
 800c78e:	1c53      	adds	r3, r2, #1
 800c790:	60bb      	str	r3, [r7, #8]
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	1c59      	adds	r1, r3, #1
 800c796:	60f9      	str	r1, [r7, #12]
 800c798:	7812      	ldrb	r2, [r2, #0]
 800c79a:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	1e5a      	subs	r2, r3, #1
 800c7a0:	607a      	str	r2, [r7, #4]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d003      	beq.n	800c7ae <_EncodeStr+0x46>
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	781b      	ldrb	r3, [r3, #0]
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1ee      	bne.n	800c78c <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800c7ae:	68ba      	ldr	r2, [r7, #8]
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	1ad3      	subs	r3, r2, r3
 800c7b4:	b2da      	uxtb	r2, r3
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	371c      	adds	r7, #28
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c6:	4770      	bx	lr

0800c7c8 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	3307      	adds	r3, #7
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	370c      	adds	r7, #12
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7de:	4770      	bx	lr

0800c7e0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b082      	sub	sp, #8
 800c7e4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c7e6:	4b34      	ldr	r3, [pc, #208]	@ (800c8b8 <_HandleIncomingPacket+0xd8>)
 800c7e8:	7e1b      	ldrb	r3, [r3, #24]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	1cfb      	adds	r3, r7, #3
 800c7ee:	2201      	movs	r2, #1
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	f7ff fe63 	bl	800c4bc <SEGGER_RTT_ReadNoLock>
 800c7f6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d057      	beq.n	800c8ae <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800c7fe:	78fb      	ldrb	r3, [r7, #3]
 800c800:	2b80      	cmp	r3, #128	@ 0x80
 800c802:	d031      	beq.n	800c868 <_HandleIncomingPacket+0x88>
 800c804:	2b80      	cmp	r3, #128	@ 0x80
 800c806:	dc40      	bgt.n	800c88a <_HandleIncomingPacket+0xaa>
 800c808:	2b07      	cmp	r3, #7
 800c80a:	dc15      	bgt.n	800c838 <_HandleIncomingPacket+0x58>
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	dd3c      	ble.n	800c88a <_HandleIncomingPacket+0xaa>
 800c810:	3b01      	subs	r3, #1
 800c812:	2b06      	cmp	r3, #6
 800c814:	d839      	bhi.n	800c88a <_HandleIncomingPacket+0xaa>
 800c816:	a201      	add	r2, pc, #4	@ (adr r2, 800c81c <_HandleIncomingPacket+0x3c>)
 800c818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c81c:	0800c83f 	.word	0x0800c83f
 800c820:	0800c845 	.word	0x0800c845
 800c824:	0800c84b 	.word	0x0800c84b
 800c828:	0800c851 	.word	0x0800c851
 800c82c:	0800c857 	.word	0x0800c857
 800c830:	0800c85d 	.word	0x0800c85d
 800c834:	0800c863 	.word	0x0800c863
 800c838:	2b7f      	cmp	r3, #127	@ 0x7f
 800c83a:	d033      	beq.n	800c8a4 <_HandleIncomingPacket+0xc4>
 800c83c:	e025      	b.n	800c88a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800c83e:	f000 fcdb 	bl	800d1f8 <SEGGER_SYSVIEW_Start>
      break;
 800c842:	e034      	b.n	800c8ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800c844:	f000 fd92 	bl	800d36c <SEGGER_SYSVIEW_Stop>
      break;
 800c848:	e031      	b.n	800c8ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800c84a:	f000 ff6b 	bl	800d724 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800c84e:	e02e      	b.n	800c8ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800c850:	f000 ff30 	bl	800d6b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800c854:	e02b      	b.n	800c8ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800c856:	f000 fdaf 	bl	800d3b8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800c85a:	e028      	b.n	800c8ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800c85c:	f001 fa08 	bl	800dc70 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800c860:	e025      	b.n	800c8ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800c862:	f001 f9e7 	bl	800dc34 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800c866:	e022      	b.n	800c8ae <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c868:	4b13      	ldr	r3, [pc, #76]	@ (800c8b8 <_HandleIncomingPacket+0xd8>)
 800c86a:	7e1b      	ldrb	r3, [r3, #24]
 800c86c:	4618      	mov	r0, r3
 800c86e:	1cfb      	adds	r3, r7, #3
 800c870:	2201      	movs	r2, #1
 800c872:	4619      	mov	r1, r3
 800c874:	f7ff fe22 	bl	800c4bc <SEGGER_RTT_ReadNoLock>
 800c878:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d013      	beq.n	800c8a8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800c880:	78fb      	ldrb	r3, [r7, #3]
 800c882:	4618      	mov	r0, r3
 800c884:	f001 f94c 	bl	800db20 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800c888:	e00e      	b.n	800c8a8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800c88a:	78fb      	ldrb	r3, [r7, #3]
 800c88c:	b25b      	sxtb	r3, r3
 800c88e:	2b00      	cmp	r3, #0
 800c890:	da0c      	bge.n	800c8ac <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800c892:	4b09      	ldr	r3, [pc, #36]	@ (800c8b8 <_HandleIncomingPacket+0xd8>)
 800c894:	7e1b      	ldrb	r3, [r3, #24]
 800c896:	4618      	mov	r0, r3
 800c898:	1cfb      	adds	r3, r7, #3
 800c89a:	2201      	movs	r2, #1
 800c89c:	4619      	mov	r1, r3
 800c89e:	f7ff fe0d 	bl	800c4bc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800c8a2:	e003      	b.n	800c8ac <_HandleIncomingPacket+0xcc>
      break;
 800c8a4:	bf00      	nop
 800c8a6:	e002      	b.n	800c8ae <_HandleIncomingPacket+0xce>
      break;
 800c8a8:	bf00      	nop
 800c8aa:	e000      	b.n	800c8ae <_HandleIncomingPacket+0xce>
      break;
 800c8ac:	bf00      	nop
    }
  }
}
 800c8ae:	bf00      	nop
 800c8b0:	3708      	adds	r7, #8
 800c8b2:	46bd      	mov	sp, r7
 800c8b4:	bd80      	pop	{r7, pc}
 800c8b6:	bf00      	nop
 800c8b8:	2001bc04 	.word	0x2001bc04

0800c8bc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800c8bc:	b580      	push	{r7, lr}
 800c8be:	b08c      	sub	sp, #48	@ 0x30
 800c8c0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800c8c6:	1d3b      	adds	r3, r7, #4
 800c8c8:	3301      	adds	r3, #1
 800c8ca:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8d0:	4b31      	ldr	r3, [pc, #196]	@ (800c998 <_TrySendOverflowPacket+0xdc>)
 800c8d2:	695b      	ldr	r3, [r3, #20]
 800c8d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8d6:	e00b      	b.n	800c8f0 <_TrySendOverflowPacket+0x34>
 800c8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8da:	b2da      	uxtb	r2, r3
 800c8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8de:	1c59      	adds	r1, r3, #1
 800c8e0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800c8e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c8e6:	b2d2      	uxtb	r2, r2
 800c8e8:	701a      	strb	r2, [r3, #0]
 800c8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ec:	09db      	lsrs	r3, r3, #7
 800c8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f2:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8f4:	d8f0      	bhi.n	800c8d8 <_TrySendOverflowPacket+0x1c>
 800c8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f8:	1c5a      	adds	r2, r3, #1
 800c8fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c8fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c8fe:	b2d2      	uxtb	r2, r2
 800c900:	701a      	strb	r2, [r3, #0]
 800c902:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c904:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800c906:	4b25      	ldr	r3, [pc, #148]	@ (800c99c <_TrySendOverflowPacket+0xe0>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800c90c:	4b22      	ldr	r3, [pc, #136]	@ (800c998 <_TrySendOverflowPacket+0xdc>)
 800c90e:	68db      	ldr	r3, [r3, #12]
 800c910:	69ba      	ldr	r2, [r7, #24]
 800c912:	1ad3      	subs	r3, r2, r3
 800c914:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	627b      	str	r3, [r7, #36]	@ 0x24
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	623b      	str	r3, [r7, #32]
 800c91e:	e00b      	b.n	800c938 <_TrySendOverflowPacket+0x7c>
 800c920:	6a3b      	ldr	r3, [r7, #32]
 800c922:	b2da      	uxtb	r2, r3
 800c924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c926:	1c59      	adds	r1, r3, #1
 800c928:	6279      	str	r1, [r7, #36]	@ 0x24
 800c92a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800c92e:	b2d2      	uxtb	r2, r2
 800c930:	701a      	strb	r2, [r3, #0]
 800c932:	6a3b      	ldr	r3, [r7, #32]
 800c934:	09db      	lsrs	r3, r3, #7
 800c936:	623b      	str	r3, [r7, #32]
 800c938:	6a3b      	ldr	r3, [r7, #32]
 800c93a:	2b7f      	cmp	r3, #127	@ 0x7f
 800c93c:	d8f0      	bhi.n	800c920 <_TrySendOverflowPacket+0x64>
 800c93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c940:	1c5a      	adds	r2, r3, #1
 800c942:	627a      	str	r2, [r7, #36]	@ 0x24
 800c944:	6a3a      	ldr	r2, [r7, #32]
 800c946:	b2d2      	uxtb	r2, r2
 800c948:	701a      	strb	r2, [r3, #0]
 800c94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c94c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800c94e:	4b12      	ldr	r3, [pc, #72]	@ (800c998 <_TrySendOverflowPacket+0xdc>)
 800c950:	785b      	ldrb	r3, [r3, #1]
 800c952:	4618      	mov	r0, r3
 800c954:	1d3b      	adds	r3, r7, #4
 800c956:	69fa      	ldr	r2, [r7, #28]
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	461a      	mov	r2, r3
 800c95c:	1d3b      	adds	r3, r7, #4
 800c95e:	4619      	mov	r1, r3
 800c960:	f7f3 fc36 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800c964:	4603      	mov	r3, r0
 800c966:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d009      	beq.n	800c982 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800c96e:	4a0a      	ldr	r2, [pc, #40]	@ (800c998 <_TrySendOverflowPacket+0xdc>)
 800c970:	69bb      	ldr	r3, [r7, #24]
 800c972:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800c974:	4b08      	ldr	r3, [pc, #32]	@ (800c998 <_TrySendOverflowPacket+0xdc>)
 800c976:	781b      	ldrb	r3, [r3, #0]
 800c978:	3b01      	subs	r3, #1
 800c97a:	b2da      	uxtb	r2, r3
 800c97c:	4b06      	ldr	r3, [pc, #24]	@ (800c998 <_TrySendOverflowPacket+0xdc>)
 800c97e:	701a      	strb	r2, [r3, #0]
 800c980:	e004      	b.n	800c98c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800c982:	4b05      	ldr	r3, [pc, #20]	@ (800c998 <_TrySendOverflowPacket+0xdc>)
 800c984:	695b      	ldr	r3, [r3, #20]
 800c986:	3301      	adds	r3, #1
 800c988:	4a03      	ldr	r2, [pc, #12]	@ (800c998 <_TrySendOverflowPacket+0xdc>)
 800c98a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800c98c:	693b      	ldr	r3, [r7, #16]
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3730      	adds	r7, #48	@ 0x30
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}
 800c996:	bf00      	nop
 800c998:	2001bc04 	.word	0x2001bc04
 800c99c:	e0001004 	.word	0xe0001004

0800c9a0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b08a      	sub	sp, #40	@ 0x28
 800c9a4:	af00      	add	r7, sp, #0
 800c9a6:	60f8      	str	r0, [r7, #12]
 800c9a8:	60b9      	str	r1, [r7, #8]
 800c9aa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800c9ac:	4b98      	ldr	r3, [pc, #608]	@ (800cc10 <_SendPacket+0x270>)
 800c9ae:	781b      	ldrb	r3, [r3, #0]
 800c9b0:	2b01      	cmp	r3, #1
 800c9b2:	d010      	beq.n	800c9d6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800c9b4:	4b96      	ldr	r3, [pc, #600]	@ (800cc10 <_SendPacket+0x270>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	f000 812d 	beq.w	800cc18 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800c9be:	4b94      	ldr	r3, [pc, #592]	@ (800cc10 <_SendPacket+0x270>)
 800c9c0:	781b      	ldrb	r3, [r3, #0]
 800c9c2:	2b02      	cmp	r3, #2
 800c9c4:	d109      	bne.n	800c9da <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800c9c6:	f7ff ff79 	bl	800c8bc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800c9ca:	4b91      	ldr	r3, [pc, #580]	@ (800cc10 <_SendPacket+0x270>)
 800c9cc:	781b      	ldrb	r3, [r3, #0]
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	f040 8124 	bne.w	800cc1c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800c9d4:	e001      	b.n	800c9da <_SendPacket+0x3a>
    goto Send;
 800c9d6:	bf00      	nop
 800c9d8:	e000      	b.n	800c9dc <_SendPacket+0x3c>
Send:
 800c9da:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	2b1f      	cmp	r3, #31
 800c9e0:	d809      	bhi.n	800c9f6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800c9e2:	4b8b      	ldr	r3, [pc, #556]	@ (800cc10 <_SendPacket+0x270>)
 800c9e4:	69da      	ldr	r2, [r3, #28]
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ec:	f003 0301 	and.w	r3, r3, #1
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	f040 8115 	bne.w	800cc20 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b17      	cmp	r3, #23
 800c9fa:	d807      	bhi.n	800ca0c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	3b01      	subs	r3, #1
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	b2da      	uxtb	r2, r3
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	701a      	strb	r2, [r3, #0]
 800ca0a:	e0c4      	b.n	800cb96 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	1ad3      	subs	r3, r2, r3
 800ca12:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca18:	d912      	bls.n	800ca40 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800ca1a:	69fb      	ldr	r3, [r7, #28]
 800ca1c:	09da      	lsrs	r2, r3, #7
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	3b01      	subs	r3, #1
 800ca22:	60fb      	str	r3, [r7, #12]
 800ca24:	b2d2      	uxtb	r2, r2
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800ca2a:	69fb      	ldr	r3, [r7, #28]
 800ca2c:	b2db      	uxtb	r3, r3
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	3a01      	subs	r2, #1
 800ca32:	60fa      	str	r2, [r7, #12]
 800ca34:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ca38:	b2da      	uxtb	r2, r3
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	e006      	b.n	800ca4e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	3b01      	subs	r3, #1
 800ca44:	60fb      	str	r3, [r7, #12]
 800ca46:	69fb      	ldr	r3, [r7, #28]
 800ca48:	b2da      	uxtb	r2, r3
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	2b7e      	cmp	r3, #126	@ 0x7e
 800ca52:	d807      	bhi.n	800ca64 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	3b01      	subs	r3, #1
 800ca58:	60fb      	str	r3, [r7, #12]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	b2da      	uxtb	r2, r3
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	701a      	strb	r2, [r3, #0]
 800ca62:	e098      	b.n	800cb96 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ca6a:	d212      	bcs.n	800ca92 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	09da      	lsrs	r2, r3, #7
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	3b01      	subs	r3, #1
 800ca74:	60fb      	str	r3, [r7, #12]
 800ca76:	b2d2      	uxtb	r2, r2
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	68fa      	ldr	r2, [r7, #12]
 800ca82:	3a01      	subs	r2, #1
 800ca84:	60fa      	str	r2, [r7, #12]
 800ca86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ca8a:	b2da      	uxtb	r2, r3
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	701a      	strb	r2, [r3, #0]
 800ca90:	e081      	b.n	800cb96 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ca98:	d21d      	bcs.n	800cad6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	0b9a      	lsrs	r2, r3, #14
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	60fb      	str	r3, [r7, #12]
 800caa4:	b2d2      	uxtb	r2, r2
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	09db      	lsrs	r3, r3, #7
 800caae:	b2db      	uxtb	r3, r3
 800cab0:	68fa      	ldr	r2, [r7, #12]
 800cab2:	3a01      	subs	r2, #1
 800cab4:	60fa      	str	r2, [r7, #12]
 800cab6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800caba:	b2da      	uxtb	r2, r3
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	b2db      	uxtb	r3, r3
 800cac4:	68fa      	ldr	r2, [r7, #12]
 800cac6:	3a01      	subs	r2, #1
 800cac8:	60fa      	str	r2, [r7, #12]
 800caca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cace:	b2da      	uxtb	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	701a      	strb	r2, [r3, #0]
 800cad4:	e05f      	b.n	800cb96 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cadc:	d228      	bcs.n	800cb30 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	0d5a      	lsrs	r2, r3, #21
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	3b01      	subs	r3, #1
 800cae6:	60fb      	str	r3, [r7, #12]
 800cae8:	b2d2      	uxtb	r2, r2
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	0b9b      	lsrs	r3, r3, #14
 800caf2:	b2db      	uxtb	r3, r3
 800caf4:	68fa      	ldr	r2, [r7, #12]
 800caf6:	3a01      	subs	r2, #1
 800caf8:	60fa      	str	r2, [r7, #12]
 800cafa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cafe:	b2da      	uxtb	r2, r3
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	09db      	lsrs	r3, r3, #7
 800cb08:	b2db      	uxtb	r3, r3
 800cb0a:	68fa      	ldr	r2, [r7, #12]
 800cb0c:	3a01      	subs	r2, #1
 800cb0e:	60fa      	str	r2, [r7, #12]
 800cb10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	b2db      	uxtb	r3, r3
 800cb1e:	68fa      	ldr	r2, [r7, #12]
 800cb20:	3a01      	subs	r2, #1
 800cb22:	60fa      	str	r2, [r7, #12]
 800cb24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cb28:	b2da      	uxtb	r2, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	701a      	strb	r2, [r3, #0]
 800cb2e:	e032      	b.n	800cb96 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	0f1a      	lsrs	r2, r3, #28
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	3b01      	subs	r3, #1
 800cb38:	60fb      	str	r3, [r7, #12]
 800cb3a:	b2d2      	uxtb	r2, r2
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	0d5b      	lsrs	r3, r3, #21
 800cb44:	b2db      	uxtb	r3, r3
 800cb46:	68fa      	ldr	r2, [r7, #12]
 800cb48:	3a01      	subs	r2, #1
 800cb4a:	60fa      	str	r2, [r7, #12]
 800cb4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cb50:	b2da      	uxtb	r2, r3
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	0b9b      	lsrs	r3, r3, #14
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	68fa      	ldr	r2, [r7, #12]
 800cb5e:	3a01      	subs	r2, #1
 800cb60:	60fa      	str	r2, [r7, #12]
 800cb62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cb66:	b2da      	uxtb	r2, r3
 800cb68:	68fb      	ldr	r3, [r7, #12]
 800cb6a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	09db      	lsrs	r3, r3, #7
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	3a01      	subs	r2, #1
 800cb76:	60fa      	str	r2, [r7, #12]
 800cb78:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cb7c:	b2da      	uxtb	r2, r3
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	b2db      	uxtb	r3, r3
 800cb86:	68fa      	ldr	r2, [r7, #12]
 800cb88:	3a01      	subs	r2, #1
 800cb8a:	60fa      	str	r2, [r7, #12]
 800cb8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cb90:	b2da      	uxtb	r2, r3
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800cb96:	4b1f      	ldr	r3, [pc, #124]	@ (800cc14 <_SendPacket+0x274>)
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800cb9c:	4b1c      	ldr	r3, [pc, #112]	@ (800cc10 <_SendPacket+0x270>)
 800cb9e:	68db      	ldr	r3, [r3, #12]
 800cba0:	69ba      	ldr	r2, [r7, #24]
 800cba2:	1ad3      	subs	r3, r2, r3
 800cba4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	623b      	str	r3, [r7, #32]
 800cbae:	e00b      	b.n	800cbc8 <_SendPacket+0x228>
 800cbb0:	6a3b      	ldr	r3, [r7, #32]
 800cbb2:	b2da      	uxtb	r2, r3
 800cbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbb6:	1c59      	adds	r1, r3, #1
 800cbb8:	6279      	str	r1, [r7, #36]	@ 0x24
 800cbba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cbbe:	b2d2      	uxtb	r2, r2
 800cbc0:	701a      	strb	r2, [r3, #0]
 800cbc2:	6a3b      	ldr	r3, [r7, #32]
 800cbc4:	09db      	lsrs	r3, r3, #7
 800cbc6:	623b      	str	r3, [r7, #32]
 800cbc8:	6a3b      	ldr	r3, [r7, #32]
 800cbca:	2b7f      	cmp	r3, #127	@ 0x7f
 800cbcc:	d8f0      	bhi.n	800cbb0 <_SendPacket+0x210>
 800cbce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbd0:	1c5a      	adds	r2, r3, #1
 800cbd2:	627a      	str	r2, [r7, #36]	@ 0x24
 800cbd4:	6a3a      	ldr	r2, [r7, #32]
 800cbd6:	b2d2      	uxtb	r2, r2
 800cbd8:	701a      	strb	r2, [r3, #0]
 800cbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbdc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800cbde:	4b0c      	ldr	r3, [pc, #48]	@ (800cc10 <_SendPacket+0x270>)
 800cbe0:	785b      	ldrb	r3, [r3, #1]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	68ba      	ldr	r2, [r7, #8]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	1ad3      	subs	r3, r2, r3
 800cbea:	461a      	mov	r2, r3
 800cbec:	68f9      	ldr	r1, [r7, #12]
 800cbee:	f7f3 faef 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800cbf2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d003      	beq.n	800cc02 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800cbfa:	4a05      	ldr	r2, [pc, #20]	@ (800cc10 <_SendPacket+0x270>)
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	60d3      	str	r3, [r2, #12]
 800cc00:	e00f      	b.n	800cc22 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800cc02:	4b03      	ldr	r3, [pc, #12]	@ (800cc10 <_SendPacket+0x270>)
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	3301      	adds	r3, #1
 800cc08:	b2da      	uxtb	r2, r3
 800cc0a:	4b01      	ldr	r3, [pc, #4]	@ (800cc10 <_SendPacket+0x270>)
 800cc0c:	701a      	strb	r2, [r3, #0]
 800cc0e:	e008      	b.n	800cc22 <_SendPacket+0x282>
 800cc10:	2001bc04 	.word	0x2001bc04
 800cc14:	e0001004 	.word	0xe0001004
    goto SendDone;
 800cc18:	bf00      	nop
 800cc1a:	e002      	b.n	800cc22 <_SendPacket+0x282>
      goto SendDone;
 800cc1c:	bf00      	nop
 800cc1e:	e000      	b.n	800cc22 <_SendPacket+0x282>
      goto SendDone;
 800cc20:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800cc22:	4b14      	ldr	r3, [pc, #80]	@ (800cc74 <_SendPacket+0x2d4>)
 800cc24:	7e1b      	ldrb	r3, [r3, #24]
 800cc26:	4619      	mov	r1, r3
 800cc28:	4a13      	ldr	r2, [pc, #76]	@ (800cc78 <_SendPacket+0x2d8>)
 800cc2a:	460b      	mov	r3, r1
 800cc2c:	005b      	lsls	r3, r3, #1
 800cc2e:	440b      	add	r3, r1
 800cc30:	00db      	lsls	r3, r3, #3
 800cc32:	4413      	add	r3, r2
 800cc34:	336c      	adds	r3, #108	@ 0x6c
 800cc36:	681a      	ldr	r2, [r3, #0]
 800cc38:	4b0e      	ldr	r3, [pc, #56]	@ (800cc74 <_SendPacket+0x2d4>)
 800cc3a:	7e1b      	ldrb	r3, [r3, #24]
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	490e      	ldr	r1, [pc, #56]	@ (800cc78 <_SendPacket+0x2d8>)
 800cc40:	4603      	mov	r3, r0
 800cc42:	005b      	lsls	r3, r3, #1
 800cc44:	4403      	add	r3, r0
 800cc46:	00db      	lsls	r3, r3, #3
 800cc48:	440b      	add	r3, r1
 800cc4a:	3370      	adds	r3, #112	@ 0x70
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d00b      	beq.n	800cc6a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800cc52:	4b08      	ldr	r3, [pc, #32]	@ (800cc74 <_SendPacket+0x2d4>)
 800cc54:	789b      	ldrb	r3, [r3, #2]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d107      	bne.n	800cc6a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800cc5a:	4b06      	ldr	r3, [pc, #24]	@ (800cc74 <_SendPacket+0x2d4>)
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800cc60:	f7ff fdbe 	bl	800c7e0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800cc64:	4b03      	ldr	r3, [pc, #12]	@ (800cc74 <_SendPacket+0x2d4>)
 800cc66:	2200      	movs	r2, #0
 800cc68:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800cc6a:	bf00      	nop
 800cc6c:	3728      	adds	r7, #40	@ 0x28
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	bd80      	pop	{r7, pc}
 800cc72:	bf00      	nop
 800cc74:	2001bc04 	.word	0x2001bc04
 800cc78:	2001a744 	.word	0x2001a744

0800cc7c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af02      	add	r7, sp, #8
 800cc82:	60f8      	str	r0, [r7, #12]
 800cc84:	60b9      	str	r1, [r7, #8]
 800cc86:	607a      	str	r2, [r7, #4]
 800cc88:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800cc90:	4917      	ldr	r1, [pc, #92]	@ (800ccf0 <SEGGER_SYSVIEW_Init+0x74>)
 800cc92:	4818      	ldr	r0, [pc, #96]	@ (800ccf4 <SEGGER_SYSVIEW_Init+0x78>)
 800cc94:	f7ff fc98 	bl	800c5c8 <SEGGER_RTT_AllocUpBuffer>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	b2da      	uxtb	r2, r3
 800cc9c:	4b16      	ldr	r3, [pc, #88]	@ (800ccf8 <SEGGER_SYSVIEW_Init+0x7c>)
 800cc9e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800cca0:	4b15      	ldr	r3, [pc, #84]	@ (800ccf8 <SEGGER_SYSVIEW_Init+0x7c>)
 800cca2:	785a      	ldrb	r2, [r3, #1]
 800cca4:	4b14      	ldr	r3, [pc, #80]	@ (800ccf8 <SEGGER_SYSVIEW_Init+0x7c>)
 800cca6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800cca8:	4b13      	ldr	r3, [pc, #76]	@ (800ccf8 <SEGGER_SYSVIEW_Init+0x7c>)
 800ccaa:	7e1b      	ldrb	r3, [r3, #24]
 800ccac:	4618      	mov	r0, r3
 800ccae:	2300      	movs	r3, #0
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	2308      	movs	r3, #8
 800ccb4:	4a11      	ldr	r2, [pc, #68]	@ (800ccfc <SEGGER_SYSVIEW_Init+0x80>)
 800ccb6:	490f      	ldr	r1, [pc, #60]	@ (800ccf4 <SEGGER_SYSVIEW_Init+0x78>)
 800ccb8:	f7ff fd0a 	bl	800c6d0 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800ccbc:	4b0e      	ldr	r3, [pc, #56]	@ (800ccf8 <SEGGER_SYSVIEW_Init+0x7c>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ccc2:	4b0f      	ldr	r3, [pc, #60]	@ (800cd00 <SEGGER_SYSVIEW_Init+0x84>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	4a0c      	ldr	r2, [pc, #48]	@ (800ccf8 <SEGGER_SYSVIEW_Init+0x7c>)
 800ccc8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800ccca:	4a0b      	ldr	r2, [pc, #44]	@ (800ccf8 <SEGGER_SYSVIEW_Init+0x7c>)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800ccd0:	4a09      	ldr	r2, [pc, #36]	@ (800ccf8 <SEGGER_SYSVIEW_Init+0x7c>)
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800ccd6:	4a08      	ldr	r2, [pc, #32]	@ (800ccf8 <SEGGER_SYSVIEW_Init+0x7c>)
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800ccdc:	4a06      	ldr	r2, [pc, #24]	@ (800ccf8 <SEGGER_SYSVIEW_Init+0x7c>)
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800cce2:	4b05      	ldr	r3, [pc, #20]	@ (800ccf8 <SEGGER_SYSVIEW_Init+0x7c>)
 800cce4:	2200      	movs	r2, #0
 800cce6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800cce8:	bf00      	nop
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}
 800ccf0:	2001abfc 	.word	0x2001abfc
 800ccf4:	0800f728 	.word	0x0800f728
 800ccf8:	2001bc04 	.word	0x2001bc04
 800ccfc:	2001bbfc 	.word	0x2001bbfc
 800cd00:	e0001004 	.word	0xe0001004

0800cd04 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800cd04:	b480      	push	{r7}
 800cd06:	b083      	sub	sp, #12
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800cd0c:	4a04      	ldr	r2, [pc, #16]	@ (800cd20 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	6113      	str	r3, [r2, #16]
}
 800cd12:	bf00      	nop
 800cd14:	370c      	adds	r7, #12
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr
 800cd1e:	bf00      	nop
 800cd20:	2001bc04 	.word	0x2001bc04

0800cd24 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800cd2c:	f3ef 8311 	mrs	r3, BASEPRI
 800cd30:	f04f 0120 	mov.w	r1, #32
 800cd34:	f381 8811 	msr	BASEPRI, r1
 800cd38:	60fb      	str	r3, [r7, #12]
 800cd3a:	4808      	ldr	r0, [pc, #32]	@ (800cd5c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800cd3c:	f7ff fd44 	bl	800c7c8 <_PreparePacket>
 800cd40:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800cd42:	687a      	ldr	r2, [r7, #4]
 800cd44:	68b9      	ldr	r1, [r7, #8]
 800cd46:	68b8      	ldr	r0, [r7, #8]
 800cd48:	f7ff fe2a 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f383 8811 	msr	BASEPRI, r3
}
 800cd52:	bf00      	nop
 800cd54:	3710      	adds	r7, #16
 800cd56:	46bd      	mov	sp, r7
 800cd58:	bd80      	pop	{r7, pc}
 800cd5a:	bf00      	nop
 800cd5c:	2001bc34 	.word	0x2001bc34

0800cd60 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b088      	sub	sp, #32
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
 800cd68:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800cd6a:	f3ef 8311 	mrs	r3, BASEPRI
 800cd6e:	f04f 0120 	mov.w	r1, #32
 800cd72:	f381 8811 	msr	BASEPRI, r1
 800cd76:	617b      	str	r3, [r7, #20]
 800cd78:	4816      	ldr	r0, [pc, #88]	@ (800cdd4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800cd7a:	f7ff fd25 	bl	800c7c8 <_PreparePacket>
 800cd7e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800cd80:	693b      	ldr	r3, [r7, #16]
 800cd82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800cd84:	68fb      	ldr	r3, [r7, #12]
 800cd86:	61fb      	str	r3, [r7, #28]
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	61bb      	str	r3, [r7, #24]
 800cd8c:	e00b      	b.n	800cda6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800cd8e:	69bb      	ldr	r3, [r7, #24]
 800cd90:	b2da      	uxtb	r2, r3
 800cd92:	69fb      	ldr	r3, [r7, #28]
 800cd94:	1c59      	adds	r1, r3, #1
 800cd96:	61f9      	str	r1, [r7, #28]
 800cd98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cd9c:	b2d2      	uxtb	r2, r2
 800cd9e:	701a      	strb	r2, [r3, #0]
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	09db      	lsrs	r3, r3, #7
 800cda4:	61bb      	str	r3, [r7, #24]
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	2b7f      	cmp	r3, #127	@ 0x7f
 800cdaa:	d8f0      	bhi.n	800cd8e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800cdac:	69fb      	ldr	r3, [r7, #28]
 800cdae:	1c5a      	adds	r2, r3, #1
 800cdb0:	61fa      	str	r2, [r7, #28]
 800cdb2:	69ba      	ldr	r2, [r7, #24]
 800cdb4:	b2d2      	uxtb	r2, r2
 800cdb6:	701a      	strb	r2, [r3, #0]
 800cdb8:	69fb      	ldr	r3, [r7, #28]
 800cdba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cdbc:	687a      	ldr	r2, [r7, #4]
 800cdbe:	68f9      	ldr	r1, [r7, #12]
 800cdc0:	6938      	ldr	r0, [r7, #16]
 800cdc2:	f7ff fded 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800cdc6:	697b      	ldr	r3, [r7, #20]
 800cdc8:	f383 8811 	msr	BASEPRI, r3
}
 800cdcc:	bf00      	nop
 800cdce:	3720      	adds	r7, #32
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	2001bc34 	.word	0x2001bc34

0800cdd8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b08c      	sub	sp, #48	@ 0x30
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800cde4:	f3ef 8311 	mrs	r3, BASEPRI
 800cde8:	f04f 0120 	mov.w	r1, #32
 800cdec:	f381 8811 	msr	BASEPRI, r1
 800cdf0:	61fb      	str	r3, [r7, #28]
 800cdf2:	4825      	ldr	r0, [pc, #148]	@ (800ce88 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800cdf4:	f7ff fce8 	bl	800c7c8 <_PreparePacket>
 800cdf8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cdfa:	69bb      	ldr	r3, [r7, #24]
 800cdfc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce06:	e00b      	b.n	800ce20 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800ce08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce0a:	b2da      	uxtb	r2, r3
 800ce0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce0e:	1c59      	adds	r1, r3, #1
 800ce10:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ce12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	701a      	strb	r2, [r3, #0]
 800ce1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce1c:	09db      	lsrs	r3, r3, #7
 800ce1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ce20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce22:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce24:	d8f0      	bhi.n	800ce08 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800ce26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce28:	1c5a      	adds	r2, r3, #1
 800ce2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ce2e:	b2d2      	uxtb	r2, r2
 800ce30:	701a      	strb	r2, [r3, #0]
 800ce32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce34:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	627b      	str	r3, [r7, #36]	@ 0x24
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	623b      	str	r3, [r7, #32]
 800ce3e:	e00b      	b.n	800ce58 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800ce40:	6a3b      	ldr	r3, [r7, #32]
 800ce42:	b2da      	uxtb	r2, r3
 800ce44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce46:	1c59      	adds	r1, r3, #1
 800ce48:	6279      	str	r1, [r7, #36]	@ 0x24
 800ce4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ce4e:	b2d2      	uxtb	r2, r2
 800ce50:	701a      	strb	r2, [r3, #0]
 800ce52:	6a3b      	ldr	r3, [r7, #32]
 800ce54:	09db      	lsrs	r3, r3, #7
 800ce56:	623b      	str	r3, [r7, #32]
 800ce58:	6a3b      	ldr	r3, [r7, #32]
 800ce5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ce5c:	d8f0      	bhi.n	800ce40 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800ce5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce60:	1c5a      	adds	r2, r3, #1
 800ce62:	627a      	str	r2, [r7, #36]	@ 0x24
 800ce64:	6a3a      	ldr	r2, [r7, #32]
 800ce66:	b2d2      	uxtb	r2, r2
 800ce68:	701a      	strb	r2, [r3, #0]
 800ce6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce6c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800ce6e:	68fa      	ldr	r2, [r7, #12]
 800ce70:	6979      	ldr	r1, [r7, #20]
 800ce72:	69b8      	ldr	r0, [r7, #24]
 800ce74:	f7ff fd94 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800ce78:	69fb      	ldr	r3, [r7, #28]
 800ce7a:	f383 8811 	msr	BASEPRI, r3
}
 800ce7e:	bf00      	nop
 800ce80:	3730      	adds	r7, #48	@ 0x30
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	2001bc34 	.word	0x2001bc34

0800ce8c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b08e      	sub	sp, #56	@ 0x38
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	60f8      	str	r0, [r7, #12]
 800ce94:	60b9      	str	r1, [r7, #8]
 800ce96:	607a      	str	r2, [r7, #4]
 800ce98:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800ce9a:	f3ef 8311 	mrs	r3, BASEPRI
 800ce9e:	f04f 0120 	mov.w	r1, #32
 800cea2:	f381 8811 	msr	BASEPRI, r1
 800cea6:	61fb      	str	r3, [r7, #28]
 800cea8:	4832      	ldr	r0, [pc, #200]	@ (800cf74 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800ceaa:	f7ff fc8d 	bl	800c7c8 <_PreparePacket>
 800ceae:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800ceb0:	69bb      	ldr	r3, [r7, #24]
 800ceb2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	637b      	str	r3, [r7, #52]	@ 0x34
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	633b      	str	r3, [r7, #48]	@ 0x30
 800cebc:	e00b      	b.n	800ced6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800cebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cec0:	b2da      	uxtb	r2, r3
 800cec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cec4:	1c59      	adds	r1, r3, #1
 800cec6:	6379      	str	r1, [r7, #52]	@ 0x34
 800cec8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cecc:	b2d2      	uxtb	r2, r2
 800cece:	701a      	strb	r2, [r3, #0]
 800ced0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced2:	09db      	lsrs	r3, r3, #7
 800ced4:	633b      	str	r3, [r7, #48]	@ 0x30
 800ced6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ced8:	2b7f      	cmp	r3, #127	@ 0x7f
 800ceda:	d8f0      	bhi.n	800cebe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800cedc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cede:	1c5a      	adds	r2, r3, #1
 800cee0:	637a      	str	r2, [r7, #52]	@ 0x34
 800cee2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cee4:	b2d2      	uxtb	r2, r2
 800cee6:	701a      	strb	r2, [r3, #0]
 800cee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ceea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cef4:	e00b      	b.n	800cf0e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800cef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cefc:	1c59      	adds	r1, r3, #1
 800cefe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800cf00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cf04:	b2d2      	uxtb	r2, r2
 800cf06:	701a      	strb	r2, [r3, #0]
 800cf08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf0a:	09db      	lsrs	r3, r3, #7
 800cf0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800cf0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf10:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf12:	d8f0      	bhi.n	800cef6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800cf14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf16:	1c5a      	adds	r2, r3, #1
 800cf18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cf1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf1c:	b2d2      	uxtb	r2, r2
 800cf1e:	701a      	strb	r2, [r3, #0]
 800cf20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf22:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	627b      	str	r3, [r7, #36]	@ 0x24
 800cf28:	683b      	ldr	r3, [r7, #0]
 800cf2a:	623b      	str	r3, [r7, #32]
 800cf2c:	e00b      	b.n	800cf46 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800cf2e:	6a3b      	ldr	r3, [r7, #32]
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf34:	1c59      	adds	r1, r3, #1
 800cf36:	6279      	str	r1, [r7, #36]	@ 0x24
 800cf38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cf3c:	b2d2      	uxtb	r2, r2
 800cf3e:	701a      	strb	r2, [r3, #0]
 800cf40:	6a3b      	ldr	r3, [r7, #32]
 800cf42:	09db      	lsrs	r3, r3, #7
 800cf44:	623b      	str	r3, [r7, #32]
 800cf46:	6a3b      	ldr	r3, [r7, #32]
 800cf48:	2b7f      	cmp	r3, #127	@ 0x7f
 800cf4a:	d8f0      	bhi.n	800cf2e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800cf4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf4e:	1c5a      	adds	r2, r3, #1
 800cf50:	627a      	str	r2, [r7, #36]	@ 0x24
 800cf52:	6a3a      	ldr	r2, [r7, #32]
 800cf54:	b2d2      	uxtb	r2, r2
 800cf56:	701a      	strb	r2, [r3, #0]
 800cf58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf5a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800cf5c:	68fa      	ldr	r2, [r7, #12]
 800cf5e:	6979      	ldr	r1, [r7, #20]
 800cf60:	69b8      	ldr	r0, [r7, #24]
 800cf62:	f7ff fd1d 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	f383 8811 	msr	BASEPRI, r3
}
 800cf6c:	bf00      	nop
 800cf6e:	3738      	adds	r7, #56	@ 0x38
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	2001bc34 	.word	0x2001bc34

0800cf78 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b090      	sub	sp, #64	@ 0x40
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
 800cf84:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800cf86:	f3ef 8311 	mrs	r3, BASEPRI
 800cf8a:	f04f 0120 	mov.w	r1, #32
 800cf8e:	f381 8811 	msr	BASEPRI, r1
 800cf92:	61fb      	str	r3, [r7, #28]
 800cf94:	4840      	ldr	r0, [pc, #256]	@ (800d098 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800cf96:	f7ff fc17 	bl	800c7c8 <_PreparePacket>
 800cf9a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800cfa0:	697b      	ldr	r3, [r7, #20]
 800cfa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cfa8:	e00b      	b.n	800cfc2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800cfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfac:	b2da      	uxtb	r2, r3
 800cfae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfb0:	1c59      	adds	r1, r3, #1
 800cfb2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800cfb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cfb8:	b2d2      	uxtb	r2, r2
 800cfba:	701a      	strb	r2, [r3, #0]
 800cfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfbe:	09db      	lsrs	r3, r3, #7
 800cfc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cfc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cfc4:	2b7f      	cmp	r3, #127	@ 0x7f
 800cfc6:	d8f0      	bhi.n	800cfaa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800cfc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfca:	1c5a      	adds	r2, r3, #1
 800cfcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800cfce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800cfd0:	b2d2      	uxtb	r2, r2
 800cfd2:	701a      	strb	r2, [r3, #0]
 800cfd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cfd6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800cfd8:	697b      	ldr	r3, [r7, #20]
 800cfda:	637b      	str	r3, [r7, #52]	@ 0x34
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	633b      	str	r3, [r7, #48]	@ 0x30
 800cfe0:	e00b      	b.n	800cffa <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800cfe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cfe4:	b2da      	uxtb	r2, r3
 800cfe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cfe8:	1c59      	adds	r1, r3, #1
 800cfea:	6379      	str	r1, [r7, #52]	@ 0x34
 800cfec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800cff0:	b2d2      	uxtb	r2, r2
 800cff2:	701a      	strb	r2, [r3, #0]
 800cff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cff6:	09db      	lsrs	r3, r3, #7
 800cff8:	633b      	str	r3, [r7, #48]	@ 0x30
 800cffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cffc:	2b7f      	cmp	r3, #127	@ 0x7f
 800cffe:	d8f0      	bhi.n	800cfe2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800d000:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d002:	1c5a      	adds	r2, r3, #1
 800d004:	637a      	str	r2, [r7, #52]	@ 0x34
 800d006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d008:	b2d2      	uxtb	r2, r2
 800d00a:	701a      	strb	r2, [r3, #0]
 800d00c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d00e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d010:	697b      	ldr	r3, [r7, #20]
 800d012:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d018:	e00b      	b.n	800d032 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800d01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d01c:	b2da      	uxtb	r2, r3
 800d01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d020:	1c59      	adds	r1, r3, #1
 800d022:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d024:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d028:	b2d2      	uxtb	r2, r2
 800d02a:	701a      	strb	r2, [r3, #0]
 800d02c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d02e:	09db      	lsrs	r3, r3, #7
 800d030:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d034:	2b7f      	cmp	r3, #127	@ 0x7f
 800d036:	d8f0      	bhi.n	800d01a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 800d038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d03a:	1c5a      	adds	r2, r3, #1
 800d03c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d03e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d040:	b2d2      	uxtb	r2, r2
 800d042:	701a      	strb	r2, [r3, #0]
 800d044:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d046:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	627b      	str	r3, [r7, #36]	@ 0x24
 800d04c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d04e:	623b      	str	r3, [r7, #32]
 800d050:	e00b      	b.n	800d06a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800d052:	6a3b      	ldr	r3, [r7, #32]
 800d054:	b2da      	uxtb	r2, r3
 800d056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d058:	1c59      	adds	r1, r3, #1
 800d05a:	6279      	str	r1, [r7, #36]	@ 0x24
 800d05c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d060:	b2d2      	uxtb	r2, r2
 800d062:	701a      	strb	r2, [r3, #0]
 800d064:	6a3b      	ldr	r3, [r7, #32]
 800d066:	09db      	lsrs	r3, r3, #7
 800d068:	623b      	str	r3, [r7, #32]
 800d06a:	6a3b      	ldr	r3, [r7, #32]
 800d06c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d06e:	d8f0      	bhi.n	800d052 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800d070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d072:	1c5a      	adds	r2, r3, #1
 800d074:	627a      	str	r2, [r7, #36]	@ 0x24
 800d076:	6a3a      	ldr	r2, [r7, #32]
 800d078:	b2d2      	uxtb	r2, r2
 800d07a:	701a      	strb	r2, [r3, #0]
 800d07c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d07e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d080:	68fa      	ldr	r2, [r7, #12]
 800d082:	6979      	ldr	r1, [r7, #20]
 800d084:	69b8      	ldr	r0, [r7, #24]
 800d086:	f7ff fc8b 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	f383 8811 	msr	BASEPRI, r3
}
 800d090:	bf00      	nop
 800d092:	3740      	adds	r7, #64	@ 0x40
 800d094:	46bd      	mov	sp, r7
 800d096:	bd80      	pop	{r7, pc}
 800d098:	2001bc34 	.word	0x2001bc34

0800d09c <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b092      	sub	sp, #72	@ 0x48
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	60f8      	str	r0, [r7, #12]
 800d0a4:	60b9      	str	r1, [r7, #8]
 800d0a6:	607a      	str	r2, [r7, #4]
 800d0a8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 800d0aa:	f3ef 8311 	mrs	r3, BASEPRI
 800d0ae:	f04f 0120 	mov.w	r1, #32
 800d0b2:	f381 8811 	msr	BASEPRI, r1
 800d0b6:	61fb      	str	r3, [r7, #28]
 800d0b8:	484e      	ldr	r0, [pc, #312]	@ (800d1f4 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 800d0ba:	f7ff fb85 	bl	800c7c8 <_PreparePacket>
 800d0be:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	647b      	str	r3, [r7, #68]	@ 0x44
 800d0c8:	68bb      	ldr	r3, [r7, #8]
 800d0ca:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0cc:	e00b      	b.n	800d0e6 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 800d0ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0d0:	b2da      	uxtb	r2, r3
 800d0d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0d4:	1c59      	adds	r1, r3, #1
 800d0d6:	6479      	str	r1, [r7, #68]	@ 0x44
 800d0d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d0dc:	b2d2      	uxtb	r2, r2
 800d0de:	701a      	strb	r2, [r3, #0]
 800d0e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0e2:	09db      	lsrs	r3, r3, #7
 800d0e4:	643b      	str	r3, [r7, #64]	@ 0x40
 800d0e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d0e8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0ea:	d8f0      	bhi.n	800d0ce <SEGGER_SYSVIEW_RecordU32x5+0x32>
 800d0ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0ee:	1c5a      	adds	r2, r3, #1
 800d0f0:	647a      	str	r2, [r7, #68]	@ 0x44
 800d0f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d0f4:	b2d2      	uxtb	r2, r2
 800d0f6:	701a      	strb	r2, [r3, #0]
 800d0f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d104:	e00b      	b.n	800d11e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 800d106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d108:	b2da      	uxtb	r2, r3
 800d10a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d10c:	1c59      	adds	r1, r3, #1
 800d10e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800d110:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d114:	b2d2      	uxtb	r2, r2
 800d116:	701a      	strb	r2, [r3, #0]
 800d118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d11a:	09db      	lsrs	r3, r3, #7
 800d11c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d11e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d120:	2b7f      	cmp	r3, #127	@ 0x7f
 800d122:	d8f0      	bhi.n	800d106 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 800d124:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d126:	1c5a      	adds	r2, r3, #1
 800d128:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d12a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d12c:	b2d2      	uxtb	r2, r2
 800d12e:	701a      	strb	r2, [r3, #0]
 800d130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d132:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	637b      	str	r3, [r7, #52]	@ 0x34
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	633b      	str	r3, [r7, #48]	@ 0x30
 800d13c:	e00b      	b.n	800d156 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800d13e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d140:	b2da      	uxtb	r2, r3
 800d142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d144:	1c59      	adds	r1, r3, #1
 800d146:	6379      	str	r1, [r7, #52]	@ 0x34
 800d148:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d14c:	b2d2      	uxtb	r2, r2
 800d14e:	701a      	strb	r2, [r3, #0]
 800d150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d152:	09db      	lsrs	r3, r3, #7
 800d154:	633b      	str	r3, [r7, #48]	@ 0x30
 800d156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d158:	2b7f      	cmp	r3, #127	@ 0x7f
 800d15a:	d8f0      	bhi.n	800d13e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 800d15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d15e:	1c5a      	adds	r2, r3, #1
 800d160:	637a      	str	r2, [r7, #52]	@ 0x34
 800d162:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d164:	b2d2      	uxtb	r2, r2
 800d166:	701a      	strb	r2, [r3, #0]
 800d168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d16a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d172:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d174:	e00b      	b.n	800d18e <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 800d176:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d178:	b2da      	uxtb	r2, r3
 800d17a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d17c:	1c59      	adds	r1, r3, #1
 800d17e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d180:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d184:	b2d2      	uxtb	r2, r2
 800d186:	701a      	strb	r2, [r3, #0]
 800d188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d18a:	09db      	lsrs	r3, r3, #7
 800d18c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d190:	2b7f      	cmp	r3, #127	@ 0x7f
 800d192:	d8f0      	bhi.n	800d176 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 800d194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d196:	1c5a      	adds	r2, r3, #1
 800d198:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d19a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d19c:	b2d2      	uxtb	r2, r2
 800d19e:	701a      	strb	r2, [r3, #0]
 800d1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d1a2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 800d1a4:	697b      	ldr	r3, [r7, #20]
 800d1a6:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d1aa:	623b      	str	r3, [r7, #32]
 800d1ac:	e00b      	b.n	800d1c6 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800d1ae:	6a3b      	ldr	r3, [r7, #32]
 800d1b0:	b2da      	uxtb	r2, r3
 800d1b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1b4:	1c59      	adds	r1, r3, #1
 800d1b6:	6279      	str	r1, [r7, #36]	@ 0x24
 800d1b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d1bc:	b2d2      	uxtb	r2, r2
 800d1be:	701a      	strb	r2, [r3, #0]
 800d1c0:	6a3b      	ldr	r3, [r7, #32]
 800d1c2:	09db      	lsrs	r3, r3, #7
 800d1c4:	623b      	str	r3, [r7, #32]
 800d1c6:	6a3b      	ldr	r3, [r7, #32]
 800d1c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800d1ca:	d8f0      	bhi.n	800d1ae <SEGGER_SYSVIEW_RecordU32x5+0x112>
 800d1cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1ce:	1c5a      	adds	r2, r3, #1
 800d1d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800d1d2:	6a3a      	ldr	r2, [r7, #32]
 800d1d4:	b2d2      	uxtb	r2, r2
 800d1d6:	701a      	strb	r2, [r3, #0]
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1da:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	6979      	ldr	r1, [r7, #20]
 800d1e0:	69b8      	ldr	r0, [r7, #24]
 800d1e2:	f7ff fbdd 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800d1e6:	69fb      	ldr	r3, [r7, #28]
 800d1e8:	f383 8811 	msr	BASEPRI, r3
}
 800d1ec:	bf00      	nop
 800d1ee:	3748      	adds	r7, #72	@ 0x48
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	2001bc34 	.word	0x2001bc34

0800d1f8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800d1f8:	b580      	push	{r7, lr}
 800d1fa:	b08c      	sub	sp, #48	@ 0x30
 800d1fc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800d1fe:	4b58      	ldr	r3, [pc, #352]	@ (800d360 <SEGGER_SYSVIEW_Start+0x168>)
 800d200:	2201      	movs	r2, #1
 800d202:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800d204:	f3ef 8311 	mrs	r3, BASEPRI
 800d208:	f04f 0120 	mov.w	r1, #32
 800d20c:	f381 8811 	msr	BASEPRI, r1
 800d210:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800d212:	4b53      	ldr	r3, [pc, #332]	@ (800d360 <SEGGER_SYSVIEW_Start+0x168>)
 800d214:	785b      	ldrb	r3, [r3, #1]
 800d216:	220a      	movs	r2, #10
 800d218:	4952      	ldr	r1, [pc, #328]	@ (800d364 <SEGGER_SYSVIEW_Start+0x16c>)
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7f2 ffd8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800d226:	200a      	movs	r0, #10
 800d228:	f7ff fd7c 	bl	800cd24 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d22c:	f3ef 8311 	mrs	r3, BASEPRI
 800d230:	f04f 0120 	mov.w	r1, #32
 800d234:	f381 8811 	msr	BASEPRI, r1
 800d238:	60bb      	str	r3, [r7, #8]
 800d23a:	484b      	ldr	r0, [pc, #300]	@ (800d368 <SEGGER_SYSVIEW_Start+0x170>)
 800d23c:	f7ff fac4 	bl	800c7c8 <_PreparePacket>
 800d240:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800d246:	683b      	ldr	r3, [r7, #0]
 800d248:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d24a:	4b45      	ldr	r3, [pc, #276]	@ (800d360 <SEGGER_SYSVIEW_Start+0x168>)
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d250:	e00b      	b.n	800d26a <SEGGER_SYSVIEW_Start+0x72>
 800d252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d254:	b2da      	uxtb	r2, r3
 800d256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d258:	1c59      	adds	r1, r3, #1
 800d25a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d25c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d260:	b2d2      	uxtb	r2, r2
 800d262:	701a      	strb	r2, [r3, #0]
 800d264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d266:	09db      	lsrs	r3, r3, #7
 800d268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d26c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d26e:	d8f0      	bhi.n	800d252 <SEGGER_SYSVIEW_Start+0x5a>
 800d270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d272:	1c5a      	adds	r2, r3, #1
 800d274:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d278:	b2d2      	uxtb	r2, r2
 800d27a:	701a      	strb	r2, [r3, #0]
 800d27c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d27e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	627b      	str	r3, [r7, #36]	@ 0x24
 800d284:	4b36      	ldr	r3, [pc, #216]	@ (800d360 <SEGGER_SYSVIEW_Start+0x168>)
 800d286:	689b      	ldr	r3, [r3, #8]
 800d288:	623b      	str	r3, [r7, #32]
 800d28a:	e00b      	b.n	800d2a4 <SEGGER_SYSVIEW_Start+0xac>
 800d28c:	6a3b      	ldr	r3, [r7, #32]
 800d28e:	b2da      	uxtb	r2, r3
 800d290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d292:	1c59      	adds	r1, r3, #1
 800d294:	6279      	str	r1, [r7, #36]	@ 0x24
 800d296:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d29a:	b2d2      	uxtb	r2, r2
 800d29c:	701a      	strb	r2, [r3, #0]
 800d29e:	6a3b      	ldr	r3, [r7, #32]
 800d2a0:	09db      	lsrs	r3, r3, #7
 800d2a2:	623b      	str	r3, [r7, #32]
 800d2a4:	6a3b      	ldr	r3, [r7, #32]
 800d2a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d2a8:	d8f0      	bhi.n	800d28c <SEGGER_SYSVIEW_Start+0x94>
 800d2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ac:	1c5a      	adds	r2, r3, #1
 800d2ae:	627a      	str	r2, [r7, #36]	@ 0x24
 800d2b0:	6a3a      	ldr	r2, [r7, #32]
 800d2b2:	b2d2      	uxtb	r2, r2
 800d2b4:	701a      	strb	r2, [r3, #0]
 800d2b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	61fb      	str	r3, [r7, #28]
 800d2be:	4b28      	ldr	r3, [pc, #160]	@ (800d360 <SEGGER_SYSVIEW_Start+0x168>)
 800d2c0:	691b      	ldr	r3, [r3, #16]
 800d2c2:	61bb      	str	r3, [r7, #24]
 800d2c4:	e00b      	b.n	800d2de <SEGGER_SYSVIEW_Start+0xe6>
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	1c59      	adds	r1, r3, #1
 800d2ce:	61f9      	str	r1, [r7, #28]
 800d2d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d2d4:	b2d2      	uxtb	r2, r2
 800d2d6:	701a      	strb	r2, [r3, #0]
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	09db      	lsrs	r3, r3, #7
 800d2dc:	61bb      	str	r3, [r7, #24]
 800d2de:	69bb      	ldr	r3, [r7, #24]
 800d2e0:	2b7f      	cmp	r3, #127	@ 0x7f
 800d2e2:	d8f0      	bhi.n	800d2c6 <SEGGER_SYSVIEW_Start+0xce>
 800d2e4:	69fb      	ldr	r3, [r7, #28]
 800d2e6:	1c5a      	adds	r2, r3, #1
 800d2e8:	61fa      	str	r2, [r7, #28]
 800d2ea:	69ba      	ldr	r2, [r7, #24]
 800d2ec:	b2d2      	uxtb	r2, r2
 800d2ee:	701a      	strb	r2, [r3, #0]
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	617b      	str	r3, [r7, #20]
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	613b      	str	r3, [r7, #16]
 800d2fc:	e00b      	b.n	800d316 <SEGGER_SYSVIEW_Start+0x11e>
 800d2fe:	693b      	ldr	r3, [r7, #16]
 800d300:	b2da      	uxtb	r2, r3
 800d302:	697b      	ldr	r3, [r7, #20]
 800d304:	1c59      	adds	r1, r3, #1
 800d306:	6179      	str	r1, [r7, #20]
 800d308:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d30c:	b2d2      	uxtb	r2, r2
 800d30e:	701a      	strb	r2, [r3, #0]
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	09db      	lsrs	r3, r3, #7
 800d314:	613b      	str	r3, [r7, #16]
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	2b7f      	cmp	r3, #127	@ 0x7f
 800d31a:	d8f0      	bhi.n	800d2fe <SEGGER_SYSVIEW_Start+0x106>
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	1c5a      	adds	r2, r3, #1
 800d320:	617a      	str	r2, [r7, #20]
 800d322:	693a      	ldr	r2, [r7, #16]
 800d324:	b2d2      	uxtb	r2, r2
 800d326:	701a      	strb	r2, [r3, #0]
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d32c:	2218      	movs	r2, #24
 800d32e:	6839      	ldr	r1, [r7, #0]
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f7ff fb35 	bl	800c9a0 <_SendPacket>
      RECORD_END();
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d33c:	4b08      	ldr	r3, [pc, #32]	@ (800d360 <SEGGER_SYSVIEW_Start+0x168>)
 800d33e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d340:	2b00      	cmp	r3, #0
 800d342:	d002      	beq.n	800d34a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800d344:	4b06      	ldr	r3, [pc, #24]	@ (800d360 <SEGGER_SYSVIEW_Start+0x168>)
 800d346:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d348:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800d34a:	f000 f9eb 	bl	800d724 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800d34e:	f000 f9b1 	bl	800d6b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800d352:	f000 fc8d 	bl	800dc70 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800d356:	bf00      	nop
 800d358:	3730      	adds	r7, #48	@ 0x30
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	2001bc04 	.word	0x2001bc04
 800d364:	0800f764 	.word	0x0800f764
 800d368:	2001bc34 	.word	0x2001bc34

0800d36c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b082      	sub	sp, #8
 800d370:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d372:	f3ef 8311 	mrs	r3, BASEPRI
 800d376:	f04f 0120 	mov.w	r1, #32
 800d37a:	f381 8811 	msr	BASEPRI, r1
 800d37e:	607b      	str	r3, [r7, #4]
 800d380:	480b      	ldr	r0, [pc, #44]	@ (800d3b0 <SEGGER_SYSVIEW_Stop+0x44>)
 800d382:	f7ff fa21 	bl	800c7c8 <_PreparePacket>
 800d386:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800d388:	4b0a      	ldr	r3, [pc, #40]	@ (800d3b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800d38a:	781b      	ldrb	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d007      	beq.n	800d3a0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800d390:	220b      	movs	r2, #11
 800d392:	6839      	ldr	r1, [r7, #0]
 800d394:	6838      	ldr	r0, [r7, #0]
 800d396:	f7ff fb03 	bl	800c9a0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800d39a:	4b06      	ldr	r3, [pc, #24]	@ (800d3b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800d39c:	2200      	movs	r2, #0
 800d39e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	f383 8811 	msr	BASEPRI, r3
}
 800d3a6:	bf00      	nop
 800d3a8:	3708      	adds	r7, #8
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	2001bc34 	.word	0x2001bc34
 800d3b4:	2001bc04 	.word	0x2001bc04

0800d3b8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b08c      	sub	sp, #48	@ 0x30
 800d3bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800d3be:	f3ef 8311 	mrs	r3, BASEPRI
 800d3c2:	f04f 0120 	mov.w	r1, #32
 800d3c6:	f381 8811 	msr	BASEPRI, r1
 800d3ca:	60fb      	str	r3, [r7, #12]
 800d3cc:	4845      	ldr	r0, [pc, #276]	@ (800d4e4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800d3ce:	f7ff f9fb 	bl	800c7c8 <_PreparePacket>
 800d3d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d3dc:	4b42      	ldr	r3, [pc, #264]	@ (800d4e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d3e2:	e00b      	b.n	800d3fc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800d3e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3e6:	b2da      	uxtb	r2, r3
 800d3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d3ea:	1c59      	adds	r1, r3, #1
 800d3ec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d3ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d3f2:	b2d2      	uxtb	r2, r2
 800d3f4:	701a      	strb	r2, [r3, #0]
 800d3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3f8:	09db      	lsrs	r3, r3, #7
 800d3fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800d400:	d8f0      	bhi.n	800d3e4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800d402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d404:	1c5a      	adds	r2, r3, #1
 800d406:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d408:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d40a:	b2d2      	uxtb	r2, r2
 800d40c:	701a      	strb	r2, [r3, #0]
 800d40e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d410:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	627b      	str	r3, [r7, #36]	@ 0x24
 800d416:	4b34      	ldr	r3, [pc, #208]	@ (800d4e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	623b      	str	r3, [r7, #32]
 800d41c:	e00b      	b.n	800d436 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800d41e:	6a3b      	ldr	r3, [r7, #32]
 800d420:	b2da      	uxtb	r2, r3
 800d422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d424:	1c59      	adds	r1, r3, #1
 800d426:	6279      	str	r1, [r7, #36]	@ 0x24
 800d428:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d42c:	b2d2      	uxtb	r2, r2
 800d42e:	701a      	strb	r2, [r3, #0]
 800d430:	6a3b      	ldr	r3, [r7, #32]
 800d432:	09db      	lsrs	r3, r3, #7
 800d434:	623b      	str	r3, [r7, #32]
 800d436:	6a3b      	ldr	r3, [r7, #32]
 800d438:	2b7f      	cmp	r3, #127	@ 0x7f
 800d43a:	d8f0      	bhi.n	800d41e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800d43c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d43e:	1c5a      	adds	r2, r3, #1
 800d440:	627a      	str	r2, [r7, #36]	@ 0x24
 800d442:	6a3a      	ldr	r2, [r7, #32]
 800d444:	b2d2      	uxtb	r2, r2
 800d446:	701a      	strb	r2, [r3, #0]
 800d448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d44a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	61fb      	str	r3, [r7, #28]
 800d450:	4b25      	ldr	r3, [pc, #148]	@ (800d4e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d452:	691b      	ldr	r3, [r3, #16]
 800d454:	61bb      	str	r3, [r7, #24]
 800d456:	e00b      	b.n	800d470 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	69fb      	ldr	r3, [r7, #28]
 800d45e:	1c59      	adds	r1, r3, #1
 800d460:	61f9      	str	r1, [r7, #28]
 800d462:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d466:	b2d2      	uxtb	r2, r2
 800d468:	701a      	strb	r2, [r3, #0]
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	09db      	lsrs	r3, r3, #7
 800d46e:	61bb      	str	r3, [r7, #24]
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	2b7f      	cmp	r3, #127	@ 0x7f
 800d474:	d8f0      	bhi.n	800d458 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	1c5a      	adds	r2, r3, #1
 800d47a:	61fa      	str	r2, [r7, #28]
 800d47c:	69ba      	ldr	r2, [r7, #24]
 800d47e:	b2d2      	uxtb	r2, r2
 800d480:	701a      	strb	r2, [r3, #0]
 800d482:	69fb      	ldr	r3, [r7, #28]
 800d484:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	2300      	movs	r3, #0
 800d48c:	613b      	str	r3, [r7, #16]
 800d48e:	e00b      	b.n	800d4a8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	b2da      	uxtb	r2, r3
 800d494:	697b      	ldr	r3, [r7, #20]
 800d496:	1c59      	adds	r1, r3, #1
 800d498:	6179      	str	r1, [r7, #20]
 800d49a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d49e:	b2d2      	uxtb	r2, r2
 800d4a0:	701a      	strb	r2, [r3, #0]
 800d4a2:	693b      	ldr	r3, [r7, #16]
 800d4a4:	09db      	lsrs	r3, r3, #7
 800d4a6:	613b      	str	r3, [r7, #16]
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800d4ac:	d8f0      	bhi.n	800d490 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800d4ae:	697b      	ldr	r3, [r7, #20]
 800d4b0:	1c5a      	adds	r2, r3, #1
 800d4b2:	617a      	str	r2, [r7, #20]
 800d4b4:	693a      	ldr	r2, [r7, #16]
 800d4b6:	b2d2      	uxtb	r2, r2
 800d4b8:	701a      	strb	r2, [r3, #0]
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800d4be:	2218      	movs	r2, #24
 800d4c0:	6879      	ldr	r1, [r7, #4]
 800d4c2:	68b8      	ldr	r0, [r7, #8]
 800d4c4:	f7ff fa6c 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800d4ce:	4b06      	ldr	r3, [pc, #24]	@ (800d4e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d4d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d002      	beq.n	800d4dc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800d4d6:	4b04      	ldr	r3, [pc, #16]	@ (800d4e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4da:	4798      	blx	r3
  }
}
 800d4dc:	bf00      	nop
 800d4de:	3730      	adds	r7, #48	@ 0x30
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}
 800d4e4:	2001bc34 	.word	0x2001bc34
 800d4e8:	2001bc04 	.word	0x2001bc04

0800d4ec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	b092      	sub	sp, #72	@ 0x48
 800d4f0:	af00      	add	r7, sp, #0
 800d4f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800d4f4:	f3ef 8311 	mrs	r3, BASEPRI
 800d4f8:	f04f 0120 	mov.w	r1, #32
 800d4fc:	f381 8811 	msr	BASEPRI, r1
 800d500:	617b      	str	r3, [r7, #20]
 800d502:	486a      	ldr	r0, [pc, #424]	@ (800d6ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800d504:	f7ff f960 	bl	800c7c8 <_PreparePacket>
 800d508:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d50a:	693b      	ldr	r3, [r7, #16]
 800d50c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	647b      	str	r3, [r7, #68]	@ 0x44
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681a      	ldr	r2, [r3, #0]
 800d516:	4b66      	ldr	r3, [pc, #408]	@ (800d6b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d518:	691b      	ldr	r3, [r3, #16]
 800d51a:	1ad3      	subs	r3, r2, r3
 800d51c:	643b      	str	r3, [r7, #64]	@ 0x40
 800d51e:	e00b      	b.n	800d538 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800d520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d522:	b2da      	uxtb	r2, r3
 800d524:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d526:	1c59      	adds	r1, r3, #1
 800d528:	6479      	str	r1, [r7, #68]	@ 0x44
 800d52a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d52e:	b2d2      	uxtb	r2, r2
 800d530:	701a      	strb	r2, [r3, #0]
 800d532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d534:	09db      	lsrs	r3, r3, #7
 800d536:	643b      	str	r3, [r7, #64]	@ 0x40
 800d538:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d53a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d53c:	d8f0      	bhi.n	800d520 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800d53e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d540:	1c5a      	adds	r2, r3, #1
 800d542:	647a      	str	r2, [r7, #68]	@ 0x44
 800d544:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800d546:	b2d2      	uxtb	r2, r2
 800d548:	701a      	strb	r2, [r3, #0]
 800d54a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d54c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d558:	e00b      	b.n	800d572 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800d55a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d560:	1c59      	adds	r1, r3, #1
 800d562:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800d564:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d568:	b2d2      	uxtb	r2, r2
 800d56a:	701a      	strb	r2, [r3, #0]
 800d56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d56e:	09db      	lsrs	r3, r3, #7
 800d570:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d574:	2b7f      	cmp	r3, #127	@ 0x7f
 800d576:	d8f0      	bhi.n	800d55a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800d578:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d57a:	1c5a      	adds	r2, r3, #1
 800d57c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d57e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d580:	b2d2      	uxtb	r2, r2
 800d582:	701a      	strb	r2, [r3, #0]
 800d584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d586:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	685b      	ldr	r3, [r3, #4]
 800d58c:	2220      	movs	r2, #32
 800d58e:	4619      	mov	r1, r3
 800d590:	68f8      	ldr	r0, [r7, #12]
 800d592:	f7ff f8e9 	bl	800c768 <_EncodeStr>
 800d596:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800d598:	2209      	movs	r2, #9
 800d59a:	68f9      	ldr	r1, [r7, #12]
 800d59c:	6938      	ldr	r0, [r7, #16]
 800d59e:	f7ff f9ff 	bl	800c9a0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	637b      	str	r3, [r7, #52]	@ 0x34
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681a      	ldr	r2, [r3, #0]
 800d5ae:	4b40      	ldr	r3, [pc, #256]	@ (800d6b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800d5b0:	691b      	ldr	r3, [r3, #16]
 800d5b2:	1ad3      	subs	r3, r2, r3
 800d5b4:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5b6:	e00b      	b.n	800d5d0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800d5b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5ba:	b2da      	uxtb	r2, r3
 800d5bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5be:	1c59      	adds	r1, r3, #1
 800d5c0:	6379      	str	r1, [r7, #52]	@ 0x34
 800d5c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d5c6:	b2d2      	uxtb	r2, r2
 800d5c8:	701a      	strb	r2, [r3, #0]
 800d5ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5cc:	09db      	lsrs	r3, r3, #7
 800d5ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800d5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800d5d4:	d8f0      	bhi.n	800d5b8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800d5d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5d8:	1c5a      	adds	r2, r3, #1
 800d5da:	637a      	str	r2, [r7, #52]	@ 0x34
 800d5dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d5de:	b2d2      	uxtb	r2, r2
 800d5e0:	701a      	strb	r2, [r3, #0]
 800d5e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	68db      	ldr	r3, [r3, #12]
 800d5ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d5f0:	e00b      	b.n	800d60a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800d5f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5f4:	b2da      	uxtb	r2, r3
 800d5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5f8:	1c59      	adds	r1, r3, #1
 800d5fa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800d5fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d600:	b2d2      	uxtb	r2, r2
 800d602:	701a      	strb	r2, [r3, #0]
 800d604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d606:	09db      	lsrs	r3, r3, #7
 800d608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d60a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d60c:	2b7f      	cmp	r3, #127	@ 0x7f
 800d60e:	d8f0      	bhi.n	800d5f2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800d610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d612:	1c5a      	adds	r2, r3, #1
 800d614:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d618:	b2d2      	uxtb	r2, r2
 800d61a:	701a      	strb	r2, [r3, #0]
 800d61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d61e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	627b      	str	r3, [r7, #36]	@ 0x24
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	691b      	ldr	r3, [r3, #16]
 800d628:	623b      	str	r3, [r7, #32]
 800d62a:	e00b      	b.n	800d644 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800d62c:	6a3b      	ldr	r3, [r7, #32]
 800d62e:	b2da      	uxtb	r2, r3
 800d630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d632:	1c59      	adds	r1, r3, #1
 800d634:	6279      	str	r1, [r7, #36]	@ 0x24
 800d636:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d63a:	b2d2      	uxtb	r2, r2
 800d63c:	701a      	strb	r2, [r3, #0]
 800d63e:	6a3b      	ldr	r3, [r7, #32]
 800d640:	09db      	lsrs	r3, r3, #7
 800d642:	623b      	str	r3, [r7, #32]
 800d644:	6a3b      	ldr	r3, [r7, #32]
 800d646:	2b7f      	cmp	r3, #127	@ 0x7f
 800d648:	d8f0      	bhi.n	800d62c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800d64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d64c:	1c5a      	adds	r2, r3, #1
 800d64e:	627a      	str	r2, [r7, #36]	@ 0x24
 800d650:	6a3a      	ldr	r2, [r7, #32]
 800d652:	b2d2      	uxtb	r2, r2
 800d654:	701a      	strb	r2, [r3, #0]
 800d656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d658:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800d65a:	68fb      	ldr	r3, [r7, #12]
 800d65c:	61fb      	str	r3, [r7, #28]
 800d65e:	2300      	movs	r3, #0
 800d660:	61bb      	str	r3, [r7, #24]
 800d662:	e00b      	b.n	800d67c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	b2da      	uxtb	r2, r3
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	1c59      	adds	r1, r3, #1
 800d66c:	61f9      	str	r1, [r7, #28]
 800d66e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d672:	b2d2      	uxtb	r2, r2
 800d674:	701a      	strb	r2, [r3, #0]
 800d676:	69bb      	ldr	r3, [r7, #24]
 800d678:	09db      	lsrs	r3, r3, #7
 800d67a:	61bb      	str	r3, [r7, #24]
 800d67c:	69bb      	ldr	r3, [r7, #24]
 800d67e:	2b7f      	cmp	r3, #127	@ 0x7f
 800d680:	d8f0      	bhi.n	800d664 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800d682:	69fb      	ldr	r3, [r7, #28]
 800d684:	1c5a      	adds	r2, r3, #1
 800d686:	61fa      	str	r2, [r7, #28]
 800d688:	69ba      	ldr	r2, [r7, #24]
 800d68a:	b2d2      	uxtb	r2, r2
 800d68c:	701a      	strb	r2, [r3, #0]
 800d68e:	69fb      	ldr	r3, [r7, #28]
 800d690:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800d692:	2215      	movs	r2, #21
 800d694:	68f9      	ldr	r1, [r7, #12]
 800d696:	6938      	ldr	r0, [r7, #16]
 800d698:	f7ff f982 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800d69c:	697b      	ldr	r3, [r7, #20]
 800d69e:	f383 8811 	msr	BASEPRI, r3
}
 800d6a2:	bf00      	nop
 800d6a4:	3748      	adds	r7, #72	@ 0x48
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	2001bc34 	.word	0x2001bc34
 800d6b0:	2001bc04 	.word	0x2001bc04

0800d6b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800d6b4:	b580      	push	{r7, lr}
 800d6b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800d6b8:	4b07      	ldr	r3, [pc, #28]	@ (800d6d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d6ba:	6a1b      	ldr	r3, [r3, #32]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d008      	beq.n	800d6d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800d6c0:	4b05      	ldr	r3, [pc, #20]	@ (800d6d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d6c2:	6a1b      	ldr	r3, [r3, #32]
 800d6c4:	685b      	ldr	r3, [r3, #4]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d003      	beq.n	800d6d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800d6ca:	4b03      	ldr	r3, [pc, #12]	@ (800d6d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800d6cc:	6a1b      	ldr	r3, [r3, #32]
 800d6ce:	685b      	ldr	r3, [r3, #4]
 800d6d0:	4798      	blx	r3
  }
}
 800d6d2:	bf00      	nop
 800d6d4:	bd80      	pop	{r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	2001bc04 	.word	0x2001bc04

0800d6dc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b086      	sub	sp, #24
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d6e4:	f3ef 8311 	mrs	r3, BASEPRI
 800d6e8:	f04f 0120 	mov.w	r1, #32
 800d6ec:	f381 8811 	msr	BASEPRI, r1
 800d6f0:	617b      	str	r3, [r7, #20]
 800d6f2:	480b      	ldr	r0, [pc, #44]	@ (800d720 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800d6f4:	f7ff f868 	bl	800c7c8 <_PreparePacket>
 800d6f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800d6fa:	2280      	movs	r2, #128	@ 0x80
 800d6fc:	6879      	ldr	r1, [r7, #4]
 800d6fe:	6938      	ldr	r0, [r7, #16]
 800d700:	f7ff f832 	bl	800c768 <_EncodeStr>
 800d704:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800d706:	220e      	movs	r2, #14
 800d708:	68f9      	ldr	r1, [r7, #12]
 800d70a:	6938      	ldr	r0, [r7, #16]
 800d70c:	f7ff f948 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	f383 8811 	msr	BASEPRI, r3
}
 800d716:	bf00      	nop
 800d718:	3718      	adds	r7, #24
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	2001bc34 	.word	0x2001bc34

0800d724 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800d724:	b590      	push	{r4, r7, lr}
 800d726:	b083      	sub	sp, #12
 800d728:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800d72a:	4b15      	ldr	r3, [pc, #84]	@ (800d780 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d72c:	6a1b      	ldr	r3, [r3, #32]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d01a      	beq.n	800d768 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800d732:	4b13      	ldr	r3, [pc, #76]	@ (800d780 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d734:	6a1b      	ldr	r3, [r3, #32]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d015      	beq.n	800d768 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800d73c:	4b10      	ldr	r3, [pc, #64]	@ (800d780 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800d73e:	6a1b      	ldr	r3, [r3, #32]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	4798      	blx	r3
 800d744:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d748:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800d74a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d74e:	f04f 0200 	mov.w	r2, #0
 800d752:	f04f 0300 	mov.w	r3, #0
 800d756:	000a      	movs	r2, r1
 800d758:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800d75a:	4613      	mov	r3, r2
 800d75c:	461a      	mov	r2, r3
 800d75e:	4621      	mov	r1, r4
 800d760:	200d      	movs	r0, #13
 800d762:	f7ff fb39 	bl	800cdd8 <SEGGER_SYSVIEW_RecordU32x2>
 800d766:	e006      	b.n	800d776 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800d768:	4b06      	ldr	r3, [pc, #24]	@ (800d784 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4619      	mov	r1, r3
 800d76e:	200c      	movs	r0, #12
 800d770:	f7ff faf6 	bl	800cd60 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800d774:	bf00      	nop
 800d776:	bf00      	nop
 800d778:	370c      	adds	r7, #12
 800d77a:	46bd      	mov	sp, r7
 800d77c:	bd90      	pop	{r4, r7, pc}
 800d77e:	bf00      	nop
 800d780:	2001bc04 	.word	0x2001bc04
 800d784:	e0001004 	.word	0xe0001004

0800d788 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800d788:	b580      	push	{r7, lr}
 800d78a:	b086      	sub	sp, #24
 800d78c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d78e:	f3ef 8311 	mrs	r3, BASEPRI
 800d792:	f04f 0120 	mov.w	r1, #32
 800d796:	f381 8811 	msr	BASEPRI, r1
 800d79a:	60fb      	str	r3, [r7, #12]
 800d79c:	4819      	ldr	r0, [pc, #100]	@ (800d804 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800d79e:	f7ff f813 	bl	800c7c8 <_PreparePacket>
 800d7a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800d7a8:	4b17      	ldr	r3, [pc, #92]	@ (800d808 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d7b0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	617b      	str	r3, [r7, #20]
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	613b      	str	r3, [r7, #16]
 800d7ba:	e00b      	b.n	800d7d4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800d7bc:	693b      	ldr	r3, [r7, #16]
 800d7be:	b2da      	uxtb	r2, r3
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	1c59      	adds	r1, r3, #1
 800d7c4:	6179      	str	r1, [r7, #20]
 800d7c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d7ca:	b2d2      	uxtb	r2, r2
 800d7cc:	701a      	strb	r2, [r3, #0]
 800d7ce:	693b      	ldr	r3, [r7, #16]
 800d7d0:	09db      	lsrs	r3, r3, #7
 800d7d2:	613b      	str	r3, [r7, #16]
 800d7d4:	693b      	ldr	r3, [r7, #16]
 800d7d6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7d8:	d8f0      	bhi.n	800d7bc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	1c5a      	adds	r2, r3, #1
 800d7de:	617a      	str	r2, [r7, #20]
 800d7e0:	693a      	ldr	r2, [r7, #16]
 800d7e2:	b2d2      	uxtb	r2, r2
 800d7e4:	701a      	strb	r2, [r3, #0]
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800d7ea:	2202      	movs	r2, #2
 800d7ec:	6879      	ldr	r1, [r7, #4]
 800d7ee:	68b8      	ldr	r0, [r7, #8]
 800d7f0:	f7ff f8d6 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f383 8811 	msr	BASEPRI, r3
}
 800d7fa:	bf00      	nop
 800d7fc:	3718      	adds	r7, #24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	2001bc34 	.word	0x2001bc34
 800d808:	e000ed04 	.word	0xe000ed04

0800d80c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d812:	f3ef 8311 	mrs	r3, BASEPRI
 800d816:	f04f 0120 	mov.w	r1, #32
 800d81a:	f381 8811 	msr	BASEPRI, r1
 800d81e:	607b      	str	r3, [r7, #4]
 800d820:	4807      	ldr	r0, [pc, #28]	@ (800d840 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800d822:	f7fe ffd1 	bl	800c7c8 <_PreparePacket>
 800d826:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800d828:	2203      	movs	r2, #3
 800d82a:	6839      	ldr	r1, [r7, #0]
 800d82c:	6838      	ldr	r0, [r7, #0]
 800d82e:	f7ff f8b7 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f383 8811 	msr	BASEPRI, r3
}
 800d838:	bf00      	nop
 800d83a:	3708      	adds	r7, #8
 800d83c:	46bd      	mov	sp, r7
 800d83e:	bd80      	pop	{r7, pc}
 800d840:	2001bc34 	.word	0x2001bc34

0800d844 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d84a:	f3ef 8311 	mrs	r3, BASEPRI
 800d84e:	f04f 0120 	mov.w	r1, #32
 800d852:	f381 8811 	msr	BASEPRI, r1
 800d856:	607b      	str	r3, [r7, #4]
 800d858:	4807      	ldr	r0, [pc, #28]	@ (800d878 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800d85a:	f7fe ffb5 	bl	800c7c8 <_PreparePacket>
 800d85e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800d860:	2212      	movs	r2, #18
 800d862:	6839      	ldr	r1, [r7, #0]
 800d864:	6838      	ldr	r0, [r7, #0]
 800d866:	f7ff f89b 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f383 8811 	msr	BASEPRI, r3
}
 800d870:	bf00      	nop
 800d872:	3708      	adds	r7, #8
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	2001bc34 	.word	0x2001bc34

0800d87c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800d882:	f3ef 8311 	mrs	r3, BASEPRI
 800d886:	f04f 0120 	mov.w	r1, #32
 800d88a:	f381 8811 	msr	BASEPRI, r1
 800d88e:	607b      	str	r3, [r7, #4]
 800d890:	4807      	ldr	r0, [pc, #28]	@ (800d8b0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800d892:	f7fe ff99 	bl	800c7c8 <_PreparePacket>
 800d896:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800d898:	2211      	movs	r2, #17
 800d89a:	6839      	ldr	r1, [r7, #0]
 800d89c:	6838      	ldr	r0, [r7, #0]
 800d89e:	f7ff f87f 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f383 8811 	msr	BASEPRI, r3
}
 800d8a8:	bf00      	nop
 800d8aa:	3708      	adds	r7, #8
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}
 800d8b0:	2001bc34 	.word	0x2001bc34

0800d8b4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b088      	sub	sp, #32
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d8bc:	f3ef 8311 	mrs	r3, BASEPRI
 800d8c0:	f04f 0120 	mov.w	r1, #32
 800d8c4:	f381 8811 	msr	BASEPRI, r1
 800d8c8:	617b      	str	r3, [r7, #20]
 800d8ca:	4819      	ldr	r0, [pc, #100]	@ (800d930 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800d8cc:	f7fe ff7c 	bl	800c7c8 <_PreparePacket>
 800d8d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d8d2:	693b      	ldr	r3, [r7, #16]
 800d8d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d8d6:	4b17      	ldr	r3, [pc, #92]	@ (800d934 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800d8d8:	691b      	ldr	r3, [r3, #16]
 800d8da:	687a      	ldr	r2, [r7, #4]
 800d8dc:	1ad3      	subs	r3, r2, r3
 800d8de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	61fb      	str	r3, [r7, #28]
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	61bb      	str	r3, [r7, #24]
 800d8e8:	e00b      	b.n	800d902 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800d8ea:	69bb      	ldr	r3, [r7, #24]
 800d8ec:	b2da      	uxtb	r2, r3
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	1c59      	adds	r1, r3, #1
 800d8f2:	61f9      	str	r1, [r7, #28]
 800d8f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d8f8:	b2d2      	uxtb	r2, r2
 800d8fa:	701a      	strb	r2, [r3, #0]
 800d8fc:	69bb      	ldr	r3, [r7, #24]
 800d8fe:	09db      	lsrs	r3, r3, #7
 800d900:	61bb      	str	r3, [r7, #24]
 800d902:	69bb      	ldr	r3, [r7, #24]
 800d904:	2b7f      	cmp	r3, #127	@ 0x7f
 800d906:	d8f0      	bhi.n	800d8ea <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800d908:	69fb      	ldr	r3, [r7, #28]
 800d90a:	1c5a      	adds	r2, r3, #1
 800d90c:	61fa      	str	r2, [r7, #28]
 800d90e:	69ba      	ldr	r2, [r7, #24]
 800d910:	b2d2      	uxtb	r2, r2
 800d912:	701a      	strb	r2, [r3, #0]
 800d914:	69fb      	ldr	r3, [r7, #28]
 800d916:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800d918:	2208      	movs	r2, #8
 800d91a:	68f9      	ldr	r1, [r7, #12]
 800d91c:	6938      	ldr	r0, [r7, #16]
 800d91e:	f7ff f83f 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	f383 8811 	msr	BASEPRI, r3
}
 800d928:	bf00      	nop
 800d92a:	3720      	adds	r7, #32
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	2001bc34 	.word	0x2001bc34
 800d934:	2001bc04 	.word	0x2001bc04

0800d938 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800d938:	b580      	push	{r7, lr}
 800d93a:	b088      	sub	sp, #32
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d940:	f3ef 8311 	mrs	r3, BASEPRI
 800d944:	f04f 0120 	mov.w	r1, #32
 800d948:	f381 8811 	msr	BASEPRI, r1
 800d94c:	617b      	str	r3, [r7, #20]
 800d94e:	4819      	ldr	r0, [pc, #100]	@ (800d9b4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800d950:	f7fe ff3a 	bl	800c7c8 <_PreparePacket>
 800d954:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d95a:	4b17      	ldr	r3, [pc, #92]	@ (800d9b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800d95c:	691b      	ldr	r3, [r3, #16]
 800d95e:	687a      	ldr	r2, [r7, #4]
 800d960:	1ad3      	subs	r3, r2, r3
 800d962:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	61fb      	str	r3, [r7, #28]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	61bb      	str	r3, [r7, #24]
 800d96c:	e00b      	b.n	800d986 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800d96e:	69bb      	ldr	r3, [r7, #24]
 800d970:	b2da      	uxtb	r2, r3
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	1c59      	adds	r1, r3, #1
 800d976:	61f9      	str	r1, [r7, #28]
 800d978:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800d97c:	b2d2      	uxtb	r2, r2
 800d97e:	701a      	strb	r2, [r3, #0]
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	09db      	lsrs	r3, r3, #7
 800d984:	61bb      	str	r3, [r7, #24]
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	2b7f      	cmp	r3, #127	@ 0x7f
 800d98a:	d8f0      	bhi.n	800d96e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	1c5a      	adds	r2, r3, #1
 800d990:	61fa      	str	r2, [r7, #28]
 800d992:	69ba      	ldr	r2, [r7, #24]
 800d994:	b2d2      	uxtb	r2, r2
 800d996:	701a      	strb	r2, [r3, #0]
 800d998:	69fb      	ldr	r3, [r7, #28]
 800d99a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800d99c:	2204      	movs	r2, #4
 800d99e:	68f9      	ldr	r1, [r7, #12]
 800d9a0:	6938      	ldr	r0, [r7, #16]
 800d9a2:	f7fe fffd 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	f383 8811 	msr	BASEPRI, r3
}
 800d9ac:	bf00      	nop
 800d9ae:	3720      	adds	r7, #32
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	bd80      	pop	{r7, pc}
 800d9b4:	2001bc34 	.word	0x2001bc34
 800d9b8:	2001bc04 	.word	0x2001bc04

0800d9bc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800d9bc:	b580      	push	{r7, lr}
 800d9be:	b088      	sub	sp, #32
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800d9c4:	f3ef 8311 	mrs	r3, BASEPRI
 800d9c8:	f04f 0120 	mov.w	r1, #32
 800d9cc:	f381 8811 	msr	BASEPRI, r1
 800d9d0:	617b      	str	r3, [r7, #20]
 800d9d2:	4819      	ldr	r0, [pc, #100]	@ (800da38 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800d9d4:	f7fe fef8 	bl	800c7c8 <_PreparePacket>
 800d9d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800d9de:	4b17      	ldr	r3, [pc, #92]	@ (800da3c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800d9e0:	691b      	ldr	r3, [r3, #16]
 800d9e2:	687a      	ldr	r2, [r7, #4]
 800d9e4:	1ad3      	subs	r3, r2, r3
 800d9e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	61fb      	str	r3, [r7, #28]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	61bb      	str	r3, [r7, #24]
 800d9f0:	e00b      	b.n	800da0a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	b2da      	uxtb	r2, r3
 800d9f6:	69fb      	ldr	r3, [r7, #28]
 800d9f8:	1c59      	adds	r1, r3, #1
 800d9fa:	61f9      	str	r1, [r7, #28]
 800d9fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800da00:	b2d2      	uxtb	r2, r2
 800da02:	701a      	strb	r2, [r3, #0]
 800da04:	69bb      	ldr	r3, [r7, #24]
 800da06:	09db      	lsrs	r3, r3, #7
 800da08:	61bb      	str	r3, [r7, #24]
 800da0a:	69bb      	ldr	r3, [r7, #24]
 800da0c:	2b7f      	cmp	r3, #127	@ 0x7f
 800da0e:	d8f0      	bhi.n	800d9f2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800da10:	69fb      	ldr	r3, [r7, #28]
 800da12:	1c5a      	adds	r2, r3, #1
 800da14:	61fa      	str	r2, [r7, #28]
 800da16:	69ba      	ldr	r2, [r7, #24]
 800da18:	b2d2      	uxtb	r2, r2
 800da1a:	701a      	strb	r2, [r3, #0]
 800da1c:	69fb      	ldr	r3, [r7, #28]
 800da1e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800da20:	2206      	movs	r2, #6
 800da22:	68f9      	ldr	r1, [r7, #12]
 800da24:	6938      	ldr	r0, [r7, #16]
 800da26:	f7fe ffbb 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	f383 8811 	msr	BASEPRI, r3
}
 800da30:	bf00      	nop
 800da32:	3720      	adds	r7, #32
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	2001bc34 	.word	0x2001bc34
 800da3c:	2001bc04 	.word	0x2001bc04

0800da40 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800da40:	b580      	push	{r7, lr}
 800da42:	b08a      	sub	sp, #40	@ 0x28
 800da44:	af00      	add	r7, sp, #0
 800da46:	6078      	str	r0, [r7, #4]
 800da48:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800da4a:	f3ef 8311 	mrs	r3, BASEPRI
 800da4e:	f04f 0120 	mov.w	r1, #32
 800da52:	f381 8811 	msr	BASEPRI, r1
 800da56:	617b      	str	r3, [r7, #20]
 800da58:	4827      	ldr	r0, [pc, #156]	@ (800daf8 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800da5a:	f7fe feb5 	bl	800c7c8 <_PreparePacket>
 800da5e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800da60:	693b      	ldr	r3, [r7, #16]
 800da62:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800da64:	4b25      	ldr	r3, [pc, #148]	@ (800dafc <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800da66:	691b      	ldr	r3, [r3, #16]
 800da68:	687a      	ldr	r2, [r7, #4]
 800da6a:	1ad3      	subs	r3, r2, r3
 800da6c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	627b      	str	r3, [r7, #36]	@ 0x24
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	623b      	str	r3, [r7, #32]
 800da76:	e00b      	b.n	800da90 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800da78:	6a3b      	ldr	r3, [r7, #32]
 800da7a:	b2da      	uxtb	r2, r3
 800da7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da7e:	1c59      	adds	r1, r3, #1
 800da80:	6279      	str	r1, [r7, #36]	@ 0x24
 800da82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800da86:	b2d2      	uxtb	r2, r2
 800da88:	701a      	strb	r2, [r3, #0]
 800da8a:	6a3b      	ldr	r3, [r7, #32]
 800da8c:	09db      	lsrs	r3, r3, #7
 800da8e:	623b      	str	r3, [r7, #32]
 800da90:	6a3b      	ldr	r3, [r7, #32]
 800da92:	2b7f      	cmp	r3, #127	@ 0x7f
 800da94:	d8f0      	bhi.n	800da78 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800da96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da98:	1c5a      	adds	r2, r3, #1
 800da9a:	627a      	str	r2, [r7, #36]	@ 0x24
 800da9c:	6a3a      	ldr	r2, [r7, #32]
 800da9e:	b2d2      	uxtb	r2, r2
 800daa0:	701a      	strb	r2, [r3, #0]
 800daa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800daa4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	61fb      	str	r3, [r7, #28]
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	61bb      	str	r3, [r7, #24]
 800daae:	e00b      	b.n	800dac8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800dab0:	69bb      	ldr	r3, [r7, #24]
 800dab2:	b2da      	uxtb	r2, r3
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	1c59      	adds	r1, r3, #1
 800dab8:	61f9      	str	r1, [r7, #28]
 800daba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dabe:	b2d2      	uxtb	r2, r2
 800dac0:	701a      	strb	r2, [r3, #0]
 800dac2:	69bb      	ldr	r3, [r7, #24]
 800dac4:	09db      	lsrs	r3, r3, #7
 800dac6:	61bb      	str	r3, [r7, #24]
 800dac8:	69bb      	ldr	r3, [r7, #24]
 800daca:	2b7f      	cmp	r3, #127	@ 0x7f
 800dacc:	d8f0      	bhi.n	800dab0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	1c5a      	adds	r2, r3, #1
 800dad2:	61fa      	str	r2, [r7, #28]
 800dad4:	69ba      	ldr	r2, [r7, #24]
 800dad6:	b2d2      	uxtb	r2, r2
 800dad8:	701a      	strb	r2, [r3, #0]
 800dada:	69fb      	ldr	r3, [r7, #28]
 800dadc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800dade:	2207      	movs	r2, #7
 800dae0:	68f9      	ldr	r1, [r7, #12]
 800dae2:	6938      	ldr	r0, [r7, #16]
 800dae4:	f7fe ff5c 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800dae8:	697b      	ldr	r3, [r7, #20]
 800daea:	f383 8811 	msr	BASEPRI, r3
}
 800daee:	bf00      	nop
 800daf0:	3728      	adds	r7, #40	@ 0x28
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}
 800daf6:	bf00      	nop
 800daf8:	2001bc34 	.word	0x2001bc34
 800dafc:	2001bc04 	.word	0x2001bc04

0800db00 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800db00:	b480      	push	{r7}
 800db02:	b083      	sub	sp, #12
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800db08:	4b04      	ldr	r3, [pc, #16]	@ (800db1c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800db0a:	691b      	ldr	r3, [r3, #16]
 800db0c:	687a      	ldr	r2, [r7, #4]
 800db0e:	1ad3      	subs	r3, r2, r3
}
 800db10:	4618      	mov	r0, r3
 800db12:	370c      	adds	r7, #12
 800db14:	46bd      	mov	sp, r7
 800db16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1a:	4770      	bx	lr
 800db1c:	2001bc04 	.word	0x2001bc04

0800db20 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800db20:	b580      	push	{r7, lr}
 800db22:	b08c      	sub	sp, #48	@ 0x30
 800db24:	af00      	add	r7, sp, #0
 800db26:	4603      	mov	r3, r0
 800db28:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800db2a:	4b40      	ldr	r3, [pc, #256]	@ (800dc2c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800db2c:	681b      	ldr	r3, [r3, #0]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d077      	beq.n	800dc22 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800db32:	4b3e      	ldr	r3, [pc, #248]	@ (800dc2c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800db38:	2300      	movs	r3, #0
 800db3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db3c:	e008      	b.n	800db50 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800db3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800db44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db46:	2b00      	cmp	r3, #0
 800db48:	d007      	beq.n	800db5a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800db4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db4c:	3301      	adds	r3, #1
 800db4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db50:	79fb      	ldrb	r3, [r7, #7]
 800db52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800db54:	429a      	cmp	r2, r3
 800db56:	d3f2      	bcc.n	800db3e <SEGGER_SYSVIEW_SendModule+0x1e>
 800db58:	e000      	b.n	800db5c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800db5a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800db5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d055      	beq.n	800dc0e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800db62:	f3ef 8311 	mrs	r3, BASEPRI
 800db66:	f04f 0120 	mov.w	r1, #32
 800db6a:	f381 8811 	msr	BASEPRI, r1
 800db6e:	617b      	str	r3, [r7, #20]
 800db70:	482f      	ldr	r0, [pc, #188]	@ (800dc30 <SEGGER_SYSVIEW_SendModule+0x110>)
 800db72:	f7fe fe29 	bl	800c7c8 <_PreparePacket>
 800db76:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800db80:	79fb      	ldrb	r3, [r7, #7]
 800db82:	623b      	str	r3, [r7, #32]
 800db84:	e00b      	b.n	800db9e <SEGGER_SYSVIEW_SendModule+0x7e>
 800db86:	6a3b      	ldr	r3, [r7, #32]
 800db88:	b2da      	uxtb	r2, r3
 800db8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db8c:	1c59      	adds	r1, r3, #1
 800db8e:	6279      	str	r1, [r7, #36]	@ 0x24
 800db90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800db94:	b2d2      	uxtb	r2, r2
 800db96:	701a      	strb	r2, [r3, #0]
 800db98:	6a3b      	ldr	r3, [r7, #32]
 800db9a:	09db      	lsrs	r3, r3, #7
 800db9c:	623b      	str	r3, [r7, #32]
 800db9e:	6a3b      	ldr	r3, [r7, #32]
 800dba0:	2b7f      	cmp	r3, #127	@ 0x7f
 800dba2:	d8f0      	bhi.n	800db86 <SEGGER_SYSVIEW_SendModule+0x66>
 800dba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba6:	1c5a      	adds	r2, r3, #1
 800dba8:	627a      	str	r2, [r7, #36]	@ 0x24
 800dbaa:	6a3a      	ldr	r2, [r7, #32]
 800dbac:	b2d2      	uxtb	r2, r2
 800dbae:	701a      	strb	r2, [r3, #0]
 800dbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dbb2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	61fb      	str	r3, [r7, #28]
 800dbb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbba:	689b      	ldr	r3, [r3, #8]
 800dbbc:	61bb      	str	r3, [r7, #24]
 800dbbe:	e00b      	b.n	800dbd8 <SEGGER_SYSVIEW_SendModule+0xb8>
 800dbc0:	69bb      	ldr	r3, [r7, #24]
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	69fb      	ldr	r3, [r7, #28]
 800dbc6:	1c59      	adds	r1, r3, #1
 800dbc8:	61f9      	str	r1, [r7, #28]
 800dbca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dbce:	b2d2      	uxtb	r2, r2
 800dbd0:	701a      	strb	r2, [r3, #0]
 800dbd2:	69bb      	ldr	r3, [r7, #24]
 800dbd4:	09db      	lsrs	r3, r3, #7
 800dbd6:	61bb      	str	r3, [r7, #24]
 800dbd8:	69bb      	ldr	r3, [r7, #24]
 800dbda:	2b7f      	cmp	r3, #127	@ 0x7f
 800dbdc:	d8f0      	bhi.n	800dbc0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800dbde:	69fb      	ldr	r3, [r7, #28]
 800dbe0:	1c5a      	adds	r2, r3, #1
 800dbe2:	61fa      	str	r2, [r7, #28]
 800dbe4:	69ba      	ldr	r2, [r7, #24]
 800dbe6:	b2d2      	uxtb	r2, r2
 800dbe8:	701a      	strb	r2, [r3, #0]
 800dbea:	69fb      	ldr	r3, [r7, #28]
 800dbec:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800dbee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2280      	movs	r2, #128	@ 0x80
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	68f8      	ldr	r0, [r7, #12]
 800dbf8:	f7fe fdb6 	bl	800c768 <_EncodeStr>
 800dbfc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800dbfe:	2216      	movs	r2, #22
 800dc00:	68f9      	ldr	r1, [r7, #12]
 800dc02:	6938      	ldr	r0, [r7, #16]
 800dc04:	f7fe fecc 	bl	800c9a0 <_SendPacket>
      RECORD_END();
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800dc0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d006      	beq.n	800dc22 <SEGGER_SYSVIEW_SendModule+0x102>
 800dc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d002      	beq.n	800dc22 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800dc1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1e:	68db      	ldr	r3, [r3, #12]
 800dc20:	4798      	blx	r3
    }
  }
}
 800dc22:	bf00      	nop
 800dc24:	3730      	adds	r7, #48	@ 0x30
 800dc26:	46bd      	mov	sp, r7
 800dc28:	bd80      	pop	{r7, pc}
 800dc2a:	bf00      	nop
 800dc2c:	2001bc2c 	.word	0x2001bc2c
 800dc30:	2001bc34 	.word	0x2001bc34

0800dc34 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800dc34:	b580      	push	{r7, lr}
 800dc36:	b082      	sub	sp, #8
 800dc38:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800dc3a:	4b0c      	ldr	r3, [pc, #48]	@ (800dc6c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00f      	beq.n	800dc62 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800dc42:	4b0a      	ldr	r3, [pc, #40]	@ (800dc6c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	68db      	ldr	r3, [r3, #12]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d002      	beq.n	800dc56 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	691b      	ldr	r3, [r3, #16]
 800dc5a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d1f2      	bne.n	800dc48 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800dc62:	bf00      	nop
 800dc64:	3708      	adds	r7, #8
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
 800dc6a:	bf00      	nop
 800dc6c:	2001bc2c 	.word	0x2001bc2c

0800dc70 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b086      	sub	sp, #24
 800dc74:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800dc76:	f3ef 8311 	mrs	r3, BASEPRI
 800dc7a:	f04f 0120 	mov.w	r1, #32
 800dc7e:	f381 8811 	msr	BASEPRI, r1
 800dc82:	60fb      	str	r3, [r7, #12]
 800dc84:	4817      	ldr	r0, [pc, #92]	@ (800dce4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800dc86:	f7fe fd9f 	bl	800c7c8 <_PreparePacket>
 800dc8a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	617b      	str	r3, [r7, #20]
 800dc94:	4b14      	ldr	r3, [pc, #80]	@ (800dce8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	613b      	str	r3, [r7, #16]
 800dc9a:	e00b      	b.n	800dcb4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	b2da      	uxtb	r2, r3
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	1c59      	adds	r1, r3, #1
 800dca4:	6179      	str	r1, [r7, #20]
 800dca6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dcaa:	b2d2      	uxtb	r2, r2
 800dcac:	701a      	strb	r2, [r3, #0]
 800dcae:	693b      	ldr	r3, [r7, #16]
 800dcb0:	09db      	lsrs	r3, r3, #7
 800dcb2:	613b      	str	r3, [r7, #16]
 800dcb4:	693b      	ldr	r3, [r7, #16]
 800dcb6:	2b7f      	cmp	r3, #127	@ 0x7f
 800dcb8:	d8f0      	bhi.n	800dc9c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	1c5a      	adds	r2, r3, #1
 800dcbe:	617a      	str	r2, [r7, #20]
 800dcc0:	693a      	ldr	r2, [r7, #16]
 800dcc2:	b2d2      	uxtb	r2, r2
 800dcc4:	701a      	strb	r2, [r3, #0]
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800dcca:	221b      	movs	r2, #27
 800dccc:	6879      	ldr	r1, [r7, #4]
 800dcce:	68b8      	ldr	r0, [r7, #8]
 800dcd0:	f7fe fe66 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f383 8811 	msr	BASEPRI, r3
}
 800dcda:	bf00      	nop
 800dcdc:	3718      	adds	r7, #24
 800dcde:	46bd      	mov	sp, r7
 800dce0:	bd80      	pop	{r7, pc}
 800dce2:	bf00      	nop
 800dce4:	2001bc34 	.word	0x2001bc34
 800dce8:	2001bc30 	.word	0x2001bc30

0800dcec <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b08a      	sub	sp, #40	@ 0x28
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800dcf4:	f3ef 8311 	mrs	r3, BASEPRI
 800dcf8:	f04f 0120 	mov.w	r1, #32
 800dcfc:	f381 8811 	msr	BASEPRI, r1
 800dd00:	617b      	str	r3, [r7, #20]
 800dd02:	4827      	ldr	r0, [pc, #156]	@ (800dda0 <SEGGER_SYSVIEW_Warn+0xb4>)
 800dd04:	f7fe fd60 	bl	800c7c8 <_PreparePacket>
 800dd08:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800dd0a:	2280      	movs	r2, #128	@ 0x80
 800dd0c:	6879      	ldr	r1, [r7, #4]
 800dd0e:	6938      	ldr	r0, [r7, #16]
 800dd10:	f7fe fd2a 	bl	800c768 <_EncodeStr>
 800dd14:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	623b      	str	r3, [r7, #32]
 800dd1e:	e00b      	b.n	800dd38 <SEGGER_SYSVIEW_Warn+0x4c>
 800dd20:	6a3b      	ldr	r3, [r7, #32]
 800dd22:	b2da      	uxtb	r2, r3
 800dd24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd26:	1c59      	adds	r1, r3, #1
 800dd28:	6279      	str	r1, [r7, #36]	@ 0x24
 800dd2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dd2e:	b2d2      	uxtb	r2, r2
 800dd30:	701a      	strb	r2, [r3, #0]
 800dd32:	6a3b      	ldr	r3, [r7, #32]
 800dd34:	09db      	lsrs	r3, r3, #7
 800dd36:	623b      	str	r3, [r7, #32]
 800dd38:	6a3b      	ldr	r3, [r7, #32]
 800dd3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd3c:	d8f0      	bhi.n	800dd20 <SEGGER_SYSVIEW_Warn+0x34>
 800dd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd40:	1c5a      	adds	r2, r3, #1
 800dd42:	627a      	str	r2, [r7, #36]	@ 0x24
 800dd44:	6a3a      	ldr	r2, [r7, #32]
 800dd46:	b2d2      	uxtb	r2, r2
 800dd48:	701a      	strb	r2, [r3, #0]
 800dd4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	61fb      	str	r3, [r7, #28]
 800dd52:	2300      	movs	r3, #0
 800dd54:	61bb      	str	r3, [r7, #24]
 800dd56:	e00b      	b.n	800dd70 <SEGGER_SYSVIEW_Warn+0x84>
 800dd58:	69bb      	ldr	r3, [r7, #24]
 800dd5a:	b2da      	uxtb	r2, r3
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	1c59      	adds	r1, r3, #1
 800dd60:	61f9      	str	r1, [r7, #28]
 800dd62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800dd66:	b2d2      	uxtb	r2, r2
 800dd68:	701a      	strb	r2, [r3, #0]
 800dd6a:	69bb      	ldr	r3, [r7, #24]
 800dd6c:	09db      	lsrs	r3, r3, #7
 800dd6e:	61bb      	str	r3, [r7, #24]
 800dd70:	69bb      	ldr	r3, [r7, #24]
 800dd72:	2b7f      	cmp	r3, #127	@ 0x7f
 800dd74:	d8f0      	bhi.n	800dd58 <SEGGER_SYSVIEW_Warn+0x6c>
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	1c5a      	adds	r2, r3, #1
 800dd7a:	61fa      	str	r2, [r7, #28]
 800dd7c:	69ba      	ldr	r2, [r7, #24]
 800dd7e:	b2d2      	uxtb	r2, r2
 800dd80:	701a      	strb	r2, [r3, #0]
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800dd86:	221a      	movs	r2, #26
 800dd88:	68f9      	ldr	r1, [r7, #12]
 800dd8a:	6938      	ldr	r0, [r7, #16]
 800dd8c:	f7fe fe08 	bl	800c9a0 <_SendPacket>
  RECORD_END();
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	f383 8811 	msr	BASEPRI, r3
}
 800dd96:	bf00      	nop
 800dd98:	3728      	adds	r7, #40	@ 0x28
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
 800dd9e:	bf00      	nop
 800dda0:	2001bc34 	.word	0x2001bc34

0800dda4 <siprintf>:
 800dda4:	b40e      	push	{r1, r2, r3}
 800dda6:	b500      	push	{lr}
 800dda8:	b09c      	sub	sp, #112	@ 0x70
 800ddaa:	ab1d      	add	r3, sp, #116	@ 0x74
 800ddac:	9002      	str	r0, [sp, #8]
 800ddae:	9006      	str	r0, [sp, #24]
 800ddb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800ddb4:	4809      	ldr	r0, [pc, #36]	@ (800dddc <siprintf+0x38>)
 800ddb6:	9107      	str	r1, [sp, #28]
 800ddb8:	9104      	str	r1, [sp, #16]
 800ddba:	4909      	ldr	r1, [pc, #36]	@ (800dde0 <siprintf+0x3c>)
 800ddbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddc0:	9105      	str	r1, [sp, #20]
 800ddc2:	6800      	ldr	r0, [r0, #0]
 800ddc4:	9301      	str	r3, [sp, #4]
 800ddc6:	a902      	add	r1, sp, #8
 800ddc8:	f000 f9b2 	bl	800e130 <_svfiprintf_r>
 800ddcc:	9b02      	ldr	r3, [sp, #8]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	701a      	strb	r2, [r3, #0]
 800ddd2:	b01c      	add	sp, #112	@ 0x70
 800ddd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddd8:	b003      	add	sp, #12
 800ddda:	4770      	bx	lr
 800dddc:	2000009c 	.word	0x2000009c
 800dde0:	ffff0208 	.word	0xffff0208

0800dde4 <memcmp>:
 800dde4:	b510      	push	{r4, lr}
 800dde6:	3901      	subs	r1, #1
 800dde8:	4402      	add	r2, r0
 800ddea:	4290      	cmp	r0, r2
 800ddec:	d101      	bne.n	800ddf2 <memcmp+0xe>
 800ddee:	2000      	movs	r0, #0
 800ddf0:	e005      	b.n	800ddfe <memcmp+0x1a>
 800ddf2:	7803      	ldrb	r3, [r0, #0]
 800ddf4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ddf8:	42a3      	cmp	r3, r4
 800ddfa:	d001      	beq.n	800de00 <memcmp+0x1c>
 800ddfc:	1b18      	subs	r0, r3, r4
 800ddfe:	bd10      	pop	{r4, pc}
 800de00:	3001      	adds	r0, #1
 800de02:	e7f2      	b.n	800ddea <memcmp+0x6>

0800de04 <memset>:
 800de04:	4402      	add	r2, r0
 800de06:	4603      	mov	r3, r0
 800de08:	4293      	cmp	r3, r2
 800de0a:	d100      	bne.n	800de0e <memset+0xa>
 800de0c:	4770      	bx	lr
 800de0e:	f803 1b01 	strb.w	r1, [r3], #1
 800de12:	e7f9      	b.n	800de08 <memset+0x4>

0800de14 <__errno>:
 800de14:	4b01      	ldr	r3, [pc, #4]	@ (800de1c <__errno+0x8>)
 800de16:	6818      	ldr	r0, [r3, #0]
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	2000009c 	.word	0x2000009c

0800de20 <__libc_init_array>:
 800de20:	b570      	push	{r4, r5, r6, lr}
 800de22:	4d0d      	ldr	r5, [pc, #52]	@ (800de58 <__libc_init_array+0x38>)
 800de24:	4c0d      	ldr	r4, [pc, #52]	@ (800de5c <__libc_init_array+0x3c>)
 800de26:	1b64      	subs	r4, r4, r5
 800de28:	10a4      	asrs	r4, r4, #2
 800de2a:	2600      	movs	r6, #0
 800de2c:	42a6      	cmp	r6, r4
 800de2e:	d109      	bne.n	800de44 <__libc_init_array+0x24>
 800de30:	4d0b      	ldr	r5, [pc, #44]	@ (800de60 <__libc_init_array+0x40>)
 800de32:	4c0c      	ldr	r4, [pc, #48]	@ (800de64 <__libc_init_array+0x44>)
 800de34:	f000 fd6c 	bl	800e910 <_init>
 800de38:	1b64      	subs	r4, r4, r5
 800de3a:	10a4      	asrs	r4, r4, #2
 800de3c:	2600      	movs	r6, #0
 800de3e:	42a6      	cmp	r6, r4
 800de40:	d105      	bne.n	800de4e <__libc_init_array+0x2e>
 800de42:	bd70      	pop	{r4, r5, r6, pc}
 800de44:	f855 3b04 	ldr.w	r3, [r5], #4
 800de48:	4798      	blx	r3
 800de4a:	3601      	adds	r6, #1
 800de4c:	e7ee      	b.n	800de2c <__libc_init_array+0xc>
 800de4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800de52:	4798      	blx	r3
 800de54:	3601      	adds	r6, #1
 800de56:	e7f2      	b.n	800de3e <__libc_init_array+0x1e>
 800de58:	0800f8ac 	.word	0x0800f8ac
 800de5c:	0800f8ac 	.word	0x0800f8ac
 800de60:	0800f8ac 	.word	0x0800f8ac
 800de64:	0800f8b0 	.word	0x0800f8b0

0800de68 <__retarget_lock_acquire_recursive>:
 800de68:	4770      	bx	lr

0800de6a <__retarget_lock_release_recursive>:
 800de6a:	4770      	bx	lr

0800de6c <memcpy>:
 800de6c:	440a      	add	r2, r1
 800de6e:	4291      	cmp	r1, r2
 800de70:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800de74:	d100      	bne.n	800de78 <memcpy+0xc>
 800de76:	4770      	bx	lr
 800de78:	b510      	push	{r4, lr}
 800de7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de82:	4291      	cmp	r1, r2
 800de84:	d1f9      	bne.n	800de7a <memcpy+0xe>
 800de86:	bd10      	pop	{r4, pc}

0800de88 <_free_r>:
 800de88:	b538      	push	{r3, r4, r5, lr}
 800de8a:	4605      	mov	r5, r0
 800de8c:	2900      	cmp	r1, #0
 800de8e:	d041      	beq.n	800df14 <_free_r+0x8c>
 800de90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800de94:	1f0c      	subs	r4, r1, #4
 800de96:	2b00      	cmp	r3, #0
 800de98:	bfb8      	it	lt
 800de9a:	18e4      	addlt	r4, r4, r3
 800de9c:	f000 f8e0 	bl	800e060 <__malloc_lock>
 800dea0:	4a1d      	ldr	r2, [pc, #116]	@ (800df18 <_free_r+0x90>)
 800dea2:	6813      	ldr	r3, [r2, #0]
 800dea4:	b933      	cbnz	r3, 800deb4 <_free_r+0x2c>
 800dea6:	6063      	str	r3, [r4, #4]
 800dea8:	6014      	str	r4, [r2, #0]
 800deaa:	4628      	mov	r0, r5
 800deac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800deb0:	f000 b8dc 	b.w	800e06c <__malloc_unlock>
 800deb4:	42a3      	cmp	r3, r4
 800deb6:	d908      	bls.n	800deca <_free_r+0x42>
 800deb8:	6820      	ldr	r0, [r4, #0]
 800deba:	1821      	adds	r1, r4, r0
 800debc:	428b      	cmp	r3, r1
 800debe:	bf01      	itttt	eq
 800dec0:	6819      	ldreq	r1, [r3, #0]
 800dec2:	685b      	ldreq	r3, [r3, #4]
 800dec4:	1809      	addeq	r1, r1, r0
 800dec6:	6021      	streq	r1, [r4, #0]
 800dec8:	e7ed      	b.n	800dea6 <_free_r+0x1e>
 800deca:	461a      	mov	r2, r3
 800decc:	685b      	ldr	r3, [r3, #4]
 800dece:	b10b      	cbz	r3, 800ded4 <_free_r+0x4c>
 800ded0:	42a3      	cmp	r3, r4
 800ded2:	d9fa      	bls.n	800deca <_free_r+0x42>
 800ded4:	6811      	ldr	r1, [r2, #0]
 800ded6:	1850      	adds	r0, r2, r1
 800ded8:	42a0      	cmp	r0, r4
 800deda:	d10b      	bne.n	800def4 <_free_r+0x6c>
 800dedc:	6820      	ldr	r0, [r4, #0]
 800dede:	4401      	add	r1, r0
 800dee0:	1850      	adds	r0, r2, r1
 800dee2:	4283      	cmp	r3, r0
 800dee4:	6011      	str	r1, [r2, #0]
 800dee6:	d1e0      	bne.n	800deaa <_free_r+0x22>
 800dee8:	6818      	ldr	r0, [r3, #0]
 800deea:	685b      	ldr	r3, [r3, #4]
 800deec:	6053      	str	r3, [r2, #4]
 800deee:	4408      	add	r0, r1
 800def0:	6010      	str	r0, [r2, #0]
 800def2:	e7da      	b.n	800deaa <_free_r+0x22>
 800def4:	d902      	bls.n	800defc <_free_r+0x74>
 800def6:	230c      	movs	r3, #12
 800def8:	602b      	str	r3, [r5, #0]
 800defa:	e7d6      	b.n	800deaa <_free_r+0x22>
 800defc:	6820      	ldr	r0, [r4, #0]
 800defe:	1821      	adds	r1, r4, r0
 800df00:	428b      	cmp	r3, r1
 800df02:	bf04      	itt	eq
 800df04:	6819      	ldreq	r1, [r3, #0]
 800df06:	685b      	ldreq	r3, [r3, #4]
 800df08:	6063      	str	r3, [r4, #4]
 800df0a:	bf04      	itt	eq
 800df0c:	1809      	addeq	r1, r1, r0
 800df0e:	6021      	streq	r1, [r4, #0]
 800df10:	6054      	str	r4, [r2, #4]
 800df12:	e7ca      	b.n	800deaa <_free_r+0x22>
 800df14:	bd38      	pop	{r3, r4, r5, pc}
 800df16:	bf00      	nop
 800df18:	2001be5c 	.word	0x2001be5c

0800df1c <sbrk_aligned>:
 800df1c:	b570      	push	{r4, r5, r6, lr}
 800df1e:	4e0f      	ldr	r6, [pc, #60]	@ (800df5c <sbrk_aligned+0x40>)
 800df20:	460c      	mov	r4, r1
 800df22:	6831      	ldr	r1, [r6, #0]
 800df24:	4605      	mov	r5, r0
 800df26:	b911      	cbnz	r1, 800df2e <sbrk_aligned+0x12>
 800df28:	f000 fba6 	bl	800e678 <_sbrk_r>
 800df2c:	6030      	str	r0, [r6, #0]
 800df2e:	4621      	mov	r1, r4
 800df30:	4628      	mov	r0, r5
 800df32:	f000 fba1 	bl	800e678 <_sbrk_r>
 800df36:	1c43      	adds	r3, r0, #1
 800df38:	d103      	bne.n	800df42 <sbrk_aligned+0x26>
 800df3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800df3e:	4620      	mov	r0, r4
 800df40:	bd70      	pop	{r4, r5, r6, pc}
 800df42:	1cc4      	adds	r4, r0, #3
 800df44:	f024 0403 	bic.w	r4, r4, #3
 800df48:	42a0      	cmp	r0, r4
 800df4a:	d0f8      	beq.n	800df3e <sbrk_aligned+0x22>
 800df4c:	1a21      	subs	r1, r4, r0
 800df4e:	4628      	mov	r0, r5
 800df50:	f000 fb92 	bl	800e678 <_sbrk_r>
 800df54:	3001      	adds	r0, #1
 800df56:	d1f2      	bne.n	800df3e <sbrk_aligned+0x22>
 800df58:	e7ef      	b.n	800df3a <sbrk_aligned+0x1e>
 800df5a:	bf00      	nop
 800df5c:	2001be58 	.word	0x2001be58

0800df60 <_malloc_r>:
 800df60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df64:	1ccd      	adds	r5, r1, #3
 800df66:	f025 0503 	bic.w	r5, r5, #3
 800df6a:	3508      	adds	r5, #8
 800df6c:	2d0c      	cmp	r5, #12
 800df6e:	bf38      	it	cc
 800df70:	250c      	movcc	r5, #12
 800df72:	2d00      	cmp	r5, #0
 800df74:	4606      	mov	r6, r0
 800df76:	db01      	blt.n	800df7c <_malloc_r+0x1c>
 800df78:	42a9      	cmp	r1, r5
 800df7a:	d904      	bls.n	800df86 <_malloc_r+0x26>
 800df7c:	230c      	movs	r3, #12
 800df7e:	6033      	str	r3, [r6, #0]
 800df80:	2000      	movs	r0, #0
 800df82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e05c <_malloc_r+0xfc>
 800df8a:	f000 f869 	bl	800e060 <__malloc_lock>
 800df8e:	f8d8 3000 	ldr.w	r3, [r8]
 800df92:	461c      	mov	r4, r3
 800df94:	bb44      	cbnz	r4, 800dfe8 <_malloc_r+0x88>
 800df96:	4629      	mov	r1, r5
 800df98:	4630      	mov	r0, r6
 800df9a:	f7ff ffbf 	bl	800df1c <sbrk_aligned>
 800df9e:	1c43      	adds	r3, r0, #1
 800dfa0:	4604      	mov	r4, r0
 800dfa2:	d158      	bne.n	800e056 <_malloc_r+0xf6>
 800dfa4:	f8d8 4000 	ldr.w	r4, [r8]
 800dfa8:	4627      	mov	r7, r4
 800dfaa:	2f00      	cmp	r7, #0
 800dfac:	d143      	bne.n	800e036 <_malloc_r+0xd6>
 800dfae:	2c00      	cmp	r4, #0
 800dfb0:	d04b      	beq.n	800e04a <_malloc_r+0xea>
 800dfb2:	6823      	ldr	r3, [r4, #0]
 800dfb4:	4639      	mov	r1, r7
 800dfb6:	4630      	mov	r0, r6
 800dfb8:	eb04 0903 	add.w	r9, r4, r3
 800dfbc:	f000 fb5c 	bl	800e678 <_sbrk_r>
 800dfc0:	4581      	cmp	r9, r0
 800dfc2:	d142      	bne.n	800e04a <_malloc_r+0xea>
 800dfc4:	6821      	ldr	r1, [r4, #0]
 800dfc6:	1a6d      	subs	r5, r5, r1
 800dfc8:	4629      	mov	r1, r5
 800dfca:	4630      	mov	r0, r6
 800dfcc:	f7ff ffa6 	bl	800df1c <sbrk_aligned>
 800dfd0:	3001      	adds	r0, #1
 800dfd2:	d03a      	beq.n	800e04a <_malloc_r+0xea>
 800dfd4:	6823      	ldr	r3, [r4, #0]
 800dfd6:	442b      	add	r3, r5
 800dfd8:	6023      	str	r3, [r4, #0]
 800dfda:	f8d8 3000 	ldr.w	r3, [r8]
 800dfde:	685a      	ldr	r2, [r3, #4]
 800dfe0:	bb62      	cbnz	r2, 800e03c <_malloc_r+0xdc>
 800dfe2:	f8c8 7000 	str.w	r7, [r8]
 800dfe6:	e00f      	b.n	800e008 <_malloc_r+0xa8>
 800dfe8:	6822      	ldr	r2, [r4, #0]
 800dfea:	1b52      	subs	r2, r2, r5
 800dfec:	d420      	bmi.n	800e030 <_malloc_r+0xd0>
 800dfee:	2a0b      	cmp	r2, #11
 800dff0:	d917      	bls.n	800e022 <_malloc_r+0xc2>
 800dff2:	1961      	adds	r1, r4, r5
 800dff4:	42a3      	cmp	r3, r4
 800dff6:	6025      	str	r5, [r4, #0]
 800dff8:	bf18      	it	ne
 800dffa:	6059      	strne	r1, [r3, #4]
 800dffc:	6863      	ldr	r3, [r4, #4]
 800dffe:	bf08      	it	eq
 800e000:	f8c8 1000 	streq.w	r1, [r8]
 800e004:	5162      	str	r2, [r4, r5]
 800e006:	604b      	str	r3, [r1, #4]
 800e008:	4630      	mov	r0, r6
 800e00a:	f000 f82f 	bl	800e06c <__malloc_unlock>
 800e00e:	f104 000b 	add.w	r0, r4, #11
 800e012:	1d23      	adds	r3, r4, #4
 800e014:	f020 0007 	bic.w	r0, r0, #7
 800e018:	1ac2      	subs	r2, r0, r3
 800e01a:	bf1c      	itt	ne
 800e01c:	1a1b      	subne	r3, r3, r0
 800e01e:	50a3      	strne	r3, [r4, r2]
 800e020:	e7af      	b.n	800df82 <_malloc_r+0x22>
 800e022:	6862      	ldr	r2, [r4, #4]
 800e024:	42a3      	cmp	r3, r4
 800e026:	bf0c      	ite	eq
 800e028:	f8c8 2000 	streq.w	r2, [r8]
 800e02c:	605a      	strne	r2, [r3, #4]
 800e02e:	e7eb      	b.n	800e008 <_malloc_r+0xa8>
 800e030:	4623      	mov	r3, r4
 800e032:	6864      	ldr	r4, [r4, #4]
 800e034:	e7ae      	b.n	800df94 <_malloc_r+0x34>
 800e036:	463c      	mov	r4, r7
 800e038:	687f      	ldr	r7, [r7, #4]
 800e03a:	e7b6      	b.n	800dfaa <_malloc_r+0x4a>
 800e03c:	461a      	mov	r2, r3
 800e03e:	685b      	ldr	r3, [r3, #4]
 800e040:	42a3      	cmp	r3, r4
 800e042:	d1fb      	bne.n	800e03c <_malloc_r+0xdc>
 800e044:	2300      	movs	r3, #0
 800e046:	6053      	str	r3, [r2, #4]
 800e048:	e7de      	b.n	800e008 <_malloc_r+0xa8>
 800e04a:	230c      	movs	r3, #12
 800e04c:	6033      	str	r3, [r6, #0]
 800e04e:	4630      	mov	r0, r6
 800e050:	f000 f80c 	bl	800e06c <__malloc_unlock>
 800e054:	e794      	b.n	800df80 <_malloc_r+0x20>
 800e056:	6005      	str	r5, [r0, #0]
 800e058:	e7d6      	b.n	800e008 <_malloc_r+0xa8>
 800e05a:	bf00      	nop
 800e05c:	2001be5c 	.word	0x2001be5c

0800e060 <__malloc_lock>:
 800e060:	4801      	ldr	r0, [pc, #4]	@ (800e068 <__malloc_lock+0x8>)
 800e062:	f7ff bf01 	b.w	800de68 <__retarget_lock_acquire_recursive>
 800e066:	bf00      	nop
 800e068:	2001be54 	.word	0x2001be54

0800e06c <__malloc_unlock>:
 800e06c:	4801      	ldr	r0, [pc, #4]	@ (800e074 <__malloc_unlock+0x8>)
 800e06e:	f7ff befc 	b.w	800de6a <__retarget_lock_release_recursive>
 800e072:	bf00      	nop
 800e074:	2001be54 	.word	0x2001be54

0800e078 <__ssputs_r>:
 800e078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e07c:	688e      	ldr	r6, [r1, #8]
 800e07e:	461f      	mov	r7, r3
 800e080:	42be      	cmp	r6, r7
 800e082:	680b      	ldr	r3, [r1, #0]
 800e084:	4682      	mov	sl, r0
 800e086:	460c      	mov	r4, r1
 800e088:	4690      	mov	r8, r2
 800e08a:	d82d      	bhi.n	800e0e8 <__ssputs_r+0x70>
 800e08c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e090:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e094:	d026      	beq.n	800e0e4 <__ssputs_r+0x6c>
 800e096:	6965      	ldr	r5, [r4, #20]
 800e098:	6909      	ldr	r1, [r1, #16]
 800e09a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e09e:	eba3 0901 	sub.w	r9, r3, r1
 800e0a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e0a6:	1c7b      	adds	r3, r7, #1
 800e0a8:	444b      	add	r3, r9
 800e0aa:	106d      	asrs	r5, r5, #1
 800e0ac:	429d      	cmp	r5, r3
 800e0ae:	bf38      	it	cc
 800e0b0:	461d      	movcc	r5, r3
 800e0b2:	0553      	lsls	r3, r2, #21
 800e0b4:	d527      	bpl.n	800e106 <__ssputs_r+0x8e>
 800e0b6:	4629      	mov	r1, r5
 800e0b8:	f7ff ff52 	bl	800df60 <_malloc_r>
 800e0bc:	4606      	mov	r6, r0
 800e0be:	b360      	cbz	r0, 800e11a <__ssputs_r+0xa2>
 800e0c0:	6921      	ldr	r1, [r4, #16]
 800e0c2:	464a      	mov	r2, r9
 800e0c4:	f7ff fed2 	bl	800de6c <memcpy>
 800e0c8:	89a3      	ldrh	r3, [r4, #12]
 800e0ca:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e0ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e0d2:	81a3      	strh	r3, [r4, #12]
 800e0d4:	6126      	str	r6, [r4, #16]
 800e0d6:	6165      	str	r5, [r4, #20]
 800e0d8:	444e      	add	r6, r9
 800e0da:	eba5 0509 	sub.w	r5, r5, r9
 800e0de:	6026      	str	r6, [r4, #0]
 800e0e0:	60a5      	str	r5, [r4, #8]
 800e0e2:	463e      	mov	r6, r7
 800e0e4:	42be      	cmp	r6, r7
 800e0e6:	d900      	bls.n	800e0ea <__ssputs_r+0x72>
 800e0e8:	463e      	mov	r6, r7
 800e0ea:	6820      	ldr	r0, [r4, #0]
 800e0ec:	4632      	mov	r2, r6
 800e0ee:	4641      	mov	r1, r8
 800e0f0:	f000 faa8 	bl	800e644 <memmove>
 800e0f4:	68a3      	ldr	r3, [r4, #8]
 800e0f6:	1b9b      	subs	r3, r3, r6
 800e0f8:	60a3      	str	r3, [r4, #8]
 800e0fa:	6823      	ldr	r3, [r4, #0]
 800e0fc:	4433      	add	r3, r6
 800e0fe:	6023      	str	r3, [r4, #0]
 800e100:	2000      	movs	r0, #0
 800e102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e106:	462a      	mov	r2, r5
 800e108:	f000 fac6 	bl	800e698 <_realloc_r>
 800e10c:	4606      	mov	r6, r0
 800e10e:	2800      	cmp	r0, #0
 800e110:	d1e0      	bne.n	800e0d4 <__ssputs_r+0x5c>
 800e112:	6921      	ldr	r1, [r4, #16]
 800e114:	4650      	mov	r0, sl
 800e116:	f7ff feb7 	bl	800de88 <_free_r>
 800e11a:	230c      	movs	r3, #12
 800e11c:	f8ca 3000 	str.w	r3, [sl]
 800e120:	89a3      	ldrh	r3, [r4, #12]
 800e122:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e126:	81a3      	strh	r3, [r4, #12]
 800e128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e12c:	e7e9      	b.n	800e102 <__ssputs_r+0x8a>
	...

0800e130 <_svfiprintf_r>:
 800e130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e134:	4698      	mov	r8, r3
 800e136:	898b      	ldrh	r3, [r1, #12]
 800e138:	061b      	lsls	r3, r3, #24
 800e13a:	b09d      	sub	sp, #116	@ 0x74
 800e13c:	4607      	mov	r7, r0
 800e13e:	460d      	mov	r5, r1
 800e140:	4614      	mov	r4, r2
 800e142:	d510      	bpl.n	800e166 <_svfiprintf_r+0x36>
 800e144:	690b      	ldr	r3, [r1, #16]
 800e146:	b973      	cbnz	r3, 800e166 <_svfiprintf_r+0x36>
 800e148:	2140      	movs	r1, #64	@ 0x40
 800e14a:	f7ff ff09 	bl	800df60 <_malloc_r>
 800e14e:	6028      	str	r0, [r5, #0]
 800e150:	6128      	str	r0, [r5, #16]
 800e152:	b930      	cbnz	r0, 800e162 <_svfiprintf_r+0x32>
 800e154:	230c      	movs	r3, #12
 800e156:	603b      	str	r3, [r7, #0]
 800e158:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e15c:	b01d      	add	sp, #116	@ 0x74
 800e15e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e162:	2340      	movs	r3, #64	@ 0x40
 800e164:	616b      	str	r3, [r5, #20]
 800e166:	2300      	movs	r3, #0
 800e168:	9309      	str	r3, [sp, #36]	@ 0x24
 800e16a:	2320      	movs	r3, #32
 800e16c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e170:	f8cd 800c 	str.w	r8, [sp, #12]
 800e174:	2330      	movs	r3, #48	@ 0x30
 800e176:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e314 <_svfiprintf_r+0x1e4>
 800e17a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e17e:	f04f 0901 	mov.w	r9, #1
 800e182:	4623      	mov	r3, r4
 800e184:	469a      	mov	sl, r3
 800e186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e18a:	b10a      	cbz	r2, 800e190 <_svfiprintf_r+0x60>
 800e18c:	2a25      	cmp	r2, #37	@ 0x25
 800e18e:	d1f9      	bne.n	800e184 <_svfiprintf_r+0x54>
 800e190:	ebba 0b04 	subs.w	fp, sl, r4
 800e194:	d00b      	beq.n	800e1ae <_svfiprintf_r+0x7e>
 800e196:	465b      	mov	r3, fp
 800e198:	4622      	mov	r2, r4
 800e19a:	4629      	mov	r1, r5
 800e19c:	4638      	mov	r0, r7
 800e19e:	f7ff ff6b 	bl	800e078 <__ssputs_r>
 800e1a2:	3001      	adds	r0, #1
 800e1a4:	f000 80a7 	beq.w	800e2f6 <_svfiprintf_r+0x1c6>
 800e1a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e1aa:	445a      	add	r2, fp
 800e1ac:	9209      	str	r2, [sp, #36]	@ 0x24
 800e1ae:	f89a 3000 	ldrb.w	r3, [sl]
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	f000 809f 	beq.w	800e2f6 <_svfiprintf_r+0x1c6>
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e1be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e1c2:	f10a 0a01 	add.w	sl, sl, #1
 800e1c6:	9304      	str	r3, [sp, #16]
 800e1c8:	9307      	str	r3, [sp, #28]
 800e1ca:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e1ce:	931a      	str	r3, [sp, #104]	@ 0x68
 800e1d0:	4654      	mov	r4, sl
 800e1d2:	2205      	movs	r2, #5
 800e1d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1d8:	484e      	ldr	r0, [pc, #312]	@ (800e314 <_svfiprintf_r+0x1e4>)
 800e1da:	f7f2 f859 	bl	8000290 <memchr>
 800e1de:	9a04      	ldr	r2, [sp, #16]
 800e1e0:	b9d8      	cbnz	r0, 800e21a <_svfiprintf_r+0xea>
 800e1e2:	06d0      	lsls	r0, r2, #27
 800e1e4:	bf44      	itt	mi
 800e1e6:	2320      	movmi	r3, #32
 800e1e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1ec:	0711      	lsls	r1, r2, #28
 800e1ee:	bf44      	itt	mi
 800e1f0:	232b      	movmi	r3, #43	@ 0x2b
 800e1f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e1f6:	f89a 3000 	ldrb.w	r3, [sl]
 800e1fa:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1fc:	d015      	beq.n	800e22a <_svfiprintf_r+0xfa>
 800e1fe:	9a07      	ldr	r2, [sp, #28]
 800e200:	4654      	mov	r4, sl
 800e202:	2000      	movs	r0, #0
 800e204:	f04f 0c0a 	mov.w	ip, #10
 800e208:	4621      	mov	r1, r4
 800e20a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e20e:	3b30      	subs	r3, #48	@ 0x30
 800e210:	2b09      	cmp	r3, #9
 800e212:	d94b      	bls.n	800e2ac <_svfiprintf_r+0x17c>
 800e214:	b1b0      	cbz	r0, 800e244 <_svfiprintf_r+0x114>
 800e216:	9207      	str	r2, [sp, #28]
 800e218:	e014      	b.n	800e244 <_svfiprintf_r+0x114>
 800e21a:	eba0 0308 	sub.w	r3, r0, r8
 800e21e:	fa09 f303 	lsl.w	r3, r9, r3
 800e222:	4313      	orrs	r3, r2
 800e224:	9304      	str	r3, [sp, #16]
 800e226:	46a2      	mov	sl, r4
 800e228:	e7d2      	b.n	800e1d0 <_svfiprintf_r+0xa0>
 800e22a:	9b03      	ldr	r3, [sp, #12]
 800e22c:	1d19      	adds	r1, r3, #4
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	9103      	str	r1, [sp, #12]
 800e232:	2b00      	cmp	r3, #0
 800e234:	bfbb      	ittet	lt
 800e236:	425b      	neglt	r3, r3
 800e238:	f042 0202 	orrlt.w	r2, r2, #2
 800e23c:	9307      	strge	r3, [sp, #28]
 800e23e:	9307      	strlt	r3, [sp, #28]
 800e240:	bfb8      	it	lt
 800e242:	9204      	strlt	r2, [sp, #16]
 800e244:	7823      	ldrb	r3, [r4, #0]
 800e246:	2b2e      	cmp	r3, #46	@ 0x2e
 800e248:	d10a      	bne.n	800e260 <_svfiprintf_r+0x130>
 800e24a:	7863      	ldrb	r3, [r4, #1]
 800e24c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e24e:	d132      	bne.n	800e2b6 <_svfiprintf_r+0x186>
 800e250:	9b03      	ldr	r3, [sp, #12]
 800e252:	1d1a      	adds	r2, r3, #4
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	9203      	str	r2, [sp, #12]
 800e258:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e25c:	3402      	adds	r4, #2
 800e25e:	9305      	str	r3, [sp, #20]
 800e260:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e324 <_svfiprintf_r+0x1f4>
 800e264:	7821      	ldrb	r1, [r4, #0]
 800e266:	2203      	movs	r2, #3
 800e268:	4650      	mov	r0, sl
 800e26a:	f7f2 f811 	bl	8000290 <memchr>
 800e26e:	b138      	cbz	r0, 800e280 <_svfiprintf_r+0x150>
 800e270:	9b04      	ldr	r3, [sp, #16]
 800e272:	eba0 000a 	sub.w	r0, r0, sl
 800e276:	2240      	movs	r2, #64	@ 0x40
 800e278:	4082      	lsls	r2, r0
 800e27a:	4313      	orrs	r3, r2
 800e27c:	3401      	adds	r4, #1
 800e27e:	9304      	str	r3, [sp, #16]
 800e280:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e284:	4824      	ldr	r0, [pc, #144]	@ (800e318 <_svfiprintf_r+0x1e8>)
 800e286:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e28a:	2206      	movs	r2, #6
 800e28c:	f7f2 f800 	bl	8000290 <memchr>
 800e290:	2800      	cmp	r0, #0
 800e292:	d036      	beq.n	800e302 <_svfiprintf_r+0x1d2>
 800e294:	4b21      	ldr	r3, [pc, #132]	@ (800e31c <_svfiprintf_r+0x1ec>)
 800e296:	bb1b      	cbnz	r3, 800e2e0 <_svfiprintf_r+0x1b0>
 800e298:	9b03      	ldr	r3, [sp, #12]
 800e29a:	3307      	adds	r3, #7
 800e29c:	f023 0307 	bic.w	r3, r3, #7
 800e2a0:	3308      	adds	r3, #8
 800e2a2:	9303      	str	r3, [sp, #12]
 800e2a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e2a6:	4433      	add	r3, r6
 800e2a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e2aa:	e76a      	b.n	800e182 <_svfiprintf_r+0x52>
 800e2ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800e2b0:	460c      	mov	r4, r1
 800e2b2:	2001      	movs	r0, #1
 800e2b4:	e7a8      	b.n	800e208 <_svfiprintf_r+0xd8>
 800e2b6:	2300      	movs	r3, #0
 800e2b8:	3401      	adds	r4, #1
 800e2ba:	9305      	str	r3, [sp, #20]
 800e2bc:	4619      	mov	r1, r3
 800e2be:	f04f 0c0a 	mov.w	ip, #10
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e2c8:	3a30      	subs	r2, #48	@ 0x30
 800e2ca:	2a09      	cmp	r2, #9
 800e2cc:	d903      	bls.n	800e2d6 <_svfiprintf_r+0x1a6>
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d0c6      	beq.n	800e260 <_svfiprintf_r+0x130>
 800e2d2:	9105      	str	r1, [sp, #20]
 800e2d4:	e7c4      	b.n	800e260 <_svfiprintf_r+0x130>
 800e2d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800e2da:	4604      	mov	r4, r0
 800e2dc:	2301      	movs	r3, #1
 800e2de:	e7f0      	b.n	800e2c2 <_svfiprintf_r+0x192>
 800e2e0:	ab03      	add	r3, sp, #12
 800e2e2:	9300      	str	r3, [sp, #0]
 800e2e4:	462a      	mov	r2, r5
 800e2e6:	4b0e      	ldr	r3, [pc, #56]	@ (800e320 <_svfiprintf_r+0x1f0>)
 800e2e8:	a904      	add	r1, sp, #16
 800e2ea:	4638      	mov	r0, r7
 800e2ec:	f3af 8000 	nop.w
 800e2f0:	1c42      	adds	r2, r0, #1
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	d1d6      	bne.n	800e2a4 <_svfiprintf_r+0x174>
 800e2f6:	89ab      	ldrh	r3, [r5, #12]
 800e2f8:	065b      	lsls	r3, r3, #25
 800e2fa:	f53f af2d 	bmi.w	800e158 <_svfiprintf_r+0x28>
 800e2fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e300:	e72c      	b.n	800e15c <_svfiprintf_r+0x2c>
 800e302:	ab03      	add	r3, sp, #12
 800e304:	9300      	str	r3, [sp, #0]
 800e306:	462a      	mov	r2, r5
 800e308:	4b05      	ldr	r3, [pc, #20]	@ (800e320 <_svfiprintf_r+0x1f0>)
 800e30a:	a904      	add	r1, sp, #16
 800e30c:	4638      	mov	r0, r7
 800e30e:	f000 f879 	bl	800e404 <_printf_i>
 800e312:	e7ed      	b.n	800e2f0 <_svfiprintf_r+0x1c0>
 800e314:	0800f86f 	.word	0x0800f86f
 800e318:	0800f879 	.word	0x0800f879
 800e31c:	00000000 	.word	0x00000000
 800e320:	0800e079 	.word	0x0800e079
 800e324:	0800f875 	.word	0x0800f875

0800e328 <_printf_common>:
 800e328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e32c:	4616      	mov	r6, r2
 800e32e:	4698      	mov	r8, r3
 800e330:	688a      	ldr	r2, [r1, #8]
 800e332:	690b      	ldr	r3, [r1, #16]
 800e334:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e338:	4293      	cmp	r3, r2
 800e33a:	bfb8      	it	lt
 800e33c:	4613      	movlt	r3, r2
 800e33e:	6033      	str	r3, [r6, #0]
 800e340:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e344:	4607      	mov	r7, r0
 800e346:	460c      	mov	r4, r1
 800e348:	b10a      	cbz	r2, 800e34e <_printf_common+0x26>
 800e34a:	3301      	adds	r3, #1
 800e34c:	6033      	str	r3, [r6, #0]
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	0699      	lsls	r1, r3, #26
 800e352:	bf42      	ittt	mi
 800e354:	6833      	ldrmi	r3, [r6, #0]
 800e356:	3302      	addmi	r3, #2
 800e358:	6033      	strmi	r3, [r6, #0]
 800e35a:	6825      	ldr	r5, [r4, #0]
 800e35c:	f015 0506 	ands.w	r5, r5, #6
 800e360:	d106      	bne.n	800e370 <_printf_common+0x48>
 800e362:	f104 0a19 	add.w	sl, r4, #25
 800e366:	68e3      	ldr	r3, [r4, #12]
 800e368:	6832      	ldr	r2, [r6, #0]
 800e36a:	1a9b      	subs	r3, r3, r2
 800e36c:	42ab      	cmp	r3, r5
 800e36e:	dc26      	bgt.n	800e3be <_printf_common+0x96>
 800e370:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e374:	6822      	ldr	r2, [r4, #0]
 800e376:	3b00      	subs	r3, #0
 800e378:	bf18      	it	ne
 800e37a:	2301      	movne	r3, #1
 800e37c:	0692      	lsls	r2, r2, #26
 800e37e:	d42b      	bmi.n	800e3d8 <_printf_common+0xb0>
 800e380:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e384:	4641      	mov	r1, r8
 800e386:	4638      	mov	r0, r7
 800e388:	47c8      	blx	r9
 800e38a:	3001      	adds	r0, #1
 800e38c:	d01e      	beq.n	800e3cc <_printf_common+0xa4>
 800e38e:	6823      	ldr	r3, [r4, #0]
 800e390:	6922      	ldr	r2, [r4, #16]
 800e392:	f003 0306 	and.w	r3, r3, #6
 800e396:	2b04      	cmp	r3, #4
 800e398:	bf02      	ittt	eq
 800e39a:	68e5      	ldreq	r5, [r4, #12]
 800e39c:	6833      	ldreq	r3, [r6, #0]
 800e39e:	1aed      	subeq	r5, r5, r3
 800e3a0:	68a3      	ldr	r3, [r4, #8]
 800e3a2:	bf0c      	ite	eq
 800e3a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e3a8:	2500      	movne	r5, #0
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	bfc4      	itt	gt
 800e3ae:	1a9b      	subgt	r3, r3, r2
 800e3b0:	18ed      	addgt	r5, r5, r3
 800e3b2:	2600      	movs	r6, #0
 800e3b4:	341a      	adds	r4, #26
 800e3b6:	42b5      	cmp	r5, r6
 800e3b8:	d11a      	bne.n	800e3f0 <_printf_common+0xc8>
 800e3ba:	2000      	movs	r0, #0
 800e3bc:	e008      	b.n	800e3d0 <_printf_common+0xa8>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	4652      	mov	r2, sl
 800e3c2:	4641      	mov	r1, r8
 800e3c4:	4638      	mov	r0, r7
 800e3c6:	47c8      	blx	r9
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	d103      	bne.n	800e3d4 <_printf_common+0xac>
 800e3cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e3d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3d4:	3501      	adds	r5, #1
 800e3d6:	e7c6      	b.n	800e366 <_printf_common+0x3e>
 800e3d8:	18e1      	adds	r1, r4, r3
 800e3da:	1c5a      	adds	r2, r3, #1
 800e3dc:	2030      	movs	r0, #48	@ 0x30
 800e3de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e3e2:	4422      	add	r2, r4
 800e3e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e3e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e3ec:	3302      	adds	r3, #2
 800e3ee:	e7c7      	b.n	800e380 <_printf_common+0x58>
 800e3f0:	2301      	movs	r3, #1
 800e3f2:	4622      	mov	r2, r4
 800e3f4:	4641      	mov	r1, r8
 800e3f6:	4638      	mov	r0, r7
 800e3f8:	47c8      	blx	r9
 800e3fa:	3001      	adds	r0, #1
 800e3fc:	d0e6      	beq.n	800e3cc <_printf_common+0xa4>
 800e3fe:	3601      	adds	r6, #1
 800e400:	e7d9      	b.n	800e3b6 <_printf_common+0x8e>
	...

0800e404 <_printf_i>:
 800e404:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e408:	7e0f      	ldrb	r7, [r1, #24]
 800e40a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e40c:	2f78      	cmp	r7, #120	@ 0x78
 800e40e:	4691      	mov	r9, r2
 800e410:	4680      	mov	r8, r0
 800e412:	460c      	mov	r4, r1
 800e414:	469a      	mov	sl, r3
 800e416:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e41a:	d807      	bhi.n	800e42c <_printf_i+0x28>
 800e41c:	2f62      	cmp	r7, #98	@ 0x62
 800e41e:	d80a      	bhi.n	800e436 <_printf_i+0x32>
 800e420:	2f00      	cmp	r7, #0
 800e422:	f000 80d2 	beq.w	800e5ca <_printf_i+0x1c6>
 800e426:	2f58      	cmp	r7, #88	@ 0x58
 800e428:	f000 80b9 	beq.w	800e59e <_printf_i+0x19a>
 800e42c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e430:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e434:	e03a      	b.n	800e4ac <_printf_i+0xa8>
 800e436:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e43a:	2b15      	cmp	r3, #21
 800e43c:	d8f6      	bhi.n	800e42c <_printf_i+0x28>
 800e43e:	a101      	add	r1, pc, #4	@ (adr r1, 800e444 <_printf_i+0x40>)
 800e440:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e444:	0800e49d 	.word	0x0800e49d
 800e448:	0800e4b1 	.word	0x0800e4b1
 800e44c:	0800e42d 	.word	0x0800e42d
 800e450:	0800e42d 	.word	0x0800e42d
 800e454:	0800e42d 	.word	0x0800e42d
 800e458:	0800e42d 	.word	0x0800e42d
 800e45c:	0800e4b1 	.word	0x0800e4b1
 800e460:	0800e42d 	.word	0x0800e42d
 800e464:	0800e42d 	.word	0x0800e42d
 800e468:	0800e42d 	.word	0x0800e42d
 800e46c:	0800e42d 	.word	0x0800e42d
 800e470:	0800e5b1 	.word	0x0800e5b1
 800e474:	0800e4db 	.word	0x0800e4db
 800e478:	0800e56b 	.word	0x0800e56b
 800e47c:	0800e42d 	.word	0x0800e42d
 800e480:	0800e42d 	.word	0x0800e42d
 800e484:	0800e5d3 	.word	0x0800e5d3
 800e488:	0800e42d 	.word	0x0800e42d
 800e48c:	0800e4db 	.word	0x0800e4db
 800e490:	0800e42d 	.word	0x0800e42d
 800e494:	0800e42d 	.word	0x0800e42d
 800e498:	0800e573 	.word	0x0800e573
 800e49c:	6833      	ldr	r3, [r6, #0]
 800e49e:	1d1a      	adds	r2, r3, #4
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	6032      	str	r2, [r6, #0]
 800e4a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e4a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e09d      	b.n	800e5ec <_printf_i+0x1e8>
 800e4b0:	6833      	ldr	r3, [r6, #0]
 800e4b2:	6820      	ldr	r0, [r4, #0]
 800e4b4:	1d19      	adds	r1, r3, #4
 800e4b6:	6031      	str	r1, [r6, #0]
 800e4b8:	0606      	lsls	r6, r0, #24
 800e4ba:	d501      	bpl.n	800e4c0 <_printf_i+0xbc>
 800e4bc:	681d      	ldr	r5, [r3, #0]
 800e4be:	e003      	b.n	800e4c8 <_printf_i+0xc4>
 800e4c0:	0645      	lsls	r5, r0, #25
 800e4c2:	d5fb      	bpl.n	800e4bc <_printf_i+0xb8>
 800e4c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e4c8:	2d00      	cmp	r5, #0
 800e4ca:	da03      	bge.n	800e4d4 <_printf_i+0xd0>
 800e4cc:	232d      	movs	r3, #45	@ 0x2d
 800e4ce:	426d      	negs	r5, r5
 800e4d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e4d4:	4859      	ldr	r0, [pc, #356]	@ (800e63c <_printf_i+0x238>)
 800e4d6:	230a      	movs	r3, #10
 800e4d8:	e011      	b.n	800e4fe <_printf_i+0xfa>
 800e4da:	6821      	ldr	r1, [r4, #0]
 800e4dc:	6833      	ldr	r3, [r6, #0]
 800e4de:	0608      	lsls	r0, r1, #24
 800e4e0:	f853 5b04 	ldr.w	r5, [r3], #4
 800e4e4:	d402      	bmi.n	800e4ec <_printf_i+0xe8>
 800e4e6:	0649      	lsls	r1, r1, #25
 800e4e8:	bf48      	it	mi
 800e4ea:	b2ad      	uxthmi	r5, r5
 800e4ec:	2f6f      	cmp	r7, #111	@ 0x6f
 800e4ee:	4853      	ldr	r0, [pc, #332]	@ (800e63c <_printf_i+0x238>)
 800e4f0:	6033      	str	r3, [r6, #0]
 800e4f2:	bf14      	ite	ne
 800e4f4:	230a      	movne	r3, #10
 800e4f6:	2308      	moveq	r3, #8
 800e4f8:	2100      	movs	r1, #0
 800e4fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e4fe:	6866      	ldr	r6, [r4, #4]
 800e500:	60a6      	str	r6, [r4, #8]
 800e502:	2e00      	cmp	r6, #0
 800e504:	bfa2      	ittt	ge
 800e506:	6821      	ldrge	r1, [r4, #0]
 800e508:	f021 0104 	bicge.w	r1, r1, #4
 800e50c:	6021      	strge	r1, [r4, #0]
 800e50e:	b90d      	cbnz	r5, 800e514 <_printf_i+0x110>
 800e510:	2e00      	cmp	r6, #0
 800e512:	d04b      	beq.n	800e5ac <_printf_i+0x1a8>
 800e514:	4616      	mov	r6, r2
 800e516:	fbb5 f1f3 	udiv	r1, r5, r3
 800e51a:	fb03 5711 	mls	r7, r3, r1, r5
 800e51e:	5dc7      	ldrb	r7, [r0, r7]
 800e520:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e524:	462f      	mov	r7, r5
 800e526:	42bb      	cmp	r3, r7
 800e528:	460d      	mov	r5, r1
 800e52a:	d9f4      	bls.n	800e516 <_printf_i+0x112>
 800e52c:	2b08      	cmp	r3, #8
 800e52e:	d10b      	bne.n	800e548 <_printf_i+0x144>
 800e530:	6823      	ldr	r3, [r4, #0]
 800e532:	07df      	lsls	r7, r3, #31
 800e534:	d508      	bpl.n	800e548 <_printf_i+0x144>
 800e536:	6923      	ldr	r3, [r4, #16]
 800e538:	6861      	ldr	r1, [r4, #4]
 800e53a:	4299      	cmp	r1, r3
 800e53c:	bfde      	ittt	le
 800e53e:	2330      	movle	r3, #48	@ 0x30
 800e540:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e544:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800e548:	1b92      	subs	r2, r2, r6
 800e54a:	6122      	str	r2, [r4, #16]
 800e54c:	f8cd a000 	str.w	sl, [sp]
 800e550:	464b      	mov	r3, r9
 800e552:	aa03      	add	r2, sp, #12
 800e554:	4621      	mov	r1, r4
 800e556:	4640      	mov	r0, r8
 800e558:	f7ff fee6 	bl	800e328 <_printf_common>
 800e55c:	3001      	adds	r0, #1
 800e55e:	d14a      	bne.n	800e5f6 <_printf_i+0x1f2>
 800e560:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e564:	b004      	add	sp, #16
 800e566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e56a:	6823      	ldr	r3, [r4, #0]
 800e56c:	f043 0320 	orr.w	r3, r3, #32
 800e570:	6023      	str	r3, [r4, #0]
 800e572:	4833      	ldr	r0, [pc, #204]	@ (800e640 <_printf_i+0x23c>)
 800e574:	2778      	movs	r7, #120	@ 0x78
 800e576:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	6831      	ldr	r1, [r6, #0]
 800e57e:	061f      	lsls	r7, r3, #24
 800e580:	f851 5b04 	ldr.w	r5, [r1], #4
 800e584:	d402      	bmi.n	800e58c <_printf_i+0x188>
 800e586:	065f      	lsls	r7, r3, #25
 800e588:	bf48      	it	mi
 800e58a:	b2ad      	uxthmi	r5, r5
 800e58c:	6031      	str	r1, [r6, #0]
 800e58e:	07d9      	lsls	r1, r3, #31
 800e590:	bf44      	itt	mi
 800e592:	f043 0320 	orrmi.w	r3, r3, #32
 800e596:	6023      	strmi	r3, [r4, #0]
 800e598:	b11d      	cbz	r5, 800e5a2 <_printf_i+0x19e>
 800e59a:	2310      	movs	r3, #16
 800e59c:	e7ac      	b.n	800e4f8 <_printf_i+0xf4>
 800e59e:	4827      	ldr	r0, [pc, #156]	@ (800e63c <_printf_i+0x238>)
 800e5a0:	e7e9      	b.n	800e576 <_printf_i+0x172>
 800e5a2:	6823      	ldr	r3, [r4, #0]
 800e5a4:	f023 0320 	bic.w	r3, r3, #32
 800e5a8:	6023      	str	r3, [r4, #0]
 800e5aa:	e7f6      	b.n	800e59a <_printf_i+0x196>
 800e5ac:	4616      	mov	r6, r2
 800e5ae:	e7bd      	b.n	800e52c <_printf_i+0x128>
 800e5b0:	6833      	ldr	r3, [r6, #0]
 800e5b2:	6825      	ldr	r5, [r4, #0]
 800e5b4:	6961      	ldr	r1, [r4, #20]
 800e5b6:	1d18      	adds	r0, r3, #4
 800e5b8:	6030      	str	r0, [r6, #0]
 800e5ba:	062e      	lsls	r6, r5, #24
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	d501      	bpl.n	800e5c4 <_printf_i+0x1c0>
 800e5c0:	6019      	str	r1, [r3, #0]
 800e5c2:	e002      	b.n	800e5ca <_printf_i+0x1c6>
 800e5c4:	0668      	lsls	r0, r5, #25
 800e5c6:	d5fb      	bpl.n	800e5c0 <_printf_i+0x1bc>
 800e5c8:	8019      	strh	r1, [r3, #0]
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	6123      	str	r3, [r4, #16]
 800e5ce:	4616      	mov	r6, r2
 800e5d0:	e7bc      	b.n	800e54c <_printf_i+0x148>
 800e5d2:	6833      	ldr	r3, [r6, #0]
 800e5d4:	1d1a      	adds	r2, r3, #4
 800e5d6:	6032      	str	r2, [r6, #0]
 800e5d8:	681e      	ldr	r6, [r3, #0]
 800e5da:	6862      	ldr	r2, [r4, #4]
 800e5dc:	2100      	movs	r1, #0
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f7f1 fe56 	bl	8000290 <memchr>
 800e5e4:	b108      	cbz	r0, 800e5ea <_printf_i+0x1e6>
 800e5e6:	1b80      	subs	r0, r0, r6
 800e5e8:	6060      	str	r0, [r4, #4]
 800e5ea:	6863      	ldr	r3, [r4, #4]
 800e5ec:	6123      	str	r3, [r4, #16]
 800e5ee:	2300      	movs	r3, #0
 800e5f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e5f4:	e7aa      	b.n	800e54c <_printf_i+0x148>
 800e5f6:	6923      	ldr	r3, [r4, #16]
 800e5f8:	4632      	mov	r2, r6
 800e5fa:	4649      	mov	r1, r9
 800e5fc:	4640      	mov	r0, r8
 800e5fe:	47d0      	blx	sl
 800e600:	3001      	adds	r0, #1
 800e602:	d0ad      	beq.n	800e560 <_printf_i+0x15c>
 800e604:	6823      	ldr	r3, [r4, #0]
 800e606:	079b      	lsls	r3, r3, #30
 800e608:	d413      	bmi.n	800e632 <_printf_i+0x22e>
 800e60a:	68e0      	ldr	r0, [r4, #12]
 800e60c:	9b03      	ldr	r3, [sp, #12]
 800e60e:	4298      	cmp	r0, r3
 800e610:	bfb8      	it	lt
 800e612:	4618      	movlt	r0, r3
 800e614:	e7a6      	b.n	800e564 <_printf_i+0x160>
 800e616:	2301      	movs	r3, #1
 800e618:	4632      	mov	r2, r6
 800e61a:	4649      	mov	r1, r9
 800e61c:	4640      	mov	r0, r8
 800e61e:	47d0      	blx	sl
 800e620:	3001      	adds	r0, #1
 800e622:	d09d      	beq.n	800e560 <_printf_i+0x15c>
 800e624:	3501      	adds	r5, #1
 800e626:	68e3      	ldr	r3, [r4, #12]
 800e628:	9903      	ldr	r1, [sp, #12]
 800e62a:	1a5b      	subs	r3, r3, r1
 800e62c:	42ab      	cmp	r3, r5
 800e62e:	dcf2      	bgt.n	800e616 <_printf_i+0x212>
 800e630:	e7eb      	b.n	800e60a <_printf_i+0x206>
 800e632:	2500      	movs	r5, #0
 800e634:	f104 0619 	add.w	r6, r4, #25
 800e638:	e7f5      	b.n	800e626 <_printf_i+0x222>
 800e63a:	bf00      	nop
 800e63c:	0800f880 	.word	0x0800f880
 800e640:	0800f891 	.word	0x0800f891

0800e644 <memmove>:
 800e644:	4288      	cmp	r0, r1
 800e646:	b510      	push	{r4, lr}
 800e648:	eb01 0402 	add.w	r4, r1, r2
 800e64c:	d902      	bls.n	800e654 <memmove+0x10>
 800e64e:	4284      	cmp	r4, r0
 800e650:	4623      	mov	r3, r4
 800e652:	d807      	bhi.n	800e664 <memmove+0x20>
 800e654:	1e43      	subs	r3, r0, #1
 800e656:	42a1      	cmp	r1, r4
 800e658:	d008      	beq.n	800e66c <memmove+0x28>
 800e65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e65e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e662:	e7f8      	b.n	800e656 <memmove+0x12>
 800e664:	4402      	add	r2, r0
 800e666:	4601      	mov	r1, r0
 800e668:	428a      	cmp	r2, r1
 800e66a:	d100      	bne.n	800e66e <memmove+0x2a>
 800e66c:	bd10      	pop	{r4, pc}
 800e66e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e676:	e7f7      	b.n	800e668 <memmove+0x24>

0800e678 <_sbrk_r>:
 800e678:	b538      	push	{r3, r4, r5, lr}
 800e67a:	4d06      	ldr	r5, [pc, #24]	@ (800e694 <_sbrk_r+0x1c>)
 800e67c:	2300      	movs	r3, #0
 800e67e:	4604      	mov	r4, r0
 800e680:	4608      	mov	r0, r1
 800e682:	602b      	str	r3, [r5, #0]
 800e684:	f7f5 fc22 	bl	8003ecc <_sbrk>
 800e688:	1c43      	adds	r3, r0, #1
 800e68a:	d102      	bne.n	800e692 <_sbrk_r+0x1a>
 800e68c:	682b      	ldr	r3, [r5, #0]
 800e68e:	b103      	cbz	r3, 800e692 <_sbrk_r+0x1a>
 800e690:	6023      	str	r3, [r4, #0]
 800e692:	bd38      	pop	{r3, r4, r5, pc}
 800e694:	2001be50 	.word	0x2001be50

0800e698 <_realloc_r>:
 800e698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e69c:	4680      	mov	r8, r0
 800e69e:	4615      	mov	r5, r2
 800e6a0:	460c      	mov	r4, r1
 800e6a2:	b921      	cbnz	r1, 800e6ae <_realloc_r+0x16>
 800e6a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	f7ff bc59 	b.w	800df60 <_malloc_r>
 800e6ae:	b92a      	cbnz	r2, 800e6bc <_realloc_r+0x24>
 800e6b0:	f7ff fbea 	bl	800de88 <_free_r>
 800e6b4:	2400      	movs	r4, #0
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e6bc:	f000 f81a 	bl	800e6f4 <_malloc_usable_size_r>
 800e6c0:	4285      	cmp	r5, r0
 800e6c2:	4606      	mov	r6, r0
 800e6c4:	d802      	bhi.n	800e6cc <_realloc_r+0x34>
 800e6c6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e6ca:	d8f4      	bhi.n	800e6b6 <_realloc_r+0x1e>
 800e6cc:	4629      	mov	r1, r5
 800e6ce:	4640      	mov	r0, r8
 800e6d0:	f7ff fc46 	bl	800df60 <_malloc_r>
 800e6d4:	4607      	mov	r7, r0
 800e6d6:	2800      	cmp	r0, #0
 800e6d8:	d0ec      	beq.n	800e6b4 <_realloc_r+0x1c>
 800e6da:	42b5      	cmp	r5, r6
 800e6dc:	462a      	mov	r2, r5
 800e6de:	4621      	mov	r1, r4
 800e6e0:	bf28      	it	cs
 800e6e2:	4632      	movcs	r2, r6
 800e6e4:	f7ff fbc2 	bl	800de6c <memcpy>
 800e6e8:	4621      	mov	r1, r4
 800e6ea:	4640      	mov	r0, r8
 800e6ec:	f7ff fbcc 	bl	800de88 <_free_r>
 800e6f0:	463c      	mov	r4, r7
 800e6f2:	e7e0      	b.n	800e6b6 <_realloc_r+0x1e>

0800e6f4 <_malloc_usable_size_r>:
 800e6f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6f8:	1f18      	subs	r0, r3, #4
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	bfbc      	itt	lt
 800e6fe:	580b      	ldrlt	r3, [r1, r0]
 800e700:	18c0      	addlt	r0, r0, r3
 800e702:	4770      	bx	lr

0800e704 <sqrt>:
 800e704:	b538      	push	{r3, r4, r5, lr}
 800e706:	ed2d 8b02 	vpush	{d8}
 800e70a:	ec55 4b10 	vmov	r4, r5, d0
 800e70e:	f000 f825 	bl	800e75c <__ieee754_sqrt>
 800e712:	4622      	mov	r2, r4
 800e714:	462b      	mov	r3, r5
 800e716:	4620      	mov	r0, r4
 800e718:	4629      	mov	r1, r5
 800e71a:	eeb0 8a40 	vmov.f32	s16, s0
 800e71e:	eef0 8a60 	vmov.f32	s17, s1
 800e722:	f7f2 fa5b 	bl	8000bdc <__aeabi_dcmpun>
 800e726:	b990      	cbnz	r0, 800e74e <sqrt+0x4a>
 800e728:	2200      	movs	r2, #0
 800e72a:	2300      	movs	r3, #0
 800e72c:	4620      	mov	r0, r4
 800e72e:	4629      	mov	r1, r5
 800e730:	f7f2 fa2c 	bl	8000b8c <__aeabi_dcmplt>
 800e734:	b158      	cbz	r0, 800e74e <sqrt+0x4a>
 800e736:	f7ff fb6d 	bl	800de14 <__errno>
 800e73a:	2321      	movs	r3, #33	@ 0x21
 800e73c:	6003      	str	r3, [r0, #0]
 800e73e:	2200      	movs	r2, #0
 800e740:	2300      	movs	r3, #0
 800e742:	4610      	mov	r0, r2
 800e744:	4619      	mov	r1, r3
 800e746:	f7f2 f8d9 	bl	80008fc <__aeabi_ddiv>
 800e74a:	ec41 0b18 	vmov	d8, r0, r1
 800e74e:	eeb0 0a48 	vmov.f32	s0, s16
 800e752:	eef0 0a68 	vmov.f32	s1, s17
 800e756:	ecbd 8b02 	vpop	{d8}
 800e75a:	bd38      	pop	{r3, r4, r5, pc}

0800e75c <__ieee754_sqrt>:
 800e75c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e760:	4a68      	ldr	r2, [pc, #416]	@ (800e904 <__ieee754_sqrt+0x1a8>)
 800e762:	ec55 4b10 	vmov	r4, r5, d0
 800e766:	43aa      	bics	r2, r5
 800e768:	462b      	mov	r3, r5
 800e76a:	4621      	mov	r1, r4
 800e76c:	d110      	bne.n	800e790 <__ieee754_sqrt+0x34>
 800e76e:	4622      	mov	r2, r4
 800e770:	4620      	mov	r0, r4
 800e772:	4629      	mov	r1, r5
 800e774:	f7f1 ff98 	bl	80006a8 <__aeabi_dmul>
 800e778:	4602      	mov	r2, r0
 800e77a:	460b      	mov	r3, r1
 800e77c:	4620      	mov	r0, r4
 800e77e:	4629      	mov	r1, r5
 800e780:	f7f1 fddc 	bl	800033c <__adddf3>
 800e784:	4604      	mov	r4, r0
 800e786:	460d      	mov	r5, r1
 800e788:	ec45 4b10 	vmov	d0, r4, r5
 800e78c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e790:	2d00      	cmp	r5, #0
 800e792:	dc0e      	bgt.n	800e7b2 <__ieee754_sqrt+0x56>
 800e794:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e798:	4322      	orrs	r2, r4
 800e79a:	d0f5      	beq.n	800e788 <__ieee754_sqrt+0x2c>
 800e79c:	b19d      	cbz	r5, 800e7c6 <__ieee754_sqrt+0x6a>
 800e79e:	4622      	mov	r2, r4
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	4629      	mov	r1, r5
 800e7a4:	f7f1 fdc8 	bl	8000338 <__aeabi_dsub>
 800e7a8:	4602      	mov	r2, r0
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	f7f2 f8a6 	bl	80008fc <__aeabi_ddiv>
 800e7b0:	e7e8      	b.n	800e784 <__ieee754_sqrt+0x28>
 800e7b2:	152a      	asrs	r2, r5, #20
 800e7b4:	d115      	bne.n	800e7e2 <__ieee754_sqrt+0x86>
 800e7b6:	2000      	movs	r0, #0
 800e7b8:	e009      	b.n	800e7ce <__ieee754_sqrt+0x72>
 800e7ba:	0acb      	lsrs	r3, r1, #11
 800e7bc:	3a15      	subs	r2, #21
 800e7be:	0549      	lsls	r1, r1, #21
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d0fa      	beq.n	800e7ba <__ieee754_sqrt+0x5e>
 800e7c4:	e7f7      	b.n	800e7b6 <__ieee754_sqrt+0x5a>
 800e7c6:	462a      	mov	r2, r5
 800e7c8:	e7fa      	b.n	800e7c0 <__ieee754_sqrt+0x64>
 800e7ca:	005b      	lsls	r3, r3, #1
 800e7cc:	3001      	adds	r0, #1
 800e7ce:	02dc      	lsls	r4, r3, #11
 800e7d0:	d5fb      	bpl.n	800e7ca <__ieee754_sqrt+0x6e>
 800e7d2:	1e44      	subs	r4, r0, #1
 800e7d4:	1b12      	subs	r2, r2, r4
 800e7d6:	f1c0 0420 	rsb	r4, r0, #32
 800e7da:	fa21 f404 	lsr.w	r4, r1, r4
 800e7de:	4323      	orrs	r3, r4
 800e7e0:	4081      	lsls	r1, r0
 800e7e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e7e6:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800e7ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e7ee:	07d2      	lsls	r2, r2, #31
 800e7f0:	bf5c      	itt	pl
 800e7f2:	005b      	lslpl	r3, r3, #1
 800e7f4:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e7f8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e7fc:	bf58      	it	pl
 800e7fe:	0049      	lslpl	r1, r1, #1
 800e800:	2600      	movs	r6, #0
 800e802:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e806:	106d      	asrs	r5, r5, #1
 800e808:	0049      	lsls	r1, r1, #1
 800e80a:	2016      	movs	r0, #22
 800e80c:	4632      	mov	r2, r6
 800e80e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e812:	1917      	adds	r7, r2, r4
 800e814:	429f      	cmp	r7, r3
 800e816:	bfde      	ittt	le
 800e818:	193a      	addle	r2, r7, r4
 800e81a:	1bdb      	suble	r3, r3, r7
 800e81c:	1936      	addle	r6, r6, r4
 800e81e:	0fcf      	lsrs	r7, r1, #31
 800e820:	3801      	subs	r0, #1
 800e822:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e826:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e82a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e82e:	d1f0      	bne.n	800e812 <__ieee754_sqrt+0xb6>
 800e830:	4604      	mov	r4, r0
 800e832:	2720      	movs	r7, #32
 800e834:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e838:	429a      	cmp	r2, r3
 800e83a:	eb00 0e0c 	add.w	lr, r0, ip
 800e83e:	db02      	blt.n	800e846 <__ieee754_sqrt+0xea>
 800e840:	d113      	bne.n	800e86a <__ieee754_sqrt+0x10e>
 800e842:	458e      	cmp	lr, r1
 800e844:	d811      	bhi.n	800e86a <__ieee754_sqrt+0x10e>
 800e846:	f1be 0f00 	cmp.w	lr, #0
 800e84a:	eb0e 000c 	add.w	r0, lr, ip
 800e84e:	da42      	bge.n	800e8d6 <__ieee754_sqrt+0x17a>
 800e850:	2800      	cmp	r0, #0
 800e852:	db40      	blt.n	800e8d6 <__ieee754_sqrt+0x17a>
 800e854:	f102 0801 	add.w	r8, r2, #1
 800e858:	1a9b      	subs	r3, r3, r2
 800e85a:	458e      	cmp	lr, r1
 800e85c:	bf88      	it	hi
 800e85e:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800e862:	eba1 010e 	sub.w	r1, r1, lr
 800e866:	4464      	add	r4, ip
 800e868:	4642      	mov	r2, r8
 800e86a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e86e:	3f01      	subs	r7, #1
 800e870:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e874:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e878:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e87c:	d1dc      	bne.n	800e838 <__ieee754_sqrt+0xdc>
 800e87e:	4319      	orrs	r1, r3
 800e880:	d01b      	beq.n	800e8ba <__ieee754_sqrt+0x15e>
 800e882:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e908 <__ieee754_sqrt+0x1ac>
 800e886:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e90c <__ieee754_sqrt+0x1b0>
 800e88a:	e9da 0100 	ldrd	r0, r1, [sl]
 800e88e:	e9db 2300 	ldrd	r2, r3, [fp]
 800e892:	f7f1 fd51 	bl	8000338 <__aeabi_dsub>
 800e896:	e9da 8900 	ldrd	r8, r9, [sl]
 800e89a:	4602      	mov	r2, r0
 800e89c:	460b      	mov	r3, r1
 800e89e:	4640      	mov	r0, r8
 800e8a0:	4649      	mov	r1, r9
 800e8a2:	f7f2 f97d 	bl	8000ba0 <__aeabi_dcmple>
 800e8a6:	b140      	cbz	r0, 800e8ba <__ieee754_sqrt+0x15e>
 800e8a8:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800e8ac:	e9da 0100 	ldrd	r0, r1, [sl]
 800e8b0:	e9db 2300 	ldrd	r2, r3, [fp]
 800e8b4:	d111      	bne.n	800e8da <__ieee754_sqrt+0x17e>
 800e8b6:	3601      	adds	r6, #1
 800e8b8:	463c      	mov	r4, r7
 800e8ba:	1072      	asrs	r2, r6, #1
 800e8bc:	0863      	lsrs	r3, r4, #1
 800e8be:	07f1      	lsls	r1, r6, #31
 800e8c0:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e8c4:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e8c8:	bf48      	it	mi
 800e8ca:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e8ce:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	e756      	b.n	800e784 <__ieee754_sqrt+0x28>
 800e8d6:	4690      	mov	r8, r2
 800e8d8:	e7be      	b.n	800e858 <__ieee754_sqrt+0xfc>
 800e8da:	f7f1 fd2f 	bl	800033c <__adddf3>
 800e8de:	e9da 8900 	ldrd	r8, r9, [sl]
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	4640      	mov	r0, r8
 800e8e8:	4649      	mov	r1, r9
 800e8ea:	f7f2 f94f 	bl	8000b8c <__aeabi_dcmplt>
 800e8ee:	b120      	cbz	r0, 800e8fa <__ieee754_sqrt+0x19e>
 800e8f0:	1ca0      	adds	r0, r4, #2
 800e8f2:	bf08      	it	eq
 800e8f4:	3601      	addeq	r6, #1
 800e8f6:	3402      	adds	r4, #2
 800e8f8:	e7df      	b.n	800e8ba <__ieee754_sqrt+0x15e>
 800e8fa:	1c63      	adds	r3, r4, #1
 800e8fc:	f023 0401 	bic.w	r4, r3, #1
 800e900:	e7db      	b.n	800e8ba <__ieee754_sqrt+0x15e>
 800e902:	bf00      	nop
 800e904:	7ff00000 	.word	0x7ff00000
 800e908:	200000f8 	.word	0x200000f8
 800e90c:	200000f0 	.word	0x200000f0

0800e910 <_init>:
 800e910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e912:	bf00      	nop
 800e914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e916:	bc08      	pop	{r3}
 800e918:	469e      	mov	lr, r3
 800e91a:	4770      	bx	lr

0800e91c <_fini>:
 800e91c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e91e:	bf00      	nop
 800e920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e922:	bc08      	pop	{r3}
 800e924:	469e      	mov	lr, r3
 800e926:	4770      	bx	lr
