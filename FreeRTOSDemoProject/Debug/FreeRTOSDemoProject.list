
FreeRTOSDemoProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e3c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ad0  08009fcc  08009fcc  0000afcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa9c  0800aa9c  0000c0cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa9c  0800aa9c  0000ba9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aaa4  0800aaa4  0000c0cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aaa4  0800aaa4  0000baa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aaa8  0800aaa8  0000baa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000cc  20000000  0800aaac  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c0cc  2**0
                  CONTENTS
 10 .bss          00019510  200000cc  200000cc  0000c0cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200195dc  200195dc  0000c0cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c0cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018bb1  00000000  00000000  0000c0fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003da1  00000000  00000000  00024cad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015d0  00000000  00000000  00028a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010ef  00000000  00000000  0002a020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025009  00000000  00000000  0002b10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b061  00000000  00000000  00050118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd0eb  00000000  00000000  0006b179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148264  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060f0  00000000  00000000  001482a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  0014e398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000cc 	.word	0x200000cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009fb4 	.word	0x08009fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000d0 	.word	0x200000d0
 80001cc:	08009fb4 	.word	0x08009fb4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2iz>:
 8000a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a44:	d215      	bcs.n	8000a72 <__aeabi_d2iz+0x36>
 8000a46:	d511      	bpl.n	8000a6c <__aeabi_d2iz+0x30>
 8000a48:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d912      	bls.n	8000a78 <__aeabi_d2iz+0x3c>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a62:	fa23 f002 	lsr.w	r0, r3, r2
 8000a66:	bf18      	it	ne
 8000a68:	4240      	negne	r0, r0
 8000a6a:	4770      	bx	lr
 8000a6c:	f04f 0000 	mov.w	r0, #0
 8000a70:	4770      	bx	lr
 8000a72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a76:	d105      	bne.n	8000a84 <__aeabi_d2iz+0x48>
 8000a78:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a7c:	bf08      	it	eq
 8000a7e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aa0:	f000 b96a 	b.w	8000d78 <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	460c      	mov	r4, r1
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d14e      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000ac8:	4694      	mov	ip, r2
 8000aca:	458c      	cmp	ip, r1
 8000acc:	4686      	mov	lr, r0
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	d962      	bls.n	8000b9a <__udivmoddi4+0xde>
 8000ad4:	b14a      	cbz	r2, 8000aea <__udivmoddi4+0x2e>
 8000ad6:	f1c2 0320 	rsb	r3, r2, #32
 8000ada:	4091      	lsls	r1, r2
 8000adc:	fa20 f303 	lsr.w	r3, r0, r3
 8000ae0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae4:	4319      	orrs	r1, r3
 8000ae6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000aea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000aee:	fa1f f68c 	uxth.w	r6, ip
 8000af2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000af6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000afa:	fb07 1114 	mls	r1, r7, r4, r1
 8000afe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b02:	fb04 f106 	mul.w	r1, r4, r6
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b12:	f080 8112 	bcs.w	8000d3a <__udivmoddi4+0x27e>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 810f 	bls.w	8000d3a <__udivmoddi4+0x27e>
 8000b1c:	3c02      	subs	r4, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a59      	subs	r1, r3, r1
 8000b22:	fa1f f38e 	uxth.w	r3, lr
 8000b26:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b2a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb00 f606 	mul.w	r6, r0, r6
 8000b36:	429e      	cmp	r6, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x94>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b42:	f080 80fc 	bcs.w	8000d3e <__udivmoddi4+0x282>
 8000b46:	429e      	cmp	r6, r3
 8000b48:	f240 80f9 	bls.w	8000d3e <__udivmoddi4+0x282>
 8000b4c:	4463      	add	r3, ip
 8000b4e:	3802      	subs	r0, #2
 8000b50:	1b9b      	subs	r3, r3, r6
 8000b52:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b56:	2100      	movs	r1, #0
 8000b58:	b11d      	cbz	r5, 8000b62 <__udivmoddi4+0xa6>
 8000b5a:	40d3      	lsrs	r3, r2
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d905      	bls.n	8000b76 <__udivmoddi4+0xba>
 8000b6a:	b10d      	cbz	r5, 8000b70 <__udivmoddi4+0xb4>
 8000b6c:	e9c5 0100 	strd	r0, r1, [r5]
 8000b70:	2100      	movs	r1, #0
 8000b72:	4608      	mov	r0, r1
 8000b74:	e7f5      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b76:	fab3 f183 	clz	r1, r3
 8000b7a:	2900      	cmp	r1, #0
 8000b7c:	d146      	bne.n	8000c0c <__udivmoddi4+0x150>
 8000b7e:	42a3      	cmp	r3, r4
 8000b80:	d302      	bcc.n	8000b88 <__udivmoddi4+0xcc>
 8000b82:	4290      	cmp	r0, r2
 8000b84:	f0c0 80f0 	bcc.w	8000d68 <__udivmoddi4+0x2ac>
 8000b88:	1a86      	subs	r6, r0, r2
 8000b8a:	eb64 0303 	sbc.w	r3, r4, r3
 8000b8e:	2001      	movs	r0, #1
 8000b90:	2d00      	cmp	r5, #0
 8000b92:	d0e6      	beq.n	8000b62 <__udivmoddi4+0xa6>
 8000b94:	e9c5 6300 	strd	r6, r3, [r5]
 8000b98:	e7e3      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000b9a:	2a00      	cmp	r2, #0
 8000b9c:	f040 8090 	bne.w	8000cc0 <__udivmoddi4+0x204>
 8000ba0:	eba1 040c 	sub.w	r4, r1, ip
 8000ba4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ba8:	fa1f f78c 	uxth.w	r7, ip
 8000bac:	2101      	movs	r1, #1
 8000bae:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bb6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bbe:	fb07 f006 	mul.w	r0, r7, r6
 8000bc2:	4298      	cmp	r0, r3
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0x11c>
 8000bc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bca:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bce:	d202      	bcs.n	8000bd6 <__udivmoddi4+0x11a>
 8000bd0:	4298      	cmp	r0, r3
 8000bd2:	f200 80cd 	bhi.w	8000d70 <__udivmoddi4+0x2b4>
 8000bd6:	4626      	mov	r6, r4
 8000bd8:	1a1c      	subs	r4, r3, r0
 8000bda:	fa1f f38e 	uxth.w	r3, lr
 8000bde:	fbb4 f0f8 	udiv	r0, r4, r8
 8000be2:	fb08 4410 	mls	r4, r8, r0, r4
 8000be6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bea:	fb00 f707 	mul.w	r7, r0, r7
 8000bee:	429f      	cmp	r7, r3
 8000bf0:	d908      	bls.n	8000c04 <__udivmoddi4+0x148>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000bfa:	d202      	bcs.n	8000c02 <__udivmoddi4+0x146>
 8000bfc:	429f      	cmp	r7, r3
 8000bfe:	f200 80b0 	bhi.w	8000d62 <__udivmoddi4+0x2a6>
 8000c02:	4620      	mov	r0, r4
 8000c04:	1bdb      	subs	r3, r3, r7
 8000c06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c0a:	e7a5      	b.n	8000b58 <__udivmoddi4+0x9c>
 8000c0c:	f1c1 0620 	rsb	r6, r1, #32
 8000c10:	408b      	lsls	r3, r1
 8000c12:	fa22 f706 	lsr.w	r7, r2, r6
 8000c16:	431f      	orrs	r7, r3
 8000c18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c20:	ea43 030c 	orr.w	r3, r3, ip
 8000c24:	40f4      	lsrs	r4, r6
 8000c26:	fa00 f801 	lsl.w	r8, r0, r1
 8000c2a:	0c38      	lsrs	r0, r7, #16
 8000c2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c30:	fbb4 fef0 	udiv	lr, r4, r0
 8000c34:	fa1f fc87 	uxth.w	ip, r7
 8000c38:	fb00 441e 	mls	r4, r0, lr, r4
 8000c3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c40:	fb0e f90c 	mul.w	r9, lr, ip
 8000c44:	45a1      	cmp	r9, r4
 8000c46:	fa02 f201 	lsl.w	r2, r2, r1
 8000c4a:	d90a      	bls.n	8000c62 <__udivmoddi4+0x1a6>
 8000c4c:	193c      	adds	r4, r7, r4
 8000c4e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c52:	f080 8084 	bcs.w	8000d5e <__udivmoddi4+0x2a2>
 8000c56:	45a1      	cmp	r9, r4
 8000c58:	f240 8081 	bls.w	8000d5e <__udivmoddi4+0x2a2>
 8000c5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c60:	443c      	add	r4, r7
 8000c62:	eba4 0409 	sub.w	r4, r4, r9
 8000c66:	fa1f f983 	uxth.w	r9, r3
 8000c6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000c72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c7a:	45a4      	cmp	ip, r4
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0x1d2>
 8000c7e:	193c      	adds	r4, r7, r4
 8000c80:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000c84:	d267      	bcs.n	8000d56 <__udivmoddi4+0x29a>
 8000c86:	45a4      	cmp	ip, r4
 8000c88:	d965      	bls.n	8000d56 <__udivmoddi4+0x29a>
 8000c8a:	3b02      	subs	r3, #2
 8000c8c:	443c      	add	r4, r7
 8000c8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000c92:	fba0 9302 	umull	r9, r3, r0, r2
 8000c96:	eba4 040c 	sub.w	r4, r4, ip
 8000c9a:	429c      	cmp	r4, r3
 8000c9c:	46ce      	mov	lr, r9
 8000c9e:	469c      	mov	ip, r3
 8000ca0:	d351      	bcc.n	8000d46 <__udivmoddi4+0x28a>
 8000ca2:	d04e      	beq.n	8000d42 <__udivmoddi4+0x286>
 8000ca4:	b155      	cbz	r5, 8000cbc <__udivmoddi4+0x200>
 8000ca6:	ebb8 030e 	subs.w	r3, r8, lr
 8000caa:	eb64 040c 	sbc.w	r4, r4, ip
 8000cae:	fa04 f606 	lsl.w	r6, r4, r6
 8000cb2:	40cb      	lsrs	r3, r1
 8000cb4:	431e      	orrs	r6, r3
 8000cb6:	40cc      	lsrs	r4, r1
 8000cb8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	e750      	b.n	8000b62 <__udivmoddi4+0xa6>
 8000cc0:	f1c2 0320 	rsb	r3, r2, #32
 8000cc4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cc8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ccc:	fa24 f303 	lsr.w	r3, r4, r3
 8000cd0:	4094      	lsls	r4, r2
 8000cd2:	430c      	orrs	r4, r1
 8000cd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cdc:	fa1f f78c 	uxth.w	r7, ip
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ce8:	0c23      	lsrs	r3, r4, #16
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f107 	mul.w	r1, r0, r7
 8000cf2:	4299      	cmp	r1, r3
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x24c>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000cfe:	d22c      	bcs.n	8000d5a <__udivmoddi4+0x29e>
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d92a      	bls.n	8000d5a <__udivmoddi4+0x29e>
 8000d04:	3802      	subs	r0, #2
 8000d06:	4463      	add	r3, ip
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d10:	fb08 3311 	mls	r3, r8, r1, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb01 f307 	mul.w	r3, r1, r7
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x276>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d28:	d213      	bcs.n	8000d52 <__udivmoddi4+0x296>
 8000d2a:	42a3      	cmp	r3, r4
 8000d2c:	d911      	bls.n	8000d52 <__udivmoddi4+0x296>
 8000d2e:	3902      	subs	r1, #2
 8000d30:	4464      	add	r4, ip
 8000d32:	1ae4      	subs	r4, r4, r3
 8000d34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d38:	e739      	b.n	8000bae <__udivmoddi4+0xf2>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	e6f0      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e706      	b.n	8000b50 <__udivmoddi4+0x94>
 8000d42:	45c8      	cmp	r8, r9
 8000d44:	d2ae      	bcs.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d4e:	3801      	subs	r0, #1
 8000d50:	e7a8      	b.n	8000ca4 <__udivmoddi4+0x1e8>
 8000d52:	4631      	mov	r1, r6
 8000d54:	e7ed      	b.n	8000d32 <__udivmoddi4+0x276>
 8000d56:	4603      	mov	r3, r0
 8000d58:	e799      	b.n	8000c8e <__udivmoddi4+0x1d2>
 8000d5a:	4630      	mov	r0, r6
 8000d5c:	e7d4      	b.n	8000d08 <__udivmoddi4+0x24c>
 8000d5e:	46d6      	mov	lr, sl
 8000d60:	e77f      	b.n	8000c62 <__udivmoddi4+0x1a6>
 8000d62:	4463      	add	r3, ip
 8000d64:	3802      	subs	r0, #2
 8000d66:	e74d      	b.n	8000c04 <__udivmoddi4+0x148>
 8000d68:	4606      	mov	r6, r0
 8000d6a:	4623      	mov	r3, r4
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	e70f      	b.n	8000b90 <__udivmoddi4+0xd4>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	4463      	add	r3, ip
 8000d74:	e730      	b.n	8000bd8 <__udivmoddi4+0x11c>
 8000d76:	bf00      	nop

08000d78 <__aeabi_idiv0>:
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop

08000d7c <acc_task>:
/****************************************************
 *  Public functions                                *
 ****************************************************/

void acc_task(void* param)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08c      	sub	sp, #48	@ 0x30
 8000d80:	af02      	add	r7, sp, #8
 8000d82:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;
	int16_t acc_data[3];		// Array to hold accelerometer values
	char acc_flag[3] = {0};		// Array to hold new data flags
 8000d84:	4b6b      	ldr	r3, [pc, #428]	@ (8000f34 <acc_task+0x1b8>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	81bb      	strh	r3, [r7, #12]
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	73bb      	strb	r3, [r7, #14]

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000d8e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2300      	movs	r3, #0
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	f007 f99e 	bl	80080dc <xTaskGenericNotifyWait>

		// Display Accelerometer menu for the user
		xQueueSend(q_print, &msg_acc_menu, portMAX_DELAY);
 8000da0:	4b65      	ldr	r3, [pc, #404]	@ (8000f38 <acc_task+0x1bc>)
 8000da2:	6818      	ldr	r0, [r3, #0]
 8000da4:	2300      	movs	r3, #0
 8000da6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000daa:	4964      	ldr	r1, [pc, #400]	@ (8000f3c <acc_task+0x1c0>)
 8000dac:	f005 fec8 	bl	8006b40 <xQueueGenericSend>

		// Wait for the user to make a selection
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8000db0:	f107 0318 	add.w	r3, r7, #24
 8000db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000db8:	9200      	str	r2, [sp, #0]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	f007 f98c 	bl	80080dc <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8000dc4:	69bb      	ldr	r3, [r7, #24]
 8000dc6:	61fb      	str	r3, [r7, #28]

		// Set all new data flags to 0
		for(int i=0; i<3; i++) {
 8000dc8:	2300      	movs	r3, #0
 8000dca:	627b      	str	r3, [r7, #36]	@ 0x24
 8000dcc:	e008      	b.n	8000de0 <acc_task+0x64>
			acc_flag[i] = 0;
 8000dce:	f107 020c 	add.w	r2, r7, #12
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000dd4:	4413      	add	r3, r2
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<3; i++) {
 8000dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ddc:	3301      	adds	r3, #1
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
 8000de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	ddf3      	ble.n	8000dce <acc_task+0x52>
		}

		// Process command
		if(msg->len <= 4) {
 8000de6:	69fb      	ldr	r3, [r7, #28]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	f200 808b 	bhi.w	8000f06 <acc_task+0x18a>
			if(!strcmp((char*)msg->payload, "X")) {
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	4953      	ldr	r1, [pc, #332]	@ (8000f40 <acc_task+0x1c4>)
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff f9eb 	bl	80001d0 <strcmp>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d10f      	bne.n	8000e20 <acc_task+0xa4>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);			// Read data
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4618      	mov	r0, r3
 8000e06:	f000 f8d5 	bl	8000fb4 <accelerometer_read>
				acc_flag[0] = 1; 						// Set X-axis new data flag
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	733b      	strb	r3, [r7, #12]
				show_acc_data(acc_data, acc_flag);		// Show data
 8000e0e:	f107 020c 	add.w	r2, r7, #12
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4611      	mov	r1, r2
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f000 f911 	bl	8001040 <show_acc_data>
 8000e1e:	e07a      	b.n	8000f16 <acc_task+0x19a>
			}
			else if(!strcmp((char*)msg->payload, "Y")) {
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	4948      	ldr	r1, [pc, #288]	@ (8000f44 <acc_task+0x1c8>)
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff f9d3 	bl	80001d0 <strcmp>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d10f      	bne.n	8000e50 <acc_task+0xd4>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);			// Read data
 8000e30:	f107 0310 	add.w	r3, r7, #16
 8000e34:	4618      	mov	r0, r3
 8000e36:	f000 f8bd 	bl	8000fb4 <accelerometer_read>
				acc_flag[1] = 1; 						// Set Y-axis new data flag
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	737b      	strb	r3, [r7, #13]
				show_acc_data(acc_data, acc_flag);		// Show data
 8000e3e:	f107 020c 	add.w	r2, r7, #12
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f000 f8f9 	bl	8001040 <show_acc_data>
 8000e4e:	e062      	b.n	8000f16 <acc_task+0x19a>
			}
			else if(!strcmp((char*)msg->payload, "Z")) {
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	493d      	ldr	r1, [pc, #244]	@ (8000f48 <acc_task+0x1cc>)
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff f9bb 	bl	80001d0 <strcmp>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d10f      	bne.n	8000e80 <acc_task+0x104>
				// Read accelerometer for X-axis only
				accelerometer_read(acc_data);			// Read data
 8000e60:	f107 0310 	add.w	r3, r7, #16
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f8a5 	bl	8000fb4 <accelerometer_read>
				acc_flag[2] = 1; 						// Set Z-axis new data flag
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	73bb      	strb	r3, [r7, #14]
				show_acc_data(acc_data, acc_flag);		// Show data
 8000e6e:	f107 020c 	add.w	r2, r7, #12
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 f8e1 	bl	8001040 <show_acc_data>
 8000e7e:	e04a      	b.n	8000f16 <acc_task+0x19a>
			}
			else if(!strcmp((char*)msg->payload, "All")) {
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	4932      	ldr	r1, [pc, #200]	@ (8000f4c <acc_task+0x1d0>)
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff f9a3 	bl	80001d0 <strcmp>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d11c      	bne.n	8000eca <acc_task+0x14e>
				accelerometer_read(acc_data);			// Read data
 8000e90:	f107 0310 	add.w	r3, r7, #16
 8000e94:	4618      	mov	r0, r3
 8000e96:	f000 f88d 	bl	8000fb4 <accelerometer_read>
				for(int i=0; i<3; i++) acc_flag[i] = 1; // Set new data flags for all axes
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
 8000e9e:	e008      	b.n	8000eb2 <acc_task+0x136>
 8000ea0:	f107 020c 	add.w	r2, r7, #12
 8000ea4:	6a3b      	ldr	r3, [r7, #32]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	6a3b      	ldr	r3, [r7, #32]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	623b      	str	r3, [r7, #32]
 8000eb2:	6a3b      	ldr	r3, [r7, #32]
 8000eb4:	2b02      	cmp	r3, #2
 8000eb6:	ddf3      	ble.n	8000ea0 <acc_task+0x124>
				show_acc_data(acc_data, acc_flag);		// Show data
 8000eb8:	f107 020c 	add.w	r2, r7, #12
 8000ebc:	f107 0310 	add.w	r3, r7, #16
 8000ec0:	4611      	mov	r1, r2
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f8bc 	bl	8001040 <show_acc_data>
 8000ec8:	e025      	b.n	8000f16 <acc_task+0x19a>
			}
			else if (!strcmp((char*)msg->payload, "Main")) {
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	4920      	ldr	r1, [pc, #128]	@ (8000f50 <acc_task+0x1d4>)
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff f97e 	bl	80001d0 <strcmp>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d10c      	bne.n	8000ef4 <acc_task+0x178>
				// Update the system state
				curr_sys_state = sMainMenu;
 8000eda:	4b1e      	ldr	r3, [pc, #120]	@ (8000f54 <acc_task+0x1d8>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8000ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <acc_task+0x1dc>)
 8000ee2:	6818      	ldr	r0, [r3, #0]
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	9300      	str	r3, [sp, #0]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	2200      	movs	r2, #0
 8000eec:	2100      	movs	r1, #0
 8000eee:	f007 f975 	bl	80081dc <xTaskGenericNotify>
 8000ef2:	e010      	b.n	8000f16 <acc_task+0x19a>
			}
			else {
				xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 8000ef4:	4b10      	ldr	r3, [pc, #64]	@ (8000f38 <acc_task+0x1bc>)
 8000ef6:	6818      	ldr	r0, [r3, #0]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000efe:	4917      	ldr	r1, [pc, #92]	@ (8000f5c <acc_task+0x1e0>)
 8000f00:	f005 fe1e 	bl	8006b40 <xQueueGenericSend>
 8000f04:	e007      	b.n	8000f16 <acc_task+0x19a>
			}
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_acc, portMAX_DELAY);
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <acc_task+0x1bc>)
 8000f08:	6818      	ldr	r0, [r3, #0]
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f10:	4912      	ldr	r1, [pc, #72]	@ (8000f5c <acc_task+0x1e0>)
 8000f12:	f005 fe15 	bl	8006b40 <xQueueGenericSend>
		}

		// Notify self / accelerometer task if not returning to the main menu
		if (sAccMenu == curr_sys_state)
 8000f16:	4b0f      	ldr	r3, [pc, #60]	@ (8000f54 <acc_task+0x1d8>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b02      	cmp	r3, #2
 8000f1c:	f47f af37 	bne.w	8000d8e <acc_task+0x12>
			xTaskNotify(handle_acc_task, 0, eNoAction);
 8000f20:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <acc_task+0x1e4>)
 8000f22:	6818      	ldr	r0, [r3, #0]
 8000f24:	2300      	movs	r3, #0
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	f007 f955 	bl	80081dc <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8000f32:	e72c      	b.n	8000d8e <acc_task+0x12>
 8000f34:	0800a124 	.word	0x0800a124
 8000f38:	20000280 	.word	0x20000280
 8000f3c:	20000004 	.word	0x20000004
 8000f40:	0800a10c 	.word	0x0800a10c
 8000f44:	0800a110 	.word	0x0800a110
 8000f48:	0800a114 	.word	0x0800a114
 8000f4c:	0800a118 	.word	0x0800a118
 8000f50:	0800a11c 	.word	0x0800a11c
 8000f54:	20000299 	.word	0x20000299
 8000f58:	20000268 	.word	0x20000268
 8000f5c:	20000000 	.word	0x20000000
 8000f60:	2000027c 	.word	0x2000027c

08000f64 <accelerometer_init>:
	}
}

void accelerometer_init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
	// Configure CTRL_REG1_A: 100Hz, normal power mode, all axes enabled
	uint8_t configData = 0x57; // 0b01010111: 100Hz, normal power mode, all axes enabled
 8000f6a:	2357      	movs	r3, #87	@ 0x57
 8000f6c:	71fb      	strb	r3, [r7, #7]

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000f6e:	2200      	movs	r2, #0
 8000f70:	2108      	movs	r1, #8
 8000f72:	480e      	ldr	r0, [pc, #56]	@ (8000fac <accelerometer_init+0x48>)
 8000f74:	f002 fa86 	bl	8003484 <HAL_GPIO_WritePin>

	// Send the register address
	uint8_t reg = LSM303DLHC_CTRL_REG1_A;
 8000f78:	2320      	movs	r3, #32
 8000f7a:	71bb      	strb	r3, [r7, #6]
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000f7c:	1db9      	adds	r1, r7, #6
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f82:	2201      	movs	r2, #1
 8000f84:	480a      	ldr	r0, [pc, #40]	@ (8000fb0 <accelerometer_init+0x4c>)
 8000f86:	f003 fbf2 	bl	800476e <HAL_SPI_Transmit>

	// Send the configuration data
	HAL_SPI_Transmit(&hspi1, &configData, 1, HAL_MAX_DELAY);
 8000f8a:	1df9      	adds	r1, r7, #7
 8000f8c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f90:	2201      	movs	r2, #1
 8000f92:	4807      	ldr	r0, [pc, #28]	@ (8000fb0 <accelerometer_init+0x4c>)
 8000f94:	f003 fbeb 	bl	800476e <HAL_SPI_Transmit>

	// Pull CS high to deselect the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2108      	movs	r1, #8
 8000f9c:	4803      	ldr	r0, [pc, #12]	@ (8000fac <accelerometer_init+0x48>)
 8000f9e:	f002 fa71 	bl	8003484 <HAL_GPIO_WritePin>
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40021000 	.word	0x40021000
 8000fb0:	200001c8 	.word	0x200001c8

08000fb4 <accelerometer_read>:

void accelerometer_read(int16_t *acc_data)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	uint8_t sensor_reading[6];
	uint8_t reg = ACC_X_ADDR;
 8000fbc:	23a8      	movs	r3, #168	@ 0xa8
 8000fbe:	73fb      	strb	r3, [r7, #15]

	// Pull CS low to select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2108      	movs	r1, #8
 8000fc4:	481c      	ldr	r0, [pc, #112]	@ (8001038 <accelerometer_read+0x84>)
 8000fc6:	f002 fa5d 	bl	8003484 <HAL_GPIO_WritePin>

	// Send the register address
	HAL_SPI_Transmit(&hspi1, &reg, 1, HAL_MAX_DELAY);
 8000fca:	f107 010f 	add.w	r1, r7, #15
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4819      	ldr	r0, [pc, #100]	@ (800103c <accelerometer_read+0x88>)
 8000fd6:	f003 fbca 	bl	800476e <HAL_SPI_Transmit>

	// Receive the data
	HAL_SPI_Receive(&hspi1, sensor_reading, 6, HAL_MAX_DELAY);
 8000fda:	f107 0110 	add.w	r1, r7, #16
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fe2:	2206      	movs	r2, #6
 8000fe4:	4815      	ldr	r0, [pc, #84]	@ (800103c <accelerometer_read+0x88>)
 8000fe6:	f003 fd05 	bl	80049f4 <HAL_SPI_Receive>

	// Pull CS high to de-select the device
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2108      	movs	r1, #8
 8000fee:	4812      	ldr	r0, [pc, #72]	@ (8001038 <accelerometer_read+0x84>)
 8000ff0:	f002 fa48 	bl	8003484 <HAL_GPIO_WritePin>

	// Convert the sensor reading
	acc_data[0] = (int16_t)(sensor_reading[1] << 8 | sensor_reading[0]); // x
 8000ff4:	7c7b      	ldrb	r3, [r7, #17]
 8000ff6:	021b      	lsls	r3, r3, #8
 8000ff8:	b21a      	sxth	r2, r3
 8000ffa:	7c3b      	ldrb	r3, [r7, #16]
 8000ffc:	b21b      	sxth	r3, r3
 8000ffe:	4313      	orrs	r3, r2
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	801a      	strh	r2, [r3, #0]
	acc_data[1] = (int16_t)(sensor_reading[3] << 8 | sensor_reading[2]); // y
 8001006:	7cfb      	ldrb	r3, [r7, #19]
 8001008:	021b      	lsls	r3, r3, #8
 800100a:	b219      	sxth	r1, r3
 800100c:	7cbb      	ldrb	r3, [r7, #18]
 800100e:	b21a      	sxth	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3302      	adds	r3, #2
 8001014:	430a      	orrs	r2, r1
 8001016:	b212      	sxth	r2, r2
 8001018:	801a      	strh	r2, [r3, #0]
	acc_data[2] = (int16_t)(sensor_reading[5] << 8 | sensor_reading[4]); // z
 800101a:	7d7b      	ldrb	r3, [r7, #21]
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b219      	sxth	r1, r3
 8001020:	7d3b      	ldrb	r3, [r7, #20]
 8001022:	b21a      	sxth	r2, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3304      	adds	r3, #4
 8001028:	430a      	orrs	r2, r1
 800102a:	b212      	sxth	r2, r2
 800102c:	801a      	strh	r2, [r3, #0]
}
 800102e:	bf00      	nop
 8001030:	3718      	adds	r7, #24
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000
 800103c:	200001c8 	.word	0x200001c8

08001040 <show_acc_data>:

void show_acc_data(int16_t *acc_data, char *acc_flag)
{
 8001040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001042:	b097      	sub	sp, #92	@ 0x5c
 8001044:	af08      	add	r7, sp, #32
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
	// Set up buffer
	static char showacc[80];
	static char* acc = showacc;

	// Convert from raw sensor value to milli-g's [mg]
	int16_t x_mg = acc_data[0] * 2000 / 32768;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001050:	461a      	mov	r2, r3
 8001052:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001056:	fb02 f303 	mul.w	r3, r2, r3
 800105a:	2b00      	cmp	r3, #0
 800105c:	da02      	bge.n	8001064 <show_acc_data+0x24>
 800105e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001062:	337f      	adds	r3, #127	@ 0x7f
 8001064:	13db      	asrs	r3, r3, #15
 8001066:	86fb      	strh	r3, [r7, #54]	@ 0x36
	int16_t y_mg = acc_data[1] * 2000 / 32768;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3302      	adds	r3, #2
 800106c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001070:	461a      	mov	r2, r3
 8001072:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001076:	fb02 f303 	mul.w	r3, r2, r3
 800107a:	2b00      	cmp	r3, #0
 800107c:	da02      	bge.n	8001084 <show_acc_data+0x44>
 800107e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 8001082:	337f      	adds	r3, #127	@ 0x7f
 8001084:	13db      	asrs	r3, r3, #15
 8001086:	86bb      	strh	r3, [r7, #52]	@ 0x34
	int16_t z_mg = acc_data[2] * 2000 / 32768;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3304      	adds	r3, #4
 800108c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001090:	461a      	mov	r2, r3
 8001092:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001096:	fb02 f303 	mul.w	r3, r2, r3
 800109a:	2b00      	cmp	r3, #0
 800109c:	da02      	bge.n	80010a4 <show_acc_data+0x64>
 800109e:	f503 43ff 	add.w	r3, r3, #32640	@ 0x7f80
 80010a2:	337f      	adds	r3, #127	@ 0x7f
 80010a4:	13db      	asrs	r3, r3, #15
 80010a6:	867b      	strh	r3, [r7, #50]	@ 0x32

	// Variables to simulate floating point numbers
	int x_i, x_d, y_i, y_d, z_i, z_d;
	char x_s[2] = {"+"};
 80010a8:	232b      	movs	r3, #43	@ 0x2b
 80010aa:	82bb      	strh	r3, [r7, #20]
	char y_s[2] = {"+"};
 80010ac:	232b      	movs	r3, #43	@ 0x2b
 80010ae:	823b      	strh	r3, [r7, #16]
	char z_s[2] = {"+"};
 80010b0:	232b      	movs	r3, #43	@ 0x2b
 80010b2:	81bb      	strh	r3, [r7, #12]

	// Display the data that's available
	// All axes
	if((acc_flag[0] == 1) && (acc_flag[1] == 1) && (acc_flag[2] == 1)) {
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d141      	bne.n	8001140 <show_acc_data+0x100>
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	3301      	adds	r3, #1
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b01      	cmp	r3, #1
 80010c4:	d13c      	bne.n	8001140 <show_acc_data+0x100>
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	3302      	adds	r3, #2
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d137      	bne.n	8001140 <show_acc_data+0x100>
		split_integer(x_mg, x_s, &x_i, &x_d);
 80010d0:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 80010d4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010d8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80010dc:	f107 0114 	add.w	r1, r7, #20
 80010e0:	f000 f894 	bl	800120c <split_integer>
		split_integer(y_mg, y_s, &y_i, &y_d);
 80010e4:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	@ 0x34
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80010f0:	f107 0110 	add.w	r1, r7, #16
 80010f4:	f000 f88a 	bl	800120c <split_integer>
		split_integer(z_mg, z_s, &z_i, &z_d);
 80010f8:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	@ 0x32
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	f107 021c 	add.w	r2, r7, #28
 8001104:	f107 010c 	add.w	r1, r7, #12
 8001108:	f000 f880 	bl	800120c <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: X = %s%d.%d g, Y = %s%d.%d g, Z = %s%d.%d g\r\n", x_s, x_i, x_d, y_s, y_i, y_d, z_s, z_i, z_d);
 800110c:	6afe      	ldr	r6, [r7, #44]	@ 0x2c
 800110e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001110:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001112:	6a39      	ldr	r1, [r7, #32]
 8001114:	69f8      	ldr	r0, [r7, #28]
 8001116:	69bc      	ldr	r4, [r7, #24]
 8001118:	f107 0514 	add.w	r5, r7, #20
 800111c:	9406      	str	r4, [sp, #24]
 800111e:	9005      	str	r0, [sp, #20]
 8001120:	f107 000c 	add.w	r0, r7, #12
 8001124:	9004      	str	r0, [sp, #16]
 8001126:	9103      	str	r1, [sp, #12]
 8001128:	9202      	str	r2, [sp, #8]
 800112a:	f107 0210 	add.w	r2, r7, #16
 800112e:	9201      	str	r2, [sp, #4]
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	4633      	mov	r3, r6
 8001134:	462a      	mov	r2, r5
 8001136:	492e      	ldr	r1, [pc, #184]	@ (80011f0 <show_acc_data+0x1b0>)
 8001138:	482e      	ldr	r0, [pc, #184]	@ (80011f4 <show_acc_data+0x1b4>)
 800113a:	f008 fa9b 	bl	8009674 <siprintf>
 800113e:	e04b      	b.n	80011d8 <show_acc_data+0x198>
	}
	// X-axis only
	else if (acc_flag[0] == 1) {
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d114      	bne.n	8001172 <show_acc_data+0x132>
		split_integer(x_mg, x_s, &x_i, &x_d);
 8001148:	f9b7 0036 	ldrsh.w	r0, [r7, #54]	@ 0x36
 800114c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001150:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001154:	f107 0114 	add.w	r1, r7, #20
 8001158:	f000 f858 	bl	800120c <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: X = %s%d.%d g\r\n", x_s, x_i, x_d);
 800115c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800115e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001160:	f107 0214 	add.w	r2, r7, #20
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	460b      	mov	r3, r1
 8001168:	4923      	ldr	r1, [pc, #140]	@ (80011f8 <show_acc_data+0x1b8>)
 800116a:	4822      	ldr	r0, [pc, #136]	@ (80011f4 <show_acc_data+0x1b4>)
 800116c:	f008 fa82 	bl	8009674 <siprintf>
 8001170:	e032      	b.n	80011d8 <show_acc_data+0x198>
	}
	// Y-axis only
	else if (acc_flag[1] == 1) {
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	3301      	adds	r3, #1
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d114      	bne.n	80011a6 <show_acc_data+0x166>
		split_integer(y_mg, y_s, &y_i, &y_d);
 800117c:	f9b7 0034 	ldrsh.w	r0, [r7, #52]	@ 0x34
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001188:	f107 0110 	add.w	r1, r7, #16
 800118c:	f000 f83e 	bl	800120c <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: Y = %s%d.%d g\r\n", y_s, y_i, y_d);
 8001190:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001192:	6a3b      	ldr	r3, [r7, #32]
 8001194:	f107 0210 	add.w	r2, r7, #16
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	460b      	mov	r3, r1
 800119c:	4917      	ldr	r1, [pc, #92]	@ (80011fc <show_acc_data+0x1bc>)
 800119e:	4815      	ldr	r0, [pc, #84]	@ (80011f4 <show_acc_data+0x1b4>)
 80011a0:	f008 fa68 	bl	8009674 <siprintf>
 80011a4:	e018      	b.n	80011d8 <show_acc_data+0x198>
	}
	// Z-axis only
	else if (acc_flag[2] == 1) {
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3302      	adds	r3, #2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d113      	bne.n	80011d8 <show_acc_data+0x198>
		split_integer(z_mg, z_s, &z_i, &z_d);
 80011b0:	f9b7 0032 	ldrsh.w	r0, [r7, #50]	@ 0x32
 80011b4:	f107 0318 	add.w	r3, r7, #24
 80011b8:	f107 021c 	add.w	r2, r7, #28
 80011bc:	f107 010c 	add.w	r1, r7, #12
 80011c0:	f000 f824 	bl	800120c <split_integer>
		sprintf((char*)showacc, "\nAccelerometer reading: Z = %s%d.%d g\r\n", z_s, z_i, z_d);
 80011c4:	69f9      	ldr	r1, [r7, #28]
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	f107 020c 	add.w	r2, r7, #12
 80011cc:	9300      	str	r3, [sp, #0]
 80011ce:	460b      	mov	r3, r1
 80011d0:	490b      	ldr	r1, [pc, #44]	@ (8001200 <show_acc_data+0x1c0>)
 80011d2:	4808      	ldr	r0, [pc, #32]	@ (80011f4 <show_acc_data+0x1b4>)
 80011d4:	f008 fa4e 	bl	8009674 <siprintf>
	}

	// Populate the print queue
	xQueueSend(q_print, &acc, portMAX_DELAY);
 80011d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001204 <show_acc_data+0x1c4>)
 80011da:	6818      	ldr	r0, [r3, #0]
 80011dc:	2300      	movs	r3, #0
 80011de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011e2:	4909      	ldr	r1, [pc, #36]	@ (8001208 <show_acc_data+0x1c8>)
 80011e4:	f005 fcac 	bl	8006b40 <xQueueGenericSend>
}
 80011e8:	bf00      	nop
 80011ea:	373c      	adds	r7, #60	@ 0x3c
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011f0:	0800a128 	.word	0x0800a128
 80011f4:	200000e8 	.word	0x200000e8
 80011f8:	0800a170 	.word	0x0800a170
 80011fc:	0800a198 	.word	0x0800a198
 8001200:	0800a1c0 	.word	0x0800a1c0
 8001204:	20000280 	.word	0x20000280
 8001208:	20000008 	.word	0x20000008

0800120c <split_integer>:

void split_integer(int value, char* sign, int *thousands_part, int *hundreds_part)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
	// Evaluate the sign
	if(value < 0) {
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	da06      	bge.n	800122e <split_integer+0x22>
		strcpy(sign, "-");
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	4925      	ldr	r1, [pc, #148]	@ (80012b8 <split_integer+0xac>)
 8001224:	461a      	mov	r2, r3
 8001226:	460b      	mov	r3, r1
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	8013      	strh	r3, [r2, #0]
 800122c:	e005      	b.n	800123a <split_integer+0x2e>
	}
	else {
		strcpy(sign, "+");
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	4922      	ldr	r1, [pc, #136]	@ (80012bc <split_integer+0xb0>)
 8001232:	461a      	mov	r2, r3
 8001234:	460b      	mov	r3, r1
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	8013      	strh	r3, [r2, #0]
	}

	// Calculate how many thousands
    *thousands_part = abs(value / 1000);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4a20      	ldr	r2, [pc, #128]	@ (80012c0 <split_integer+0xb4>)
 800123e:	fb82 1203 	smull	r1, r2, r2, r3
 8001242:	1192      	asrs	r2, r2, #6
 8001244:	17db      	asrs	r3, r3, #31
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800124c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	601a      	str	r2, [r3, #0]

    // Calculate remaining hundreds
    int remainder = value % 1000;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	4a1a      	ldr	r2, [pc, #104]	@ (80012c0 <split_integer+0xb4>)
 8001258:	fb82 1203 	smull	r1, r2, r2, r3
 800125c:	1191      	asrs	r1, r2, #6
 800125e:	17da      	asrs	r2, r3, #31
 8001260:	1a8a      	subs	r2, r1, r2
 8001262:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001266:	fb01 f202 	mul.w	r2, r1, r2
 800126a:	1a9b      	subs	r3, r3, r2
 800126c:	617b      	str	r3, [r7, #20]

    // Ensure hundreds_part is positive
    *hundreds_part = abs((int)(remainder / 100.0));
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff f968 	bl	8000544 <__aeabi_i2d>
 8001274:	f04f 0200 	mov.w	r2, #0
 8001278:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <split_integer+0xb8>)
 800127a:	f7ff faf7 	bl	800086c <__aeabi_ddiv>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f7ff fbd9 	bl	8000a3c <__aeabi_d2iz>
 800128a:	4603      	mov	r3, r0
 800128c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001290:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	601a      	str	r2, [r3, #0]

    // Adjust thousands_part if rounding up results in exactly 1000
    if (*hundreds_part == 10) {
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b0a      	cmp	r3, #10
 800129e:	d107      	bne.n	80012b0 <split_integer+0xa4>
        *thousands_part += 1;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	1c5a      	adds	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
        *hundreds_part = 0;
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	2200      	movs	r2, #0
 80012ae:	601a      	str	r2, [r3, #0]
    }
}
 80012b0:	bf00      	nop
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	0800a1e8 	.word	0x0800a1e8
 80012bc:	0800a1ec 	.word	0x0800a1ec
 80012c0:	10624dd3 	.word	0x10624dd3
 80012c4:	40590000 	.word	0x40590000

080012c8 <led_task>:
 * @note The task must be notified when a new command is available.									   *
 * @note The function utilizes software timers to control LED effects.								   *
 ******************************************************************************************************/

void led_task(void *param)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b088      	sub	sp, #32
 80012cc:	af02      	add	r7, sp, #8
 80012ce:	6078      	str	r0, [r7, #4]
	uint32_t msg_addr;
	message_t *msg;
	int freq = 2; // Frequency in Hz
 80012d0:	2302      	movs	r3, #2
 80012d2:	60bb      	str	r3, [r7, #8]
	int period = 500; // Period in ms
 80012d4:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80012d8:	617b      	str	r3, [r7, #20]

	while(1) {
		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80012da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2300      	movs	r3, #0
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2000      	movs	r0, #0
 80012e8:	f006 fef8 	bl	80080dc <xTaskGenericNotifyWait>

		// Display LED menu for the user
		xQueueSend(q_print, &msg_led_menu, portMAX_DELAY);
 80012ec:	4ba5      	ldr	r3, [pc, #660]	@ (8001584 <led_task+0x2bc>)
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	2300      	movs	r3, #0
 80012f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80012f6:	49a4      	ldr	r1, [pc, #656]	@ (8001588 <led_task+0x2c0>)
 80012f8:	f005 fc22 	bl	8006b40 <xQueueGenericSend>

		// Wait for the user to select their desired LED effect
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001304:	9200      	str	r2, [sp, #0]
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2000      	movs	r0, #0
 800130c:	f006 fee6 	bl	80080dc <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	613b      	str	r3, [r7, #16]

		// Process command, adjust LED state, and set software timers accordingly
		if(msg->len <= 4) {
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b04      	cmp	r3, #4
 800131a:	f200 811b 	bhi.w	8001554 <led_task+0x28c>
			if(!strcmp((char*)msg->payload, "None"))			// No effect
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	499a      	ldr	r1, [pc, #616]	@ (800158c <led_task+0x2c4>)
 8001322:	4618      	mov	r0, r3
 8001324:	f7fe ff54 	bl	80001d0 <strcmp>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d109      	bne.n	8001342 <led_task+0x7a>
			{
				set_led_timer(effectNone);
 800132e:	2004      	movs	r0, #4
 8001330:	f000 f96c 	bl	800160c <set_led_timer>
				curr_led_state = sNone;
 8001334:	4b96      	ldr	r3, [pc, #600]	@ (8001590 <led_task+0x2c8>)
 8001336:	2204      	movs	r2, #4
 8001338:	701a      	strb	r2, [r3, #0]
				control_all_leds(LED_OFF);
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f998 	bl	8001670 <control_all_leds>
 8001340:	e110      	b.n	8001564 <led_task+0x29c>
			}
			else if (!strcmp((char*)msg->payload, "E1")) {		// E1 effect
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4993      	ldr	r1, [pc, #588]	@ (8001594 <led_task+0x2cc>)
 8001346:	4618      	mov	r0, r3
 8001348:	f7fe ff42 	bl	80001d0 <strcmp>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d106      	bne.n	8001360 <led_task+0x98>
				curr_led_state = sEffectE1;
 8001352:	4b8f      	ldr	r3, [pc, #572]	@ (8001590 <led_task+0x2c8>)
 8001354:	2200      	movs	r2, #0
 8001356:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE1);
 8001358:	2000      	movs	r0, #0
 800135a:	f000 f957 	bl	800160c <set_led_timer>
 800135e:	e101      	b.n	8001564 <led_task+0x29c>
			}
			else if (!strcmp((char*)msg->payload, "E2")) {		// E2 effect
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	498d      	ldr	r1, [pc, #564]	@ (8001598 <led_task+0x2d0>)
 8001364:	4618      	mov	r0, r3
 8001366:	f7fe ff33 	bl	80001d0 <strcmp>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d106      	bne.n	800137e <led_task+0xb6>
				curr_led_state = sEffectE2;
 8001370:	4b87      	ldr	r3, [pc, #540]	@ (8001590 <led_task+0x2c8>)
 8001372:	2201      	movs	r2, #1
 8001374:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE2);
 8001376:	2001      	movs	r0, #1
 8001378:	f000 f948 	bl	800160c <set_led_timer>
 800137c:	e0f2      	b.n	8001564 <led_task+0x29c>
			}
			else if (!strcmp((char*)msg->payload, "E3")) {		// E3 effect
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	4986      	ldr	r1, [pc, #536]	@ (800159c <led_task+0x2d4>)
 8001382:	4618      	mov	r0, r3
 8001384:	f7fe ff24 	bl	80001d0 <strcmp>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d106      	bne.n	800139c <led_task+0xd4>
				curr_led_state = sEffectE3;
 800138e:	4b80      	ldr	r3, [pc, #512]	@ (8001590 <led_task+0x2c8>)
 8001390:	2202      	movs	r2, #2
 8001392:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE3);
 8001394:	2002      	movs	r0, #2
 8001396:	f000 f939 	bl	800160c <set_led_timer>
 800139a:	e0e3      	b.n	8001564 <led_task+0x29c>
			}
			else if (!strcmp((char*)msg->payload, "E4")) {		// E4 effect
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	4980      	ldr	r1, [pc, #512]	@ (80015a0 <led_task+0x2d8>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f7fe ff15 	bl	80001d0 <strcmp>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d106      	bne.n	80013ba <led_task+0xf2>
				curr_led_state = sEffectE4;
 80013ac:	4b78      	ldr	r3, [pc, #480]	@ (8001590 <led_task+0x2c8>)
 80013ae:	2203      	movs	r2, #3
 80013b0:	701a      	strb	r2, [r3, #0]
				set_led_timer(effectE4);
 80013b2:	2003      	movs	r0, #3
 80013b4:	f000 f92a 	bl	800160c <set_led_timer>
 80013b8:	e0d4      	b.n	8001564 <led_task+0x29c>
			}
			else if (!strcmp((char*)msg->payload, "Tor")) {		// Toggle orange LED
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4979      	ldr	r1, [pc, #484]	@ (80015a4 <led_task+0x2dc>)
 80013be:	4618      	mov	r0, r3
 80013c0:	f7fe ff06 	bl	80001d0 <strcmp>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d10b      	bne.n	80013e2 <led_task+0x11a>
				set_led_timer(effectNone);
 80013ca:	2004      	movs	r0, #4
 80013cc:	f000 f91e 	bl	800160c <set_led_timer>
				curr_led_state = sNone;
 80013d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001590 <led_task+0x2c8>)
 80013d2:	2204      	movs	r2, #4
 80013d4:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(ORANGE_LED_PORT, ORANGE_LED_PIN);
 80013d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013da:	4873      	ldr	r0, [pc, #460]	@ (80015a8 <led_task+0x2e0>)
 80013dc:	f002 f86b 	bl	80034b6 <HAL_GPIO_TogglePin>
 80013e0:	e0c0      	b.n	8001564 <led_task+0x29c>
			}
			else if (!strcmp((char*)msg->payload, "Tgr")) {		// Toggle green LED
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4971      	ldr	r1, [pc, #452]	@ (80015ac <led_task+0x2e4>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe fef2 	bl	80001d0 <strcmp>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10b      	bne.n	800140a <led_task+0x142>
				set_led_timer(effectNone);
 80013f2:	2004      	movs	r0, #4
 80013f4:	f000 f90a 	bl	800160c <set_led_timer>
				curr_led_state = sNone;
 80013f8:	4b65      	ldr	r3, [pc, #404]	@ (8001590 <led_task+0x2c8>)
 80013fa:	2204      	movs	r2, #4
 80013fc:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(GREEN_LED_PORT, GREEN_LED_PIN);
 80013fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001402:	4869      	ldr	r0, [pc, #420]	@ (80015a8 <led_task+0x2e0>)
 8001404:	f002 f857 	bl	80034b6 <HAL_GPIO_TogglePin>
 8001408:	e0ac      	b.n	8001564 <led_task+0x29c>
			}
			else if (!strcmp((char*)msg->payload, "Tbl")) {		// Toggle blue LED
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	4968      	ldr	r1, [pc, #416]	@ (80015b0 <led_task+0x2e8>)
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe fede 	bl	80001d0 <strcmp>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10b      	bne.n	8001432 <led_task+0x16a>
				set_led_timer(effectNone);
 800141a:	2004      	movs	r0, #4
 800141c:	f000 f8f6 	bl	800160c <set_led_timer>
				curr_led_state = sNone;
 8001420:	4b5b      	ldr	r3, [pc, #364]	@ (8001590 <led_task+0x2c8>)
 8001422:	2204      	movs	r2, #4
 8001424:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(BLUE_LED_PORT, BLUE_LED_PIN);
 8001426:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800142a:	485f      	ldr	r0, [pc, #380]	@ (80015a8 <led_task+0x2e0>)
 800142c:	f002 f843 	bl	80034b6 <HAL_GPIO_TogglePin>
 8001430:	e098      	b.n	8001564 <led_task+0x29c>
			}
			else if (!strcmp((char*)msg->payload, "Tre")) {		// Toggle red LED
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	495f      	ldr	r1, [pc, #380]	@ (80015b4 <led_task+0x2ec>)
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe feca 	bl	80001d0 <strcmp>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d10b      	bne.n	800145a <led_task+0x192>
				set_led_timer(effectNone);
 8001442:	2004      	movs	r0, #4
 8001444:	f000 f8e2 	bl	800160c <set_led_timer>
				curr_led_state = sNone;
 8001448:	4b51      	ldr	r3, [pc, #324]	@ (8001590 <led_task+0x2c8>)
 800144a:	2204      	movs	r2, #4
 800144c:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_TogglePin(RED_LED_PORT, RED_LED_PIN);
 800144e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001452:	4855      	ldr	r0, [pc, #340]	@ (80015a8 <led_task+0x2e0>)
 8001454:	f002 f82f 	bl	80034b6 <HAL_GPIO_TogglePin>
 8001458:	e084      	b.n	8001564 <led_task+0x29c>
			}
			else if (parse_freq_string(msg, &freq)) {			// Frequency adjustment
 800145a:	f107 0308 	add.w	r3, r7, #8
 800145e:	4619      	mov	r1, r3
 8001460:	6938      	ldr	r0, [r7, #16]
 8001462:	f000 f9f9 	bl	8001858 <parse_freq_string>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d055      	beq.n	8001518 <led_task+0x250>
				// Check that there is an active effect
				if(sNone == curr_led_state) {
 800146c:	4b48      	ldr	r3, [pc, #288]	@ (8001590 <led_task+0x2c8>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d108      	bne.n	8001486 <led_task+0x1be>
					xQueueSend(q_print, &msg_no_active_effect, portMAX_DELAY);
 8001474:	4b43      	ldr	r3, [pc, #268]	@ (8001584 <led_task+0x2bc>)
 8001476:	6818      	ldr	r0, [r3, #0]
 8001478:	2300      	movs	r3, #0
 800147a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800147e:	494e      	ldr	r1, [pc, #312]	@ (80015b8 <led_task+0x2f0>)
 8001480:	f005 fb5e 	bl	8006b40 <xQueueGenericSend>
 8001484:	e06e      	b.n	8001564 <led_task+0x29c>
				}
				// Check that frequency is between 1 and 10 Hz
				else if(freq > 10) {
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b0a      	cmp	r3, #10
 800148a:	dd08      	ble.n	800149e <led_task+0x1d6>
					xQueueSend(q_print, &msg_inv_freq, portMAX_DELAY);
 800148c:	4b3d      	ldr	r3, [pc, #244]	@ (8001584 <led_task+0x2bc>)
 800148e:	6818      	ldr	r0, [r3, #0]
 8001490:	2300      	movs	r3, #0
 8001492:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001496:	4949      	ldr	r1, [pc, #292]	@ (80015bc <led_task+0x2f4>)
 8001498:	f005 fb52 	bl	8006b40 <xQueueGenericSend>
 800149c:	e062      	b.n	8001564 <led_task+0x29c>
				}
				// Change timer frequency
				else {
					period = (1.0 / freq) * 1000;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f7ff f84f 	bl	8000544 <__aeabi_i2d>
 80014a6:	4602      	mov	r2, r0
 80014a8:	460b      	mov	r3, r1
 80014aa:	f04f 0000 	mov.w	r0, #0
 80014ae:	4944      	ldr	r1, [pc, #272]	@ (80015c0 <led_task+0x2f8>)
 80014b0:	f7ff f9dc 	bl	800086c <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	4b40      	ldr	r3, [pc, #256]	@ (80015c4 <led_task+0x2fc>)
 80014c2:	f7ff f8a9 	bl	8000618 <__aeabi_dmul>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fab5 	bl	8000a3c <__aeabi_d2iz>
 80014d2:	4603      	mov	r3, r0
 80014d4:	617b      	str	r3, [r7, #20]
					if (xTimerChangePeriod(handle_led_timer[curr_led_state], pdMS_TO_TICKS(period), 0) != pdPASS) {
 80014d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001590 <led_task+0x2c8>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	4b3a      	ldr	r3, [pc, #232]	@ (80015c8 <led_task+0x300>)
 80014de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	4a37      	ldr	r2, [pc, #220]	@ (80015cc <led_task+0x304>)
 80014ee:	fba2 2303 	umull	r2, r3, r2, r3
 80014f2:	099a      	lsrs	r2, r3, #6
 80014f4:	2300      	movs	r3, #0
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	2300      	movs	r3, #0
 80014fa:	2104      	movs	r1, #4
 80014fc:	f007 f950 	bl	80087a0 <xTimerGenericCommand>
 8001500:	4603      	mov	r3, r0
 8001502:	2b01      	cmp	r3, #1
 8001504:	d02e      	beq.n	8001564 <led_task+0x29c>
						// If frequency update was not successful, notify the user
						xQueueSend(q_print, &msg_err_freq, portMAX_DELAY);
 8001506:	4b1f      	ldr	r3, [pc, #124]	@ (8001584 <led_task+0x2bc>)
 8001508:	6818      	ldr	r0, [r3, #0]
 800150a:	2300      	movs	r3, #0
 800150c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001510:	492f      	ldr	r1, [pc, #188]	@ (80015d0 <led_task+0x308>)
 8001512:	f005 fb15 	bl	8006b40 <xQueueGenericSend>
 8001516:	e025      	b.n	8001564 <led_task+0x29c>
					}
				}
			}
			else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	492e      	ldr	r1, [pc, #184]	@ (80015d4 <led_task+0x30c>)
 800151c:	4618      	mov	r0, r3
 800151e:	f7fe fe57 	bl	80001d0 <strcmp>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10c      	bne.n	8001542 <led_task+0x27a>
				// Update the system state
				curr_sys_state = sMainMenu;
 8001528:	4b2b      	ldr	r3, [pc, #172]	@ (80015d8 <led_task+0x310>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]

				// Notify the main menu task
				xTaskNotify(handle_main_menu_task, 0, eNoAction);
 800152e:	4b2b      	ldr	r3, [pc, #172]	@ (80015dc <led_task+0x314>)
 8001530:	6818      	ldr	r0, [r3, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2300      	movs	r3, #0
 8001538:	2200      	movs	r2, #0
 800153a:	2100      	movs	r1, #0
 800153c:	f006 fe4e 	bl	80081dc <xTaskGenericNotify>
 8001540:	e010      	b.n	8001564 <led_task+0x29c>
			}
			else												// Invalid response
				xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <led_task+0x2bc>)
 8001544:	6818      	ldr	r0, [r3, #0]
 8001546:	2300      	movs	r3, #0
 8001548:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800154c:	4924      	ldr	r1, [pc, #144]	@ (80015e0 <led_task+0x318>)
 800154e:	f005 faf7 	bl	8006b40 <xQueueGenericSend>
 8001552:	e007      	b.n	8001564 <led_task+0x29c>
		}
		else {
			// If user input is longer than 4 characters, notify user of invalid response
			xQueueSend(q_print, &msg_inv_led, portMAX_DELAY);
 8001554:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <led_task+0x2bc>)
 8001556:	6818      	ldr	r0, [r3, #0]
 8001558:	2300      	movs	r3, #0
 800155a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800155e:	4920      	ldr	r1, [pc, #128]	@ (80015e0 <led_task+0x318>)
 8001560:	f005 faee 	bl	8006b40 <xQueueGenericSend>
		}

		// Notify self / led task if not returning to the main menu
		if (sLedMenu == curr_sys_state)
 8001564:	4b1c      	ldr	r3, [pc, #112]	@ (80015d8 <led_task+0x310>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	2b01      	cmp	r3, #1
 800156a:	f47f aeb6 	bne.w	80012da <led_task+0x12>
			xTaskNotify(handle_led_task, 0, eNoAction);
 800156e:	4b1d      	ldr	r3, [pc, #116]	@ (80015e4 <led_task+0x31c>)
 8001570:	6818      	ldr	r0, [r3, #0]
 8001572:	2300      	movs	r3, #0
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	2300      	movs	r3, #0
 8001578:	2200      	movs	r2, #0
 800157a:	2100      	movs	r1, #0
 800157c:	f006 fe2e 	bl	80081dc <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001580:	e6ab      	b.n	80012da <led_task+0x12>
 8001582:	bf00      	nop
 8001584:	20000280 	.word	0x20000280
 8001588:	2000001c 	.word	0x2000001c
 800158c:	0800a4a8 	.word	0x0800a4a8
 8001590:	20000020 	.word	0x20000020
 8001594:	0800a4b0 	.word	0x0800a4b0
 8001598:	0800a4b4 	.word	0x0800a4b4
 800159c:	0800a4b8 	.word	0x0800a4b8
 80015a0:	0800a4bc 	.word	0x0800a4bc
 80015a4:	0800a4c0 	.word	0x0800a4c0
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	0800a4c4 	.word	0x0800a4c4
 80015b0:	0800a4c8 	.word	0x0800a4c8
 80015b4:	0800a4cc 	.word	0x0800a4cc
 80015b8:	20000010 	.word	0x20000010
 80015bc:	20000018 	.word	0x20000018
 80015c0:	3ff00000 	.word	0x3ff00000
 80015c4:	408f4000 	.word	0x408f4000
 80015c8:	20000288 	.word	0x20000288
 80015cc:	10624dd3 	.word	0x10624dd3
 80015d0:	20000014 	.word	0x20000014
 80015d4:	0800a4d0 	.word	0x0800a4d0
 80015d8:	20000299 	.word	0x20000299
 80015dc:	20000268 	.word	0x20000268
 80015e0:	2000000c 	.word	0x2000000c
 80015e4:	20000274 	.word	0x20000274

080015e8 <led_callback>:
 * @note The function assumes that the timer IDs correspond directly to the LED effects to be executed *
 *       and relies on proper timer setup and management by the calling code.						   *
 ******************************************************************************************************/

void led_callback(TimerHandle_t xTimer)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
	// Get timer ID
	int id = (uint32_t)pvTimerGetTimerID(xTimer);
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f007 fbbf 	bl	8008d74 <pvTimerGetTimerID>
 80015f6:	4603      	mov	r3, r0
 80015f8:	60fb      	str	r3, [r7, #12]

	// LED effects correspond to timer ID's
	int effect = id;
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
	execute_led_effect(effect);
 80015fe:	68b8      	ldr	r0, [r7, #8]
 8001600:	f000 f8c4 	bl	800178c <execute_led_effect>
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <set_led_timer>:
 * @note This function assumes that `handle_led_timer[]` array is properly initialized and contains    *
 *       valid FreeRTOS software timer handles for each LED effect.									   *
 ******************************************************************************************************/

void set_led_timer(led_effect_t effect)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b087      	sub	sp, #28
 8001610:	af02      	add	r7, sp, #8
 8001612:	4603      	mov	r3, r0
 8001614:	71fb      	strb	r3, [r7, #7]
	// Turn off all timers
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	e00e      	b.n	800163a <set_led_timer+0x2e>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 800161c:	4a13      	ldr	r2, [pc, #76]	@ (800166c <set_led_timer+0x60>)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001624:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001628:	9300      	str	r3, [sp, #0]
 800162a:	2300      	movs	r3, #0
 800162c:	2200      	movs	r2, #0
 800162e:	2103      	movs	r1, #3
 8001630:	f007 f8b6 	bl	80087a0 <xTimerGenericCommand>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3301      	adds	r3, #1
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2b03      	cmp	r3, #3
 800163e:	dded      	ble.n	800161c <set_led_timer+0x10>
	}

	// Start the selected timer
	if(effectNone != effect) {
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	2b04      	cmp	r3, #4
 8001644:	d00e      	beq.n	8001664 <set_led_timer+0x58>
		xTimerStart(handle_led_timer[effect], portMAX_DELAY);
 8001646:	79fb      	ldrb	r3, [r7, #7]
 8001648:	4a08      	ldr	r2, [pc, #32]	@ (800166c <set_led_timer+0x60>)
 800164a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800164e:	f006 f993 	bl	8007978 <xTaskGetTickCount>
 8001652:	4602      	mov	r2, r0
 8001654:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	2101      	movs	r1, #1
 800165e:	4620      	mov	r0, r4
 8001660:	f007 f89e 	bl	80087a0 <xTimerGenericCommand>
	}
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	bd90      	pop	{r4, r7, pc}
 800166c:	20000288 	.word	0x20000288

08001670 <control_all_leds>:
 * 																									   *
 * @note This function assumes that the macros for each on-board LED are configured correctly.	       *
 ******************************************************************************************************/

void control_all_leds(int state)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, state);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461a      	mov	r2, r3
 800167e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001682:	480f      	ldr	r0, [pc, #60]	@ (80016c0 <control_all_leds+0x50>)
 8001684:	f001 fefe 	bl	8003484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, state);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	b2db      	uxtb	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001692:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <control_all_leds+0x50>)
 8001694:	f001 fef6 	bl	8003484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, state);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	461a      	mov	r2, r3
 800169e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016a2:	4807      	ldr	r0, [pc, #28]	@ (80016c0 <control_all_leds+0x50>)
 80016a4:	f001 feee 	bl	8003484 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, state);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	461a      	mov	r2, r3
 80016ae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016b2:	4803      	ldr	r0, [pc, #12]	@ (80016c0 <control_all_leds+0x50>)
 80016b4:	f001 fee6 	bl	8003484 <HAL_GPIO_WritePin>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40020c00 	.word	0x40020c00

080016c4 <control_led_group>:
 * @note The provided `led_mode` specifies which LED group should be turned on (ex. LED_EVEN). The	   *
 *       other LED group (ex. LED_ODD) will be turned off.											   *
 ******************************************************************************************************/

void control_led_group(int led_mode)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	// Turn on even LEDs
	if(LED_EVEN == led_mode) {
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d118      	bne.n	8001704 <control_led_group+0x40>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_RESET);
 80016d2:	2200      	movs	r2, #0
 80016d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80016d8:	4818      	ldr	r0, [pc, #96]	@ (800173c <control_led_group+0x78>)
 80016da:	f001 fed3 	bl	8003484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_SET);
 80016de:	2201      	movs	r2, #1
 80016e0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80016e4:	4815      	ldr	r0, [pc, #84]	@ (800173c <control_led_group+0x78>)
 80016e6:	f001 fecd 	bl	8003484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_RESET);
 80016ea:	2200      	movs	r2, #0
 80016ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80016f0:	4812      	ldr	r0, [pc, #72]	@ (800173c <control_led_group+0x78>)
 80016f2:	f001 fec7 	bl	8003484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_SET);
 80016f6:	2201      	movs	r2, #1
 80016f8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80016fc:	480f      	ldr	r0, [pc, #60]	@ (800173c <control_led_group+0x78>)
 80016fe:	f001 fec1 	bl	8003484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
	}
}
 8001702:	e017      	b.n	8001734 <control_led_group+0x70>
		HAL_GPIO_WritePin(ORANGE_LED_PORT, ORANGE_LED_PIN, GPIO_PIN_SET);
 8001704:	2201      	movs	r2, #1
 8001706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800170a:	480c      	ldr	r0, [pc, #48]	@ (800173c <control_led_group+0x78>)
 800170c:	f001 feba 	bl	8003484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GREEN_LED_PORT, GREEN_LED_PIN, GPIO_PIN_RESET);
 8001710:	2200      	movs	r2, #0
 8001712:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001716:	4809      	ldr	r0, [pc, #36]	@ (800173c <control_led_group+0x78>)
 8001718:	f001 feb4 	bl	8003484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(BLUE_LED_PORT, BLUE_LED_PIN, GPIO_PIN_SET);
 800171c:	2201      	movs	r2, #1
 800171e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001722:	4806      	ldr	r0, [pc, #24]	@ (800173c <control_led_group+0x78>)
 8001724:	f001 feae 	bl	8003484 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(RED_LED_PORT, RED_LED_PIN, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800172e:	4803      	ldr	r0, [pc, #12]	@ (800173c <control_led_group+0x78>)
 8001730:	f001 fea8 	bl	8003484 <HAL_GPIO_WritePin>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020c00 	.word	0x40020c00

08001740 <control_single_led>:
 * @note `config` dictates the LED states, ex. 0x05 = 0101 = Green and Red LEDs on, Orange and Blue    *
 *       LEDs off.																					   *
 ******************************************************************************************************/

void control_single_led(int config)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
	// Orange		LD3			GPIO_PIN_13		0x2000  //
	// Red			LD5			GPIO_PIN_14		0x4000  //
	// Blue			LD6			GPIO_PIN_15		0x8000  //
	//////////////////////////////////////////////////////

	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 800174c:	e014      	b.n	8001778 <control_single_led+0x38>
		HAL_GPIO_WritePin(GREEN_LED_PORT, (GREEN_LED_PIN << i), ((config >> i) & 0x1));
 800174e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	b299      	uxth	r1, r3
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	fa42 f303 	asr.w	r3, r2, r3
 8001762:	b2db      	uxtb	r3, r3
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	b2db      	uxtb	r3, r3
 800176a:	461a      	mov	r2, r3
 800176c:	4806      	ldr	r0, [pc, #24]	@ (8001788 <control_single_led+0x48>)
 800176e:	f001 fe89 	bl	8003484 <HAL_GPIO_WritePin>
	for(int i=0; i<NUM_LED_TIMERS; i++) {
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	3301      	adds	r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b03      	cmp	r3, #3
 800177c:	dde7      	ble.n	800174e <control_single_led+0xe>
	}
}
 800177e:	bf00      	nop
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40020c00 	.word	0x40020c00

0800178c <execute_led_effect>:
 * @note This function assumes that functions `control_all_leds()`, `control_led_group()`, and 		   *
 *       `control_single_led()` are implemented to control the LEDs accordingly.			 		   *
 ******************************************************************************************************/

void execute_led_effect(int effect)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	// Flag used for effects E1 and E2
	static int flag = 1;
	// i and used for effects E3 and E4
	static int i = 0;

	switch(effect) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2b03      	cmp	r3, #3
 8001798:	d854      	bhi.n	8001844 <execute_led_effect+0xb8>
 800179a:	a201      	add	r2, pc, #4	@ (adr r2, 80017a0 <execute_led_effect+0x14>)
 800179c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a0:	080017b1 	.word	0x080017b1
 80017a4:	080017d5 	.word	0x080017d5
 80017a8:	080017f9 	.word	0x080017f9
 80017ac:	0800181f 	.word	0x0800181f
		case effectE1:
			// Flash all LEDs in unison
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 80017b0:	4b27      	ldr	r3, [pc, #156]	@ (8001850 <execute_led_effect+0xc4>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f083 0301 	eor.w	r3, r3, #1
 80017b8:	4a25      	ldr	r2, [pc, #148]	@ (8001850 <execute_led_effect+0xc4>)
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b24      	ldr	r3, [pc, #144]	@ (8001850 <execute_led_effect+0xc4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d003      	beq.n	80017cc <execute_led_effect+0x40>
 80017c4:	2000      	movs	r0, #0
 80017c6:	f7ff ff53 	bl	8001670 <control_all_leds>
			break;
 80017ca:	e03c      	b.n	8001846 <execute_led_effect+0xba>
			(flag ^= 1) ? control_all_leds(LED_OFF) : control_all_leds(LED_ON);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff ff4f 	bl	8001670 <control_all_leds>
			break;
 80017d2:	e038      	b.n	8001846 <execute_led_effect+0xba>
		case effectE2:
			// Flash even and odd LEDs back and forth
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 80017d4:	4b1e      	ldr	r3, [pc, #120]	@ (8001850 <execute_led_effect+0xc4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f083 0301 	eor.w	r3, r3, #1
 80017dc:	4a1c      	ldr	r2, [pc, #112]	@ (8001850 <execute_led_effect+0xc4>)
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <execute_led_effect+0xc4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d003      	beq.n	80017f0 <execute_led_effect+0x64>
 80017e8:	2000      	movs	r0, #0
 80017ea:	f7ff ff6b 	bl	80016c4 <control_led_group>
			break;
 80017ee:	e02a      	b.n	8001846 <execute_led_effect+0xba>
			(flag ^= 1) ? control_led_group(LED_EVEN) : control_led_group(LED_ODD);
 80017f0:	2001      	movs	r0, #1
 80017f2:	f7ff ff67 	bl	80016c4 <control_led_group>
			break;
 80017f6:	e026      	b.n	8001846 <execute_led_effect+0xba>
		case effectE3:
			// Move the illuminated LED around the circle of on-board LEDs
			control_single_led(0x1 << (i++ % 4));
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <execute_led_effect+0xc8>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	4915      	ldr	r1, [pc, #84]	@ (8001854 <execute_led_effect+0xc8>)
 8001800:	600a      	str	r2, [r1, #0]
 8001802:	425a      	negs	r2, r3
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	f002 0203 	and.w	r2, r2, #3
 800180c:	bf58      	it	pl
 800180e:	4253      	negpl	r3, r2
 8001810:	2201      	movs	r2, #1
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff92 	bl	8001740 <control_single_led>
			break;
 800181c:	e013      	b.n	8001846 <execute_led_effect+0xba>
		case effectE4:
			// Move the illuminated LED around the circle of on-board LEDs in opposite direction of effect E3
			control_single_led(0x08 >> (i++ % 4));
 800181e:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <execute_led_effect+0xc8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	490b      	ldr	r1, [pc, #44]	@ (8001854 <execute_led_effect+0xc8>)
 8001826:	600a      	str	r2, [r1, #0]
 8001828:	425a      	negs	r2, r3
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	f002 0203 	and.w	r2, r2, #3
 8001832:	bf58      	it	pl
 8001834:	4253      	negpl	r3, r2
 8001836:	2208      	movs	r2, #8
 8001838:	fa42 f303 	asr.w	r3, r2, r3
 800183c:	4618      	mov	r0, r3
 800183e:	f7ff ff7f 	bl	8001740 <control_single_led>
			break;
 8001842:	e000      	b.n	8001846 <execute_led_effect+0xba>
		default:
			break;
 8001844:	bf00      	nop
	}
}
 8001846:	bf00      	nop
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000024 	.word	0x20000024
 8001854:	20000138 	.word	0x20000138

08001858 <parse_freq_string>:
 *       validate the value range explicitly. It relies on other components to handle invalid values.  *
 ******************************************************************************************************/


int parse_freq_string(message_t *msg, int *freq_Hz)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
    // Check if the input string is at least 2 characters long (F and one digit)
    int len = strlen((char *)msg->payload);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fcbd 	bl	80001e4 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	60bb      	str	r3, [r7, #8]
    if (len < 2 || len > 4) return 0;
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b01      	cmp	r3, #1
 8001872:	dd02      	ble.n	800187a <parse_freq_string+0x22>
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	2b04      	cmp	r3, #4
 8001878:	dd01      	ble.n	800187e <parse_freq_string+0x26>
 800187a:	2300      	movs	r3, #0
 800187c:	e025      	b.n	80018ca <parse_freq_string+0x72>

    // Check if the first character is 'F'
    if (msg->payload[0] != 'F') return 0;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b46      	cmp	r3, #70	@ 0x46
 8001884:	d001      	beq.n	800188a <parse_freq_string+0x32>
 8001886:	2300      	movs	r3, #0
 8001888:	e01f      	b.n	80018ca <parse_freq_string+0x72>

    // Check if the remaining characters are digits
    for (int i = 1; i < len; i++)
 800188a:	2301      	movs	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
 800188e:	e010      	b.n	80018b2 <parse_freq_string+0x5a>
    {
        if (!isdigit(msg->payload[i])) return 0;
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4413      	add	r3, r2
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	3301      	adds	r3, #1
 800189a:	4a0e      	ldr	r2, [pc, #56]	@ (80018d4 <parse_freq_string+0x7c>)
 800189c:	4413      	add	r3, r2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	f003 0304 	and.w	r3, r3, #4
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <parse_freq_string+0x54>
 80018a8:	2300      	movs	r3, #0
 80018aa:	e00e      	b.n	80018ca <parse_freq_string+0x72>
    for (int i = 1; i < len; i++)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	3301      	adds	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	dbea      	blt.n	8001890 <parse_freq_string+0x38>
    }

    // Convert the numeric part to an integer
    *freq_Hz = freq_str_to_int(msg, len);
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f80b 	bl	80018d8 <freq_str_to_int>
 80018c2:	4602      	mov	r2, r0
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	601a      	str	r2, [r3, #0]
    return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	0800a968 	.word	0x0800a968

080018d8 <freq_str_to_int>:
 *       invalid formats or edge cases (e.g., non-numeric characters). It relies on proper validation  *
 *       by the calling function.																	   *
 ******************************************************************************************************/

int freq_str_to_int(message_t *msg, int len)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
	int ret = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]

	for(int i=1; i<len; i++) {
 80018e6:	2301      	movs	r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	e00f      	b.n	800190c <freq_str_to_int+0x34>
		ret = ret * 10 + (msg->payload[i] - '0'); // Convert from ASCII to an integer
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4613      	mov	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	4413      	add	r3, r2
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	4619      	mov	r1, r3
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	4413      	add	r3, r2
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3b30      	subs	r3, #48	@ 0x30
 8001902:	440b      	add	r3, r1
 8001904:	60fb      	str	r3, [r7, #12]
	for(int i=1; i<len; i++) {
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	3301      	adds	r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68ba      	ldr	r2, [r7, #8]
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbeb      	blt.n	80018ec <freq_str_to_int+0x14>
	}

	return ret;
 8001914:	68fb      	ldr	r3, [r7, #12]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
	...

08001924 <rtc_task>:
 * @note There are multiple state machines handled here: the overall system state machine and the	   *
 *       RTC-specific state machine.																   *
 ******************************************************************************************************/

void rtc_task(void *param)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af02      	add	r7, sp, #8
 800192a:	6078      	str	r0, [r7, #4]
	message_t *msg;

	while(1) {

		// Wait for notification from another task
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800192c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001930:	9300      	str	r3, [sp, #0]
 8001932:	2300      	movs	r3, #0
 8001934:	2200      	movs	r2, #0
 8001936:	2100      	movs	r1, #0
 8001938:	2000      	movs	r0, #0
 800193a:	f006 fbcf 	bl	80080dc <xTaskGenericNotifyWait>

		while(curr_sys_state != sMainMenu) {
 800193e:	e1e5      	b.n	8001d0c <rtc_task+0x3e8>

			switch(curr_sys_state) {
 8001940:	4bb3      	ldr	r3, [pc, #716]	@ (8001c10 <rtc_task+0x2ec>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b05      	cmp	r3, #5
 8001946:	f000 8116 	beq.w	8001b76 <rtc_task+0x252>
 800194a:	2b05      	cmp	r3, #5
 800194c:	f300 81cf 	bgt.w	8001cee <rtc_task+0x3ca>
 8001950:	2b03      	cmp	r3, #3
 8001952:	d002      	beq.n	800195a <rtc_task+0x36>
 8001954:	2b04      	cmp	r3, #4
 8001956:	d07a      	beq.n	8001a4e <rtc_task+0x12a>
 8001958:	e1c9      	b.n	8001cee <rtc_task+0x3ca>
				/***** RTC main menu state *****/
				case sRtcMenu:
					// Display RTC menu for the user, show current time and date
					xQueueSend(q_print, &msg_rtc_menu_1, portMAX_DELAY);
 800195a:	4bae      	ldr	r3, [pc, #696]	@ (8001c14 <rtc_task+0x2f0>)
 800195c:	6818      	ldr	r0, [r3, #0]
 800195e:	2300      	movs	r3, #0
 8001960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001964:	49ac      	ldr	r1, [pc, #688]	@ (8001c18 <rtc_task+0x2f4>)
 8001966:	f005 f8eb 	bl	8006b40 <xQueueGenericSend>
					show_time_date();
 800196a:	f000 fa6d 	bl	8001e48 <show_time_date>
					xQueueSend(q_print, &msg_rtc_menu_2, portMAX_DELAY);
 800196e:	4ba9      	ldr	r3, [pc, #676]	@ (8001c14 <rtc_task+0x2f0>)
 8001970:	6818      	ldr	r0, [r3, #0]
 8001972:	2300      	movs	r3, #0
 8001974:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001978:	49a8      	ldr	r1, [pc, #672]	@ (8001c1c <rtc_task+0x2f8>)
 800197a:	f005 f8e1 	bl	8006b40 <xQueueGenericSend>

					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001986:	9200      	str	r2, [sp, #0]
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2000      	movs	r0, #0
 800198e:	f006 fba5 	bl	80080dc <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	617b      	str	r3, [r7, #20]

					// Process command, update date / time accordingly
					if(msg->len <= 4) {
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b04      	cmp	r3, #4
 800199c:	d84b      	bhi.n	8001a36 <rtc_task+0x112>
						if(!strcmp((char*)msg->payload, "Date")) {			// Configure date
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	499f      	ldr	r1, [pc, #636]	@ (8001c20 <rtc_task+0x2fc>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fc14 	bl	80001d0 <strcmp>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10b      	bne.n	80019c6 <rtc_task+0xa2>
							// Update the system state
							curr_sys_state = sRtcDateConfig;
 80019ae:	4b98      	ldr	r3, [pc, #608]	@ (8001c10 <rtc_task+0x2ec>)
 80019b0:	2204      	movs	r2, #4
 80019b2:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mo, portMAX_DELAY);
 80019b4:	4b97      	ldr	r3, [pc, #604]	@ (8001c14 <rtc_task+0x2f0>)
 80019b6:	6818      	ldr	r0, [r3, #0]
 80019b8:	2300      	movs	r3, #0
 80019ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019be:	4999      	ldr	r1, [pc, #612]	@ (8001c24 <rtc_task+0x300>)
 80019c0:	f005 f8be 	bl	8006b40 <xQueueGenericSend>
					else {
						// If user input is longer than 4 characters, notify user of invalid response
						curr_sys_state = sMainMenu;
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
					}
					break;
 80019c4:	e1a2      	b.n	8001d0c <rtc_task+0x3e8>
						else if (!strcmp((char*)msg->payload, "Time")) {	// Configure time
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	4997      	ldr	r1, [pc, #604]	@ (8001c28 <rtc_task+0x304>)
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7fe fc00 	bl	80001d0 <strcmp>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10b      	bne.n	80019ee <rtc_task+0xca>
							curr_sys_state = sRtcTimeConfig;
 80019d6:	4b8e      	ldr	r3, [pc, #568]	@ (8001c10 <rtc_task+0x2ec>)
 80019d8:	2205      	movs	r2, #5
 80019da:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_hh, portMAX_DELAY);
 80019dc:	4b8d      	ldr	r3, [pc, #564]	@ (8001c14 <rtc_task+0x2f0>)
 80019de:	6818      	ldr	r0, [r3, #0]
 80019e0:	2300      	movs	r3, #0
 80019e2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019e6:	4991      	ldr	r1, [pc, #580]	@ (8001c2c <rtc_task+0x308>)
 80019e8:	f005 f8aa 	bl	8006b40 <xQueueGenericSend>
					break;
 80019ec:	e18e      	b.n	8001d0c <rtc_task+0x3e8>
						else if (!strcmp((char*)msg->payload, "Rfsh")) {	// Refresh the date and time
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	498f      	ldr	r1, [pc, #572]	@ (8001c30 <rtc_task+0x30c>)
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fbec 	bl	80001d0 <strcmp>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d103      	bne.n	8001a06 <rtc_task+0xe2>
							curr_sys_state = sRtcMenu;
 80019fe:	4b84      	ldr	r3, [pc, #528]	@ (8001c10 <rtc_task+0x2ec>)
 8001a00:	2203      	movs	r2, #3
 8001a02:	701a      	strb	r2, [r3, #0]
					break;
 8001a04:	e182      	b.n	8001d0c <rtc_task+0x3e8>
						else if (!strcmp((char*)msg->payload, "Main")) {	// Back to main menu
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	498a      	ldr	r1, [pc, #552]	@ (8001c34 <rtc_task+0x310>)
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fbe0 	bl	80001d0 <strcmp>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d103      	bne.n	8001a1e <rtc_task+0xfa>
							curr_sys_state = sMainMenu;
 8001a16:	4b7e      	ldr	r3, [pc, #504]	@ (8001c10 <rtc_task+0x2ec>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	701a      	strb	r2, [r3, #0]
					break;
 8001a1c:	e176      	b.n	8001d0c <rtc_task+0x3e8>
							curr_sys_state = sMainMenu;
 8001a1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c10 <rtc_task+0x2ec>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001a24:	4b7b      	ldr	r3, [pc, #492]	@ (8001c14 <rtc_task+0x2f0>)
 8001a26:	6818      	ldr	r0, [r3, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a2e:	4982      	ldr	r1, [pc, #520]	@ (8001c38 <rtc_task+0x314>)
 8001a30:	f005 f886 	bl	8006b40 <xQueueGenericSend>
					break;
 8001a34:	e16a      	b.n	8001d0c <rtc_task+0x3e8>
						curr_sys_state = sMainMenu;
 8001a36:	4b76      	ldr	r3, [pc, #472]	@ (8001c10 <rtc_task+0x2ec>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	701a      	strb	r2, [r3, #0]
						xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001a3c:	4b75      	ldr	r3, [pc, #468]	@ (8001c14 <rtc_task+0x2f0>)
 8001a3e:	6818      	ldr	r0, [r3, #0]
 8001a40:	2300      	movs	r3, #0
 8001a42:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a46:	497c      	ldr	r1, [pc, #496]	@ (8001c38 <rtc_task+0x314>)
 8001a48:	f005 f87a 	bl	8006b40 <xQueueGenericSend>
					break;
 8001a4c:	e15e      	b.n	8001d0c <rtc_task+0x3e8>
				/***** RTC date configuration state *****/
				case sRtcDateConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001a4e:	f107 0308 	add.w	r3, r7, #8
 8001a52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a56:	9200      	str	r2, [sp, #0]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f006 fb3d 	bl	80080dc <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	617b      	str	r3, [r7, #20]

					// Configure month, date, year, or day of week accordingly
					switch(curr_rtc_state) {
 8001a66:	4b75      	ldr	r3, [pc, #468]	@ (8001c3c <rtc_task+0x318>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	f200 814b 	bhi.w	8001d06 <rtc_task+0x3e2>
 8001a70:	a201      	add	r2, pc, #4	@ (adr r2, 8001a78 <rtc_task+0x154>)
 8001a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a76:	bf00      	nop
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001ab9 	.word	0x08001ab9
 8001a80:	08001ae9 	.word	0x08001ae9
 8001a84:	08001b19 	.word	0x08001b19
						case MONTH_CONFIG:									// Month config
							uint8_t m = getnumber(msg->payload, msg->len);
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4610      	mov	r0, r2
 8001a92:	f000 f95b 	bl	8001d4c <getnumber>
 8001a96:	4603      	mov	r3, r0
 8001a98:	733b      	strb	r3, [r7, #12]
							date.Month = m;
 8001a9a:	4a69      	ldr	r2, [pc, #420]	@ (8001c40 <rtc_task+0x31c>)
 8001a9c:	7b3b      	ldrb	r3, [r7, #12]
 8001a9e:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = DATE_CONFIG;
 8001aa0:	4b66      	ldr	r3, [pc, #408]	@ (8001c3c <rtc_task+0x318>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dd, portMAX_DELAY);
 8001aa6:	4b5b      	ldr	r3, [pc, #364]	@ (8001c14 <rtc_task+0x2f0>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ab0:	4964      	ldr	r1, [pc, #400]	@ (8001c44 <rtc_task+0x320>)
 8001ab2:	f005 f845 	bl	8006b40 <xQueueGenericSend>
							break;
 8001ab6:	e05d      	b.n	8001b74 <rtc_task+0x250>
						case DATE_CONFIG:									// Date config
							uint8_t d = getnumber(msg->payload, msg->len);
 8001ab8:	697a      	ldr	r2, [r7, #20]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	f000 f943 	bl	8001d4c <getnumber>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	737b      	strb	r3, [r7, #13]
							date.Date = d;
 8001aca:	4a5d      	ldr	r2, [pc, #372]	@ (8001c40 <rtc_task+0x31c>)
 8001acc:	7b7b      	ldrb	r3, [r7, #13]
 8001ace:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = YEAR_CONFIG;
 8001ad0:	4b5a      	ldr	r3, [pc, #360]	@ (8001c3c <rtc_task+0x318>)
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_yr, portMAX_DELAY);
 8001ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8001c14 <rtc_task+0x2f0>)
 8001ad8:	6818      	ldr	r0, [r3, #0]
 8001ada:	2300      	movs	r3, #0
 8001adc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ae0:	4959      	ldr	r1, [pc, #356]	@ (8001c48 <rtc_task+0x324>)
 8001ae2:	f005 f82d 	bl	8006b40 <xQueueGenericSend>
							break;
 8001ae6:	e045      	b.n	8001b74 <rtc_task+0x250>
						case YEAR_CONFIG:									// Year config
							uint8_t y = getnumber(msg->payload, msg->len);
 8001ae8:	697a      	ldr	r2, [r7, #20]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	4619      	mov	r1, r3
 8001af0:	4610      	mov	r0, r2
 8001af2:	f000 f92b 	bl	8001d4c <getnumber>
 8001af6:	4603      	mov	r3, r0
 8001af8:	73bb      	strb	r3, [r7, #14]
							date.Year = y;
 8001afa:	4a51      	ldr	r2, [pc, #324]	@ (8001c40 <rtc_task+0x31c>)
 8001afc:	7bbb      	ldrb	r3, [r7, #14]
 8001afe:	70d3      	strb	r3, [r2, #3]
							curr_rtc_state = DAY_CONFIG;
 8001b00:	4b4e      	ldr	r3, [pc, #312]	@ (8001c3c <rtc_task+0x318>)
 8001b02:	2203      	movs	r2, #3
 8001b04:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_dow, portMAX_DELAY);
 8001b06:	4b43      	ldr	r3, [pc, #268]	@ (8001c14 <rtc_task+0x2f0>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b10:	494e      	ldr	r1, [pc, #312]	@ (8001c4c <rtc_task+0x328>)
 8001b12:	f005 f815 	bl	8006b40 <xQueueGenericSend>
							break;
 8001b16:	e02d      	b.n	8001b74 <rtc_task+0x250>
						case DAY_CONFIG:									// Day of week config
							uint8_t day = getnumber(msg->payload, msg->len);
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	68db      	ldr	r3, [r3, #12]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f000 f913 	bl	8001d4c <getnumber>
 8001b26:	4603      	mov	r3, r0
 8001b28:	73fb      	strb	r3, [r7, #15]
							date.WeekDay = day;
 8001b2a:	4a45      	ldr	r2, [pc, #276]	@ (8001c40 <rtc_task+0x31c>)
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	7013      	strb	r3, [r2, #0]

							// Check that the user entered a valid date entry, configure date
							if(!validate_rtc_information(NULL, &date)) {
 8001b30:	4943      	ldr	r1, [pc, #268]	@ (8001c40 <rtc_task+0x31c>)
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f92b 	bl	8001d8e <validate_rtc_information>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10b      	bne.n	8001b56 <rtc_task+0x232>
								rtc_configure_date(&date);
 8001b3e:	4840      	ldr	r0, [pc, #256]	@ (8001c40 <rtc_task+0x31c>)
 8001b40:	f000 f972 	bl	8001e28 <rtc_configure_date>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001b44:	4b33      	ldr	r3, [pc, #204]	@ (8001c14 <rtc_task+0x2f0>)
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b4e:	4940      	ldr	r1, [pc, #256]	@ (8001c50 <rtc_task+0x32c>)
 8001b50:	f004 fff6 	bl	8006b40 <xQueueGenericSend>
 8001b54:	e007      	b.n	8001b66 <rtc_task+0x242>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001b56:	4b2f      	ldr	r3, [pc, #188]	@ (8001c14 <rtc_task+0x2f0>)
 8001b58:	6818      	ldr	r0, [r3, #0]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b60:	4935      	ldr	r1, [pc, #212]	@ (8001c38 <rtc_task+0x314>)
 8001b62:	f004 ffed 	bl	8006b40 <xQueueGenericSend>
							}

							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 8001b66:	4b2a      	ldr	r3, [pc, #168]	@ (8001c10 <rtc_task+0x2ec>)
 8001b68:	2203      	movs	r2, #3
 8001b6a:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 8001b6c:	4b33      	ldr	r3, [pc, #204]	@ (8001c3c <rtc_task+0x318>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
							break;
 8001b72:	bf00      	nop
					}
					break;
 8001b74:	e0c7      	b.n	8001d06 <rtc_task+0x3e2>
				/***** RTC time configuration state *****/
				case sRtcTimeConfig:
					// Wait for the user to select their desired RTC configuration option
					xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b7e:	9200      	str	r2, [sp, #0]
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	2000      	movs	r0, #0
 8001b86:	f006 faa9 	bl	80080dc <xTaskGenericNotifyWait>
					msg = (message_t*)msg_addr;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	617b      	str	r3, [r7, #20]

					// Configure hours, minutes, or seconds accordingly
					switch(curr_rtc_state) {
 8001b8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c3c <rtc_task+0x318>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	f200 80b9 	bhi.w	8001d0a <rtc_task+0x3e6>
 8001b98:	a201      	add	r2, pc, #4	@ (adr r2, 8001ba0 <rtc_task+0x27c>)
 8001b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9e:	bf00      	nop
 8001ba0:	08001bb1 	.word	0x08001bb1
 8001ba4:	08001be1 	.word	0x08001be1
 8001ba8:	08001c61 	.word	0x08001c61
 8001bac:	08001c91 	.word	0x08001c91
						case HH_CONFIG:
							uint8_t hour = getnumber(msg->payload, msg->len);
 8001bb0:	697a      	ldr	r2, [r7, #20]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f000 f8c7 	bl	8001d4c <getnumber>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	743b      	strb	r3, [r7, #16]
							time.Hours = hour;
 8001bc2:	4a24      	ldr	r2, [pc, #144]	@ (8001c54 <rtc_task+0x330>)
 8001bc4:	7c3b      	ldrb	r3, [r7, #16]
 8001bc6:	7013      	strb	r3, [r2, #0]
							curr_rtc_state = MM_CONFIG;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <rtc_task+0x318>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_mm, portMAX_DELAY);
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <rtc_task+0x2f0>)
 8001bd0:	6818      	ldr	r0, [r3, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bd8:	491f      	ldr	r1, [pc, #124]	@ (8001c58 <rtc_task+0x334>)
 8001bda:	f004 ffb1 	bl	8006b40 <xQueueGenericSend>
							break;
 8001bde:	e085      	b.n	8001cec <rtc_task+0x3c8>
						case MM_CONFIG:
							uint8_t min = getnumber(msg->payload, msg->len);
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	4619      	mov	r1, r3
 8001be8:	4610      	mov	r0, r2
 8001bea:	f000 f8af 	bl	8001d4c <getnumber>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	747b      	strb	r3, [r7, #17]
							time.Minutes = min;
 8001bf2:	4a18      	ldr	r2, [pc, #96]	@ (8001c54 <rtc_task+0x330>)
 8001bf4:	7c7b      	ldrb	r3, [r7, #17]
 8001bf6:	7053      	strb	r3, [r2, #1]
							curr_rtc_state = SS_CONFIG;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	@ (8001c3c <rtc_task+0x318>)
 8001bfa:	2202      	movs	r2, #2
 8001bfc:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ss, portMAX_DELAY);
 8001bfe:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <rtc_task+0x2f0>)
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	2300      	movs	r3, #0
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c08:	4914      	ldr	r1, [pc, #80]	@ (8001c5c <rtc_task+0x338>)
 8001c0a:	f004 ff99 	bl	8006b40 <xQueueGenericSend>
							break;
 8001c0e:	e06d      	b.n	8001cec <rtc_task+0x3c8>
 8001c10:	20000299 	.word	0x20000299
 8001c14:	20000280 	.word	0x20000280
 8001c18:	20000050 	.word	0x20000050
 8001c1c:	20000054 	.word	0x20000054
 8001c20:	0800a6f8 	.word	0x0800a6f8
 8001c24:	20000040 	.word	0x20000040
 8001c28:	0800a700 	.word	0x0800a700
 8001c2c:	20000030 	.word	0x20000030
 8001c30:	0800a708 	.word	0x0800a708
 8001c34:	0800a710 	.word	0x0800a710
 8001c38:	20000028 	.word	0x20000028
 8001c3c:	2000013c 	.word	0x2000013c
 8001c40:	20000154 	.word	0x20000154
 8001c44:	20000044 	.word	0x20000044
 8001c48:	20000048 	.word	0x20000048
 8001c4c:	2000004c 	.word	0x2000004c
 8001c50:	2000002c 	.word	0x2000002c
 8001c54:	20000140 	.word	0x20000140
 8001c58:	20000034 	.word	0x20000034
 8001c5c:	20000038 	.word	0x20000038
						case SS_CONFIG:
							uint8_t sec = getnumber(msg->payload, msg->len);
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	4619      	mov	r1, r3
 8001c68:	4610      	mov	r0, r2
 8001c6a:	f000 f86f 	bl	8001d4c <getnumber>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	74bb      	strb	r3, [r7, #18]
							time.Seconds = sec;
 8001c72:	4a2e      	ldr	r2, [pc, #184]	@ (8001d2c <rtc_task+0x408>)
 8001c74:	7cbb      	ldrb	r3, [r7, #18]
 8001c76:	7093      	strb	r3, [r2, #2]
							curr_rtc_state = AMPM_CONFIG;
 8001c78:	4b2d      	ldr	r3, [pc, #180]	@ (8001d30 <rtc_task+0x40c>)
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	601a      	str	r2, [r3, #0]
							xQueueSend(q_print, &msg_rtc_ampm, portMAX_DELAY);
 8001c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8001d34 <rtc_task+0x410>)
 8001c80:	6818      	ldr	r0, [r3, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c88:	492b      	ldr	r1, [pc, #172]	@ (8001d38 <rtc_task+0x414>)
 8001c8a:	f004 ff59 	bl	8006b40 <xQueueGenericSend>
							break;
 8001c8e:	e02d      	b.n	8001cec <rtc_task+0x3c8>
						case AMPM_CONFIG:
							uint8_t opt = getnumber(msg->payload, msg->len);
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	4619      	mov	r1, r3
 8001c98:	4610      	mov	r0, r2
 8001c9a:	f000 f857 	bl	8001d4c <getnumber>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	74fb      	strb	r3, [r7, #19]
							time.TimeFormat = opt; // Note: 0 = RTC_HOURFORMAT12_AM, 1 = RTC_HOURFORMAT12_PM
 8001ca2:	4a22      	ldr	r2, [pc, #136]	@ (8001d2c <rtc_task+0x408>)
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
 8001ca6:	70d3      	strb	r3, [r2, #3]
							
							// Check that the user entered a valid date entry, configure time
							if(!validate_rtc_information(&time, NULL)) {
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4820      	ldr	r0, [pc, #128]	@ (8001d2c <rtc_task+0x408>)
 8001cac:	f000 f86f 	bl	8001d8e <validate_rtc_information>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d10b      	bne.n	8001cce <rtc_task+0x3aa>
								rtc_configure_time(&time);
 8001cb6:	481d      	ldr	r0, [pc, #116]	@ (8001d2c <rtc_task+0x408>)
 8001cb8:	f000 f8a0 	bl	8001dfc <rtc_configure_time>
								xQueueSend(q_print, &msg_conf, portMAX_DELAY);
 8001cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <rtc_task+0x410>)
 8001cbe:	6818      	ldr	r0, [r3, #0]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cc6:	491d      	ldr	r1, [pc, #116]	@ (8001d3c <rtc_task+0x418>)
 8001cc8:	f004 ff3a 	bl	8006b40 <xQueueGenericSend>
 8001ccc:	e007      	b.n	8001cde <rtc_task+0x3ba>
							}
							else {
								xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001cce:	4b19      	ldr	r3, [pc, #100]	@ (8001d34 <rtc_task+0x410>)
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cd8:	4919      	ldr	r1, [pc, #100]	@ (8001d40 <rtc_task+0x41c>)
 8001cda:	f004 ff31 	bl	8006b40 <xQueueGenericSend>
							}
							// Update system state, send control back to RTC menu
							curr_sys_state = sRtcMenu;
 8001cde:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <rtc_task+0x420>)
 8001ce0:	2203      	movs	r2, #3
 8001ce2:	701a      	strb	r2, [r3, #0]
							curr_rtc_state = 0;
 8001ce4:	4b12      	ldr	r3, [pc, #72]	@ (8001d30 <rtc_task+0x40c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
							break;
 8001cea:	bf00      	nop
					}
					break;
 8001cec:	e00d      	b.n	8001d0a <rtc_task+0x3e6>
				default:
					// Return control to the main menu task
					curr_sys_state = sMainMenu;
 8001cee:	4b15      	ldr	r3, [pc, #84]	@ (8001d44 <rtc_task+0x420>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
					xQueueSend(q_print, &msg_inv_rtc, portMAX_DELAY);
 8001cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d34 <rtc_task+0x410>)
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001cfe:	4910      	ldr	r1, [pc, #64]	@ (8001d40 <rtc_task+0x41c>)
 8001d00:	f004 ff1e 	bl	8006b40 <xQueueGenericSend>
					break;
 8001d04:	e002      	b.n	8001d0c <rtc_task+0x3e8>
					break;
 8001d06:	bf00      	nop
 8001d08:	e000      	b.n	8001d0c <rtc_task+0x3e8>
					break;
 8001d0a:	bf00      	nop
		while(curr_sys_state != sMainMenu) {
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d44 <rtc_task+0x420>)
 8001d0e:	781b      	ldrb	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	f47f ae15 	bne.w	8001940 <rtc_task+0x1c>
			}

		} // while end

		// Notify the main menu task
		xTaskNotify(handle_main_menu_task, 0, eNoAction);
 8001d16:	4b0c      	ldr	r3, [pc, #48]	@ (8001d48 <rtc_task+0x424>)
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	2200      	movs	r2, #0
 8001d22:	2100      	movs	r1, #0
 8001d24:	f006 fa5a 	bl	80081dc <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001d28:	e600      	b.n	800192c <rtc_task+0x8>
 8001d2a:	bf00      	nop
 8001d2c:	20000140 	.word	0x20000140
 8001d30:	2000013c 	.word	0x2000013c
 8001d34:	20000280 	.word	0x20000280
 8001d38:	2000003c 	.word	0x2000003c
 8001d3c:	2000002c 	.word	0x2000002c
 8001d40:	20000028 	.word	0x20000028
 8001d44:	20000299 	.word	0x20000299
 8001d48:	20000268 	.word	0x20000268

08001d4c <getnumber>:
 * @note This function assumes only one or two digits in the ASCII number. If there are more than	   *
 *       two digits, it will only convert the first two to a number.								   *
  ******************************************************************************************************/

uint8_t getnumber(uint8_t *p, int len)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
	return (len > 1) ? ( ((p[0]-48) * 10) + (p[1]-48) ) : (p[0]-48);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	dd0e      	ble.n	8001d7a <getnumber+0x2e>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	4413      	add	r3, r2
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	3b10      	subs	r3, #16
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	e003      	b.n	8001d82 <getnumber+0x36>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	3b30      	subs	r3, #48	@ 0x30
 8001d80:	b2db      	uxtb	r3, r3
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr

08001d8e <validate_rtc_information>:
 *       - Year should be in the range 0-99 (assumption is 21st century).							   *
 *       - Month should be in the range 1-12.														   *
  ******************************************************************************************************/

int validate_rtc_information(RTC_TimeTypeDef *time, RTC_DateTypeDef *date)
{
 8001d8e:	b480      	push	{r7}
 8001d90:	b083      	sub	sp, #12
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	6039      	str	r1, [r7, #0]
	if(time) {
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d011      	beq.n	8001dc2 <validate_rtc_information+0x34>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) || (time->TimeFormat > 1) )
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d80b      	bhi.n	8001dbe <validate_rtc_information+0x30>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	785b      	ldrb	r3, [r3, #1]
 8001daa:	2b3b      	cmp	r3, #59	@ 0x3b
 8001dac:	d807      	bhi.n	8001dbe <validate_rtc_information+0x30>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	789b      	ldrb	r3, [r3, #2]
 8001db2:	2b3b      	cmp	r3, #59	@ 0x3b
 8001db4:	d803      	bhi.n	8001dbe <validate_rtc_information+0x30>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	78db      	ldrb	r3, [r3, #3]
 8001dba:	2b01      	cmp	r3, #1
 8001dbc:	d901      	bls.n	8001dc2 <validate_rtc_information+0x34>
			return 1;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e015      	b.n	8001dee <validate_rtc_information+0x60>
	}
	if(date) {
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d011      	beq.n	8001dec <validate_rtc_information+0x5e>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	789b      	ldrb	r3, [r3, #2]
 8001dcc:	2b1f      	cmp	r3, #31
 8001dce:	d80b      	bhi.n	8001de8 <validate_rtc_information+0x5a>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b07      	cmp	r3, #7
 8001dd6:	d807      	bhi.n	8001de8 <validate_rtc_information+0x5a>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	78db      	ldrb	r3, [r3, #3]
 8001ddc:	2b63      	cmp	r3, #99	@ 0x63
 8001dde:	d803      	bhi.n	8001de8 <validate_rtc_information+0x5a>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	785b      	ldrb	r3, [r3, #1]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d901      	bls.n	8001dec <validate_rtc_information+0x5e>
			return 1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e000      	b.n	8001dee <validate_rtc_information+0x60>
	}

	return 0;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <rtc_configure_time>:
 * @note The DayLightSaving defaults to RTC_DAYLIGHTSAVING_NONE (disable daylight saving).			   *
 * @note The StoreOperation defaults to RTC_STOREOPERATION_RESET.									   *														   *
  ******************************************************************************************************/

void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8001e10:	2200      	movs	r2, #0
 8001e12:	6879      	ldr	r1, [r7, #4]
 8001e14:	4803      	ldr	r0, [pc, #12]	@ (8001e24 <rtc_configure_time+0x28>)
 8001e16:	f002 f998 	bl	800414a <HAL_RTC_SetTime>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200001a8 	.word	0x200001a8

08001e28 <rtc_configure_date>:
 * 																									   *
 * @note This function uses the HAL library to set the RTC date in binary format (RTC_FORMAT_BIN). 	   *
  ******************************************************************************************************/

void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8001e30:	2200      	movs	r2, #0
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4803      	ldr	r0, [pc, #12]	@ (8001e44 <rtc_configure_date+0x1c>)
 8001e36:	f002 fa80 	bl	800433a <HAL_RTC_SetDate>
}
 8001e3a:	bf00      	nop
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200001a8 	.word	0x200001a8

08001e48 <show_time_date>:
 * 		 format "day, month-date-year". 															   *
 * @note The function assumes the presence of a queue `q_print` to send the formatted strings.		   *
  ******************************************************************************************************/

void show_time_date(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08c      	sub	sp, #48	@ 0x30
 8001e4c:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date, 0, sizeof(rtc_date));
 8001e4e:	f107 0314 	add.w	r3, r7, #20
 8001e52:	2204      	movs	r2, #4
 8001e54:	2100      	movs	r1, #0
 8001e56:	4618      	mov	r0, r3
 8001e58:	f007 fc2c 	bl	80096b4 <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	2214      	movs	r2, #20
 8001e60:	2100      	movs	r1, #0
 8001e62:	4618      	mov	r0, r3
 8001e64:	f007 fc26 	bl	80096b4 <memset>

	// Get the RTC current time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001e68:	463b      	mov	r3, r7
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4837      	ldr	r0, [pc, #220]	@ (8001f4c <show_time_date+0x104>)
 8001e70:	f002 fa05 	bl	800427e <HAL_RTC_GetTime>

	// Get the RTC current date
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4833      	ldr	r0, [pc, #204]	@ (8001f4c <show_time_date+0x104>)
 8001e7e:	f002 fae0 	bl	8004442 <HAL_RTC_GetDate>

	// Get AM / PM
	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001e82:	78fb      	ldrb	r3, [r7, #3]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <show_time_date+0x44>
 8001e88:	4b31      	ldr	r3, [pc, #196]	@ (8001f50 <show_time_date+0x108>)
 8001e8a:	e000      	b.n	8001e8e <show_time_date+0x46>
 8001e8c:	4b31      	ldr	r3, [pc, #196]	@ (8001f54 <show_time_date+0x10c>)
 8001e8e:	61bb      	str	r3, [r7, #24]

	// Display time format: hh:mm:ss [AM/PM]
	sprintf((char*)showtime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time & Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 8001e90:	783b      	ldrb	r3, [r7, #0]
 8001e92:	4618      	mov	r0, r3
 8001e94:	787b      	ldrb	r3, [r7, #1]
 8001e96:	461a      	mov	r2, r3
 8001e98:	78bb      	ldrb	r3, [r7, #2]
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	9302      	str	r3, [sp, #8]
 8001ea0:	9101      	str	r1, [sp, #4]
 8001ea2:	9200      	str	r2, [sp, #0]
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	4a2c      	ldr	r2, [pc, #176]	@ (8001f58 <show_time_date+0x110>)
 8001ea8:	492c      	ldr	r1, [pc, #176]	@ (8001f5c <show_time_date+0x114>)
 8001eaa:	482d      	ldr	r0, [pc, #180]	@ (8001f60 <show_time_date+0x118>)
 8001eac:	f007 fbe2 	bl	8009674 <siprintf>
	xQueueSend(q_print, &time, portMAX_DELAY);
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f64 <show_time_date+0x11c>)
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001eba:	492b      	ldr	r1, [pc, #172]	@ (8001f68 <show_time_date+0x120>)
 8001ebc:	f004 fe40 	bl	8006b40 <xQueueGenericSend>

	// Convert the user input day of the week from a number to a string
	switch(rtc_date.WeekDay) {
 8001ec0:	7d3b      	ldrb	r3, [r7, #20]
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	2b06      	cmp	r3, #6
 8001ec6:	d826      	bhi.n	8001f16 <show_time_date+0xce>
 8001ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8001ed0 <show_time_date+0x88>)
 8001eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ece:	bf00      	nop
 8001ed0:	08001eed 	.word	0x08001eed
 8001ed4:	08001ef3 	.word	0x08001ef3
 8001ed8:	08001ef9 	.word	0x08001ef9
 8001edc:	08001eff 	.word	0x08001eff
 8001ee0:	08001f05 	.word	0x08001f05
 8001ee4:	08001f0b 	.word	0x08001f0b
 8001ee8:	08001f11 	.word	0x08001f11
		case 1:
			weekday = "Sunday";
 8001eec:	4b1f      	ldr	r3, [pc, #124]	@ (8001f6c <show_time_date+0x124>)
 8001eee:	61fb      	str	r3, [r7, #28]
			break;
 8001ef0:	e011      	b.n	8001f16 <show_time_date+0xce>
		case 2:
			weekday = "Monday";
 8001ef2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f70 <show_time_date+0x128>)
 8001ef4:	61fb      	str	r3, [r7, #28]
			break;
 8001ef6:	e00e      	b.n	8001f16 <show_time_date+0xce>
		case 3:
			weekday = "Tuesday";
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f74 <show_time_date+0x12c>)
 8001efa:	61fb      	str	r3, [r7, #28]
			break;
 8001efc:	e00b      	b.n	8001f16 <show_time_date+0xce>
		case 4:
			weekday = "Wednesday";
 8001efe:	4b1e      	ldr	r3, [pc, #120]	@ (8001f78 <show_time_date+0x130>)
 8001f00:	61fb      	str	r3, [r7, #28]
			break;
 8001f02:	e008      	b.n	8001f16 <show_time_date+0xce>
		case 5:
			weekday = "Thursday";
 8001f04:	4b1d      	ldr	r3, [pc, #116]	@ (8001f7c <show_time_date+0x134>)
 8001f06:	61fb      	str	r3, [r7, #28]
			break;
 8001f08:	e005      	b.n	8001f16 <show_time_date+0xce>
		case 6:
			weekday = "Friday";
 8001f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <show_time_date+0x138>)
 8001f0c:	61fb      	str	r3, [r7, #28]
			break;
 8001f0e:	e002      	b.n	8001f16 <show_time_date+0xce>
		case 7:
			weekday = "Saturday";
 8001f10:	4b1c      	ldr	r3, [pc, #112]	@ (8001f84 <show_time_date+0x13c>)
 8001f12:	61fb      	str	r3, [r7, #28]
			break;
 8001f14:	bf00      	nop
	}
	
	// Display date format: day, month-date-year
	sprintf((char*)showdate, "\t%s, %02d-%02d-%02d\n", weekday, rtc_date.Month, rtc_date.Date, rtc_date.Year + 2000);
 8001f16:	7d7b      	ldrb	r3, [r7, #21]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	7dbb      	ldrb	r3, [r7, #22]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	7dfb      	ldrb	r3, [r7, #23]
 8001f20:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	9200      	str	r2, [sp, #0]
 8001f28:	460b      	mov	r3, r1
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	4916      	ldr	r1, [pc, #88]	@ (8001f88 <show_time_date+0x140>)
 8001f2e:	4817      	ldr	r0, [pc, #92]	@ (8001f8c <show_time_date+0x144>)
 8001f30:	f007 fba0 	bl	8009674 <siprintf>
	xQueueSend(q_print, &date, portMAX_DELAY);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	@ (8001f64 <show_time_date+0x11c>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f3e:	4914      	ldr	r1, [pc, #80]	@ (8001f90 <show_time_date+0x148>)
 8001f40:	f004 fdfe 	bl	8006b40 <xQueueGenericSend>
}
 8001f44:	bf00      	nop
 8001f46:	3720      	adds	r7, #32
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200001a8 	.word	0x200001a8
 8001f50:	0800a718 	.word	0x0800a718
 8001f54:	0800a71c 	.word	0x0800a71c
 8001f58:	0800a720 	.word	0x0800a720
 8001f5c:	0800a738 	.word	0x0800a738
 8001f60:	20000158 	.word	0x20000158
 8001f64:	20000280 	.word	0x20000280
 8001f68:	20000058 	.word	0x20000058
 8001f6c:	0800a750 	.word	0x0800a750
 8001f70:	0800a758 	.word	0x0800a758
 8001f74:	0800a760 	.word	0x0800a760
 8001f78:	0800a768 	.word	0x0800a768
 8001f7c:	0800a774 	.word	0x0800a774
 8001f80:	0800a780 	.word	0x0800a780
 8001f84:	0800a788 	.word	0x0800a788
 8001f88:	0800a794 	.word	0x0800a794
 8001f8c:	20000180 	.word	0x20000180
 8001f90:	2000005c 	.word	0x2000005c

08001f94 <main_menu_task>:
 *       command is available.                                                                         *
 * @note The main menu is displayed, and the user input is processed. Invalid inputs are handled and   *
 * an error message is sent to the print queue.                                                        *
 ******************************************************************************************************/
void main_menu_task(void *param)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b088      	sub	sp, #32
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	6078      	str	r0, [r7, #4]
	int option;

	while(1) {

		// Present the main menu to the user
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 8001f9c:	4b35      	ldr	r3, [pc, #212]	@ (8002074 <main_menu_task+0xe0>)
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fa6:	4934      	ldr	r1, [pc, #208]	@ (8002078 <main_menu_task+0xe4>)
 8001fa8:	f004 fdca 	bl	8006b40 <xQueueGenericSend>

		// Wait for user to select a menu option
		xTaskNotifyWait(0, 0, &msg_addr, portMAX_DELAY);
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fb4:	9200      	str	r2, [sp, #0]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f006 f88e 	bl	80080dc <xTaskGenericNotifyWait>
		msg = (message_t*)msg_addr;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	617b      	str	r3, [r7, #20]

		if(msg->len == 1) {
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d140      	bne.n	800204e <main_menu_task+0xba>
			// Get user option, convert from ASCII to number
			option = msg->payload[0] - 48;
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	3b30      	subs	r3, #48	@ 0x30
 8001fd2:	613b      	str	r3, [r7, #16]
			switch(option) {
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d023      	beq.n	8002022 <main_menu_task+0x8e>
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	dc2d      	bgt.n	800203c <main_menu_task+0xa8>
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <main_menu_task+0x5a>
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d00d      	beq.n	8002008 <main_menu_task+0x74>
 8001fec:	e026      	b.n	800203c <main_menu_task+0xa8>
				case 0:
					// User selection: LED menu
					curr_sys_state = sLedMenu;
 8001fee:	4b23      	ldr	r3, [pc, #140]	@ (800207c <main_menu_task+0xe8>)
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 8001ff4:	4b22      	ldr	r3, [pc, #136]	@ (8002080 <main_menu_task+0xec>)
 8001ff6:	6818      	ldr	r0, [r3, #0]
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	9300      	str	r3, [sp, #0]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	f006 f8eb 	bl	80081dc <xTaskGenericNotify>
					break;
 8002006:	e02b      	b.n	8002060 <main_menu_task+0xcc>
				case 1:
					curr_sys_state = sRtcMenu;
 8002008:	4b1c      	ldr	r3, [pc, #112]	@ (800207c <main_menu_task+0xe8>)
 800200a:	2203      	movs	r2, #3
 800200c:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 800200e:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <main_menu_task+0xf0>)
 8002010:	6818      	ldr	r0, [r3, #0]
 8002012:	2300      	movs	r3, #0
 8002014:	9300      	str	r3, [sp, #0]
 8002016:	2300      	movs	r3, #0
 8002018:	2200      	movs	r2, #0
 800201a:	2100      	movs	r1, #0
 800201c:	f006 f8de 	bl	80081dc <xTaskGenericNotify>
					break;
 8002020:	e01e      	b.n	8002060 <main_menu_task+0xcc>
				case 2:
					curr_sys_state = sAccMenu;
 8002022:	4b16      	ldr	r3, [pc, #88]	@ (800207c <main_menu_task+0xe8>)
 8002024:	2202      	movs	r2, #2
 8002026:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_acc_task, 0, eNoAction);
 8002028:	4b17      	ldr	r3, [pc, #92]	@ (8002088 <main_menu_task+0xf4>)
 800202a:	6818      	ldr	r0, [r3, #0]
 800202c:	2300      	movs	r3, #0
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2300      	movs	r3, #0
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	f006 f8d1 	bl	80081dc <xTaskGenericNotify>
					break;
 800203a:	e011      	b.n	8002060 <main_menu_task+0xcc>
				default:
					xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 800203c:	4b0d      	ldr	r3, [pc, #52]	@ (8002074 <main_menu_task+0xe0>)
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	2300      	movs	r3, #0
 8002042:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002046:	4911      	ldr	r1, [pc, #68]	@ (800208c <main_menu_task+0xf8>)
 8002048:	f004 fd7a 	bl	8006b40 <xQueueGenericSend>
					continue;
 800204c:	e011      	b.n	8002072 <main_menu_task+0xde>
			}
		}
		// Handle invalid entry
		else {
			xQueueSend(q_print, &msg_inv_uart, portMAX_DELAY);
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <main_menu_task+0xe0>)
 8002050:	6818      	ldr	r0, [r3, #0]
 8002052:	2300      	movs	r3, #0
 8002054:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002058:	490c      	ldr	r1, [pc, #48]	@ (800208c <main_menu_task+0xf8>)
 800205a:	f004 fd71 	bl	8006b40 <xQueueGenericSend>
			continue;
 800205e:	e008      	b.n	8002072 <main_menu_task+0xde>
		}

		// Wait for notification from another task before running again
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002060:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	2300      	movs	r3, #0
 8002068:	2200      	movs	r2, #0
 800206a:	2100      	movs	r1, #0
 800206c:	2000      	movs	r0, #0
 800206e:	f006 f835 	bl	80080dc <xTaskGenericNotifyWait>
		xQueueSend(q_print, &msg_main_menu, portMAX_DELAY);
 8002072:	e793      	b.n	8001f9c <main_menu_task+0x8>
 8002074:	20000280 	.word	0x20000280
 8002078:	20000064 	.word	0x20000064
 800207c:	20000299 	.word	0x20000299
 8002080:	20000274 	.word	0x20000274
 8002084:	20000278 	.word	0x20000278
 8002088:	2000027c 	.word	0x2000027c
 800208c:	20000060 	.word	0x20000060

08002090 <message_handler_task>:
 * @note The data queue (`q_data`) and print queue (`q_print`) must be initialized. The task must be   *
 *       notified when a new message is available.                                                     *
 * @note The processed message is sent to the print queue (`q_print`).                                 *
 ******************************************************************************************************/
void message_handler_task(void *param)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b08a      	sub	sp, #40	@ 0x28
 8002094:	af02      	add	r7, sp, #8
 8002096:	6078      	str	r0, [r7, #4]
	message_t msg;

	while(1) {

		// Wait until task is notified
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8002098:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	2200      	movs	r2, #0
 80020a2:	2100      	movs	r1, #0
 80020a4:	2000      	movs	r0, #0
 80020a6:	f006 f819 	bl	80080dc <xTaskGenericNotifyWait>
 80020aa:	61f8      	str	r0, [r7, #28]

		if(pdTRUE == ret) {
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d1f2      	bne.n	8002098 <message_handler_task+0x8>
			// Process the message stored in the input data queue
			process_message(&msg);
 80020b2:	f107 030c 	add.w	r3, r7, #12
 80020b6:	4618      	mov	r0, r3
 80020b8:	f000 f822 	bl	8002100 <process_message>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80020bc:	e7ec      	b.n	8002098 <message_handler_task+0x8>
	...

080020c0 <print_task>:
 * @note This function is intended to run as a FreeRTOS task.                                          *
 * @note The print queue (`q_print`) must be initialized and contain messages to print.                *
 * @note The received message is transmitted via UART.                                                 *
 ******************************************************************************************************/
void print_task(void *param)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	uint32_t *msg;

	// Wait for data in the print queue, then send over UART when available
	while(1){
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <print_task+0x38>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f107 010c 	add.w	r1, r7, #12
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020d4:	4618      	mov	r0, r3
 80020d6:	f004 fee3 	bl	8006ea0 <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen((char*)msg),HAL_MAX_DELAY);
 80020da:	68fc      	ldr	r4, [r7, #12]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f880 	bl	80001e4 <strlen>
 80020e4:	4603      	mov	r3, r0
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020ec:	4621      	mov	r1, r4
 80020ee:	4803      	ldr	r0, [pc, #12]	@ (80020fc <print_task+0x3c>)
 80020f0:	f003 fb7c 	bl	80057ec <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80020f4:	bf00      	nop
 80020f6:	e7e7      	b.n	80020c8 <print_task+0x8>
 80020f8:	20000280 	.word	0x20000280
 80020fc:	20000220 	.word	0x20000220

08002100 <process_message>:
 * @return void                                                                                        *
 *                                                                                                     *
 * @note This function is called by the `message_handler_task` when a notification is received.        *
 * @note The data queue (`q_data`) must be initialized and contain a message to process.               *
 ******************************************************************************************************/
void process_message(message_t *msg) {
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af02      	add	r7, sp, #8
 8002106:	6078      	str	r0, [r7, #4]

	extract_command(msg);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f84b 	bl	80021a4 <extract_command>

	switch(curr_sys_state) {
 800210e:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <process_message+0x90>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b05      	cmp	r3, #5
 8002114:	d836      	bhi.n	8002184 <process_message+0x84>
 8002116:	a201      	add	r2, pc, #4	@ (adr r2, 800211c <process_message+0x1c>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	08002135 	.word	0x08002135
 8002120:	08002149 	.word	0x08002149
 8002124:	0800215d 	.word	0x0800215d
 8002128:	08002171 	.word	0x08002171
 800212c:	08002171 	.word	0x08002171
 8002130:	08002171 	.word	0x08002171
		case sMainMenu:
			// Notify the main menu task and pass the message
			xTaskNotify(handle_main_menu_task, (uint32_t)msg, eSetValueWithOverwrite);
 8002134:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <process_message+0x94>)
 8002136:	6818      	ldr	r0, [r3, #0]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	2300      	movs	r3, #0
 800213c:	9300      	str	r3, [sp, #0]
 800213e:	2303      	movs	r3, #3
 8002140:	2100      	movs	r1, #0
 8002142:	f006 f84b 	bl	80081dc <xTaskGenericNotify>
			break;
 8002146:	e01e      	b.n	8002186 <process_message+0x86>
		case sLedMenu:
			// Notify the led task and pass the message
			xTaskNotify(handle_led_task, (uint32_t)msg, eSetValueWithOverwrite);
 8002148:	4b13      	ldr	r3, [pc, #76]	@ (8002198 <process_message+0x98>)
 800214a:	6818      	ldr	r0, [r3, #0]
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2303      	movs	r3, #3
 8002154:	2100      	movs	r1, #0
 8002156:	f006 f841 	bl	80081dc <xTaskGenericNotify>
			break;
 800215a:	e014      	b.n	8002186 <process_message+0x86>
		case sAccMenu:
			// Notify the ACC task and pass the message
			xTaskNotify(handle_acc_task, (uint32_t)msg, eSetValueWithOverwrite);
 800215c:	4b0f      	ldr	r3, [pc, #60]	@ (800219c <process_message+0x9c>)
 800215e:	6818      	ldr	r0, [r3, #0]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	2300      	movs	r3, #0
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2303      	movs	r3, #3
 8002168:	2100      	movs	r1, #0
 800216a:	f006 f837 	bl	80081dc <xTaskGenericNotify>
			break;
 800216e:	e00a      	b.n	8002186 <process_message+0x86>
		case sRtcMenu:
		case sRtcTimeConfig:
		case sRtcDateConfig:
			// Notify the RTC task and pass the message
			xTaskNotify(handle_rtc_task, (uint32_t)msg, eSetValueWithOverwrite);
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <process_message+0xa0>)
 8002172:	6818      	ldr	r0, [r3, #0]
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	2300      	movs	r3, #0
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2303      	movs	r3, #3
 800217c:	2100      	movs	r1, #0
 800217e:	f006 f82d 	bl	80081dc <xTaskGenericNotify>
			break;
 8002182:	e000      	b.n	8002186 <process_message+0x86>
		default:
			break;
 8002184:	bf00      	nop
	}
}
 8002186:	bf00      	nop
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	20000299 	.word	0x20000299
 8002194:	20000268 	.word	0x20000268
 8002198:	20000274 	.word	0x20000274
 800219c:	2000027c 	.word	0x2000027c
 80021a0:	20000278 	.word	0x20000278

080021a4 <extract_command>:
 * @note This function is called by `process_message` to parse the incoming command message.           *
 * @note The data queue (`q_data`) must be initialized and contain a message to extract.               *
 * @note The extracted command is stored in the `msg` structure, with its payload and length fields    *
 *       populated.                                                                                    *
 ******************************************************************************************************/
int extract_command(message_t *msg) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	// Check if there is data in the data queue
	status = uxQueueMessagesWaiting(q_data);
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <extract_command+0x70>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f004 ffe9 	bl	8007188 <uxQueueMessagesWaiting>
 80021b6:	4603      	mov	r3, r0
 80021b8:	613b      	str	r3, [r7, #16]
	if(!status) {
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <extract_command+0x22>
		return -1;
 80021c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021c4:	e022      	b.n	800220c <extract_command+0x68>
	}

	// If data is available in the data queue, load it to the msg payload
	uint8_t i=0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]
	do {
		status = xQueueReceive(q_data, &item, 0);
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <extract_command+0x70>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f107 010f 	add.w	r1, r7, #15
 80021d2:	2200      	movs	r2, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f004 fe63 	bl	8006ea0 <xQueueReceive>
 80021da:	6138      	str	r0, [r7, #16]
		if(pdTRUE == status) {
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d106      	bne.n	80021f0 <extract_command+0x4c>
			msg->payload[i++] = item;
 80021e2:	7dfb      	ldrb	r3, [r7, #23]
 80021e4:	1c5a      	adds	r2, r3, #1
 80021e6:	75fa      	strb	r2, [r7, #23]
 80021e8:	461a      	mov	r2, r3
 80021ea:	7bf9      	ldrb	r1, [r7, #15]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	5499      	strb	r1, [r3, r2]
		}
	} while (item != '\n');
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	2b0a      	cmp	r3, #10
 80021f4:	d1e9      	bne.n	80021ca <extract_command+0x26>

	// Set final character in message payload to null character
	msg->payload[i-1] = '\0';
 80021f6:	7dfb      	ldrb	r3, [r7, #23]
 80021f8:	3b01      	subs	r3, #1
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	2100      	movs	r1, #0
 80021fe:	54d1      	strb	r1, [r2, r3]
	// Save length of message without null character
	msg->len = i-1;
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	3b01      	subs	r3, #1
 8002204:	461a      	mov	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	60da      	str	r2, [r3, #12]

	return 0;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000284 	.word	0x20000284

08002218 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b08c      	sub	sp, #48	@ 0x30
 800221c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800221e:	f000 fddf 	bl	8002de0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002222:	f000 f929 	bl	8002478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002226:	f000 fa19 	bl	800265c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800222a:	f000 f9ed 	bl	8002608 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800222e:	f000 f98f 	bl	8002550 <MX_RTC_Init>
  MX_SPI1_Init();
 8002232:	f000 f9b3 	bl	800259c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  accelerometer_init();
 8002236:	f7fe fe95 	bl	8000f64 <accelerometer_init>

  // Create main menu task and check that it was created successfully
  status = xTaskCreate(main_menu_task, "main_menu_task", 250, NULL, 2, &handle_main_menu_task);
 800223a:	4b76      	ldr	r3, [pc, #472]	@ (8002414 <main+0x1fc>)
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	2302      	movs	r3, #2
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2300      	movs	r3, #0
 8002244:	22fa      	movs	r2, #250	@ 0xfa
 8002246:	4974      	ldr	r1, [pc, #464]	@ (8002418 <main+0x200>)
 8002248:	4874      	ldr	r0, [pc, #464]	@ (800241c <main+0x204>)
 800224a:	f005 f951 	bl	80074f0 <xTaskCreate>
 800224e:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d00b      	beq.n	800226e <main+0x56>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8002256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800225a:	f383 8811 	msr	BASEPRI, r3
 800225e:	f3bf 8f6f 	isb	sy
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	61fb      	str	r3, [r7, #28]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	e7fd      	b.n	800226a <main+0x52>

  // Create message handler task and check that it was created successfully
  status = xTaskCreate(message_handler_task, "msg_task", 250, NULL, 2, &handle_message_handler_task);
 800226e:	4b6c      	ldr	r3, [pc, #432]	@ (8002420 <main+0x208>)
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	2302      	movs	r3, #2
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	22fa      	movs	r2, #250	@ 0xfa
 800227a:	496a      	ldr	r1, [pc, #424]	@ (8002424 <main+0x20c>)
 800227c:	486a      	ldr	r0, [pc, #424]	@ (8002428 <main+0x210>)
 800227e:	f005 f937 	bl	80074f0 <xTaskCreate>
 8002282:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d00b      	beq.n	80022a2 <main+0x8a>
        __asm volatile
 800228a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	61bb      	str	r3, [r7, #24]
    }
 800229c:	bf00      	nop
 800229e:	bf00      	nop
 80022a0:	e7fd      	b.n	800229e <main+0x86>

  // Create print task and check that it was created successfully
  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 80022a2:	4b62      	ldr	r3, [pc, #392]	@ (800242c <main+0x214>)
 80022a4:	9301      	str	r3, [sp, #4]
 80022a6:	2302      	movs	r3, #2
 80022a8:	9300      	str	r3, [sp, #0]
 80022aa:	2300      	movs	r3, #0
 80022ac:	22fa      	movs	r2, #250	@ 0xfa
 80022ae:	4960      	ldr	r1, [pc, #384]	@ (8002430 <main+0x218>)
 80022b0:	4860      	ldr	r0, [pc, #384]	@ (8002434 <main+0x21c>)
 80022b2:	f005 f91d 	bl	80074f0 <xTaskCreate>
 80022b6:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d00b      	beq.n	80022d6 <main+0xbe>
        __asm volatile
 80022be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c2:	f383 8811 	msr	BASEPRI, r3
 80022c6:	f3bf 8f6f 	isb	sy
 80022ca:	f3bf 8f4f 	dsb	sy
 80022ce:	617b      	str	r3, [r7, #20]
    }
 80022d0:	bf00      	nop
 80022d2:	bf00      	nop
 80022d4:	e7fd      	b.n	80022d2 <main+0xba>

  // Create LED task and check that it was created successfully
  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 80022d6:	4b58      	ldr	r3, [pc, #352]	@ (8002438 <main+0x220>)
 80022d8:	9301      	str	r3, [sp, #4]
 80022da:	2302      	movs	r3, #2
 80022dc:	9300      	str	r3, [sp, #0]
 80022de:	2300      	movs	r3, #0
 80022e0:	22fa      	movs	r2, #250	@ 0xfa
 80022e2:	4956      	ldr	r1, [pc, #344]	@ (800243c <main+0x224>)
 80022e4:	4856      	ldr	r0, [pc, #344]	@ (8002440 <main+0x228>)
 80022e6:	f005 f903 	bl	80074f0 <xTaskCreate>
 80022ea:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 80022ec:	6a3b      	ldr	r3, [r7, #32]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d00b      	beq.n	800230a <main+0xf2>
        __asm volatile
 80022f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022f6:	f383 8811 	msr	BASEPRI, r3
 80022fa:	f3bf 8f6f 	isb	sy
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	613b      	str	r3, [r7, #16]
    }
 8002304:	bf00      	nop
 8002306:	bf00      	nop
 8002308:	e7fd      	b.n	8002306 <main+0xee>

  // Create RTC task and check that it was created successfully
  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 800230a:	4b4e      	ldr	r3, [pc, #312]	@ (8002444 <main+0x22c>)
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	2302      	movs	r3, #2
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	2300      	movs	r3, #0
 8002314:	22fa      	movs	r2, #250	@ 0xfa
 8002316:	494c      	ldr	r1, [pc, #304]	@ (8002448 <main+0x230>)
 8002318:	484c      	ldr	r0, [pc, #304]	@ (800244c <main+0x234>)
 800231a:	f005 f8e9 	bl	80074f0 <xTaskCreate>
 800231e:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d00b      	beq.n	800233e <main+0x126>
        __asm volatile
 8002326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800232a:	f383 8811 	msr	BASEPRI, r3
 800232e:	f3bf 8f6f 	isb	sy
 8002332:	f3bf 8f4f 	dsb	sy
 8002336:	60fb      	str	r3, [r7, #12]
    }
 8002338:	bf00      	nop
 800233a:	bf00      	nop
 800233c:	e7fd      	b.n	800233a <main+0x122>

  // Create RTC task and check that it was created successfully
  status = xTaskCreate(acc_task, "accelerometer_task", 250, NULL, 2, &handle_acc_task);
 800233e:	4b44      	ldr	r3, [pc, #272]	@ (8002450 <main+0x238>)
 8002340:	9301      	str	r3, [sp, #4]
 8002342:	2302      	movs	r3, #2
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	2300      	movs	r3, #0
 8002348:	22fa      	movs	r2, #250	@ 0xfa
 800234a:	4942      	ldr	r1, [pc, #264]	@ (8002454 <main+0x23c>)
 800234c:	4842      	ldr	r0, [pc, #264]	@ (8002458 <main+0x240>)
 800234e:	f005 f8cf 	bl	80074f0 <xTaskCreate>
 8002352:	6238      	str	r0, [r7, #32]
  configASSERT(pdPASS == status);
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d00b      	beq.n	8002372 <main+0x15a>
        __asm volatile
 800235a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800235e:	f383 8811 	msr	BASEPRI, r3
 8002362:	f3bf 8f6f 	isb	sy
 8002366:	f3bf 8f4f 	dsb	sy
 800236a:	60bb      	str	r3, [r7, #8]
    }
 800236c:	bf00      	nop
 800236e:	bf00      	nop
 8002370:	e7fd      	b.n	800236e <main+0x156>

  // Create data queue and check that it was created successfully
  q_data = xQueueCreate(10, sizeof(char));
 8002372:	2200      	movs	r2, #0
 8002374:	2101      	movs	r1, #1
 8002376:	200a      	movs	r0, #10
 8002378:	f004 fb5c 	bl	8006a34 <xQueueGenericCreate>
 800237c:	4603      	mov	r3, r0
 800237e:	4a37      	ldr	r2, [pc, #220]	@ (800245c <main+0x244>)
 8002380:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_data);
 8002382:	4b36      	ldr	r3, [pc, #216]	@ (800245c <main+0x244>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d10b      	bne.n	80023a2 <main+0x18a>
        __asm volatile
 800238a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800238e:	f383 8811 	msr	BASEPRI, r3
 8002392:	f3bf 8f6f 	isb	sy
 8002396:	f3bf 8f4f 	dsb	sy
 800239a:	607b      	str	r3, [r7, #4]
    }
 800239c:	bf00      	nop
 800239e:	bf00      	nop
 80023a0:	e7fd      	b.n	800239e <main+0x186>

  // Create print queue and check that it was created successfully
  q_print = xQueueCreate(10, sizeof(size_t));
 80023a2:	2200      	movs	r2, #0
 80023a4:	2104      	movs	r1, #4
 80023a6:	200a      	movs	r0, #10
 80023a8:	f004 fb44 	bl	8006a34 <xQueueGenericCreate>
 80023ac:	4603      	mov	r3, r0
 80023ae:	4a2c      	ldr	r2, [pc, #176]	@ (8002460 <main+0x248>)
 80023b0:	6013      	str	r3, [r2, #0]
  configASSERT(NULL != q_print);
 80023b2:	4b2b      	ldr	r3, [pc, #172]	@ (8002460 <main+0x248>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10b      	bne.n	80023d2 <main+0x1ba>
        __asm volatile
 80023ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023be:	f383 8811 	msr	BASEPRI, r3
 80023c2:	f3bf 8f6f 	isb	sy
 80023c6:	f3bf 8f4f 	dsb	sy
 80023ca:	603b      	str	r3, [r7, #0]
    }
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	e7fd      	b.n	80023ce <main+0x1b6>

  // Create software timers for LED effects
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 80023d2:	2300      	movs	r3, #0
 80023d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023d6:	e010      	b.n	80023fa <main+0x1e2>
	  handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void*)i, led_callback);
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	4a22      	ldr	r2, [pc, #136]	@ (8002464 <main+0x24c>)
 80023dc:	9200      	str	r2, [sp, #0]
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80023e4:	4820      	ldr	r0, [pc, #128]	@ (8002468 <main+0x250>)
 80023e6:	f006 f97d 	bl	80086e4 <xTimerCreate>
 80023ea:	4602      	mov	r2, r0
 80023ec:	491f      	ldr	r1, [pc, #124]	@ (800246c <main+0x254>)
 80023ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i=0; i<NUM_LED_TIMERS; i++) {
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	3301      	adds	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	2b03      	cmp	r3, #3
 80023fe:	ddeb      	ble.n	80023d8 <main+0x1c0>
  }

  // Prepare UART to receive a message
  HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 8002400:	2201      	movs	r2, #1
 8002402:	491b      	ldr	r1, [pc, #108]	@ (8002470 <main+0x258>)
 8002404:	481b      	ldr	r0, [pc, #108]	@ (8002474 <main+0x25c>)
 8002406:	f003 fa7c 	bl	8005902 <HAL_UART_Receive_IT>

  // Start the kernel
  vTaskStartScheduler();
 800240a:	f005 f9b7 	bl	800777c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800240e:	bf00      	nop
 8002410:	e7fd      	b.n	800240e <main+0x1f6>
 8002412:	bf00      	nop
 8002414:	20000268 	.word	0x20000268
 8002418:	0800a8d8 	.word	0x0800a8d8
 800241c:	08001f95 	.word	0x08001f95
 8002420:	2000026c 	.word	0x2000026c
 8002424:	0800a8e8 	.word	0x0800a8e8
 8002428:	08002091 	.word	0x08002091
 800242c:	20000270 	.word	0x20000270
 8002430:	0800a8f4 	.word	0x0800a8f4
 8002434:	080020c1 	.word	0x080020c1
 8002438:	20000274 	.word	0x20000274
 800243c:	0800a900 	.word	0x0800a900
 8002440:	080012c9 	.word	0x080012c9
 8002444:	20000278 	.word	0x20000278
 8002448:	0800a90c 	.word	0x0800a90c
 800244c:	08001925 	.word	0x08001925
 8002450:	2000027c 	.word	0x2000027c
 8002454:	0800a918 	.word	0x0800a918
 8002458:	08000d7d 	.word	0x08000d7d
 800245c:	20000284 	.word	0x20000284
 8002460:	20000280 	.word	0x20000280
 8002464:	080015e9 	.word	0x080015e9
 8002468:	0800a92c 	.word	0x0800a92c
 800246c:	20000288 	.word	0x20000288
 8002470:	20000298 	.word	0x20000298
 8002474:	20000220 	.word	0x20000220

08002478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b094      	sub	sp, #80	@ 0x50
 800247c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800247e:	f107 0320 	add.w	r3, r7, #32
 8002482:	2230      	movs	r2, #48	@ 0x30
 8002484:	2100      	movs	r1, #0
 8002486:	4618      	mov	r0, r3
 8002488:	f007 f914 	bl	80096b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800248c:	f107 030c 	add.w	r3, r7, #12
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800249c:	2300      	movs	r3, #0
 800249e:	60bb      	str	r3, [r7, #8]
 80024a0:	4b29      	ldr	r3, [pc, #164]	@ (8002548 <SystemClock_Config+0xd0>)
 80024a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a4:	4a28      	ldr	r2, [pc, #160]	@ (8002548 <SystemClock_Config+0xd0>)
 80024a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ac:	4b26      	ldr	r3, [pc, #152]	@ (8002548 <SystemClock_Config+0xd0>)
 80024ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024b8:	2300      	movs	r3, #0
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	4b23      	ldr	r3, [pc, #140]	@ (800254c <SystemClock_Config+0xd4>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a22      	ldr	r2, [pc, #136]	@ (800254c <SystemClock_Config+0xd4>)
 80024c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c6:	6013      	str	r3, [r2, #0]
 80024c8:	4b20      	ldr	r3, [pc, #128]	@ (800254c <SystemClock_Config+0xd4>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024d0:	607b      	str	r3, [r7, #4]
 80024d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80024d4:	230a      	movs	r3, #10
 80024d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024d8:	2301      	movs	r3, #1
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024dc:	2310      	movs	r3, #16
 80024de:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80024e0:	2301      	movs	r3, #1
 80024e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024e4:	2302      	movs	r3, #2
 80024e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024e8:	2300      	movs	r3, #0
 80024ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80024ec:	2308      	movs	r3, #8
 80024ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80024f0:	2332      	movs	r3, #50	@ 0x32
 80024f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80024f4:	2304      	movs	r3, #4
 80024f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80024f8:	2307      	movs	r3, #7
 80024fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024fc:	f107 0320 	add.w	r3, r7, #32
 8002500:	4618      	mov	r0, r3
 8002502:	f000 fff3 	bl	80034ec <HAL_RCC_OscConfig>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800250c:	f000 fa5a 	bl	80029c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002510:	230f      	movs	r3, #15
 8002512:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002514:	2302      	movs	r3, #2
 8002516:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800251c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002522:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002526:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002528:	f107 030c 	add.w	r3, r7, #12
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f001 fa54 	bl	80039dc <HAL_RCC_ClockConfig>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800253a:	f000 fa43 	bl	80029c4 <Error_Handler>
  }
}
 800253e:	bf00      	nop
 8002540:	3750      	adds	r7, #80	@ 0x50
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	40007000 	.word	0x40007000

08002550 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002554:	4b0f      	ldr	r3, [pc, #60]	@ (8002594 <MX_RTC_Init+0x44>)
 8002556:	4a10      	ldr	r2, [pc, #64]	@ (8002598 <MX_RTC_Init+0x48>)
 8002558:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 800255a:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <MX_RTC_Init+0x44>)
 800255c:	2240      	movs	r2, #64	@ 0x40
 800255e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002560:	4b0c      	ldr	r3, [pc, #48]	@ (8002594 <MX_RTC_Init+0x44>)
 8002562:	227f      	movs	r2, #127	@ 0x7f
 8002564:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002566:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <MX_RTC_Init+0x44>)
 8002568:	22ff      	movs	r2, #255	@ 0xff
 800256a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800256c:	4b09      	ldr	r3, [pc, #36]	@ (8002594 <MX_RTC_Init+0x44>)
 800256e:	2200      	movs	r2, #0
 8002570:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002572:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <MX_RTC_Init+0x44>)
 8002574:	2200      	movs	r2, #0
 8002576:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <MX_RTC_Init+0x44>)
 800257a:	2200      	movs	r2, #0
 800257c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800257e:	4805      	ldr	r0, [pc, #20]	@ (8002594 <MX_RTC_Init+0x44>)
 8002580:	f001 fd60 	bl	8004044 <HAL_RTC_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800258a:	f000 fa1b 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800258e:	bf00      	nop
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	200001a8 	.word	0x200001a8
 8002598:	40002800 	.word	0x40002800

0800259c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80025a0:	4b17      	ldr	r3, [pc, #92]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025a2:	4a18      	ldr	r2, [pc, #96]	@ (8002604 <MX_SPI1_Init+0x68>)
 80025a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80025a6:	4b16      	ldr	r3, [pc, #88]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80025ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80025ae:	4b14      	ldr	r3, [pc, #80]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80025b4:	4b12      	ldr	r3, [pc, #72]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025bc:	2200      	movs	r2, #0
 80025be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80025c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80025c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80025d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80025da:	4b09      	ldr	r3, [pc, #36]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025dc:	2200      	movs	r2, #0
 80025de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80025e0:	4b07      	ldr	r3, [pc, #28]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80025e6:	4b06      	ldr	r3, [pc, #24]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025e8:	220a      	movs	r2, #10
 80025ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025ec:	4804      	ldr	r0, [pc, #16]	@ (8002600 <MX_SPI1_Init+0x64>)
 80025ee:	f002 f835 	bl	800465c <HAL_SPI_Init>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80025f8:	f000 f9e4 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025fc:	bf00      	nop
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	200001c8 	.word	0x200001c8
 8002604:	40013000 	.word	0x40013000

08002608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800260c:	4b11      	ldr	r3, [pc, #68]	@ (8002654 <MX_USART2_UART_Init+0x4c>)
 800260e:	4a12      	ldr	r2, [pc, #72]	@ (8002658 <MX_USART2_UART_Init+0x50>)
 8002610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002612:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <MX_USART2_UART_Init+0x4c>)
 8002614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800261a:	4b0e      	ldr	r3, [pc, #56]	@ (8002654 <MX_USART2_UART_Init+0x4c>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002620:	4b0c      	ldr	r3, [pc, #48]	@ (8002654 <MX_USART2_UART_Init+0x4c>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002626:	4b0b      	ldr	r3, [pc, #44]	@ (8002654 <MX_USART2_UART_Init+0x4c>)
 8002628:	2200      	movs	r2, #0
 800262a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800262c:	4b09      	ldr	r3, [pc, #36]	@ (8002654 <MX_USART2_UART_Init+0x4c>)
 800262e:	220c      	movs	r2, #12
 8002630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002632:	4b08      	ldr	r3, [pc, #32]	@ (8002654 <MX_USART2_UART_Init+0x4c>)
 8002634:	2200      	movs	r2, #0
 8002636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002638:	4b06      	ldr	r3, [pc, #24]	@ (8002654 <MX_USART2_UART_Init+0x4c>)
 800263a:	2200      	movs	r2, #0
 800263c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800263e:	4805      	ldr	r0, [pc, #20]	@ (8002654 <MX_USART2_UART_Init+0x4c>)
 8002640:	f003 f884 	bl	800574c <HAL_UART_Init>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800264a:	f000 f9bb 	bl	80029c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800264e:	bf00      	nop
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	20000220 	.word	0x20000220
 8002658:	40004400 	.word	0x40004400

0800265c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b08c      	sub	sp, #48	@ 0x30
 8002660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002662:	f107 031c 	add.w	r3, r7, #28
 8002666:	2200      	movs	r2, #0
 8002668:	601a      	str	r2, [r3, #0]
 800266a:	605a      	str	r2, [r3, #4]
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	60da      	str	r2, [r3, #12]
 8002670:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	4b9a      	ldr	r3, [pc, #616]	@ (80028e0 <MX_GPIO_Init+0x284>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	4a99      	ldr	r2, [pc, #612]	@ (80028e0 <MX_GPIO_Init+0x284>)
 800267c:	f043 0310 	orr.w	r3, r3, #16
 8002680:	6313      	str	r3, [r2, #48]	@ 0x30
 8002682:	4b97      	ldr	r3, [pc, #604]	@ (80028e0 <MX_GPIO_Init+0x284>)
 8002684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	61bb      	str	r3, [r7, #24]
 800268c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800268e:	2300      	movs	r3, #0
 8002690:	617b      	str	r3, [r7, #20]
 8002692:	4b93      	ldr	r3, [pc, #588]	@ (80028e0 <MX_GPIO_Init+0x284>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	4a92      	ldr	r2, [pc, #584]	@ (80028e0 <MX_GPIO_Init+0x284>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	6313      	str	r3, [r2, #48]	@ 0x30
 800269e:	4b90      	ldr	r3, [pc, #576]	@ (80028e0 <MX_GPIO_Init+0x284>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80026aa:	2300      	movs	r3, #0
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	4b8c      	ldr	r3, [pc, #560]	@ (80028e0 <MX_GPIO_Init+0x284>)
 80026b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b2:	4a8b      	ldr	r2, [pc, #556]	@ (80028e0 <MX_GPIO_Init+0x284>)
 80026b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80026ba:	4b89      	ldr	r3, [pc, #548]	@ (80028e0 <MX_GPIO_Init+0x284>)
 80026bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026c6:	2300      	movs	r3, #0
 80026c8:	60fb      	str	r3, [r7, #12]
 80026ca:	4b85      	ldr	r3, [pc, #532]	@ (80028e0 <MX_GPIO_Init+0x284>)
 80026cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ce:	4a84      	ldr	r2, [pc, #528]	@ (80028e0 <MX_GPIO_Init+0x284>)
 80026d0:	f043 0301 	orr.w	r3, r3, #1
 80026d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d6:	4b82      	ldr	r3, [pc, #520]	@ (80028e0 <MX_GPIO_Init+0x284>)
 80026d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	4b7e      	ldr	r3, [pc, #504]	@ (80028e0 <MX_GPIO_Init+0x284>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	4a7d      	ldr	r2, [pc, #500]	@ (80028e0 <MX_GPIO_Init+0x284>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f2:	4b7b      	ldr	r3, [pc, #492]	@ (80028e0 <MX_GPIO_Init+0x284>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026fe:	2300      	movs	r3, #0
 8002700:	607b      	str	r3, [r7, #4]
 8002702:	4b77      	ldr	r3, [pc, #476]	@ (80028e0 <MX_GPIO_Init+0x284>)
 8002704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002706:	4a76      	ldr	r2, [pc, #472]	@ (80028e0 <MX_GPIO_Init+0x284>)
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	6313      	str	r3, [r2, #48]	@ 0x30
 800270e:	4b74      	ldr	r3, [pc, #464]	@ (80028e0 <MX_GPIO_Init+0x284>)
 8002710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800271a:	2200      	movs	r2, #0
 800271c:	2108      	movs	r1, #8
 800271e:	4871      	ldr	r0, [pc, #452]	@ (80028e4 <MX_GPIO_Init+0x288>)
 8002720:	f000 feb0 	bl	8003484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002724:	2201      	movs	r2, #1
 8002726:	2101      	movs	r1, #1
 8002728:	486f      	ldr	r0, [pc, #444]	@ (80028e8 <MX_GPIO_Init+0x28c>)
 800272a:	f000 feab 	bl	8003484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800272e:	2200      	movs	r2, #0
 8002730:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002734:	486d      	ldr	r0, [pc, #436]	@ (80028ec <MX_GPIO_Init+0x290>)
 8002736:	f000 fea5 	bl	8003484 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800273a:	2308      	movs	r3, #8
 800273c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800273e:	2301      	movs	r3, #1
 8002740:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002742:	2300      	movs	r3, #0
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002746:	2300      	movs	r3, #0
 8002748:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800274a:	f107 031c 	add.w	r3, r7, #28
 800274e:	4619      	mov	r1, r3
 8002750:	4864      	ldr	r0, [pc, #400]	@ (80028e4 <MX_GPIO_Init+0x288>)
 8002752:	f000 fcfb 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002756:	2301      	movs	r3, #1
 8002758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800275a:	2301      	movs	r3, #1
 800275c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800275e:	2300      	movs	r3, #0
 8002760:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002766:	f107 031c 	add.w	r3, r7, #28
 800276a:	4619      	mov	r1, r3
 800276c:	485e      	ldr	r0, [pc, #376]	@ (80028e8 <MX_GPIO_Init+0x28c>)
 800276e:	f000 fced 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002772:	2308      	movs	r3, #8
 8002774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800277e:	2300      	movs	r3, #0
 8002780:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002782:	2305      	movs	r3, #5
 8002784:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002786:	f107 031c 	add.w	r3, r7, #28
 800278a:	4619      	mov	r1, r3
 800278c:	4856      	ldr	r0, [pc, #344]	@ (80028e8 <MX_GPIO_Init+0x28c>)
 800278e:	f000 fcdd 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002792:	2301      	movs	r3, #1
 8002794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002796:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800279a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279c:	2300      	movs	r3, #0
 800279e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	4619      	mov	r1, r3
 80027a6:	4852      	ldr	r0, [pc, #328]	@ (80028f0 <MX_GPIO_Init+0x294>)
 80027a8:	f000 fcd0 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80027ac:	2310      	movs	r3, #16
 80027ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027b8:	2300      	movs	r3, #0
 80027ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80027bc:	2306      	movs	r3, #6
 80027be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80027c0:	f107 031c 	add.w	r3, r7, #28
 80027c4:	4619      	mov	r1, r3
 80027c6:	484a      	ldr	r0, [pc, #296]	@ (80028f0 <MX_GPIO_Init+0x294>)
 80027c8:	f000 fcc0 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80027cc:	2304      	movs	r3, #4
 80027ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d0:	2300      	movs	r3, #0
 80027d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	4619      	mov	r1, r3
 80027de:	4845      	ldr	r0, [pc, #276]	@ (80028f4 <MX_GPIO_Init+0x298>)
 80027e0:	f000 fcb4 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80027e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027f6:	2305      	movs	r3, #5
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	4619      	mov	r1, r3
 8002800:	483c      	ldr	r0, [pc, #240]	@ (80028f4 <MX_GPIO_Init+0x298>)
 8002802:	f000 fca3 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002806:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800280a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800280c:	2301      	movs	r3, #1
 800280e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002818:	f107 031c 	add.w	r3, r7, #28
 800281c:	4619      	mov	r1, r3
 800281e:	4833      	ldr	r0, [pc, #204]	@ (80028ec <MX_GPIO_Init+0x290>)
 8002820:	f000 fc94 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002824:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282a:	2302      	movs	r3, #2
 800282c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800282e:	2300      	movs	r3, #0
 8002830:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002832:	2300      	movs	r3, #0
 8002834:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002836:	2306      	movs	r3, #6
 8002838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800283a:	f107 031c 	add.w	r3, r7, #28
 800283e:	4619      	mov	r1, r3
 8002840:	4829      	ldr	r0, [pc, #164]	@ (80028e8 <MX_GPIO_Init+0x28c>)
 8002842:	f000 fc83 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8002846:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800284a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284c:	2300      	movs	r3, #0
 800284e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002850:	2300      	movs	r3, #0
 8002852:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8002854:	f107 031c 	add.w	r3, r7, #28
 8002858:	4619      	mov	r1, r3
 800285a:	4825      	ldr	r0, [pc, #148]	@ (80028f0 <MX_GPIO_Init+0x294>)
 800285c:	f000 fc76 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8002860:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002866:	2302      	movs	r3, #2
 8002868:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286a:	2300      	movs	r3, #0
 800286c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800286e:	2300      	movs	r3, #0
 8002870:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002872:	230a      	movs	r3, #10
 8002874:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002876:	f107 031c 	add.w	r3, r7, #28
 800287a:	4619      	mov	r1, r3
 800287c:	481c      	ldr	r0, [pc, #112]	@ (80028f0 <MX_GPIO_Init+0x294>)
 800287e:	f000 fc65 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002882:	2320      	movs	r3, #32
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800288e:	f107 031c 	add.w	r3, r7, #28
 8002892:	4619      	mov	r1, r3
 8002894:	4815      	ldr	r0, [pc, #84]	@ (80028ec <MX_GPIO_Init+0x290>)
 8002896:	f000 fc59 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800289a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800289e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a0:	2312      	movs	r3, #18
 80028a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a8:	2302      	movs	r3, #2
 80028aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028ac:	2304      	movs	r3, #4
 80028ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b0:	f107 031c 	add.w	r3, r7, #28
 80028b4:	4619      	mov	r1, r3
 80028b6:	480f      	ldr	r0, [pc, #60]	@ (80028f4 <MX_GPIO_Init+0x298>)
 80028b8:	f000 fc48 	bl	800314c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80028bc:	2302      	movs	r3, #2
 80028be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80028c0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80028c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80028ca:	f107 031c 	add.w	r3, r7, #28
 80028ce:	4619      	mov	r1, r3
 80028d0:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <MX_GPIO_Init+0x288>)
 80028d2:	f000 fc3b 	bl	800314c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80028d6:	bf00      	nop
 80028d8:	3730      	adds	r7, #48	@ 0x30
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40021000 	.word	0x40021000
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020c00 	.word	0x40020c00
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020400 	.word	0x40020400

080028f8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

// This function is called from the UART interrupt handler, so it executes in the interrupt context
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	6078      	str	r0, [r7, #4]
	// Dummy variable used to replace final character in data queue
	uint8_t dummy;

	// Add a small delay to allow timing for message transmission
	for(uint32_t i=0; i<4000; i++);
 8002900:	2300      	movs	r3, #0
 8002902:	60fb      	str	r3, [r7, #12]
 8002904:	e002      	b.n	800290c <HAL_UART_RxCpltCallback+0x14>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	3301      	adds	r3, #1
 800290a:	60fb      	str	r3, [r7, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8002912:	d3f8      	bcc.n	8002906 <HAL_UART_RxCpltCallback+0xe>

	// Check if data is available via UART
	if(!xQueueIsQueueFullFromISR(q_data)) {
 8002914:	4b1e      	ldr	r3, [pc, #120]	@ (8002990 <HAL_UART_RxCpltCallback+0x98>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f004 fd64 	bl	80073e6 <xQueueIsQueueFullFromISR>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d107      	bne.n	8002934 <HAL_UART_RxCpltCallback+0x3c>
		// Enqueue data byte
		xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 8002924:	4b1a      	ldr	r3, [pc, #104]	@ (8002990 <HAL_UART_RxCpltCallback+0x98>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	2300      	movs	r3, #0
 800292a:	2200      	movs	r2, #0
 800292c:	4919      	ldr	r1, [pc, #100]	@ (8002994 <HAL_UART_RxCpltCallback+0x9c>)
 800292e:	f004 fa09 	bl	8006d44 <xQueueGenericSendFromISR>
 8002932:	e013      	b.n	800295c <HAL_UART_RxCpltCallback+0x64>
	}
	// If no data available, check if last entered character is newline character
	else {
		if(user_data == '\n') {
 8002934:	4b17      	ldr	r3, [pc, #92]	@ (8002994 <HAL_UART_RxCpltCallback+0x9c>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	2b0a      	cmp	r3, #10
 800293c:	d10e      	bne.n	800295c <HAL_UART_RxCpltCallback+0x64>
			// Replace last byte of data queue with '\n'
			xQueueReceiveFromISR(q_data, (void*)&dummy, NULL);
 800293e:	4b14      	ldr	r3, [pc, #80]	@ (8002990 <HAL_UART_RxCpltCallback+0x98>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f107 010b 	add.w	r1, r7, #11
 8002946:	2200      	movs	r2, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f004 fb8b 	bl	8007064 <xQueueReceiveFromISR>
			xQueueSendFromISR(q_data, (void*)&user_data, NULL);
 800294e:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <HAL_UART_RxCpltCallback+0x98>)
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	2300      	movs	r3, #0
 8002954:	2200      	movs	r2, #0
 8002956:	490f      	ldr	r1, [pc, #60]	@ (8002994 <HAL_UART_RxCpltCallback+0x9c>)
 8002958:	f004 f9f4 	bl	8006d44 <xQueueGenericSendFromISR>
		}
	}

	// Send notification to message handler task if user_data == '\n'
	if(user_data == '\n') {
 800295c:	4b0d      	ldr	r3, [pc, #52]	@ (8002994 <HAL_UART_RxCpltCallback+0x9c>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b0a      	cmp	r3, #10
 8002964:	d10a      	bne.n	800297c <HAL_UART_RxCpltCallback+0x84>
		xTaskNotifyFromISR(handle_message_handler_task, 0, eNoAction, NULL);
 8002966:	4b0c      	ldr	r3, [pc, #48]	@ (8002998 <HAL_UART_RxCpltCallback+0xa0>)
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	2300      	movs	r3, #0
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	2300      	movs	r3, #0
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2300      	movs	r3, #0
 8002974:	2200      	movs	r2, #0
 8002976:	2100      	movs	r1, #0
 8002978:	f005 fd14 	bl	80083a4 <xTaskGenericNotifyFromISR>
	}

	// Enable UART data byte reception again in interrupt mode
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&user_data, 1);
 800297c:	2201      	movs	r2, #1
 800297e:	4905      	ldr	r1, [pc, #20]	@ (8002994 <HAL_UART_RxCpltCallback+0x9c>)
 8002980:	4806      	ldr	r0, [pc, #24]	@ (800299c <HAL_UART_RxCpltCallback+0xa4>)
 8002982:	f002 ffbe 	bl	8005902 <HAL_UART_Receive_IT>

}
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000284 	.word	0x20000284
 8002994:	20000298 	.word	0x20000298
 8002998:	2000026c 	.word	0x2000026c
 800299c:	20000220 	.word	0x20000220

080029a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a04      	ldr	r2, [pc, #16]	@ (80029c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d101      	bne.n	80029b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80029b2:	f000 fa37 	bl	8002e24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80029b6:	bf00      	nop
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40001000 	.word	0x40001000

080029c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029c8:	b672      	cpsid	i
}
 80029ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <Error_Handler+0x8>

080029d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	4b10      	ldr	r3, [pc, #64]	@ (8002a1c <HAL_MspInit+0x4c>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	4a0f      	ldr	r2, [pc, #60]	@ (8002a1c <HAL_MspInit+0x4c>)
 80029e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a1c <HAL_MspInit+0x4c>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029ee:	607b      	str	r3, [r7, #4]
 80029f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	603b      	str	r3, [r7, #0]
 80029f6:	4b09      	ldr	r3, [pc, #36]	@ (8002a1c <HAL_MspInit+0x4c>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	4a08      	ldr	r2, [pc, #32]	@ (8002a1c <HAL_MspInit+0x4c>)
 80029fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a02:	4b06      	ldr	r3, [pc, #24]	@ (8002a1c <HAL_MspInit+0x4c>)
 8002a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	40023800 	.word	0x40023800

08002a20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a28:	f107 0308 	add.w	r3, r7, #8
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
 8002a30:	605a      	str	r2, [r3, #4]
 8002a32:	609a      	str	r2, [r3, #8]
 8002a34:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8002a6c <HAL_RTC_MspInit+0x4c>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d111      	bne.n	8002a64 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002a40:	2302      	movs	r3, #2
 8002a42:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002a44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a48:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002a4a:	f107 0308 	add.w	r3, r7, #8
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f001 fa16 	bl	8003e80 <HAL_RCCEx_PeriphCLKConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8002a5a:	f7ff ffb3 	bl	80029c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002a5e:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <HAL_RTC_MspInit+0x50>)
 8002a60:	2201      	movs	r2, #1
 8002a62:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002a64:	bf00      	nop
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40002800 	.word	0x40002800
 8002a70:	42470e3c 	.word	0x42470e3c

08002a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08a      	sub	sp, #40	@ 0x28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a7c:	f107 0314 	add.w	r3, r7, #20
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	609a      	str	r2, [r3, #8]
 8002a88:	60da      	str	r2, [r3, #12]
 8002a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a19      	ldr	r2, [pc, #100]	@ (8002af8 <HAL_SPI_MspInit+0x84>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d12b      	bne.n	8002aee <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	613b      	str	r3, [r7, #16]
 8002a9a:	4b18      	ldr	r3, [pc, #96]	@ (8002afc <HAL_SPI_MspInit+0x88>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9e:	4a17      	ldr	r2, [pc, #92]	@ (8002afc <HAL_SPI_MspInit+0x88>)
 8002aa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa6:	4b15      	ldr	r3, [pc, #84]	@ (8002afc <HAL_SPI_MspInit+0x88>)
 8002aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002aae:	613b      	str	r3, [r7, #16]
 8002ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
 8002ab6:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <HAL_SPI_MspInit+0x88>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	4a10      	ldr	r2, [pc, #64]	@ (8002afc <HAL_SPI_MspInit+0x88>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8002afc <HAL_SPI_MspInit+0x88>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002ace:	23e0      	movs	r3, #224	@ 0xe0
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ade:	2305      	movs	r3, #5
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	4805      	ldr	r0, [pc, #20]	@ (8002b00 <HAL_SPI_MspInit+0x8c>)
 8002aea:	f000 fb2f 	bl	800314c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002aee:	bf00      	nop
 8002af0:	3728      	adds	r7, #40	@ 0x28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	40013000 	.word	0x40013000
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40020000 	.word	0x40020000

08002b04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	@ 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b0c:	f107 0314 	add.w	r3, r7, #20
 8002b10:	2200      	movs	r2, #0
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	605a      	str	r2, [r3, #4]
 8002b16:	609a      	str	r2, [r3, #8]
 8002b18:	60da      	str	r2, [r3, #12]
 8002b1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a1d      	ldr	r2, [pc, #116]	@ (8002b98 <HAL_UART_MspInit+0x94>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d133      	bne.n	8002b8e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	@ (8002b9c <HAL_UART_MspInit+0x98>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	4a1b      	ldr	r2, [pc, #108]	@ (8002b9c <HAL_UART_MspInit+0x98>)
 8002b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b34:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b36:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <HAL_UART_MspInit+0x98>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b42:	2300      	movs	r3, #0
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <HAL_UART_MspInit+0x98>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	4a14      	ldr	r2, [pc, #80]	@ (8002b9c <HAL_UART_MspInit+0x98>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b52:	4b12      	ldr	r3, [pc, #72]	@ (8002b9c <HAL_UART_MspInit+0x98>)
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002b5e:	230c      	movs	r3, #12
 8002b60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b6e:	2307      	movs	r3, #7
 8002b70:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b72:	f107 0314 	add.w	r3, r7, #20
 8002b76:	4619      	mov	r1, r3
 8002b78:	4809      	ldr	r0, [pc, #36]	@ (8002ba0 <HAL_UART_MspInit+0x9c>)
 8002b7a:	f000 fae7 	bl	800314c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2106      	movs	r1, #6
 8002b82:	2026      	movs	r0, #38	@ 0x26
 8002b84:	f000 fa26 	bl	8002fd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b88:	2026      	movs	r0, #38	@ 0x26
 8002b8a:	f000 fa3f 	bl	800300c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b8e:	bf00      	nop
 8002b90:	3728      	adds	r7, #40	@ 0x28
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40004400 	.word	0x40004400
 8002b9c:	40023800 	.word	0x40023800
 8002ba0:	40020000 	.word	0x40020000

08002ba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08e      	sub	sp, #56	@ 0x38
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	4b33      	ldr	r3, [pc, #204]	@ (8002c88 <HAL_InitTick+0xe4>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbc:	4a32      	ldr	r2, [pc, #200]	@ (8002c88 <HAL_InitTick+0xe4>)
 8002bbe:	f043 0310 	orr.w	r3, r3, #16
 8002bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bc4:	4b30      	ldr	r3, [pc, #192]	@ (8002c88 <HAL_InitTick+0xe4>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	60fb      	str	r3, [r7, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bd0:	f107 0210 	add.w	r2, r7, #16
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f001 f91e 	bl	8003e1c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d103      	bne.n	8002bf2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bea:	f001 f8ef 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8002bee:	6378      	str	r0, [r7, #52]	@ 0x34
 8002bf0:	e004      	b.n	8002bfc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bf2:	f001 f8eb 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bfe:	4a23      	ldr	r2, [pc, #140]	@ (8002c8c <HAL_InitTick+0xe8>)
 8002c00:	fba2 2303 	umull	r2, r3, r2, r3
 8002c04:	0c9b      	lsrs	r3, r3, #18
 8002c06:	3b01      	subs	r3, #1
 8002c08:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002c0a:	4b21      	ldr	r3, [pc, #132]	@ (8002c90 <HAL_InitTick+0xec>)
 8002c0c:	4a21      	ldr	r2, [pc, #132]	@ (8002c94 <HAL_InitTick+0xf0>)
 8002c0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002c10:	4b1f      	ldr	r3, [pc, #124]	@ (8002c90 <HAL_InitTick+0xec>)
 8002c12:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c16:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002c18:	4a1d      	ldr	r2, [pc, #116]	@ (8002c90 <HAL_InitTick+0xec>)
 8002c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002c1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002c90 <HAL_InitTick+0xec>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c24:	4b1a      	ldr	r3, [pc, #104]	@ (8002c90 <HAL_InitTick+0xec>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c2a:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <HAL_InitTick+0xec>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002c30:	4817      	ldr	r0, [pc, #92]	@ (8002c90 <HAL_InitTick+0xec>)
 8002c32:	f002 fae9 	bl	8005208 <HAL_TIM_Base_Init>
 8002c36:	4603      	mov	r3, r0
 8002c38:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002c3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d11b      	bne.n	8002c7c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002c44:	4812      	ldr	r0, [pc, #72]	@ (8002c90 <HAL_InitTick+0xec>)
 8002c46:	f002 fb39 	bl	80052bc <HAL_TIM_Base_Start_IT>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002c50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d111      	bne.n	8002c7c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c58:	2036      	movs	r0, #54	@ 0x36
 8002c5a:	f000 f9d7 	bl	800300c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2b0f      	cmp	r3, #15
 8002c62:	d808      	bhi.n	8002c76 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002c64:	2200      	movs	r2, #0
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	2036      	movs	r0, #54	@ 0x36
 8002c6a:	f000 f9b3 	bl	8002fd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c98 <HAL_InitTick+0xf4>)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	e002      	b.n	8002c7c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3738      	adds	r7, #56	@ 0x38
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	431bde83 	.word	0x431bde83
 8002c90:	2000029c 	.word	0x2000029c
 8002c94:	40001000 	.word	0x40001000
 8002c98:	2000006c 	.word	0x2000006c

08002c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ca0:	bf00      	nop
 8002ca2:	e7fd      	b.n	8002ca0 <NMI_Handler+0x4>

08002ca4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca8:	bf00      	nop
 8002caa:	e7fd      	b.n	8002ca8 <HardFault_Handler+0x4>

08002cac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <MemManage_Handler+0x4>

08002cb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cb8:	bf00      	nop
 8002cba:	e7fd      	b.n	8002cb8 <BusFault_Handler+0x4>

08002cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cc0:	bf00      	nop
 8002cc2:	e7fd      	b.n	8002cc0 <UsageFault_Handler+0x4>

08002cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002cd8:	4802      	ldr	r0, [pc, #8]	@ (8002ce4 <USART2_IRQHandler+0x10>)
 8002cda:	f002 fe37 	bl	800594c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000220 	.word	0x20000220

08002ce8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002cec:	4802      	ldr	r0, [pc, #8]	@ (8002cf8 <TIM6_DAC_IRQHandler+0x10>)
 8002cee:	f002 fb55 	bl	800539c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002cf2:	bf00      	nop
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	2000029c 	.word	0x2000029c

08002cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d04:	4a14      	ldr	r2, [pc, #80]	@ (8002d58 <_sbrk+0x5c>)
 8002d06:	4b15      	ldr	r3, [pc, #84]	@ (8002d5c <_sbrk+0x60>)
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d10:	4b13      	ldr	r3, [pc, #76]	@ (8002d60 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d18:	4b11      	ldr	r3, [pc, #68]	@ (8002d60 <_sbrk+0x64>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	@ (8002d64 <_sbrk+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	@ (8002d60 <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d207      	bcs.n	8002d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d2c:	f006 fcca 	bl	80096c4 <__errno>
 8002d30:	4603      	mov	r3, r0
 8002d32:	220c      	movs	r2, #12
 8002d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d3a:	e009      	b.n	8002d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	@ (8002d60 <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d42:	4b07      	ldr	r3, [pc, #28]	@ (8002d60 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a05      	ldr	r2, [pc, #20]	@ (8002d60 <_sbrk+0x64>)
 8002d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20020000 	.word	0x20020000
 8002d5c:	00000400 	.word	0x00000400
 8002d60:	200002e4 	.word	0x200002e4
 8002d64:	200195e0 	.word	0x200195e0

08002d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d6c:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <SystemInit+0x20>)
 8002d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d72:	4a05      	ldr	r2, [pc, #20]	@ (8002d88 <SystemInit+0x20>)
 8002d74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d7c:	bf00      	nop
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002dc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d90:	f7ff ffea 	bl	8002d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d94:	480c      	ldr	r0, [pc, #48]	@ (8002dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d96:	490d      	ldr	r1, [pc, #52]	@ (8002dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d98:	4a0d      	ldr	r2, [pc, #52]	@ (8002dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d9c:	e002      	b.n	8002da4 <LoopCopyDataInit>

08002d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002da2:	3304      	adds	r3, #4

08002da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002da8:	d3f9      	bcc.n	8002d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002daa:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002dac:	4c0a      	ldr	r4, [pc, #40]	@ (8002dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002db0:	e001      	b.n	8002db6 <LoopFillZerobss>

08002db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002db4:	3204      	adds	r2, #4

08002db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002db8:	d3fb      	bcc.n	8002db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dba:	f006 fc89 	bl	80096d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dbe:	f7ff fa2b 	bl	8002218 <main>
  bx  lr    
 8002dc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dcc:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002dd0:	0800aaac 	.word	0x0800aaac
  ldr r2, =_sbss
 8002dd4:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002dd8:	200195dc 	.word	0x200195dc

08002ddc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ddc:	e7fe      	b.n	8002ddc <ADC_IRQHandler>
	...

08002de0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002de4:	4b0e      	ldr	r3, [pc, #56]	@ (8002e20 <HAL_Init+0x40>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a0d      	ldr	r2, [pc, #52]	@ (8002e20 <HAL_Init+0x40>)
 8002dea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002df0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e20 <HAL_Init+0x40>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a0a      	ldr	r2, [pc, #40]	@ (8002e20 <HAL_Init+0x40>)
 8002df6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dfc:	4b08      	ldr	r3, [pc, #32]	@ (8002e20 <HAL_Init+0x40>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a07      	ldr	r2, [pc, #28]	@ (8002e20 <HAL_Init+0x40>)
 8002e02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e08:	2003      	movs	r0, #3
 8002e0a:	f000 f8d8 	bl	8002fbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e0e:	200f      	movs	r0, #15
 8002e10:	f7ff fec8 	bl	8002ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e14:	f7ff fddc 	bl	80029d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023c00 	.word	0x40023c00

08002e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_IncTick+0x20>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_IncTick+0x24>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	4a04      	ldr	r2, [pc, #16]	@ (8002e48 <HAL_IncTick+0x24>)
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000070 	.word	0x20000070
 8002e48:	200002e8 	.word	0x200002e8

08002e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e50:	4b03      	ldr	r3, [pc, #12]	@ (8002e60 <HAL_GetTick+0x14>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	200002e8 	.word	0x200002e8

08002e64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e80:	4013      	ands	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e96:	4a04      	ldr	r2, [pc, #16]	@ (8002ea8 <__NVIC_SetPriorityGrouping+0x44>)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	60d3      	str	r3, [r2, #12]
}
 8002e9c:	bf00      	nop
 8002e9e:	3714      	adds	r7, #20
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	e000ed00 	.word	0xe000ed00

08002eac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb0:	4b04      	ldr	r3, [pc, #16]	@ (8002ec4 <__NVIC_GetPriorityGrouping+0x18>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	0a1b      	lsrs	r3, r3, #8
 8002eb6:	f003 0307 	and.w	r3, r3, #7
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	4603      	mov	r3, r0
 8002ed0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ed2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	db0b      	blt.n	8002ef2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eda:	79fb      	ldrb	r3, [r7, #7]
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	4907      	ldr	r1, [pc, #28]	@ (8002f00 <__NVIC_EnableIRQ+0x38>)
 8002ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee6:	095b      	lsrs	r3, r3, #5
 8002ee8:	2001      	movs	r0, #1
 8002eea:	fa00 f202 	lsl.w	r2, r0, r2
 8002eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	370c      	adds	r7, #12
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	e000e100 	.word	0xe000e100

08002f04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	6039      	str	r1, [r7, #0]
 8002f0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	db0a      	blt.n	8002f2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	b2da      	uxtb	r2, r3
 8002f1c:	490c      	ldr	r1, [pc, #48]	@ (8002f50 <__NVIC_SetPriority+0x4c>)
 8002f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f22:	0112      	lsls	r2, r2, #4
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	440b      	add	r3, r1
 8002f28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f2c:	e00a      	b.n	8002f44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	b2da      	uxtb	r2, r3
 8002f32:	4908      	ldr	r1, [pc, #32]	@ (8002f54 <__NVIC_SetPriority+0x50>)
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f003 030f 	and.w	r3, r3, #15
 8002f3a:	3b04      	subs	r3, #4
 8002f3c:	0112      	lsls	r2, r2, #4
 8002f3e:	b2d2      	uxtb	r2, r2
 8002f40:	440b      	add	r3, r1
 8002f42:	761a      	strb	r2, [r3, #24]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	e000e100 	.word	0xe000e100
 8002f54:	e000ed00 	.word	0xe000ed00

08002f58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b089      	sub	sp, #36	@ 0x24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f1c3 0307 	rsb	r3, r3, #7
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	bf28      	it	cs
 8002f76:	2304      	movcs	r3, #4
 8002f78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	2b06      	cmp	r3, #6
 8002f80:	d902      	bls.n	8002f88 <NVIC_EncodePriority+0x30>
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3b03      	subs	r3, #3
 8002f86:	e000      	b.n	8002f8a <NVIC_EncodePriority+0x32>
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f8c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	fa02 f303 	lsl.w	r3, r2, r3
 8002f96:	43da      	mvns	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	43d9      	mvns	r1, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	4313      	orrs	r3, r2
         );
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3724      	adds	r7, #36	@ 0x24
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff ff4c 	bl	8002e64 <__NVIC_SetPriorityGrouping>
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	4603      	mov	r3, r0
 8002fdc:	60b9      	str	r1, [r7, #8]
 8002fde:	607a      	str	r2, [r7, #4]
 8002fe0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fe6:	f7ff ff61 	bl	8002eac <__NVIC_GetPriorityGrouping>
 8002fea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	68b9      	ldr	r1, [r7, #8]
 8002ff0:	6978      	ldr	r0, [r7, #20]
 8002ff2:	f7ff ffb1 	bl	8002f58 <NVIC_EncodePriority>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7ff ff80 	bl	8002f04 <__NVIC_SetPriority>
}
 8003004:	bf00      	nop
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	4618      	mov	r0, r3
 800301c:	f7ff ff54 	bl	8002ec8 <__NVIC_EnableIRQ>
}
 8003020:	bf00      	nop
 8003022:	3708      	adds	r7, #8
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003034:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003036:	f7ff ff09 	bl	8002e4c <HAL_GetTick>
 800303a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d008      	beq.n	800305a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2280      	movs	r2, #128	@ 0x80
 800304c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e052      	b.n	8003100 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0216 	bic.w	r2, r2, #22
 8003068:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695a      	ldr	r2, [r3, #20]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003078:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_DMA_Abort+0x62>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 0208 	bic.w	r2, r2, #8
 8003098:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 0201 	bic.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030aa:	e013      	b.n	80030d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80030ac:	f7ff fece 	bl	8002e4c <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d90c      	bls.n	80030d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2220      	movs	r2, #32
 80030be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2203      	movs	r2, #3
 80030c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e015      	b.n	8003100 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0301 	and.w	r3, r3, #1
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e4      	bne.n	80030ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e6:	223f      	movs	r2, #63	@ 0x3f
 80030e8:	409a      	lsls	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d004      	beq.n	8003126 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2280      	movs	r2, #128	@ 0x80
 8003120:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e00c      	b.n	8003140 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2205      	movs	r2, #5
 800312a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f022 0201 	bic.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800314c:	b480      	push	{r7}
 800314e:	b089      	sub	sp, #36	@ 0x24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800315e:	2300      	movs	r3, #0
 8003160:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003162:	2300      	movs	r3, #0
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	e16b      	b.n	8003440 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003168:	2201      	movs	r2, #1
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4013      	ands	r3, r2
 800317a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	429a      	cmp	r2, r3
 8003182:	f040 815a 	bne.w	800343a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f003 0303 	and.w	r3, r3, #3
 800318e:	2b01      	cmp	r3, #1
 8003190:	d005      	beq.n	800319e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319a:	2b02      	cmp	r3, #2
 800319c:	d130      	bne.n	8003200 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	2203      	movs	r2, #3
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	43db      	mvns	r3, r3
 80031b0:	69ba      	ldr	r2, [r7, #24]
 80031b2:	4013      	ands	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031d4:	2201      	movs	r2, #1
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	091b      	lsrs	r3, r3, #4
 80031ea:	f003 0201 	and.w	r2, r3, #1
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 0303 	and.w	r3, r3, #3
 8003208:	2b03      	cmp	r3, #3
 800320a:	d017      	beq.n	800323c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	2203      	movs	r2, #3
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	4013      	ands	r3, r2
 8003222:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4313      	orrs	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 0303 	and.w	r3, r3, #3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d123      	bne.n	8003290 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	08da      	lsrs	r2, r3, #3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3208      	adds	r2, #8
 8003250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	220f      	movs	r2, #15
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	691a      	ldr	r2, [r3, #16]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003282:	69fb      	ldr	r3, [r7, #28]
 8003284:	08da      	lsrs	r2, r3, #3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	3208      	adds	r2, #8
 800328a:	69b9      	ldr	r1, [r7, #24]
 800328c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	2203      	movs	r2, #3
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43db      	mvns	r3, r3
 80032a2:	69ba      	ldr	r2, [r7, #24]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 0203 	and.w	r2, r3, #3
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80b4 	beq.w	800343a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	4b60      	ldr	r3, [pc, #384]	@ (8003458 <HAL_GPIO_Init+0x30c>)
 80032d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032da:	4a5f      	ldr	r2, [pc, #380]	@ (8003458 <HAL_GPIO_Init+0x30c>)
 80032dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80032e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003458 <HAL_GPIO_Init+0x30c>)
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ee:	4a5b      	ldr	r2, [pc, #364]	@ (800345c <HAL_GPIO_Init+0x310>)
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	089b      	lsrs	r3, r3, #2
 80032f4:	3302      	adds	r3, #2
 80032f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0303 	and.w	r3, r3, #3
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	220f      	movs	r2, #15
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a52      	ldr	r2, [pc, #328]	@ (8003460 <HAL_GPIO_Init+0x314>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d02b      	beq.n	8003372 <HAL_GPIO_Init+0x226>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a51      	ldr	r2, [pc, #324]	@ (8003464 <HAL_GPIO_Init+0x318>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d025      	beq.n	800336e <HAL_GPIO_Init+0x222>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a50      	ldr	r2, [pc, #320]	@ (8003468 <HAL_GPIO_Init+0x31c>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d01f      	beq.n	800336a <HAL_GPIO_Init+0x21e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4f      	ldr	r2, [pc, #316]	@ (800346c <HAL_GPIO_Init+0x320>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d019      	beq.n	8003366 <HAL_GPIO_Init+0x21a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4e      	ldr	r2, [pc, #312]	@ (8003470 <HAL_GPIO_Init+0x324>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d013      	beq.n	8003362 <HAL_GPIO_Init+0x216>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4d      	ldr	r2, [pc, #308]	@ (8003474 <HAL_GPIO_Init+0x328>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d00d      	beq.n	800335e <HAL_GPIO_Init+0x212>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4c      	ldr	r2, [pc, #304]	@ (8003478 <HAL_GPIO_Init+0x32c>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d007      	beq.n	800335a <HAL_GPIO_Init+0x20e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4b      	ldr	r2, [pc, #300]	@ (800347c <HAL_GPIO_Init+0x330>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d101      	bne.n	8003356 <HAL_GPIO_Init+0x20a>
 8003352:	2307      	movs	r3, #7
 8003354:	e00e      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003356:	2308      	movs	r3, #8
 8003358:	e00c      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800335a:	2306      	movs	r3, #6
 800335c:	e00a      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800335e:	2305      	movs	r3, #5
 8003360:	e008      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003362:	2304      	movs	r3, #4
 8003364:	e006      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003366:	2303      	movs	r3, #3
 8003368:	e004      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800336a:	2302      	movs	r3, #2
 800336c:	e002      	b.n	8003374 <HAL_GPIO_Init+0x228>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_GPIO_Init+0x228>
 8003372:	2300      	movs	r3, #0
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	f002 0203 	and.w	r2, r2, #3
 800337a:	0092      	lsls	r2, r2, #2
 800337c:	4093      	lsls	r3, r2
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4313      	orrs	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003384:	4935      	ldr	r1, [pc, #212]	@ (800345c <HAL_GPIO_Init+0x310>)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	089b      	lsrs	r3, r3, #2
 800338a:	3302      	adds	r3, #2
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003392:	4b3b      	ldr	r3, [pc, #236]	@ (8003480 <HAL_GPIO_Init+0x334>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033b6:	4a32      	ldr	r2, [pc, #200]	@ (8003480 <HAL_GPIO_Init+0x334>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033bc:	4b30      	ldr	r3, [pc, #192]	@ (8003480 <HAL_GPIO_Init+0x334>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033e0:	4a27      	ldr	r2, [pc, #156]	@ (8003480 <HAL_GPIO_Init+0x334>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033e6:	4b26      	ldr	r3, [pc, #152]	@ (8003480 <HAL_GPIO_Init+0x334>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003402:	69ba      	ldr	r2, [r7, #24]
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	4313      	orrs	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800340a:	4a1d      	ldr	r2, [pc, #116]	@ (8003480 <HAL_GPIO_Init+0x334>)
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003410:	4b1b      	ldr	r3, [pc, #108]	@ (8003480 <HAL_GPIO_Init+0x334>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d003      	beq.n	8003434 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003434:	4a12      	ldr	r2, [pc, #72]	@ (8003480 <HAL_GPIO_Init+0x334>)
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	3301      	adds	r3, #1
 800343e:	61fb      	str	r3, [r7, #28]
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	f67f ae90 	bls.w	8003168 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	3724      	adds	r7, #36	@ 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	40013800 	.word	0x40013800
 8003460:	40020000 	.word	0x40020000
 8003464:	40020400 	.word	0x40020400
 8003468:	40020800 	.word	0x40020800
 800346c:	40020c00 	.word	0x40020c00
 8003470:	40021000 	.word	0x40021000
 8003474:	40021400 	.word	0x40021400
 8003478:	40021800 	.word	0x40021800
 800347c:	40021c00 	.word	0x40021c00
 8003480:	40013c00 	.word	0x40013c00

08003484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	460b      	mov	r3, r1
 800348e:	807b      	strh	r3, [r7, #2]
 8003490:	4613      	mov	r3, r2
 8003492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003494:	787b      	ldrb	r3, [r7, #1]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800349a:	887a      	ldrh	r2, [r7, #2]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034a0:	e003      	b.n	80034aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034a2:	887b      	ldrh	r3, [r7, #2]
 80034a4:	041a      	lsls	r2, r3, #16
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	619a      	str	r2, [r3, #24]
}
 80034aa:	bf00      	nop
 80034ac:	370c      	adds	r7, #12
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80034c8:	887a      	ldrh	r2, [r7, #2]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	4013      	ands	r3, r2
 80034ce:	041a      	lsls	r2, r3, #16
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	43d9      	mvns	r1, r3
 80034d4:	887b      	ldrh	r3, [r7, #2]
 80034d6:	400b      	ands	r3, r1
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	619a      	str	r2, [r3, #24]
}
 80034de:	bf00      	nop
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e267      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d075      	beq.n	80035f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350a:	4b88      	ldr	r3, [pc, #544]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b04      	cmp	r3, #4
 8003514:	d00c      	beq.n	8003530 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003516:	4b85      	ldr	r3, [pc, #532]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800351e:	2b08      	cmp	r3, #8
 8003520:	d112      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003522:	4b82      	ldr	r3, [pc, #520]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800352e:	d10b      	bne.n	8003548 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003530:	4b7e      	ldr	r3, [pc, #504]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d05b      	beq.n	80035f4 <HAL_RCC_OscConfig+0x108>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d157      	bne.n	80035f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e242      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003550:	d106      	bne.n	8003560 <HAL_RCC_OscConfig+0x74>
 8003552:	4b76      	ldr	r3, [pc, #472]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a75      	ldr	r2, [pc, #468]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003558:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	e01d      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003568:	d10c      	bne.n	8003584 <HAL_RCC_OscConfig+0x98>
 800356a:	4b70      	ldr	r3, [pc, #448]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a6f      	ldr	r2, [pc, #444]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003574:	6013      	str	r3, [r2, #0]
 8003576:	4b6d      	ldr	r3, [pc, #436]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6c      	ldr	r2, [pc, #432]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800357c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	e00b      	b.n	800359c <HAL_RCC_OscConfig+0xb0>
 8003584:	4b69      	ldr	r3, [pc, #420]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a68      	ldr	r2, [pc, #416]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800358a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800358e:	6013      	str	r3, [r2, #0]
 8003590:	4b66      	ldr	r3, [pc, #408]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a65      	ldr	r2, [pc, #404]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800359a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a4:	f7ff fc52 	bl	8002e4c <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035ac:	f7ff fc4e 	bl	8002e4c <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b64      	cmp	r3, #100	@ 0x64
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e207      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035be:	4b5b      	ldr	r3, [pc, #364]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d0f0      	beq.n	80035ac <HAL_RCC_OscConfig+0xc0>
 80035ca:	e014      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035cc:	f7ff fc3e 	bl	8002e4c <HAL_GetTick>
 80035d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d2:	e008      	b.n	80035e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d4:	f7ff fc3a 	bl	8002e4c <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b64      	cmp	r3, #100	@ 0x64
 80035e0:	d901      	bls.n	80035e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e1f3      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e6:	4b51      	ldr	r3, [pc, #324]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0xe8>
 80035f2:	e000      	b.n	80035f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d063      	beq.n	80036ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003602:	4b4a      	ldr	r3, [pc, #296]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00b      	beq.n	8003626 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800360e:	4b47      	ldr	r3, [pc, #284]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003616:	2b08      	cmp	r3, #8
 8003618:	d11c      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361a:	4b44      	ldr	r3, [pc, #272]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d116      	bne.n	8003654 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	4b41      	ldr	r3, [pc, #260]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0302 	and.w	r3, r3, #2
 800362e:	2b00      	cmp	r3, #0
 8003630:	d005      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	2b01      	cmp	r3, #1
 8003638:	d001      	beq.n	800363e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e1c7      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363e:	4b3b      	ldr	r3, [pc, #236]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	00db      	lsls	r3, r3, #3
 800364c:	4937      	ldr	r1, [pc, #220]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800364e:	4313      	orrs	r3, r2
 8003650:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003652:	e03a      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d020      	beq.n	800369e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800365c:	4b34      	ldr	r3, [pc, #208]	@ (8003730 <HAL_RCC_OscConfig+0x244>)
 800365e:	2201      	movs	r2, #1
 8003660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003662:	f7ff fbf3 	bl	8002e4c <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800366a:	f7ff fbef 	bl	8002e4c <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1a8      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800367c:	4b2b      	ldr	r3, [pc, #172]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003688:	4b28      	ldr	r3, [pc, #160]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691b      	ldr	r3, [r3, #16]
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	4925      	ldr	r1, [pc, #148]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003698:	4313      	orrs	r3, r2
 800369a:	600b      	str	r3, [r1, #0]
 800369c:	e015      	b.n	80036ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800369e:	4b24      	ldr	r3, [pc, #144]	@ (8003730 <HAL_RCC_OscConfig+0x244>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7ff fbd2 	bl	8002e4c <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036ac:	f7ff fbce 	bl	8002e4c <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e187      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036be:	4b1b      	ldr	r3, [pc, #108]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d1f0      	bne.n	80036ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0308 	and.w	r3, r3, #8
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d036      	beq.n	8003744 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d016      	beq.n	800370c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036de:	4b15      	ldr	r3, [pc, #84]	@ (8003734 <HAL_RCC_OscConfig+0x248>)
 80036e0:	2201      	movs	r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e4:	f7ff fbb2 	bl	8002e4c <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036ec:	f7ff fbae 	bl	8002e4c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e167      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <HAL_RCC_OscConfig+0x240>)
 8003700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d0f0      	beq.n	80036ec <HAL_RCC_OscConfig+0x200>
 800370a:	e01b      	b.n	8003744 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800370c:	4b09      	ldr	r3, [pc, #36]	@ (8003734 <HAL_RCC_OscConfig+0x248>)
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003712:	f7ff fb9b 	bl	8002e4c <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003718:	e00e      	b.n	8003738 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371a:	f7ff fb97 	bl	8002e4c <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d907      	bls.n	8003738 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e150      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800372c:	40023800 	.word	0x40023800
 8003730:	42470000 	.word	0x42470000
 8003734:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003738:	4b88      	ldr	r3, [pc, #544]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800373a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d1ea      	bne.n	800371a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	f000 8097 	beq.w	8003880 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003752:	2300      	movs	r3, #0
 8003754:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003756:	4b81      	ldr	r3, [pc, #516]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10f      	bne.n	8003782 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60bb      	str	r3, [r7, #8]
 8003766:	4b7d      	ldr	r3, [pc, #500]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	4a7c      	ldr	r2, [pc, #496]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800376c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	@ 0x40
 8003772:	4b7a      	ldr	r3, [pc, #488]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800377a:	60bb      	str	r3, [r7, #8]
 800377c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800377e:	2301      	movs	r3, #1
 8003780:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003782:	4b77      	ldr	r3, [pc, #476]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800378a:	2b00      	cmp	r3, #0
 800378c:	d118      	bne.n	80037c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800378e:	4b74      	ldr	r3, [pc, #464]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a73      	ldr	r2, [pc, #460]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 8003794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379a:	f7ff fb57 	bl	8002e4c <HAL_GetTick>
 800379e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a0:	e008      	b.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a2:	f7ff fb53 	bl	8002e4c <HAL_GetTick>
 80037a6:	4602      	mov	r2, r0
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d901      	bls.n	80037b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b0:	2303      	movs	r3, #3
 80037b2:	e10c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b4:	4b6a      	ldr	r3, [pc, #424]	@ (8003960 <HAL_RCC_OscConfig+0x474>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d0f0      	beq.n	80037a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d106      	bne.n	80037d6 <HAL_RCC_OscConfig+0x2ea>
 80037c8:	4b64      	ldr	r3, [pc, #400]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037cc:	4a63      	ldr	r2, [pc, #396]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ce:	f043 0301 	orr.w	r3, r3, #1
 80037d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d4:	e01c      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b05      	cmp	r3, #5
 80037dc:	d10c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x30c>
 80037de:	4b5f      	ldr	r3, [pc, #380]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e2:	4a5e      	ldr	r2, [pc, #376]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ea:	4b5c      	ldr	r3, [pc, #368]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ee:	4a5b      	ldr	r2, [pc, #364]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f6:	e00b      	b.n	8003810 <HAL_RCC_OscConfig+0x324>
 80037f8:	4b58      	ldr	r3, [pc, #352]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	4a57      	ldr	r2, [pc, #348]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80037fe:	f023 0301 	bic.w	r3, r3, #1
 8003802:	6713      	str	r3, [r2, #112]	@ 0x70
 8003804:	4b55      	ldr	r3, [pc, #340]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	4a54      	ldr	r2, [pc, #336]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800380a:	f023 0304 	bic.w	r3, r3, #4
 800380e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d015      	beq.n	8003844 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003818:	f7ff fb18 	bl	8002e4c <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7ff fb14 	bl	8002e4c <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0cb      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003836:	4b49      	ldr	r3, [pc, #292]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d0ee      	beq.n	8003820 <HAL_RCC_OscConfig+0x334>
 8003842:	e014      	b.n	800386e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003844:	f7ff fb02 	bl	8002e4c <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384a:	e00a      	b.n	8003862 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800384c:	f7ff fafe 	bl	8002e4c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f241 3288 	movw	r2, #5000	@ 0x1388
 800385a:	4293      	cmp	r3, r2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e0b5      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003862:	4b3e      	ldr	r3, [pc, #248]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1ee      	bne.n	800384c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800386e:	7dfb      	ldrb	r3, [r7, #23]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d105      	bne.n	8003880 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003874:	4b39      	ldr	r3, [pc, #228]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003878:	4a38      	ldr	r2, [pc, #224]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800387e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a1 	beq.w	80039cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388a:	4b34      	ldr	r3, [pc, #208]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 030c 	and.w	r3, r3, #12
 8003892:	2b08      	cmp	r3, #8
 8003894:	d05c      	beq.n	8003950 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b02      	cmp	r3, #2
 800389c:	d141      	bne.n	8003922 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800389e:	4b31      	ldr	r3, [pc, #196]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a4:	f7ff fad2 	bl	8002e4c <HAL_GetTick>
 80038a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038aa:	e008      	b.n	80038be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038ac:	f7ff face 	bl	8002e4c <HAL_GetTick>
 80038b0:	4602      	mov	r2, r0
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d901      	bls.n	80038be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e087      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038be:	4b27      	ldr	r3, [pc, #156]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d1f0      	bne.n	80038ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69da      	ldr	r2, [r3, #28]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d8:	019b      	lsls	r3, r3, #6
 80038da:	431a      	orrs	r2, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038e0:	085b      	lsrs	r3, r3, #1
 80038e2:	3b01      	subs	r3, #1
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	431a      	orrs	r2, r3
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	061b      	lsls	r3, r3, #24
 80038ee:	491b      	ldr	r1, [pc, #108]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 80038f0:	4313      	orrs	r3, r2
 80038f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fa:	f7ff faa7 	bl	8002e4c <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003902:	f7ff faa3 	bl	8002e4c <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e05c      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003914:	4b11      	ldr	r3, [pc, #68]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x416>
 8003920:	e054      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003922:	4b10      	ldr	r3, [pc, #64]	@ (8003964 <HAL_RCC_OscConfig+0x478>)
 8003924:	2200      	movs	r2, #0
 8003926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003928:	f7ff fa90 	bl	8002e4c <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003930:	f7ff fa8c 	bl	8002e4c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e045      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003942:	4b06      	ldr	r3, [pc, #24]	@ (800395c <HAL_RCC_OscConfig+0x470>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1f0      	bne.n	8003930 <HAL_RCC_OscConfig+0x444>
 800394e:	e03d      	b.n	80039cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d107      	bne.n	8003968 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e038      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
 800395c:	40023800 	.word	0x40023800
 8003960:	40007000 	.word	0x40007000
 8003964:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003968:	4b1b      	ldr	r3, [pc, #108]	@ (80039d8 <HAL_RCC_OscConfig+0x4ec>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d028      	beq.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003980:	429a      	cmp	r2, r3
 8003982:	d121      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800398e:	429a      	cmp	r2, r3
 8003990:	d11a      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003998:	4013      	ands	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800399e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d111      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ae:	085b      	lsrs	r3, r3, #1
 80039b0:	3b01      	subs	r3, #1
 80039b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d107      	bne.n	80039c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d001      	beq.n	80039cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3718      	adds	r7, #24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800

080039dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e0cc      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f0:	4b68      	ldr	r3, [pc, #416]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0307 	and.w	r3, r3, #7
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d90c      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fe:	4b65      	ldr	r3, [pc, #404]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b63      	ldr	r3, [pc, #396]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0b8      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a30:	4b59      	ldr	r3, [pc, #356]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	4a58      	ldr	r2, [pc, #352]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a48:	4b53      	ldr	r3, [pc, #332]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b50      	ldr	r3, [pc, #320]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	494d      	ldr	r1, [pc, #308]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d044      	beq.n	8003afc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d119      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d003      	beq.n	8003a9a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a96:	2b03      	cmp	r3, #3
 8003a98:	d107      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9a:	4b3f      	ldr	r3, [pc, #252]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d109      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e067      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aba:	4b37      	ldr	r3, [pc, #220]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f023 0203 	bic.w	r2, r3, #3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	4934      	ldr	r1, [pc, #208]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003acc:	f7ff f9be 	bl	8002e4c <HAL_GetTick>
 8003ad0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad2:	e00a      	b.n	8003aea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad4:	f7ff f9ba 	bl	8002e4c <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e04f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aea:	4b2b      	ldr	r3, [pc, #172]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 020c 	and.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d1eb      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003afc:	4b25      	ldr	r3, [pc, #148]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d20c      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0a:	4b22      	ldr	r3, [pc, #136]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	683a      	ldr	r2, [r7, #0]
 8003b0e:	b2d2      	uxtb	r2, r2
 8003b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b20      	ldr	r3, [pc, #128]	@ (8003b94 <HAL_RCC_ClockConfig+0x1b8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e032      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	4b19      	ldr	r3, [pc, #100]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4916      	ldr	r1, [pc, #88]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b4e:	4b12      	ldr	r3, [pc, #72]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	490e      	ldr	r1, [pc, #56]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b62:	f000 f821 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4b0b      	ldr	r3, [pc, #44]	@ (8003b98 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	490a      	ldr	r1, [pc, #40]	@ (8003b9c <HAL_RCC_ClockConfig+0x1c0>)
 8003b74:	5ccb      	ldrb	r3, [r1, r3]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a09      	ldr	r2, [pc, #36]	@ (8003ba0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b7e:	4b09      	ldr	r3, [pc, #36]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7ff f80e 	bl	8002ba4 <HAL_InitTick>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023c00 	.word	0x40023c00
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	0800a950 	.word	0x0800a950
 8003ba0:	20000068 	.word	0x20000068
 8003ba4:	2000006c 	.word	0x2000006c

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bac:	b094      	sub	sp, #80	@ 0x50
 8003bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bb8:	2300      	movs	r3, #0
 8003bba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc0:	4b79      	ldr	r3, [pc, #484]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	f003 030c 	and.w	r3, r3, #12
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d00d      	beq.n	8003be8 <HAL_RCC_GetSysClockFreq+0x40>
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	f200 80e1 	bhi.w	8003d94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x34>
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bda:	e0db      	b.n	8003d94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bdc:	4b73      	ldr	r3, [pc, #460]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x204>)
 8003bde:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003be0:	e0db      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be2:	4b73      	ldr	r3, [pc, #460]	@ (8003db0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003be4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003be6:	e0d8      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be8:	4b6f      	ldr	r3, [pc, #444]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf2:	4b6d      	ldr	r3, [pc, #436]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d063      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfe:	4b6a      	ldr	r3, [pc, #424]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	099b      	lsrs	r3, r3, #6
 8003c04:	2200      	movs	r2, #0
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c12:	2300      	movs	r3, #0
 8003c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c1a:	4622      	mov	r2, r4
 8003c1c:	462b      	mov	r3, r5
 8003c1e:	f04f 0000 	mov.w	r0, #0
 8003c22:	f04f 0100 	mov.w	r1, #0
 8003c26:	0159      	lsls	r1, r3, #5
 8003c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c2c:	0150      	lsls	r0, r2, #5
 8003c2e:	4602      	mov	r2, r0
 8003c30:	460b      	mov	r3, r1
 8003c32:	4621      	mov	r1, r4
 8003c34:	1a51      	subs	r1, r2, r1
 8003c36:	6139      	str	r1, [r7, #16]
 8003c38:	4629      	mov	r1, r5
 8003c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	f04f 0300 	mov.w	r3, #0
 8003c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c4c:	4659      	mov	r1, fp
 8003c4e:	018b      	lsls	r3, r1, #6
 8003c50:	4651      	mov	r1, sl
 8003c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c56:	4651      	mov	r1, sl
 8003c58:	018a      	lsls	r2, r1, #6
 8003c5a:	4651      	mov	r1, sl
 8003c5c:	ebb2 0801 	subs.w	r8, r2, r1
 8003c60:	4659      	mov	r1, fp
 8003c62:	eb63 0901 	sbc.w	r9, r3, r1
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c7a:	4690      	mov	r8, r2
 8003c7c:	4699      	mov	r9, r3
 8003c7e:	4623      	mov	r3, r4
 8003c80:	eb18 0303 	adds.w	r3, r8, r3
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	462b      	mov	r3, r5
 8003c88:	eb49 0303 	adc.w	r3, r9, r3
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c9a:	4629      	mov	r1, r5
 8003c9c:	024b      	lsls	r3, r1, #9
 8003c9e:	4621      	mov	r1, r4
 8003ca0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ca4:	4621      	mov	r1, r4
 8003ca6:	024a      	lsls	r2, r1, #9
 8003ca8:	4610      	mov	r0, r2
 8003caa:	4619      	mov	r1, r3
 8003cac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cae:	2200      	movs	r2, #0
 8003cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cb8:	f7fc fee8 	bl	8000a8c <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cc4:	e058      	b.n	8003d78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cc6:	4b38      	ldr	r3, [pc, #224]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	099b      	lsrs	r3, r3, #6
 8003ccc:	2200      	movs	r2, #0
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cd6:	623b      	str	r3, [r7, #32]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ce0:	4642      	mov	r2, r8
 8003ce2:	464b      	mov	r3, r9
 8003ce4:	f04f 0000 	mov.w	r0, #0
 8003ce8:	f04f 0100 	mov.w	r1, #0
 8003cec:	0159      	lsls	r1, r3, #5
 8003cee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cf2:	0150      	lsls	r0, r2, #5
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4641      	mov	r1, r8
 8003cfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cfe:	4649      	mov	r1, r9
 8003d00:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d04:	f04f 0200 	mov.w	r2, #0
 8003d08:	f04f 0300 	mov.w	r3, #0
 8003d0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d18:	ebb2 040a 	subs.w	r4, r2, sl
 8003d1c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	00eb      	lsls	r3, r5, #3
 8003d2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d2e:	00e2      	lsls	r2, r4, #3
 8003d30:	4614      	mov	r4, r2
 8003d32:	461d      	mov	r5, r3
 8003d34:	4643      	mov	r3, r8
 8003d36:	18e3      	adds	r3, r4, r3
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	eb45 0303 	adc.w	r3, r5, r3
 8003d40:	607b      	str	r3, [r7, #4]
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d4e:	4629      	mov	r1, r5
 8003d50:	028b      	lsls	r3, r1, #10
 8003d52:	4621      	mov	r1, r4
 8003d54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d58:	4621      	mov	r1, r4
 8003d5a:	028a      	lsls	r2, r1, #10
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d62:	2200      	movs	r2, #0
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	61fa      	str	r2, [r7, #28]
 8003d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d6c:	f7fc fe8e 	bl	8000a8c <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d78:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	0c1b      	lsrs	r3, r3, #16
 8003d7e:	f003 0303 	and.w	r3, r3, #3
 8003d82:	3301      	adds	r3, #1
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003d88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d92:	e002      	b.n	8003d9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d94:	4b05      	ldr	r3, [pc, #20]	@ (8003dac <HAL_RCC_GetSysClockFreq+0x204>)
 8003d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3750      	adds	r7, #80	@ 0x50
 8003da0:	46bd      	mov	sp, r7
 8003da2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003da6:	bf00      	nop
 8003da8:	40023800 	.word	0x40023800
 8003dac:	00f42400 	.word	0x00f42400
 8003db0:	007a1200 	.word	0x007a1200

08003db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db8:	4b03      	ldr	r3, [pc, #12]	@ (8003dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dba:	681b      	ldr	r3, [r3, #0]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	20000068 	.word	0x20000068

08003dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003dd0:	f7ff fff0 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	0a9b      	lsrs	r3, r3, #10
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	4903      	ldr	r1, [pc, #12]	@ (8003df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de2:	5ccb      	ldrb	r3, [r1, r3]
 8003de4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	40023800 	.word	0x40023800
 8003df0:	0800a960 	.word	0x0800a960

08003df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003df8:	f7ff ffdc 	bl	8003db4 <HAL_RCC_GetHCLKFreq>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	4b05      	ldr	r3, [pc, #20]	@ (8003e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	0b5b      	lsrs	r3, r3, #13
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	4903      	ldr	r1, [pc, #12]	@ (8003e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0a:	5ccb      	ldrb	r3, [r1, r3]
 8003e0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	0800a960 	.word	0x0800a960

08003e1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	220f      	movs	r2, #15
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e2c:	4b12      	ldr	r3, [pc, #72]	@ (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0203 	and.w	r2, r3, #3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e38:	4b0f      	ldr	r3, [pc, #60]	@ (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e44:	4b0c      	ldr	r3, [pc, #48]	@ (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e50:	4b09      	ldr	r3, [pc, #36]	@ (8003e78 <HAL_RCC_GetClockConfig+0x5c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	08db      	lsrs	r3, r3, #3
 8003e56:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e5e:	4b07      	ldr	r3, [pc, #28]	@ (8003e7c <HAL_RCC_GetClockConfig+0x60>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 0207 	and.w	r2, r3, #7
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	601a      	str	r2, [r3, #0]
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	40023c00 	.word	0x40023c00

08003e80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b086      	sub	sp, #24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d105      	bne.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d035      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ea8:	4b62      	ldr	r3, [pc, #392]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eae:	f7fe ffcd 	bl	8002e4c <HAL_GetTick>
 8003eb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003eb4:	e008      	b.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003eb6:	f7fe ffc9 	bl	8002e4c <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d901      	bls.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e0b0      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ec8:	4b5b      	ldr	r3, [pc, #364]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d1f0      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	019a      	lsls	r2, r3, #6
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	071b      	lsls	r3, r3, #28
 8003ee0:	4955      	ldr	r1, [pc, #340]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ee8:	4b52      	ldr	r3, [pc, #328]	@ (8004034 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003eee:	f7fe ffad 	bl	8002e4c <HAL_GetTick>
 8003ef2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ef4:	e008      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003ef6:	f7fe ffa9 	bl	8002e4c <HAL_GetTick>
 8003efa:	4602      	mov	r2, r0
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	1ad3      	subs	r3, r2, r3
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d901      	bls.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f04:	2303      	movs	r3, #3
 8003f06:	e090      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f08:	4b4b      	ldr	r3, [pc, #300]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d0f0      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 8083 	beq.w	8004028 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
 8003f26:	4b44      	ldr	r3, [pc, #272]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	4a43      	ldr	r2, [pc, #268]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f32:	4b41      	ldr	r3, [pc, #260]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f3a:	60fb      	str	r3, [r7, #12]
 8003f3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a3e      	ldr	r2, [pc, #248]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f4a:	f7fe ff7f 	bl	8002e4c <HAL_GetTick>
 8003f4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f50:	e008      	b.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003f52:	f7fe ff7b 	bl	8002e4c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d901      	bls.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f60:	2303      	movs	r3, #3
 8003f62:	e062      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003f64:	4b35      	ldr	r3, [pc, #212]	@ (800403c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d0f0      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f70:	4b31      	ldr	r3, [pc, #196]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d02f      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	429a      	cmp	r2, r3
 8003f8c:	d028      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f8e:	4b2a      	ldr	r3, [pc, #168]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f98:	4b29      	ldr	r3, [pc, #164]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f9e:	4b28      	ldr	r3, [pc, #160]	@ (8004040 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fa4:	4a24      	ldr	r2, [pc, #144]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003faa:	4b23      	ldr	r3, [pc, #140]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d114      	bne.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fb6:	f7fe ff49 	bl	8002e4c <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fbc:	e00a      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fbe:	f7fe ff45 	bl	8002e4c <HAL_GetTick>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	1ad3      	subs	r3, r2, r3
 8003fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d901      	bls.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e02a      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	4b18      	ldr	r3, [pc, #96]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd8:	f003 0302 	and.w	r3, r3, #2
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0ee      	beq.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003fec:	d10d      	bne.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003fee:	4b12      	ldr	r3, [pc, #72]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003ffe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004002:	490d      	ldr	r1, [pc, #52]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004004:	4313      	orrs	r3, r2
 8004006:	608b      	str	r3, [r1, #8]
 8004008:	e005      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800400a:	4b0b      	ldr	r3, [pc, #44]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4a0a      	ldr	r2, [pc, #40]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004010:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004014:	6093      	str	r3, [r2, #8]
 8004016:	4b08      	ldr	r3, [pc, #32]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004018:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004022:	4905      	ldr	r1, [pc, #20]	@ (8004038 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004024:	4313      	orrs	r3, r2
 8004026:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	42470068 	.word	0x42470068
 8004038:	40023800 	.word	0x40023800
 800403c:	40007000 	.word	0x40007000
 8004040:	42470e40 	.word	0x42470e40

08004044 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e073      	b.n	8004142 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	7f5b      	ldrb	r3, [r3, #29]
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f7fe fcd8 	bl	8002a20 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2202      	movs	r2, #2
 8004074:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b10      	cmp	r3, #16
 8004082:	d055      	beq.n	8004130 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	22ca      	movs	r2, #202	@ 0xca
 800408a:	625a      	str	r2, [r3, #36]	@ 0x24
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2253      	movs	r2, #83	@ 0x53
 8004092:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f000 fa49 	bl	800452c <RTC_EnterInitMode>
 800409a:	4603      	mov	r3, r0
 800409c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800409e:	7bfb      	ldrb	r3, [r7, #15]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d12c      	bne.n	80040fe <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80040b2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040b6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	6899      	ldr	r1, [r3, #8]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	695b      	ldr	r3, [r3, #20]
 80040cc:	431a      	orrs	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	68d2      	ldr	r2, [r2, #12]
 80040de:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	6919      	ldr	r1, [r3, #16]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	041a      	lsls	r2, r3, #16
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	430a      	orrs	r2, r1
 80040f2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 fa50 	bl	800459a <RTC_ExitInitMode>
 80040fa:	4603      	mov	r3, r0
 80040fc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80040fe:	7bfb      	ldrb	r3, [r7, #15]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d110      	bne.n	8004126 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	430a      	orrs	r2, r1
 8004124:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	22ff      	movs	r2, #255	@ 0xff
 800412c:	625a      	str	r2, [r3, #36]	@ 0x24
 800412e:	e001      	b.n	8004134 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8004134:	7bfb      	ldrb	r3, [r7, #15]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d102      	bne.n	8004140 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8004140:	7bfb      	ldrb	r3, [r7, #15]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800414a:	b590      	push	{r4, r7, lr}
 800414c:	b087      	sub	sp, #28
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	7f1b      	ldrb	r3, [r3, #28]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d101      	bne.n	8004166 <HAL_RTC_SetTime+0x1c>
 8004162:	2302      	movs	r3, #2
 8004164:	e087      	b.n	8004276 <HAL_RTC_SetTime+0x12c>
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2201      	movs	r2, #1
 800416a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2202      	movs	r2, #2
 8004170:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d126      	bne.n	80041c6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004182:	2b00      	cmp	r3, #0
 8004184:	d102      	bne.n	800418c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2200      	movs	r2, #0
 800418a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fa27 	bl	80045e4 <RTC_ByteToBcd2>
 8004196:	4603      	mov	r3, r0
 8004198:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	785b      	ldrb	r3, [r3, #1]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 fa20 	bl	80045e4 <RTC_ByteToBcd2>
 80041a4:	4603      	mov	r3, r0
 80041a6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041a8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	789b      	ldrb	r3, [r3, #2]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f000 fa18 	bl	80045e4 <RTC_ByteToBcd2>
 80041b4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80041b6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	78db      	ldrb	r3, [r3, #3]
 80041be:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80041c0:	4313      	orrs	r3, r2
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	e018      	b.n	80041f8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d102      	bne.n	80041da <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	2200      	movs	r2, #0
 80041d8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041e6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80041e8:	68ba      	ldr	r2, [r7, #8]
 80041ea:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80041ec:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	78db      	ldrb	r3, [r3, #3]
 80041f2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	22ca      	movs	r2, #202	@ 0xca
 80041fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2253      	movs	r2, #83	@ 0x53
 8004206:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f98f 	bl	800452c <RTC_EnterInitMode>
 800420e:	4603      	mov	r3, r0
 8004210:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8004212:	7cfb      	ldrb	r3, [r7, #19]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d120      	bne.n	800425a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004222:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004226:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004236:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6899      	ldr	r1, [r3, #8]
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	431a      	orrs	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 f9a2 	bl	800459a <RTC_ExitInitMode>
 8004256:	4603      	mov	r3, r0
 8004258:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800425a:	7cfb      	ldrb	r3, [r7, #19]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d102      	bne.n	8004266 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2201      	movs	r2, #1
 8004264:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	22ff      	movs	r2, #255	@ 0xff
 800426c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	771a      	strb	r2, [r3, #28]

  return status;
 8004274:	7cfb      	ldrb	r3, [r7, #19]
}
 8004276:	4618      	mov	r0, r3
 8004278:	371c      	adds	r7, #28
 800427a:	46bd      	mov	sp, r7
 800427c:	bd90      	pop	{r4, r7, pc}

0800427e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b086      	sub	sp, #24
 8004282:	af00      	add	r7, sp, #0
 8004284:	60f8      	str	r0, [r7, #12]
 8004286:	60b9      	str	r1, [r7, #8]
 8004288:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80042b0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80042b4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	0c1b      	lsrs	r3, r3, #16
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	0a1b      	lsrs	r3, r3, #8
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042d0:	b2da      	uxtb	r2, r3
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	0d9b      	lsrs	r3, r3, #22
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d11a      	bne.n	8004330 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f98e 	bl	8004620 <RTC_Bcd2ToByte>
 8004304:	4603      	mov	r3, r0
 8004306:	461a      	mov	r2, r3
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	785b      	ldrb	r3, [r3, #1]
 8004310:	4618      	mov	r0, r3
 8004312:	f000 f985 	bl	8004620 <RTC_Bcd2ToByte>
 8004316:	4603      	mov	r3, r0
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	789b      	ldrb	r3, [r3, #2]
 8004322:	4618      	mov	r0, r3
 8004324:	f000 f97c 	bl	8004620 <RTC_Bcd2ToByte>
 8004328:	4603      	mov	r3, r0
 800432a:	461a      	mov	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004330:	2300      	movs	r3, #0
}
 8004332:	4618      	mov	r0, r3
 8004334:	3718      	adds	r7, #24
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800433a:	b590      	push	{r4, r7, lr}
 800433c:	b087      	sub	sp, #28
 800433e:	af00      	add	r7, sp, #0
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	7f1b      	ldrb	r3, [r3, #28]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_RTC_SetDate+0x1c>
 8004352:	2302      	movs	r3, #2
 8004354:	e071      	b.n	800443a <HAL_RTC_SetDate+0x100>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2201      	movs	r2, #1
 800435a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2202      	movs	r2, #2
 8004360:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10e      	bne.n	8004386 <HAL_RTC_SetDate+0x4c>
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	f003 0310 	and.w	r3, r3, #16
 8004370:	2b00      	cmp	r3, #0
 8004372:	d008      	beq.n	8004386 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	f023 0310 	bic.w	r3, r3, #16
 800437c:	b2db      	uxtb	r3, r3
 800437e:	330a      	adds	r3, #10
 8004380:	b2da      	uxtb	r2, r3
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11c      	bne.n	80043c6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	78db      	ldrb	r3, [r3, #3]
 8004390:	4618      	mov	r0, r3
 8004392:	f000 f927 	bl	80045e4 <RTC_ByteToBcd2>
 8004396:	4603      	mov	r3, r0
 8004398:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	785b      	ldrb	r3, [r3, #1]
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 f920 	bl	80045e4 <RTC_ByteToBcd2>
 80043a4:	4603      	mov	r3, r0
 80043a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	789b      	ldrb	r3, [r3, #2]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 f918 	bl	80045e4 <RTC_ByteToBcd2>
 80043b4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80043b6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80043c0:	4313      	orrs	r3, r2
 80043c2:	617b      	str	r3, [r7, #20]
 80043c4:	e00e      	b.n	80043e4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	78db      	ldrb	r3, [r3, #3]
 80043ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	785b      	ldrb	r3, [r3, #1]
 80043d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043d2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80043d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	781b      	ldrb	r3, [r3, #0]
 80043de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80043e0:	4313      	orrs	r3, r2
 80043e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	22ca      	movs	r2, #202	@ 0xca
 80043ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2253      	movs	r2, #83	@ 0x53
 80043f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f899 	bl	800452c <RTC_EnterInitMode>
 80043fa:	4603      	mov	r3, r0
 80043fc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80043fe:	7cfb      	ldrb	r3, [r7, #19]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10c      	bne.n	800441e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800440e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004412:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f8c0 	bl	800459a <RTC_ExitInitMode>
 800441a:	4603      	mov	r3, r0
 800441c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800441e:	7cfb      	ldrb	r3, [r7, #19]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d102      	bne.n	800442a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2201      	movs	r2, #1
 8004428:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	22ff      	movs	r2, #255	@ 0xff
 8004430:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	771a      	strb	r2, [r3, #28]

  return status;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
}
 800443a:	4618      	mov	r0, r3
 800443c:	371c      	adds	r7, #28
 800443e:	46bd      	mov	sp, r7
 8004440:	bd90      	pop	{r4, r7, pc}

08004442 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b086      	sub	sp, #24
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800444e:	2300      	movs	r3, #0
 8004450:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800445c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004460:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	0c1b      	lsrs	r3, r3, #16
 8004466:	b2da      	uxtb	r2, r3
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	b2db      	uxtb	r3, r3
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	b2da      	uxtb	r2, r3
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	b2db      	uxtb	r3, r3
 8004480:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004484:	b2da      	uxtb	r2, r3
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	0b5b      	lsrs	r3, r3, #13
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 0307 	and.w	r3, r3, #7
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d11a      	bne.n	80044d6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	78db      	ldrb	r3, [r3, #3]
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 f8bb 	bl	8004620 <RTC_Bcd2ToByte>
 80044aa:	4603      	mov	r3, r0
 80044ac:	461a      	mov	r2, r3
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	785b      	ldrb	r3, [r3, #1]
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 f8b2 	bl	8004620 <RTC_Bcd2ToByte>
 80044bc:	4603      	mov	r3, r0
 80044be:	461a      	mov	r2, r3
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	789b      	ldrb	r3, [r3, #2]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 f8a9 	bl	8004620 <RTC_Bcd2ToByte>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3718      	adds	r7, #24
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044e8:	2300      	movs	r3, #0
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004528 <HAL_RTC_WaitForSynchro+0x48>)
 80044f2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80044f4:	f7fe fcaa 	bl	8002e4c <HAL_GetTick>
 80044f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80044fa:	e009      	b.n	8004510 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80044fc:	f7fe fca6 	bl	8002e4c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800450a:	d901      	bls.n	8004510 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800450c:	2303      	movs	r3, #3
 800450e:	e007      	b.n	8004520 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f003 0320 	and.w	r3, r3, #32
 800451a:	2b00      	cmp	r3, #0
 800451c:	d0ee      	beq.n	80044fc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	00017f5f 	.word	0x00017f5f

0800452c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8004538:	2300      	movs	r3, #0
 800453a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d122      	bne.n	8004590 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004558:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800455a:	f7fe fc77 	bl	8002e4c <HAL_GetTick>
 800455e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8004560:	e00c      	b.n	800457c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004562:	f7fe fc73 	bl	8002e4c <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004570:	d904      	bls.n	800457c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2204      	movs	r2, #4
 8004576:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <RTC_EnterInitMode+0x64>
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d1e8      	bne.n	8004562 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8004590:	7bfb      	ldrb	r3, [r7, #15]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80045b4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10a      	bne.n	80045da <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f7ff ff8b 	bl	80044e0 <HAL_RTC_WaitForSynchro>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d004      	beq.n	80045da <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2204      	movs	r2, #4
 80045d4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80045da:	7bfb      	ldrb	r3, [r7, #15]
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	4603      	mov	r3, r0
 80045ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80045f2:	e005      	b.n	8004600 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	3301      	adds	r3, #1
 80045f8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80045fa:	79fb      	ldrb	r3, [r7, #7]
 80045fc:	3b0a      	subs	r3, #10
 80045fe:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	2b09      	cmp	r3, #9
 8004604:	d8f6      	bhi.n	80045f4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	b2da      	uxtb	r2, r3
 800460e:	79fb      	ldrb	r3, [r7, #7]
 8004610:	4313      	orrs	r3, r2
 8004612:	b2db      	uxtb	r3, r3
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8004620:	b480      	push	{r7}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800462e:	79fb      	ldrb	r3, [r7, #7]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	b2db      	uxtb	r3, r3
 8004634:	461a      	mov	r2, r3
 8004636:	4613      	mov	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	4413      	add	r3, r2
 800463c:	005b      	lsls	r3, r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	79fb      	ldrb	r3, [r7, #7]
 8004646:	f003 030f 	and.w	r3, r3, #15
 800464a:	b2db      	uxtb	r3, r3
 800464c:	4413      	add	r3, r2
 800464e:	b2db      	uxtb	r3, r3
}
 8004650:	4618      	mov	r0, r3
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e07b      	b.n	8004766 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004672:	2b00      	cmp	r3, #0
 8004674:	d108      	bne.n	8004688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800467e:	d009      	beq.n	8004694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	61da      	str	r2, [r3, #28]
 8004686:	e005      	b.n	8004694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d106      	bne.n	80046b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f7fe f9e0 	bl	8002a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2202      	movs	r2, #2
 80046b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80046dc:	431a      	orrs	r2, r3
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046e6:	431a      	orrs	r2, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	431a      	orrs	r2, r3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f003 0301 	and.w	r3, r3, #1
 80046fa:	431a      	orrs	r2, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	699b      	ldr	r3, [r3, #24]
 8004700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	69db      	ldr	r3, [r3, #28]
 800470a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004718:	ea42 0103 	orr.w	r1, r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	0c1b      	lsrs	r3, r3, #16
 8004732:	f003 0104 	and.w	r1, r3, #4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	f003 0210 	and.w	r2, r3, #16
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69da      	ldr	r2, [r3, #28]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004754:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3708      	adds	r7, #8
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b088      	sub	sp, #32
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	60b9      	str	r1, [r7, #8]
 8004778:	603b      	str	r3, [r7, #0]
 800477a:	4613      	mov	r3, r2
 800477c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_SPI_Transmit+0x22>
 800478c:	2302      	movs	r3, #2
 800478e:	e12d      	b.n	80049ec <HAL_SPI_Transmit+0x27e>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004798:	f7fe fb58 	bl	8002e4c <HAL_GetTick>
 800479c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800479e:	88fb      	ldrh	r3, [r7, #6]
 80047a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d002      	beq.n	80047b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
 80047b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047b2:	e116      	b.n	80049e2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d002      	beq.n	80047c0 <HAL_SPI_Transmit+0x52>
 80047ba:	88fb      	ldrh	r3, [r7, #6]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80047c4:	e10d      	b.n	80049e2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2203      	movs	r2, #3
 80047ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	88fa      	ldrh	r2, [r7, #6]
 80047de:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	88fa      	ldrh	r2, [r7, #6]
 80047e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800480c:	d10f      	bne.n	800482e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800481c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800482c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004838:	2b40      	cmp	r3, #64	@ 0x40
 800483a:	d007      	beq.n	800484c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800484a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004854:	d14f      	bne.n	80048f6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d002      	beq.n	8004864 <HAL_SPI_Transmit+0xf6>
 800485e:	8afb      	ldrh	r3, [r7, #22]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d142      	bne.n	80048ea <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004868:	881a      	ldrh	r2, [r3, #0]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004874:	1c9a      	adds	r2, r3, #2
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800487e:	b29b      	uxth	r3, r3
 8004880:	3b01      	subs	r3, #1
 8004882:	b29a      	uxth	r2, r3
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004888:	e02f      	b.n	80048ea <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0302 	and.w	r3, r3, #2
 8004894:	2b02      	cmp	r3, #2
 8004896:	d112      	bne.n	80048be <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800489c:	881a      	ldrh	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a8:	1c9a      	adds	r2, r3, #2
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	3b01      	subs	r3, #1
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	86da      	strh	r2, [r3, #54]	@ 0x36
 80048bc:	e015      	b.n	80048ea <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048be:	f7fe fac5 	bl	8002e4c <HAL_GetTick>
 80048c2:	4602      	mov	r2, r0
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	1ad3      	subs	r3, r2, r3
 80048c8:	683a      	ldr	r2, [r7, #0]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d803      	bhi.n	80048d6 <HAL_SPI_Transmit+0x168>
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048d4:	d102      	bne.n	80048dc <HAL_SPI_Transmit+0x16e>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d106      	bne.n	80048ea <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80048e8:	e07b      	b.n	80049e2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1ca      	bne.n	800488a <HAL_SPI_Transmit+0x11c>
 80048f4:	e050      	b.n	8004998 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d002      	beq.n	8004904 <HAL_SPI_Transmit+0x196>
 80048fe:	8afb      	ldrh	r3, [r7, #22]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d144      	bne.n	800498e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	330c      	adds	r3, #12
 800490e:	7812      	ldrb	r2, [r2, #0]
 8004910:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004920:	b29b      	uxth	r3, r3
 8004922:	3b01      	subs	r3, #1
 8004924:	b29a      	uxth	r2, r3
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800492a:	e030      	b.n	800498e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b02      	cmp	r3, #2
 8004938:	d113      	bne.n	8004962 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	330c      	adds	r3, #12
 8004944:	7812      	ldrb	r2, [r2, #0]
 8004946:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800494c:	1c5a      	adds	r2, r3, #1
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004960:	e015      	b.n	800498e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004962:	f7fe fa73 	bl	8002e4c <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	429a      	cmp	r2, r3
 8004970:	d803      	bhi.n	800497a <HAL_SPI_Transmit+0x20c>
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004978:	d102      	bne.n	8004980 <HAL_SPI_Transmit+0x212>
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d106      	bne.n	800498e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800498c:	e029      	b.n	80049e2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d1c9      	bne.n	800492c <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004998:	69ba      	ldr	r2, [r7, #24]
 800499a:	6839      	ldr	r1, [r7, #0]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 fbdf 	bl	8005160 <SPI_EndRxTxTransaction>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2220      	movs	r2, #32
 80049ac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10a      	bne.n	80049cc <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80049b6:	2300      	movs	r3, #0
 80049b8:	613b      	str	r3, [r7, #16]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	613b      	str	r3, [r7, #16]
 80049ca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d002      	beq.n	80049da <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e003      	b.n	80049e2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2201      	movs	r2, #1
 80049de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80049ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3720      	adds	r7, #32
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b088      	sub	sp, #32
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	603b      	str	r3, [r7, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a04:	2300      	movs	r3, #0
 8004a06:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d002      	beq.n	8004a1a <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8004a14:	2302      	movs	r3, #2
 8004a16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a18:	e0fb      	b.n	8004c12 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a22:	d112      	bne.n	8004a4a <HAL_SPI_Receive+0x56>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10e      	bne.n	8004a4a <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	68b9      	ldr	r1, [r7, #8]
 8004a40:	68f8      	ldr	r0, [r7, #12]
 8004a42:	f000 f8ef 	bl	8004c24 <HAL_SPI_TransmitReceive>
 8004a46:	4603      	mov	r3, r0
 8004a48:	e0e8      	b.n	8004c1c <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d101      	bne.n	8004a58 <HAL_SPI_Receive+0x64>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e0e1      	b.n	8004c1c <HAL_SPI_Receive+0x228>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a60:	f7fe f9f4 	bl	8002e4c <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <HAL_SPI_Receive+0x7e>
 8004a6c:	88fb      	ldrh	r3, [r7, #6]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d102      	bne.n	8004a78 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a76:	e0cc      	b.n	8004c12 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	88fa      	ldrh	r2, [r7, #6]
 8004a90:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	88fa      	ldrh	r2, [r7, #6]
 8004a96:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004abe:	d10f      	bne.n	8004ae0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ace:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ade:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aea:	2b40      	cmp	r3, #64	@ 0x40
 8004aec:	d007      	beq.n	8004afe <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004afc:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d16a      	bne.n	8004bdc <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b06:	e032      	b.n	8004b6e <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d115      	bne.n	8004b42 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f103 020c 	add.w	r2, r3, #12
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b22:	7812      	ldrb	r2, [r2, #0]
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b2c:	1c5a      	adds	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004b40:	e015      	b.n	8004b6e <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b42:	f7fe f983 	bl	8002e4c <HAL_GetTick>
 8004b46:	4602      	mov	r2, r0
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	683a      	ldr	r2, [r7, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d803      	bhi.n	8004b5a <HAL_SPI_Receive+0x166>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b58:	d102      	bne.n	8004b60 <HAL_SPI_Receive+0x16c>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d106      	bne.n	8004b6e <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004b6c:	e051      	b.n	8004c12 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1c7      	bne.n	8004b08 <HAL_SPI_Receive+0x114>
 8004b78:	e035      	b.n	8004be6 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	689b      	ldr	r3, [r3, #8]
 8004b80:	f003 0301 	and.w	r3, r3, #1
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d113      	bne.n	8004bb0 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b92:	b292      	uxth	r2, r2
 8004b94:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9a:	1c9a      	adds	r2, r3, #2
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ba4:	b29b      	uxth	r3, r3
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004bae:	e015      	b.n	8004bdc <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bb0:	f7fe f94c 	bl	8002e4c <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	683a      	ldr	r2, [r7, #0]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d803      	bhi.n	8004bc8 <HAL_SPI_Receive+0x1d4>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004bc6:	d102      	bne.n	8004bce <HAL_SPI_Receive+0x1da>
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d106      	bne.n	8004bdc <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004bda:	e01a      	b.n	8004c12 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1c9      	bne.n	8004b7a <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	6839      	ldr	r1, [r7, #0]
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f000 fa52 	bl	8005094 <SPI_EndRxTransaction>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2220      	movs	r2, #32
 8004bfa:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	75fb      	strb	r3, [r7, #23]
 8004c08:	e003      	b.n	8004c12 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2200      	movs	r2, #0
 8004c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08c      	sub	sp, #48	@ 0x30
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	607a      	str	r2, [r7, #4]
 8004c30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004c32:	2301      	movs	r3, #1
 8004c34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004c36:	2300      	movs	r3, #0
 8004c38:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_SPI_TransmitReceive+0x26>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e198      	b.n	8004f7c <HAL_SPI_TransmitReceive+0x358>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c52:	f7fe f8fb 	bl	8002e4c <HAL_GetTick>
 8004c56:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004c68:	887b      	ldrh	r3, [r7, #2]
 8004c6a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004c6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d00f      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x70>
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004c7a:	d107      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d103      	bne.n	8004c8c <HAL_SPI_TransmitReceive+0x68>
 8004c84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d003      	beq.n	8004c94 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004c92:	e16d      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d005      	beq.n	8004ca6 <HAL_SPI_TransmitReceive+0x82>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d002      	beq.n	8004ca6 <HAL_SPI_TransmitReceive+0x82>
 8004ca0:	887b      	ldrh	r3, [r7, #2]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d103      	bne.n	8004cae <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8004cac:	e160      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d003      	beq.n	8004cc2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2205      	movs	r2, #5
 8004cbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	887a      	ldrh	r2, [r7, #2]
 8004cd2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	887a      	ldrh	r2, [r7, #2]
 8004cd8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	68ba      	ldr	r2, [r7, #8]
 8004cde:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	887a      	ldrh	r2, [r7, #2]
 8004ce4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	887a      	ldrh	r2, [r7, #2]
 8004cea:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d02:	2b40      	cmp	r3, #64	@ 0x40
 8004d04:	d007      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d14:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d1e:	d17c      	bne.n	8004e1a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_SPI_TransmitReceive+0x10a>
 8004d28:	8b7b      	ldrh	r3, [r7, #26]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d16a      	bne.n	8004e04 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d32:	881a      	ldrh	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d3e:	1c9a      	adds	r2, r3, #2
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d52:	e057      	b.n	8004e04 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d11b      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x176>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d016      	beq.n	8004d9a <HAL_SPI_TransmitReceive+0x176>
 8004d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d113      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d76:	881a      	ldrh	r2, [r3, #0]
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d82:	1c9a      	adds	r2, r3, #2
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d96:	2300      	movs	r3, #0
 8004d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 0301 	and.w	r3, r3, #1
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d119      	bne.n	8004ddc <HAL_SPI_TransmitReceive+0x1b8>
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d014      	beq.n	8004ddc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68da      	ldr	r2, [r3, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbc:	b292      	uxth	r2, r2
 8004dbe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc4:	1c9a      	adds	r2, r3, #2
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	3b01      	subs	r3, #1
 8004dd2:	b29a      	uxth	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004ddc:	f7fe f836 	bl	8002e4c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d80b      	bhi.n	8004e04 <HAL_SPI_TransmitReceive+0x1e0>
 8004dec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004df2:	d007      	beq.n	8004e04 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004e02:	e0b5      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1a2      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x130>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d19d      	bne.n	8004d54 <HAL_SPI_TransmitReceive+0x130>
 8004e18:	e080      	b.n	8004f1c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <HAL_SPI_TransmitReceive+0x204>
 8004e22:	8b7b      	ldrh	r3, [r7, #26]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d16f      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	330c      	adds	r3, #12
 8004e32:	7812      	ldrb	r2, [r2, #0]
 8004e34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e44:	b29b      	uxth	r3, r3
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b29a      	uxth	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e4e:	e05b      	b.n	8004f08 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d11c      	bne.n	8004e98 <HAL_SPI_TransmitReceive+0x274>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d017      	beq.n	8004e98 <HAL_SPI_TransmitReceive+0x274>
 8004e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d114      	bne.n	8004e98 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	330c      	adds	r3, #12
 8004e78:	7812      	ldrb	r2, [r2, #0]
 8004e7a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	3b01      	subs	r3, #1
 8004e8e:	b29a      	uxth	r2, r3
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e94:	2300      	movs	r3, #0
 8004e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d119      	bne.n	8004eda <HAL_SPI_TransmitReceive+0x2b6>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d014      	beq.n	8004eda <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68da      	ldr	r2, [r3, #12]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eba:	b2d2      	uxtb	r2, r2
 8004ebc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec2:	1c5a      	adds	r2, r3, #1
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004ecc:	b29b      	uxth	r3, r3
 8004ece:	3b01      	subs	r3, #1
 8004ed0:	b29a      	uxth	r2, r3
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004eda:	f7fd ffb7 	bl	8002e4c <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d803      	bhi.n	8004ef2 <HAL_SPI_TransmitReceive+0x2ce>
 8004eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ef0:	d102      	bne.n	8004ef8 <HAL_SPI_TransmitReceive+0x2d4>
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d107      	bne.n	8004f08 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004f06:	e033      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d19e      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x22c>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d199      	bne.n	8004e50 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f1e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f91d 	bl	8005160 <SPI_EndRxTxTransaction>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d006      	beq.n	8004f3a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2220      	movs	r2, #32
 8004f36:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004f38:	e01a      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d10a      	bne.n	8004f58 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f42:	2300      	movs	r3, #0
 8004f44:	617b      	str	r3, [r7, #20]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	617b      	str	r3, [r7, #20]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d003      	beq.n	8004f68 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f66:	e003      	b.n	8004f70 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004f78:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3730      	adds	r7, #48	@ 0x30
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	603b      	str	r3, [r7, #0]
 8004f90:	4613      	mov	r3, r2
 8004f92:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004f94:	f7fd ff5a 	bl	8002e4c <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9c:	1a9b      	subs	r3, r3, r2
 8004f9e:	683a      	ldr	r2, [r7, #0]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004fa4:	f7fd ff52 	bl	8002e4c <HAL_GetTick>
 8004fa8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004faa:	4b39      	ldr	r3, [pc, #228]	@ (8005090 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	015b      	lsls	r3, r3, #5
 8004fb0:	0d1b      	lsrs	r3, r3, #20
 8004fb2:	69fa      	ldr	r2, [r7, #28]
 8004fb4:	fb02 f303 	mul.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fba:	e054      	b.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fc2:	d050      	beq.n	8005066 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004fc4:	f7fd ff42 	bl	8002e4c <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	69fa      	ldr	r2, [r7, #28]
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d902      	bls.n	8004fda <SPI_WaitFlagStateUntilTimeout+0x56>
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d13d      	bne.n	8005056 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004fe8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ff2:	d111      	bne.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ffc:	d004      	beq.n	8005008 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005006:	d107      	bne.n	8005018 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005016:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005020:	d10f      	bne.n	8005042 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005040:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	2201      	movs	r2, #1
 8005046:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e017      	b.n	8005086 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	3b01      	subs	r3, #1
 8005064:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4013      	ands	r3, r2
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	429a      	cmp	r2, r3
 8005074:	bf0c      	ite	eq
 8005076:	2301      	moveq	r3, #1
 8005078:	2300      	movne	r3, #0
 800507a:	b2db      	uxtb	r3, r3
 800507c:	461a      	mov	r2, r3
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	429a      	cmp	r2, r3
 8005082:	d19b      	bne.n	8004fbc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3720      	adds	r7, #32
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000068 	.word	0x20000068

08005094 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af02      	add	r7, sp, #8
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050a8:	d111      	bne.n	80050ce <SPI_EndRxTransaction+0x3a>
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050b2:	d004      	beq.n	80050be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050bc:	d107      	bne.n	80050ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80050d6:	d12a      	bne.n	800512e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050e0:	d012      	beq.n	8005108 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	9300      	str	r3, [sp, #0]
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2200      	movs	r2, #0
 80050ea:	2180      	movs	r1, #128	@ 0x80
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	f7ff ff49 	bl	8004f84 <SPI_WaitFlagStateUntilTimeout>
 80050f2:	4603      	mov	r3, r0
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d02d      	beq.n	8005154 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fc:	f043 0220 	orr.w	r2, r3, #32
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005104:	2303      	movs	r3, #3
 8005106:	e026      	b.n	8005156 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	2200      	movs	r2, #0
 8005110:	2101      	movs	r1, #1
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f7ff ff36 	bl	8004f84 <SPI_WaitFlagStateUntilTimeout>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	d01a      	beq.n	8005154 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005122:	f043 0220 	orr.w	r2, r3, #32
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800512a:	2303      	movs	r3, #3
 800512c:	e013      	b.n	8005156 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2200      	movs	r2, #0
 8005136:	2101      	movs	r1, #1
 8005138:	68f8      	ldr	r0, [r7, #12]
 800513a:	f7ff ff23 	bl	8004f84 <SPI_WaitFlagStateUntilTimeout>
 800513e:	4603      	mov	r3, r0
 8005140:	2b00      	cmp	r3, #0
 8005142:	d007      	beq.n	8005154 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005148:	f043 0220 	orr.w	r2, r3, #32
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005150:	2303      	movs	r3, #3
 8005152:	e000      	b.n	8005156 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3710      	adds	r7, #16
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b088      	sub	sp, #32
 8005164:	af02      	add	r7, sp, #8
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	2201      	movs	r2, #1
 8005174:	2102      	movs	r1, #2
 8005176:	68f8      	ldr	r0, [r7, #12]
 8005178:	f7ff ff04 	bl	8004f84 <SPI_WaitFlagStateUntilTimeout>
 800517c:	4603      	mov	r3, r0
 800517e:	2b00      	cmp	r3, #0
 8005180:	d007      	beq.n	8005192 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005186:	f043 0220 	orr.w	r2, r3, #32
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e032      	b.n	80051f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005192:	4b1b      	ldr	r3, [pc, #108]	@ (8005200 <SPI_EndRxTxTransaction+0xa0>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1b      	ldr	r2, [pc, #108]	@ (8005204 <SPI_EndRxTxTransaction+0xa4>)
 8005198:	fba2 2303 	umull	r2, r3, r2, r3
 800519c:	0d5b      	lsrs	r3, r3, #21
 800519e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80051a2:	fb02 f303 	mul.w	r3, r2, r3
 80051a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80051b0:	d112      	bne.n	80051d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	9300      	str	r3, [sp, #0]
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	2200      	movs	r2, #0
 80051ba:	2180      	movs	r1, #128	@ 0x80
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f7ff fee1 	bl	8004f84 <SPI_WaitFlagStateUntilTimeout>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d016      	beq.n	80051f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051cc:	f043 0220 	orr.w	r2, r3, #32
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e00f      	b.n	80051f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ee:	2b80      	cmp	r3, #128	@ 0x80
 80051f0:	d0f2      	beq.n	80051d8 <SPI_EndRxTxTransaction+0x78>
 80051f2:	e000      	b.n	80051f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80051f4:	bf00      	nop
  }

  return HAL_OK;
 80051f6:	2300      	movs	r3, #0
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3718      	adds	r7, #24
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000068 	.word	0x20000068
 8005204:	165e9f81 	.word	0x165e9f81

08005208 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d101      	bne.n	800521a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005216:	2301      	movs	r3, #1
 8005218:	e041      	b.n	800529e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005220:	b2db      	uxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d106      	bne.n	8005234 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f000 f839 	bl	80052a6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	3304      	adds	r3, #4
 8005244:	4619      	mov	r1, r3
 8005246:	4610      	mov	r0, r2
 8005248:	f000 f9c0 	bl	80055cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2201      	movs	r2, #1
 8005270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2201      	movs	r2, #1
 8005278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2201      	movs	r2, #1
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800529c:	2300      	movs	r3, #0
}
 800529e:	4618      	mov	r0, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	46bd      	mov	sp, r7
 80052a4:	bd80      	pop	{r7, pc}

080052a6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b083      	sub	sp, #12
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052ae:	bf00      	nop
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
	...

080052bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d001      	beq.n	80052d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e04e      	b.n	8005372 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2202      	movs	r2, #2
 80052d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4a23      	ldr	r2, [pc, #140]	@ (8005380 <HAL_TIM_Base_Start_IT+0xc4>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d022      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052fe:	d01d      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a1f      	ldr	r2, [pc, #124]	@ (8005384 <HAL_TIM_Base_Start_IT+0xc8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d018      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a1e      	ldr	r2, [pc, #120]	@ (8005388 <HAL_TIM_Base_Start_IT+0xcc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d013      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a1c      	ldr	r2, [pc, #112]	@ (800538c <HAL_TIM_Base_Start_IT+0xd0>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d00e      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a1b      	ldr	r2, [pc, #108]	@ (8005390 <HAL_TIM_Base_Start_IT+0xd4>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d009      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a19      	ldr	r2, [pc, #100]	@ (8005394 <HAL_TIM_Base_Start_IT+0xd8>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d004      	beq.n	800533c <HAL_TIM_Base_Start_IT+0x80>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <HAL_TIM_Base_Start_IT+0xdc>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d111      	bne.n	8005360 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 0307 	and.w	r3, r3, #7
 8005346:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b06      	cmp	r3, #6
 800534c:	d010      	beq.n	8005370 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f042 0201 	orr.w	r2, r2, #1
 800535c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800535e:	e007      	b.n	8005370 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f042 0201 	orr.w	r2, r2, #1
 800536e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3714      	adds	r7, #20
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
 800537e:	bf00      	nop
 8005380:	40010000 	.word	0x40010000
 8005384:	40000400 	.word	0x40000400
 8005388:	40000800 	.word	0x40000800
 800538c:	40000c00 	.word	0x40000c00
 8005390:	40010400 	.word	0x40010400
 8005394:	40014000 	.word	0x40014000
 8005398:	40001800 	.word	0x40001800

0800539c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d020      	beq.n	8005400 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d01b      	beq.n	8005400 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0202 	mvn.w	r2, #2
 80053d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2201      	movs	r2, #1
 80053d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	699b      	ldr	r3, [r3, #24]
 80053de:	f003 0303 	and.w	r3, r3, #3
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d003      	beq.n	80053ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f8d2 	bl	8005590 <HAL_TIM_IC_CaptureCallback>
 80053ec:	e005      	b.n	80053fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f8c4 	bl	800557c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 f8d5 	bl	80055a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b00      	cmp	r3, #0
 8005408:	d020      	beq.n	800544c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	d01b      	beq.n	800544c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f06f 0204 	mvn.w	r2, #4
 800541c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2202      	movs	r2, #2
 8005422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f000 f8ac 	bl	8005590 <HAL_TIM_IC_CaptureCallback>
 8005438:	e005      	b.n	8005446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f89e 	bl	800557c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f8af 	bl	80055a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f003 0308 	and.w	r3, r3, #8
 8005452:	2b00      	cmp	r3, #0
 8005454:	d020      	beq.n	8005498 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0308 	and.w	r3, r3, #8
 800545c:	2b00      	cmp	r3, #0
 800545e:	d01b      	beq.n	8005498 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f06f 0208 	mvn.w	r2, #8
 8005468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2204      	movs	r2, #4
 800546e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	f000 f886 	bl	8005590 <HAL_TIM_IC_CaptureCallback>
 8005484:	e005      	b.n	8005492 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 f878 	bl	800557c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 f889 	bl	80055a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	f003 0310 	and.w	r3, r3, #16
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d020      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f003 0310 	and.w	r3, r3, #16
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d01b      	beq.n	80054e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0210 	mvn.w	r2, #16
 80054b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2208      	movs	r2, #8
 80054ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69db      	ldr	r3, [r3, #28]
 80054c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f860 	bl	8005590 <HAL_TIM_IC_CaptureCallback>
 80054d0:	e005      	b.n	80054de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f000 f852 	bl	800557c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 f863 	bl	80055a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2200      	movs	r2, #0
 80054e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00c      	beq.n	8005508 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d007      	beq.n	8005508 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0201 	mvn.w	r2, #1
 8005500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f7fd fa4c 	bl	80029a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d007      	beq.n	800552c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f906 	bl	8005738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00c      	beq.n	8005550 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800553c:	2b00      	cmp	r3, #0
 800553e:	d007      	beq.n	8005550 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 f834 	bl	80055b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 0320 	and.w	r3, r3, #32
 8005556:	2b00      	cmp	r3, #0
 8005558:	d00c      	beq.n	8005574 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d007      	beq.n	8005574 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0220 	mvn.w	r2, #32
 800556c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f8d8 	bl	8005724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}

0800557c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800557c:	b480      	push	{r7}
 800557e:	b083      	sub	sp, #12
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005584:	bf00      	nop
 8005586:	370c      	adds	r7, #12
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b085      	sub	sp, #20
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
 80055d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a46      	ldr	r2, [pc, #280]	@ (80056f8 <TIM_Base_SetConfig+0x12c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d013      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055ea:	d00f      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4a43      	ldr	r2, [pc, #268]	@ (80056fc <TIM_Base_SetConfig+0x130>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d00b      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a42      	ldr	r2, [pc, #264]	@ (8005700 <TIM_Base_SetConfig+0x134>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d007      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a41      	ldr	r2, [pc, #260]	@ (8005704 <TIM_Base_SetConfig+0x138>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d003      	beq.n	800560c <TIM_Base_SetConfig+0x40>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	4a40      	ldr	r2, [pc, #256]	@ (8005708 <TIM_Base_SetConfig+0x13c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d108      	bne.n	800561e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005612:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	685b      	ldr	r3, [r3, #4]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a35      	ldr	r2, [pc, #212]	@ (80056f8 <TIM_Base_SetConfig+0x12c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d02b      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800562c:	d027      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a32      	ldr	r2, [pc, #200]	@ (80056fc <TIM_Base_SetConfig+0x130>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d023      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a31      	ldr	r2, [pc, #196]	@ (8005700 <TIM_Base_SetConfig+0x134>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d01f      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a30      	ldr	r2, [pc, #192]	@ (8005704 <TIM_Base_SetConfig+0x138>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d01b      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a2f      	ldr	r2, [pc, #188]	@ (8005708 <TIM_Base_SetConfig+0x13c>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d017      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a2e      	ldr	r2, [pc, #184]	@ (800570c <TIM_Base_SetConfig+0x140>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a2d      	ldr	r2, [pc, #180]	@ (8005710 <TIM_Base_SetConfig+0x144>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00f      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a2c      	ldr	r2, [pc, #176]	@ (8005714 <TIM_Base_SetConfig+0x148>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00b      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a2b      	ldr	r2, [pc, #172]	@ (8005718 <TIM_Base_SetConfig+0x14c>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d007      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a2a      	ldr	r2, [pc, #168]	@ (800571c <TIM_Base_SetConfig+0x150>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <TIM_Base_SetConfig+0xb2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a29      	ldr	r2, [pc, #164]	@ (8005720 <TIM_Base_SetConfig+0x154>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d108      	bne.n	8005690 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005684:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	4313      	orrs	r3, r2
 800568e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a10      	ldr	r2, [pc, #64]	@ (80056f8 <TIM_Base_SetConfig+0x12c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_Base_SetConfig+0xf8>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a12      	ldr	r2, [pc, #72]	@ (8005708 <TIM_Base_SetConfig+0x13c>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d103      	bne.n	80056cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	691a      	ldr	r2, [r3, #16]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d105      	bne.n	80056ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f023 0201 	bic.w	r2, r3, #1
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	611a      	str	r2, [r3, #16]
  }
}
 80056ea:	bf00      	nop
 80056ec:	3714      	adds	r7, #20
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
 80056f6:	bf00      	nop
 80056f8:	40010000 	.word	0x40010000
 80056fc:	40000400 	.word	0x40000400
 8005700:	40000800 	.word	0x40000800
 8005704:	40000c00 	.word	0x40000c00
 8005708:	40010400 	.word	0x40010400
 800570c:	40014000 	.word	0x40014000
 8005710:	40014400 	.word	0x40014400
 8005714:	40014800 	.word	0x40014800
 8005718:	40001800 	.word	0x40001800
 800571c:	40001c00 	.word	0x40001c00
 8005720:	40002000 	.word	0x40002000

08005724 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e042      	b.n	80057e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fd f9c6 	bl	8002b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2224      	movs	r2, #36	@ 0x24
 800577c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800578e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fdbd 	bl	8006310 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80057c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3708      	adds	r7, #8
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	@ 0x28
 80057f0:	af02      	add	r7, sp, #8
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	603b      	str	r3, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b20      	cmp	r3, #32
 800580a:	d175      	bne.n	80058f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <HAL_UART_Transmit+0x2c>
 8005812:	88fb      	ldrh	r3, [r7, #6]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d101      	bne.n	800581c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	e06e      	b.n	80058fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2221      	movs	r2, #33	@ 0x21
 8005826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800582a:	f7fd fb0f 	bl	8002e4c <HAL_GetTick>
 800582e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	88fa      	ldrh	r2, [r7, #6]
 800583a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005844:	d108      	bne.n	8005858 <HAL_UART_Transmit+0x6c>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d104      	bne.n	8005858 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800584e:	2300      	movs	r3, #0
 8005850:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	61bb      	str	r3, [r7, #24]
 8005856:	e003      	b.n	8005860 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800585c:	2300      	movs	r3, #0
 800585e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005860:	e02e      	b.n	80058c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2200      	movs	r2, #0
 800586a:	2180      	movs	r1, #128	@ 0x80
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 fb1f 	bl	8005eb0 <UART_WaitOnFlagUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e03a      	b.n	80058fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10b      	bne.n	80058a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	881b      	ldrh	r3, [r3, #0]
 800588e:	461a      	mov	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005898:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	3302      	adds	r3, #2
 800589e:	61bb      	str	r3, [r7, #24]
 80058a0:	e007      	b.n	80058b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	781a      	ldrb	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	3301      	adds	r3, #1
 80058b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1cb      	bne.n	8005862 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	9300      	str	r3, [sp, #0]
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2200      	movs	r2, #0
 80058d2:	2140      	movs	r1, #64	@ 0x40
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 faeb 	bl	8005eb0 <UART_WaitOnFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2220      	movs	r2, #32
 80058e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e006      	b.n	80058fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	e000      	b.n	80058fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058f8:	2302      	movs	r3, #2
  }
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b084      	sub	sp, #16
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	4613      	mov	r3, r2
 800590e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b20      	cmp	r3, #32
 800591a:	d112      	bne.n	8005942 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d002      	beq.n	8005928 <HAL_UART_Receive_IT+0x26>
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e00b      	b.n	8005944 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	461a      	mov	r2, r3
 8005936:	68b9      	ldr	r1, [r7, #8]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fb12 	bl	8005f62 <UART_Start_Receive_IT>
 800593e:	4603      	mov	r3, r0
 8005940:	e000      	b.n	8005944 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005942:	2302      	movs	r3, #2
  }
}
 8005944:	4618      	mov	r0, r3
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b0ba      	sub	sp, #232	@ 0xe8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005972:	2300      	movs	r3, #0
 8005974:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005978:	2300      	movs	r3, #0
 800597a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800597e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800598a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10f      	bne.n	80059b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005996:	f003 0320 	and.w	r3, r3, #32
 800599a:	2b00      	cmp	r3, #0
 800599c:	d009      	beq.n	80059b2 <HAL_UART_IRQHandler+0x66>
 800599e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a2:	f003 0320 	and.w	r3, r3, #32
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d003      	beq.n	80059b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fbf2 	bl	8006194 <UART_Receive_IT>
      return;
 80059b0:	e25b      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80059b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	f000 80de 	beq.w	8005b78 <HAL_UART_IRQHandler+0x22c>
 80059bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 80d1 	beq.w	8005b78 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80059d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059da:	f003 0301 	and.w	r3, r3, #1
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00b      	beq.n	80059fa <HAL_UART_IRQHandler+0xae>
 80059e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d005      	beq.n	80059fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f2:	f043 0201 	orr.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059fe:	f003 0304 	and.w	r3, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00b      	beq.n	8005a1e <HAL_UART_IRQHandler+0xd2>
 8005a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d005      	beq.n	8005a1e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a16:	f043 0202 	orr.w	r2, r3, #2
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a22:	f003 0302 	and.w	r3, r3, #2
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00b      	beq.n	8005a42 <HAL_UART_IRQHandler+0xf6>
 8005a2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d005      	beq.n	8005a42 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a3a:	f043 0204 	orr.w	r2, r3, #4
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a46:	f003 0308 	and.w	r3, r3, #8
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d011      	beq.n	8005a72 <HAL_UART_IRQHandler+0x126>
 8005a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a52:	f003 0320 	and.w	r3, r3, #32
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d105      	bne.n	8005a66 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d005      	beq.n	8005a72 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6a:	f043 0208 	orr.w	r2, r3, #8
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	f000 81f2 	beq.w	8005e60 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a80:	f003 0320 	and.w	r3, r3, #32
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d008      	beq.n	8005a9a <HAL_UART_IRQHandler+0x14e>
 8005a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 fb7d 	bl	8006194 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695b      	ldr	r3, [r3, #20]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aa4:	2b40      	cmp	r3, #64	@ 0x40
 8005aa6:	bf0c      	ite	eq
 8005aa8:	2301      	moveq	r3, #1
 8005aaa:	2300      	movne	r3, #0
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d103      	bne.n	8005ac6 <HAL_UART_IRQHandler+0x17a>
 8005abe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d04f      	beq.n	8005b66 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fa85 	bl	8005fd6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad6:	2b40      	cmp	r3, #64	@ 0x40
 8005ad8:	d141      	bne.n	8005b5e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3314      	adds	r3, #20
 8005ae0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005af0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005af8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3314      	adds	r3, #20
 8005b02:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005b06:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005b0a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005b12:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005b16:	e841 2300 	strex	r3, r2, [r1]
 8005b1a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005b1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d1d9      	bne.n	8005ada <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d013      	beq.n	8005b56 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	4a7e      	ldr	r2, [pc, #504]	@ (8005d2c <HAL_UART_IRQHandler+0x3e0>)
 8005b34:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fd fae4 	bl	8003108 <HAL_DMA_Abort_IT>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d016      	beq.n	8005b74 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b50:	4610      	mov	r0, r2
 8005b52:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b54:	e00e      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f994 	bl	8005e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5c:	e00a      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f990 	bl	8005e84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	e006      	b.n	8005b74 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f98c 	bl	8005e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005b72:	e175      	b.n	8005e60 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b74:	bf00      	nop
    return;
 8005b76:	e173      	b.n	8005e60 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	f040 814f 	bne.w	8005e20 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	f000 8148 	beq.w	8005e20 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b94:	f003 0310 	and.w	r3, r3, #16
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8141 	beq.w	8005e20 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	60bb      	str	r3, [r7, #8]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	60bb      	str	r3, [r7, #8]
 8005bb2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	695b      	ldr	r3, [r3, #20]
 8005bba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bbe:	2b40      	cmp	r3, #64	@ 0x40
 8005bc0:	f040 80b6 	bne.w	8005d30 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	685b      	ldr	r3, [r3, #4]
 8005bcc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005bd0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 8145 	beq.w	8005e64 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005bde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005be2:	429a      	cmp	r2, r3
 8005be4:	f080 813e 	bcs.w	8005e64 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005bee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bfa:	f000 8088 	beq.w	8005d0e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	330c      	adds	r3, #12
 8005c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c08:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c0c:	e853 3f00 	ldrex	r3, [r3]
 8005c10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005c18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	330c      	adds	r3, #12
 8005c26:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005c2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005c2e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c32:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005c36:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005c3a:	e841 2300 	strex	r3, r2, [r1]
 8005c3e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1d9      	bne.n	8005bfe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	3314      	adds	r3, #20
 8005c50:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005c5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005c5c:	f023 0301 	bic.w	r3, r3, #1
 8005c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3314      	adds	r3, #20
 8005c6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005c6e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005c72:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c74:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c80:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e1      	bne.n	8005c4a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	3314      	adds	r3, #20
 8005c8c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3314      	adds	r3, #20
 8005ca6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005caa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005cac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005cb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005cb8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e3      	bne.n	8005c86 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cd6:	e853 3f00 	ldrex	r3, [r3]
 8005cda:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005cdc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cde:	f023 0310 	bic.w	r3, r3, #16
 8005ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	330c      	adds	r3, #12
 8005cec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005cf0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005cf2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005cf6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005cfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e3      	bne.n	8005ccc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7fd f98d 	bl	8003028 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2202      	movs	r2, #2
 8005d12:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	1ad3      	subs	r3, r2, r3
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4619      	mov	r1, r3
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f000 f8b7 	bl	8005e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d2a:	e09b      	b.n	8005e64 <HAL_UART_IRQHandler+0x518>
 8005d2c:	0800609d 	.word	0x0800609d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 808e 	beq.w	8005e68 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005d4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8089 	beq.w	8005e68 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	330c      	adds	r3, #12
 8005d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d60:	e853 3f00 	ldrex	r3, [r3]
 8005d64:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005d66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d68:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	330c      	adds	r3, #12
 8005d76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d7a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d7c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d80:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d82:	e841 2300 	strex	r3, r2, [r1]
 8005d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1e3      	bne.n	8005d56 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	3314      	adds	r3, #20
 8005d94:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d98:	e853 3f00 	ldrex	r3, [r3]
 8005d9c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	f023 0301 	bic.w	r3, r3, #1
 8005da4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	3314      	adds	r3, #20
 8005dae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005db2:	633a      	str	r2, [r7, #48]	@ 0x30
 8005db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e3      	bne.n	8005d8e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2220      	movs	r2, #32
 8005dca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	330c      	adds	r3, #12
 8005dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	e853 3f00 	ldrex	r3, [r3]
 8005de2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0310 	bic.w	r3, r3, #16
 8005dea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	330c      	adds	r3, #12
 8005df4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005df8:	61fa      	str	r2, [r7, #28]
 8005dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfc:	69b9      	ldr	r1, [r7, #24]
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	e841 2300 	strex	r3, r2, [r1]
 8005e04:	617b      	str	r3, [r7, #20]
   return(result);
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e3      	bne.n	8005dd4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2202      	movs	r2, #2
 8005e10:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e12:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f83d 	bl	8005e98 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005e1e:	e023      	b.n	8005e68 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d009      	beq.n	8005e40 <HAL_UART_IRQHandler+0x4f4>
 8005e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f943 	bl	80060c4 <UART_Transmit_IT>
    return;
 8005e3e:	e014      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d00e      	beq.n	8005e6a <HAL_UART_IRQHandler+0x51e>
 8005e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d008      	beq.n	8005e6a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f983 	bl	8006164 <UART_EndTransmit_IT>
    return;
 8005e5e:	e004      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
    return;
 8005e60:	bf00      	nop
 8005e62:	e002      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8005e64:	bf00      	nop
 8005e66:	e000      	b.n	8005e6a <HAL_UART_IRQHandler+0x51e>
      return;
 8005e68:	bf00      	nop
  }
}
 8005e6a:	37e8      	adds	r7, #232	@ 0xe8
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr

08005e84 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e8c:	bf00      	nop
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ea4:	bf00      	nop
 8005ea6:	370c      	adds	r7, #12
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	60f8      	str	r0, [r7, #12]
 8005eb8:	60b9      	str	r1, [r7, #8]
 8005eba:	603b      	str	r3, [r7, #0]
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec0:	e03b      	b.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ec8:	d037      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005eca:	f7fc ffbf 	bl	8002e4c <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	6a3a      	ldr	r2, [r7, #32]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d302      	bcc.n	8005ee0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d101      	bne.n	8005ee4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ee0:	2303      	movs	r3, #3
 8005ee2:	e03a      	b.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f003 0304 	and.w	r3, r3, #4
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d023      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	2b80      	cmp	r3, #128	@ 0x80
 8005ef6:	d020      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	2b40      	cmp	r3, #64	@ 0x40
 8005efc:	d01d      	beq.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b08      	cmp	r3, #8
 8005f0a:	d116      	bne.n	8005f3a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	617b      	str	r3, [r7, #20]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	617b      	str	r3, [r7, #20]
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 f857 	bl	8005fd6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2208      	movs	r2, #8
 8005f2c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e00f      	b.n	8005f5a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	4013      	ands	r3, r2
 8005f44:	68ba      	ldr	r2, [r7, #8]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	bf0c      	ite	eq
 8005f4a:	2301      	moveq	r3, #1
 8005f4c:	2300      	movne	r3, #0
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	461a      	mov	r2, r3
 8005f52:	79fb      	ldrb	r3, [r7, #7]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d0b4      	beq.n	8005ec2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f58:	2300      	movs	r3, #0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3718      	adds	r7, #24
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b085      	sub	sp, #20
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	60f8      	str	r0, [r7, #12]
 8005f6a:	60b9      	str	r1, [r7, #8]
 8005f6c:	4613      	mov	r3, r2
 8005f6e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	88fa      	ldrh	r2, [r7, #6]
 8005f7a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	88fa      	ldrh	r2, [r7, #6]
 8005f80:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2222      	movs	r2, #34	@ 0x22
 8005f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	68da      	ldr	r2, [r3, #12]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fa6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	695a      	ldr	r2, [r3, #20]
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f042 0201 	orr.w	r2, r2, #1
 8005fb6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0220 	orr.w	r2, r2, #32
 8005fc6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fc8:	2300      	movs	r3, #0
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3714      	adds	r7, #20
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr

08005fd6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b095      	sub	sp, #84	@ 0x54
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	330c      	adds	r3, #12
 8005fe4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fe8:	e853 3f00 	ldrex	r3, [r3]
 8005fec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ff0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ff4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	330c      	adds	r3, #12
 8005ffc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ffe:	643a      	str	r2, [r7, #64]	@ 0x40
 8006000:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006004:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e5      	bne.n	8005fde <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	3314      	adds	r3, #20
 8006018:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601a:	6a3b      	ldr	r3, [r7, #32]
 800601c:	e853 3f00 	ldrex	r3, [r3]
 8006020:	61fb      	str	r3, [r7, #28]
   return(result);
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	f023 0301 	bic.w	r3, r3, #1
 8006028:	64bb      	str	r3, [r7, #72]	@ 0x48
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	3314      	adds	r3, #20
 8006030:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006032:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006034:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006036:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800603a:	e841 2300 	strex	r3, r2, [r1]
 800603e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1e5      	bne.n	8006012 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604a:	2b01      	cmp	r3, #1
 800604c:	d119      	bne.n	8006082 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	e853 3f00 	ldrex	r3, [r3]
 800605c:	60bb      	str	r3, [r7, #8]
   return(result);
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f023 0310 	bic.w	r3, r3, #16
 8006064:	647b      	str	r3, [r7, #68]	@ 0x44
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	330c      	adds	r3, #12
 800606c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800606e:	61ba      	str	r2, [r7, #24]
 8006070:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006072:	6979      	ldr	r1, [r7, #20]
 8006074:	69ba      	ldr	r2, [r7, #24]
 8006076:	e841 2300 	strex	r3, r2, [r1]
 800607a:	613b      	str	r3, [r7, #16]
   return(result);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1e5      	bne.n	800604e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006090:	bf00      	nop
 8006092:	3754      	adds	r7, #84	@ 0x54
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060b6:	68f8      	ldr	r0, [r7, #12]
 80060b8:	f7ff fee4 	bl	8005e84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060bc:	bf00      	nop
 80060be:	3710      	adds	r7, #16
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bd80      	pop	{r7, pc}

080060c4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d2:	b2db      	uxtb	r3, r3
 80060d4:	2b21      	cmp	r3, #33	@ 0x21
 80060d6:	d13e      	bne.n	8006156 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80060e0:	d114      	bne.n	800610c <UART_Transmit_IT+0x48>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d110      	bne.n	800610c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	881b      	ldrh	r3, [r3, #0]
 80060f4:	461a      	mov	r2, r3
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060fe:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	1c9a      	adds	r2, r3, #2
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	621a      	str	r2, [r3, #32]
 800610a:	e008      	b.n	800611e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a1b      	ldr	r3, [r3, #32]
 8006110:	1c59      	adds	r1, r3, #1
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	6211      	str	r1, [r2, #32]
 8006116:	781a      	ldrb	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006122:	b29b      	uxth	r3, r3
 8006124:	3b01      	subs	r3, #1
 8006126:	b29b      	uxth	r3, r3
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	4619      	mov	r1, r3
 800612c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800612e:	2b00      	cmp	r3, #0
 8006130:	d10f      	bne.n	8006152 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006140:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006150:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	e000      	b.n	8006158 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006156:	2302      	movs	r3, #2
  }
}
 8006158:	4618      	mov	r0, r3
 800615a:	3714      	adds	r7, #20
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68da      	ldr	r2, [r3, #12]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800617a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2220      	movs	r2, #32
 8006180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f7ff fe73 	bl	8005e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b08c      	sub	sp, #48	@ 0x30
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b22      	cmp	r3, #34	@ 0x22
 80061a6:	f040 80ae 	bne.w	8006306 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061b2:	d117      	bne.n	80061e4 <UART_Receive_IT+0x50>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d113      	bne.n	80061e4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80061bc:	2300      	movs	r3, #0
 80061be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061c4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061dc:	1c9a      	adds	r2, r3, #2
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80061e2:	e026      	b.n	8006232 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061f6:	d007      	beq.n	8006208 <UART_Receive_IT+0x74>
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d10a      	bne.n	8006216 <UART_Receive_IT+0x82>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d106      	bne.n	8006216 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	b2da      	uxtb	r2, r3
 8006210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	e008      	b.n	8006228 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	b2db      	uxtb	r3, r3
 800621e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006222:	b2da      	uxtb	r2, r3
 8006224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006226:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800622c:	1c5a      	adds	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006236:	b29b      	uxth	r3, r3
 8006238:	3b01      	subs	r3, #1
 800623a:	b29b      	uxth	r3, r3
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	4619      	mov	r1, r3
 8006240:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006242:	2b00      	cmp	r3, #0
 8006244:	d15d      	bne.n	8006302 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68da      	ldr	r2, [r3, #12]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f022 0220 	bic.w	r2, r2, #32
 8006254:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	68da      	ldr	r2, [r3, #12]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006264:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	695a      	ldr	r2, [r3, #20]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2220      	movs	r2, #32
 800627a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006288:	2b01      	cmp	r3, #1
 800628a:	d135      	bne.n	80062f8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	330c      	adds	r3, #12
 8006298:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	613b      	str	r3, [r7, #16]
   return(result);
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	f023 0310 	bic.w	r3, r3, #16
 80062a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	330c      	adds	r3, #12
 80062b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b2:	623a      	str	r2, [r7, #32]
 80062b4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	69f9      	ldr	r1, [r7, #28]
 80062b8:	6a3a      	ldr	r2, [r7, #32]
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	61bb      	str	r3, [r7, #24]
   return(result);
 80062c0:	69bb      	ldr	r3, [r7, #24]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0310 	and.w	r3, r3, #16
 80062d0:	2b10      	cmp	r3, #16
 80062d2:	d10a      	bne.n	80062ea <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80062d4:	2300      	movs	r3, #0
 80062d6:	60fb      	str	r3, [r7, #12]
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60fb      	str	r3, [r7, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062ee:	4619      	mov	r1, r3
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff fdd1 	bl	8005e98 <HAL_UARTEx_RxEventCallback>
 80062f6:	e002      	b.n	80062fe <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f7fc fafd 	bl	80028f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	e002      	b.n	8006308 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006302:	2300      	movs	r3, #0
 8006304:	e000      	b.n	8006308 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006306:	2302      	movs	r3, #2
  }
}
 8006308:	4618      	mov	r0, r3
 800630a:	3730      	adds	r7, #48	@ 0x30
 800630c:	46bd      	mov	sp, r7
 800630e:	bd80      	pop	{r7, pc}

08006310 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006310:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006314:	b0c0      	sub	sp, #256	@ 0x100
 8006316:	af00      	add	r7, sp, #0
 8006318:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632c:	68d9      	ldr	r1, [r3, #12]
 800632e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	ea40 0301 	orr.w	r3, r0, r1
 8006338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800633a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800633e:	689a      	ldr	r2, [r3, #8]
 8006340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	431a      	orrs	r2, r3
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	431a      	orrs	r2, r3
 8006350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006354:	69db      	ldr	r3, [r3, #28]
 8006356:	4313      	orrs	r3, r2
 8006358:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800635c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006368:	f021 010c 	bic.w	r1, r1, #12
 800636c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006376:	430b      	orrs	r3, r1
 8006378:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800637a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800638a:	6999      	ldr	r1, [r3, #24]
 800638c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	ea40 0301 	orr.w	r3, r0, r1
 8006396:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	4b8f      	ldr	r3, [pc, #572]	@ (80065dc <UART_SetConfig+0x2cc>)
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d005      	beq.n	80063b0 <UART_SetConfig+0xa0>
 80063a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	4b8d      	ldr	r3, [pc, #564]	@ (80065e0 <UART_SetConfig+0x2d0>)
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d104      	bne.n	80063ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063b0:	f7fd fd20 	bl	8003df4 <HAL_RCC_GetPCLK2Freq>
 80063b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80063b8:	e003      	b.n	80063c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063ba:	f7fd fd07 	bl	8003dcc <HAL_RCC_GetPCLK1Freq>
 80063be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063c6:	69db      	ldr	r3, [r3, #28]
 80063c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063cc:	f040 810c 	bne.w	80065e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063d4:	2200      	movs	r2, #0
 80063d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80063da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80063de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80063e2:	4622      	mov	r2, r4
 80063e4:	462b      	mov	r3, r5
 80063e6:	1891      	adds	r1, r2, r2
 80063e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80063ea:	415b      	adcs	r3, r3
 80063ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80063f2:	4621      	mov	r1, r4
 80063f4:	eb12 0801 	adds.w	r8, r2, r1
 80063f8:	4629      	mov	r1, r5
 80063fa:	eb43 0901 	adc.w	r9, r3, r1
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800640a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800640e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006412:	4690      	mov	r8, r2
 8006414:	4699      	mov	r9, r3
 8006416:	4623      	mov	r3, r4
 8006418:	eb18 0303 	adds.w	r3, r8, r3
 800641c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006420:	462b      	mov	r3, r5
 8006422:	eb49 0303 	adc.w	r3, r9, r3
 8006426:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800642a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006436:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800643a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800643e:	460b      	mov	r3, r1
 8006440:	18db      	adds	r3, r3, r3
 8006442:	653b      	str	r3, [r7, #80]	@ 0x50
 8006444:	4613      	mov	r3, r2
 8006446:	eb42 0303 	adc.w	r3, r2, r3
 800644a:	657b      	str	r3, [r7, #84]	@ 0x54
 800644c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006450:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006454:	f7fa fb1a 	bl	8000a8c <__aeabi_uldivmod>
 8006458:	4602      	mov	r2, r0
 800645a:	460b      	mov	r3, r1
 800645c:	4b61      	ldr	r3, [pc, #388]	@ (80065e4 <UART_SetConfig+0x2d4>)
 800645e:	fba3 2302 	umull	r2, r3, r3, r2
 8006462:	095b      	lsrs	r3, r3, #5
 8006464:	011c      	lsls	r4, r3, #4
 8006466:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800646a:	2200      	movs	r2, #0
 800646c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006470:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006474:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006478:	4642      	mov	r2, r8
 800647a:	464b      	mov	r3, r9
 800647c:	1891      	adds	r1, r2, r2
 800647e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006480:	415b      	adcs	r3, r3
 8006482:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006484:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006488:	4641      	mov	r1, r8
 800648a:	eb12 0a01 	adds.w	sl, r2, r1
 800648e:	4649      	mov	r1, r9
 8006490:	eb43 0b01 	adc.w	fp, r3, r1
 8006494:	f04f 0200 	mov.w	r2, #0
 8006498:	f04f 0300 	mov.w	r3, #0
 800649c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80064a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80064a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064a8:	4692      	mov	sl, r2
 80064aa:	469b      	mov	fp, r3
 80064ac:	4643      	mov	r3, r8
 80064ae:	eb1a 0303 	adds.w	r3, sl, r3
 80064b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80064b6:	464b      	mov	r3, r9
 80064b8:	eb4b 0303 	adc.w	r3, fp, r3
 80064bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80064c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80064d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80064d4:	460b      	mov	r3, r1
 80064d6:	18db      	adds	r3, r3, r3
 80064d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80064da:	4613      	mov	r3, r2
 80064dc:	eb42 0303 	adc.w	r3, r2, r3
 80064e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80064e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80064e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80064ea:	f7fa facf 	bl	8000a8c <__aeabi_uldivmod>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4611      	mov	r1, r2
 80064f4:	4b3b      	ldr	r3, [pc, #236]	@ (80065e4 <UART_SetConfig+0x2d4>)
 80064f6:	fba3 2301 	umull	r2, r3, r3, r1
 80064fa:	095b      	lsrs	r3, r3, #5
 80064fc:	2264      	movs	r2, #100	@ 0x64
 80064fe:	fb02 f303 	mul.w	r3, r2, r3
 8006502:	1acb      	subs	r3, r1, r3
 8006504:	00db      	lsls	r3, r3, #3
 8006506:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800650a:	4b36      	ldr	r3, [pc, #216]	@ (80065e4 <UART_SetConfig+0x2d4>)
 800650c:	fba3 2302 	umull	r2, r3, r3, r2
 8006510:	095b      	lsrs	r3, r3, #5
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006518:	441c      	add	r4, r3
 800651a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800651e:	2200      	movs	r2, #0
 8006520:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006524:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006528:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800652c:	4642      	mov	r2, r8
 800652e:	464b      	mov	r3, r9
 8006530:	1891      	adds	r1, r2, r2
 8006532:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006534:	415b      	adcs	r3, r3
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006538:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800653c:	4641      	mov	r1, r8
 800653e:	1851      	adds	r1, r2, r1
 8006540:	6339      	str	r1, [r7, #48]	@ 0x30
 8006542:	4649      	mov	r1, r9
 8006544:	414b      	adcs	r3, r1
 8006546:	637b      	str	r3, [r7, #52]	@ 0x34
 8006548:	f04f 0200 	mov.w	r2, #0
 800654c:	f04f 0300 	mov.w	r3, #0
 8006550:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006554:	4659      	mov	r1, fp
 8006556:	00cb      	lsls	r3, r1, #3
 8006558:	4651      	mov	r1, sl
 800655a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800655e:	4651      	mov	r1, sl
 8006560:	00ca      	lsls	r2, r1, #3
 8006562:	4610      	mov	r0, r2
 8006564:	4619      	mov	r1, r3
 8006566:	4603      	mov	r3, r0
 8006568:	4642      	mov	r2, r8
 800656a:	189b      	adds	r3, r3, r2
 800656c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006570:	464b      	mov	r3, r9
 8006572:	460a      	mov	r2, r1
 8006574:	eb42 0303 	adc.w	r3, r2, r3
 8006578:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800657c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2200      	movs	r2, #0
 8006584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006588:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800658c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006590:	460b      	mov	r3, r1
 8006592:	18db      	adds	r3, r3, r3
 8006594:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006596:	4613      	mov	r3, r2
 8006598:	eb42 0303 	adc.w	r3, r2, r3
 800659c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800659e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80065a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80065a6:	f7fa fa71 	bl	8000a8c <__aeabi_uldivmod>
 80065aa:	4602      	mov	r2, r0
 80065ac:	460b      	mov	r3, r1
 80065ae:	4b0d      	ldr	r3, [pc, #52]	@ (80065e4 <UART_SetConfig+0x2d4>)
 80065b0:	fba3 1302 	umull	r1, r3, r3, r2
 80065b4:	095b      	lsrs	r3, r3, #5
 80065b6:	2164      	movs	r1, #100	@ 0x64
 80065b8:	fb01 f303 	mul.w	r3, r1, r3
 80065bc:	1ad3      	subs	r3, r2, r3
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	3332      	adds	r3, #50	@ 0x32
 80065c2:	4a08      	ldr	r2, [pc, #32]	@ (80065e4 <UART_SetConfig+0x2d4>)
 80065c4:	fba2 2303 	umull	r2, r3, r2, r3
 80065c8:	095b      	lsrs	r3, r3, #5
 80065ca:	f003 0207 	and.w	r2, r3, #7
 80065ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4422      	add	r2, r4
 80065d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065d8:	e106      	b.n	80067e8 <UART_SetConfig+0x4d8>
 80065da:	bf00      	nop
 80065dc:	40011000 	.word	0x40011000
 80065e0:	40011400 	.word	0x40011400
 80065e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065ec:	2200      	movs	r2, #0
 80065ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80065f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80065f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80065fa:	4642      	mov	r2, r8
 80065fc:	464b      	mov	r3, r9
 80065fe:	1891      	adds	r1, r2, r2
 8006600:	6239      	str	r1, [r7, #32]
 8006602:	415b      	adcs	r3, r3
 8006604:	627b      	str	r3, [r7, #36]	@ 0x24
 8006606:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800660a:	4641      	mov	r1, r8
 800660c:	1854      	adds	r4, r2, r1
 800660e:	4649      	mov	r1, r9
 8006610:	eb43 0501 	adc.w	r5, r3, r1
 8006614:	f04f 0200 	mov.w	r2, #0
 8006618:	f04f 0300 	mov.w	r3, #0
 800661c:	00eb      	lsls	r3, r5, #3
 800661e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006622:	00e2      	lsls	r2, r4, #3
 8006624:	4614      	mov	r4, r2
 8006626:	461d      	mov	r5, r3
 8006628:	4643      	mov	r3, r8
 800662a:	18e3      	adds	r3, r4, r3
 800662c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006630:	464b      	mov	r3, r9
 8006632:	eb45 0303 	adc.w	r3, r5, r3
 8006636:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800663a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006646:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800664a:	f04f 0200 	mov.w	r2, #0
 800664e:	f04f 0300 	mov.w	r3, #0
 8006652:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006656:	4629      	mov	r1, r5
 8006658:	008b      	lsls	r3, r1, #2
 800665a:	4621      	mov	r1, r4
 800665c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006660:	4621      	mov	r1, r4
 8006662:	008a      	lsls	r2, r1, #2
 8006664:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006668:	f7fa fa10 	bl	8000a8c <__aeabi_uldivmod>
 800666c:	4602      	mov	r2, r0
 800666e:	460b      	mov	r3, r1
 8006670:	4b60      	ldr	r3, [pc, #384]	@ (80067f4 <UART_SetConfig+0x4e4>)
 8006672:	fba3 2302 	umull	r2, r3, r3, r2
 8006676:	095b      	lsrs	r3, r3, #5
 8006678:	011c      	lsls	r4, r3, #4
 800667a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800667e:	2200      	movs	r2, #0
 8006680:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006684:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006688:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800668c:	4642      	mov	r2, r8
 800668e:	464b      	mov	r3, r9
 8006690:	1891      	adds	r1, r2, r2
 8006692:	61b9      	str	r1, [r7, #24]
 8006694:	415b      	adcs	r3, r3
 8006696:	61fb      	str	r3, [r7, #28]
 8006698:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800669c:	4641      	mov	r1, r8
 800669e:	1851      	adds	r1, r2, r1
 80066a0:	6139      	str	r1, [r7, #16]
 80066a2:	4649      	mov	r1, r9
 80066a4:	414b      	adcs	r3, r1
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	f04f 0200 	mov.w	r2, #0
 80066ac:	f04f 0300 	mov.w	r3, #0
 80066b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80066b4:	4659      	mov	r1, fp
 80066b6:	00cb      	lsls	r3, r1, #3
 80066b8:	4651      	mov	r1, sl
 80066ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066be:	4651      	mov	r1, sl
 80066c0:	00ca      	lsls	r2, r1, #3
 80066c2:	4610      	mov	r0, r2
 80066c4:	4619      	mov	r1, r3
 80066c6:	4603      	mov	r3, r0
 80066c8:	4642      	mov	r2, r8
 80066ca:	189b      	adds	r3, r3, r2
 80066cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066d0:	464b      	mov	r3, r9
 80066d2:	460a      	mov	r2, r1
 80066d4:	eb42 0303 	adc.w	r3, r2, r3
 80066d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80066dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80066e6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80066f4:	4649      	mov	r1, r9
 80066f6:	008b      	lsls	r3, r1, #2
 80066f8:	4641      	mov	r1, r8
 80066fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066fe:	4641      	mov	r1, r8
 8006700:	008a      	lsls	r2, r1, #2
 8006702:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006706:	f7fa f9c1 	bl	8000a8c <__aeabi_uldivmod>
 800670a:	4602      	mov	r2, r0
 800670c:	460b      	mov	r3, r1
 800670e:	4611      	mov	r1, r2
 8006710:	4b38      	ldr	r3, [pc, #224]	@ (80067f4 <UART_SetConfig+0x4e4>)
 8006712:	fba3 2301 	umull	r2, r3, r3, r1
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	2264      	movs	r2, #100	@ 0x64
 800671a:	fb02 f303 	mul.w	r3, r2, r3
 800671e:	1acb      	subs	r3, r1, r3
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	3332      	adds	r3, #50	@ 0x32
 8006724:	4a33      	ldr	r2, [pc, #204]	@ (80067f4 <UART_SetConfig+0x4e4>)
 8006726:	fba2 2303 	umull	r2, r3, r2, r3
 800672a:	095b      	lsrs	r3, r3, #5
 800672c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006730:	441c      	add	r4, r3
 8006732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006736:	2200      	movs	r2, #0
 8006738:	673b      	str	r3, [r7, #112]	@ 0x70
 800673a:	677a      	str	r2, [r7, #116]	@ 0x74
 800673c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006740:	4642      	mov	r2, r8
 8006742:	464b      	mov	r3, r9
 8006744:	1891      	adds	r1, r2, r2
 8006746:	60b9      	str	r1, [r7, #8]
 8006748:	415b      	adcs	r3, r3
 800674a:	60fb      	str	r3, [r7, #12]
 800674c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006750:	4641      	mov	r1, r8
 8006752:	1851      	adds	r1, r2, r1
 8006754:	6039      	str	r1, [r7, #0]
 8006756:	4649      	mov	r1, r9
 8006758:	414b      	adcs	r3, r1
 800675a:	607b      	str	r3, [r7, #4]
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006768:	4659      	mov	r1, fp
 800676a:	00cb      	lsls	r3, r1, #3
 800676c:	4651      	mov	r1, sl
 800676e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006772:	4651      	mov	r1, sl
 8006774:	00ca      	lsls	r2, r1, #3
 8006776:	4610      	mov	r0, r2
 8006778:	4619      	mov	r1, r3
 800677a:	4603      	mov	r3, r0
 800677c:	4642      	mov	r2, r8
 800677e:	189b      	adds	r3, r3, r2
 8006780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006782:	464b      	mov	r3, r9
 8006784:	460a      	mov	r2, r1
 8006786:	eb42 0303 	adc.w	r3, r2, r3
 800678a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800678c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	663b      	str	r3, [r7, #96]	@ 0x60
 8006796:	667a      	str	r2, [r7, #100]	@ 0x64
 8006798:	f04f 0200 	mov.w	r2, #0
 800679c:	f04f 0300 	mov.w	r3, #0
 80067a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80067a4:	4649      	mov	r1, r9
 80067a6:	008b      	lsls	r3, r1, #2
 80067a8:	4641      	mov	r1, r8
 80067aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80067ae:	4641      	mov	r1, r8
 80067b0:	008a      	lsls	r2, r1, #2
 80067b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80067b6:	f7fa f969 	bl	8000a8c <__aeabi_uldivmod>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	4b0d      	ldr	r3, [pc, #52]	@ (80067f4 <UART_SetConfig+0x4e4>)
 80067c0:	fba3 1302 	umull	r1, r3, r3, r2
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	2164      	movs	r1, #100	@ 0x64
 80067c8:	fb01 f303 	mul.w	r3, r1, r3
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	3332      	adds	r3, #50	@ 0x32
 80067d2:	4a08      	ldr	r2, [pc, #32]	@ (80067f4 <UART_SetConfig+0x4e4>)
 80067d4:	fba2 2303 	umull	r2, r3, r2, r3
 80067d8:	095b      	lsrs	r3, r3, #5
 80067da:	f003 020f 	and.w	r2, r3, #15
 80067de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4422      	add	r2, r4
 80067e6:	609a      	str	r2, [r3, #8]
}
 80067e8:	bf00      	nop
 80067ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80067ee:	46bd      	mov	sp, r7
 80067f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067f4:	51eb851f 	.word	0x51eb851f

080067f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f103 0208 	add.w	r2, r3, #8
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006810:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f103 0208 	add.w	r2, r3, #8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f103 0208 	add.w	r2, r3, #8
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800682c:	bf00      	nop
 800682e:	370c      	adds	r7, #12
 8006830:	46bd      	mov	sp, r7
 8006832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006836:	4770      	bx	lr

08006838 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2200      	movs	r2, #0
 8006844:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006846:	bf00      	nop
 8006848:	370c      	adds	r7, #12
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr

08006852 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8006852:	b480      	push	{r7}
 8006854:	b085      	sub	sp, #20
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
 800685a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	68fa      	ldr	r2, [r7, #12]
 8006866:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	689a      	ldr	r2, [r3, #8]
 800686c:	683b      	ldr	r3, [r7, #0]
 800686e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	683a      	ldr	r2, [r7, #0]
 8006876:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	683a      	ldr	r2, [r7, #0]
 800687c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	601a      	str	r2, [r3, #0]
}
 800688e:	bf00      	nop
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800689a:	b480      	push	{r7}
 800689c:	b085      	sub	sp, #20
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068b0:	d103      	bne.n	80068ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	60fb      	str	r3, [r7, #12]
 80068b8:	e00c      	b.n	80068d4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	3308      	adds	r3, #8
 80068be:	60fb      	str	r3, [r7, #12]
 80068c0:	e002      	b.n	80068c8 <vListInsert+0x2e>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	60fb      	str	r3, [r7, #12]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d2f6      	bcs.n	80068c2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80068e4:	683b      	ldr	r3, [r7, #0]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	683a      	ldr	r2, [r7, #0]
 80068ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	1c5a      	adds	r2, r3, #1
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	601a      	str	r2, [r3, #0]
}
 8006900:	bf00      	nop
 8006902:	3714      	adds	r7, #20
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	6892      	ldr	r2, [r2, #8]
 8006922:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	6852      	ldr	r2, [r2, #4]
 800692c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d103      	bne.n	8006940 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	689a      	ldr	r2, [r3, #8]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	1e5a      	subs	r2, r3, #1
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10b      	bne.n	800698c <xQueueGenericReset+0x2c>
        __asm volatile
 8006974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006978:	f383 8811 	msr	BASEPRI, r3
 800697c:	f3bf 8f6f 	isb	sy
 8006980:	f3bf 8f4f 	dsb	sy
 8006984:	60bb      	str	r3, [r7, #8]
    }
 8006986:	bf00      	nop
 8006988:	bf00      	nop
 800698a:	e7fd      	b.n	8006988 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800698c:	f002 fb46 	bl	800901c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006998:	68f9      	ldr	r1, [r7, #12]
 800699a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800699c:	fb01 f303 	mul.w	r3, r1, r3
 80069a0:	441a      	add	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2200      	movs	r2, #0
 80069aa:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069bc:	3b01      	subs	r3, #1
 80069be:	68f9      	ldr	r1, [r7, #12]
 80069c0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80069c2:	fb01 f303 	mul.w	r3, r1, r3
 80069c6:	441a      	add	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	22ff      	movs	r2, #255	@ 0xff
 80069d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	22ff      	movs	r2, #255	@ 0xff
 80069d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d114      	bne.n	8006a0c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d01a      	beq.n	8006a20 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3310      	adds	r3, #16
 80069ee:	4618      	mov	r0, r3
 80069f0:	f001 f93a 	bl	8007c68 <xTaskRemoveFromEventList>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d012      	beq.n	8006a20 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 80069fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006a30 <xQueueGenericReset+0xd0>)
 80069fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a00:	601a      	str	r2, [r3, #0]
 8006a02:	f3bf 8f4f 	dsb	sy
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	e009      	b.n	8006a20 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	3310      	adds	r3, #16
 8006a10:	4618      	mov	r0, r3
 8006a12:	f7ff fef1 	bl	80067f8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	3324      	adds	r3, #36	@ 0x24
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff feec 	bl	80067f8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8006a20:	f002 fb2e 	bl	8009080 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8006a24:	2301      	movs	r3, #1
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	e000ed04 	.word	0xe000ed04

08006a34 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b08c      	sub	sp, #48	@ 0x30
 8006a38:	af02      	add	r7, sp, #8
 8006a3a:	60f8      	str	r0, [r7, #12]
 8006a3c:	60b9      	str	r1, [r7, #8]
 8006a3e:	4613      	mov	r3, r2
 8006a40:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <xQueueGenericCreate+0x2c>
        __asm volatile
 8006a48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4c:	f383 8811 	msr	BASEPRI, r3
 8006a50:	f3bf 8f6f 	isb	sy
 8006a54:	f3bf 8f4f 	dsb	sy
 8006a58:	61bb      	str	r3, [r7, #24]
    }
 8006a5a:	bf00      	nop
 8006a5c:	bf00      	nop
 8006a5e:	e7fd      	b.n	8006a5c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	fb02 f303 	mul.w	r3, r2, r3
 8006a68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d006      	beq.n	8006a7e <xQueueGenericCreate+0x4a>
 8006a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d101      	bne.n	8006a82 <xQueueGenericCreate+0x4e>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e000      	b.n	8006a84 <xQueueGenericCreate+0x50>
 8006a82:	2300      	movs	r3, #0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10b      	bne.n	8006aa0 <xQueueGenericCreate+0x6c>
        __asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	617b      	str	r3, [r7, #20]
    }
 8006a9a:	bf00      	nop
 8006a9c:	bf00      	nop
 8006a9e:	e7fd      	b.n	8006a9c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8006aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aa2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8006aa6:	d90b      	bls.n	8006ac0 <xQueueGenericCreate+0x8c>
        __asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	613b      	str	r3, [r7, #16]
    }
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	3350      	adds	r3, #80	@ 0x50
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f002 fbd3 	bl	8009270 <pvPortMalloc>
 8006aca:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8006acc:	6a3b      	ldr	r3, [r7, #32]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00d      	beq.n	8006aee <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006ad2:	6a3b      	ldr	r3, [r7, #32]
 8006ad4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3350      	adds	r3, #80	@ 0x50
 8006ada:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006adc:	79fa      	ldrb	r2, [r7, #7]
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	9300      	str	r3, [sp, #0]
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	69fa      	ldr	r2, [r7, #28]
 8006ae6:	68b9      	ldr	r1, [r7, #8]
 8006ae8:	68f8      	ldr	r0, [r7, #12]
 8006aea:	f000 f805 	bl	8006af8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8006aee:	6a3b      	ldr	r3, [r7, #32]
    }
 8006af0:	4618      	mov	r0, r3
 8006af2:	3728      	adds	r7, #40	@ 0x28
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	60f8      	str	r0, [r7, #12]
 8006b00:	60b9      	str	r1, [r7, #8]
 8006b02:	607a      	str	r2, [r7, #4]
 8006b04:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d103      	bne.n	8006b14 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	69ba      	ldr	r2, [r7, #24]
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	e002      	b.n	8006b1a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	687a      	ldr	r2, [r7, #4]
 8006b18:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8006b1a:	69bb      	ldr	r3, [r7, #24]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	68ba      	ldr	r2, [r7, #8]
 8006b24:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006b26:	2101      	movs	r1, #1
 8006b28:	69b8      	ldr	r0, [r7, #24]
 8006b2a:	f7ff ff19 	bl	8006960 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8006b2e:	69bb      	ldr	r3, [r7, #24]
 8006b30:	78fa      	ldrb	r2, [r7, #3]
 8006b32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
	...

08006b40 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08e      	sub	sp, #56	@ 0x38
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
 8006b4c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d10b      	bne.n	8006b74 <xQueueGenericSend+0x34>
        __asm volatile
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006b6e:	bf00      	nop
 8006b70:	bf00      	nop
 8006b72:	e7fd      	b.n	8006b70 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d103      	bne.n	8006b82 <xQueueGenericSend+0x42>
 8006b7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d101      	bne.n	8006b86 <xQueueGenericSend+0x46>
 8006b82:	2301      	movs	r3, #1
 8006b84:	e000      	b.n	8006b88 <xQueueGenericSend+0x48>
 8006b86:	2300      	movs	r3, #0
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d10b      	bne.n	8006ba4 <xQueueGenericSend+0x64>
        __asm volatile
 8006b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b90:	f383 8811 	msr	BASEPRI, r3
 8006b94:	f3bf 8f6f 	isb	sy
 8006b98:	f3bf 8f4f 	dsb	sy
 8006b9c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006b9e:	bf00      	nop
 8006ba0:	bf00      	nop
 8006ba2:	e7fd      	b.n	8006ba0 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d103      	bne.n	8006bb2 <xQueueGenericSend+0x72>
 8006baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d101      	bne.n	8006bb6 <xQueueGenericSend+0x76>
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e000      	b.n	8006bb8 <xQueueGenericSend+0x78>
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d10b      	bne.n	8006bd4 <xQueueGenericSend+0x94>
        __asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	623b      	str	r3, [r7, #32]
    }
 8006bce:	bf00      	nop
 8006bd0:	bf00      	nop
 8006bd2:	e7fd      	b.n	8006bd0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006bd4:	f001 f9e8 	bl	8007fa8 <xTaskGetSchedulerState>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d102      	bne.n	8006be4 <xQueueGenericSend+0xa4>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <xQueueGenericSend+0xa8>
 8006be4:	2301      	movs	r3, #1
 8006be6:	e000      	b.n	8006bea <xQueueGenericSend+0xaa>
 8006be8:	2300      	movs	r3, #0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <xQueueGenericSend+0xc6>
        __asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	61fb      	str	r3, [r7, #28]
    }
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006c06:	f002 fa09 	bl	800901c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d302      	bcc.n	8006c1c <xQueueGenericSend+0xdc>
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	2b02      	cmp	r3, #2
 8006c1a:	d129      	bne.n	8006c70 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006c1c:	683a      	ldr	r2, [r7, #0]
 8006c1e:	68b9      	ldr	r1, [r7, #8]
 8006c20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006c22:	f000 fad0 	bl	80071c6 <prvCopyDataToQueue>
 8006c26:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d010      	beq.n	8006c52 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c32:	3324      	adds	r3, #36	@ 0x24
 8006c34:	4618      	mov	r0, r3
 8006c36:	f001 f817 	bl	8007c68 <xTaskRemoveFromEventList>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d013      	beq.n	8006c68 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8006c40:	4b3f      	ldr	r3, [pc, #252]	@ (8006d40 <xQueueGenericSend+0x200>)
 8006c42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	f3bf 8f6f 	isb	sy
 8006c50:	e00a      	b.n	8006c68 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8006c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d007      	beq.n	8006c68 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8006c58:	4b39      	ldr	r3, [pc, #228]	@ (8006d40 <xQueueGenericSend+0x200>)
 8006c5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c5e:	601a      	str	r2, [r3, #0]
 8006c60:	f3bf 8f4f 	dsb	sy
 8006c64:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8006c68:	f002 fa0a 	bl	8009080 <vPortExitCritical>
                return pdPASS;
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e063      	b.n	8006d38 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d103      	bne.n	8006c7e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006c76:	f002 fa03 	bl	8009080 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	e05c      	b.n	8006d38 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d106      	bne.n	8006c92 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006c84:	f107 0314 	add.w	r3, r7, #20
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f001 f851 	bl	8007d30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006c92:	f002 f9f5 	bl	8009080 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006c96:	f000 fdc3 	bl	8007820 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006c9a:	f002 f9bf 	bl	800901c <vPortEnterCritical>
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ca0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006ca4:	b25b      	sxtb	r3, r3
 8006ca6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006caa:	d103      	bne.n	8006cb4 <xQueueGenericSend+0x174>
 8006cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cba:	b25b      	sxtb	r3, r3
 8006cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cc0:	d103      	bne.n	8006cca <xQueueGenericSend+0x18a>
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cca:	f002 f9d9 	bl	8009080 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006cce:	1d3a      	adds	r2, r7, #4
 8006cd0:	f107 0314 	add.w	r3, r7, #20
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f001 f840 	bl	8007d5c <xTaskCheckForTimeOut>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d124      	bne.n	8006d2c <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006ce2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006ce4:	f000 fb67 	bl	80073b6 <prvIsQueueFull>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d018      	beq.n	8006d20 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cf0:	3310      	adds	r3, #16
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	4611      	mov	r1, r2
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f000 ff64 	bl	8007bc4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8006cfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006cfe:	f000 faf2 	bl	80072e6 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8006d02:	f000 fd9b 	bl	800783c <xTaskResumeAll>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	f47f af7c 	bne.w	8006c06 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8006d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8006d40 <xQueueGenericSend+0x200>)
 8006d10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	f3bf 8f4f 	dsb	sy
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	e772      	b.n	8006c06 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8006d20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d22:	f000 fae0 	bl	80072e6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8006d26:	f000 fd89 	bl	800783c <xTaskResumeAll>
 8006d2a:	e76c      	b.n	8006c06 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8006d2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006d2e:	f000 fada 	bl	80072e6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8006d32:	f000 fd83 	bl	800783c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8006d36:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3738      	adds	r7, #56	@ 0x38
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}
 8006d40:	e000ed04 	.word	0xe000ed04

08006d44 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b090      	sub	sp, #64	@ 0x40
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8006d56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8006d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d60:	f383 8811 	msr	BASEPRI, r3
 8006d64:	f3bf 8f6f 	isb	sy
 8006d68:	f3bf 8f4f 	dsb	sy
 8006d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006d6e:	bf00      	nop
 8006d70:	bf00      	nop
 8006d72:	e7fd      	b.n	8006d70 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d103      	bne.n	8006d82 <xQueueGenericSendFromISR+0x3e>
 8006d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <xQueueGenericSendFromISR+0x42>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e000      	b.n	8006d88 <xQueueGenericSendFromISR+0x44>
 8006d86:	2300      	movs	r3, #0
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10b      	bne.n	8006da4 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8006d9e:	bf00      	nop
 8006da0:	bf00      	nop
 8006da2:	e7fd      	b.n	8006da0 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d103      	bne.n	8006db2 <xQueueGenericSendFromISR+0x6e>
 8006daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d101      	bne.n	8006db6 <xQueueGenericSendFromISR+0x72>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e000      	b.n	8006db8 <xQueueGenericSendFromISR+0x74>
 8006db6:	2300      	movs	r3, #0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10b      	bne.n	8006dd4 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8006dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc0:	f383 8811 	msr	BASEPRI, r3
 8006dc4:	f3bf 8f6f 	isb	sy
 8006dc8:	f3bf 8f4f 	dsb	sy
 8006dcc:	623b      	str	r3, [r7, #32]
    }
 8006dce:	bf00      	nop
 8006dd0:	bf00      	nop
 8006dd2:	e7fd      	b.n	8006dd0 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006dd4:	f002 fa0a 	bl	80091ec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8006dd8:	f3ef 8211 	mrs	r2, BASEPRI
 8006ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de0:	f383 8811 	msr	BASEPRI, r3
 8006de4:	f3bf 8f6f 	isb	sy
 8006de8:	f3bf 8f4f 	dsb	sy
 8006dec:	61fa      	str	r2, [r7, #28]
 8006dee:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8006df0:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006df2:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006df4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d302      	bcc.n	8006e06 <xQueueGenericSendFromISR+0xc2>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d13f      	bne.n	8006e86 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8006e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006e16:	683a      	ldr	r2, [r7, #0]
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006e1c:	f000 f9d3 	bl	80071c6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8006e20:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006e24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e28:	d112      	bne.n	8006e50 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d026      	beq.n	8006e80 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e34:	3324      	adds	r3, #36	@ 0x24
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 ff16 	bl	8007c68 <xTaskRemoveFromEventList>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d01e      	beq.n	8006e80 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01b      	beq.n	8006e80 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	601a      	str	r2, [r3, #0]
 8006e4e:	e017      	b.n	8006e80 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8006e50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006e54:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e56:	d10b      	bne.n	8006e70 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8006e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5c:	f383 8811 	msr	BASEPRI, r3
 8006e60:	f3bf 8f6f 	isb	sy
 8006e64:	f3bf 8f4f 	dsb	sy
 8006e68:	617b      	str	r3, [r7, #20]
    }
 8006e6a:	bf00      	nop
 8006e6c:	bf00      	nop
 8006e6e:	e7fd      	b.n	8006e6c <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006e70:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006e74:	3301      	adds	r3, #1
 8006e76:	b2db      	uxtb	r3, r3
 8006e78:	b25a      	sxtb	r2, r3
 8006e7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8006e80:	2301      	movs	r3, #1
 8006e82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8006e84:	e001      	b.n	8006e8a <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8006e86:	2300      	movs	r3, #0
 8006e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e8c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8006e94:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8006e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3740      	adds	r7, #64	@ 0x40
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08c      	sub	sp, #48	@ 0x30
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8006eac:	2300      	movs	r3, #0
 8006eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8006eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <xQueueReceive+0x32>
        __asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	623b      	str	r3, [r7, #32]
    }
 8006ecc:	bf00      	nop
 8006ece:	bf00      	nop
 8006ed0:	e7fd      	b.n	8006ece <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d103      	bne.n	8006ee0 <xQueueReceive+0x40>
 8006ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <xQueueReceive+0x44>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e000      	b.n	8006ee6 <xQueueReceive+0x46>
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d10b      	bne.n	8006f02 <xQueueReceive+0x62>
        __asm volatile
 8006eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eee:	f383 8811 	msr	BASEPRI, r3
 8006ef2:	f3bf 8f6f 	isb	sy
 8006ef6:	f3bf 8f4f 	dsb	sy
 8006efa:	61fb      	str	r3, [r7, #28]
    }
 8006efc:	bf00      	nop
 8006efe:	bf00      	nop
 8006f00:	e7fd      	b.n	8006efe <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f02:	f001 f851 	bl	8007fa8 <xTaskGetSchedulerState>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d102      	bne.n	8006f12 <xQueueReceive+0x72>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d101      	bne.n	8006f16 <xQueueReceive+0x76>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e000      	b.n	8006f18 <xQueueReceive+0x78>
 8006f16:	2300      	movs	r3, #0
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d10b      	bne.n	8006f34 <xQueueReceive+0x94>
        __asm volatile
 8006f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f20:	f383 8811 	msr	BASEPRI, r3
 8006f24:	f3bf 8f6f 	isb	sy
 8006f28:	f3bf 8f4f 	dsb	sy
 8006f2c:	61bb      	str	r3, [r7, #24]
    }
 8006f2e:	bf00      	nop
 8006f30:	bf00      	nop
 8006f32:	e7fd      	b.n	8006f30 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8006f34:	f002 f872 	bl	800901c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f3c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d01f      	beq.n	8006f84 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006f44:	68b9      	ldr	r1, [r7, #8]
 8006f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f48:	f000 f9a7 	bl	800729a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	1e5a      	subs	r2, r3, #1
 8006f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f52:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d00f      	beq.n	8006f7c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f5e:	3310      	adds	r3, #16
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 fe81 	bl	8007c68 <xTaskRemoveFromEventList>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d007      	beq.n	8006f7c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8006f6c:	4b3c      	ldr	r3, [pc, #240]	@ (8007060 <xQueueReceive+0x1c0>)
 8006f6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f72:	601a      	str	r2, [r3, #0]
 8006f74:	f3bf 8f4f 	dsb	sy
 8006f78:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8006f7c:	f002 f880 	bl	8009080 <vPortExitCritical>
                return pdPASS;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e069      	b.n	8007058 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d103      	bne.n	8006f92 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8006f8a:	f002 f879 	bl	8009080 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e062      	b.n	8007058 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8006f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d106      	bne.n	8006fa6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8006f98:	f107 0310 	add.w	r3, r7, #16
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	f000 fec7 	bl	8007d30 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8006fa6:	f002 f86b 	bl	8009080 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8006faa:	f000 fc39 	bl	8007820 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8006fae:	f002 f835 	bl	800901c <vPortEnterCritical>
 8006fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006fb8:	b25b      	sxtb	r3, r3
 8006fba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fbe:	d103      	bne.n	8006fc8 <xQueueReceive+0x128>
 8006fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006fce:	b25b      	sxtb	r3, r3
 8006fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006fd4:	d103      	bne.n	8006fde <xQueueReceive+0x13e>
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	2200      	movs	r2, #0
 8006fda:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006fde:	f002 f84f 	bl	8009080 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006fe2:	1d3a      	adds	r2, r7, #4
 8006fe4:	f107 0310 	add.w	r3, r7, #16
 8006fe8:	4611      	mov	r1, r2
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 feb6 	bl	8007d5c <xTaskCheckForTimeOut>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d123      	bne.n	800703e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ff8:	f000 f9c7 	bl	800738a <prvIsQueueEmpty>
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d017      	beq.n	8007032 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	3324      	adds	r3, #36	@ 0x24
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	4611      	mov	r1, r2
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fdda 	bl	8007bc4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007010:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007012:	f000 f968 	bl	80072e6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8007016:	f000 fc11 	bl	800783c <xTaskResumeAll>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d189      	bne.n	8006f34 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8007020:	4b0f      	ldr	r3, [pc, #60]	@ (8007060 <xQueueReceive+0x1c0>)
 8007022:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007026:	601a      	str	r2, [r3, #0]
 8007028:	f3bf 8f4f 	dsb	sy
 800702c:	f3bf 8f6f 	isb	sy
 8007030:	e780      	b.n	8006f34 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8007032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007034:	f000 f957 	bl	80072e6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007038:	f000 fc00 	bl	800783c <xTaskResumeAll>
 800703c:	e77a      	b.n	8006f34 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800703e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007040:	f000 f951 	bl	80072e6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8007044:	f000 fbfa 	bl	800783c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800704a:	f000 f99e 	bl	800738a <prvIsQueueEmpty>
 800704e:	4603      	mov	r3, r0
 8007050:	2b00      	cmp	r3, #0
 8007052:	f43f af6f 	beq.w	8006f34 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8007056:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8007058:	4618      	mov	r0, r3
 800705a:	3730      	adds	r7, #48	@ 0x30
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b090      	sub	sp, #64	@ 0x40
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	60b9      	str	r1, [r7, #8]
 800706e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8007074:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10b      	bne.n	8007092 <xQueueReceiveFromISR+0x2e>
        __asm volatile
 800707a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707e:	f383 8811 	msr	BASEPRI, r3
 8007082:	f3bf 8f6f 	isb	sy
 8007086:	f3bf 8f4f 	dsb	sy
 800708a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800708c:	bf00      	nop
 800708e:	bf00      	nop
 8007090:	e7fd      	b.n	800708e <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d103      	bne.n	80070a0 <xQueueReceiveFromISR+0x3c>
 8007098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800709a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <xQueueReceiveFromISR+0x40>
 80070a0:	2301      	movs	r3, #1
 80070a2:	e000      	b.n	80070a6 <xQueueReceiveFromISR+0x42>
 80070a4:	2300      	movs	r3, #0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d10b      	bne.n	80070c2 <xQueueReceiveFromISR+0x5e>
        __asm volatile
 80070aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80070bc:	bf00      	nop
 80070be:	bf00      	nop
 80070c0:	e7fd      	b.n	80070be <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80070c2:	f002 f893 	bl	80091ec <vPortValidateInterruptPriority>
        __asm volatile
 80070c6:	f3ef 8211 	mrs	r2, BASEPRI
 80070ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ce:	f383 8811 	msr	BASEPRI, r3
 80070d2:	f3bf 8f6f 	isb	sy
 80070d6:	f3bf 8f4f 	dsb	sy
 80070da:	623a      	str	r2, [r7, #32]
 80070dc:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80070de:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80070e0:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80070e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e6:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80070e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d03f      	beq.n	800716e <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80070ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80070f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80070f8:	68b9      	ldr	r1, [r7, #8]
 80070fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070fc:	f000 f8cd 	bl	800729a <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	1e5a      	subs	r2, r3, #1
 8007104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007106:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8007108:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007110:	d112      	bne.n	8007138 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d026      	beq.n	8007168 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711c:	3310      	adds	r3, #16
 800711e:	4618      	mov	r0, r3
 8007120:	f000 fda2 	bl	8007c68 <xTaskRemoveFromEventList>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d01e      	beq.n	8007168 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d01b      	beq.n	8007168 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]
 8007136:	e017      	b.n	8007168 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8007138:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800713c:	2b7f      	cmp	r3, #127	@ 0x7f
 800713e:	d10b      	bne.n	8007158 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 8007140:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007144:	f383 8811 	msr	BASEPRI, r3
 8007148:	f3bf 8f6f 	isb	sy
 800714c:	f3bf 8f4f 	dsb	sy
 8007150:	61bb      	str	r3, [r7, #24]
    }
 8007152:	bf00      	nop
 8007154:	bf00      	nop
 8007156:	e7fd      	b.n	8007154 <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007158:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800715c:	3301      	adds	r3, #1
 800715e:	b2db      	uxtb	r3, r3
 8007160:	b25a      	sxtb	r2, r3
 8007162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007164:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8007168:	2301      	movs	r3, #1
 800716a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800716c:	e001      	b.n	8007172 <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 800716e:	2300      	movs	r3, #0
 8007170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007174:	617b      	str	r3, [r7, #20]
        __asm volatile
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f383 8811 	msr	BASEPRI, r3
    }
 800717c:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800717e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007180:	4618      	mov	r0, r3
 8007182:	3740      	adds	r7, #64	@ 0x40
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d10b      	bne.n	80071ae <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8007196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800719a:	f383 8811 	msr	BASEPRI, r3
 800719e:	f3bf 8f6f 	isb	sy
 80071a2:	f3bf 8f4f 	dsb	sy
 80071a6:	60bb      	str	r3, [r7, #8]
    }
 80071a8:	bf00      	nop
 80071aa:	bf00      	nop
 80071ac:	e7fd      	b.n	80071aa <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 80071ae:	f001 ff35 	bl	800901c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071b6:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80071b8:	f001 ff62 	bl	8009080 <vPortExitCritical>

    return uxReturn;
 80071bc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}

080071c6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b086      	sub	sp, #24
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	60f8      	str	r0, [r7, #12]
 80071ce:	60b9      	str	r1, [r7, #8]
 80071d0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071da:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d10d      	bne.n	8007200 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d14d      	bne.n	8007288 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 fef7 	bl	8007fe4 <xTaskPriorityDisinherit>
 80071f6:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	609a      	str	r2, [r3, #8]
 80071fe:	e043      	b.n	8007288 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d119      	bne.n	800723a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6858      	ldr	r0, [r3, #4]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800720e:	461a      	mov	r2, r3
 8007210:	68b9      	ldr	r1, [r7, #8]
 8007212:	f002 fa83 	bl	800971c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800721e:	441a      	add	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	685a      	ldr	r2, [r3, #4]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	429a      	cmp	r2, r3
 800722e:	d32b      	bcc.n	8007288 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	605a      	str	r2, [r3, #4]
 8007238:	e026      	b.n	8007288 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	68d8      	ldr	r0, [r3, #12]
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007242:	461a      	mov	r2, r3
 8007244:	68b9      	ldr	r1, [r7, #8]
 8007246:	f002 fa69 	bl	800971c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	68da      	ldr	r2, [r3, #12]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007252:	425b      	negs	r3, r3
 8007254:	441a      	add	r2, r3
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	429a      	cmp	r2, r3
 8007264:	d207      	bcs.n	8007276 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	689a      	ldr	r2, [r3, #8]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800726e:	425b      	negs	r3, r3
 8007270:	441a      	add	r2, r3
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2b02      	cmp	r3, #2
 800727a:	d105      	bne.n	8007288 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d002      	beq.n	8007288 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	3b01      	subs	r3, #1
 8007286:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	1c5a      	adds	r2, r3, #1
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8007290:	697b      	ldr	r3, [r7, #20]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3718      	adds	r7, #24
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}

0800729a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800729a:	b580      	push	{r7, lr}
 800729c:	b082      	sub	sp, #8
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d018      	beq.n	80072de <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072b4:	441a      	add	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68da      	ldr	r2, [r3, #12]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	689b      	ldr	r3, [r3, #8]
 80072c2:	429a      	cmp	r2, r3
 80072c4:	d303      	bcc.n	80072ce <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681a      	ldr	r2, [r3, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	68d9      	ldr	r1, [r3, #12]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d6:	461a      	mov	r2, r3
 80072d8:	6838      	ldr	r0, [r7, #0]
 80072da:	f002 fa1f 	bl	800971c <memcpy>
    }
}
 80072de:	bf00      	nop
 80072e0:	3708      	adds	r7, #8
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80072ee:	f001 fe95 	bl	800901c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80072f8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80072fa:	e011      	b.n	8007320 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	d012      	beq.n	800732a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	3324      	adds	r3, #36	@ 0x24
 8007308:	4618      	mov	r0, r3
 800730a:	f000 fcad 	bl	8007c68 <xTaskRemoveFromEventList>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8007314:	f000 fd8a 	bl	8007e2c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	3b01      	subs	r3, #1
 800731c:	b2db      	uxtb	r3, r3
 800731e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8007320:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007324:	2b00      	cmp	r3, #0
 8007326:	dce9      	bgt.n	80072fc <prvUnlockQueue+0x16>
 8007328:	e000      	b.n	800732c <prvUnlockQueue+0x46>
                        break;
 800732a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	22ff      	movs	r2, #255	@ 0xff
 8007330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8007334:	f001 fea4 	bl	8009080 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8007338:	f001 fe70 	bl	800901c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007342:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007344:	e011      	b.n	800736a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	691b      	ldr	r3, [r3, #16]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d012      	beq.n	8007374 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	3310      	adds	r3, #16
 8007352:	4618      	mov	r0, r3
 8007354:	f000 fc88 	bl	8007c68 <xTaskRemoveFromEventList>
 8007358:	4603      	mov	r3, r0
 800735a:	2b00      	cmp	r3, #0
 800735c:	d001      	beq.n	8007362 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800735e:	f000 fd65 	bl	8007e2c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8007362:	7bbb      	ldrb	r3, [r7, #14]
 8007364:	3b01      	subs	r3, #1
 8007366:	b2db      	uxtb	r3, r3
 8007368:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800736a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800736e:	2b00      	cmp	r3, #0
 8007370:	dce9      	bgt.n	8007346 <prvUnlockQueue+0x60>
 8007372:	e000      	b.n	8007376 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8007374:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	22ff      	movs	r2, #255	@ 0xff
 800737a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800737e:	f001 fe7f 	bl	8009080 <vPortExitCritical>
}
 8007382:	bf00      	nop
 8007384:	3710      	adds	r7, #16
 8007386:	46bd      	mov	sp, r7
 8007388:	bd80      	pop	{r7, pc}

0800738a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800738a:	b580      	push	{r7, lr}
 800738c:	b084      	sub	sp, #16
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007392:	f001 fe43 	bl	800901c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800739a:	2b00      	cmp	r3, #0
 800739c:	d102      	bne.n	80073a4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800739e:	2301      	movs	r3, #1
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e001      	b.n	80073a8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80073a8:	f001 fe6a 	bl	8009080 <vPortExitCritical>

    return xReturn;
 80073ac:	68fb      	ldr	r3, [r7, #12]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b084      	sub	sp, #16
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80073be:	f001 fe2d 	bl	800901c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d102      	bne.n	80073d4 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80073ce:	2301      	movs	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
 80073d2:	e001      	b.n	80073d8 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80073d8:	f001 fe52 	bl	8009080 <vPortExitCritical>

    return xReturn;
 80073dc:	68fb      	ldr	r3, [r7, #12]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 80073e6:	b480      	push	{r7}
 80073e8:	b087      	sub	sp, #28
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d10b      	bne.n	8007410 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 80073f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073fc:	f383 8811 	msr	BASEPRI, r3
 8007400:	f3bf 8f6f 	isb	sy
 8007404:	f3bf 8f4f 	dsb	sy
 8007408:	60fb      	str	r3, [r7, #12]
    }
 800740a:	bf00      	nop
 800740c:	bf00      	nop
 800740e:	e7fd      	b.n	800740c <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007418:	429a      	cmp	r2, r3
 800741a:	d102      	bne.n	8007422 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 800741c:	2301      	movs	r3, #1
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	e001      	b.n	8007426 <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8007422:	2300      	movs	r3, #0
 8007424:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007426:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007428:	4618      	mov	r0, r3
 800742a:	371c      	adds	r7, #28
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e014      	b.n	800746e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007444:	4a0f      	ldr	r2, [pc, #60]	@ (8007484 <vQueueAddToRegistry+0x50>)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10b      	bne.n	8007468 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007450:	490c      	ldr	r1, [pc, #48]	@ (8007484 <vQueueAddToRegistry+0x50>)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	683a      	ldr	r2, [r7, #0]
 8007456:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800745a:	4a0a      	ldr	r2, [pc, #40]	@ (8007484 <vQueueAddToRegistry+0x50>)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	00db      	lsls	r3, r3, #3
 8007460:	4413      	add	r3, r2
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8007466:	e006      	b.n	8007476 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	3301      	adds	r3, #1
 800746c:	60fb      	str	r3, [r7, #12]
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2b07      	cmp	r3, #7
 8007472:	d9e7      	bls.n	8007444 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8007474:	bf00      	nop
 8007476:	bf00      	nop
 8007478:	3714      	adds	r7, #20
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	200002ec 	.word	0x200002ec

08007488 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8007498:	f001 fdc0 	bl	800901c <vPortEnterCritical>
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80074a2:	b25b      	sxtb	r3, r3
 80074a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074a8:	d103      	bne.n	80074b2 <vQueueWaitForMessageRestricted+0x2a>
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80074b8:	b25b      	sxtb	r3, r3
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074be:	d103      	bne.n	80074c8 <vQueueWaitForMessageRestricted+0x40>
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074c8:	f001 fdda 	bl	8009080 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d106      	bne.n	80074e2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	3324      	adds	r3, #36	@ 0x24
 80074d8:	687a      	ldr	r2, [r7, #4]
 80074da:	68b9      	ldr	r1, [r7, #8]
 80074dc:	4618      	mov	r0, r3
 80074de:	f000 fb97 	bl	8007c10 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80074e2:	6978      	ldr	r0, [r7, #20]
 80074e4:	f7ff feff 	bl	80072e6 <prvUnlockQueue>
    }
 80074e8:	bf00      	nop
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08c      	sub	sp, #48	@ 0x30
 80074f4:	af04      	add	r7, sp, #16
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	4613      	mov	r3, r2
 80074fe:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007500:	88fb      	ldrh	r3, [r7, #6]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4618      	mov	r0, r3
 8007506:	f001 feb3 	bl	8009270 <pvPortMalloc>
 800750a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00e      	beq.n	8007530 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007512:	2058      	movs	r0, #88	@ 0x58
 8007514:	f001 feac 	bl	8009270 <pvPortMalloc>
 8007518:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d003      	beq.n	8007528 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	631a      	str	r2, [r3, #48]	@ 0x30
 8007526:	e005      	b.n	8007534 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8007528:	6978      	ldr	r0, [r7, #20]
 800752a:	f001 ff83 	bl	8009434 <vPortFree>
 800752e:	e001      	b.n	8007534 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8007530:	2300      	movs	r3, #0
 8007532:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d013      	beq.n	8007562 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	2300      	movs	r3, #0
 800753e:	9303      	str	r3, [sp, #12]
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	9302      	str	r3, [sp, #8]
 8007544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007546:	9301      	str	r3, [sp, #4]
 8007548:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	68b9      	ldr	r1, [r7, #8]
 8007550:	68f8      	ldr	r0, [r7, #12]
 8007552:	f000 f80e 	bl	8007572 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007556:	69f8      	ldr	r0, [r7, #28]
 8007558:	f000 f8a2 	bl	80076a0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800755c:	2301      	movs	r3, #1
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	e002      	b.n	8007568 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007566:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007568:	69bb      	ldr	r3, [r7, #24]
    }
 800756a:	4618      	mov	r0, r3
 800756c:	3720      	adds	r7, #32
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}

08007572 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007572:	b580      	push	{r7, lr}
 8007574:	b088      	sub	sp, #32
 8007576:	af00      	add	r7, sp, #0
 8007578:	60f8      	str	r0, [r7, #12]
 800757a:	60b9      	str	r1, [r7, #8]
 800757c:	607a      	str	r2, [r7, #4]
 800757e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007582:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	461a      	mov	r2, r3
 800758a:	21a5      	movs	r1, #165	@ 0xa5
 800758c:	f002 f892 	bl	80096b4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800759a:	3b01      	subs	r3, #1
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	f023 0307 	bic.w	r3, r3, #7
 80075a8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	f003 0307 	and.w	r3, r3, #7
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <prvInitialiseNewTask+0x5a>
        __asm volatile
 80075b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075b8:	f383 8811 	msr	BASEPRI, r3
 80075bc:	f3bf 8f6f 	isb	sy
 80075c0:	f3bf 8f4f 	dsb	sy
 80075c4:	617b      	str	r3, [r7, #20]
    }
 80075c6:	bf00      	nop
 80075c8:	bf00      	nop
 80075ca:	e7fd      	b.n	80075c8 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d01f      	beq.n	8007612 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075d2:	2300      	movs	r3, #0
 80075d4:	61fb      	str	r3, [r7, #28]
 80075d6:	e012      	b.n	80075fe <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80075d8:	68ba      	ldr	r2, [r7, #8]
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	7819      	ldrb	r1, [r3, #0]
 80075e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	4413      	add	r3, r2
 80075e6:	3334      	adds	r3, #52	@ 0x34
 80075e8:	460a      	mov	r2, r1
 80075ea:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80075ec:	68ba      	ldr	r2, [r7, #8]
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d006      	beq.n	8007606 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	3301      	adds	r3, #1
 80075fc:	61fb      	str	r3, [r7, #28]
 80075fe:	69fb      	ldr	r3, [r7, #28]
 8007600:	2b09      	cmp	r3, #9
 8007602:	d9e9      	bls.n	80075d8 <prvInitialiseNewTask+0x66>
 8007604:	e000      	b.n	8007608 <prvInitialiseNewTask+0x96>
            {
                break;
 8007606:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	2200      	movs	r2, #0
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007610:	e003      	b.n	800761a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007614:	2200      	movs	r2, #0
 8007616:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800761a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761c:	2b04      	cmp	r3, #4
 800761e:	d901      	bls.n	8007624 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007620:	2304      	movs	r3, #4
 8007622:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007628:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800762a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800762e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8007630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007632:	2200      	movs	r2, #0
 8007634:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007638:	3304      	adds	r3, #4
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff f8fc 	bl	8006838 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007642:	3318      	adds	r3, #24
 8007644:	4618      	mov	r0, r3
 8007646:	f7ff f8f7 	bl	8006838 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800764a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800764e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007652:	f1c3 0205 	rsb	r2, r3, #5
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800765a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800765c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800765e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8007660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007662:	3350      	adds	r3, #80	@ 0x50
 8007664:	2204      	movs	r2, #4
 8007666:	2100      	movs	r1, #0
 8007668:	4618      	mov	r0, r3
 800766a:	f002 f823 	bl	80096b4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800766e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007670:	3354      	adds	r3, #84	@ 0x54
 8007672:	2201      	movs	r2, #1
 8007674:	2100      	movs	r1, #0
 8007676:	4618      	mov	r0, r3
 8007678:	f002 f81c 	bl	80096b4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800767c:	683a      	ldr	r2, [r7, #0]
 800767e:	68f9      	ldr	r1, [r7, #12]
 8007680:	69b8      	ldr	r0, [r7, #24]
 8007682:	f001 fb99 	bl	8008db8 <pxPortInitialiseStack>
 8007686:	4602      	mov	r2, r0
 8007688:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800768c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800768e:	2b00      	cmp	r3, #0
 8007690:	d002      	beq.n	8007698 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007696:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007698:	bf00      	nop
 800769a:	3720      	adds	r7, #32
 800769c:	46bd      	mov	sp, r7
 800769e:	bd80      	pop	{r7, pc}

080076a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80076a8:	f001 fcb8 	bl	800901c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80076ac:	4b2c      	ldr	r3, [pc, #176]	@ (8007760 <prvAddNewTaskToReadyList+0xc0>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	4a2b      	ldr	r2, [pc, #172]	@ (8007760 <prvAddNewTaskToReadyList+0xc0>)
 80076b4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80076b6:	4b2b      	ldr	r3, [pc, #172]	@ (8007764 <prvAddNewTaskToReadyList+0xc4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d109      	bne.n	80076d2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80076be:	4a29      	ldr	r2, [pc, #164]	@ (8007764 <prvAddNewTaskToReadyList+0xc4>)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80076c4:	4b26      	ldr	r3, [pc, #152]	@ (8007760 <prvAddNewTaskToReadyList+0xc0>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d110      	bne.n	80076ee <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80076cc:	f000 fbd2 	bl	8007e74 <prvInitialiseTaskLists>
 80076d0:	e00d      	b.n	80076ee <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80076d2:	4b25      	ldr	r3, [pc, #148]	@ (8007768 <prvAddNewTaskToReadyList+0xc8>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d109      	bne.n	80076ee <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80076da:	4b22      	ldr	r3, [pc, #136]	@ (8007764 <prvAddNewTaskToReadyList+0xc4>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d802      	bhi.n	80076ee <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80076e8:	4a1e      	ldr	r2, [pc, #120]	@ (8007764 <prvAddNewTaskToReadyList+0xc4>)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80076ee:	4b1f      	ldr	r3, [pc, #124]	@ (800776c <prvAddNewTaskToReadyList+0xcc>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	4a1d      	ldr	r2, [pc, #116]	@ (800776c <prvAddNewTaskToReadyList+0xcc>)
 80076f6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80076f8:	4b1c      	ldr	r3, [pc, #112]	@ (800776c <prvAddNewTaskToReadyList+0xcc>)
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007704:	2201      	movs	r2, #1
 8007706:	409a      	lsls	r2, r3
 8007708:	4b19      	ldr	r3, [pc, #100]	@ (8007770 <prvAddNewTaskToReadyList+0xd0>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4313      	orrs	r3, r2
 800770e:	4a18      	ldr	r2, [pc, #96]	@ (8007770 <prvAddNewTaskToReadyList+0xd0>)
 8007710:	6013      	str	r3, [r2, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007716:	4613      	mov	r3, r2
 8007718:	009b      	lsls	r3, r3, #2
 800771a:	4413      	add	r3, r2
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	4a15      	ldr	r2, [pc, #84]	@ (8007774 <prvAddNewTaskToReadyList+0xd4>)
 8007720:	441a      	add	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3304      	adds	r3, #4
 8007726:	4619      	mov	r1, r3
 8007728:	4610      	mov	r0, r2
 800772a:	f7ff f892 	bl	8006852 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800772e:	f001 fca7 	bl	8009080 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007732:	4b0d      	ldr	r3, [pc, #52]	@ (8007768 <prvAddNewTaskToReadyList+0xc8>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00e      	beq.n	8007758 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800773a:	4b0a      	ldr	r3, [pc, #40]	@ (8007764 <prvAddNewTaskToReadyList+0xc4>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007744:	429a      	cmp	r2, r3
 8007746:	d207      	bcs.n	8007758 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007748:	4b0b      	ldr	r3, [pc, #44]	@ (8007778 <prvAddNewTaskToReadyList+0xd8>)
 800774a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	f3bf 8f4f 	dsb	sy
 8007754:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007758:	bf00      	nop
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	20000404 	.word	0x20000404
 8007764:	2000032c 	.word	0x2000032c
 8007768:	20000410 	.word	0x20000410
 800776c:	20000420 	.word	0x20000420
 8007770:	2000040c 	.word	0x2000040c
 8007774:	20000330 	.word	0x20000330
 8007778:	e000ed04 	.word	0xe000ed04

0800777c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b086      	sub	sp, #24
 8007780:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8007782:	4b20      	ldr	r3, [pc, #128]	@ (8007804 <vTaskStartScheduler+0x88>)
 8007784:	9301      	str	r3, [sp, #4]
 8007786:	2300      	movs	r3, #0
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	2300      	movs	r3, #0
 800778c:	2282      	movs	r2, #130	@ 0x82
 800778e:	491e      	ldr	r1, [pc, #120]	@ (8007808 <vTaskStartScheduler+0x8c>)
 8007790:	481e      	ldr	r0, [pc, #120]	@ (800780c <vTaskStartScheduler+0x90>)
 8007792:	f7ff fead 	bl	80074f0 <xTaskCreate>
 8007796:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d102      	bne.n	80077a4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800779e:	f000 ff6d 	bl	800867c <xTimerCreateTimerTask>
 80077a2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d116      	bne.n	80077d8 <vTaskStartScheduler+0x5c>
        __asm volatile
 80077aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ae:	f383 8811 	msr	BASEPRI, r3
 80077b2:	f3bf 8f6f 	isb	sy
 80077b6:	f3bf 8f4f 	dsb	sy
 80077ba:	60bb      	str	r3, [r7, #8]
    }
 80077bc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80077be:	4b14      	ldr	r3, [pc, #80]	@ (8007810 <vTaskStartScheduler+0x94>)
 80077c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80077c4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80077c6:	4b13      	ldr	r3, [pc, #76]	@ (8007814 <vTaskStartScheduler+0x98>)
 80077c8:	2201      	movs	r2, #1
 80077ca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80077cc:	4b12      	ldr	r3, [pc, #72]	@ (8007818 <vTaskStartScheduler+0x9c>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80077d2:	f001 fb7f 	bl	8008ed4 <xPortStartScheduler>
 80077d6:	e00f      	b.n	80077f8 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077de:	d10b      	bne.n	80077f8 <vTaskStartScheduler+0x7c>
        __asm volatile
 80077e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e4:	f383 8811 	msr	BASEPRI, r3
 80077e8:	f3bf 8f6f 	isb	sy
 80077ec:	f3bf 8f4f 	dsb	sy
 80077f0:	607b      	str	r3, [r7, #4]
    }
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
 80077f6:	e7fd      	b.n	80077f4 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80077f8:	4b08      	ldr	r3, [pc, #32]	@ (800781c <vTaskStartScheduler+0xa0>)
 80077fa:	681b      	ldr	r3, [r3, #0]
}
 80077fc:	bf00      	nop
 80077fe:	3710      	adds	r7, #16
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}
 8007804:	20000428 	.word	0x20000428
 8007808:	0800a938 	.word	0x0800a938
 800780c:	08007e45 	.word	0x08007e45
 8007810:	20000424 	.word	0x20000424
 8007814:	20000410 	.word	0x20000410
 8007818:	20000408 	.word	0x20000408
 800781c:	20000074 	.word	0x20000074

08007820 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007824:	4b04      	ldr	r3, [pc, #16]	@ (8007838 <vTaskSuspendAll+0x18>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3301      	adds	r3, #1
 800782a:	4a03      	ldr	r2, [pc, #12]	@ (8007838 <vTaskSuspendAll+0x18>)
 800782c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800782e:	bf00      	nop
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	2000042c 	.word	0x2000042c

0800783c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b084      	sub	sp, #16
 8007840:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007842:	2300      	movs	r3, #0
 8007844:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007846:	2300      	movs	r3, #0
 8007848:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800784a:	4b42      	ldr	r3, [pc, #264]	@ (8007954 <xTaskResumeAll+0x118>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d10b      	bne.n	800786a <xTaskResumeAll+0x2e>
        __asm volatile
 8007852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007856:	f383 8811 	msr	BASEPRI, r3
 800785a:	f3bf 8f6f 	isb	sy
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	603b      	str	r3, [r7, #0]
    }
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	e7fd      	b.n	8007866 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800786a:	f001 fbd7 	bl	800901c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800786e:	4b39      	ldr	r3, [pc, #228]	@ (8007954 <xTaskResumeAll+0x118>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3b01      	subs	r3, #1
 8007874:	4a37      	ldr	r2, [pc, #220]	@ (8007954 <xTaskResumeAll+0x118>)
 8007876:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007878:	4b36      	ldr	r3, [pc, #216]	@ (8007954 <xTaskResumeAll+0x118>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d161      	bne.n	8007944 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007880:	4b35      	ldr	r3, [pc, #212]	@ (8007958 <xTaskResumeAll+0x11c>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d05d      	beq.n	8007944 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007888:	e02e      	b.n	80078e8 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800788a:	4b34      	ldr	r3, [pc, #208]	@ (800795c <xTaskResumeAll+0x120>)
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	68db      	ldr	r3, [r3, #12]
 8007890:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3318      	adds	r3, #24
 8007896:	4618      	mov	r0, r3
 8007898:	f7ff f838 	bl	800690c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	3304      	adds	r3, #4
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7ff f833 	bl	800690c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078aa:	2201      	movs	r2, #1
 80078ac:	409a      	lsls	r2, r3
 80078ae:	4b2c      	ldr	r3, [pc, #176]	@ (8007960 <xTaskResumeAll+0x124>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4313      	orrs	r3, r2
 80078b4:	4a2a      	ldr	r2, [pc, #168]	@ (8007960 <xTaskResumeAll+0x124>)
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078bc:	4613      	mov	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	4413      	add	r3, r2
 80078c2:	009b      	lsls	r3, r3, #2
 80078c4:	4a27      	ldr	r2, [pc, #156]	@ (8007964 <xTaskResumeAll+0x128>)
 80078c6:	441a      	add	r2, r3
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3304      	adds	r3, #4
 80078cc:	4619      	mov	r1, r3
 80078ce:	4610      	mov	r0, r2
 80078d0:	f7fe ffbf 	bl	8006852 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d8:	4b23      	ldr	r3, [pc, #140]	@ (8007968 <xTaskResumeAll+0x12c>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078de:	429a      	cmp	r2, r3
 80078e0:	d302      	bcc.n	80078e8 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 80078e2:	4b22      	ldr	r3, [pc, #136]	@ (800796c <xTaskResumeAll+0x130>)
 80078e4:	2201      	movs	r2, #1
 80078e6:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078e8:	4b1c      	ldr	r3, [pc, #112]	@ (800795c <xTaskResumeAll+0x120>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1cc      	bne.n	800788a <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80078f6:	f000 fb3b 	bl	8007f70 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80078fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007970 <xTaskResumeAll+0x134>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d010      	beq.n	8007928 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007906:	f000 f847 	bl	8007998 <xTaskIncrementTick>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d002      	beq.n	8007916 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8007910:	4b16      	ldr	r3, [pc, #88]	@ (800796c <xTaskResumeAll+0x130>)
 8007912:	2201      	movs	r2, #1
 8007914:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	3b01      	subs	r3, #1
 800791a:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d1f1      	bne.n	8007906 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8007922:	4b13      	ldr	r3, [pc, #76]	@ (8007970 <xTaskResumeAll+0x134>)
 8007924:	2200      	movs	r2, #0
 8007926:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007928:	4b10      	ldr	r3, [pc, #64]	@ (800796c <xTaskResumeAll+0x130>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d009      	beq.n	8007944 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8007930:	2301      	movs	r3, #1
 8007932:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007934:	4b0f      	ldr	r3, [pc, #60]	@ (8007974 <xTaskResumeAll+0x138>)
 8007936:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800793a:	601a      	str	r2, [r3, #0]
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007944:	f001 fb9c 	bl	8009080 <vPortExitCritical>

    return xAlreadyYielded;
 8007948:	68bb      	ldr	r3, [r7, #8]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	2000042c 	.word	0x2000042c
 8007958:	20000404 	.word	0x20000404
 800795c:	200003c4 	.word	0x200003c4
 8007960:	2000040c 	.word	0x2000040c
 8007964:	20000330 	.word	0x20000330
 8007968:	2000032c 	.word	0x2000032c
 800796c:	20000418 	.word	0x20000418
 8007970:	20000414 	.word	0x20000414
 8007974:	e000ed04 	.word	0xe000ed04

08007978 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800797e:	4b05      	ldr	r3, [pc, #20]	@ (8007994 <xTaskGetTickCount+0x1c>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8007984:	687b      	ldr	r3, [r7, #4]
}
 8007986:	4618      	mov	r0, r3
 8007988:	370c      	adds	r7, #12
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	20000408 	.word	0x20000408

08007998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800799e:	2300      	movs	r3, #0
 80079a0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079a2:	4b4f      	ldr	r3, [pc, #316]	@ (8007ae0 <xTaskIncrementTick+0x148>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	f040 808f 	bne.w	8007aca <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80079ac:	4b4d      	ldr	r3, [pc, #308]	@ (8007ae4 <xTaskIncrementTick+0x14c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3301      	adds	r3, #1
 80079b2:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80079b4:	4a4b      	ldr	r2, [pc, #300]	@ (8007ae4 <xTaskIncrementTick+0x14c>)
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d121      	bne.n	8007a04 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80079c0:	4b49      	ldr	r3, [pc, #292]	@ (8007ae8 <xTaskIncrementTick+0x150>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d00b      	beq.n	80079e2 <xTaskIncrementTick+0x4a>
        __asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	603b      	str	r3, [r7, #0]
    }
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <xTaskIncrementTick+0x46>
 80079e2:	4b41      	ldr	r3, [pc, #260]	@ (8007ae8 <xTaskIncrementTick+0x150>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	4b40      	ldr	r3, [pc, #256]	@ (8007aec <xTaskIncrementTick+0x154>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a3e      	ldr	r2, [pc, #248]	@ (8007ae8 <xTaskIncrementTick+0x150>)
 80079ee:	6013      	str	r3, [r2, #0]
 80079f0:	4a3e      	ldr	r2, [pc, #248]	@ (8007aec <xTaskIncrementTick+0x154>)
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	4b3e      	ldr	r3, [pc, #248]	@ (8007af0 <xTaskIncrementTick+0x158>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	3301      	adds	r3, #1
 80079fc:	4a3c      	ldr	r2, [pc, #240]	@ (8007af0 <xTaskIncrementTick+0x158>)
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	f000 fab6 	bl	8007f70 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8007a04:	4b3b      	ldr	r3, [pc, #236]	@ (8007af4 <xTaskIncrementTick+0x15c>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d348      	bcc.n	8007aa0 <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a0e:	4b36      	ldr	r3, [pc, #216]	@ (8007ae8 <xTaskIncrementTick+0x150>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d104      	bne.n	8007a22 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a18:	4b36      	ldr	r3, [pc, #216]	@ (8007af4 <xTaskIncrementTick+0x15c>)
 8007a1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007a1e:	601a      	str	r2, [r3, #0]
                    break;
 8007a20:	e03e      	b.n	8007aa0 <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a22:	4b31      	ldr	r3, [pc, #196]	@ (8007ae8 <xTaskIncrementTick+0x150>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8007a32:	693a      	ldr	r2, [r7, #16]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	429a      	cmp	r2, r3
 8007a38:	d203      	bcs.n	8007a42 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8007a3a:	4a2e      	ldr	r2, [pc, #184]	@ (8007af4 <xTaskIncrementTick+0x15c>)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007a40:	e02e      	b.n	8007aa0 <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	3304      	adds	r3, #4
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7fe ff60 	bl	800690c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d004      	beq.n	8007a5e <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	3318      	adds	r3, #24
 8007a58:	4618      	mov	r0, r3
 8007a5a:	f7fe ff57 	bl	800690c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a62:	2201      	movs	r2, #1
 8007a64:	409a      	lsls	r2, r3
 8007a66:	4b24      	ldr	r3, [pc, #144]	@ (8007af8 <xTaskIncrementTick+0x160>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	4a22      	ldr	r2, [pc, #136]	@ (8007af8 <xTaskIncrementTick+0x160>)
 8007a6e:	6013      	str	r3, [r2, #0]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a74:	4613      	mov	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	4413      	add	r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8007afc <xTaskIncrementTick+0x164>)
 8007a7e:	441a      	add	r2, r3
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	3304      	adds	r3, #4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4610      	mov	r0, r2
 8007a88:	f7fe fee3 	bl	8006852 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a90:	4b1b      	ldr	r3, [pc, #108]	@ (8007b00 <xTaskIncrementTick+0x168>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d3b9      	bcc.n	8007a0e <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a9e:	e7b6      	b.n	8007a0e <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007aa0:	4b17      	ldr	r3, [pc, #92]	@ (8007b00 <xTaskIncrementTick+0x168>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007aa6:	4915      	ldr	r1, [pc, #84]	@ (8007afc <xTaskIncrementTick+0x164>)
 8007aa8:	4613      	mov	r3, r2
 8007aaa:	009b      	lsls	r3, r3, #2
 8007aac:	4413      	add	r3, r2
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	440b      	add	r3, r1
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d901      	bls.n	8007abc <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8007abc:	4b11      	ldr	r3, [pc, #68]	@ (8007b04 <xTaskIncrementTick+0x16c>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d007      	beq.n	8007ad4 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	617b      	str	r3, [r7, #20]
 8007ac8:	e004      	b.n	8007ad4 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8007aca:	4b0f      	ldr	r3, [pc, #60]	@ (8007b08 <xTaskIncrementTick+0x170>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3301      	adds	r3, #1
 8007ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8007b08 <xTaskIncrementTick+0x170>)
 8007ad2:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8007ad4:	697b      	ldr	r3, [r7, #20]
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3718      	adds	r7, #24
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
 8007ade:	bf00      	nop
 8007ae0:	2000042c 	.word	0x2000042c
 8007ae4:	20000408 	.word	0x20000408
 8007ae8:	200003bc 	.word	0x200003bc
 8007aec:	200003c0 	.word	0x200003c0
 8007af0:	2000041c 	.word	0x2000041c
 8007af4:	20000424 	.word	0x20000424
 8007af8:	2000040c 	.word	0x2000040c
 8007afc:	20000330 	.word	0x20000330
 8007b00:	2000032c 	.word	0x2000032c
 8007b04:	20000418 	.word	0x20000418
 8007b08:	20000414 	.word	0x20000414

08007b0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b087      	sub	sp, #28
 8007b10:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007b12:	4b27      	ldr	r3, [pc, #156]	@ (8007bb0 <vTaskSwitchContext+0xa4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8007b1a:	4b26      	ldr	r3, [pc, #152]	@ (8007bb4 <vTaskSwitchContext+0xa8>)
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8007b20:	e040      	b.n	8007ba4 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8007b22:	4b24      	ldr	r3, [pc, #144]	@ (8007bb4 <vTaskSwitchContext+0xa8>)
 8007b24:	2200      	movs	r2, #0
 8007b26:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b28:	4b23      	ldr	r3, [pc, #140]	@ (8007bb8 <vTaskSwitchContext+0xac>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	fab3 f383 	clz	r3, r3
 8007b34:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8007b36:	7afb      	ldrb	r3, [r7, #11]
 8007b38:	f1c3 031f 	rsb	r3, r3, #31
 8007b3c:	617b      	str	r3, [r7, #20]
 8007b3e:	491f      	ldr	r1, [pc, #124]	@ (8007bbc <vTaskSwitchContext+0xb0>)
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	4613      	mov	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	440b      	add	r3, r1
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10b      	bne.n	8007b6a <vTaskSwitchContext+0x5e>
        __asm volatile
 8007b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b56:	f383 8811 	msr	BASEPRI, r3
 8007b5a:	f3bf 8f6f 	isb	sy
 8007b5e:	f3bf 8f4f 	dsb	sy
 8007b62:	607b      	str	r3, [r7, #4]
    }
 8007b64:	bf00      	nop
 8007b66:	bf00      	nop
 8007b68:	e7fd      	b.n	8007b66 <vTaskSwitchContext+0x5a>
 8007b6a:	697a      	ldr	r2, [r7, #20]
 8007b6c:	4613      	mov	r3, r2
 8007b6e:	009b      	lsls	r3, r3, #2
 8007b70:	4413      	add	r3, r2
 8007b72:	009b      	lsls	r3, r3, #2
 8007b74:	4a11      	ldr	r2, [pc, #68]	@ (8007bbc <vTaskSwitchContext+0xb0>)
 8007b76:	4413      	add	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	605a      	str	r2, [r3, #4]
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	685a      	ldr	r2, [r3, #4]
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	429a      	cmp	r2, r3
 8007b8e:	d104      	bne.n	8007b9a <vTaskSwitchContext+0x8e>
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	685a      	ldr	r2, [r3, #4]
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	68db      	ldr	r3, [r3, #12]
 8007ba0:	4a07      	ldr	r2, [pc, #28]	@ (8007bc0 <vTaskSwitchContext+0xb4>)
 8007ba2:	6013      	str	r3, [r2, #0]
}
 8007ba4:	bf00      	nop
 8007ba6:	371c      	adds	r7, #28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	2000042c 	.word	0x2000042c
 8007bb4:	20000418 	.word	0x20000418
 8007bb8:	2000040c 	.word	0x2000040c
 8007bbc:	20000330 	.word	0x20000330
 8007bc0:	2000032c 	.word	0x2000032c

08007bc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10b      	bne.n	8007bec <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8007bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd8:	f383 8811 	msr	BASEPRI, r3
 8007bdc:	f3bf 8f6f 	isb	sy
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	60fb      	str	r3, [r7, #12]
    }
 8007be6:	bf00      	nop
 8007be8:	bf00      	nop
 8007bea:	e7fd      	b.n	8007be8 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bec:	4b07      	ldr	r3, [pc, #28]	@ (8007c0c <vTaskPlaceOnEventList+0x48>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3318      	adds	r3, #24
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7fe fe50 	bl	800689a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	6838      	ldr	r0, [r7, #0]
 8007bfe:	f000 fcd7 	bl	80085b0 <prvAddCurrentTaskToDelayedList>
}
 8007c02:	bf00      	nop
 8007c04:	3710      	adds	r7, #16
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	2000032c 	.word	0x2000032c

08007c10 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10b      	bne.n	8007c3a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	617b      	str	r3, [r7, #20]
    }
 8007c34:	bf00      	nop
 8007c36:	bf00      	nop
 8007c38:	e7fd      	b.n	8007c36 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007c64 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3318      	adds	r3, #24
 8007c40:	4619      	mov	r1, r3
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f7fe fe05 	bl	8006852 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d002      	beq.n	8007c54 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8007c4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c52:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007c54:	6879      	ldr	r1, [r7, #4]
 8007c56:	68b8      	ldr	r0, [r7, #8]
 8007c58:	f000 fcaa 	bl	80085b0 <prvAddCurrentTaskToDelayedList>
    }
 8007c5c:	bf00      	nop
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	2000032c 	.word	0x2000032c

08007c68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b086      	sub	sp, #24
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	68db      	ldr	r3, [r3, #12]
 8007c74:	68db      	ldr	r3, [r3, #12]
 8007c76:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10b      	bne.n	8007c96 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	60fb      	str	r3, [r7, #12]
    }
 8007c90:	bf00      	nop
 8007c92:	bf00      	nop
 8007c94:	e7fd      	b.n	8007c92 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	3318      	adds	r3, #24
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fe36 	bl	800690c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007ca0:	4b1d      	ldr	r3, [pc, #116]	@ (8007d18 <xTaskRemoveFromEventList+0xb0>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d11c      	bne.n	8007ce2 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	3304      	adds	r3, #4
 8007cac:	4618      	mov	r0, r3
 8007cae:	f7fe fe2d 	bl	800690c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb6:	2201      	movs	r2, #1
 8007cb8:	409a      	lsls	r2, r3
 8007cba:	4b18      	ldr	r3, [pc, #96]	@ (8007d1c <xTaskRemoveFromEventList+0xb4>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	4a16      	ldr	r2, [pc, #88]	@ (8007d1c <xTaskRemoveFromEventList+0xb4>)
 8007cc2:	6013      	str	r3, [r2, #0]
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc8:	4613      	mov	r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	4a13      	ldr	r2, [pc, #76]	@ (8007d20 <xTaskRemoveFromEventList+0xb8>)
 8007cd2:	441a      	add	r2, r3
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	4619      	mov	r1, r3
 8007cda:	4610      	mov	r0, r2
 8007cdc:	f7fe fdb9 	bl	8006852 <vListInsertEnd>
 8007ce0:	e005      	b.n	8007cee <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	3318      	adds	r3, #24
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	480e      	ldr	r0, [pc, #56]	@ (8007d24 <xTaskRemoveFromEventList+0xbc>)
 8007cea:	f7fe fdb2 	bl	8006852 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d28 <xTaskRemoveFromEventList+0xc0>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d905      	bls.n	8007d08 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8007d00:	4b0a      	ldr	r3, [pc, #40]	@ (8007d2c <xTaskRemoveFromEventList+0xc4>)
 8007d02:	2201      	movs	r2, #1
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	e001      	b.n	8007d0c <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8007d0c:	697b      	ldr	r3, [r7, #20]
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3718      	adds	r7, #24
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	2000042c 	.word	0x2000042c
 8007d1c:	2000040c 	.word	0x2000040c
 8007d20:	20000330 	.word	0x20000330
 8007d24:	200003c4 	.word	0x200003c4
 8007d28:	2000032c 	.word	0x2000032c
 8007d2c:	20000418 	.word	0x20000418

08007d30 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007d38:	4b06      	ldr	r3, [pc, #24]	@ (8007d54 <vTaskInternalSetTimeOutState+0x24>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8007d40:	4b05      	ldr	r3, [pc, #20]	@ (8007d58 <vTaskInternalSetTimeOutState+0x28>)
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	605a      	str	r2, [r3, #4]
}
 8007d48:	bf00      	nop
 8007d4a:	370c      	adds	r7, #12
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	2000041c 	.word	0x2000041c
 8007d58:	20000408 	.word	0x20000408

08007d5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b088      	sub	sp, #32
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
 8007d64:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d10b      	bne.n	8007d84 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d70:	f383 8811 	msr	BASEPRI, r3
 8007d74:	f3bf 8f6f 	isb	sy
 8007d78:	f3bf 8f4f 	dsb	sy
 8007d7c:	613b      	str	r3, [r7, #16]
    }
 8007d7e:	bf00      	nop
 8007d80:	bf00      	nop
 8007d82:	e7fd      	b.n	8007d80 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d10b      	bne.n	8007da2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8007d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d8e:	f383 8811 	msr	BASEPRI, r3
 8007d92:	f3bf 8f6f 	isb	sy
 8007d96:	f3bf 8f4f 	dsb	sy
 8007d9a:	60fb      	str	r3, [r7, #12]
    }
 8007d9c:	bf00      	nop
 8007d9e:	bf00      	nop
 8007da0:	e7fd      	b.n	8007d9e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8007da2:	f001 f93b 	bl	800901c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8007da6:	4b1f      	ldr	r3, [pc, #124]	@ (8007e24 <xTaskCheckForTimeOut+0xc8>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	69ba      	ldr	r2, [r7, #24]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007dbe:	d102      	bne.n	8007dc6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61fb      	str	r3, [r7, #28]
 8007dc4:	e026      	b.n	8007e14 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	4b17      	ldr	r3, [pc, #92]	@ (8007e28 <xTaskCheckForTimeOut+0xcc>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d00a      	beq.n	8007de8 <xTaskCheckForTimeOut+0x8c>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	69ba      	ldr	r2, [r7, #24]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d305      	bcc.n	8007de8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]
 8007de6:	e015      	b.n	8007e14 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	697a      	ldr	r2, [r7, #20]
 8007dee:	429a      	cmp	r2, r3
 8007df0:	d20b      	bcs.n	8007e0a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	1ad2      	subs	r2, r2, r3
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7ff ff96 	bl	8007d30 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8007e04:	2300      	movs	r3, #0
 8007e06:	61fb      	str	r3, [r7, #28]
 8007e08:	e004      	b.n	8007e14 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8007e10:	2301      	movs	r3, #1
 8007e12:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8007e14:	f001 f934 	bl	8009080 <vPortExitCritical>

    return xReturn;
 8007e18:	69fb      	ldr	r3, [r7, #28]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3720      	adds	r7, #32
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	20000408 	.word	0x20000408
 8007e28:	2000041c 	.word	0x2000041c

08007e2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8007e30:	4b03      	ldr	r3, [pc, #12]	@ (8007e40 <vTaskMissedYield+0x14>)
 8007e32:	2201      	movs	r2, #1
 8007e34:	601a      	str	r2, [r3, #0]
}
 8007e36:	bf00      	nop
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	20000418 	.word	0x20000418

08007e44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b082      	sub	sp, #8
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8007e4c:	f000 f852 	bl	8007ef4 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007e50:	4b06      	ldr	r3, [pc, #24]	@ (8007e6c <prvIdleTask+0x28>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d9f9      	bls.n	8007e4c <prvIdleTask+0x8>
                {
                    taskYIELD();
 8007e58:	4b05      	ldr	r3, [pc, #20]	@ (8007e70 <prvIdleTask+0x2c>)
 8007e5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8007e68:	e7f0      	b.n	8007e4c <prvIdleTask+0x8>
 8007e6a:	bf00      	nop
 8007e6c:	20000330 	.word	0x20000330
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	607b      	str	r3, [r7, #4]
 8007e7e:	e00c      	b.n	8007e9a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	4613      	mov	r3, r2
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	4413      	add	r3, r2
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4a12      	ldr	r2, [pc, #72]	@ (8007ed4 <prvInitialiseTaskLists+0x60>)
 8007e8c:	4413      	add	r3, r2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f7fe fcb2 	bl	80067f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3301      	adds	r3, #1
 8007e98:	607b      	str	r3, [r7, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2b04      	cmp	r3, #4
 8007e9e:	d9ef      	bls.n	8007e80 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8007ea0:	480d      	ldr	r0, [pc, #52]	@ (8007ed8 <prvInitialiseTaskLists+0x64>)
 8007ea2:	f7fe fca9 	bl	80067f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8007ea6:	480d      	ldr	r0, [pc, #52]	@ (8007edc <prvInitialiseTaskLists+0x68>)
 8007ea8:	f7fe fca6 	bl	80067f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8007eac:	480c      	ldr	r0, [pc, #48]	@ (8007ee0 <prvInitialiseTaskLists+0x6c>)
 8007eae:	f7fe fca3 	bl	80067f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8007eb2:	480c      	ldr	r0, [pc, #48]	@ (8007ee4 <prvInitialiseTaskLists+0x70>)
 8007eb4:	f7fe fca0 	bl	80067f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8007eb8:	480b      	ldr	r0, [pc, #44]	@ (8007ee8 <prvInitialiseTaskLists+0x74>)
 8007eba:	f7fe fc9d 	bl	80067f8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8007ebe:	4b0b      	ldr	r3, [pc, #44]	@ (8007eec <prvInitialiseTaskLists+0x78>)
 8007ec0:	4a05      	ldr	r2, [pc, #20]	@ (8007ed8 <prvInitialiseTaskLists+0x64>)
 8007ec2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8007ef0 <prvInitialiseTaskLists+0x7c>)
 8007ec6:	4a05      	ldr	r2, [pc, #20]	@ (8007edc <prvInitialiseTaskLists+0x68>)
 8007ec8:	601a      	str	r2, [r3, #0]
}
 8007eca:	bf00      	nop
 8007ecc:	3708      	adds	r7, #8
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop
 8007ed4:	20000330 	.word	0x20000330
 8007ed8:	20000394 	.word	0x20000394
 8007edc:	200003a8 	.word	0x200003a8
 8007ee0:	200003c4 	.word	0x200003c4
 8007ee4:	200003d8 	.word	0x200003d8
 8007ee8:	200003f0 	.word	0x200003f0
 8007eec:	200003bc 	.word	0x200003bc
 8007ef0:	200003c0 	.word	0x200003c0

08007ef4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007efa:	e019      	b.n	8007f30 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8007efc:	f001 f88e 	bl	800901c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007f00:	4b10      	ldr	r3, [pc, #64]	@ (8007f44 <prvCheckTasksWaitingTermination+0x50>)
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	3304      	adds	r3, #4
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fe fcfd 	bl	800690c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8007f12:	4b0d      	ldr	r3, [pc, #52]	@ (8007f48 <prvCheckTasksWaitingTermination+0x54>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3b01      	subs	r3, #1
 8007f18:	4a0b      	ldr	r2, [pc, #44]	@ (8007f48 <prvCheckTasksWaitingTermination+0x54>)
 8007f1a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8007f1c:	4b0b      	ldr	r3, [pc, #44]	@ (8007f4c <prvCheckTasksWaitingTermination+0x58>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	3b01      	subs	r3, #1
 8007f22:	4a0a      	ldr	r2, [pc, #40]	@ (8007f4c <prvCheckTasksWaitingTermination+0x58>)
 8007f24:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8007f26:	f001 f8ab 	bl	8009080 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 f810 	bl	8007f50 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007f30:	4b06      	ldr	r3, [pc, #24]	@ (8007f4c <prvCheckTasksWaitingTermination+0x58>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d1e1      	bne.n	8007efc <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8007f38:	bf00      	nop
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	200003d8 	.word	0x200003d8
 8007f48:	20000404 	.word	0x20000404
 8007f4c:	200003ec 	.word	0x200003ec

08007f50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f001 fa69 	bl	8009434 <vPortFree>
                vPortFree( pxTCB );
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 fa66 	bl	8009434 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007f70:	b480      	push	{r7}
 8007f72:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f74:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa0 <prvResetNextTaskUnblockTime+0x30>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d104      	bne.n	8007f88 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8007f7e:	4b09      	ldr	r3, [pc, #36]	@ (8007fa4 <prvResetNextTaskUnblockTime+0x34>)
 8007f80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f84:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8007f86:	e005      	b.n	8007f94 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007f88:	4b05      	ldr	r3, [pc, #20]	@ (8007fa0 <prvResetNextTaskUnblockTime+0x30>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68db      	ldr	r3, [r3, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a04      	ldr	r2, [pc, #16]	@ (8007fa4 <prvResetNextTaskUnblockTime+0x34>)
 8007f92:	6013      	str	r3, [r2, #0]
}
 8007f94:	bf00      	nop
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	200003bc 	.word	0x200003bc
 8007fa4:	20000424 	.word	0x20000424

08007fa8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8007fae:	4b0b      	ldr	r3, [pc, #44]	@ (8007fdc <xTaskGetSchedulerState+0x34>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d102      	bne.n	8007fbc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8007fb6:	2301      	movs	r3, #1
 8007fb8:	607b      	str	r3, [r7, #4]
 8007fba:	e008      	b.n	8007fce <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fbc:	4b08      	ldr	r3, [pc, #32]	@ (8007fe0 <xTaskGetSchedulerState+0x38>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d102      	bne.n	8007fca <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	607b      	str	r3, [r7, #4]
 8007fc8:	e001      	b.n	8007fce <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8007fce:	687b      	ldr	r3, [r7, #4]
    }
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	20000410 	.word	0x20000410
 8007fe0:	2000042c 	.word	0x2000042c

08007fe4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b086      	sub	sp, #24
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d065      	beq.n	80080c6 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8007ffa:	4b35      	ldr	r3, [pc, #212]	@ (80080d0 <xTaskPriorityDisinherit+0xec>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	693a      	ldr	r2, [r7, #16]
 8008000:	429a      	cmp	r2, r3
 8008002:	d00b      	beq.n	800801c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	60fb      	str	r3, [r7, #12]
    }
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	e7fd      	b.n	8008018 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d10b      	bne.n	800803c <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8008024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008028:	f383 8811 	msr	BASEPRI, r3
 800802c:	f3bf 8f6f 	isb	sy
 8008030:	f3bf 8f4f 	dsb	sy
 8008034:	60bb      	str	r3, [r7, #8]
    }
 8008036:	bf00      	nop
 8008038:	bf00      	nop
 800803a:	e7fd      	b.n	8008038 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008040:	1e5a      	subs	r2, r3, #1
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800804e:	429a      	cmp	r2, r3
 8008050:	d039      	beq.n	80080c6 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d135      	bne.n	80080c6 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	3304      	adds	r3, #4
 800805e:	4618      	mov	r0, r3
 8008060:	f7fe fc54 	bl	800690c <uxListRemove>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d10a      	bne.n	8008080 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800806e:	2201      	movs	r2, #1
 8008070:	fa02 f303 	lsl.w	r3, r2, r3
 8008074:	43da      	mvns	r2, r3
 8008076:	4b17      	ldr	r3, [pc, #92]	@ (80080d4 <xTaskPriorityDisinherit+0xf0>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4013      	ands	r3, r2
 800807c:	4a15      	ldr	r2, [pc, #84]	@ (80080d4 <xTaskPriorityDisinherit+0xf0>)
 800807e:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008080:	693b      	ldr	r3, [r7, #16]
 8008082:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800808c:	f1c3 0205 	rsb	r2, r3, #5
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008098:	2201      	movs	r2, #1
 800809a:	409a      	lsls	r2, r3
 800809c:	4b0d      	ldr	r3, [pc, #52]	@ (80080d4 <xTaskPriorityDisinherit+0xf0>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	4a0c      	ldr	r2, [pc, #48]	@ (80080d4 <xTaskPriorityDisinherit+0xf0>)
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080aa:	4613      	mov	r3, r2
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4a09      	ldr	r2, [pc, #36]	@ (80080d8 <xTaskPriorityDisinherit+0xf4>)
 80080b4:	441a      	add	r2, r3
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	3304      	adds	r3, #4
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f7fe fbc8 	bl	8006852 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80080c2:	2301      	movs	r3, #1
 80080c4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80080c6:	697b      	ldr	r3, [r7, #20]
    }
 80080c8:	4618      	mov	r0, r3
 80080ca:	3718      	adds	r7, #24
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}
 80080d0:	2000032c 	.word	0x2000032c
 80080d4:	2000040c 	.word	0x2000040c
 80080d8:	20000330 	.word	0x20000330

080080dc <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80080dc:	b580      	push	{r7, lr}
 80080de:	b086      	sub	sp, #24
 80080e0:	af00      	add	r7, sp, #0
 80080e2:	60f8      	str	r0, [r7, #12]
 80080e4:	60b9      	str	r1, [r7, #8]
 80080e6:	607a      	str	r2, [r7, #4]
 80080e8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d00b      	beq.n	8008108 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	613b      	str	r3, [r7, #16]
    }
 8008102:	bf00      	nop
 8008104:	bf00      	nop
 8008106:	e7fd      	b.n	8008104 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8008108:	f000 ff88 	bl	800901c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800810c:	4b31      	ldr	r3, [pc, #196]	@ (80081d4 <xTaskGenericNotifyWait+0xf8>)
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4413      	add	r3, r2
 8008114:	3354      	adds	r3, #84	@ 0x54
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	b2db      	uxtb	r3, r3
 800811a:	2b02      	cmp	r3, #2
 800811c:	d022      	beq.n	8008164 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800811e:	4b2d      	ldr	r3, [pc, #180]	@ (80081d4 <xTaskGenericNotifyWait+0xf8>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	68fa      	ldr	r2, [r7, #12]
 8008124:	3214      	adds	r2, #20
 8008126:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	43d2      	mvns	r2, r2
 800812e:	4011      	ands	r1, r2
 8008130:	68fa      	ldr	r2, [r7, #12]
 8008132:	3214      	adds	r2, #20
 8008134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8008138:	4b26      	ldr	r3, [pc, #152]	@ (80081d4 <xTaskGenericNotifyWait+0xf8>)
 800813a:	681a      	ldr	r2, [r3, #0]
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	4413      	add	r3, r2
 8008140:	3354      	adds	r3, #84	@ 0x54
 8008142:	2201      	movs	r2, #1
 8008144:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8008146:	6a3b      	ldr	r3, [r7, #32]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00b      	beq.n	8008164 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800814c:	2101      	movs	r1, #1
 800814e:	6a38      	ldr	r0, [r7, #32]
 8008150:	f000 fa2e 	bl	80085b0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8008154:	4b20      	ldr	r3, [pc, #128]	@ (80081d8 <xTaskGenericNotifyWait+0xfc>)
 8008156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008164:	f000 ff8c 	bl	8009080 <vPortExitCritical>

        taskENTER_CRITICAL();
 8008168:	f000 ff58 	bl	800901c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d007      	beq.n	8008182 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8008172:	4b18      	ldr	r3, [pc, #96]	@ (80081d4 <xTaskGenericNotifyWait+0xf8>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68fa      	ldr	r2, [r7, #12]
 8008178:	3214      	adds	r2, #20
 800817a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8008182:	4b14      	ldr	r3, [pc, #80]	@ (80081d4 <xTaskGenericNotifyWait+0xf8>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	3354      	adds	r3, #84	@ 0x54
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b02      	cmp	r3, #2
 8008192:	d002      	beq.n	800819a <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8008194:	2300      	movs	r3, #0
 8008196:	617b      	str	r3, [r7, #20]
 8008198:	e00e      	b.n	80081b8 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 800819a:	4b0e      	ldr	r3, [pc, #56]	@ (80081d4 <xTaskGenericNotifyWait+0xf8>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	3214      	adds	r2, #20
 80081a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	43d2      	mvns	r2, r2
 80081aa:	4011      	ands	r1, r2
 80081ac:	68fa      	ldr	r2, [r7, #12]
 80081ae:	3214      	adds	r2, #20
 80081b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80081b4:	2301      	movs	r3, #1
 80081b6:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80081b8:	4b06      	ldr	r3, [pc, #24]	@ (80081d4 <xTaskGenericNotifyWait+0xf8>)
 80081ba:	681a      	ldr	r2, [r3, #0]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	4413      	add	r3, r2
 80081c0:	3354      	adds	r3, #84	@ 0x54
 80081c2:	2200      	movs	r2, #0
 80081c4:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80081c6:	f000 ff5b 	bl	8009080 <vPortExitCritical>

        return xReturn;
 80081ca:	697b      	ldr	r3, [r7, #20]
    }
 80081cc:	4618      	mov	r0, r3
 80081ce:	3718      	adds	r7, #24
 80081d0:	46bd      	mov	sp, r7
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	2000032c 	.word	0x2000032c
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08c      	sub	sp, #48	@ 0x30
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
 80081e8:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80081ea:	2301      	movs	r3, #1
 80081ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d00b      	beq.n	800820c <xTaskGenericNotify+0x30>
        __asm volatile
 80081f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081f8:	f383 8811 	msr	BASEPRI, r3
 80081fc:	f3bf 8f6f 	isb	sy
 8008200:	f3bf 8f4f 	dsb	sy
 8008204:	623b      	str	r3, [r7, #32]
    }
 8008206:	bf00      	nop
 8008208:	bf00      	nop
 800820a:	e7fd      	b.n	8008208 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d10b      	bne.n	800822a <xTaskGenericNotify+0x4e>
        __asm volatile
 8008212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	61fb      	str	r3, [r7, #28]
    }
 8008224:	bf00      	nop
 8008226:	bf00      	nop
 8008228:	e7fd      	b.n	8008226 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 800822e:	f000 fef5 	bl	800901c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8008232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008234:	2b00      	cmp	r3, #0
 8008236:	d006      	beq.n	8008246 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8008238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	3214      	adds	r2, #20
 800823e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008242:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008244:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8008246:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	4413      	add	r3, r2
 800824c:	3354      	adds	r3, #84	@ 0x54
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8008254:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	4413      	add	r3, r2
 800825a:	3354      	adds	r3, #84	@ 0x54
 800825c:	2202      	movs	r2, #2
 800825e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8008260:	78fb      	ldrb	r3, [r7, #3]
 8008262:	2b04      	cmp	r3, #4
 8008264:	d83b      	bhi.n	80082de <xTaskGenericNotify+0x102>
 8008266:	a201      	add	r2, pc, #4	@ (adr r2, 800826c <xTaskGenericNotify+0x90>)
 8008268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800826c:	080082ff 	.word	0x080082ff
 8008270:	08008281 	.word	0x08008281
 8008274:	0800829d 	.word	0x0800829d
 8008278:	080082b5 	.word	0x080082b5
 800827c:	080082c3 	.word	0x080082c3
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8008280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	3214      	adds	r2, #20
 8008286:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	ea42 0103 	orr.w	r1, r2, r3
 8008290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	3214      	adds	r2, #20
 8008296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800829a:	e033      	b.n	8008304 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800829c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	3214      	adds	r2, #20
 80082a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082a6:	1c59      	adds	r1, r3, #1
 80082a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082aa:	68ba      	ldr	r2, [r7, #8]
 80082ac:	3214      	adds	r2, #20
 80082ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80082b2:	e027      	b.n	8008304 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80082b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b6:	68ba      	ldr	r2, [r7, #8]
 80082b8:	3214      	adds	r2, #20
 80082ba:	6879      	ldr	r1, [r7, #4]
 80082bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80082c0:	e020      	b.n	8008304 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80082c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d006      	beq.n	80082d8 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80082ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082cc:	68ba      	ldr	r2, [r7, #8]
 80082ce:	3214      	adds	r2, #20
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80082d6:	e015      	b.n	8008304 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 80082d8:	2300      	movs	r3, #0
 80082da:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 80082dc:	e012      	b.n	8008304 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80082de:	4b2c      	ldr	r3, [pc, #176]	@ (8008390 <xTaskGenericNotify+0x1b4>)
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00d      	beq.n	8008302 <xTaskGenericNotify+0x126>
        __asm volatile
 80082e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ea:	f383 8811 	msr	BASEPRI, r3
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f3bf 8f4f 	dsb	sy
 80082f6:	61bb      	str	r3, [r7, #24]
    }
 80082f8:	bf00      	nop
 80082fa:	bf00      	nop
 80082fc:	e7fd      	b.n	80082fa <xTaskGenericNotify+0x11e>
                    break;
 80082fe:	bf00      	nop
 8008300:	e000      	b.n	8008304 <xTaskGenericNotify+0x128>

                    break;
 8008302:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8008304:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008308:	2b01      	cmp	r3, #1
 800830a:	d13a      	bne.n	8008382 <xTaskGenericNotify+0x1a6>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800830c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800830e:	3304      	adds	r3, #4
 8008310:	4618      	mov	r0, r3
 8008312:	f7fe fafb 	bl	800690c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8008316:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800831a:	2201      	movs	r2, #1
 800831c:	409a      	lsls	r2, r3
 800831e:	4b1d      	ldr	r3, [pc, #116]	@ (8008394 <xTaskGenericNotify+0x1b8>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4313      	orrs	r3, r2
 8008324:	4a1b      	ldr	r2, [pc, #108]	@ (8008394 <xTaskGenericNotify+0x1b8>)
 8008326:	6013      	str	r3, [r2, #0]
 8008328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800832c:	4613      	mov	r3, r2
 800832e:	009b      	lsls	r3, r3, #2
 8008330:	4413      	add	r3, r2
 8008332:	009b      	lsls	r3, r3, #2
 8008334:	4a18      	ldr	r2, [pc, #96]	@ (8008398 <xTaskGenericNotify+0x1bc>)
 8008336:	441a      	add	r2, r3
 8008338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833a:	3304      	adds	r3, #4
 800833c:	4619      	mov	r1, r3
 800833e:	4610      	mov	r0, r2
 8008340:	f7fe fa87 	bl	8006852 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00b      	beq.n	8008364 <xTaskGenericNotify+0x188>
        __asm volatile
 800834c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008350:	f383 8811 	msr	BASEPRI, r3
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	f3bf 8f4f 	dsb	sy
 800835c:	617b      	str	r3, [r7, #20]
    }
 800835e:	bf00      	nop
 8008360:	bf00      	nop
 8008362:	e7fd      	b.n	8008360 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008368:	4b0c      	ldr	r3, [pc, #48]	@ (800839c <xTaskGenericNotify+0x1c0>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836e:	429a      	cmp	r2, r3
 8008370:	d907      	bls.n	8008382 <xTaskGenericNotify+0x1a6>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8008372:	4b0b      	ldr	r3, [pc, #44]	@ (80083a0 <xTaskGenericNotify+0x1c4>)
 8008374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008378:	601a      	str	r2, [r3, #0]
 800837a:	f3bf 8f4f 	dsb	sy
 800837e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008382:	f000 fe7d 	bl	8009080 <vPortExitCritical>

        return xReturn;
 8008386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8008388:	4618      	mov	r0, r3
 800838a:	3730      	adds	r7, #48	@ 0x30
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	20000408 	.word	0x20000408
 8008394:	2000040c 	.word	0x2000040c
 8008398:	20000330 	.word	0x20000330
 800839c:	2000032c 	.word	0x2000032c
 80083a0:	e000ed04 	.word	0xe000ed04

080083a4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b090      	sub	sp, #64	@ 0x40
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	607a      	str	r2, [r7, #4]
 80083b0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80083b2:	2301      	movs	r3, #1
 80083b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10b      	bne.n	80083d4 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 80083bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c0:	f383 8811 	msr	BASEPRI, r3
 80083c4:	f3bf 8f6f 	isb	sy
 80083c8:	f3bf 8f4f 	dsb	sy
 80083cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 80083ce:	bf00      	nop
 80083d0:	bf00      	nop
 80083d2:	e7fd      	b.n	80083d0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d00b      	beq.n	80083f2 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 80083da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083de:	f383 8811 	msr	BASEPRI, r3
 80083e2:	f3bf 8f6f 	isb	sy
 80083e6:	f3bf 8f4f 	dsb	sy
 80083ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80083ec:	bf00      	nop
 80083ee:	bf00      	nop
 80083f0:	e7fd      	b.n	80083ee <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80083f2:	f000 fefb 	bl	80091ec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 80083fa:	f3ef 8211 	mrs	r2, BASEPRI
 80083fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	627a      	str	r2, [r7, #36]	@ 0x24
 8008410:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8008412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008414:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8008416:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008418:	2b00      	cmp	r3, #0
 800841a:	d006      	beq.n	800842a <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800841c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	3214      	adds	r2, #20
 8008422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008428:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800842a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	4413      	add	r3, r2
 8008430:	3354      	adds	r3, #84	@ 0x54
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8008438:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	4413      	add	r3, r2
 800843e:	3354      	adds	r3, #84	@ 0x54
 8008440:	2202      	movs	r2, #2
 8008442:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	2b04      	cmp	r3, #4
 8008448:	d83b      	bhi.n	80084c2 <xTaskGenericNotifyFromISR+0x11e>
 800844a:	a201      	add	r2, pc, #4	@ (adr r2, 8008450 <xTaskGenericNotifyFromISR+0xac>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	080084e3 	.word	0x080084e3
 8008454:	08008465 	.word	0x08008465
 8008458:	08008481 	.word	0x08008481
 800845c:	08008499 	.word	0x08008499
 8008460:	080084a7 	.word	0x080084a7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8008464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	3214      	adds	r2, #20
 800846a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	ea42 0103 	orr.w	r1, r2, r3
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	68ba      	ldr	r2, [r7, #8]
 8008478:	3214      	adds	r2, #20
 800847a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800847e:	e033      	b.n	80084e8 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8008480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	3214      	adds	r2, #20
 8008486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848a:	1c59      	adds	r1, r3, #1
 800848c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848e:	68ba      	ldr	r2, [r7, #8]
 8008490:	3214      	adds	r2, #20
 8008492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8008496:	e027      	b.n	80084e8 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8008498:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800849a:	68ba      	ldr	r2, [r7, #8]
 800849c:	3214      	adds	r2, #20
 800849e:	6879      	ldr	r1, [r7, #4]
 80084a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80084a4:	e020      	b.n	80084e8 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80084a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d006      	beq.n	80084bc <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80084ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	3214      	adds	r2, #20
 80084b4:	6879      	ldr	r1, [r7, #4]
 80084b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80084ba:	e015      	b.n	80084e8 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80084bc:	2300      	movs	r3, #0
 80084be:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 80084c0:	e012      	b.n	80084e8 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80084c2:	4b34      	ldr	r3, [pc, #208]	@ (8008594 <xTaskGenericNotifyFromISR+0x1f0>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00d      	beq.n	80084e6 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 80084ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	61fb      	str	r3, [r7, #28]
    }
 80084dc:	bf00      	nop
 80084de:	bf00      	nop
 80084e0:	e7fd      	b.n	80084de <xTaskGenericNotifyFromISR+0x13a>
                    break;
 80084e2:	bf00      	nop
 80084e4:	e000      	b.n	80084e8 <xTaskGenericNotifyFromISR+0x144>
                    break;
 80084e6:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80084e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d146      	bne.n	800857e <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80084f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 80084f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084fc:	f383 8811 	msr	BASEPRI, r3
 8008500:	f3bf 8f6f 	isb	sy
 8008504:	f3bf 8f4f 	dsb	sy
 8008508:	61bb      	str	r3, [r7, #24]
    }
 800850a:	bf00      	nop
 800850c:	bf00      	nop
 800850e:	e7fd      	b.n	800850c <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008510:	4b21      	ldr	r3, [pc, #132]	@ (8008598 <xTaskGenericNotifyFromISR+0x1f4>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d11c      	bne.n	8008552 <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851a:	3304      	adds	r3, #4
 800851c:	4618      	mov	r0, r3
 800851e:	f7fe f9f5 	bl	800690c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8008522:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008526:	2201      	movs	r2, #1
 8008528:	409a      	lsls	r2, r3
 800852a:	4b1c      	ldr	r3, [pc, #112]	@ (800859c <xTaskGenericNotifyFromISR+0x1f8>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	4313      	orrs	r3, r2
 8008530:	4a1a      	ldr	r2, [pc, #104]	@ (800859c <xTaskGenericNotifyFromISR+0x1f8>)
 8008532:	6013      	str	r3, [r2, #0]
 8008534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008538:	4613      	mov	r3, r2
 800853a:	009b      	lsls	r3, r3, #2
 800853c:	4413      	add	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4a17      	ldr	r2, [pc, #92]	@ (80085a0 <xTaskGenericNotifyFromISR+0x1fc>)
 8008542:	441a      	add	r2, r3
 8008544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008546:	3304      	adds	r3, #4
 8008548:	4619      	mov	r1, r3
 800854a:	4610      	mov	r0, r2
 800854c:	f7fe f981 	bl	8006852 <vListInsertEnd>
 8008550:	e005      	b.n	800855e <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008554:	3318      	adds	r3, #24
 8008556:	4619      	mov	r1, r3
 8008558:	4812      	ldr	r0, [pc, #72]	@ (80085a4 <xTaskGenericNotifyFromISR+0x200>)
 800855a:	f7fe f97a 	bl	8006852 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800855e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008562:	4b11      	ldr	r3, [pc, #68]	@ (80085a8 <xTaskGenericNotifyFromISR+0x204>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008568:	429a      	cmp	r2, r3
 800856a:	d908      	bls.n	800857e <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800856c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800856e:	2b00      	cmp	r3, #0
 8008570:	d002      	beq.n	8008578 <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8008572:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008574:	2201      	movs	r2, #1
 8008576:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8008578:	4b0c      	ldr	r3, [pc, #48]	@ (80085ac <xTaskGenericNotifyFromISR+0x208>)
 800857a:	2201      	movs	r2, #1
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008580:	617b      	str	r3, [r7, #20]
        __asm volatile
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	f383 8811 	msr	BASEPRI, r3
    }
 8008588:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800858a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 800858c:	4618      	mov	r0, r3
 800858e:	3740      	adds	r7, #64	@ 0x40
 8008590:	46bd      	mov	sp, r7
 8008592:	bd80      	pop	{r7, pc}
 8008594:	20000408 	.word	0x20000408
 8008598:	2000042c 	.word	0x2000042c
 800859c:	2000040c 	.word	0x2000040c
 80085a0:	20000330 	.word	0x20000330
 80085a4:	200003c4 	.word	0x200003c4
 80085a8:	2000032c 	.word	0x2000032c
 80085ac:	20000418 	.word	0x20000418

080085b0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80085ba:	4b29      	ldr	r3, [pc, #164]	@ (8008660 <prvAddCurrentTaskToDelayedList+0xb0>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085c0:	4b28      	ldr	r3, [pc, #160]	@ (8008664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3304      	adds	r3, #4
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe f9a0 	bl	800690c <uxListRemove>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d10b      	bne.n	80085ea <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80085d2:	4b24      	ldr	r3, [pc, #144]	@ (8008664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085d8:	2201      	movs	r2, #1
 80085da:	fa02 f303 	lsl.w	r3, r2, r3
 80085de:	43da      	mvns	r2, r3
 80085e0:	4b21      	ldr	r3, [pc, #132]	@ (8008668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	4013      	ands	r3, r2
 80085e6:	4a20      	ldr	r2, [pc, #128]	@ (8008668 <prvAddCurrentTaskToDelayedList+0xb8>)
 80085e8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085f0:	d10a      	bne.n	8008608 <prvAddCurrentTaskToDelayedList+0x58>
 80085f2:	683b      	ldr	r3, [r7, #0]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d007      	beq.n	8008608 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80085f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008664 <prvAddCurrentTaskToDelayedList+0xb4>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	3304      	adds	r3, #4
 80085fe:	4619      	mov	r1, r3
 8008600:	481a      	ldr	r0, [pc, #104]	@ (800866c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008602:	f7fe f926 	bl	8006852 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8008606:	e026      	b.n	8008656 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8008608:	68fa      	ldr	r2, [r7, #12]
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4413      	add	r3, r2
 800860e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008610:	4b14      	ldr	r3, [pc, #80]	@ (8008664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	429a      	cmp	r2, r3
 800861e:	d209      	bcs.n	8008634 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008620:	4b13      	ldr	r3, [pc, #76]	@ (8008670 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008622:	681a      	ldr	r2, [r3, #0]
 8008624:	4b0f      	ldr	r3, [pc, #60]	@ (8008664 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	3304      	adds	r3, #4
 800862a:	4619      	mov	r1, r3
 800862c:	4610      	mov	r0, r2
 800862e:	f7fe f934 	bl	800689a <vListInsert>
}
 8008632:	e010      	b.n	8008656 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008634:	4b0f      	ldr	r3, [pc, #60]	@ (8008674 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	4b0a      	ldr	r3, [pc, #40]	@ (8008664 <prvAddCurrentTaskToDelayedList+0xb4>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	3304      	adds	r3, #4
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f7fe f92a 	bl	800689a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8008646:	4b0c      	ldr	r3, [pc, #48]	@ (8008678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68ba      	ldr	r2, [r7, #8]
 800864c:	429a      	cmp	r2, r3
 800864e:	d202      	bcs.n	8008656 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8008650:	4a09      	ldr	r2, [pc, #36]	@ (8008678 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	6013      	str	r3, [r2, #0]
}
 8008656:	bf00      	nop
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000408 	.word	0x20000408
 8008664:	2000032c 	.word	0x2000032c
 8008668:	2000040c 	.word	0x2000040c
 800866c:	200003f0 	.word	0x200003f0
 8008670:	200003c0 	.word	0x200003c0
 8008674:	200003bc 	.word	0x200003bc
 8008678:	20000424 	.word	0x20000424

0800867c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800867c:	b580      	push	{r7, lr}
 800867e:	b084      	sub	sp, #16
 8008680:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8008682:	2300      	movs	r3, #0
 8008684:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8008686:	f000 fb3f 	bl	8008d08 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800868a:	4b12      	ldr	r3, [pc, #72]	@ (80086d4 <xTimerCreateTimerTask+0x58>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00b      	beq.n	80086aa <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8008692:	4b11      	ldr	r3, [pc, #68]	@ (80086d8 <xTimerCreateTimerTask+0x5c>)
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	2302      	movs	r3, #2
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	2300      	movs	r3, #0
 800869c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80086a0:	490e      	ldr	r1, [pc, #56]	@ (80086dc <xTimerCreateTimerTask+0x60>)
 80086a2:	480f      	ldr	r0, [pc, #60]	@ (80086e0 <xTimerCreateTimerTask+0x64>)
 80086a4:	f7fe ff24 	bl	80074f0 <xTaskCreate>
 80086a8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d10b      	bne.n	80086c8 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80086b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086b4:	f383 8811 	msr	BASEPRI, r3
 80086b8:	f3bf 8f6f 	isb	sy
 80086bc:	f3bf 8f4f 	dsb	sy
 80086c0:	603b      	str	r3, [r7, #0]
    }
 80086c2:	bf00      	nop
 80086c4:	bf00      	nop
 80086c6:	e7fd      	b.n	80086c4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80086c8:	687b      	ldr	r3, [r7, #4]
    }
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	20000460 	.word	0x20000460
 80086d8:	20000464 	.word	0x20000464
 80086dc:	0800a940 	.word	0x0800a940
 80086e0:	080088d9 	.word	0x080088d9

080086e4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b088      	sub	sp, #32
 80086e8:	af02      	add	r7, sp, #8
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80086f2:	202c      	movs	r0, #44	@ 0x2c
 80086f4:	f000 fdbc 	bl	8009270 <pvPortMalloc>
 80086f8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80086fa:	697b      	ldr	r3, [r7, #20]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00d      	beq.n	800871c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	2200      	movs	r2, #0
 8008704:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	6a3b      	ldr	r3, [r7, #32]
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 f805 	bl	8008726 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800871c:	697b      	ldr	r3, [r7, #20]
        }
 800871e:	4618      	mov	r0, r3
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8008726:	b580      	push	{r7, lr}
 8008728:	b086      	sub	sp, #24
 800872a:	af00      	add	r7, sp, #0
 800872c:	60f8      	str	r0, [r7, #12]
 800872e:	60b9      	str	r1, [r7, #8]
 8008730:	607a      	str	r2, [r7, #4]
 8008732:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d10b      	bne.n	8008752 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 800873a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873e:	f383 8811 	msr	BASEPRI, r3
 8008742:	f3bf 8f6f 	isb	sy
 8008746:	f3bf 8f4f 	dsb	sy
 800874a:	617b      	str	r3, [r7, #20]
    }
 800874c:	bf00      	nop
 800874e:	bf00      	nop
 8008750:	e7fd      	b.n	800874e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8008752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008754:	2b00      	cmp	r3, #0
 8008756:	d01e      	beq.n	8008796 <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8008758:	f000 fad6 	bl	8008d08 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800875c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8008762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	683a      	ldr	r2, [r7, #0]
 800876c:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800876e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008770:	6a3a      	ldr	r2, [r7, #32]
 8008772:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8008774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008776:	3304      	adds	r3, #4
 8008778:	4618      	mov	r0, r3
 800877a:	f7fe f85d 	bl	8006838 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d008      	beq.n	8008796 <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8008784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008786:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800878a:	f043 0304 	orr.w	r3, r3, #4
 800878e:	b2da      	uxtb	r2, r3
 8008790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008792:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8008796:	bf00      	nop
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08a      	sub	sp, #40	@ 0x28
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	607a      	str	r2, [r7, #4]
 80087ac:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80087ae:	2300      	movs	r3, #0
 80087b0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10b      	bne.n	80087d0 <xTimerGenericCommand+0x30>
        __asm volatile
 80087b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087bc:	f383 8811 	msr	BASEPRI, r3
 80087c0:	f3bf 8f6f 	isb	sy
 80087c4:	f3bf 8f4f 	dsb	sy
 80087c8:	623b      	str	r3, [r7, #32]
    }
 80087ca:	bf00      	nop
 80087cc:	bf00      	nop
 80087ce:	e7fd      	b.n	80087cc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80087d0:	4b19      	ldr	r3, [pc, #100]	@ (8008838 <xTimerGenericCommand+0x98>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d02a      	beq.n	800882e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	2b05      	cmp	r3, #5
 80087e8:	dc18      	bgt.n	800881c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087ea:	f7ff fbdd 	bl	8007fa8 <xTaskGetSchedulerState>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d109      	bne.n	8008808 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087f4:	4b10      	ldr	r3, [pc, #64]	@ (8008838 <xTimerGenericCommand+0x98>)
 80087f6:	6818      	ldr	r0, [r3, #0]
 80087f8:	f107 0114 	add.w	r1, r7, #20
 80087fc:	2300      	movs	r3, #0
 80087fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008800:	f7fe f99e 	bl	8006b40 <xQueueGenericSend>
 8008804:	6278      	str	r0, [r7, #36]	@ 0x24
 8008806:	e012      	b.n	800882e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008808:	4b0b      	ldr	r3, [pc, #44]	@ (8008838 <xTimerGenericCommand+0x98>)
 800880a:	6818      	ldr	r0, [r3, #0]
 800880c:	f107 0114 	add.w	r1, r7, #20
 8008810:	2300      	movs	r3, #0
 8008812:	2200      	movs	r2, #0
 8008814:	f7fe f994 	bl	8006b40 <xQueueGenericSend>
 8008818:	6278      	str	r0, [r7, #36]	@ 0x24
 800881a:	e008      	b.n	800882e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800881c:	4b06      	ldr	r3, [pc, #24]	@ (8008838 <xTimerGenericCommand+0x98>)
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	f107 0114 	add.w	r1, r7, #20
 8008824:	2300      	movs	r3, #0
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	f7fe fa8c 	bl	8006d44 <xQueueGenericSendFromISR>
 800882c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800882e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8008830:	4618      	mov	r0, r3
 8008832:	3728      	adds	r7, #40	@ 0x28
 8008834:	46bd      	mov	sp, r7
 8008836:	bd80      	pop	{r7, pc}
 8008838:	20000460 	.word	0x20000460

0800883c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800883c:	b580      	push	{r7, lr}
 800883e:	b088      	sub	sp, #32
 8008840:	af02      	add	r7, sp, #8
 8008842:	6078      	str	r0, [r7, #4]
 8008844:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008846:	4b23      	ldr	r3, [pc, #140]	@ (80088d4 <prvProcessExpiredTimer+0x98>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	68db      	ldr	r3, [r3, #12]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	3304      	adds	r3, #4
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe f859 	bl	800690c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d023      	beq.n	80088b0 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008868:	697b      	ldr	r3, [r7, #20]
 800886a:	699a      	ldr	r2, [r3, #24]
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	18d1      	adds	r1, r2, r3
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	6978      	ldr	r0, [r7, #20]
 8008876:	f000 f8d5 	bl	8008a24 <prvInsertTimerInActiveList>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d020      	beq.n	80088c2 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008880:	2300      	movs	r3, #0
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	2300      	movs	r3, #0
 8008886:	687a      	ldr	r2, [r7, #4]
 8008888:	2100      	movs	r1, #0
 800888a:	6978      	ldr	r0, [r7, #20]
 800888c:	f7ff ff88 	bl	80087a0 <xTimerGenericCommand>
 8008890:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d114      	bne.n	80088c2 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8008898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889c:	f383 8811 	msr	BASEPRI, r3
 80088a0:	f3bf 8f6f 	isb	sy
 80088a4:	f3bf 8f4f 	dsb	sy
 80088a8:	60fb      	str	r3, [r7, #12]
    }
 80088aa:	bf00      	nop
 80088ac:	bf00      	nop
 80088ae:	e7fd      	b.n	80088ac <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80088b6:	f023 0301 	bic.w	r3, r3, #1
 80088ba:	b2da      	uxtb	r2, r3
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	6978      	ldr	r0, [r7, #20]
 80088c8:	4798      	blx	r3
    }
 80088ca:	bf00      	nop
 80088cc:	3718      	adds	r7, #24
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	20000458 	.word	0x20000458

080088d8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088e0:	f107 0308 	add.w	r3, r7, #8
 80088e4:	4618      	mov	r0, r3
 80088e6:	f000 f859 	bl	800899c <prvGetNextExpireTime>
 80088ea:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	4619      	mov	r1, r3
 80088f0:	68f8      	ldr	r0, [r7, #12]
 80088f2:	f000 f805 	bl	8008900 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80088f6:	f000 f8d7 	bl	8008aa8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088fa:	bf00      	nop
 80088fc:	e7f0      	b.n	80088e0 <prvTimerTask+0x8>
	...

08008900 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8008900:	b580      	push	{r7, lr}
 8008902:	b084      	sub	sp, #16
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800890a:	f7fe ff89 	bl	8007820 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800890e:	f107 0308 	add.w	r3, r7, #8
 8008912:	4618      	mov	r0, r3
 8008914:	f000 f866 	bl	80089e4 <prvSampleTimeNow>
 8008918:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d130      	bne.n	8008982 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d10a      	bne.n	800893c <prvProcessTimerOrBlockTask+0x3c>
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	429a      	cmp	r2, r3
 800892c:	d806      	bhi.n	800893c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800892e:	f7fe ff85 	bl	800783c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff ff81 	bl	800883c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800893a:	e024      	b.n	8008986 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d008      	beq.n	8008954 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008942:	4b13      	ldr	r3, [pc, #76]	@ (8008990 <prvProcessTimerOrBlockTask+0x90>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d101      	bne.n	8008950 <prvProcessTimerOrBlockTask+0x50>
 800894c:	2301      	movs	r3, #1
 800894e:	e000      	b.n	8008952 <prvProcessTimerOrBlockTask+0x52>
 8008950:	2300      	movs	r3, #0
 8008952:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008954:	4b0f      	ldr	r3, [pc, #60]	@ (8008994 <prvProcessTimerOrBlockTask+0x94>)
 8008956:	6818      	ldr	r0, [r3, #0]
 8008958:	687a      	ldr	r2, [r7, #4]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	683a      	ldr	r2, [r7, #0]
 8008960:	4619      	mov	r1, r3
 8008962:	f7fe fd91 	bl	8007488 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8008966:	f7fe ff69 	bl	800783c <xTaskResumeAll>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d10a      	bne.n	8008986 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8008970:	4b09      	ldr	r3, [pc, #36]	@ (8008998 <prvProcessTimerOrBlockTask+0x98>)
 8008972:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008976:	601a      	str	r2, [r3, #0]
 8008978:	f3bf 8f4f 	dsb	sy
 800897c:	f3bf 8f6f 	isb	sy
    }
 8008980:	e001      	b.n	8008986 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8008982:	f7fe ff5b 	bl	800783c <xTaskResumeAll>
    }
 8008986:	bf00      	nop
 8008988:	3710      	adds	r7, #16
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	2000045c 	.word	0x2000045c
 8008994:	20000460 	.word	0x20000460
 8008998:	e000ed04 	.word	0xe000ed04

0800899c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800899c:	b480      	push	{r7}
 800899e:	b085      	sub	sp, #20
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80089a4:	4b0e      	ldr	r3, [pc, #56]	@ (80089e0 <prvGetNextExpireTime+0x44>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d101      	bne.n	80089b2 <prvGetNextExpireTime+0x16>
 80089ae:	2201      	movs	r2, #1
 80089b0:	e000      	b.n	80089b4 <prvGetNextExpireTime+0x18>
 80089b2:	2200      	movs	r2, #0
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d105      	bne.n	80089cc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089c0:	4b07      	ldr	r3, [pc, #28]	@ (80089e0 <prvGetNextExpireTime+0x44>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68db      	ldr	r3, [r3, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	60fb      	str	r3, [r7, #12]
 80089ca:	e001      	b.n	80089d0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80089cc:	2300      	movs	r3, #0
 80089ce:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80089d0:	68fb      	ldr	r3, [r7, #12]
    }
 80089d2:	4618      	mov	r0, r3
 80089d4:	3714      	adds	r7, #20
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	20000458 	.word	0x20000458

080089e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80089ec:	f7fe ffc4 	bl	8007978 <xTaskGetTickCount>
 80089f0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80089f2:	4b0b      	ldr	r3, [pc, #44]	@ (8008a20 <prvSampleTimeNow+0x3c>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d205      	bcs.n	8008a08 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80089fc:	f000 f91e 	bl	8008c3c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	e002      	b.n	8008a0e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8008a0e:	4a04      	ldr	r2, [pc, #16]	@ (8008a20 <prvSampleTimeNow+0x3c>)
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8008a14:	68fb      	ldr	r3, [r7, #12]
    }
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
 8008a1e:	bf00      	nop
 8008a20:	20000468 	.word	0x20000468

08008a24 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8008a24:	b580      	push	{r7, lr}
 8008a26:	b086      	sub	sp, #24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
 8008a30:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8008a32:	2300      	movs	r3, #0
 8008a34:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	68ba      	ldr	r2, [r7, #8]
 8008a3a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	68fa      	ldr	r2, [r7, #12]
 8008a40:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8008a42:	68ba      	ldr	r2, [r7, #8]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d812      	bhi.n	8008a70 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	1ad2      	subs	r2, r2, r3
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d302      	bcc.n	8008a5e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	617b      	str	r3, [r7, #20]
 8008a5c:	e01b      	b.n	8008a96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a5e:	4b10      	ldr	r3, [pc, #64]	@ (8008aa0 <prvInsertTimerInActiveList+0x7c>)
 8008a60:	681a      	ldr	r2, [r3, #0]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	3304      	adds	r3, #4
 8008a66:	4619      	mov	r1, r3
 8008a68:	4610      	mov	r0, r2
 8008a6a:	f7fd ff16 	bl	800689a <vListInsert>
 8008a6e:	e012      	b.n	8008a96 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d206      	bcs.n	8008a86 <prvInsertTimerInActiveList+0x62>
 8008a78:	68ba      	ldr	r2, [r7, #8]
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d302      	bcc.n	8008a86 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8008a80:	2301      	movs	r3, #1
 8008a82:	617b      	str	r3, [r7, #20]
 8008a84:	e007      	b.n	8008a96 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a86:	4b07      	ldr	r3, [pc, #28]	@ (8008aa4 <prvInsertTimerInActiveList+0x80>)
 8008a88:	681a      	ldr	r2, [r3, #0]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	3304      	adds	r3, #4
 8008a8e:	4619      	mov	r1, r3
 8008a90:	4610      	mov	r0, r2
 8008a92:	f7fd ff02 	bl	800689a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8008a96:	697b      	ldr	r3, [r7, #20]
    }
 8008a98:	4618      	mov	r0, r3
 8008a9a:	3718      	adds	r7, #24
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	bd80      	pop	{r7, pc}
 8008aa0:	2000045c 	.word	0x2000045c
 8008aa4:	20000458 	.word	0x20000458

08008aa8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08c      	sub	sp, #48	@ 0x30
 8008aac:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008aae:	e0b2      	b.n	8008c16 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f2c0 80af 	blt.w	8008c16 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abe:	695b      	ldr	r3, [r3, #20]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d004      	beq.n	8008ace <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac6:	3304      	adds	r3, #4
 8008ac8:	4618      	mov	r0, r3
 8008aca:	f7fd ff1f 	bl	800690c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008ace:	1d3b      	adds	r3, r7, #4
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff ff87 	bl	80089e4 <prvSampleTimeNow>
 8008ad6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	2b09      	cmp	r3, #9
 8008adc:	f200 8098 	bhi.w	8008c10 <prvProcessReceivedCommands+0x168>
 8008ae0:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae8 <prvProcessReceivedCommands+0x40>)
 8008ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae6:	bf00      	nop
 8008ae8:	08008b11 	.word	0x08008b11
 8008aec:	08008b11 	.word	0x08008b11
 8008af0:	08008b11 	.word	0x08008b11
 8008af4:	08008b87 	.word	0x08008b87
 8008af8:	08008b9b 	.word	0x08008b9b
 8008afc:	08008be7 	.word	0x08008be7
 8008b00:	08008b11 	.word	0x08008b11
 8008b04:	08008b11 	.word	0x08008b11
 8008b08:	08008b87 	.word	0x08008b87
 8008b0c:	08008b9b 	.word	0x08008b9b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b16:	f043 0301 	orr.w	r3, r3, #1
 8008b1a:	b2da      	uxtb	r2, r3
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b22:	68fa      	ldr	r2, [r7, #12]
 8008b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b26:	699b      	ldr	r3, [r3, #24]
 8008b28:	18d1      	adds	r1, r2, r3
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6a3a      	ldr	r2, [r7, #32]
 8008b2e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b30:	f7ff ff78 	bl	8008a24 <prvInsertTimerInActiveList>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d06c      	beq.n	8008c14 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b40:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b48:	f003 0304 	and.w	r3, r3, #4
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d061      	beq.n	8008c14 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b50:	68fa      	ldr	r2, [r7, #12]
 8008b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	441a      	add	r2, r3
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9300      	str	r3, [sp, #0]
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	2100      	movs	r1, #0
 8008b60:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008b62:	f7ff fe1d 	bl	80087a0 <xTimerGenericCommand>
 8008b66:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d152      	bne.n	8008c14 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	61bb      	str	r3, [r7, #24]
    }
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	e7fd      	b.n	8008b82 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008b8c:	f023 0301 	bic.w	r3, r3, #1
 8008b90:	b2da      	uxtb	r2, r3
 8008b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008b98:	e03d      	b.n	8008c16 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ba0:	f043 0301 	orr.w	r3, r3, #1
 8008ba4:	b2da      	uxtb	r2, r3
 8008ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bac:	68fa      	ldr	r2, [r7, #12]
 8008bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb4:	699b      	ldr	r3, [r3, #24]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d10b      	bne.n	8008bd2 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8008bba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bbe:	f383 8811 	msr	BASEPRI, r3
 8008bc2:	f3bf 8f6f 	isb	sy
 8008bc6:	f3bf 8f4f 	dsb	sy
 8008bca:	617b      	str	r3, [r7, #20]
    }
 8008bcc:	bf00      	nop
 8008bce:	bf00      	nop
 8008bd0:	e7fd      	b.n	8008bce <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd4:	699a      	ldr	r2, [r3, #24]
 8008bd6:	6a3b      	ldr	r3, [r7, #32]
 8008bd8:	18d1      	adds	r1, r2, r3
 8008bda:	6a3b      	ldr	r3, [r7, #32]
 8008bdc:	6a3a      	ldr	r2, [r7, #32]
 8008bde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008be0:	f7ff ff20 	bl	8008a24 <prvInsertTimerInActiveList>
                        break;
 8008be4:	e017      	b.n	8008c16 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008be8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008bec:	f003 0302 	and.w	r3, r3, #2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d103      	bne.n	8008bfc <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8008bf4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008bf6:	f000 fc1d 	bl	8009434 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8008bfa:	e00c      	b.n	8008c16 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c02:	f023 0301 	bic.w	r3, r3, #1
 8008c06:	b2da      	uxtb	r2, r3
 8008c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8008c0e:	e002      	b.n	8008c16 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8008c10:	bf00      	nop
 8008c12:	e000      	b.n	8008c16 <prvProcessReceivedCommands+0x16e>
                        break;
 8008c14:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c16:	4b08      	ldr	r3, [pc, #32]	@ (8008c38 <prvProcessReceivedCommands+0x190>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f107 0108 	add.w	r1, r7, #8
 8008c1e:	2200      	movs	r2, #0
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe f93d 	bl	8006ea0 <xQueueReceive>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f47f af41 	bne.w	8008ab0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8008c2e:	bf00      	nop
 8008c30:	bf00      	nop
 8008c32:	3728      	adds	r7, #40	@ 0x28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	20000460 	.word	0x20000460

08008c3c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c42:	e049      	b.n	8008cd8 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c44:	4b2e      	ldr	r3, [pc, #184]	@ (8008d00 <prvSwitchTimerLists+0xc4>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c4e:	4b2c      	ldr	r3, [pc, #176]	@ (8008d00 <prvSwitchTimerLists+0xc4>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3304      	adds	r3, #4
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f7fd fe55 	bl	800690c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	6a1b      	ldr	r3, [r3, #32]
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c70:	f003 0304 	and.w	r3, r3, #4
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d02f      	beq.n	8008cd8 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	4413      	add	r3, r2
 8008c80:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8008c82:	68ba      	ldr	r2, [r7, #8]
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	429a      	cmp	r2, r3
 8008c88:	d90e      	bls.n	8008ca8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	68ba      	ldr	r2, [r7, #8]
 8008c8e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008c96:	4b1a      	ldr	r3, [pc, #104]	@ (8008d00 <prvSwitchTimerLists+0xc4>)
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	3304      	adds	r3, #4
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	4610      	mov	r0, r2
 8008ca2:	f7fd fdfa 	bl	800689a <vListInsert>
 8008ca6:	e017      	b.n	8008cd8 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ca8:	2300      	movs	r3, #0
 8008caa:	9300      	str	r3, [sp, #0]
 8008cac:	2300      	movs	r3, #0
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	2100      	movs	r1, #0
 8008cb2:	68f8      	ldr	r0, [r7, #12]
 8008cb4:	f7ff fd74 	bl	80087a0 <xTimerGenericCommand>
 8008cb8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10b      	bne.n	8008cd8 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	603b      	str	r3, [r7, #0]
    }
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	e7fd      	b.n	8008cd4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cd8:	4b09      	ldr	r3, [pc, #36]	@ (8008d00 <prvSwitchTimerLists+0xc4>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d1b0      	bne.n	8008c44 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8008ce2:	4b07      	ldr	r3, [pc, #28]	@ (8008d00 <prvSwitchTimerLists+0xc4>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8008ce8:	4b06      	ldr	r3, [pc, #24]	@ (8008d04 <prvSwitchTimerLists+0xc8>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a04      	ldr	r2, [pc, #16]	@ (8008d00 <prvSwitchTimerLists+0xc4>)
 8008cee:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8008cf0:	4a04      	ldr	r2, [pc, #16]	@ (8008d04 <prvSwitchTimerLists+0xc8>)
 8008cf2:	697b      	ldr	r3, [r7, #20]
 8008cf4:	6013      	str	r3, [r2, #0]
    }
 8008cf6:	bf00      	nop
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20000458 	.word	0x20000458
 8008d04:	2000045c 	.word	0x2000045c

08008d08 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8008d0c:	f000 f986 	bl	800901c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8008d10:	4b12      	ldr	r3, [pc, #72]	@ (8008d5c <prvCheckForValidListAndQueue+0x54>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d11d      	bne.n	8008d54 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8008d18:	4811      	ldr	r0, [pc, #68]	@ (8008d60 <prvCheckForValidListAndQueue+0x58>)
 8008d1a:	f7fd fd6d 	bl	80067f8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8008d1e:	4811      	ldr	r0, [pc, #68]	@ (8008d64 <prvCheckForValidListAndQueue+0x5c>)
 8008d20:	f7fd fd6a 	bl	80067f8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8008d24:	4b10      	ldr	r3, [pc, #64]	@ (8008d68 <prvCheckForValidListAndQueue+0x60>)
 8008d26:	4a0e      	ldr	r2, [pc, #56]	@ (8008d60 <prvCheckForValidListAndQueue+0x58>)
 8008d28:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8008d2a:	4b10      	ldr	r3, [pc, #64]	@ (8008d6c <prvCheckForValidListAndQueue+0x64>)
 8008d2c:	4a0d      	ldr	r2, [pc, #52]	@ (8008d64 <prvCheckForValidListAndQueue+0x5c>)
 8008d2e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8008d30:	2200      	movs	r2, #0
 8008d32:	210c      	movs	r1, #12
 8008d34:	200a      	movs	r0, #10
 8008d36:	f7fd fe7d 	bl	8006a34 <xQueueGenericCreate>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	4a07      	ldr	r2, [pc, #28]	@ (8008d5c <prvCheckForValidListAndQueue+0x54>)
 8008d3e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8008d40:	4b06      	ldr	r3, [pc, #24]	@ (8008d5c <prvCheckForValidListAndQueue+0x54>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d005      	beq.n	8008d54 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d48:	4b04      	ldr	r3, [pc, #16]	@ (8008d5c <prvCheckForValidListAndQueue+0x54>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	4908      	ldr	r1, [pc, #32]	@ (8008d70 <prvCheckForValidListAndQueue+0x68>)
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f7fe fb70 	bl	8007434 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8008d54:	f000 f994 	bl	8009080 <vPortExitCritical>
    }
 8008d58:	bf00      	nop
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	20000460 	.word	0x20000460
 8008d60:	20000430 	.word	0x20000430
 8008d64:	20000444 	.word	0x20000444
 8008d68:	20000458 	.word	0x20000458
 8008d6c:	2000045c 	.word	0x2000045c
 8008d70:	0800a948 	.word	0x0800a948

08008d74 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10b      	bne.n	8008d9e <pvTimerGetTimerID+0x2a>
        __asm volatile
 8008d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d8a:	f383 8811 	msr	BASEPRI, r3
 8008d8e:	f3bf 8f6f 	isb	sy
 8008d92:	f3bf 8f4f 	dsb	sy
 8008d96:	60fb      	str	r3, [r7, #12]
    }
 8008d98:	bf00      	nop
 8008d9a:	bf00      	nop
 8008d9c:	e7fd      	b.n	8008d9a <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8008d9e:	f000 f93d 	bl	800901c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8008da8:	f000 f96a 	bl	8009080 <vPortExitCritical>

        return pvReturn;
 8008dac:	693b      	ldr	r3, [r7, #16]
    }
 8008dae:	4618      	mov	r0, r3
 8008db0:	3718      	adds	r7, #24
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	3b04      	subs	r3, #4
 8008dc8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008dd0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	3b04      	subs	r3, #4
 8008dd6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	f023 0201 	bic.w	r2, r3, #1
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3b04      	subs	r3, #4
 8008de6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008de8:	4a0c      	ldr	r2, [pc, #48]	@ (8008e1c <pxPortInitialiseStack+0x64>)
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	3b14      	subs	r3, #20
 8008df2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008df4:	687a      	ldr	r2, [r7, #4]
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	3b04      	subs	r3, #4
 8008dfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f06f 0202 	mvn.w	r2, #2
 8008e06:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	3b20      	subs	r3, #32
 8008e0c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
}
 8008e10:	4618      	mov	r0, r3
 8008e12:	3714      	adds	r7, #20
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr
 8008e1c:	08008e21 	.word	0x08008e21

08008e20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e20:	b480      	push	{r7}
 8008e22:	b085      	sub	sp, #20
 8008e24:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008e26:	2300      	movs	r3, #0
 8008e28:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008e2a:	4b13      	ldr	r3, [pc, #76]	@ (8008e78 <prvTaskExitError+0x58>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008e32:	d00b      	beq.n	8008e4c <prvTaskExitError+0x2c>
        __asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	60fb      	str	r3, [r7, #12]
    }
 8008e46:	bf00      	nop
 8008e48:	bf00      	nop
 8008e4a:	e7fd      	b.n	8008e48 <prvTaskExitError+0x28>
        __asm volatile
 8008e4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e50:	f383 8811 	msr	BASEPRI, r3
 8008e54:	f3bf 8f6f 	isb	sy
 8008e58:	f3bf 8f4f 	dsb	sy
 8008e5c:	60bb      	str	r3, [r7, #8]
    }
 8008e5e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008e60:	bf00      	nop
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d0fc      	beq.n	8008e62 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008e68:	bf00      	nop
 8008e6a:	bf00      	nop
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	20000078 	.word	0x20000078
 8008e7c:	00000000 	.word	0x00000000

08008e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008e80:	4b07      	ldr	r3, [pc, #28]	@ (8008ea0 <pxCurrentTCBConst2>)
 8008e82:	6819      	ldr	r1, [r3, #0]
 8008e84:	6808      	ldr	r0, [r1, #0]
 8008e86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e8a:	f380 8809 	msr	PSP, r0
 8008e8e:	f3bf 8f6f 	isb	sy
 8008e92:	f04f 0000 	mov.w	r0, #0
 8008e96:	f380 8811 	msr	BASEPRI, r0
 8008e9a:	4770      	bx	lr
 8008e9c:	f3af 8000 	nop.w

08008ea0 <pxCurrentTCBConst2>:
 8008ea0:	2000032c 	.word	0x2000032c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008ea4:	bf00      	nop
 8008ea6:	bf00      	nop

08008ea8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008ea8:	4808      	ldr	r0, [pc, #32]	@ (8008ecc <prvPortStartFirstTask+0x24>)
 8008eaa:	6800      	ldr	r0, [r0, #0]
 8008eac:	6800      	ldr	r0, [r0, #0]
 8008eae:	f380 8808 	msr	MSP, r0
 8008eb2:	f04f 0000 	mov.w	r0, #0
 8008eb6:	f380 8814 	msr	CONTROL, r0
 8008eba:	b662      	cpsie	i
 8008ebc:	b661      	cpsie	f
 8008ebe:	f3bf 8f4f 	dsb	sy
 8008ec2:	f3bf 8f6f 	isb	sy
 8008ec6:	df00      	svc	0
 8008ec8:	bf00      	nop
 8008eca:	0000      	.short	0x0000
 8008ecc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008ed0:	bf00      	nop
 8008ed2:	bf00      	nop

08008ed4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b086      	sub	sp, #24
 8008ed8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008eda:	4b47      	ldr	r3, [pc, #284]	@ (8008ff8 <xPortStartScheduler+0x124>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a47      	ldr	r2, [pc, #284]	@ (8008ffc <xPortStartScheduler+0x128>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d10b      	bne.n	8008efc <xPortStartScheduler+0x28>
        __asm volatile
 8008ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee8:	f383 8811 	msr	BASEPRI, r3
 8008eec:	f3bf 8f6f 	isb	sy
 8008ef0:	f3bf 8f4f 	dsb	sy
 8008ef4:	613b      	str	r3, [r7, #16]
    }
 8008ef6:	bf00      	nop
 8008ef8:	bf00      	nop
 8008efa:	e7fd      	b.n	8008ef8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008efc:	4b3e      	ldr	r3, [pc, #248]	@ (8008ff8 <xPortStartScheduler+0x124>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a3f      	ldr	r2, [pc, #252]	@ (8009000 <xPortStartScheduler+0x12c>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d10b      	bne.n	8008f1e <xPortStartScheduler+0x4a>
        __asm volatile
 8008f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f0a:	f383 8811 	msr	BASEPRI, r3
 8008f0e:	f3bf 8f6f 	isb	sy
 8008f12:	f3bf 8f4f 	dsb	sy
 8008f16:	60fb      	str	r3, [r7, #12]
    }
 8008f18:	bf00      	nop
 8008f1a:	bf00      	nop
 8008f1c:	e7fd      	b.n	8008f1a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008f1e:	4b39      	ldr	r3, [pc, #228]	@ (8009004 <xPortStartScheduler+0x130>)
 8008f20:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	781b      	ldrb	r3, [r3, #0]
 8008f26:	b2db      	uxtb	r3, r3
 8008f28:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	22ff      	movs	r2, #255	@ 0xff
 8008f2e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	b2db      	uxtb	r3, r3
 8008f36:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f38:	78fb      	ldrb	r3, [r7, #3]
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008f40:	b2da      	uxtb	r2, r3
 8008f42:	4b31      	ldr	r3, [pc, #196]	@ (8009008 <xPortStartScheduler+0x134>)
 8008f44:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f46:	4b31      	ldr	r3, [pc, #196]	@ (800900c <xPortStartScheduler+0x138>)
 8008f48:	2207      	movs	r2, #7
 8008f4a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f4c:	e009      	b.n	8008f62 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8008f4e:	4b2f      	ldr	r3, [pc, #188]	@ (800900c <xPortStartScheduler+0x138>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	4a2d      	ldr	r2, [pc, #180]	@ (800900c <xPortStartScheduler+0x138>)
 8008f56:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f58:	78fb      	ldrb	r3, [r7, #3]
 8008f5a:	b2db      	uxtb	r3, r3
 8008f5c:	005b      	lsls	r3, r3, #1
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f6a:	2b80      	cmp	r3, #128	@ 0x80
 8008f6c:	d0ef      	beq.n	8008f4e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f6e:	4b27      	ldr	r3, [pc, #156]	@ (800900c <xPortStartScheduler+0x138>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f1c3 0307 	rsb	r3, r3, #7
 8008f76:	2b04      	cmp	r3, #4
 8008f78:	d00b      	beq.n	8008f92 <xPortStartScheduler+0xbe>
        __asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	60bb      	str	r3, [r7, #8]
    }
 8008f8c:	bf00      	nop
 8008f8e:	bf00      	nop
 8008f90:	e7fd      	b.n	8008f8e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f92:	4b1e      	ldr	r3, [pc, #120]	@ (800900c <xPortStartScheduler+0x138>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	021b      	lsls	r3, r3, #8
 8008f98:	4a1c      	ldr	r2, [pc, #112]	@ (800900c <xPortStartScheduler+0x138>)
 8008f9a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800900c <xPortStartScheduler+0x138>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008fa4:	4a19      	ldr	r2, [pc, #100]	@ (800900c <xPortStartScheduler+0x138>)
 8008fa6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	b2da      	uxtb	r2, r3
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008fb0:	4b17      	ldr	r3, [pc, #92]	@ (8009010 <xPortStartScheduler+0x13c>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a16      	ldr	r2, [pc, #88]	@ (8009010 <xPortStartScheduler+0x13c>)
 8008fb6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008fba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008fbc:	4b14      	ldr	r3, [pc, #80]	@ (8009010 <xPortStartScheduler+0x13c>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a13      	ldr	r2, [pc, #76]	@ (8009010 <xPortStartScheduler+0x13c>)
 8008fc2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008fc6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008fc8:	f000 f8e0 	bl	800918c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008fcc:	4b11      	ldr	r3, [pc, #68]	@ (8009014 <xPortStartScheduler+0x140>)
 8008fce:	2200      	movs	r2, #0
 8008fd0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008fd2:	f000 f8ff 	bl	80091d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fd6:	4b10      	ldr	r3, [pc, #64]	@ (8009018 <xPortStartScheduler+0x144>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a0f      	ldr	r2, [pc, #60]	@ (8009018 <xPortStartScheduler+0x144>)
 8008fdc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008fe0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008fe2:	f7ff ff61 	bl	8008ea8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008fe6:	f7fe fd91 	bl	8007b0c <vTaskSwitchContext>
    prvTaskExitError();
 8008fea:	f7ff ff19 	bl	8008e20 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	e000ed00 	.word	0xe000ed00
 8008ffc:	410fc271 	.word	0x410fc271
 8009000:	410fc270 	.word	0x410fc270
 8009004:	e000e400 	.word	0xe000e400
 8009008:	2000046c 	.word	0x2000046c
 800900c:	20000470 	.word	0x20000470
 8009010:	e000ed20 	.word	0xe000ed20
 8009014:	20000078 	.word	0x20000078
 8009018:	e000ef34 	.word	0xe000ef34

0800901c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
        __asm volatile
 8009022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009026:	f383 8811 	msr	BASEPRI, r3
 800902a:	f3bf 8f6f 	isb	sy
 800902e:	f3bf 8f4f 	dsb	sy
 8009032:	607b      	str	r3, [r7, #4]
    }
 8009034:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009036:	4b10      	ldr	r3, [pc, #64]	@ (8009078 <vPortEnterCritical+0x5c>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	3301      	adds	r3, #1
 800903c:	4a0e      	ldr	r2, [pc, #56]	@ (8009078 <vPortEnterCritical+0x5c>)
 800903e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8009040:	4b0d      	ldr	r3, [pc, #52]	@ (8009078 <vPortEnterCritical+0x5c>)
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	2b01      	cmp	r3, #1
 8009046:	d110      	bne.n	800906a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009048:	4b0c      	ldr	r3, [pc, #48]	@ (800907c <vPortEnterCritical+0x60>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00b      	beq.n	800906a <vPortEnterCritical+0x4e>
        __asm volatile
 8009052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009056:	f383 8811 	msr	BASEPRI, r3
 800905a:	f3bf 8f6f 	isb	sy
 800905e:	f3bf 8f4f 	dsb	sy
 8009062:	603b      	str	r3, [r7, #0]
    }
 8009064:	bf00      	nop
 8009066:	bf00      	nop
 8009068:	e7fd      	b.n	8009066 <vPortEnterCritical+0x4a>
    }
}
 800906a:	bf00      	nop
 800906c:	370c      	adds	r7, #12
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
 8009076:	bf00      	nop
 8009078:	20000078 	.word	0x20000078
 800907c:	e000ed04 	.word	0xe000ed04

08009080 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8009086:	4b12      	ldr	r3, [pc, #72]	@ (80090d0 <vPortExitCritical+0x50>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	2b00      	cmp	r3, #0
 800908c:	d10b      	bne.n	80090a6 <vPortExitCritical+0x26>
        __asm volatile
 800908e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009092:	f383 8811 	msr	BASEPRI, r3
 8009096:	f3bf 8f6f 	isb	sy
 800909a:	f3bf 8f4f 	dsb	sy
 800909e:	607b      	str	r3, [r7, #4]
    }
 80090a0:	bf00      	nop
 80090a2:	bf00      	nop
 80090a4:	e7fd      	b.n	80090a2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80090a6:	4b0a      	ldr	r3, [pc, #40]	@ (80090d0 <vPortExitCritical+0x50>)
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	4a08      	ldr	r2, [pc, #32]	@ (80090d0 <vPortExitCritical+0x50>)
 80090ae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80090b0:	4b07      	ldr	r3, [pc, #28]	@ (80090d0 <vPortExitCritical+0x50>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d105      	bne.n	80090c4 <vPortExitCritical+0x44>
 80090b8:	2300      	movs	r3, #0
 80090ba:	603b      	str	r3, [r7, #0]
        __asm volatile
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	f383 8811 	msr	BASEPRI, r3
    }
 80090c2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr
 80090d0:	20000078 	.word	0x20000078
	...

080090e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80090e0:	f3ef 8009 	mrs	r0, PSP
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	4b15      	ldr	r3, [pc, #84]	@ (8009140 <pxCurrentTCBConst>)
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	f01e 0f10 	tst.w	lr, #16
 80090f0:	bf08      	it	eq
 80090f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090fa:	6010      	str	r0, [r2, #0]
 80090fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009100:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009104:	f380 8811 	msr	BASEPRI, r0
 8009108:	f3bf 8f4f 	dsb	sy
 800910c:	f3bf 8f6f 	isb	sy
 8009110:	f7fe fcfc 	bl	8007b0c <vTaskSwitchContext>
 8009114:	f04f 0000 	mov.w	r0, #0
 8009118:	f380 8811 	msr	BASEPRI, r0
 800911c:	bc09      	pop	{r0, r3}
 800911e:	6819      	ldr	r1, [r3, #0]
 8009120:	6808      	ldr	r0, [r1, #0]
 8009122:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009126:	f01e 0f10 	tst.w	lr, #16
 800912a:	bf08      	it	eq
 800912c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009130:	f380 8809 	msr	PSP, r0
 8009134:	f3bf 8f6f 	isb	sy
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	f3af 8000 	nop.w

08009140 <pxCurrentTCBConst>:
 8009140:	2000032c 	.word	0x2000032c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009144:	bf00      	nop
 8009146:	bf00      	nop

08009148 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
        __asm volatile
 800914e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009152:	f383 8811 	msr	BASEPRI, r3
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	f3bf 8f4f 	dsb	sy
 800915e:	607b      	str	r3, [r7, #4]
    }
 8009160:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009162:	f7fe fc19 	bl	8007998 <xTaskIncrementTick>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d003      	beq.n	8009174 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800916c:	4b06      	ldr	r3, [pc, #24]	@ (8009188 <SysTick_Handler+0x40>)
 800916e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009172:	601a      	str	r2, [r3, #0]
 8009174:	2300      	movs	r3, #0
 8009176:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	f383 8811 	msr	BASEPRI, r3
    }
 800917e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800918c:	b480      	push	{r7}
 800918e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009190:	4b0b      	ldr	r3, [pc, #44]	@ (80091c0 <vPortSetupTimerInterrupt+0x34>)
 8009192:	2200      	movs	r2, #0
 8009194:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009196:	4b0b      	ldr	r3, [pc, #44]	@ (80091c4 <vPortSetupTimerInterrupt+0x38>)
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800919c:	4b0a      	ldr	r3, [pc, #40]	@ (80091c8 <vPortSetupTimerInterrupt+0x3c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a0a      	ldr	r2, [pc, #40]	@ (80091cc <vPortSetupTimerInterrupt+0x40>)
 80091a2:	fba2 2303 	umull	r2, r3, r2, r3
 80091a6:	099b      	lsrs	r3, r3, #6
 80091a8:	4a09      	ldr	r2, [pc, #36]	@ (80091d0 <vPortSetupTimerInterrupt+0x44>)
 80091aa:	3b01      	subs	r3, #1
 80091ac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80091ae:	4b04      	ldr	r3, [pc, #16]	@ (80091c0 <vPortSetupTimerInterrupt+0x34>)
 80091b0:	2207      	movs	r2, #7
 80091b2:	601a      	str	r2, [r3, #0]
}
 80091b4:	bf00      	nop
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	e000e010 	.word	0xe000e010
 80091c4:	e000e018 	.word	0xe000e018
 80091c8:	20000068 	.word	0x20000068
 80091cc:	10624dd3 	.word	0x10624dd3
 80091d0:	e000e014 	.word	0xe000e014

080091d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80091d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80091e4 <vPortEnableVFP+0x10>
 80091d8:	6801      	ldr	r1, [r0, #0]
 80091da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80091de:	6001      	str	r1, [r0, #0]
 80091e0:	4770      	bx	lr
 80091e2:	0000      	.short	0x0000
 80091e4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80091e8:	bf00      	nop
 80091ea:	bf00      	nop

080091ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80091ec:	b480      	push	{r7}
 80091ee:	b085      	sub	sp, #20
 80091f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80091f2:	f3ef 8305 	mrs	r3, IPSR
 80091f6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2b0f      	cmp	r3, #15
 80091fc:	d915      	bls.n	800922a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091fe:	4a18      	ldr	r2, [pc, #96]	@ (8009260 <vPortValidateInterruptPriority+0x74>)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4413      	add	r3, r2
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009208:	4b16      	ldr	r3, [pc, #88]	@ (8009264 <vPortValidateInterruptPriority+0x78>)
 800920a:	781b      	ldrb	r3, [r3, #0]
 800920c:	7afa      	ldrb	r2, [r7, #11]
 800920e:	429a      	cmp	r2, r3
 8009210:	d20b      	bcs.n	800922a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8009212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	607b      	str	r3, [r7, #4]
    }
 8009224:	bf00      	nop
 8009226:	bf00      	nop
 8009228:	e7fd      	b.n	8009226 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800922a:	4b0f      	ldr	r3, [pc, #60]	@ (8009268 <vPortValidateInterruptPriority+0x7c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009232:	4b0e      	ldr	r3, [pc, #56]	@ (800926c <vPortValidateInterruptPriority+0x80>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d90b      	bls.n	8009252 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800923a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800923e:	f383 8811 	msr	BASEPRI, r3
 8009242:	f3bf 8f6f 	isb	sy
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	603b      	str	r3, [r7, #0]
    }
 800924c:	bf00      	nop
 800924e:	bf00      	nop
 8009250:	e7fd      	b.n	800924e <vPortValidateInterruptPriority+0x62>
    }
 8009252:	bf00      	nop
 8009254:	3714      	adds	r7, #20
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr
 800925e:	bf00      	nop
 8009260:	e000e3f0 	.word	0xe000e3f0
 8009264:	2000046c 	.word	0x2000046c
 8009268:	e000ed0c 	.word	0xe000ed0c
 800926c:	20000470 	.word	0x20000470

08009270 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b08a      	sub	sp, #40	@ 0x28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8009278:	2300      	movs	r3, #0
 800927a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800927c:	f7fe fad0 	bl	8007820 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009280:	4b66      	ldr	r3, [pc, #408]	@ (800941c <pvPortMalloc+0x1ac>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d101      	bne.n	800928c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009288:	f000 f938 	bl	80094fc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800928c:	4b64      	ldr	r3, [pc, #400]	@ (8009420 <pvPortMalloc+0x1b0>)
 800928e:	681a      	ldr	r2, [r3, #0]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4013      	ands	r3, r2
 8009294:	2b00      	cmp	r3, #0
 8009296:	f040 80a9 	bne.w	80093ec <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d02e      	beq.n	80092fe <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80092a0:	2208      	movs	r2, #8
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 80092a6:	687a      	ldr	r2, [r7, #4]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d228      	bcs.n	80092fe <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 80092ac:	2208      	movs	r2, #8
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	4413      	add	r3, r2
 80092b2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	f003 0307 	and.w	r3, r3, #7
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d022      	beq.n	8009304 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	f023 0307 	bic.w	r3, r3, #7
 80092c4:	3308      	adds	r3, #8
 80092c6:	687a      	ldr	r2, [r7, #4]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d215      	bcs.n	80092f8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f023 0307 	bic.w	r3, r3, #7
 80092d2:	3308      	adds	r3, #8
 80092d4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f003 0307 	and.w	r3, r3, #7
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d011      	beq.n	8009304 <pvPortMalloc+0x94>
        __asm volatile
 80092e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e4:	f383 8811 	msr	BASEPRI, r3
 80092e8:	f3bf 8f6f 	isb	sy
 80092ec:	f3bf 8f4f 	dsb	sy
 80092f0:	617b      	str	r3, [r7, #20]
    }
 80092f2:	bf00      	nop
 80092f4:	bf00      	nop
 80092f6:	e7fd      	b.n	80092f4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80092f8:	2300      	movs	r3, #0
 80092fa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80092fc:	e002      	b.n	8009304 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80092fe:	2300      	movs	r3, #0
 8009300:	607b      	str	r3, [r7, #4]
 8009302:	e000      	b.n	8009306 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009304:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d06f      	beq.n	80093ec <pvPortMalloc+0x17c>
 800930c:	4b45      	ldr	r3, [pc, #276]	@ (8009424 <pvPortMalloc+0x1b4>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	429a      	cmp	r2, r3
 8009314:	d86a      	bhi.n	80093ec <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009316:	4b44      	ldr	r3, [pc, #272]	@ (8009428 <pvPortMalloc+0x1b8>)
 8009318:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800931a:	4b43      	ldr	r3, [pc, #268]	@ (8009428 <pvPortMalloc+0x1b8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009320:	e004      	b.n	800932c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800932c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	687a      	ldr	r2, [r7, #4]
 8009332:	429a      	cmp	r2, r3
 8009334:	d903      	bls.n	800933e <pvPortMalloc+0xce>
 8009336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1f1      	bne.n	8009322 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800933e:	4b37      	ldr	r3, [pc, #220]	@ (800941c <pvPortMalloc+0x1ac>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009344:	429a      	cmp	r2, r3
 8009346:	d051      	beq.n	80093ec <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009348:	6a3b      	ldr	r3, [r7, #32]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2208      	movs	r2, #8
 800934e:	4413      	add	r3, r2
 8009350:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	6a3b      	ldr	r3, [r7, #32]
 8009358:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800935a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935c:	685a      	ldr	r2, [r3, #4]
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	1ad2      	subs	r2, r2, r3
 8009362:	2308      	movs	r3, #8
 8009364:	005b      	lsls	r3, r3, #1
 8009366:	429a      	cmp	r2, r3
 8009368:	d920      	bls.n	80093ac <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800936a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4413      	add	r3, r2
 8009370:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009372:	69bb      	ldr	r3, [r7, #24]
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00b      	beq.n	8009394 <pvPortMalloc+0x124>
        __asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009380:	f383 8811 	msr	BASEPRI, r3
 8009384:	f3bf 8f6f 	isb	sy
 8009388:	f3bf 8f4f 	dsb	sy
 800938c:	613b      	str	r3, [r7, #16]
    }
 800938e:	bf00      	nop
 8009390:	bf00      	nop
 8009392:	e7fd      	b.n	8009390 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009396:	685a      	ldr	r2, [r3, #4]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	1ad2      	subs	r2, r2, r3
 800939c:	69bb      	ldr	r3, [r7, #24]
 800939e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80093a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80093a6:	69b8      	ldr	r0, [r7, #24]
 80093a8:	f000 f90a 	bl	80095c0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80093ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009424 <pvPortMalloc+0x1b4>)
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	4a1b      	ldr	r2, [pc, #108]	@ (8009424 <pvPortMalloc+0x1b4>)
 80093b8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80093ba:	4b1a      	ldr	r3, [pc, #104]	@ (8009424 <pvPortMalloc+0x1b4>)
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	4b1b      	ldr	r3, [pc, #108]	@ (800942c <pvPortMalloc+0x1bc>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d203      	bcs.n	80093ce <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80093c6:	4b17      	ldr	r3, [pc, #92]	@ (8009424 <pvPortMalloc+0x1b4>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	4a18      	ldr	r2, [pc, #96]	@ (800942c <pvPortMalloc+0x1bc>)
 80093cc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80093ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093d0:	685a      	ldr	r2, [r3, #4]
 80093d2:	4b13      	ldr	r3, [pc, #76]	@ (8009420 <pvPortMalloc+0x1b0>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	431a      	orrs	r2, r3
 80093d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093da:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80093dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093de:	2200      	movs	r2, #0
 80093e0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80093e2:	4b13      	ldr	r3, [pc, #76]	@ (8009430 <pvPortMalloc+0x1c0>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	3301      	adds	r3, #1
 80093e8:	4a11      	ldr	r2, [pc, #68]	@ (8009430 <pvPortMalloc+0x1c0>)
 80093ea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80093ec:	f7fe fa26 	bl	800783c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80093f0:	69fb      	ldr	r3, [r7, #28]
 80093f2:	f003 0307 	and.w	r3, r3, #7
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d00b      	beq.n	8009412 <pvPortMalloc+0x1a2>
        __asm volatile
 80093fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093fe:	f383 8811 	msr	BASEPRI, r3
 8009402:	f3bf 8f6f 	isb	sy
 8009406:	f3bf 8f4f 	dsb	sy
 800940a:	60fb      	str	r3, [r7, #12]
    }
 800940c:	bf00      	nop
 800940e:	bf00      	nop
 8009410:	e7fd      	b.n	800940e <pvPortMalloc+0x19e>
    return pvReturn;
 8009412:	69fb      	ldr	r3, [r7, #28]
}
 8009414:	4618      	mov	r0, r3
 8009416:	3728      	adds	r7, #40	@ 0x28
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	2001947c 	.word	0x2001947c
 8009420:	20019490 	.word	0x20019490
 8009424:	20019480 	.word	0x20019480
 8009428:	20019474 	.word	0x20019474
 800942c:	20019484 	.word	0x20019484
 8009430:	20019488 	.word	0x20019488

08009434 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b086      	sub	sp, #24
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d04f      	beq.n	80094e6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8009446:	2308      	movs	r3, #8
 8009448:	425b      	negs	r3, r3
 800944a:	697a      	ldr	r2, [r7, #20]
 800944c:	4413      	add	r3, r2
 800944e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009450:	697b      	ldr	r3, [r7, #20]
 8009452:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	4b25      	ldr	r3, [pc, #148]	@ (80094f0 <vPortFree+0xbc>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4013      	ands	r3, r2
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10b      	bne.n	800947a <vPortFree+0x46>
        __asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	60fb      	str	r3, [r7, #12]
    }
 8009474:	bf00      	nop
 8009476:	bf00      	nop
 8009478:	e7fd      	b.n	8009476 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800947a:	693b      	ldr	r3, [r7, #16]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d00b      	beq.n	800949a <vPortFree+0x66>
        __asm volatile
 8009482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009486:	f383 8811 	msr	BASEPRI, r3
 800948a:	f3bf 8f6f 	isb	sy
 800948e:	f3bf 8f4f 	dsb	sy
 8009492:	60bb      	str	r3, [r7, #8]
    }
 8009494:	bf00      	nop
 8009496:	bf00      	nop
 8009498:	e7fd      	b.n	8009496 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800949a:	693b      	ldr	r3, [r7, #16]
 800949c:	685a      	ldr	r2, [r3, #4]
 800949e:	4b14      	ldr	r3, [pc, #80]	@ (80094f0 <vPortFree+0xbc>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4013      	ands	r3, r2
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d01e      	beq.n	80094e6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80094a8:	693b      	ldr	r3, [r7, #16]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d11a      	bne.n	80094e6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	685a      	ldr	r2, [r3, #4]
 80094b4:	4b0e      	ldr	r3, [pc, #56]	@ (80094f0 <vPortFree+0xbc>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	43db      	mvns	r3, r3
 80094ba:	401a      	ands	r2, r3
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80094c0:	f7fe f9ae 	bl	8007820 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	4b0a      	ldr	r3, [pc, #40]	@ (80094f4 <vPortFree+0xc0>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4413      	add	r3, r2
 80094ce:	4a09      	ldr	r2, [pc, #36]	@ (80094f4 <vPortFree+0xc0>)
 80094d0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80094d2:	6938      	ldr	r0, [r7, #16]
 80094d4:	f000 f874 	bl	80095c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80094d8:	4b07      	ldr	r3, [pc, #28]	@ (80094f8 <vPortFree+0xc4>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3301      	adds	r3, #1
 80094de:	4a06      	ldr	r2, [pc, #24]	@ (80094f8 <vPortFree+0xc4>)
 80094e0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80094e2:	f7fe f9ab 	bl	800783c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80094e6:	bf00      	nop
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	20019490 	.word	0x20019490
 80094f4:	20019480 	.word	0x20019480
 80094f8:	2001948c 	.word	0x2001948c

080094fc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80094fc:	b480      	push	{r7}
 80094fe:	b085      	sub	sp, #20
 8009500:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009502:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8009506:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8009508:	4b27      	ldr	r3, [pc, #156]	@ (80095a8 <prvHeapInit+0xac>)
 800950a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f003 0307 	and.w	r3, r3, #7
 8009512:	2b00      	cmp	r3, #0
 8009514:	d00c      	beq.n	8009530 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3307      	adds	r3, #7
 800951a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f023 0307 	bic.w	r3, r3, #7
 8009522:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009524:	68ba      	ldr	r2, [r7, #8]
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	1ad3      	subs	r3, r2, r3
 800952a:	4a1f      	ldr	r2, [pc, #124]	@ (80095a8 <prvHeapInit+0xac>)
 800952c:	4413      	add	r3, r2
 800952e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009534:	4a1d      	ldr	r2, [pc, #116]	@ (80095ac <prvHeapInit+0xb0>)
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800953a:	4b1c      	ldr	r3, [pc, #112]	@ (80095ac <prvHeapInit+0xb0>)
 800953c:	2200      	movs	r2, #0
 800953e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	68ba      	ldr	r2, [r7, #8]
 8009544:	4413      	add	r3, r2
 8009546:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8009548:	2208      	movs	r2, #8
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	1a9b      	subs	r3, r3, r2
 800954e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0307 	bic.w	r3, r3, #7
 8009556:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	4a15      	ldr	r2, [pc, #84]	@ (80095b0 <prvHeapInit+0xb4>)
 800955c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800955e:	4b14      	ldr	r3, [pc, #80]	@ (80095b0 <prvHeapInit+0xb4>)
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	2200      	movs	r2, #0
 8009564:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8009566:	4b12      	ldr	r3, [pc, #72]	@ (80095b0 <prvHeapInit+0xb4>)
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	2200      	movs	r2, #0
 800956c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	1ad2      	subs	r2, r2, r3
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800957c:	4b0c      	ldr	r3, [pc, #48]	@ (80095b0 <prvHeapInit+0xb4>)
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	4a0a      	ldr	r2, [pc, #40]	@ (80095b4 <prvHeapInit+0xb8>)
 800958a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4a09      	ldr	r2, [pc, #36]	@ (80095b8 <prvHeapInit+0xbc>)
 8009592:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009594:	4b09      	ldr	r3, [pc, #36]	@ (80095bc <prvHeapInit+0xc0>)
 8009596:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800959a:	601a      	str	r2, [r3, #0]
}
 800959c:	bf00      	nop
 800959e:	3714      	adds	r7, #20
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	20000474 	.word	0x20000474
 80095ac:	20019474 	.word	0x20019474
 80095b0:	2001947c 	.word	0x2001947c
 80095b4:	20019484 	.word	0x20019484
 80095b8:	20019480 	.word	0x20019480
 80095bc:	20019490 	.word	0x20019490

080095c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80095c8:	4b28      	ldr	r3, [pc, #160]	@ (800966c <prvInsertBlockIntoFreeList+0xac>)
 80095ca:	60fb      	str	r3, [r7, #12]
 80095cc:	e002      	b.n	80095d4 <prvInsertBlockIntoFreeList+0x14>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	60fb      	str	r3, [r7, #12]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	429a      	cmp	r2, r3
 80095dc:	d8f7      	bhi.n	80095ce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	685b      	ldr	r3, [r3, #4]
 80095e6:	68ba      	ldr	r2, [r7, #8]
 80095e8:	4413      	add	r3, r2
 80095ea:	687a      	ldr	r2, [r7, #4]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d108      	bne.n	8009602 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	685a      	ldr	r2, [r3, #4]
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	441a      	add	r2, r3
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	441a      	add	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	429a      	cmp	r2, r3
 8009614:	d118      	bne.n	8009648 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	4b15      	ldr	r3, [pc, #84]	@ (8009670 <prvInsertBlockIntoFreeList+0xb0>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d00d      	beq.n	800963e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	685b      	ldr	r3, [r3, #4]
 800962c:	441a      	add	r2, r3
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	601a      	str	r2, [r3, #0]
 800963c:	e008      	b.n	8009650 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800963e:	4b0c      	ldr	r3, [pc, #48]	@ (8009670 <prvInsertBlockIntoFreeList+0xb0>)
 8009640:	681a      	ldr	r2, [r3, #0]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	601a      	str	r2, [r3, #0]
 8009646:	e003      	b.n	8009650 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8009650:	68fa      	ldr	r2, [r7, #12]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	429a      	cmp	r2, r3
 8009656:	d002      	beq.n	800965e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800965e:	bf00      	nop
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	20019474 	.word	0x20019474
 8009670:	2001947c 	.word	0x2001947c

08009674 <siprintf>:
 8009674:	b40e      	push	{r1, r2, r3}
 8009676:	b500      	push	{lr}
 8009678:	b09c      	sub	sp, #112	@ 0x70
 800967a:	ab1d      	add	r3, sp, #116	@ 0x74
 800967c:	9002      	str	r0, [sp, #8]
 800967e:	9006      	str	r0, [sp, #24]
 8009680:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009684:	4809      	ldr	r0, [pc, #36]	@ (80096ac <siprintf+0x38>)
 8009686:	9107      	str	r1, [sp, #28]
 8009688:	9104      	str	r1, [sp, #16]
 800968a:	4909      	ldr	r1, [pc, #36]	@ (80096b0 <siprintf+0x3c>)
 800968c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009690:	9105      	str	r1, [sp, #20]
 8009692:	6800      	ldr	r0, [r0, #0]
 8009694:	9301      	str	r3, [sp, #4]
 8009696:	a902      	add	r1, sp, #8
 8009698:	f000 f9a2 	bl	80099e0 <_svfiprintf_r>
 800969c:	9b02      	ldr	r3, [sp, #8]
 800969e:	2200      	movs	r2, #0
 80096a0:	701a      	strb	r2, [r3, #0]
 80096a2:	b01c      	add	sp, #112	@ 0x70
 80096a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80096a8:	b003      	add	sp, #12
 80096aa:	4770      	bx	lr
 80096ac:	2000007c 	.word	0x2000007c
 80096b0:	ffff0208 	.word	0xffff0208

080096b4 <memset>:
 80096b4:	4402      	add	r2, r0
 80096b6:	4603      	mov	r3, r0
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d100      	bne.n	80096be <memset+0xa>
 80096bc:	4770      	bx	lr
 80096be:	f803 1b01 	strb.w	r1, [r3], #1
 80096c2:	e7f9      	b.n	80096b8 <memset+0x4>

080096c4 <__errno>:
 80096c4:	4b01      	ldr	r3, [pc, #4]	@ (80096cc <__errno+0x8>)
 80096c6:	6818      	ldr	r0, [r3, #0]
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	2000007c 	.word	0x2000007c

080096d0 <__libc_init_array>:
 80096d0:	b570      	push	{r4, r5, r6, lr}
 80096d2:	4d0d      	ldr	r5, [pc, #52]	@ (8009708 <__libc_init_array+0x38>)
 80096d4:	4c0d      	ldr	r4, [pc, #52]	@ (800970c <__libc_init_array+0x3c>)
 80096d6:	1b64      	subs	r4, r4, r5
 80096d8:	10a4      	asrs	r4, r4, #2
 80096da:	2600      	movs	r6, #0
 80096dc:	42a6      	cmp	r6, r4
 80096de:	d109      	bne.n	80096f4 <__libc_init_array+0x24>
 80096e0:	4d0b      	ldr	r5, [pc, #44]	@ (8009710 <__libc_init_array+0x40>)
 80096e2:	4c0c      	ldr	r4, [pc, #48]	@ (8009714 <__libc_init_array+0x44>)
 80096e4:	f000 fc66 	bl	8009fb4 <_init>
 80096e8:	1b64      	subs	r4, r4, r5
 80096ea:	10a4      	asrs	r4, r4, #2
 80096ec:	2600      	movs	r6, #0
 80096ee:	42a6      	cmp	r6, r4
 80096f0:	d105      	bne.n	80096fe <__libc_init_array+0x2e>
 80096f2:	bd70      	pop	{r4, r5, r6, pc}
 80096f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f8:	4798      	blx	r3
 80096fa:	3601      	adds	r6, #1
 80096fc:	e7ee      	b.n	80096dc <__libc_init_array+0xc>
 80096fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009702:	4798      	blx	r3
 8009704:	3601      	adds	r6, #1
 8009706:	e7f2      	b.n	80096ee <__libc_init_array+0x1e>
 8009708:	0800aaa4 	.word	0x0800aaa4
 800970c:	0800aaa4 	.word	0x0800aaa4
 8009710:	0800aaa4 	.word	0x0800aaa4
 8009714:	0800aaa8 	.word	0x0800aaa8

08009718 <__retarget_lock_acquire_recursive>:
 8009718:	4770      	bx	lr

0800971a <__retarget_lock_release_recursive>:
 800971a:	4770      	bx	lr

0800971c <memcpy>:
 800971c:	440a      	add	r2, r1
 800971e:	4291      	cmp	r1, r2
 8009720:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009724:	d100      	bne.n	8009728 <memcpy+0xc>
 8009726:	4770      	bx	lr
 8009728:	b510      	push	{r4, lr}
 800972a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800972e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009732:	4291      	cmp	r1, r2
 8009734:	d1f9      	bne.n	800972a <memcpy+0xe>
 8009736:	bd10      	pop	{r4, pc}

08009738 <_free_r>:
 8009738:	b538      	push	{r3, r4, r5, lr}
 800973a:	4605      	mov	r5, r0
 800973c:	2900      	cmp	r1, #0
 800973e:	d041      	beq.n	80097c4 <_free_r+0x8c>
 8009740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009744:	1f0c      	subs	r4, r1, #4
 8009746:	2b00      	cmp	r3, #0
 8009748:	bfb8      	it	lt
 800974a:	18e4      	addlt	r4, r4, r3
 800974c:	f000 f8e0 	bl	8009910 <__malloc_lock>
 8009750:	4a1d      	ldr	r2, [pc, #116]	@ (80097c8 <_free_r+0x90>)
 8009752:	6813      	ldr	r3, [r2, #0]
 8009754:	b933      	cbnz	r3, 8009764 <_free_r+0x2c>
 8009756:	6063      	str	r3, [r4, #4]
 8009758:	6014      	str	r4, [r2, #0]
 800975a:	4628      	mov	r0, r5
 800975c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009760:	f000 b8dc 	b.w	800991c <__malloc_unlock>
 8009764:	42a3      	cmp	r3, r4
 8009766:	d908      	bls.n	800977a <_free_r+0x42>
 8009768:	6820      	ldr	r0, [r4, #0]
 800976a:	1821      	adds	r1, r4, r0
 800976c:	428b      	cmp	r3, r1
 800976e:	bf01      	itttt	eq
 8009770:	6819      	ldreq	r1, [r3, #0]
 8009772:	685b      	ldreq	r3, [r3, #4]
 8009774:	1809      	addeq	r1, r1, r0
 8009776:	6021      	streq	r1, [r4, #0]
 8009778:	e7ed      	b.n	8009756 <_free_r+0x1e>
 800977a:	461a      	mov	r2, r3
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	b10b      	cbz	r3, 8009784 <_free_r+0x4c>
 8009780:	42a3      	cmp	r3, r4
 8009782:	d9fa      	bls.n	800977a <_free_r+0x42>
 8009784:	6811      	ldr	r1, [r2, #0]
 8009786:	1850      	adds	r0, r2, r1
 8009788:	42a0      	cmp	r0, r4
 800978a:	d10b      	bne.n	80097a4 <_free_r+0x6c>
 800978c:	6820      	ldr	r0, [r4, #0]
 800978e:	4401      	add	r1, r0
 8009790:	1850      	adds	r0, r2, r1
 8009792:	4283      	cmp	r3, r0
 8009794:	6011      	str	r1, [r2, #0]
 8009796:	d1e0      	bne.n	800975a <_free_r+0x22>
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	6053      	str	r3, [r2, #4]
 800979e:	4408      	add	r0, r1
 80097a0:	6010      	str	r0, [r2, #0]
 80097a2:	e7da      	b.n	800975a <_free_r+0x22>
 80097a4:	d902      	bls.n	80097ac <_free_r+0x74>
 80097a6:	230c      	movs	r3, #12
 80097a8:	602b      	str	r3, [r5, #0]
 80097aa:	e7d6      	b.n	800975a <_free_r+0x22>
 80097ac:	6820      	ldr	r0, [r4, #0]
 80097ae:	1821      	adds	r1, r4, r0
 80097b0:	428b      	cmp	r3, r1
 80097b2:	bf04      	itt	eq
 80097b4:	6819      	ldreq	r1, [r3, #0]
 80097b6:	685b      	ldreq	r3, [r3, #4]
 80097b8:	6063      	str	r3, [r4, #4]
 80097ba:	bf04      	itt	eq
 80097bc:	1809      	addeq	r1, r1, r0
 80097be:	6021      	streq	r1, [r4, #0]
 80097c0:	6054      	str	r4, [r2, #4]
 80097c2:	e7ca      	b.n	800975a <_free_r+0x22>
 80097c4:	bd38      	pop	{r3, r4, r5, pc}
 80097c6:	bf00      	nop
 80097c8:	200195d8 	.word	0x200195d8

080097cc <sbrk_aligned>:
 80097cc:	b570      	push	{r4, r5, r6, lr}
 80097ce:	4e0f      	ldr	r6, [pc, #60]	@ (800980c <sbrk_aligned+0x40>)
 80097d0:	460c      	mov	r4, r1
 80097d2:	6831      	ldr	r1, [r6, #0]
 80097d4:	4605      	mov	r5, r0
 80097d6:	b911      	cbnz	r1, 80097de <sbrk_aligned+0x12>
 80097d8:	f000 fba6 	bl	8009f28 <_sbrk_r>
 80097dc:	6030      	str	r0, [r6, #0]
 80097de:	4621      	mov	r1, r4
 80097e0:	4628      	mov	r0, r5
 80097e2:	f000 fba1 	bl	8009f28 <_sbrk_r>
 80097e6:	1c43      	adds	r3, r0, #1
 80097e8:	d103      	bne.n	80097f2 <sbrk_aligned+0x26>
 80097ea:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80097ee:	4620      	mov	r0, r4
 80097f0:	bd70      	pop	{r4, r5, r6, pc}
 80097f2:	1cc4      	adds	r4, r0, #3
 80097f4:	f024 0403 	bic.w	r4, r4, #3
 80097f8:	42a0      	cmp	r0, r4
 80097fa:	d0f8      	beq.n	80097ee <sbrk_aligned+0x22>
 80097fc:	1a21      	subs	r1, r4, r0
 80097fe:	4628      	mov	r0, r5
 8009800:	f000 fb92 	bl	8009f28 <_sbrk_r>
 8009804:	3001      	adds	r0, #1
 8009806:	d1f2      	bne.n	80097ee <sbrk_aligned+0x22>
 8009808:	e7ef      	b.n	80097ea <sbrk_aligned+0x1e>
 800980a:	bf00      	nop
 800980c:	200195d4 	.word	0x200195d4

08009810 <_malloc_r>:
 8009810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009814:	1ccd      	adds	r5, r1, #3
 8009816:	f025 0503 	bic.w	r5, r5, #3
 800981a:	3508      	adds	r5, #8
 800981c:	2d0c      	cmp	r5, #12
 800981e:	bf38      	it	cc
 8009820:	250c      	movcc	r5, #12
 8009822:	2d00      	cmp	r5, #0
 8009824:	4606      	mov	r6, r0
 8009826:	db01      	blt.n	800982c <_malloc_r+0x1c>
 8009828:	42a9      	cmp	r1, r5
 800982a:	d904      	bls.n	8009836 <_malloc_r+0x26>
 800982c:	230c      	movs	r3, #12
 800982e:	6033      	str	r3, [r6, #0]
 8009830:	2000      	movs	r0, #0
 8009832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009836:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800990c <_malloc_r+0xfc>
 800983a:	f000 f869 	bl	8009910 <__malloc_lock>
 800983e:	f8d8 3000 	ldr.w	r3, [r8]
 8009842:	461c      	mov	r4, r3
 8009844:	bb44      	cbnz	r4, 8009898 <_malloc_r+0x88>
 8009846:	4629      	mov	r1, r5
 8009848:	4630      	mov	r0, r6
 800984a:	f7ff ffbf 	bl	80097cc <sbrk_aligned>
 800984e:	1c43      	adds	r3, r0, #1
 8009850:	4604      	mov	r4, r0
 8009852:	d158      	bne.n	8009906 <_malloc_r+0xf6>
 8009854:	f8d8 4000 	ldr.w	r4, [r8]
 8009858:	4627      	mov	r7, r4
 800985a:	2f00      	cmp	r7, #0
 800985c:	d143      	bne.n	80098e6 <_malloc_r+0xd6>
 800985e:	2c00      	cmp	r4, #0
 8009860:	d04b      	beq.n	80098fa <_malloc_r+0xea>
 8009862:	6823      	ldr	r3, [r4, #0]
 8009864:	4639      	mov	r1, r7
 8009866:	4630      	mov	r0, r6
 8009868:	eb04 0903 	add.w	r9, r4, r3
 800986c:	f000 fb5c 	bl	8009f28 <_sbrk_r>
 8009870:	4581      	cmp	r9, r0
 8009872:	d142      	bne.n	80098fa <_malloc_r+0xea>
 8009874:	6821      	ldr	r1, [r4, #0]
 8009876:	1a6d      	subs	r5, r5, r1
 8009878:	4629      	mov	r1, r5
 800987a:	4630      	mov	r0, r6
 800987c:	f7ff ffa6 	bl	80097cc <sbrk_aligned>
 8009880:	3001      	adds	r0, #1
 8009882:	d03a      	beq.n	80098fa <_malloc_r+0xea>
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	442b      	add	r3, r5
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	f8d8 3000 	ldr.w	r3, [r8]
 800988e:	685a      	ldr	r2, [r3, #4]
 8009890:	bb62      	cbnz	r2, 80098ec <_malloc_r+0xdc>
 8009892:	f8c8 7000 	str.w	r7, [r8]
 8009896:	e00f      	b.n	80098b8 <_malloc_r+0xa8>
 8009898:	6822      	ldr	r2, [r4, #0]
 800989a:	1b52      	subs	r2, r2, r5
 800989c:	d420      	bmi.n	80098e0 <_malloc_r+0xd0>
 800989e:	2a0b      	cmp	r2, #11
 80098a0:	d917      	bls.n	80098d2 <_malloc_r+0xc2>
 80098a2:	1961      	adds	r1, r4, r5
 80098a4:	42a3      	cmp	r3, r4
 80098a6:	6025      	str	r5, [r4, #0]
 80098a8:	bf18      	it	ne
 80098aa:	6059      	strne	r1, [r3, #4]
 80098ac:	6863      	ldr	r3, [r4, #4]
 80098ae:	bf08      	it	eq
 80098b0:	f8c8 1000 	streq.w	r1, [r8]
 80098b4:	5162      	str	r2, [r4, r5]
 80098b6:	604b      	str	r3, [r1, #4]
 80098b8:	4630      	mov	r0, r6
 80098ba:	f000 f82f 	bl	800991c <__malloc_unlock>
 80098be:	f104 000b 	add.w	r0, r4, #11
 80098c2:	1d23      	adds	r3, r4, #4
 80098c4:	f020 0007 	bic.w	r0, r0, #7
 80098c8:	1ac2      	subs	r2, r0, r3
 80098ca:	bf1c      	itt	ne
 80098cc:	1a1b      	subne	r3, r3, r0
 80098ce:	50a3      	strne	r3, [r4, r2]
 80098d0:	e7af      	b.n	8009832 <_malloc_r+0x22>
 80098d2:	6862      	ldr	r2, [r4, #4]
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	bf0c      	ite	eq
 80098d8:	f8c8 2000 	streq.w	r2, [r8]
 80098dc:	605a      	strne	r2, [r3, #4]
 80098de:	e7eb      	b.n	80098b8 <_malloc_r+0xa8>
 80098e0:	4623      	mov	r3, r4
 80098e2:	6864      	ldr	r4, [r4, #4]
 80098e4:	e7ae      	b.n	8009844 <_malloc_r+0x34>
 80098e6:	463c      	mov	r4, r7
 80098e8:	687f      	ldr	r7, [r7, #4]
 80098ea:	e7b6      	b.n	800985a <_malloc_r+0x4a>
 80098ec:	461a      	mov	r2, r3
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d1fb      	bne.n	80098ec <_malloc_r+0xdc>
 80098f4:	2300      	movs	r3, #0
 80098f6:	6053      	str	r3, [r2, #4]
 80098f8:	e7de      	b.n	80098b8 <_malloc_r+0xa8>
 80098fa:	230c      	movs	r3, #12
 80098fc:	6033      	str	r3, [r6, #0]
 80098fe:	4630      	mov	r0, r6
 8009900:	f000 f80c 	bl	800991c <__malloc_unlock>
 8009904:	e794      	b.n	8009830 <_malloc_r+0x20>
 8009906:	6005      	str	r5, [r0, #0]
 8009908:	e7d6      	b.n	80098b8 <_malloc_r+0xa8>
 800990a:	bf00      	nop
 800990c:	200195d8 	.word	0x200195d8

08009910 <__malloc_lock>:
 8009910:	4801      	ldr	r0, [pc, #4]	@ (8009918 <__malloc_lock+0x8>)
 8009912:	f7ff bf01 	b.w	8009718 <__retarget_lock_acquire_recursive>
 8009916:	bf00      	nop
 8009918:	200195d0 	.word	0x200195d0

0800991c <__malloc_unlock>:
 800991c:	4801      	ldr	r0, [pc, #4]	@ (8009924 <__malloc_unlock+0x8>)
 800991e:	f7ff befc 	b.w	800971a <__retarget_lock_release_recursive>
 8009922:	bf00      	nop
 8009924:	200195d0 	.word	0x200195d0

08009928 <__ssputs_r>:
 8009928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800992c:	688e      	ldr	r6, [r1, #8]
 800992e:	461f      	mov	r7, r3
 8009930:	42be      	cmp	r6, r7
 8009932:	680b      	ldr	r3, [r1, #0]
 8009934:	4682      	mov	sl, r0
 8009936:	460c      	mov	r4, r1
 8009938:	4690      	mov	r8, r2
 800993a:	d82d      	bhi.n	8009998 <__ssputs_r+0x70>
 800993c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009940:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009944:	d026      	beq.n	8009994 <__ssputs_r+0x6c>
 8009946:	6965      	ldr	r5, [r4, #20]
 8009948:	6909      	ldr	r1, [r1, #16]
 800994a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800994e:	eba3 0901 	sub.w	r9, r3, r1
 8009952:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009956:	1c7b      	adds	r3, r7, #1
 8009958:	444b      	add	r3, r9
 800995a:	106d      	asrs	r5, r5, #1
 800995c:	429d      	cmp	r5, r3
 800995e:	bf38      	it	cc
 8009960:	461d      	movcc	r5, r3
 8009962:	0553      	lsls	r3, r2, #21
 8009964:	d527      	bpl.n	80099b6 <__ssputs_r+0x8e>
 8009966:	4629      	mov	r1, r5
 8009968:	f7ff ff52 	bl	8009810 <_malloc_r>
 800996c:	4606      	mov	r6, r0
 800996e:	b360      	cbz	r0, 80099ca <__ssputs_r+0xa2>
 8009970:	6921      	ldr	r1, [r4, #16]
 8009972:	464a      	mov	r2, r9
 8009974:	f7ff fed2 	bl	800971c <memcpy>
 8009978:	89a3      	ldrh	r3, [r4, #12]
 800997a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800997e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009982:	81a3      	strh	r3, [r4, #12]
 8009984:	6126      	str	r6, [r4, #16]
 8009986:	6165      	str	r5, [r4, #20]
 8009988:	444e      	add	r6, r9
 800998a:	eba5 0509 	sub.w	r5, r5, r9
 800998e:	6026      	str	r6, [r4, #0]
 8009990:	60a5      	str	r5, [r4, #8]
 8009992:	463e      	mov	r6, r7
 8009994:	42be      	cmp	r6, r7
 8009996:	d900      	bls.n	800999a <__ssputs_r+0x72>
 8009998:	463e      	mov	r6, r7
 800999a:	6820      	ldr	r0, [r4, #0]
 800999c:	4632      	mov	r2, r6
 800999e:	4641      	mov	r1, r8
 80099a0:	f000 faa8 	bl	8009ef4 <memmove>
 80099a4:	68a3      	ldr	r3, [r4, #8]
 80099a6:	1b9b      	subs	r3, r3, r6
 80099a8:	60a3      	str	r3, [r4, #8]
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	4433      	add	r3, r6
 80099ae:	6023      	str	r3, [r4, #0]
 80099b0:	2000      	movs	r0, #0
 80099b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099b6:	462a      	mov	r2, r5
 80099b8:	f000 fac6 	bl	8009f48 <_realloc_r>
 80099bc:	4606      	mov	r6, r0
 80099be:	2800      	cmp	r0, #0
 80099c0:	d1e0      	bne.n	8009984 <__ssputs_r+0x5c>
 80099c2:	6921      	ldr	r1, [r4, #16]
 80099c4:	4650      	mov	r0, sl
 80099c6:	f7ff feb7 	bl	8009738 <_free_r>
 80099ca:	230c      	movs	r3, #12
 80099cc:	f8ca 3000 	str.w	r3, [sl]
 80099d0:	89a3      	ldrh	r3, [r4, #12]
 80099d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099d6:	81a3      	strh	r3, [r4, #12]
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80099dc:	e7e9      	b.n	80099b2 <__ssputs_r+0x8a>
	...

080099e0 <_svfiprintf_r>:
 80099e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099e4:	4698      	mov	r8, r3
 80099e6:	898b      	ldrh	r3, [r1, #12]
 80099e8:	061b      	lsls	r3, r3, #24
 80099ea:	b09d      	sub	sp, #116	@ 0x74
 80099ec:	4607      	mov	r7, r0
 80099ee:	460d      	mov	r5, r1
 80099f0:	4614      	mov	r4, r2
 80099f2:	d510      	bpl.n	8009a16 <_svfiprintf_r+0x36>
 80099f4:	690b      	ldr	r3, [r1, #16]
 80099f6:	b973      	cbnz	r3, 8009a16 <_svfiprintf_r+0x36>
 80099f8:	2140      	movs	r1, #64	@ 0x40
 80099fa:	f7ff ff09 	bl	8009810 <_malloc_r>
 80099fe:	6028      	str	r0, [r5, #0]
 8009a00:	6128      	str	r0, [r5, #16]
 8009a02:	b930      	cbnz	r0, 8009a12 <_svfiprintf_r+0x32>
 8009a04:	230c      	movs	r3, #12
 8009a06:	603b      	str	r3, [r7, #0]
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a0c:	b01d      	add	sp, #116	@ 0x74
 8009a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a12:	2340      	movs	r3, #64	@ 0x40
 8009a14:	616b      	str	r3, [r5, #20]
 8009a16:	2300      	movs	r3, #0
 8009a18:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a1a:	2320      	movs	r3, #32
 8009a1c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a20:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a24:	2330      	movs	r3, #48	@ 0x30
 8009a26:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009bc4 <_svfiprintf_r+0x1e4>
 8009a2a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009a2e:	f04f 0901 	mov.w	r9, #1
 8009a32:	4623      	mov	r3, r4
 8009a34:	469a      	mov	sl, r3
 8009a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a3a:	b10a      	cbz	r2, 8009a40 <_svfiprintf_r+0x60>
 8009a3c:	2a25      	cmp	r2, #37	@ 0x25
 8009a3e:	d1f9      	bne.n	8009a34 <_svfiprintf_r+0x54>
 8009a40:	ebba 0b04 	subs.w	fp, sl, r4
 8009a44:	d00b      	beq.n	8009a5e <_svfiprintf_r+0x7e>
 8009a46:	465b      	mov	r3, fp
 8009a48:	4622      	mov	r2, r4
 8009a4a:	4629      	mov	r1, r5
 8009a4c:	4638      	mov	r0, r7
 8009a4e:	f7ff ff6b 	bl	8009928 <__ssputs_r>
 8009a52:	3001      	adds	r0, #1
 8009a54:	f000 80a7 	beq.w	8009ba6 <_svfiprintf_r+0x1c6>
 8009a58:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a5a:	445a      	add	r2, fp
 8009a5c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	f000 809f 	beq.w	8009ba6 <_svfiprintf_r+0x1c6>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009a6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a72:	f10a 0a01 	add.w	sl, sl, #1
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	9307      	str	r3, [sp, #28]
 8009a7a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a7e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a80:	4654      	mov	r4, sl
 8009a82:	2205      	movs	r2, #5
 8009a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a88:	484e      	ldr	r0, [pc, #312]	@ (8009bc4 <_svfiprintf_r+0x1e4>)
 8009a8a:	f7f6 fbb9 	bl	8000200 <memchr>
 8009a8e:	9a04      	ldr	r2, [sp, #16]
 8009a90:	b9d8      	cbnz	r0, 8009aca <_svfiprintf_r+0xea>
 8009a92:	06d0      	lsls	r0, r2, #27
 8009a94:	bf44      	itt	mi
 8009a96:	2320      	movmi	r3, #32
 8009a98:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a9c:	0711      	lsls	r1, r2, #28
 8009a9e:	bf44      	itt	mi
 8009aa0:	232b      	movmi	r3, #43	@ 0x2b
 8009aa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009aa6:	f89a 3000 	ldrb.w	r3, [sl]
 8009aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aac:	d015      	beq.n	8009ada <_svfiprintf_r+0xfa>
 8009aae:	9a07      	ldr	r2, [sp, #28]
 8009ab0:	4654      	mov	r4, sl
 8009ab2:	2000      	movs	r0, #0
 8009ab4:	f04f 0c0a 	mov.w	ip, #10
 8009ab8:	4621      	mov	r1, r4
 8009aba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009abe:	3b30      	subs	r3, #48	@ 0x30
 8009ac0:	2b09      	cmp	r3, #9
 8009ac2:	d94b      	bls.n	8009b5c <_svfiprintf_r+0x17c>
 8009ac4:	b1b0      	cbz	r0, 8009af4 <_svfiprintf_r+0x114>
 8009ac6:	9207      	str	r2, [sp, #28]
 8009ac8:	e014      	b.n	8009af4 <_svfiprintf_r+0x114>
 8009aca:	eba0 0308 	sub.w	r3, r0, r8
 8009ace:	fa09 f303 	lsl.w	r3, r9, r3
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	9304      	str	r3, [sp, #16]
 8009ad6:	46a2      	mov	sl, r4
 8009ad8:	e7d2      	b.n	8009a80 <_svfiprintf_r+0xa0>
 8009ada:	9b03      	ldr	r3, [sp, #12]
 8009adc:	1d19      	adds	r1, r3, #4
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	9103      	str	r1, [sp, #12]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	bfbb      	ittet	lt
 8009ae6:	425b      	neglt	r3, r3
 8009ae8:	f042 0202 	orrlt.w	r2, r2, #2
 8009aec:	9307      	strge	r3, [sp, #28]
 8009aee:	9307      	strlt	r3, [sp, #28]
 8009af0:	bfb8      	it	lt
 8009af2:	9204      	strlt	r2, [sp, #16]
 8009af4:	7823      	ldrb	r3, [r4, #0]
 8009af6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009af8:	d10a      	bne.n	8009b10 <_svfiprintf_r+0x130>
 8009afa:	7863      	ldrb	r3, [r4, #1]
 8009afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009afe:	d132      	bne.n	8009b66 <_svfiprintf_r+0x186>
 8009b00:	9b03      	ldr	r3, [sp, #12]
 8009b02:	1d1a      	adds	r2, r3, #4
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	9203      	str	r2, [sp, #12]
 8009b08:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b0c:	3402      	adds	r4, #2
 8009b0e:	9305      	str	r3, [sp, #20]
 8009b10:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009bd4 <_svfiprintf_r+0x1f4>
 8009b14:	7821      	ldrb	r1, [r4, #0]
 8009b16:	2203      	movs	r2, #3
 8009b18:	4650      	mov	r0, sl
 8009b1a:	f7f6 fb71 	bl	8000200 <memchr>
 8009b1e:	b138      	cbz	r0, 8009b30 <_svfiprintf_r+0x150>
 8009b20:	9b04      	ldr	r3, [sp, #16]
 8009b22:	eba0 000a 	sub.w	r0, r0, sl
 8009b26:	2240      	movs	r2, #64	@ 0x40
 8009b28:	4082      	lsls	r2, r0
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	3401      	adds	r4, #1
 8009b2e:	9304      	str	r3, [sp, #16]
 8009b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b34:	4824      	ldr	r0, [pc, #144]	@ (8009bc8 <_svfiprintf_r+0x1e8>)
 8009b36:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b3a:	2206      	movs	r2, #6
 8009b3c:	f7f6 fb60 	bl	8000200 <memchr>
 8009b40:	2800      	cmp	r0, #0
 8009b42:	d036      	beq.n	8009bb2 <_svfiprintf_r+0x1d2>
 8009b44:	4b21      	ldr	r3, [pc, #132]	@ (8009bcc <_svfiprintf_r+0x1ec>)
 8009b46:	bb1b      	cbnz	r3, 8009b90 <_svfiprintf_r+0x1b0>
 8009b48:	9b03      	ldr	r3, [sp, #12]
 8009b4a:	3307      	adds	r3, #7
 8009b4c:	f023 0307 	bic.w	r3, r3, #7
 8009b50:	3308      	adds	r3, #8
 8009b52:	9303      	str	r3, [sp, #12]
 8009b54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b56:	4433      	add	r3, r6
 8009b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b5a:	e76a      	b.n	8009a32 <_svfiprintf_r+0x52>
 8009b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b60:	460c      	mov	r4, r1
 8009b62:	2001      	movs	r0, #1
 8009b64:	e7a8      	b.n	8009ab8 <_svfiprintf_r+0xd8>
 8009b66:	2300      	movs	r3, #0
 8009b68:	3401      	adds	r4, #1
 8009b6a:	9305      	str	r3, [sp, #20]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	f04f 0c0a 	mov.w	ip, #10
 8009b72:	4620      	mov	r0, r4
 8009b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b78:	3a30      	subs	r2, #48	@ 0x30
 8009b7a:	2a09      	cmp	r2, #9
 8009b7c:	d903      	bls.n	8009b86 <_svfiprintf_r+0x1a6>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0c6      	beq.n	8009b10 <_svfiprintf_r+0x130>
 8009b82:	9105      	str	r1, [sp, #20]
 8009b84:	e7c4      	b.n	8009b10 <_svfiprintf_r+0x130>
 8009b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b8a:	4604      	mov	r4, r0
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	e7f0      	b.n	8009b72 <_svfiprintf_r+0x192>
 8009b90:	ab03      	add	r3, sp, #12
 8009b92:	9300      	str	r3, [sp, #0]
 8009b94:	462a      	mov	r2, r5
 8009b96:	4b0e      	ldr	r3, [pc, #56]	@ (8009bd0 <_svfiprintf_r+0x1f0>)
 8009b98:	a904      	add	r1, sp, #16
 8009b9a:	4638      	mov	r0, r7
 8009b9c:	f3af 8000 	nop.w
 8009ba0:	1c42      	adds	r2, r0, #1
 8009ba2:	4606      	mov	r6, r0
 8009ba4:	d1d6      	bne.n	8009b54 <_svfiprintf_r+0x174>
 8009ba6:	89ab      	ldrh	r3, [r5, #12]
 8009ba8:	065b      	lsls	r3, r3, #25
 8009baa:	f53f af2d 	bmi.w	8009a08 <_svfiprintf_r+0x28>
 8009bae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009bb0:	e72c      	b.n	8009a0c <_svfiprintf_r+0x2c>
 8009bb2:	ab03      	add	r3, sp, #12
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	462a      	mov	r2, r5
 8009bb8:	4b05      	ldr	r3, [pc, #20]	@ (8009bd0 <_svfiprintf_r+0x1f0>)
 8009bba:	a904      	add	r1, sp, #16
 8009bbc:	4638      	mov	r0, r7
 8009bbe:	f000 f879 	bl	8009cb4 <_printf_i>
 8009bc2:	e7ed      	b.n	8009ba0 <_svfiprintf_r+0x1c0>
 8009bc4:	0800aa69 	.word	0x0800aa69
 8009bc8:	0800aa73 	.word	0x0800aa73
 8009bcc:	00000000 	.word	0x00000000
 8009bd0:	08009929 	.word	0x08009929
 8009bd4:	0800aa6f 	.word	0x0800aa6f

08009bd8 <_printf_common>:
 8009bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bdc:	4616      	mov	r6, r2
 8009bde:	4698      	mov	r8, r3
 8009be0:	688a      	ldr	r2, [r1, #8]
 8009be2:	690b      	ldr	r3, [r1, #16]
 8009be4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009be8:	4293      	cmp	r3, r2
 8009bea:	bfb8      	it	lt
 8009bec:	4613      	movlt	r3, r2
 8009bee:	6033      	str	r3, [r6, #0]
 8009bf0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009bf4:	4607      	mov	r7, r0
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	b10a      	cbz	r2, 8009bfe <_printf_common+0x26>
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	6033      	str	r3, [r6, #0]
 8009bfe:	6823      	ldr	r3, [r4, #0]
 8009c00:	0699      	lsls	r1, r3, #26
 8009c02:	bf42      	ittt	mi
 8009c04:	6833      	ldrmi	r3, [r6, #0]
 8009c06:	3302      	addmi	r3, #2
 8009c08:	6033      	strmi	r3, [r6, #0]
 8009c0a:	6825      	ldr	r5, [r4, #0]
 8009c0c:	f015 0506 	ands.w	r5, r5, #6
 8009c10:	d106      	bne.n	8009c20 <_printf_common+0x48>
 8009c12:	f104 0a19 	add.w	sl, r4, #25
 8009c16:	68e3      	ldr	r3, [r4, #12]
 8009c18:	6832      	ldr	r2, [r6, #0]
 8009c1a:	1a9b      	subs	r3, r3, r2
 8009c1c:	42ab      	cmp	r3, r5
 8009c1e:	dc26      	bgt.n	8009c6e <_printf_common+0x96>
 8009c20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009c24:	6822      	ldr	r2, [r4, #0]
 8009c26:	3b00      	subs	r3, #0
 8009c28:	bf18      	it	ne
 8009c2a:	2301      	movne	r3, #1
 8009c2c:	0692      	lsls	r2, r2, #26
 8009c2e:	d42b      	bmi.n	8009c88 <_printf_common+0xb0>
 8009c30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009c34:	4641      	mov	r1, r8
 8009c36:	4638      	mov	r0, r7
 8009c38:	47c8      	blx	r9
 8009c3a:	3001      	adds	r0, #1
 8009c3c:	d01e      	beq.n	8009c7c <_printf_common+0xa4>
 8009c3e:	6823      	ldr	r3, [r4, #0]
 8009c40:	6922      	ldr	r2, [r4, #16]
 8009c42:	f003 0306 	and.w	r3, r3, #6
 8009c46:	2b04      	cmp	r3, #4
 8009c48:	bf02      	ittt	eq
 8009c4a:	68e5      	ldreq	r5, [r4, #12]
 8009c4c:	6833      	ldreq	r3, [r6, #0]
 8009c4e:	1aed      	subeq	r5, r5, r3
 8009c50:	68a3      	ldr	r3, [r4, #8]
 8009c52:	bf0c      	ite	eq
 8009c54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009c58:	2500      	movne	r5, #0
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	bfc4      	itt	gt
 8009c5e:	1a9b      	subgt	r3, r3, r2
 8009c60:	18ed      	addgt	r5, r5, r3
 8009c62:	2600      	movs	r6, #0
 8009c64:	341a      	adds	r4, #26
 8009c66:	42b5      	cmp	r5, r6
 8009c68:	d11a      	bne.n	8009ca0 <_printf_common+0xc8>
 8009c6a:	2000      	movs	r0, #0
 8009c6c:	e008      	b.n	8009c80 <_printf_common+0xa8>
 8009c6e:	2301      	movs	r3, #1
 8009c70:	4652      	mov	r2, sl
 8009c72:	4641      	mov	r1, r8
 8009c74:	4638      	mov	r0, r7
 8009c76:	47c8      	blx	r9
 8009c78:	3001      	adds	r0, #1
 8009c7a:	d103      	bne.n	8009c84 <_printf_common+0xac>
 8009c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c84:	3501      	adds	r5, #1
 8009c86:	e7c6      	b.n	8009c16 <_printf_common+0x3e>
 8009c88:	18e1      	adds	r1, r4, r3
 8009c8a:	1c5a      	adds	r2, r3, #1
 8009c8c:	2030      	movs	r0, #48	@ 0x30
 8009c8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009c92:	4422      	add	r2, r4
 8009c94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009c98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009c9c:	3302      	adds	r3, #2
 8009c9e:	e7c7      	b.n	8009c30 <_printf_common+0x58>
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	4622      	mov	r2, r4
 8009ca4:	4641      	mov	r1, r8
 8009ca6:	4638      	mov	r0, r7
 8009ca8:	47c8      	blx	r9
 8009caa:	3001      	adds	r0, #1
 8009cac:	d0e6      	beq.n	8009c7c <_printf_common+0xa4>
 8009cae:	3601      	adds	r6, #1
 8009cb0:	e7d9      	b.n	8009c66 <_printf_common+0x8e>
	...

08009cb4 <_printf_i>:
 8009cb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009cb8:	7e0f      	ldrb	r7, [r1, #24]
 8009cba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009cbc:	2f78      	cmp	r7, #120	@ 0x78
 8009cbe:	4691      	mov	r9, r2
 8009cc0:	4680      	mov	r8, r0
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	469a      	mov	sl, r3
 8009cc6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009cca:	d807      	bhi.n	8009cdc <_printf_i+0x28>
 8009ccc:	2f62      	cmp	r7, #98	@ 0x62
 8009cce:	d80a      	bhi.n	8009ce6 <_printf_i+0x32>
 8009cd0:	2f00      	cmp	r7, #0
 8009cd2:	f000 80d2 	beq.w	8009e7a <_printf_i+0x1c6>
 8009cd6:	2f58      	cmp	r7, #88	@ 0x58
 8009cd8:	f000 80b9 	beq.w	8009e4e <_printf_i+0x19a>
 8009cdc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009ce0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009ce4:	e03a      	b.n	8009d5c <_printf_i+0xa8>
 8009ce6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009cea:	2b15      	cmp	r3, #21
 8009cec:	d8f6      	bhi.n	8009cdc <_printf_i+0x28>
 8009cee:	a101      	add	r1, pc, #4	@ (adr r1, 8009cf4 <_printf_i+0x40>)
 8009cf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009cf4:	08009d4d 	.word	0x08009d4d
 8009cf8:	08009d61 	.word	0x08009d61
 8009cfc:	08009cdd 	.word	0x08009cdd
 8009d00:	08009cdd 	.word	0x08009cdd
 8009d04:	08009cdd 	.word	0x08009cdd
 8009d08:	08009cdd 	.word	0x08009cdd
 8009d0c:	08009d61 	.word	0x08009d61
 8009d10:	08009cdd 	.word	0x08009cdd
 8009d14:	08009cdd 	.word	0x08009cdd
 8009d18:	08009cdd 	.word	0x08009cdd
 8009d1c:	08009cdd 	.word	0x08009cdd
 8009d20:	08009e61 	.word	0x08009e61
 8009d24:	08009d8b 	.word	0x08009d8b
 8009d28:	08009e1b 	.word	0x08009e1b
 8009d2c:	08009cdd 	.word	0x08009cdd
 8009d30:	08009cdd 	.word	0x08009cdd
 8009d34:	08009e83 	.word	0x08009e83
 8009d38:	08009cdd 	.word	0x08009cdd
 8009d3c:	08009d8b 	.word	0x08009d8b
 8009d40:	08009cdd 	.word	0x08009cdd
 8009d44:	08009cdd 	.word	0x08009cdd
 8009d48:	08009e23 	.word	0x08009e23
 8009d4c:	6833      	ldr	r3, [r6, #0]
 8009d4e:	1d1a      	adds	r2, r3, #4
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	6032      	str	r2, [r6, #0]
 8009d54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009d5c:	2301      	movs	r3, #1
 8009d5e:	e09d      	b.n	8009e9c <_printf_i+0x1e8>
 8009d60:	6833      	ldr	r3, [r6, #0]
 8009d62:	6820      	ldr	r0, [r4, #0]
 8009d64:	1d19      	adds	r1, r3, #4
 8009d66:	6031      	str	r1, [r6, #0]
 8009d68:	0606      	lsls	r6, r0, #24
 8009d6a:	d501      	bpl.n	8009d70 <_printf_i+0xbc>
 8009d6c:	681d      	ldr	r5, [r3, #0]
 8009d6e:	e003      	b.n	8009d78 <_printf_i+0xc4>
 8009d70:	0645      	lsls	r5, r0, #25
 8009d72:	d5fb      	bpl.n	8009d6c <_printf_i+0xb8>
 8009d74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009d78:	2d00      	cmp	r5, #0
 8009d7a:	da03      	bge.n	8009d84 <_printf_i+0xd0>
 8009d7c:	232d      	movs	r3, #45	@ 0x2d
 8009d7e:	426d      	negs	r5, r5
 8009d80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009d84:	4859      	ldr	r0, [pc, #356]	@ (8009eec <_printf_i+0x238>)
 8009d86:	230a      	movs	r3, #10
 8009d88:	e011      	b.n	8009dae <_printf_i+0xfa>
 8009d8a:	6821      	ldr	r1, [r4, #0]
 8009d8c:	6833      	ldr	r3, [r6, #0]
 8009d8e:	0608      	lsls	r0, r1, #24
 8009d90:	f853 5b04 	ldr.w	r5, [r3], #4
 8009d94:	d402      	bmi.n	8009d9c <_printf_i+0xe8>
 8009d96:	0649      	lsls	r1, r1, #25
 8009d98:	bf48      	it	mi
 8009d9a:	b2ad      	uxthmi	r5, r5
 8009d9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009d9e:	4853      	ldr	r0, [pc, #332]	@ (8009eec <_printf_i+0x238>)
 8009da0:	6033      	str	r3, [r6, #0]
 8009da2:	bf14      	ite	ne
 8009da4:	230a      	movne	r3, #10
 8009da6:	2308      	moveq	r3, #8
 8009da8:	2100      	movs	r1, #0
 8009daa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009dae:	6866      	ldr	r6, [r4, #4]
 8009db0:	60a6      	str	r6, [r4, #8]
 8009db2:	2e00      	cmp	r6, #0
 8009db4:	bfa2      	ittt	ge
 8009db6:	6821      	ldrge	r1, [r4, #0]
 8009db8:	f021 0104 	bicge.w	r1, r1, #4
 8009dbc:	6021      	strge	r1, [r4, #0]
 8009dbe:	b90d      	cbnz	r5, 8009dc4 <_printf_i+0x110>
 8009dc0:	2e00      	cmp	r6, #0
 8009dc2:	d04b      	beq.n	8009e5c <_printf_i+0x1a8>
 8009dc4:	4616      	mov	r6, r2
 8009dc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8009dca:	fb03 5711 	mls	r7, r3, r1, r5
 8009dce:	5dc7      	ldrb	r7, [r0, r7]
 8009dd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009dd4:	462f      	mov	r7, r5
 8009dd6:	42bb      	cmp	r3, r7
 8009dd8:	460d      	mov	r5, r1
 8009dda:	d9f4      	bls.n	8009dc6 <_printf_i+0x112>
 8009ddc:	2b08      	cmp	r3, #8
 8009dde:	d10b      	bne.n	8009df8 <_printf_i+0x144>
 8009de0:	6823      	ldr	r3, [r4, #0]
 8009de2:	07df      	lsls	r7, r3, #31
 8009de4:	d508      	bpl.n	8009df8 <_printf_i+0x144>
 8009de6:	6923      	ldr	r3, [r4, #16]
 8009de8:	6861      	ldr	r1, [r4, #4]
 8009dea:	4299      	cmp	r1, r3
 8009dec:	bfde      	ittt	le
 8009dee:	2330      	movle	r3, #48	@ 0x30
 8009df0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009df4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009df8:	1b92      	subs	r2, r2, r6
 8009dfa:	6122      	str	r2, [r4, #16]
 8009dfc:	f8cd a000 	str.w	sl, [sp]
 8009e00:	464b      	mov	r3, r9
 8009e02:	aa03      	add	r2, sp, #12
 8009e04:	4621      	mov	r1, r4
 8009e06:	4640      	mov	r0, r8
 8009e08:	f7ff fee6 	bl	8009bd8 <_printf_common>
 8009e0c:	3001      	adds	r0, #1
 8009e0e:	d14a      	bne.n	8009ea6 <_printf_i+0x1f2>
 8009e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e14:	b004      	add	sp, #16
 8009e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	f043 0320 	orr.w	r3, r3, #32
 8009e20:	6023      	str	r3, [r4, #0]
 8009e22:	4833      	ldr	r0, [pc, #204]	@ (8009ef0 <_printf_i+0x23c>)
 8009e24:	2778      	movs	r7, #120	@ 0x78
 8009e26:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	6831      	ldr	r1, [r6, #0]
 8009e2e:	061f      	lsls	r7, r3, #24
 8009e30:	f851 5b04 	ldr.w	r5, [r1], #4
 8009e34:	d402      	bmi.n	8009e3c <_printf_i+0x188>
 8009e36:	065f      	lsls	r7, r3, #25
 8009e38:	bf48      	it	mi
 8009e3a:	b2ad      	uxthmi	r5, r5
 8009e3c:	6031      	str	r1, [r6, #0]
 8009e3e:	07d9      	lsls	r1, r3, #31
 8009e40:	bf44      	itt	mi
 8009e42:	f043 0320 	orrmi.w	r3, r3, #32
 8009e46:	6023      	strmi	r3, [r4, #0]
 8009e48:	b11d      	cbz	r5, 8009e52 <_printf_i+0x19e>
 8009e4a:	2310      	movs	r3, #16
 8009e4c:	e7ac      	b.n	8009da8 <_printf_i+0xf4>
 8009e4e:	4827      	ldr	r0, [pc, #156]	@ (8009eec <_printf_i+0x238>)
 8009e50:	e7e9      	b.n	8009e26 <_printf_i+0x172>
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	f023 0320 	bic.w	r3, r3, #32
 8009e58:	6023      	str	r3, [r4, #0]
 8009e5a:	e7f6      	b.n	8009e4a <_printf_i+0x196>
 8009e5c:	4616      	mov	r6, r2
 8009e5e:	e7bd      	b.n	8009ddc <_printf_i+0x128>
 8009e60:	6833      	ldr	r3, [r6, #0]
 8009e62:	6825      	ldr	r5, [r4, #0]
 8009e64:	6961      	ldr	r1, [r4, #20]
 8009e66:	1d18      	adds	r0, r3, #4
 8009e68:	6030      	str	r0, [r6, #0]
 8009e6a:	062e      	lsls	r6, r5, #24
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	d501      	bpl.n	8009e74 <_printf_i+0x1c0>
 8009e70:	6019      	str	r1, [r3, #0]
 8009e72:	e002      	b.n	8009e7a <_printf_i+0x1c6>
 8009e74:	0668      	lsls	r0, r5, #25
 8009e76:	d5fb      	bpl.n	8009e70 <_printf_i+0x1bc>
 8009e78:	8019      	strh	r1, [r3, #0]
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	6123      	str	r3, [r4, #16]
 8009e7e:	4616      	mov	r6, r2
 8009e80:	e7bc      	b.n	8009dfc <_printf_i+0x148>
 8009e82:	6833      	ldr	r3, [r6, #0]
 8009e84:	1d1a      	adds	r2, r3, #4
 8009e86:	6032      	str	r2, [r6, #0]
 8009e88:	681e      	ldr	r6, [r3, #0]
 8009e8a:	6862      	ldr	r2, [r4, #4]
 8009e8c:	2100      	movs	r1, #0
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f7f6 f9b6 	bl	8000200 <memchr>
 8009e94:	b108      	cbz	r0, 8009e9a <_printf_i+0x1e6>
 8009e96:	1b80      	subs	r0, r0, r6
 8009e98:	6060      	str	r0, [r4, #4]
 8009e9a:	6863      	ldr	r3, [r4, #4]
 8009e9c:	6123      	str	r3, [r4, #16]
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009ea4:	e7aa      	b.n	8009dfc <_printf_i+0x148>
 8009ea6:	6923      	ldr	r3, [r4, #16]
 8009ea8:	4632      	mov	r2, r6
 8009eaa:	4649      	mov	r1, r9
 8009eac:	4640      	mov	r0, r8
 8009eae:	47d0      	blx	sl
 8009eb0:	3001      	adds	r0, #1
 8009eb2:	d0ad      	beq.n	8009e10 <_printf_i+0x15c>
 8009eb4:	6823      	ldr	r3, [r4, #0]
 8009eb6:	079b      	lsls	r3, r3, #30
 8009eb8:	d413      	bmi.n	8009ee2 <_printf_i+0x22e>
 8009eba:	68e0      	ldr	r0, [r4, #12]
 8009ebc:	9b03      	ldr	r3, [sp, #12]
 8009ebe:	4298      	cmp	r0, r3
 8009ec0:	bfb8      	it	lt
 8009ec2:	4618      	movlt	r0, r3
 8009ec4:	e7a6      	b.n	8009e14 <_printf_i+0x160>
 8009ec6:	2301      	movs	r3, #1
 8009ec8:	4632      	mov	r2, r6
 8009eca:	4649      	mov	r1, r9
 8009ecc:	4640      	mov	r0, r8
 8009ece:	47d0      	blx	sl
 8009ed0:	3001      	adds	r0, #1
 8009ed2:	d09d      	beq.n	8009e10 <_printf_i+0x15c>
 8009ed4:	3501      	adds	r5, #1
 8009ed6:	68e3      	ldr	r3, [r4, #12]
 8009ed8:	9903      	ldr	r1, [sp, #12]
 8009eda:	1a5b      	subs	r3, r3, r1
 8009edc:	42ab      	cmp	r3, r5
 8009ede:	dcf2      	bgt.n	8009ec6 <_printf_i+0x212>
 8009ee0:	e7eb      	b.n	8009eba <_printf_i+0x206>
 8009ee2:	2500      	movs	r5, #0
 8009ee4:	f104 0619 	add.w	r6, r4, #25
 8009ee8:	e7f5      	b.n	8009ed6 <_printf_i+0x222>
 8009eea:	bf00      	nop
 8009eec:	0800aa7a 	.word	0x0800aa7a
 8009ef0:	0800aa8b 	.word	0x0800aa8b

08009ef4 <memmove>:
 8009ef4:	4288      	cmp	r0, r1
 8009ef6:	b510      	push	{r4, lr}
 8009ef8:	eb01 0402 	add.w	r4, r1, r2
 8009efc:	d902      	bls.n	8009f04 <memmove+0x10>
 8009efe:	4284      	cmp	r4, r0
 8009f00:	4623      	mov	r3, r4
 8009f02:	d807      	bhi.n	8009f14 <memmove+0x20>
 8009f04:	1e43      	subs	r3, r0, #1
 8009f06:	42a1      	cmp	r1, r4
 8009f08:	d008      	beq.n	8009f1c <memmove+0x28>
 8009f0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f12:	e7f8      	b.n	8009f06 <memmove+0x12>
 8009f14:	4402      	add	r2, r0
 8009f16:	4601      	mov	r1, r0
 8009f18:	428a      	cmp	r2, r1
 8009f1a:	d100      	bne.n	8009f1e <memmove+0x2a>
 8009f1c:	bd10      	pop	{r4, pc}
 8009f1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f26:	e7f7      	b.n	8009f18 <memmove+0x24>

08009f28 <_sbrk_r>:
 8009f28:	b538      	push	{r3, r4, r5, lr}
 8009f2a:	4d06      	ldr	r5, [pc, #24]	@ (8009f44 <_sbrk_r+0x1c>)
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	4604      	mov	r4, r0
 8009f30:	4608      	mov	r0, r1
 8009f32:	602b      	str	r3, [r5, #0]
 8009f34:	f7f8 fee2 	bl	8002cfc <_sbrk>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_sbrk_r+0x1a>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_sbrk_r+0x1a>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	200195cc 	.word	0x200195cc

08009f48 <_realloc_r>:
 8009f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	4615      	mov	r5, r2
 8009f50:	460c      	mov	r4, r1
 8009f52:	b921      	cbnz	r1, 8009f5e <_realloc_r+0x16>
 8009f54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f58:	4611      	mov	r1, r2
 8009f5a:	f7ff bc59 	b.w	8009810 <_malloc_r>
 8009f5e:	b92a      	cbnz	r2, 8009f6c <_realloc_r+0x24>
 8009f60:	f7ff fbea 	bl	8009738 <_free_r>
 8009f64:	2400      	movs	r4, #0
 8009f66:	4620      	mov	r0, r4
 8009f68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f6c:	f000 f81a 	bl	8009fa4 <_malloc_usable_size_r>
 8009f70:	4285      	cmp	r5, r0
 8009f72:	4606      	mov	r6, r0
 8009f74:	d802      	bhi.n	8009f7c <_realloc_r+0x34>
 8009f76:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009f7a:	d8f4      	bhi.n	8009f66 <_realloc_r+0x1e>
 8009f7c:	4629      	mov	r1, r5
 8009f7e:	4640      	mov	r0, r8
 8009f80:	f7ff fc46 	bl	8009810 <_malloc_r>
 8009f84:	4607      	mov	r7, r0
 8009f86:	2800      	cmp	r0, #0
 8009f88:	d0ec      	beq.n	8009f64 <_realloc_r+0x1c>
 8009f8a:	42b5      	cmp	r5, r6
 8009f8c:	462a      	mov	r2, r5
 8009f8e:	4621      	mov	r1, r4
 8009f90:	bf28      	it	cs
 8009f92:	4632      	movcs	r2, r6
 8009f94:	f7ff fbc2 	bl	800971c <memcpy>
 8009f98:	4621      	mov	r1, r4
 8009f9a:	4640      	mov	r0, r8
 8009f9c:	f7ff fbcc 	bl	8009738 <_free_r>
 8009fa0:	463c      	mov	r4, r7
 8009fa2:	e7e0      	b.n	8009f66 <_realloc_r+0x1e>

08009fa4 <_malloc_usable_size_r>:
 8009fa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fa8:	1f18      	subs	r0, r3, #4
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	bfbc      	itt	lt
 8009fae:	580b      	ldrlt	r3, [r1, r0]
 8009fb0:	18c0      	addlt	r0, r0, r3
 8009fb2:	4770      	bx	lr

08009fb4 <_init>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	bf00      	nop
 8009fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fba:	bc08      	pop	{r3}
 8009fbc:	469e      	mov	lr, r3
 8009fbe:	4770      	bx	lr

08009fc0 <_fini>:
 8009fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fc2:	bf00      	nop
 8009fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fc6:	bc08      	pop	{r3}
 8009fc8:	469e      	mov	lr, r3
 8009fca:	4770      	bx	lr
